(get-info :version)
; (:version "4.8.7")
; Started: 2024-11-17 20:10:05
; Silicon.version: 1.1-SNAPSHOT (4d756c79+)
; Input file: /silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Set<$Ref> 0)
(declare-sort Set<Bool> 0)
(declare-sort Set<$Snap> 0)
(declare-sort $FVF<left> 0)
(declare-sort $FVF<right> 0)
(declare-sort $FVF<is_marked> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<left>To$Snap ($FVF<left>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<left> ($Snap) $FVF<left>)
(assert (forall ((x $FVF<left>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<left>($SortWrappers.$FVF<left>To$Snap x)))
    :pattern (($SortWrappers.$FVF<left>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<left>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<left>To$Snap($SortWrappers.$SnapTo$FVF<left> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<left> x))
    :qid |$Snap.$FVF<left>To$SnapTo$FVF<left>|
    )))
(declare-fun $SortWrappers.$FVF<right>To$Snap ($FVF<right>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<right> ($Snap) $FVF<right>)
(assert (forall ((x $FVF<right>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<right>($SortWrappers.$FVF<right>To$Snap x)))
    :pattern (($SortWrappers.$FVF<right>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<right>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<right>To$Snap($SortWrappers.$SnapTo$FVF<right> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<right> x))
    :qid |$Snap.$FVF<right>To$SnapTo$FVF<right>|
    )))
(declare-fun $SortWrappers.$FVF<is_marked>To$Snap ($FVF<is_marked>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<is_marked> ($Snap) $FVF<is_marked>)
(assert (forall ((x $FVF<is_marked>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<is_marked>($SortWrappers.$FVF<is_marked>To$Snap x)))
    :pattern (($SortWrappers.$FVF<is_marked>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<is_marked>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<is_marked>To$Snap($SortWrappers.$SnapTo$FVF<is_marked> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<is_marked> x))
    :qid |$Snap.$FVF<is_marked>To$SnapTo$FVF<is_marked>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_skolem_diff (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
; /field_value_functions_declarations.smt2 [left: Ref]
(declare-fun $FVF.domain_left ($FVF<left>) Set<$Ref>)
(declare-fun $FVF.lookup_left ($FVF<left> $Ref) $Ref)
(declare-fun $FVF.after_left ($FVF<left> $FVF<left>) Bool)
(declare-fun $FVF.loc_left ($Ref $Ref) Bool)
(declare-fun $FVF.perm_left ($FPM $Ref) $Perm)
(declare-const $fvfTOP_left $FVF<left>)
; /field_value_functions_declarations.smt2 [right: Ref]
(declare-fun $FVF.domain_right ($FVF<right>) Set<$Ref>)
(declare-fun $FVF.lookup_right ($FVF<right> $Ref) $Ref)
(declare-fun $FVF.after_right ($FVF<right> $FVF<right>) Bool)
(declare-fun $FVF.loc_right ($Ref $Ref) Bool)
(declare-fun $FVF.perm_right ($FPM $Ref) $Perm)
(declare-const $fvfTOP_right $FVF<right>)
; /field_value_functions_declarations.smt2 [is_marked: Bool]
(declare-fun $FVF.domain_is_marked ($FVF<is_marked>) Set<$Ref>)
(declare-fun $FVF.lookup_is_marked ($FVF<is_marked> $Ref) Bool)
(declare-fun $FVF.after_is_marked ($FVF<is_marked> $FVF<is_marked>) Bool)
(declare-fun $FVF.loc_is_marked (Bool $Ref) Bool)
(declare-fun $FVF.perm_is_marked ($FPM $Ref) $Perm)
(declare-const $fvfTOP_is_marked $FVF<is_marked>)
; Declaring symbols related to program functions (from program analysis)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Bool)) (!
  (not (Set_in o (as Set_empty  Set<Bool>)))
  :pattern ((Set_in o (as Set_empty  Set<Bool>)))
  )))
(assert (forall ((s Set<Bool>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Bool))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Bool)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Bool) (o Bool)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Bool)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Bool>) (x Bool) (o Bool)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Bool>) (x Bool)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Bool>) (x Bool) (y Bool)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Bool>) (x Bool)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Bool>) (x Bool)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (o Bool)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (y Bool)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (y Bool)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (o Bool)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (o Bool)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>) (y Bool)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (=
    (Set_subset a b)
    (forall ((o Bool)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Bool>) (b Set<Bool>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
; /field_value_functions_axioms.smt2 [left: Ref]
(assert (forall ((vs $FVF<left>) (ws $FVF<left>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_left vs) ($FVF.domain_left ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_left vs))
            (= ($FVF.lookup_left vs x) ($FVF.lookup_left ws x)))
          :pattern (($FVF.lookup_left vs x) ($FVF.lookup_left ws x))
          :qid |qp.$FVF<left>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<left>To$Snap vs)
              ($SortWrappers.$FVF<left>To$Snap ws)
              )
    :qid |qp.$FVF<left>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_left pm r))
    :pattern (($FVF.perm_left pm r)))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_left f r) true)
    :pattern (($FVF.loc_left f r)))))
; /field_value_functions_axioms.smt2 [right: Ref]
(assert (forall ((vs $FVF<right>) (ws $FVF<right>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_right vs) ($FVF.domain_right ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_right vs))
            (= ($FVF.lookup_right vs x) ($FVF.lookup_right ws x)))
          :pattern (($FVF.lookup_right vs x) ($FVF.lookup_right ws x))
          :qid |qp.$FVF<right>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<right>To$Snap vs)
              ($SortWrappers.$FVF<right>To$Snap ws)
              )
    :qid |qp.$FVF<right>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_right pm r))
    :pattern (($FVF.perm_right pm r)))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_right f r) true)
    :pattern (($FVF.loc_right f r)))))
; /field_value_functions_axioms.smt2 [is_marked: Bool]
(assert (forall ((vs $FVF<is_marked>) (ws $FVF<is_marked>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_is_marked vs) ($FVF.domain_is_marked ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_is_marked vs))
            (= ($FVF.lookup_is_marked vs x) ($FVF.lookup_is_marked ws x)))
          :pattern (($FVF.lookup_is_marked vs x) ($FVF.lookup_is_marked ws x))
          :qid |qp.$FVF<is_marked>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<is_marked>To$Snap vs)
              ($SortWrappers.$FVF<is_marked>To$Snap ws)
              )
    :qid |qp.$FVF<is_marked>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_is_marked pm r))
    :pattern (($FVF.perm_is_marked pm r)))))
(assert (forall ((r $Ref) (f Bool)) (!
    (= ($FVF.loc_is_marked f r) true)
    :pattern (($FVF.loc_is_marked f r)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- trav_rec ----------
(declare-const nodes@0@01 Set<$Ref>)
(declare-const node@1@01 $Ref)
(declare-const nodes@2@01 Set<$Ref>)
(declare-const node@3@01 $Ref)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@4@01 $Snap)
(assert (= $t@4@01 ($Snap.combine ($Snap.first $t@4@01) ($Snap.second $t@4@01))))
(assert (= ($Snap.first $t@4@01) $Snap.unit))
; [eval] (node in nodes)
(assert (Set_in node@3@01 nodes@2@01))
(assert (=
  ($Snap.second $t@4@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@4@01))
    ($Snap.second ($Snap.second $t@4@01)))))
(assert (= ($Snap.first ($Snap.second $t@4@01)) $Snap.unit))
; [eval] !((null in nodes))
; [eval] (null in nodes)
(assert (not (Set_in $Ref.null nodes@2@01)))
(assert (=
  ($Snap.second ($Snap.second $t@4@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@4@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@4@01))))))
(declare-const n@5@01 $Ref)
(push) ; 2
; [eval] (n in nodes)
(assert (Set_in n@5@01 nodes@2@01))
(pop) ; 2
(declare-fun inv@6@01 ($Ref) $Ref)
(declare-fun img@7@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@5@01 $Ref) (n2@5@01 $Ref)) (!
  (=>
    (and
      (Set_in n1@5@01 nodes@2@01)
      (Set_in n2@5@01 nodes@2@01)
      (= n1@5@01 n2@5@01))
    (= n1@5@01 n2@5@01))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@5@01 $Ref)) (!
  (=>
    (Set_in n@5@01 nodes@2@01)
    (and (= (inv@6@01 n@5@01) n@5@01) (img@7@01 n@5@01)))
  :pattern ((Set_in n@5@01 nodes@2@01))
  :pattern ((inv@6@01 n@5@01))
  :pattern ((img@7@01 n@5@01))
  :qid |quant-u-1|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01)) (= (inv@6@01 r) r))
  :pattern ((inv@6@01 r))
  :qid |left-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@5@01 $Ref)) (!
  (=> (Set_in n@5@01 nodes@2@01) (not (= n@5@01 $Ref.null)))
  :pattern ((Set_in n@5@01 nodes@2@01))
  :pattern ((inv@6@01 n@5@01))
  :pattern ((img@7@01 n@5@01))
  :qid |left-permImpliesNonNull|)))
(declare-const sm@8@01 $FVF<left>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@6@01 r) nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) r) r))
  :pattern ((inv@6@01 r))
  :qid |quant-u-2|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@4@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))))
(declare-const n$0@9@01 $Ref)
(push) ; 2
; [eval] (n$0 in nodes)
(assert (Set_in n$0@9@01 nodes@2@01))
(pop) ; 2
(declare-fun inv@10@01 ($Ref) $Ref)
(declare-fun img@11@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$01@9@01 $Ref) (n$02@9@01 $Ref)) (!
  (=>
    (and
      (Set_in n$01@9@01 nodes@2@01)
      (Set_in n$02@9@01 nodes@2@01)
      (= n$01@9@01 n$02@9@01))
    (= n$01@9@01 n$02@9@01))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@9@01 $Ref)) (!
  (=>
    (Set_in n$0@9@01 nodes@2@01)
    (and (= (inv@10@01 n$0@9@01) n$0@9@01) (img@11@01 n$0@9@01)))
  :pattern ((Set_in n$0@9@01 nodes@2@01))
  :pattern ((inv@10@01 n$0@9@01))
  :pattern ((img@11@01 n$0@9@01))
  :qid |quant-u-4|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01)) (= (inv@10@01 r) r))
  :pattern ((inv@10@01 r))
  :qid |right-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$0@9@01 $Ref)) (!
  (=> (Set_in n$0@9@01 nodes@2@01) (not (= n$0@9@01 $Ref.null)))
  :pattern ((Set_in n$0@9@01 nodes@2@01))
  :pattern ((inv@10@01 n$0@9@01))
  :pattern ((img@11@01 n$0@9@01))
  :qid |right-permImpliesNonNull|)))
(declare-const sm@12@01 $FVF<right>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@10@01 r) nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) r) r))
  :pattern ((inv@10@01 r))
  :qid |quant-u-5|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01))))))))
(declare-const n$1@13@01 $Ref)
(push) ; 2
; [eval] (n$1 in nodes)
(assert (Set_in n$1@13@01 nodes@2@01))
(pop) ; 2
(declare-fun inv@14@01 ($Ref) $Ref)
(declare-fun img@15@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$11@13@01 $Ref) (n$12@13@01 $Ref)) (!
  (=>
    (and
      (Set_in n$11@13@01 nodes@2@01)
      (Set_in n$12@13@01 nodes@2@01)
      (= n$11@13@01 n$12@13@01))
    (= n$11@13@01 n$12@13@01))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@13@01 $Ref)) (!
  (=>
    (Set_in n$1@13@01 nodes@2@01)
    (and (= (inv@14@01 n$1@13@01) n$1@13@01) (img@15@01 n$1@13@01)))
  :pattern ((Set_in n$1@13@01 nodes@2@01))
  :pattern ((inv@14@01 n$1@13@01))
  :pattern ((img@15@01 n$1@13@01))
  :qid |quant-u-7|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01)) (= (inv@14@01 r) r))
  :pattern ((inv@14@01 r))
  :qid |is_marked-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@13@01 $Ref)) (!
  (=> (Set_in n$1@13@01 nodes@2@01) (not (= n$1@13@01 $Ref.null)))
  :pattern ((Set_in n$1@13@01 nodes@2@01))
  :pattern ((inv@14@01 n$1@13@01))
  :pattern ((img@15@01 n$1@13@01))
  :qid |is_marked-permImpliesNonNull|)))
(declare-const sm@16@01 $FVF<is_marked>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@14@01 r) nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r) r))
  :pattern ((inv@14@01 r))
  :qid |quant-u-8|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01))))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.left in nodes) } { (n$2 in nodes), n$2.left } (n$2 in nodes) && n$2.left != null ==> (n$2.left in nodes))
(declare-const n$2@17@01 $Ref)
(push) ; 2
; [eval] (n$2 in nodes) && n$2.left != null ==> (n$2.left in nodes)
; [eval] (n$2 in nodes) && n$2.left != null
; [eval] (n$2 in nodes)
(push) ; 3
; [then-branch: 0 | !(n$2@17@01 in nodes@2@01) | live]
; [else-branch: 0 | n$2@17@01 in nodes@2@01 | live]
(push) ; 4
; [then-branch: 0 | !(n$2@17@01 in nodes@2@01)]
(assert (not (Set_in n$2@17@01 nodes@2@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 0 | n$2@17@01 in nodes@2@01]
(assert (Set_in n$2@17@01 nodes@2@01))
; [eval] n$2.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) n$2@17@01))
(push) ; 5
(assert (not (and (img@7@01 n$2@17@01) (Set_in (inv@6@01 n$2@17@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (Set_in n$2@17@01 nodes@2@01)
  (and
    (Set_in n$2@17@01 nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) n$2@17@01))))
(assert (or (Set_in n$2@17@01 nodes@2@01) (not (Set_in n$2@17@01 nodes@2@01))))
(push) ; 3
; [then-branch: 1 | n$2@17@01 in nodes@2@01 && Lookup(left, sm@8@01, n$2@17@01) != Null | live]
; [else-branch: 1 | !(n$2@17@01 in nodes@2@01 && Lookup(left, sm@8@01, n$2@17@01) != Null) | live]
(push) ; 4
; [then-branch: 1 | n$2@17@01 in nodes@2@01 && Lookup(left, sm@8@01, n$2@17@01) != Null]
(assert (and
  (Set_in n$2@17@01 nodes@2@01)
  (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) $Ref.null))))
; [eval] (n$2.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) n$2@17@01))
(push) ; 5
(assert (not (and (img@7@01 n$2@17@01) (Set_in (inv@6@01 n$2@17@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 1 | !(n$2@17@01 in nodes@2@01 && Lookup(left, sm@8@01, n$2@17@01) != Null)]
(assert (not
  (and
    (Set_in n$2@17@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (and
    (Set_in n$2@17@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) $Ref.null)))
  (and
    (Set_in n$2@17@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) n$2@17@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@17@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) $Ref.null))))
  (and
    (Set_in n$2@17@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@17@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@17@01 nodes@2@01)
      (and
        (Set_in n$2@17@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) n$2@17@01)))
    (or (Set_in n$2@17@01 nodes@2@01) (not (Set_in n$2@17@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$2@17@01 nodes@2@01)
        (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) $Ref.null)))
      (and
        (Set_in n$2@17@01 nodes@2@01)
        (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) n$2@17@01)))
    (or
      (not
        (and
          (Set_in n$2@17@01 nodes@2@01)
          (not
            (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) $Ref.null))))
      (and
        (Set_in n$2@17@01 nodes@2@01)
        (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) nodes@2@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(assert (forall ((n$2@17@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@17@01 nodes@2@01)
      (and
        (Set_in n$2@17@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) n$2@17@01)))
    (or (Set_in n$2@17@01 nodes@2@01) (not (Set_in n$2@17@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$2@17@01 nodes@2@01)
        (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) $Ref.null)))
      (and
        (Set_in n$2@17@01 nodes@2@01)
        (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) n$2@17@01)))
    (or
      (not
        (and
          (Set_in n$2@17@01 nodes@2@01)
          (not
            (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) $Ref.null))))
      (and
        (Set_in n$2@17@01 nodes@2@01)
        (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) $Ref.null)))))
  :pattern ((Set_in n$2@17@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) n$2@17@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(assert (forall ((n$2@17@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@17@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) nodes@2@01))
  :pattern ((Set_in n$2@17@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@17@01) n$2@17@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))))
  $Snap.unit))
; [eval] (forall n$3: Ref :: { (n$3.right in nodes) } { (n$3 in nodes), n$3.right } (n$3 in nodes) && n$3.right != null ==> (n$3.right in nodes))
(declare-const n$3@18@01 $Ref)
(push) ; 2
; [eval] (n$3 in nodes) && n$3.right != null ==> (n$3.right in nodes)
; [eval] (n$3 in nodes) && n$3.right != null
; [eval] (n$3 in nodes)
(push) ; 3
; [then-branch: 2 | !(n$3@18@01 in nodes@2@01) | live]
; [else-branch: 2 | n$3@18@01 in nodes@2@01 | live]
(push) ; 4
; [then-branch: 2 | !(n$3@18@01 in nodes@2@01)]
(assert (not (Set_in n$3@18@01 nodes@2@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 2 | n$3@18@01 in nodes@2@01]
(assert (Set_in n$3@18@01 nodes@2@01))
; [eval] n$3.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) n$3@18@01))
(push) ; 5
(assert (not (and (img@11@01 n$3@18@01) (Set_in (inv@10@01 n$3@18@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (Set_in n$3@18@01 nodes@2@01)
  (and
    (Set_in n$3@18@01 nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) n$3@18@01))))
(assert (or (Set_in n$3@18@01 nodes@2@01) (not (Set_in n$3@18@01 nodes@2@01))))
(push) ; 3
; [then-branch: 3 | n$3@18@01 in nodes@2@01 && Lookup(right, sm@12@01, n$3@18@01) != Null | live]
; [else-branch: 3 | !(n$3@18@01 in nodes@2@01 && Lookup(right, sm@12@01, n$3@18@01) != Null) | live]
(push) ; 4
; [then-branch: 3 | n$3@18@01 in nodes@2@01 && Lookup(right, sm@12@01, n$3@18@01) != Null]
(assert (and
  (Set_in n$3@18@01 nodes@2@01)
  (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) $Ref.null))))
; [eval] (n$3.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) n$3@18@01))
(push) ; 5
(assert (not (and (img@11@01 n$3@18@01) (Set_in (inv@10@01 n$3@18@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 3 | !(n$3@18@01 in nodes@2@01 && Lookup(right, sm@12@01, n$3@18@01) != Null)]
(assert (not
  (and
    (Set_in n$3@18@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (and
    (Set_in n$3@18@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) $Ref.null)))
  (and
    (Set_in n$3@18@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) n$3@18@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$3@18@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) $Ref.null))))
  (and
    (Set_in n$3@18@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$3@18@01 $Ref)) (!
  (and
    (=>
      (Set_in n$3@18@01 nodes@2@01)
      (and
        (Set_in n$3@18@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) n$3@18@01)))
    (or (Set_in n$3@18@01 nodes@2@01) (not (Set_in n$3@18@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$3@18@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) $Ref.null)))
      (and
        (Set_in n$3@18@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) n$3@18@01)))
    (or
      (not
        (and
          (Set_in n$3@18@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01)
              $Ref.null))))
      (and
        (Set_in n$3@18@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) nodes@2@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(assert (forall ((n$3@18@01 $Ref)) (!
  (and
    (=>
      (Set_in n$3@18@01 nodes@2@01)
      (and
        (Set_in n$3@18@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) n$3@18@01)))
    (or (Set_in n$3@18@01 nodes@2@01) (not (Set_in n$3@18@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$3@18@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) $Ref.null)))
      (and
        (Set_in n$3@18@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) n$3@18@01)))
    (or
      (not
        (and
          (Set_in n$3@18@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01)
              $Ref.null))))
      (and
        (Set_in n$3@18@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) $Ref.null)))))
  :pattern ((Set_in n$3@18@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) n$3@18@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(assert (forall ((n$3@18@01 $Ref)) (!
  (=>
    (and
      (Set_in n$3@18@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) nodes@2@01))
  :pattern ((Set_in n$3@18@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@18@01) n$3@18@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))))
  $Snap.unit))
; [eval] !node.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) node@3@01) node@3@01))
(push) ; 2
(assert (not (and (img@15@01 node@3@01) (Set_in (inv@14@01 node@3@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
(assert (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) node@3@01)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@19@01 $Snap)
(assert (= $t@19@01 ($Snap.combine ($Snap.first $t@19@01) ($Snap.second $t@19@01))))
(assert (= ($Snap.first $t@19@01) $Snap.unit))
; [eval] (node in nodes)
(assert (=
  ($Snap.second $t@19@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@19@01))
    ($Snap.second ($Snap.second $t@19@01)))))
(assert (= ($Snap.first ($Snap.second $t@19@01)) $Snap.unit))
; [eval] !((null in nodes))
; [eval] (null in nodes)
(assert (=
  ($Snap.second ($Snap.second $t@19@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@19@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))
(declare-const n$4@20@01 $Ref)
(push) ; 3
; [eval] (n$4 in nodes)
(assert (Set_in n$4@20@01 nodes@2@01))
(pop) ; 3
(declare-fun inv@21@01 ($Ref) $Ref)
(declare-fun img@22@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$41@20@01 $Ref) (n$42@20@01 $Ref)) (!
  (=>
    (and
      (Set_in n$41@20@01 nodes@2@01)
      (Set_in n$42@20@01 nodes@2@01)
      (= n$41@20@01 n$42@20@01))
    (= n$41@20@01 n$42@20@01))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@20@01 $Ref)) (!
  (=>
    (Set_in n$4@20@01 nodes@2@01)
    (and (= (inv@21@01 n$4@20@01) n$4@20@01) (img@22@01 n$4@20@01)))
  :pattern ((Set_in n$4@20@01 nodes@2@01))
  :pattern ((inv@21@01 n$4@20@01))
  :pattern ((img@22@01 n$4@20@01))
  :qid |quant-u-10|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@22@01 r) (Set_in (inv@21@01 r) nodes@2@01)) (= (inv@21@01 r) r))
  :pattern ((inv@21@01 r))
  :qid |left-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$4@20@01 $Ref)) (!
  (=> (Set_in n$4@20@01 nodes@2@01) (not (= n$4@20@01 $Ref.null)))
  :pattern ((Set_in n$4@20@01 nodes@2@01))
  :pattern ((inv@21@01 n$4@20@01))
  :pattern ((img@22@01 n$4@20@01))
  :qid |left-permImpliesNonNull|)))
(declare-const sm@23@01 $FVF<left>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@22@01 r) (Set_in (inv@21@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@23@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@21@01 r) nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@23@01  $FVF<left>) r) r))
  :pattern ((inv@21@01 r))
  :qid |quant-u-11|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@19@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))
(declare-const n$5@24@01 $Ref)
(push) ; 3
; [eval] (n$5 in nodes)
(assert (Set_in n$5@24@01 nodes@2@01))
(pop) ; 3
(declare-fun inv@25@01 ($Ref) $Ref)
(declare-fun img@26@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$51@24@01 $Ref) (n$52@24@01 $Ref)) (!
  (=>
    (and
      (Set_in n$51@24@01 nodes@2@01)
      (Set_in n$52@24@01 nodes@2@01)
      (= n$51@24@01 n$52@24@01))
    (= n$51@24@01 n$52@24@01))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$5@24@01 $Ref)) (!
  (=>
    (Set_in n$5@24@01 nodes@2@01)
    (and (= (inv@25@01 n$5@24@01) n$5@24@01) (img@26@01 n$5@24@01)))
  :pattern ((Set_in n$5@24@01 nodes@2@01))
  :pattern ((inv@25@01 n$5@24@01))
  :pattern ((img@26@01 n$5@24@01))
  :qid |quant-u-13|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@26@01 r) (Set_in (inv@25@01 r) nodes@2@01)) (= (inv@25@01 r) r))
  :pattern ((inv@25@01 r))
  :qid |right-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$5@24@01 $Ref)) (!
  (=> (Set_in n$5@24@01 nodes@2@01) (not (= n$5@24@01 $Ref.null)))
  :pattern ((Set_in n$5@24@01 nodes@2@01))
  :pattern ((inv@25@01 n$5@24@01))
  :pattern ((img@26@01 n$5@24@01))
  :qid |right-permImpliesNonNull|)))
(declare-const sm@27@01 $FVF<right>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@26@01 r) (Set_in (inv@25@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@27@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@25@01 r) nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@27@01  $FVF<right>) r) r))
  :pattern ((inv@25@01 r))
  :qid |quant-u-14|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))
(declare-const n$6@28@01 $Ref)
(push) ; 3
; [eval] (n$6 in nodes)
(assert (Set_in n$6@28@01 nodes@2@01))
(pop) ; 3
(declare-fun inv@29@01 ($Ref) $Ref)
(declare-fun img@30@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$61@28@01 $Ref) (n$62@28@01 $Ref)) (!
  (=>
    (and
      (Set_in n$61@28@01 nodes@2@01)
      (Set_in n$62@28@01 nodes@2@01)
      (= n$61@28@01 n$62@28@01))
    (= n$61@28@01 n$62@28@01))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$6@28@01 $Ref)) (!
  (=>
    (Set_in n$6@28@01 nodes@2@01)
    (and (= (inv@29@01 n$6@28@01) n$6@28@01) (img@30@01 n$6@28@01)))
  :pattern ((Set_in n$6@28@01 nodes@2@01))
  :pattern ((inv@29@01 n$6@28@01))
  :pattern ((img@30@01 n$6@28@01))
  :qid |quant-u-16|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@30@01 r) (Set_in (inv@29@01 r) nodes@2@01)) (= (inv@29@01 r) r))
  :pattern ((inv@29@01 r))
  :qid |is_marked-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$6@28@01 $Ref)) (!
  (=> (Set_in n$6@28@01 nodes@2@01) (not (= n$6@28@01 $Ref.null)))
  :pattern ((Set_in n$6@28@01 nodes@2@01))
  :pattern ((inv@29@01 n$6@28@01))
  :pattern ((img@30@01 n$6@28@01))
  :qid |is_marked-permImpliesNonNull|)))
(declare-const sm@31@01 $FVF<is_marked>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@01 r) (Set_in (inv@29@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@29@01 r) nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r) r))
  :pattern ((inv@29@01 r))
  :qid |quant-u-17|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))
  $Snap.unit))
; [eval] (forall n$7: Ref :: { (n$7.left in nodes) } { (n$7 in nodes), n$7.left } (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes))
(declare-const n$7@32@01 $Ref)
(push) ; 3
; [eval] (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes)
; [eval] (n$7 in nodes) && n$7.left != null
; [eval] (n$7 in nodes)
(push) ; 4
; [then-branch: 4 | !(n$7@32@01 in nodes@2@01) | live]
; [else-branch: 4 | n$7@32@01 in nodes@2@01 | live]
(push) ; 5
; [then-branch: 4 | !(n$7@32@01 in nodes@2@01)]
(assert (not (Set_in n$7@32@01 nodes@2@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 4 | n$7@32@01 in nodes@2@01]
(assert (Set_in n$7@32@01 nodes@2@01))
; [eval] n$7.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@22@01 r) (Set_in (inv@21@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@23@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r))
    :qid |qp.fvfValDef6|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef7|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) n$7@32@01))
(push) ; 6
(assert (not (and (img@22@01 n$7@32@01) (Set_in (inv@21@01 n$7@32@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@22@01 r) (Set_in (inv@21@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@23@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef7|)))
(assert (=>
  (Set_in n$7@32@01 nodes@2@01)
  (and
    (Set_in n$7@32@01 nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) n$7@32@01))))
(assert (or (Set_in n$7@32@01 nodes@2@01) (not (Set_in n$7@32@01 nodes@2@01))))
(push) ; 4
; [then-branch: 5 | n$7@32@01 in nodes@2@01 && Lookup(left, sm@23@01, n$7@32@01) != Null | live]
; [else-branch: 5 | !(n$7@32@01 in nodes@2@01 && Lookup(left, sm@23@01, n$7@32@01) != Null) | live]
(push) ; 5
; [then-branch: 5 | n$7@32@01 in nodes@2@01 && Lookup(left, sm@23@01, n$7@32@01) != Null]
(assert (and
  (Set_in n$7@32@01 nodes@2@01)
  (not (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) $Ref.null))))
; [eval] (n$7.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@22@01 r) (Set_in (inv@21@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@23@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r))
    :qid |qp.fvfValDef6|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef7|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) n$7@32@01))
(push) ; 6
(assert (not (and (img@22@01 n$7@32@01) (Set_in (inv@21@01 n$7@32@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 5 | !(n$7@32@01 in nodes@2@01 && Lookup(left, sm@23@01, n$7@32@01) != Null)]
(assert (not
  (and
    (Set_in n$7@32@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@22@01 r) (Set_in (inv@21@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@23@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef7|)))
(assert (=>
  (and
    (Set_in n$7@32@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) $Ref.null)))
  (and
    (Set_in n$7@32@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) n$7@32@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$7@32@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) $Ref.null))))
  (and
    (Set_in n$7@32@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@22@01 r) (Set_in (inv@21@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@23@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef7|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$7@32@01 $Ref)) (!
  (and
    (=>
      (Set_in n$7@32@01 nodes@2@01)
      (and
        (Set_in n$7@32@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) n$7@32@01)))
    (or (Set_in n$7@32@01 nodes@2@01) (not (Set_in n$7@32@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$7@32@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) $Ref.null)))
      (and
        (Set_in n$7@32@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) n$7@32@01)))
    (or
      (not
        (and
          (Set_in n$7@32@01 nodes@2@01)
          (not
            (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) $Ref.null))))
      (and
        (Set_in n$7@32@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) nodes@2@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@32@01 $Ref)) (!
  (and
    (=>
      (Set_in n$7@32@01 nodes@2@01)
      (and
        (Set_in n$7@32@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) n$7@32@01)))
    (or (Set_in n$7@32@01 nodes@2@01) (not (Set_in n$7@32@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$7@32@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) $Ref.null)))
      (and
        (Set_in n$7@32@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) n$7@32@01)))
    (or
      (not
        (and
          (Set_in n$7@32@01 nodes@2@01)
          (not
            (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) $Ref.null))))
      (and
        (Set_in n$7@32@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) $Ref.null)))))
  :pattern ((Set_in n$7@32@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) n$7@32@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@32@01 $Ref)) (!
  (=>
    (and
      (Set_in n$7@32@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) nodes@2@01))
  :pattern ((Set_in n$7@32@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@23@01  $FVF<left>) n$7@32@01) n$7@32@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))
  $Snap.unit))
; [eval] (forall n$8: Ref :: { (n$8.right in nodes) } { (n$8 in nodes), n$8.right } (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes))
(declare-const n$8@33@01 $Ref)
(push) ; 3
; [eval] (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes)
; [eval] (n$8 in nodes) && n$8.right != null
; [eval] (n$8 in nodes)
(push) ; 4
; [then-branch: 6 | !(n$8@33@01 in nodes@2@01) | live]
; [else-branch: 6 | n$8@33@01 in nodes@2@01 | live]
(push) ; 5
; [then-branch: 6 | !(n$8@33@01 in nodes@2@01)]
(assert (not (Set_in n$8@33@01 nodes@2@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 6 | n$8@33@01 in nodes@2@01]
(assert (Set_in n$8@33@01 nodes@2@01))
; [eval] n$8.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@26@01 r) (Set_in (inv@25@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@27@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef9|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) n$8@33@01))
(push) ; 6
(assert (not (and (img@26@01 n$8@33@01) (Set_in (inv@25@01 n$8@33@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@26@01 r) (Set_in (inv@25@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@27@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (=>
  (Set_in n$8@33@01 nodes@2@01)
  (and
    (Set_in n$8@33@01 nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) n$8@33@01))))
(assert (or (Set_in n$8@33@01 nodes@2@01) (not (Set_in n$8@33@01 nodes@2@01))))
(push) ; 4
; [then-branch: 7 | n$8@33@01 in nodes@2@01 && Lookup(right, sm@27@01, n$8@33@01) != Null | live]
; [else-branch: 7 | !(n$8@33@01 in nodes@2@01 && Lookup(right, sm@27@01, n$8@33@01) != Null) | live]
(push) ; 5
; [then-branch: 7 | n$8@33@01 in nodes@2@01 && Lookup(right, sm@27@01, n$8@33@01) != Null]
(assert (and
  (Set_in n$8@33@01 nodes@2@01)
  (not (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) $Ref.null))))
; [eval] (n$8.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@26@01 r) (Set_in (inv@25@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@27@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef9|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) n$8@33@01))
(push) ; 6
(assert (not (and (img@26@01 n$8@33@01) (Set_in (inv@25@01 n$8@33@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 7 | !(n$8@33@01 in nodes@2@01 && Lookup(right, sm@27@01, n$8@33@01) != Null)]
(assert (not
  (and
    (Set_in n$8@33@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@26@01 r) (Set_in (inv@25@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@27@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (=>
  (and
    (Set_in n$8@33@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) $Ref.null)))
  (and
    (Set_in n$8@33@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) n$8@33@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$8@33@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) $Ref.null))))
  (and
    (Set_in n$8@33@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@26@01 r) (Set_in (inv@25@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@27@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef9|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$8@33@01 $Ref)) (!
  (and
    (=>
      (Set_in n$8@33@01 nodes@2@01)
      (and
        (Set_in n$8@33@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) n$8@33@01)))
    (or (Set_in n$8@33@01 nodes@2@01) (not (Set_in n$8@33@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$8@33@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) $Ref.null)))
      (and
        (Set_in n$8@33@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) n$8@33@01)))
    (or
      (not
        (and
          (Set_in n$8@33@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01)
              $Ref.null))))
      (and
        (Set_in n$8@33@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) nodes@2@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@33@01 $Ref)) (!
  (and
    (=>
      (Set_in n$8@33@01 nodes@2@01)
      (and
        (Set_in n$8@33@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) n$8@33@01)))
    (or (Set_in n$8@33@01 nodes@2@01) (not (Set_in n$8@33@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$8@33@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) $Ref.null)))
      (and
        (Set_in n$8@33@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) n$8@33@01)))
    (or
      (not
        (and
          (Set_in n$8@33@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01)
              $Ref.null))))
      (and
        (Set_in n$8@33@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) $Ref.null)))))
  :pattern ((Set_in n$8@33@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) n$8@33@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@33@01 $Ref)) (!
  (=>
    (and
      (Set_in n$8@33@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) nodes@2@01))
  :pattern ((Set_in n$8@33@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@27@01  $FVF<right>) n$8@33@01) n$8@33@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } (n in nodes) ==> old(n.is_marked) ==> n.is_marked)
(declare-const n@34@01 $Ref)
(push) ; 3
; [eval] (n in nodes) ==> old(n.is_marked) ==> n.is_marked
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 8 | n@34@01 in nodes@2@01 | live]
; [else-branch: 8 | !(n@34@01 in nodes@2@01) | live]
(push) ; 5
; [then-branch: 8 | n@34@01 in nodes@2@01]
(assert (Set_in n@34@01 nodes@2@01))
; [eval] old(n.is_marked) ==> n.is_marked
; [eval] old(n.is_marked)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@34@01) n@34@01))
(push) ; 6
(assert (not (and (img@15@01 n@34@01) (Set_in (inv@14@01 n@34@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 9 | Lookup(is_marked, sm@16@01, n@34@01) | live]
; [else-branch: 9 | !(Lookup(is_marked, sm@16@01, n@34@01)) | live]
(push) ; 7
; [then-branch: 9 | Lookup(is_marked, sm@16@01, n@34@01)]
(assert ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@34@01))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@30@01 r) (Set_in (inv@29@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r))
    :qid |qp.fvfValDef10|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef11|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@34@01) n@34@01))
(push) ; 8
(assert (not (and (img@30@01 n@34@01) (Set_in (inv@29@01 n@34@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 9 | !(Lookup(is_marked, sm@16@01, n@34@01))]
(assert (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@34@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@01 r) (Set_in (inv@29@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (=>
  ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@34@01)
  (and
    ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@34@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@34@01) n@34@01))))
; Joined path conditions
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@34@01))
  ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@34@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 8 | !(n@34@01 in nodes@2@01)]
(assert (not (Set_in n@34@01 nodes@2@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@01 r) (Set_in (inv@29@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (=>
  (Set_in n@34@01 nodes@2@01)
  (and
    (Set_in n@34@01 nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@34@01) n@34@01)
    (=>
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@34@01)
      (and
        ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@34@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@34@01) n@34@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@34@01))
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@34@01)))))
; Joined path conditions
(assert (or (not (Set_in n@34@01 nodes@2@01)) (Set_in n@34@01 nodes@2@01)))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@01 r) (Set_in (inv@29@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@34@01 $Ref)) (!
  (and
    (=>
      (Set_in n@34@01 nodes@2@01)
      (and
        (Set_in n@34@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@34@01) n@34@01)
        (=>
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@34@01)
          (and
            ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@34@01)
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@34@01) n@34@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@34@01))
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@34@01))))
    (or (not (Set_in n@34@01 nodes@2@01)) (Set_in n@34@01 nodes@2@01)))
  :pattern ((Set_in n@34@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@34@01) n@34@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102-aux|)))
(assert (forall ((n@34@01 $Ref)) (!
  (=>
    (and
      (Set_in n@34@01 nodes@2@01)
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@34@01))
    ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@34@01))
  :pattern ((Set_in n@34@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@34@01) n@34@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))
  $Snap.unit))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@30@01 r) (Set_in (inv@29@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r))
    :qid |qp.fvfValDef10|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef11|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) node@3@01) node@3@01))
(push) ; 3
(assert (not (and (img@30@01 node@3@01) (Set_in (inv@29@01 node@3@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) node@3@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.left } (n in nodes) ==> n.left == old(n.left))
(declare-const n@35@01 $Ref)
(push) ; 3
; [eval] (n in nodes) ==> n.left == old(n.left)
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 10 | n@35@01 in nodes@2@01 | live]
; [else-branch: 10 | !(n@35@01 in nodes@2@01) | live]
(push) ; 5
; [then-branch: 10 | n@35@01 in nodes@2@01]
(assert (Set_in n@35@01 nodes@2@01))
; [eval] n.left == old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@22@01 r) (Set_in (inv@21@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@23@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r))
    :qid |qp.fvfValDef6|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef7|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@35@01) n@35@01))
(push) ; 6
(assert (not (and (img@22@01 n@35@01) (Set_in (inv@21@01 n@35@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [eval] old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@35@01) n@35@01))
(push) ; 6
(assert (not (and (img@7@01 n@35@01) (Set_in (inv@6@01 n@35@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 10 | !(n@35@01 in nodes@2@01)]
(assert (not (Set_in n@35@01 nodes@2@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@22@01 r) (Set_in (inv@21@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@23@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (Set_in n@35@01 nodes@2@01)
  (and
    (Set_in n@35@01 nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@35@01) n@35@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@35@01) n@35@01))))
; Joined path conditions
(assert (or (not (Set_in n@35@01 nodes@2@01)) (Set_in n@35@01 nodes@2@01)))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@22@01 r) (Set_in (inv@21@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@23@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@35@01 $Ref)) (!
  (and
    (=>
      (Set_in n@35@01 nodes@2@01)
      (and
        (Set_in n@35@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@35@01) n@35@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@35@01) n@35@01)))
    (or (not (Set_in n@35@01 nodes@2@01)) (Set_in n@35@01 nodes@2@01)))
  :pattern ((Set_in n@35@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@35@01) n@35@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86-aux|)))
(assert (forall ((n@35@01 $Ref)) (!
  (=>
    (Set_in n@35@01 nodes@2@01)
    (=
      ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@35@01)
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@35@01)))
  :pattern ((Set_in n@35@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@35@01) n@35@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.right } (n in nodes) ==> n.right == old(n.right))
(declare-const n@36@01 $Ref)
(push) ; 3
; [eval] (n in nodes) ==> n.right == old(n.right)
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 11 | n@36@01 in nodes@2@01 | live]
; [else-branch: 11 | !(n@36@01 in nodes@2@01) | live]
(push) ; 5
; [then-branch: 11 | n@36@01 in nodes@2@01]
(assert (Set_in n@36@01 nodes@2@01))
; [eval] n.right == old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@26@01 r) (Set_in (inv@25@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@27@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef9|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@36@01) n@36@01))
(push) ; 6
(assert (not (and (img@26@01 n@36@01) (Set_in (inv@25@01 n@36@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [eval] old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@36@01) n@36@01))
(push) ; 6
(assert (not (and (img@11@01 n@36@01) (Set_in (inv@10@01 n@36@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 11 | !(n@36@01 in nodes@2@01)]
(assert (not (Set_in n@36@01 nodes@2@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@26@01 r) (Set_in (inv@25@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@27@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (Set_in n@36@01 nodes@2@01)
  (and
    (Set_in n@36@01 nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@36@01) n@36@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@36@01) n@36@01))))
; Joined path conditions
(assert (or (not (Set_in n@36@01 nodes@2@01)) (Set_in n@36@01 nodes@2@01)))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@26@01 r) (Set_in (inv@25@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@27@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@36@01 $Ref)) (!
  (and
    (=>
      (Set_in n@36@01 nodes@2@01)
      (and
        (Set_in n@36@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@36@01) n@36@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@36@01) n@36@01)))
    (or (not (Set_in n@36@01 nodes@2@01)) (Set_in n@36@01 nodes@2@01)))
  :pattern ((Set_in n@36@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@36@01) n@36@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89-aux|)))
(assert (forall ((n@36@01 $Ref)) (!
  (=>
    (Set_in n@36@01 nodes@2@01)
    (=
      ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@36@01)
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@36@01)))
  :pattern ((Set_in n@36@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@36@01) n@36@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.left.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked)
(declare-const n@37@01 $Ref)
(push) ; 3
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 12 | n@37@01 in nodes@2@01 | live]
; [else-branch: 12 | !(n@37@01 in nodes@2@01) | live]
(push) ; 5
; [then-branch: 12 | n@37@01 in nodes@2@01]
(assert (Set_in n@37@01 nodes@2@01))
; [eval] old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01) n@37@01))
(push) ; 6
(assert (not (and (img@15@01 n@37@01) (Set_in (inv@14@01 n@37@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 13 | Lookup(is_marked, sm@16@01, n@37@01) | live]
; [else-branch: 13 | !(Lookup(is_marked, sm@16@01, n@37@01)) | live]
(push) ; 7
; [then-branch: 13 | Lookup(is_marked, sm@16@01, n@37@01)]
(assert ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
(pop) ; 7
(push) ; 7
; [else-branch: 13 | !(Lookup(is_marked, sm@16@01, n@37@01))]
(assert (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@30@01 r) (Set_in (inv@29@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r))
    :qid |qp.fvfValDef10|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef11|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01) n@37@01))
(push) ; 8
(assert (not (and (img@30@01 n@37@01) (Set_in (inv@29@01 n@37@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@01 r) (Set_in (inv@29@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01) n@37@01))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
  ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01)))
(push) ; 6
; [then-branch: 14 | !(Lookup(is_marked, sm@16@01, n@37@01)) && Lookup(is_marked, sm@31@01, n@37@01) | live]
; [else-branch: 14 | !(!(Lookup(is_marked, sm@16@01, n@37@01)) && Lookup(is_marked, sm@31@01, n@37@01)) | live]
(push) ; 7
; [then-branch: 14 | !(Lookup(is_marked, sm@16@01, n@37@01)) && Lookup(is_marked, sm@31@01, n@37@01)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
  ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01)))
; [eval] n.left == null || n.left.is_marked
; [eval] n.left == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@22@01 r) (Set_in (inv@21@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@23@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r))
    :qid |qp.fvfValDef6|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef7|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01) n@37@01))
(push) ; 8
(assert (not (and (img@22@01 n@37@01) (Set_in (inv@21@01 n@37@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 15 | Lookup(left, sm@23@01, n@37@01) == Null | live]
; [else-branch: 15 | Lookup(left, sm@23@01, n@37@01) != Null | live]
(push) ; 9
; [then-branch: 15 | Lookup(left, sm@23@01, n@37@01) == Null]
(assert (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01) $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 15 | Lookup(left, sm@23@01, n@37@01) != Null]
(assert (not (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@22@01 r) (Set_in (inv@21@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@23@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r))
    :qid |qp.fvfValDef6|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef7|))))
(push) ; 10
(assert (not (and (img@22@01 n@37@01) (Set_in (inv@21@01 n@37@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@30@01 r) (Set_in (inv@29@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r))
    :qid |qp.fvfValDef10|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef11|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01)) ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01)))
(push) ; 10
(assert (not (and
  (img@30@01 ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01))
  (Set_in (inv@29@01 ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01)) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@22@01 r) (Set_in (inv@21@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@23@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@01 r) (Set_in (inv@29@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (=>
  (not (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01)) ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01)))))
(assert (or
  (not (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01) $Ref.null))
  (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01) $Ref.null)))
(pop) ; 7
(push) ; 7
; [else-branch: 14 | !(!(Lookup(is_marked, sm@16@01, n@37@01)) && Lookup(is_marked, sm@31@01, n@37@01))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
    ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@22@01 r) (Set_in (inv@21@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@23@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@01 r) (Set_in (inv@29@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
    ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
    ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01) n@37@01)
    (=>
      (not (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01) $Ref.null))
      (and
        (not (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01)) ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01))))
    (or
      (not (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01) $Ref.null))
      (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
      ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01)))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
    ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 12 | !(n@37@01 in nodes@2@01)]
(assert (not (Set_in n@37@01 nodes@2@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@01 r) (Set_in (inv@29@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@22@01 r) (Set_in (inv@21@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@23@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef7|)))
(assert (=>
  (Set_in n@37@01 nodes@2@01)
  (and
    (Set_in n@37@01 nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01) n@37@01)
    (=>
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01) n@37@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
        ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
        ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01) n@37@01)
        (=>
          (not
            (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01) $Ref.null))
          (and
            (not
              (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01) $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01)) ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01))))
        (or
          (not
            (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01) $Ref.null))
          (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
          ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01)))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
        ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01))))))
; Joined path conditions
(assert (or (not (Set_in n@37@01 nodes@2@01)) (Set_in n@37@01 nodes@2@01)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@01 r) (Set_in (inv@29@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@22@01 r) (Set_in (inv@21@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@23@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@19@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@23@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef7|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@37@01 $Ref)) (!
  (and
    (=>
      (Set_in n@37@01 nodes@2@01)
      (and
        (Set_in n@37@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01) n@37@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01) n@37@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
            ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
            ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01)
            ($FVF.loc_left ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01) n@37@01)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01)) ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01)
                  $Ref.null))
              (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01) $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
              ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
            ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01)))))
    (or (not (Set_in n@37@01 nodes@2@01)) (Set_in n@37@01 nodes@2@01)))
  :pattern ((Set_in n@37@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01) n@37@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@37@01 $Ref)) (!
  (and
    (=>
      (Set_in n@37@01 nodes@2@01)
      (and
        (Set_in n@37@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01) n@37@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01) n@37@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
            ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
            ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01)
            ($FVF.loc_left ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01) n@37@01)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01)) ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01)
                  $Ref.null))
              (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01) $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
              ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
            ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01)))))
    (or (not (Set_in n@37@01 nodes@2@01)) (Set_in n@37@01 nodes@2@01)))
  :pattern ((Set_in n@37@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01) n@37@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01)) ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@37@01 $Ref)) (!
  (=>
    (and
      (Set_in n@37@01 nodes@2@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@37@01))
        ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01)))
    (or
      (= ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01))))
  :pattern ((Set_in n@37@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@37@01) n@37@01))
  :pattern ((Set_in n@37@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01) n@37@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01)) ($FVF.lookup_left (as sm@23@01  $FVF<left>) n@37@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01))))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.right.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked)
(declare-const n@38@01 $Ref)
(push) ; 3
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 16 | n@38@01 in nodes@2@01 | live]
; [else-branch: 16 | !(n@38@01 in nodes@2@01) | live]
(push) ; 5
; [then-branch: 16 | n@38@01 in nodes@2@01]
(assert (Set_in n@38@01 nodes@2@01))
; [eval] old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01) n@38@01))
(push) ; 6
(assert (not (and (img@15@01 n@38@01) (Set_in (inv@14@01 n@38@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 17 | Lookup(is_marked, sm@16@01, n@38@01) | live]
; [else-branch: 17 | !(Lookup(is_marked, sm@16@01, n@38@01)) | live]
(push) ; 7
; [then-branch: 17 | Lookup(is_marked, sm@16@01, n@38@01)]
(assert ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
(pop) ; 7
(push) ; 7
; [else-branch: 17 | !(Lookup(is_marked, sm@16@01, n@38@01))]
(assert (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@30@01 r) (Set_in (inv@29@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r))
    :qid |qp.fvfValDef10|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef11|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01) n@38@01))
(push) ; 8
(assert (not (and (img@30@01 n@38@01) (Set_in (inv@29@01 n@38@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@01 r) (Set_in (inv@29@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01) n@38@01))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
  ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01)))
(push) ; 6
; [then-branch: 18 | !(Lookup(is_marked, sm@16@01, n@38@01)) && Lookup(is_marked, sm@31@01, n@38@01) | live]
; [else-branch: 18 | !(!(Lookup(is_marked, sm@16@01, n@38@01)) && Lookup(is_marked, sm@31@01, n@38@01)) | live]
(push) ; 7
; [then-branch: 18 | !(Lookup(is_marked, sm@16@01, n@38@01)) && Lookup(is_marked, sm@31@01, n@38@01)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
  ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01)))
; [eval] n.right == null || n.right.is_marked
; [eval] n.right == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@26@01 r) (Set_in (inv@25@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@27@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef9|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01) n@38@01))
(push) ; 8
(assert (not (and (img@26@01 n@38@01) (Set_in (inv@25@01 n@38@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 19 | Lookup(right, sm@27@01, n@38@01) == Null | live]
; [else-branch: 19 | Lookup(right, sm@27@01, n@38@01) != Null | live]
(push) ; 9
; [then-branch: 19 | Lookup(right, sm@27@01, n@38@01) == Null]
(assert (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01) $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 19 | Lookup(right, sm@27@01, n@38@01) != Null]
(assert (not (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@26@01 r) (Set_in (inv@25@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@27@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef9|))))
(push) ; 10
(assert (not (and (img@26@01 n@38@01) (Set_in (inv@25@01 n@38@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@30@01 r) (Set_in (inv@29@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r))
    :qid |qp.fvfValDef10|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef11|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01)) ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01)))
(push) ; 10
(assert (not (and
  (img@30@01 ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01))
  (Set_in (inv@29@01 ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01)) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@26@01 r) (Set_in (inv@25@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@27@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@01 r) (Set_in (inv@29@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (=>
  (not (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01)) ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01)))))
(assert (or
  (not (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01) $Ref.null))
  (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01) $Ref.null)))
(pop) ; 7
(push) ; 7
; [else-branch: 18 | !(!(Lookup(is_marked, sm@16@01, n@38@01)) && Lookup(is_marked, sm@31@01, n@38@01))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
    ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@26@01 r) (Set_in (inv@25@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@27@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@01 r) (Set_in (inv@29@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
    ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
    ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01) n@38@01)
    (=>
      (not (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01) $Ref.null))
      (and
        (not
          (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01)) ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01))))
    (or
      (not (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01) $Ref.null))
      (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
      ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01)))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
    ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 16 | !(n@38@01 in nodes@2@01)]
(assert (not (Set_in n@38@01 nodes@2@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@01 r) (Set_in (inv@29@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@26@01 r) (Set_in (inv@25@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@27@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef9|)))
(assert (=>
  (Set_in n@38@01 nodes@2@01)
  (and
    (Set_in n@38@01 nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01) n@38@01)
    (=>
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01) n@38@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
        ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
        ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01) n@38@01)
        (=>
          (not
            (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01) $Ref.null))
          (and
            (not
              (=
                ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01)
                $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01)) ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01))))
        (or
          (not
            (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01) $Ref.null))
          (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
          ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01)))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
        ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01))))))
; Joined path conditions
(assert (or (not (Set_in n@38@01 nodes@2@01)) (Set_in n@38@01 nodes@2@01)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@30@01 r) (Set_in (inv@29@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@19@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef11|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@26@01 r) (Set_in (inv@25@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@27@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@19@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@27@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef9|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@38@01 $Ref)) (!
  (and
    (=>
      (Set_in n@38@01 nodes@2@01)
      (and
        (Set_in n@38@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01) n@38@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01) n@38@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
            ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
            ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01)
            ($FVF.loc_right ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01) n@38@01)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01)) ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
              ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
            ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01)))))
    (or (not (Set_in n@38@01 nodes@2@01)) (Set_in n@38@01 nodes@2@01)))
  :pattern ((Set_in n@38@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01) n@38@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@38@01 $Ref)) (!
  (and
    (=>
      (Set_in n@38@01 nodes@2@01)
      (and
        (Set_in n@38@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01) n@38@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01) n@38@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
            ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
            ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01)
            ($FVF.loc_right ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01) n@38@01)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01)) ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
              ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
            ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01)))))
    (or (not (Set_in n@38@01 nodes@2@01)) (Set_in n@38@01 nodes@2@01)))
  :pattern ((Set_in n@38@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01) n@38@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01)) ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@38@01 $Ref)) (!
  (=>
    (and
      (Set_in n@38@01 nodes@2@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@38@01))
        ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01)))
    (or
      (= ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01))))
  :pattern ((Set_in n@38@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) n@38@01) n@38@01))
  :pattern ((Set_in n@38@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01) n@38@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@31@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01)) ($FVF.lookup_right (as sm@27@01  $FVF<right>) n@38@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|)))
(pop) ; 2
(push) ; 2
; [exec]
; node.is_marked := true
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@39@01 ((r $Ref)) $Perm
  (ite
    (= r node@3@01)
    ($Perm.min
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      (pTaken@39@01 r))
    $Perm.No)
  
  :qid |quant-u-19|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@39@01 r) $Perm.No)
  
  :qid |quant-u-20|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r node@3@01) (= (- $Perm.Write (pTaken@39@01 r)) $Perm.No))
  
  :qid |quant-u-21|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@40@01 $FVF<is_marked>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) node@3@01) true))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) node@3@01) node@3@01))
; [eval] node.left != null && !node.left.is_marked
; [eval] node.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01) node@3@01))
(set-option :timeout 0)
(push) ; 3
(assert (not (and (img@7@01 node@3@01) (Set_in (inv@6@01 node@3@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
; [then-branch: 20 | Lookup(left, sm@8@01, node@3@01) == Null | live]
; [else-branch: 20 | Lookup(left, sm@8@01, node@3@01) != Null | live]
(push) ; 4
; [then-branch: 20 | Lookup(left, sm@8@01, node@3@01) == Null]
(assert (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01) $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 20 | Lookup(left, sm@8@01, node@3@01) != Null]
(assert (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01) $Ref.null)))
; [eval] !node.left.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(push) ; 5
(assert (not (and (img@7@01 node@3@01) (Set_in (inv@6@01 node@3@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(declare-const sm@41@01 $FVF<is_marked>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef14|)))
(declare-const pm@42@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_is_marked (as pm@42@01  $FPM) r)
    (+
      (ite (= r node@3@01) $Perm.Write $Perm.No)
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (- $Perm.Write (pTaken@39@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_is_marked (as pm@42@01  $FPM) r))
  :qid |qp.resPrmSumDef15|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.perm_is_marked (as pm@42@01  $FPM) r))
  :qid |qp.resTrgDef16|)))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01)) ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01)))
(push) ; 5
(assert (not (<
  $Perm.No
  ($FVF.perm_is_marked (as pm@42@01  $FPM) ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef14|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_is_marked (as pm@42@01  $FPM) r)
    (+
      (ite (= r node@3@01) $Perm.Write $Perm.No)
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (- $Perm.Write (pTaken@39@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_is_marked (as pm@42@01  $FPM) r))
  :qid |qp.resPrmSumDef15|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.perm_is_marked (as pm@42@01  $FPM) r))
  :qid |qp.resTrgDef16|)))
(assert (=>
  (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01)) ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01)))))
(assert (or
  (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01) $Ref.null))
  (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01) $Ref.null)))
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01) $Ref.null))
    (not
      ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01) $Ref.null))
  (not
    ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 21 | Lookup(left, sm@8@01, node@3@01) != Null && !(Lookup(is_marked, sm@41@01, Lookup(left, sm@8@01, node@3@01))) | live]
; [else-branch: 21 | !(Lookup(left, sm@8@01, node@3@01) != Null && !(Lookup(is_marked, sm@41@01, Lookup(left, sm@8@01, node@3@01)))) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 21 | Lookup(left, sm@8@01, node@3@01) != Null && !(Lookup(is_marked, sm@41@01, Lookup(left, sm@8@01, node@3@01)))]
(assert (and
  (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01) $Ref.null))
  (not
    ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01)))))
; [exec]
; trav_rec(nodes, node.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(push) ; 4
(assert (not (and (img@7@01 node@3@01) (Set_in (inv@6@01 node@3@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [eval] (node in nodes)
(push) ; 4
(assert (not (Set_in ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01) nodes@2@01)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (Set_in ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01) nodes@2@01))
; [eval] !((null in nodes))
; [eval] (null in nodes)
(declare-const n@43@01 $Ref)
(push) ; 4
; [eval] (n in nodes)
(assert (Set_in n@43@01 nodes@2@01))
(pop) ; 4
(declare-fun inv@44@01 ($Ref) $Ref)
(declare-fun img@45@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@43@01 $Ref) (n2@43@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@43@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n1@43@01) n1@43@01))
      (and
        (Set_in n2@43@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n2@43@01) n2@43@01))
      (= n1@43@01 n2@43@01))
    (= n1@43@01 n2@43@01))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@43@01 $Ref)) (!
  (=>
    (Set_in n@43@01 nodes@2@01)
    (and (= (inv@44@01 n@43@01) n@43@01) (img@45@01 n@43@01)))
  :pattern ((Set_in n@43@01 nodes@2@01))
  :pattern ((inv@44@01 n@43@01))
  :pattern ((img@45@01 n@43@01))
  :qid |left-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@45@01 r) (Set_in (inv@44@01 r) nodes@2@01)) (= (inv@44@01 r) r))
  :pattern ((inv@44@01 r))
  :qid |left-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@44@01 r) nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) r) r))
  :pattern ((inv@44@01 r))
  :qid |quant-u-23|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@46@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@44@01 r) nodes@2@01) (img@45@01 r) (= r (inv@44@01 r)))
    ($Perm.min
      (ite
        (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      (pTaken@46@01 r))
    $Perm.No)
  
  :qid |quant-u-25|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@44@01 r) nodes@2@01) (img@45@01 r) (= r (inv@44@01 r)))
    (= (- $Perm.Write (pTaken@46@01 r)) $Perm.No))
  
  :qid |quant-u-26|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$0@47@01 $Ref)
(set-option :timeout 0)
(push) ; 4
; [eval] (n$0 in nodes)
(assert (Set_in n$0@47@01 nodes@2@01))
(pop) ; 4
(declare-fun inv@48@01 ($Ref) $Ref)
(declare-fun img@49@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$01@47@01 $Ref) (n$02@47@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$01@47@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$01@47@01) n$01@47@01))
      (and
        (Set_in n$02@47@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$02@47@01) n$02@47@01))
      (= n$01@47@01 n$02@47@01))
    (= n$01@47@01 n$02@47@01))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@47@01 $Ref)) (!
  (=>
    (Set_in n$0@47@01 nodes@2@01)
    (and (= (inv@48@01 n$0@47@01) n$0@47@01) (img@49@01 n$0@47@01)))
  :pattern ((Set_in n$0@47@01 nodes@2@01))
  :pattern ((inv@48@01 n$0@47@01))
  :pattern ((img@49@01 n$0@47@01))
  :qid |right-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@49@01 r) (Set_in (inv@48@01 r) nodes@2@01)) (= (inv@48@01 r) r))
  :pattern ((inv@48@01 r))
  :qid |right-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@48@01 r) nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) r) r))
  :pattern ((inv@48@01 r))
  :qid |quant-u-28|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@50@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@48@01 r) nodes@2@01) (img@49@01 r) (= r (inv@48@01 r)))
    ($Perm.min
      (ite
        (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      (pTaken@50@01 r))
    $Perm.No)
  
  :qid |quant-u-30|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@48@01 r) nodes@2@01) (img@49@01 r) (= r (inv@48@01 r)))
    (= (- $Perm.Write (pTaken@50@01 r)) $Perm.No))
  
  :qid |quant-u-31|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$1@51@01 $Ref)
(set-option :timeout 0)
(push) ; 4
; [eval] (n$1 in nodes)
(assert (Set_in n$1@51@01 nodes@2@01))
(pop) ; 4
(declare-fun inv@52@01 ($Ref) $Ref)
(declare-fun img@53@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$11@51@01 $Ref) (n$12@51@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$11@51@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n$11@51@01) n$11@51@01))
      (and
        (Set_in n$12@51@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n$12@51@01) n$12@51@01))
      (= n$11@51@01 n$12@51@01))
    (= n$11@51@01 n$12@51@01))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@51@01 $Ref)) (!
  (=>
    (Set_in n$1@51@01 nodes@2@01)
    (and (= (inv@52@01 n$1@51@01) n$1@51@01) (img@53@01 n$1@51@01)))
  :pattern ((Set_in n$1@51@01 nodes@2@01))
  :pattern ((inv@52@01 n$1@51@01))
  :pattern ((img@53@01 n$1@51@01))
  :qid |is_marked-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@53@01 r) (Set_in (inv@52@01 r) nodes@2@01)) (= (inv@52@01 r) r))
  :pattern ((inv@52@01 r))
  :qid |is_marked-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@52@01 r) nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r) r))
  :pattern ((inv@52@01 r))
  :qid |quant-u-33|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@54@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@52@01 r) nodes@2@01) (img@53@01 r) (= r (inv@52@01 r)))
    ($Perm.min
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (- $Perm.Write (pTaken@39@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@55@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@52@01 r) nodes@2@01) (img@53@01 r) (= r (inv@52@01 r)))
    ($Perm.min
      (ite (= r node@3@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@54@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (- $Perm.Write (pTaken@39@01 r))
        $Perm.No)
      (pTaken@54@01 r))
    $Perm.No)
  
  :qid |quant-u-35|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@52@01 r) nodes@2@01) (img@53@01 r) (= r (inv@52@01 r)))
    (= (- $Perm.Write (pTaken@54@01 r)) $Perm.No))
  
  :qid |quant-u-36|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@55@01 node@3@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@52@01 r) nodes@2@01) (img@53@01 r) (= r (inv@52@01 r)))
    (= (- (- $Perm.Write (pTaken@54@01 r)) (pTaken@55@01 r)) $Perm.No))
  
  :qid |quant-u-38|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall n$2: Ref :: { (n$2.left in nodes) } { (n$2 in nodes), n$2.left } (n$2 in nodes) && n$2.left != null ==> (n$2.left in nodes))
(declare-const n$2@56@01 $Ref)
(set-option :timeout 0)
(push) ; 4
; [eval] (n$2 in nodes) && n$2.left != null ==> (n$2.left in nodes)
; [eval] (n$2 in nodes) && n$2.left != null
; [eval] (n$2 in nodes)
(push) ; 5
; [then-branch: 22 | !(n$2@56@01 in nodes@2@01) | live]
; [else-branch: 22 | n$2@56@01 in nodes@2@01 | live]
(push) ; 6
; [then-branch: 22 | !(n$2@56@01 in nodes@2@01)]
(assert (not (Set_in n$2@56@01 nodes@2@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 22 | n$2@56@01 in nodes@2@01]
(assert (Set_in n$2@56@01 nodes@2@01))
; [eval] n$2.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) n$2@56@01))
(push) ; 7
(assert (not (and (img@7@01 n$2@56@01) (Set_in (inv@6@01 n$2@56@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (Set_in n$2@56@01 nodes@2@01)
  (and
    (Set_in n$2@56@01 nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) n$2@56@01))))
(assert (or (Set_in n$2@56@01 nodes@2@01) (not (Set_in n$2@56@01 nodes@2@01))))
(push) ; 5
; [then-branch: 23 | n$2@56@01 in nodes@2@01 && Lookup(left, sm@8@01, n$2@56@01) != Null | live]
; [else-branch: 23 | !(n$2@56@01 in nodes@2@01 && Lookup(left, sm@8@01, n$2@56@01) != Null) | live]
(push) ; 6
; [then-branch: 23 | n$2@56@01 in nodes@2@01 && Lookup(left, sm@8@01, n$2@56@01) != Null]
(assert (and
  (Set_in n$2@56@01 nodes@2@01)
  (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) $Ref.null))))
; [eval] (n$2.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) n$2@56@01))
(push) ; 7
(assert (not (and (img@7@01 n$2@56@01) (Set_in (inv@6@01 n$2@56@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 23 | !(n$2@56@01 in nodes@2@01 && Lookup(left, sm@8@01, n$2@56@01) != Null)]
(assert (not
  (and
    (Set_in n$2@56@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (and
    (Set_in n$2@56@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) $Ref.null)))
  (and
    (Set_in n$2@56@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) n$2@56@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@56@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) $Ref.null))))
  (and
    (Set_in n$2@56@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@56@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@56@01 nodes@2@01)
      (and
        (Set_in n$2@56@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) n$2@56@01)))
    (or (Set_in n$2@56@01 nodes@2@01) (not (Set_in n$2@56@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$2@56@01 nodes@2@01)
        (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) $Ref.null)))
      (and
        (Set_in n$2@56@01 nodes@2@01)
        (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) n$2@56@01)))
    (or
      (not
        (and
          (Set_in n$2@56@01 nodes@2@01)
          (not
            (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) $Ref.null))))
      (and
        (Set_in n$2@56@01 nodes@2@01)
        (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) nodes@2@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(assert (forall ((n$2@56@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@56@01 nodes@2@01)
      (and
        (Set_in n$2@56@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) n$2@56@01)))
    (or (Set_in n$2@56@01 nodes@2@01) (not (Set_in n$2@56@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$2@56@01 nodes@2@01)
        (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) $Ref.null)))
      (and
        (Set_in n$2@56@01 nodes@2@01)
        (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) n$2@56@01)))
    (or
      (not
        (and
          (Set_in n$2@56@01 nodes@2@01)
          (not
            (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) $Ref.null))))
      (and
        (Set_in n$2@56@01 nodes@2@01)
        (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) $Ref.null)))))
  :pattern ((Set_in n$2@56@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) n$2@56@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(push) ; 4
(assert (not (forall ((n$2@56@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@56@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) nodes@2@01))
  :pattern ((Set_in n$2@56@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) n$2@56@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$2@56@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@56@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) nodes@2@01))
  :pattern ((Set_in n$2@56@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@56@01) n$2@56@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|)))
; [eval] (forall n$3: Ref :: { (n$3.right in nodes) } { (n$3 in nodes), n$3.right } (n$3 in nodes) && n$3.right != null ==> (n$3.right in nodes))
(declare-const n$3@57@01 $Ref)
(push) ; 4
; [eval] (n$3 in nodes) && n$3.right != null ==> (n$3.right in nodes)
; [eval] (n$3 in nodes) && n$3.right != null
; [eval] (n$3 in nodes)
(push) ; 5
; [then-branch: 24 | !(n$3@57@01 in nodes@2@01) | live]
; [else-branch: 24 | n$3@57@01 in nodes@2@01 | live]
(push) ; 6
; [then-branch: 24 | !(n$3@57@01 in nodes@2@01)]
(assert (not (Set_in n$3@57@01 nodes@2@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 24 | n$3@57@01 in nodes@2@01]
(assert (Set_in n$3@57@01 nodes@2@01))
; [eval] n$3.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) n$3@57@01))
(push) ; 7
(assert (not (and (img@11@01 n$3@57@01) (Set_in (inv@10@01 n$3@57@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (Set_in n$3@57@01 nodes@2@01)
  (and
    (Set_in n$3@57@01 nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) n$3@57@01))))
(assert (or (Set_in n$3@57@01 nodes@2@01) (not (Set_in n$3@57@01 nodes@2@01))))
(push) ; 5
; [then-branch: 25 | n$3@57@01 in nodes@2@01 && Lookup(right, sm@12@01, n$3@57@01) != Null | live]
; [else-branch: 25 | !(n$3@57@01 in nodes@2@01 && Lookup(right, sm@12@01, n$3@57@01) != Null) | live]
(push) ; 6
; [then-branch: 25 | n$3@57@01 in nodes@2@01 && Lookup(right, sm@12@01, n$3@57@01) != Null]
(assert (and
  (Set_in n$3@57@01 nodes@2@01)
  (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) $Ref.null))))
; [eval] (n$3.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) n$3@57@01))
(push) ; 7
(assert (not (and (img@11@01 n$3@57@01) (Set_in (inv@10@01 n$3@57@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 25 | !(n$3@57@01 in nodes@2@01 && Lookup(right, sm@12@01, n$3@57@01) != Null)]
(assert (not
  (and
    (Set_in n$3@57@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (and
    (Set_in n$3@57@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) $Ref.null)))
  (and
    (Set_in n$3@57@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) n$3@57@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$3@57@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) $Ref.null))))
  (and
    (Set_in n$3@57@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$3@57@01 $Ref)) (!
  (and
    (=>
      (Set_in n$3@57@01 nodes@2@01)
      (and
        (Set_in n$3@57@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) n$3@57@01)))
    (or (Set_in n$3@57@01 nodes@2@01) (not (Set_in n$3@57@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$3@57@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) $Ref.null)))
      (and
        (Set_in n$3@57@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) n$3@57@01)))
    (or
      (not
        (and
          (Set_in n$3@57@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01)
              $Ref.null))))
      (and
        (Set_in n$3@57@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) nodes@2@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(assert (forall ((n$3@57@01 $Ref)) (!
  (and
    (=>
      (Set_in n$3@57@01 nodes@2@01)
      (and
        (Set_in n$3@57@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) n$3@57@01)))
    (or (Set_in n$3@57@01 nodes@2@01) (not (Set_in n$3@57@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$3@57@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) $Ref.null)))
      (and
        (Set_in n$3@57@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) n$3@57@01)))
    (or
      (not
        (and
          (Set_in n$3@57@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01)
              $Ref.null))))
      (and
        (Set_in n$3@57@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) $Ref.null)))))
  :pattern ((Set_in n$3@57@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) n$3@57@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(push) ; 4
(assert (not (forall ((n$3@57@01 $Ref)) (!
  (=>
    (and
      (Set_in n$3@57@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) nodes@2@01))
  :pattern ((Set_in n$3@57@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) n$3@57@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$3@57@01 $Ref)) (!
  (=>
    (and
      (Set_in n$3@57@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) nodes@2@01))
  :pattern ((Set_in n$3@57@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@57@01) n$3@57@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|)))
; [eval] !node.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@01)
      (=
        ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef12|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef13|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef14|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01)) ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01)))
(push) ; 4
(assert (not (<
  $Perm.No
  (+
    (ite
      (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01) node@3@01)
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@15@01 ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01))
        (Set_in (inv@14@01 ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01)) nodes@2@01))
      (-
        $Perm.Write
        (pTaken@39@01 ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(declare-const $t@58@01 $Snap)
(assert (= $t@58@01 ($Snap.combine ($Snap.first $t@58@01) ($Snap.second $t@58@01))))
(assert (= ($Snap.first $t@58@01) $Snap.unit))
; [eval] (node in nodes)
(assert (=
  ($Snap.second $t@58@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@58@01))
    ($Snap.second ($Snap.second $t@58@01)))))
(assert (= ($Snap.first ($Snap.second $t@58@01)) $Snap.unit))
; [eval] !((null in nodes))
; [eval] (null in nodes)
(assert (=
  ($Snap.second ($Snap.second $t@58@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@58@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))
(declare-const n$4@59@01 $Ref)
(push) ; 4
; [eval] (n$4 in nodes)
(assert (Set_in n$4@59@01 nodes@2@01))
(pop) ; 4
(declare-fun inv@60@01 ($Ref) $Ref)
(declare-fun img@61@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$41@59@01 $Ref) (n$42@59@01 $Ref)) (!
  (=>
    (and
      (Set_in n$41@59@01 nodes@2@01)
      (Set_in n$42@59@01 nodes@2@01)
      (= n$41@59@01 n$42@59@01))
    (= n$41@59@01 n$42@59@01))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@59@01 $Ref)) (!
  (=>
    (Set_in n$4@59@01 nodes@2@01)
    (and (= (inv@60@01 n$4@59@01) n$4@59@01) (img@61@01 n$4@59@01)))
  :pattern ((Set_in n$4@59@01 nodes@2@01))
  :pattern ((inv@60@01 n$4@59@01))
  :pattern ((img@61@01 n$4@59@01))
  :qid |quant-u-40|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01)) (= (inv@60@01 r) r))
  :pattern ((inv@60@01 r))
  :qid |left-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$4@59@01 $Ref)) (!
  (=> (Set_in n$4@59@01 nodes@2@01) (not (= n$4@59@01 $Ref.null)))
  :pattern ((Set_in n$4@59@01 nodes@2@01))
  :pattern ((inv@60@01 n$4@59@01))
  :pattern ((img@61@01 n$4@59@01))
  :qid |left-permImpliesNonNull|)))
(declare-const sm@62@01 $FVF<left>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@60@01 r) nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) r) r))
  :pattern ((inv@60@01 r))
  :qid |quant-u-41|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@58@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))
(declare-const n$5@63@01 $Ref)
(push) ; 4
; [eval] (n$5 in nodes)
(assert (Set_in n$5@63@01 nodes@2@01))
(pop) ; 4
(declare-fun inv@64@01 ($Ref) $Ref)
(declare-fun img@65@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$51@63@01 $Ref) (n$52@63@01 $Ref)) (!
  (=>
    (and
      (Set_in n$51@63@01 nodes@2@01)
      (Set_in n$52@63@01 nodes@2@01)
      (= n$51@63@01 n$52@63@01))
    (= n$51@63@01 n$52@63@01))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$5@63@01 $Ref)) (!
  (=>
    (Set_in n$5@63@01 nodes@2@01)
    (and (= (inv@64@01 n$5@63@01) n$5@63@01) (img@65@01 n$5@63@01)))
  :pattern ((Set_in n$5@63@01 nodes@2@01))
  :pattern ((inv@64@01 n$5@63@01))
  :pattern ((img@65@01 n$5@63@01))
  :qid |quant-u-43|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01)) (= (inv@64@01 r) r))
  :pattern ((inv@64@01 r))
  :qid |right-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$5@63@01 $Ref)) (!
  (=> (Set_in n$5@63@01 nodes@2@01) (not (= n$5@63@01 $Ref.null)))
  :pattern ((Set_in n$5@63@01 nodes@2@01))
  :pattern ((inv@64@01 n$5@63@01))
  :pattern ((img@65@01 n$5@63@01))
  :qid |right-permImpliesNonNull|)))
(declare-const sm@66@01 $FVF<right>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@64@01 r) nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) r) r))
  :pattern ((inv@64@01 r))
  :qid |quant-u-44|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))
(declare-const n$6@67@01 $Ref)
(push) ; 4
; [eval] (n$6 in nodes)
(assert (Set_in n$6@67@01 nodes@2@01))
(pop) ; 4
(declare-fun inv@68@01 ($Ref) $Ref)
(declare-fun img@69@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$61@67@01 $Ref) (n$62@67@01 $Ref)) (!
  (=>
    (and
      (Set_in n$61@67@01 nodes@2@01)
      (Set_in n$62@67@01 nodes@2@01)
      (= n$61@67@01 n$62@67@01))
    (= n$61@67@01 n$62@67@01))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$6@67@01 $Ref)) (!
  (=>
    (Set_in n$6@67@01 nodes@2@01)
    (and (= (inv@68@01 n$6@67@01) n$6@67@01) (img@69@01 n$6@67@01)))
  :pattern ((Set_in n$6@67@01 nodes@2@01))
  :pattern ((inv@68@01 n$6@67@01))
  :pattern ((img@69@01 n$6@67@01))
  :qid |quant-u-46|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01)) (= (inv@68@01 r) r))
  :pattern ((inv@68@01 r))
  :qid |is_marked-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$6@67@01 $Ref)) (!
  (=> (Set_in n$6@67@01 nodes@2@01) (not (= n$6@67@01 $Ref.null)))
  :pattern ((Set_in n$6@67@01 nodes@2@01))
  :pattern ((inv@68@01 n$6@67@01))
  :pattern ((img@69@01 n$6@67@01))
  :qid |is_marked-permImpliesNonNull|)))
(declare-const sm@70@01 $FVF<is_marked>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@68@01 r) nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r) r))
  :pattern ((inv@68@01 r))
  :qid |quant-u-47|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))
  $Snap.unit))
; [eval] (forall n$7: Ref :: { (n$7.left in nodes) } { (n$7 in nodes), n$7.left } (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes))
(declare-const n$7@71@01 $Ref)
(push) ; 4
; [eval] (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes)
; [eval] (n$7 in nodes) && n$7.left != null
; [eval] (n$7 in nodes)
(push) ; 5
; [then-branch: 26 | !(n$7@71@01 in nodes@2@01) | live]
; [else-branch: 26 | n$7@71@01 in nodes@2@01 | live]
(push) ; 6
; [then-branch: 26 | !(n$7@71@01 in nodes@2@01)]
(assert (not (Set_in n$7@71@01 nodes@2@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 26 | n$7@71@01 in nodes@2@01]
(assert (Set_in n$7@71@01 nodes@2@01))
; [eval] n$7.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) n$7@71@01))
(push) ; 7
(assert (not (and (img@61@01 n$7@71@01) (Set_in (inv@60@01 n$7@71@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (=>
  (Set_in n$7@71@01 nodes@2@01)
  (and
    (Set_in n$7@71@01 nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) n$7@71@01))))
(assert (or (Set_in n$7@71@01 nodes@2@01) (not (Set_in n$7@71@01 nodes@2@01))))
(push) ; 5
; [then-branch: 27 | n$7@71@01 in nodes@2@01 && Lookup(left, sm@62@01, n$7@71@01) != Null | live]
; [else-branch: 27 | !(n$7@71@01 in nodes@2@01 && Lookup(left, sm@62@01, n$7@71@01) != Null) | live]
(push) ; 6
; [then-branch: 27 | n$7@71@01 in nodes@2@01 && Lookup(left, sm@62@01, n$7@71@01) != Null]
(assert (and
  (Set_in n$7@71@01 nodes@2@01)
  (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) $Ref.null))))
; [eval] (n$7.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) n$7@71@01))
(push) ; 7
(assert (not (and (img@61@01 n$7@71@01) (Set_in (inv@60@01 n$7@71@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 27 | !(n$7@71@01 in nodes@2@01 && Lookup(left, sm@62@01, n$7@71@01) != Null)]
(assert (not
  (and
    (Set_in n$7@71@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (=>
  (and
    (Set_in n$7@71@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) $Ref.null)))
  (and
    (Set_in n$7@71@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) n$7@71@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$7@71@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) $Ref.null))))
  (and
    (Set_in n$7@71@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$7@71@01 $Ref)) (!
  (and
    (=>
      (Set_in n$7@71@01 nodes@2@01)
      (and
        (Set_in n$7@71@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) n$7@71@01)))
    (or (Set_in n$7@71@01 nodes@2@01) (not (Set_in n$7@71@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$7@71@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) $Ref.null)))
      (and
        (Set_in n$7@71@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) n$7@71@01)))
    (or
      (not
        (and
          (Set_in n$7@71@01 nodes@2@01)
          (not
            (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) $Ref.null))))
      (and
        (Set_in n$7@71@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) nodes@2@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@71@01 $Ref)) (!
  (and
    (=>
      (Set_in n$7@71@01 nodes@2@01)
      (and
        (Set_in n$7@71@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) n$7@71@01)))
    (or (Set_in n$7@71@01 nodes@2@01) (not (Set_in n$7@71@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$7@71@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) $Ref.null)))
      (and
        (Set_in n$7@71@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) n$7@71@01)))
    (or
      (not
        (and
          (Set_in n$7@71@01 nodes@2@01)
          (not
            (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) $Ref.null))))
      (and
        (Set_in n$7@71@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) $Ref.null)))))
  :pattern ((Set_in n$7@71@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) n$7@71@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@71@01 $Ref)) (!
  (=>
    (and
      (Set_in n$7@71@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) nodes@2@01))
  :pattern ((Set_in n$7@71@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@71@01) n$7@71@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))
  $Snap.unit))
; [eval] (forall n$8: Ref :: { (n$8.right in nodes) } { (n$8 in nodes), n$8.right } (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes))
(declare-const n$8@72@01 $Ref)
(push) ; 4
; [eval] (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes)
; [eval] (n$8 in nodes) && n$8.right != null
; [eval] (n$8 in nodes)
(push) ; 5
; [then-branch: 28 | !(n$8@72@01 in nodes@2@01) | live]
; [else-branch: 28 | n$8@72@01 in nodes@2@01 | live]
(push) ; 6
; [then-branch: 28 | !(n$8@72@01 in nodes@2@01)]
(assert (not (Set_in n$8@72@01 nodes@2@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 28 | n$8@72@01 in nodes@2@01]
(assert (Set_in n$8@72@01 nodes@2@01))
; [eval] n$8.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) n$8@72@01))
(push) ; 7
(assert (not (and (img@65@01 n$8@72@01) (Set_in (inv@64@01 n$8@72@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (=>
  (Set_in n$8@72@01 nodes@2@01)
  (and
    (Set_in n$8@72@01 nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) n$8@72@01))))
(assert (or (Set_in n$8@72@01 nodes@2@01) (not (Set_in n$8@72@01 nodes@2@01))))
(push) ; 5
; [then-branch: 29 | n$8@72@01 in nodes@2@01 && Lookup(right, sm@66@01, n$8@72@01) != Null | live]
; [else-branch: 29 | !(n$8@72@01 in nodes@2@01 && Lookup(right, sm@66@01, n$8@72@01) != Null) | live]
(push) ; 6
; [then-branch: 29 | n$8@72@01 in nodes@2@01 && Lookup(right, sm@66@01, n$8@72@01) != Null]
(assert (and
  (Set_in n$8@72@01 nodes@2@01)
  (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) $Ref.null))))
; [eval] (n$8.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) n$8@72@01))
(push) ; 7
(assert (not (and (img@65@01 n$8@72@01) (Set_in (inv@64@01 n$8@72@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 29 | !(n$8@72@01 in nodes@2@01 && Lookup(right, sm@66@01, n$8@72@01) != Null)]
(assert (not
  (and
    (Set_in n$8@72@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (=>
  (and
    (Set_in n$8@72@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) $Ref.null)))
  (and
    (Set_in n$8@72@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) n$8@72@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$8@72@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) $Ref.null))))
  (and
    (Set_in n$8@72@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$8@72@01 $Ref)) (!
  (and
    (=>
      (Set_in n$8@72@01 nodes@2@01)
      (and
        (Set_in n$8@72@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) n$8@72@01)))
    (or (Set_in n$8@72@01 nodes@2@01) (not (Set_in n$8@72@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$8@72@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) $Ref.null)))
      (and
        (Set_in n$8@72@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) n$8@72@01)))
    (or
      (not
        (and
          (Set_in n$8@72@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01)
              $Ref.null))))
      (and
        (Set_in n$8@72@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) nodes@2@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@72@01 $Ref)) (!
  (and
    (=>
      (Set_in n$8@72@01 nodes@2@01)
      (and
        (Set_in n$8@72@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) n$8@72@01)))
    (or (Set_in n$8@72@01 nodes@2@01) (not (Set_in n$8@72@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$8@72@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) $Ref.null)))
      (and
        (Set_in n$8@72@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) n$8@72@01)))
    (or
      (not
        (and
          (Set_in n$8@72@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01)
              $Ref.null))))
      (and
        (Set_in n$8@72@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) $Ref.null)))))
  :pattern ((Set_in n$8@72@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) n$8@72@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@72@01 $Ref)) (!
  (=>
    (and
      (Set_in n$8@72@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) nodes@2@01))
  :pattern ((Set_in n$8@72@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@72@01) n$8@72@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } (n in nodes) ==> old(n.is_marked) ==> n.is_marked)
(declare-const n@73@01 $Ref)
(push) ; 4
; [eval] (n in nodes) ==> old(n.is_marked) ==> n.is_marked
; [eval] (n in nodes)
(push) ; 5
; [then-branch: 30 | n@73@01 in nodes@2@01 | live]
; [else-branch: 30 | !(n@73@01 in nodes@2@01) | live]
(push) ; 6
; [then-branch: 30 | n@73@01 in nodes@2@01]
(assert (Set_in n@73@01 nodes@2@01))
; [eval] old(n.is_marked) ==> n.is_marked
; [eval] old(n.is_marked)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@01)
      (=
        ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef12|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef13|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef14|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@73@01) n@73@01))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite (= n@73@01 node@3@01) $Perm.Write $Perm.No)
    (ite
      (and (img@15@01 n@73@01) (Set_in (inv@14@01 n@73@01) nodes@2@01))
      (- $Perm.Write (pTaken@39@01 n@73@01))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 31 | Lookup(is_marked, sm@41@01, n@73@01) | live]
; [else-branch: 31 | !(Lookup(is_marked, sm@41@01, n@73@01)) | live]
(push) ; 8
; [then-branch: 31 | Lookup(is_marked, sm@41@01, n@73@01)]
(assert ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@73@01))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@73@01) n@73@01))
(push) ; 9
(assert (not (and (img@69@01 n@73@01) (Set_in (inv@68@01 n@73@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 31 | !(Lookup(is_marked, sm@41@01, n@73@01))]
(assert (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@73@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@73@01)
  (and
    ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@73@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@73@01) n@73@01))))
; Joined path conditions
(assert (or
  (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@73@01))
  ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@73@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 30 | !(n@73@01 in nodes@2@01)]
(assert (not (Set_in n@73@01 nodes@2@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (Set_in n@73@01 nodes@2@01)
  (and
    (Set_in n@73@01 nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@73@01) n@73@01)
    (=>
      ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@73@01)
      (and
        ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@73@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@73@01) n@73@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@73@01))
      ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@73@01)))))
; Joined path conditions
(assert (or (not (Set_in n@73@01 nodes@2@01)) (Set_in n@73@01 nodes@2@01)))
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@73@01 $Ref)) (!
  (and
    (=>
      (Set_in n@73@01 nodes@2@01)
      (and
        (Set_in n@73@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@73@01) n@73@01)
        (=>
          ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@73@01)
          (and
            ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@73@01)
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@73@01) n@73@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@73@01))
          ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@73@01))))
    (or (not (Set_in n@73@01 nodes@2@01)) (Set_in n@73@01 nodes@2@01)))
  :pattern ((Set_in n@73@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@73@01) n@73@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102-aux|)))
(assert (forall ((n@73@01 $Ref)) (!
  (=>
    (and
      (Set_in n@73@01 nodes@2@01)
      ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@73@01))
    ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@73@01))
  :pattern ((Set_in n@73@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@73@01) n@73@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))
  $Snap.unit))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01)) ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01)))
(push) ; 4
(assert (not (and
  (img@69@01 ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01))
  (Set_in (inv@68@01 ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01)) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.left } (n in nodes) ==> n.left == old(n.left))
(declare-const n@74@01 $Ref)
(push) ; 4
; [eval] (n in nodes) ==> n.left == old(n.left)
; [eval] (n in nodes)
(push) ; 5
; [then-branch: 32 | n@74@01 in nodes@2@01 | live]
; [else-branch: 32 | !(n@74@01 in nodes@2@01) | live]
(push) ; 6
; [then-branch: 32 | n@74@01 in nodes@2@01]
(assert (Set_in n@74@01 nodes@2@01))
; [eval] n.left == old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@74@01) n@74@01))
(push) ; 7
(assert (not (and (img@61@01 n@74@01) (Set_in (inv@60@01 n@74@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [eval] old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@74@01) n@74@01))
(push) ; 7
(assert (not (and (img@7@01 n@74@01) (Set_in (inv@6@01 n@74@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 32 | !(n@74@01 in nodes@2@01)]
(assert (not (Set_in n@74@01 nodes@2@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (Set_in n@74@01 nodes@2@01)
  (and
    (Set_in n@74@01 nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@74@01) n@74@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@74@01) n@74@01))))
; Joined path conditions
(assert (or (not (Set_in n@74@01 nodes@2@01)) (Set_in n@74@01 nodes@2@01)))
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@74@01 $Ref)) (!
  (and
    (=>
      (Set_in n@74@01 nodes@2@01)
      (and
        (Set_in n@74@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@74@01) n@74@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@74@01) n@74@01)))
    (or (not (Set_in n@74@01 nodes@2@01)) (Set_in n@74@01 nodes@2@01)))
  :pattern ((Set_in n@74@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@74@01) n@74@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86-aux|)))
(assert (forall ((n@74@01 $Ref)) (!
  (=>
    (Set_in n@74@01 nodes@2@01)
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@74@01)
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@74@01)))
  :pattern ((Set_in n@74@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@74@01) n@74@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.right } (n in nodes) ==> n.right == old(n.right))
(declare-const n@75@01 $Ref)
(push) ; 4
; [eval] (n in nodes) ==> n.right == old(n.right)
; [eval] (n in nodes)
(push) ; 5
; [then-branch: 33 | n@75@01 in nodes@2@01 | live]
; [else-branch: 33 | !(n@75@01 in nodes@2@01) | live]
(push) ; 6
; [then-branch: 33 | n@75@01 in nodes@2@01]
(assert (Set_in n@75@01 nodes@2@01))
; [eval] n.right == old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@75@01) n@75@01))
(push) ; 7
(assert (not (and (img@65@01 n@75@01) (Set_in (inv@64@01 n@75@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
; [eval] old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@75@01) n@75@01))
(push) ; 7
(assert (not (and (img@11@01 n@75@01) (Set_in (inv@10@01 n@75@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 33 | !(n@75@01 in nodes@2@01)]
(assert (not (Set_in n@75@01 nodes@2@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (Set_in n@75@01 nodes@2@01)
  (and
    (Set_in n@75@01 nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@75@01) n@75@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@75@01) n@75@01))))
; Joined path conditions
(assert (or (not (Set_in n@75@01 nodes@2@01)) (Set_in n@75@01 nodes@2@01)))
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@75@01 $Ref)) (!
  (and
    (=>
      (Set_in n@75@01 nodes@2@01)
      (and
        (Set_in n@75@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@75@01) n@75@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@75@01) n@75@01)))
    (or (not (Set_in n@75@01 nodes@2@01)) (Set_in n@75@01 nodes@2@01)))
  :pattern ((Set_in n@75@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@75@01) n@75@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89-aux|)))
(assert (forall ((n@75@01 $Ref)) (!
  (=>
    (Set_in n@75@01 nodes@2@01)
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@75@01)
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@75@01)))
  :pattern ((Set_in n@75@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@75@01) n@75@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.left.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked)
(declare-const n@76@01 $Ref)
(push) ; 4
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] (n in nodes)
(push) ; 5
; [then-branch: 34 | n@76@01 in nodes@2@01 | live]
; [else-branch: 34 | !(n@76@01 in nodes@2@01) | live]
(push) ; 6
; [then-branch: 34 | n@76@01 in nodes@2@01]
(assert (Set_in n@76@01 nodes@2@01))
; [eval] old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@01)
      (=
        ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef12|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef13|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef14|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01) n@76@01))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite (= n@76@01 node@3@01) $Perm.Write $Perm.No)
    (ite
      (and (img@15@01 n@76@01) (Set_in (inv@14@01 n@76@01) nodes@2@01))
      (- $Perm.Write (pTaken@39@01 n@76@01))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 35 | Lookup(is_marked, sm@41@01, n@76@01) | live]
; [else-branch: 35 | !(Lookup(is_marked, sm@41@01, n@76@01)) | live]
(push) ; 8
; [then-branch: 35 | Lookup(is_marked, sm@41@01, n@76@01)]
(assert ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
(pop) ; 8
(push) ; 8
; [else-branch: 35 | !(Lookup(is_marked, sm@41@01, n@76@01))]
(assert (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01) n@76@01))
(push) ; 9
(assert (not (and (img@69@01 n@76@01) (Set_in (inv@68@01 n@76@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01) n@76@01))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
  ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01)))
(push) ; 7
; [then-branch: 36 | !(Lookup(is_marked, sm@41@01, n@76@01)) && Lookup(is_marked, sm@70@01, n@76@01) | live]
; [else-branch: 36 | !(!(Lookup(is_marked, sm@41@01, n@76@01)) && Lookup(is_marked, sm@70@01, n@76@01)) | live]
(push) ; 8
; [then-branch: 36 | !(Lookup(is_marked, sm@41@01, n@76@01)) && Lookup(is_marked, sm@70@01, n@76@01)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
  ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01)))
; [eval] n.left == null || n.left.is_marked
; [eval] n.left == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01) n@76@01))
(push) ; 9
(assert (not (and (img@61@01 n@76@01) (Set_in (inv@60@01 n@76@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 37 | Lookup(left, sm@62@01, n@76@01) == Null | live]
; [else-branch: 37 | Lookup(left, sm@62@01, n@76@01) != Null | live]
(push) ; 10
; [then-branch: 37 | Lookup(left, sm@62@01, n@76@01) == Null]
(assert (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01) $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 37 | Lookup(left, sm@62@01, n@76@01) != Null]
(assert (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(push) ; 11
(assert (not (and (img@61@01 n@76@01) (Set_in (inv@60@01 n@76@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01)) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01)))
(push) ; 11
(assert (not (and
  (img@69@01 ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01))
  (Set_in (inv@68@01 ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01)) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01)) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01)))))
(assert (or
  (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01) $Ref.null))
  (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01) $Ref.null)))
(pop) ; 8
(push) ; 8
; [else-branch: 36 | !(!(Lookup(is_marked, sm@41@01, n@76@01)) && Lookup(is_marked, sm@70@01, n@76@01))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
    ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
    ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
    ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01) n@76@01)
    (=>
      (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01) $Ref.null))
      (and
        (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01)) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01))))
    (or
      (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01) $Ref.null))
      (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01)))
  (and
    (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
    ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 34 | !(n@76@01 in nodes@2@01)]
(assert (not (Set_in n@76@01 nodes@2@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (=>
  (Set_in n@76@01 nodes@2@01)
  (and
    (Set_in n@76@01 nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01) n@76@01)
    (=>
      (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01) n@76@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
      ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01) n@76@01)
        (=>
          (not
            (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01) $Ref.null))
          (and
            (not
              (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01) $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01)) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01))))
        (or
          (not
            (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01) $Ref.null))
          (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
          ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01)))
      (and
        (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01))))))
; Joined path conditions
(assert (or (not (Set_in n@76@01 nodes@2@01)) (Set_in n@76@01 nodes@2@01)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@76@01 $Ref)) (!
  (and
    (=>
      (Set_in n@76@01 nodes@2@01)
      (and
        (Set_in n@76@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01) n@76@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01) n@76@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
          ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
            ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
            ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01)
            ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01) n@76@01)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01)) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01)
                  $Ref.null))
              (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01) $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
              ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
            ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01)))))
    (or (not (Set_in n@76@01 nodes@2@01)) (Set_in n@76@01 nodes@2@01)))
  :pattern ((Set_in n@76@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01) n@76@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@76@01 $Ref)) (!
  (and
    (=>
      (Set_in n@76@01 nodes@2@01)
      (and
        (Set_in n@76@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01) n@76@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01) n@76@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
          ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
            ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
            ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01)
            ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01) n@76@01)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01)) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01)
                  $Ref.null))
              (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01) $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
              ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
            ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01)))))
    (or (not (Set_in n@76@01 nodes@2@01)) (Set_in n@76@01 nodes@2@01)))
  :pattern ((Set_in n@76@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01) n@76@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01)) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@76@01 $Ref)) (!
  (=>
    (and
      (Set_in n@76@01 nodes@2@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@76@01))
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01)))
    (or
      (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01))))
  :pattern ((Set_in n@76@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@76@01) n@76@01))
  :pattern ((Set_in n@76@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01) n@76@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01)) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@76@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.right.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked)
(declare-const n@77@01 $Ref)
(push) ; 4
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] (n in nodes)
(push) ; 5
; [then-branch: 38 | n@77@01 in nodes@2@01 | live]
; [else-branch: 38 | !(n@77@01 in nodes@2@01) | live]
(push) ; 6
; [then-branch: 38 | n@77@01 in nodes@2@01]
(assert (Set_in n@77@01 nodes@2@01))
; [eval] old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@01)
      (=
        ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef12|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef13|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef14|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01) n@77@01))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite (= n@77@01 node@3@01) $Perm.Write $Perm.No)
    (ite
      (and (img@15@01 n@77@01) (Set_in (inv@14@01 n@77@01) nodes@2@01))
      (- $Perm.Write (pTaken@39@01 n@77@01))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 39 | Lookup(is_marked, sm@41@01, n@77@01) | live]
; [else-branch: 39 | !(Lookup(is_marked, sm@41@01, n@77@01)) | live]
(push) ; 8
; [then-branch: 39 | Lookup(is_marked, sm@41@01, n@77@01)]
(assert ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
(pop) ; 8
(push) ; 8
; [else-branch: 39 | !(Lookup(is_marked, sm@41@01, n@77@01))]
(assert (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01) n@77@01))
(push) ; 9
(assert (not (and (img@69@01 n@77@01) (Set_in (inv@68@01 n@77@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01) n@77@01))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
  ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01)))
(push) ; 7
; [then-branch: 40 | !(Lookup(is_marked, sm@41@01, n@77@01)) && Lookup(is_marked, sm@70@01, n@77@01) | live]
; [else-branch: 40 | !(!(Lookup(is_marked, sm@41@01, n@77@01)) && Lookup(is_marked, sm@70@01, n@77@01)) | live]
(push) ; 8
; [then-branch: 40 | !(Lookup(is_marked, sm@41@01, n@77@01)) && Lookup(is_marked, sm@70@01, n@77@01)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
  ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01)))
; [eval] n.right == null || n.right.is_marked
; [eval] n.right == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01) n@77@01))
(push) ; 9
(assert (not (and (img@65@01 n@77@01) (Set_in (inv@64@01 n@77@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 41 | Lookup(right, sm@66@01, n@77@01) == Null | live]
; [else-branch: 41 | Lookup(right, sm@66@01, n@77@01) != Null | live]
(push) ; 10
; [then-branch: 41 | Lookup(right, sm@66@01, n@77@01) == Null]
(assert (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01) $Ref.null))
(pop) ; 10
(push) ; 10
; [else-branch: 41 | Lookup(right, sm@66@01, n@77@01) != Null]
(assert (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(push) ; 11
(assert (not (and (img@65@01 n@77@01) (Set_in (inv@64@01 n@77@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01)) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01)))
(push) ; 11
(assert (not (and
  (img@69@01 ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01))
  (Set_in (inv@68@01 ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01)) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 11
; 0,00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01)) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01)))))
(assert (or
  (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01) $Ref.null))
  (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01) $Ref.null)))
(pop) ; 8
(push) ; 8
; [else-branch: 40 | !(!(Lookup(is_marked, sm@41@01, n@77@01)) && Lookup(is_marked, sm@70@01, n@77@01))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
    ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
    ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
    ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01) n@77@01)
    (=>
      (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01) $Ref.null))
      (and
        (not
          (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01)) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01))))
    (or
      (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01) $Ref.null))
      (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01)))
  (and
    (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
    ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 38 | !(n@77@01 in nodes@2@01)]
(assert (not (Set_in n@77@01 nodes@2@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (=>
  (Set_in n@77@01 nodes@2@01)
  (and
    (Set_in n@77@01 nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01) n@77@01)
    (=>
      (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01) n@77@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
      ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01) n@77@01)
        (=>
          (not
            (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01) $Ref.null))
          (and
            (not
              (=
                ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01)
                $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01)) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01))))
        (or
          (not
            (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01) $Ref.null))
          (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
          ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01)))
      (and
        (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01))))))
; Joined path conditions
(assert (or (not (Set_in n@77@01 nodes@2@01)) (Set_in n@77@01 nodes@2@01)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@77@01 $Ref)) (!
  (and
    (=>
      (Set_in n@77@01 nodes@2@01)
      (and
        (Set_in n@77@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01) n@77@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01) n@77@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
          ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
            ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
            ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01)
            ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01) n@77@01)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01)) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
              ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
            ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01)))))
    (or (not (Set_in n@77@01 nodes@2@01)) (Set_in n@77@01 nodes@2@01)))
  :pattern ((Set_in n@77@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01) n@77@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@77@01 $Ref)) (!
  (and
    (=>
      (Set_in n@77@01 nodes@2@01)
      (and
        (Set_in n@77@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01) n@77@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01) n@77@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
          ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
            ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
            ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01)
            ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01) n@77@01)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01)) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
              ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
            ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01)))))
    (or (not (Set_in n@77@01 nodes@2@01)) (Set_in n@77@01 nodes@2@01)))
  :pattern ((Set_in n@77@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01) n@77@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01)) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@77@01 $Ref)) (!
  (=>
    (and
      (Set_in n@77@01 nodes@2@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) n@77@01))
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01)))
    (or
      (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01))))
  :pattern ((Set_in n@77@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@77@01) n@77@01))
  :pattern ((Set_in n@77@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01) n@77@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01)) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@77@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] node.right != null && !node.right.is_marked
; [eval] node.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01) node@3@01))
(set-option :timeout 0)
(push) ; 4
(assert (not (and (img@65@01 node@3@01) (Set_in (inv@64@01 node@3@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
; [then-branch: 42 | Lookup(right, sm@66@01, node@3@01) == Null | live]
; [else-branch: 42 | Lookup(right, sm@66@01, node@3@01) != Null | live]
(push) ; 5
; [then-branch: 42 | Lookup(right, sm@66@01, node@3@01) == Null]
(assert (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01) $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 42 | Lookup(right, sm@66@01, node@3@01) != Null]
(assert (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01) $Ref.null)))
; [eval] !node.right.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(push) ; 6
(assert (not (and (img@65@01 node@3@01) (Set_in (inv@64@01 node@3@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01)) ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01)))
(push) ; 6
(assert (not (and
  (img@69@01 ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01))
  (Set_in (inv@68@01 ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01)) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01)) ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01)))))
(assert (or
  (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01) $Ref.null))
  (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01) $Ref.null)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01) $Ref.null))
    (not
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01)))))))
(check-sat)
; unknown
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01) $Ref.null))
  (not
    ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01))))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 43 | Lookup(right, sm@66@01, node@3@01) != Null && !(Lookup(is_marked, sm@70@01, Lookup(right, sm@66@01, node@3@01))) | live]
; [else-branch: 43 | !(Lookup(right, sm@66@01, node@3@01) != Null && !(Lookup(is_marked, sm@70@01, Lookup(right, sm@66@01, node@3@01)))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 43 | Lookup(right, sm@66@01, node@3@01) != Null && !(Lookup(is_marked, sm@70@01, Lookup(right, sm@66@01, node@3@01)))]
(assert (and
  (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01) $Ref.null))
  (not
    ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01)))))
; [exec]
; trav_rec(nodes, node.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(push) ; 5
(assert (not (and (img@65@01 node@3@01) (Set_in (inv@64@01 node@3@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] (node in nodes)
(push) ; 5
(assert (not (Set_in ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01) nodes@2@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (Set_in ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01) nodes@2@01))
; [eval] !((null in nodes))
; [eval] (null in nodes)
(declare-const n@78@01 $Ref)
(push) ; 5
; [eval] (n in nodes)
(assert (Set_in n@78@01 nodes@2@01))
(pop) ; 5
(declare-fun inv@79@01 ($Ref) $Ref)
(declare-fun img@80@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n1@78@01 $Ref) (n2@78@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@78@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n1@78@01) n1@78@01))
      (and
        (Set_in n2@78@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n2@78@01) n2@78@01))
      (= n1@78@01 n2@78@01))
    (= n1@78@01 n2@78@01))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@78@01 $Ref)) (!
  (=>
    (Set_in n@78@01 nodes@2@01)
    (and (= (inv@79@01 n@78@01) n@78@01) (img@80@01 n@78@01)))
  :pattern ((Set_in n@78@01 nodes@2@01))
  :pattern ((inv@79@01 n@78@01))
  :pattern ((img@80@01 n@78@01))
  :qid |left-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@80@01 r) (Set_in (inv@79@01 r) nodes@2@01)) (= (inv@79@01 r) r))
  :pattern ((inv@79@01 r))
  :qid |left-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@79@01 r) nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) r) r))
  :pattern ((inv@79@01 r))
  :qid |quant-u-49|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@81@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@79@01 r) nodes@2@01) (img@80@01 r) (= r (inv@79@01 r)))
    ($Perm.min
      (ite
        (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      (pTaken@81@01 r))
    $Perm.No)
  
  :qid |quant-u-51|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@79@01 r) nodes@2@01) (img@80@01 r) (= r (inv@79@01 r)))
    (= (- $Perm.Write (pTaken@81@01 r)) $Perm.No))
  
  :qid |quant-u-52|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$0@82@01 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$0 in nodes)
(assert (Set_in n$0@82@01 nodes@2@01))
(pop) ; 5
(declare-fun inv@83@01 ($Ref) $Ref)
(declare-fun img@84@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$01@82@01 $Ref) (n$02@82@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$01@82@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$01@82@01) n$01@82@01))
      (and
        (Set_in n$02@82@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$02@82@01) n$02@82@01))
      (= n$01@82@01 n$02@82@01))
    (= n$01@82@01 n$02@82@01))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@82@01 $Ref)) (!
  (=>
    (Set_in n$0@82@01 nodes@2@01)
    (and (= (inv@83@01 n$0@82@01) n$0@82@01) (img@84@01 n$0@82@01)))
  :pattern ((Set_in n$0@82@01 nodes@2@01))
  :pattern ((inv@83@01 n$0@82@01))
  :pattern ((img@84@01 n$0@82@01))
  :qid |right-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@84@01 r) (Set_in (inv@83@01 r) nodes@2@01)) (= (inv@83@01 r) r))
  :pattern ((inv@83@01 r))
  :qid |right-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@83@01 r) nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) r) r))
  :pattern ((inv@83@01 r))
  :qid |quant-u-54|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@85@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@83@01 r) nodes@2@01) (img@84@01 r) (= r (inv@83@01 r)))
    ($Perm.min
      (ite
        (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      (pTaken@85@01 r))
    $Perm.No)
  
  :qid |quant-u-56|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@83@01 r) nodes@2@01) (img@84@01 r) (= r (inv@83@01 r)))
    (= (- $Perm.Write (pTaken@85@01 r)) $Perm.No))
  
  :qid |quant-u-57|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$1@86@01 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$1 in nodes)
(assert (Set_in n$1@86@01 nodes@2@01))
(pop) ; 5
(declare-fun inv@87@01 ($Ref) $Ref)
(declare-fun img@88@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$11@86@01 $Ref) (n$12@86@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$11@86@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n$11@86@01) n$11@86@01))
      (and
        (Set_in n$12@86@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n$12@86@01) n$12@86@01))
      (= n$11@86@01 n$12@86@01))
    (= n$11@86@01 n$12@86@01))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@86@01 $Ref)) (!
  (=>
    (Set_in n$1@86@01 nodes@2@01)
    (and (= (inv@87@01 n$1@86@01) n$1@86@01) (img@88@01 n$1@86@01)))
  :pattern ((Set_in n$1@86@01 nodes@2@01))
  :pattern ((inv@87@01 n$1@86@01))
  :pattern ((img@88@01 n$1@86@01))
  :qid |is_marked-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@88@01 r) (Set_in (inv@87@01 r) nodes@2@01)) (= (inv@87@01 r) r))
  :pattern ((inv@87@01 r))
  :qid |is_marked-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@87@01 r) nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r) r))
  :pattern ((inv@87@01 r))
  :qid |quant-u-59|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@89@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@87@01 r) nodes@2@01) (img@88@01 r) (= r (inv@87@01 r)))
    ($Perm.min
      (ite
        (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      (pTaken@89@01 r))
    $Perm.No)
  
  :qid |quant-u-61|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@87@01 r) nodes@2@01) (img@88@01 r) (= r (inv@87@01 r)))
    (= (- $Perm.Write (pTaken@89@01 r)) $Perm.No))
  
  :qid |quant-u-62|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall n$2: Ref :: { (n$2.left in nodes) } { (n$2 in nodes), n$2.left } (n$2 in nodes) && n$2.left != null ==> (n$2.left in nodes))
(declare-const n$2@90@01 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$2 in nodes) && n$2.left != null ==> (n$2.left in nodes)
; [eval] (n$2 in nodes) && n$2.left != null
; [eval] (n$2 in nodes)
(push) ; 6
; [then-branch: 44 | !(n$2@90@01 in nodes@2@01) | live]
; [else-branch: 44 | n$2@90@01 in nodes@2@01 | live]
(push) ; 7
; [then-branch: 44 | !(n$2@90@01 in nodes@2@01)]
(assert (not (Set_in n$2@90@01 nodes@2@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 44 | n$2@90@01 in nodes@2@01]
(assert (Set_in n$2@90@01 nodes@2@01))
; [eval] n$2.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) n$2@90@01))
(push) ; 8
(assert (not (and (img@61@01 n$2@90@01) (Set_in (inv@60@01 n$2@90@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (=>
  (Set_in n$2@90@01 nodes@2@01)
  (and
    (Set_in n$2@90@01 nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) n$2@90@01))))
(assert (or (Set_in n$2@90@01 nodes@2@01) (not (Set_in n$2@90@01 nodes@2@01))))
(push) ; 6
; [then-branch: 45 | n$2@90@01 in nodes@2@01 && Lookup(left, sm@62@01, n$2@90@01) != Null | live]
; [else-branch: 45 | !(n$2@90@01 in nodes@2@01 && Lookup(left, sm@62@01, n$2@90@01) != Null) | live]
(push) ; 7
; [then-branch: 45 | n$2@90@01 in nodes@2@01 && Lookup(left, sm@62@01, n$2@90@01) != Null]
(assert (and
  (Set_in n$2@90@01 nodes@2@01)
  (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) $Ref.null))))
; [eval] (n$2.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) n$2@90@01))
(push) ; 8
(assert (not (and (img@61@01 n$2@90@01) (Set_in (inv@60@01 n$2@90@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 45 | !(n$2@90@01 in nodes@2@01 && Lookup(left, sm@62@01, n$2@90@01) != Null)]
(assert (not
  (and
    (Set_in n$2@90@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (=>
  (and
    (Set_in n$2@90@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) $Ref.null)))
  (and
    (Set_in n$2@90@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) n$2@90@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@90@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) $Ref.null))))
  (and
    (Set_in n$2@90@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@90@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@90@01 nodes@2@01)
      (and
        (Set_in n$2@90@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) n$2@90@01)))
    (or (Set_in n$2@90@01 nodes@2@01) (not (Set_in n$2@90@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$2@90@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) $Ref.null)))
      (and
        (Set_in n$2@90@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) n$2@90@01)))
    (or
      (not
        (and
          (Set_in n$2@90@01 nodes@2@01)
          (not
            (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) $Ref.null))))
      (and
        (Set_in n$2@90@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) nodes@2@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(assert (forall ((n$2@90@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@90@01 nodes@2@01)
      (and
        (Set_in n$2@90@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) n$2@90@01)))
    (or (Set_in n$2@90@01 nodes@2@01) (not (Set_in n$2@90@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$2@90@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) $Ref.null)))
      (and
        (Set_in n$2@90@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) n$2@90@01)))
    (or
      (not
        (and
          (Set_in n$2@90@01 nodes@2@01)
          (not
            (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) $Ref.null))))
      (and
        (Set_in n$2@90@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) $Ref.null)))))
  :pattern ((Set_in n$2@90@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) n$2@90@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(push) ; 5
(assert (not (forall ((n$2@90@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@90@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) nodes@2@01))
  :pattern ((Set_in n$2@90@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) n$2@90@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$2@90@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@90@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) nodes@2@01))
  :pattern ((Set_in n$2@90@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$2@90@01) n$2@90@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|)))
; [eval] (forall n$3: Ref :: { (n$3.right in nodes) } { (n$3 in nodes), n$3.right } (n$3 in nodes) && n$3.right != null ==> (n$3.right in nodes))
(declare-const n$3@91@01 $Ref)
(push) ; 5
; [eval] (n$3 in nodes) && n$3.right != null ==> (n$3.right in nodes)
; [eval] (n$3 in nodes) && n$3.right != null
; [eval] (n$3 in nodes)
(push) ; 6
; [then-branch: 46 | !(n$3@91@01 in nodes@2@01) | live]
; [else-branch: 46 | n$3@91@01 in nodes@2@01 | live]
(push) ; 7
; [then-branch: 46 | !(n$3@91@01 in nodes@2@01)]
(assert (not (Set_in n$3@91@01 nodes@2@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 46 | n$3@91@01 in nodes@2@01]
(assert (Set_in n$3@91@01 nodes@2@01))
; [eval] n$3.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) n$3@91@01))
(push) ; 8
(assert (not (and (img@65@01 n$3@91@01) (Set_in (inv@64@01 n$3@91@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (=>
  (Set_in n$3@91@01 nodes@2@01)
  (and
    (Set_in n$3@91@01 nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) n$3@91@01))))
(assert (or (Set_in n$3@91@01 nodes@2@01) (not (Set_in n$3@91@01 nodes@2@01))))
(push) ; 6
; [then-branch: 47 | n$3@91@01 in nodes@2@01 && Lookup(right, sm@66@01, n$3@91@01) != Null | live]
; [else-branch: 47 | !(n$3@91@01 in nodes@2@01 && Lookup(right, sm@66@01, n$3@91@01) != Null) | live]
(push) ; 7
; [then-branch: 47 | n$3@91@01 in nodes@2@01 && Lookup(right, sm@66@01, n$3@91@01) != Null]
(assert (and
  (Set_in n$3@91@01 nodes@2@01)
  (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) $Ref.null))))
; [eval] (n$3.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) n$3@91@01))
(push) ; 8
(assert (not (and (img@65@01 n$3@91@01) (Set_in (inv@64@01 n$3@91@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 47 | !(n$3@91@01 in nodes@2@01 && Lookup(right, sm@66@01, n$3@91@01) != Null)]
(assert (not
  (and
    (Set_in n$3@91@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (=>
  (and
    (Set_in n$3@91@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) $Ref.null)))
  (and
    (Set_in n$3@91@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) n$3@91@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$3@91@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) $Ref.null))))
  (and
    (Set_in n$3@91@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$3@91@01 $Ref)) (!
  (and
    (=>
      (Set_in n$3@91@01 nodes@2@01)
      (and
        (Set_in n$3@91@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) n$3@91@01)))
    (or (Set_in n$3@91@01 nodes@2@01) (not (Set_in n$3@91@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$3@91@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) $Ref.null)))
      (and
        (Set_in n$3@91@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) n$3@91@01)))
    (or
      (not
        (and
          (Set_in n$3@91@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01)
              $Ref.null))))
      (and
        (Set_in n$3@91@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) nodes@2@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(assert (forall ((n$3@91@01 $Ref)) (!
  (and
    (=>
      (Set_in n$3@91@01 nodes@2@01)
      (and
        (Set_in n$3@91@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) n$3@91@01)))
    (or (Set_in n$3@91@01 nodes@2@01) (not (Set_in n$3@91@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$3@91@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) $Ref.null)))
      (and
        (Set_in n$3@91@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) n$3@91@01)))
    (or
      (not
        (and
          (Set_in n$3@91@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01)
              $Ref.null))))
      (and
        (Set_in n$3@91@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) $Ref.null)))))
  :pattern ((Set_in n$3@91@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) n$3@91@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(push) ; 5
(assert (not (forall ((n$3@91@01 $Ref)) (!
  (=>
    (and
      (Set_in n$3@91@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) nodes@2@01))
  :pattern ((Set_in n$3@91@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) n$3@91@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$3@91@01 $Ref)) (!
  (=>
    (and
      (Set_in n$3@91@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) nodes@2@01))
  :pattern ((Set_in n$3@91@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$3@91@01) n$3@91@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|)))
; [eval] !node.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01)) ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01)))
(push) ; 5
(assert (not (and
  (img@69@01 ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01))
  (Set_in (inv@68@01 ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01)) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(declare-const $t@92@01 $Snap)
(assert (= $t@92@01 ($Snap.combine ($Snap.first $t@92@01) ($Snap.second $t@92@01))))
(assert (= ($Snap.first $t@92@01) $Snap.unit))
; [eval] (node in nodes)
(assert (=
  ($Snap.second $t@92@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@92@01))
    ($Snap.second ($Snap.second $t@92@01)))))
(assert (= ($Snap.first ($Snap.second $t@92@01)) $Snap.unit))
; [eval] !((null in nodes))
; [eval] (null in nodes)
(assert (=
  ($Snap.second ($Snap.second $t@92@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@92@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@92@01))))))
(declare-const n$4@93@01 $Ref)
(push) ; 5
; [eval] (n$4 in nodes)
(assert (Set_in n$4@93@01 nodes@2@01))
(pop) ; 5
(declare-fun inv@94@01 ($Ref) $Ref)
(declare-fun img@95@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$41@93@01 $Ref) (n$42@93@01 $Ref)) (!
  (=>
    (and
      (Set_in n$41@93@01 nodes@2@01)
      (Set_in n$42@93@01 nodes@2@01)
      (= n$41@93@01 n$42@93@01))
    (= n$41@93@01 n$42@93@01))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@93@01 $Ref)) (!
  (=>
    (Set_in n$4@93@01 nodes@2@01)
    (and (= (inv@94@01 n$4@93@01) n$4@93@01) (img@95@01 n$4@93@01)))
  :pattern ((Set_in n$4@93@01 nodes@2@01))
  :pattern ((inv@94@01 n$4@93@01))
  :pattern ((img@95@01 n$4@93@01))
  :qid |quant-u-64|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01)) (= (inv@94@01 r) r))
  :pattern ((inv@94@01 r))
  :qid |left-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$4@93@01 $Ref)) (!
  (=> (Set_in n$4@93@01 nodes@2@01) (not (= n$4@93@01 $Ref.null)))
  :pattern ((Set_in n$4@93@01 nodes@2@01))
  :pattern ((inv@94@01 n$4@93@01))
  :pattern ((img@95@01 n$4@93@01))
  :qid |left-permImpliesNonNull|)))
(declare-const sm@96@01 $FVF<left>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@94@01 r) nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) r) r))
  :pattern ((inv@94@01 r))
  :qid |quant-u-65|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@92@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))))
(declare-const n$5@97@01 $Ref)
(push) ; 5
; [eval] (n$5 in nodes)
(assert (Set_in n$5@97@01 nodes@2@01))
(pop) ; 5
(declare-fun inv@98@01 ($Ref) $Ref)
(declare-fun img@99@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$51@97@01 $Ref) (n$52@97@01 $Ref)) (!
  (=>
    (and
      (Set_in n$51@97@01 nodes@2@01)
      (Set_in n$52@97@01 nodes@2@01)
      (= n$51@97@01 n$52@97@01))
    (= n$51@97@01 n$52@97@01))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$5@97@01 $Ref)) (!
  (=>
    (Set_in n$5@97@01 nodes@2@01)
    (and (= (inv@98@01 n$5@97@01) n$5@97@01) (img@99@01 n$5@97@01)))
  :pattern ((Set_in n$5@97@01 nodes@2@01))
  :pattern ((inv@98@01 n$5@97@01))
  :pattern ((img@99@01 n$5@97@01))
  :qid |quant-u-67|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01)) (= (inv@98@01 r) r))
  :pattern ((inv@98@01 r))
  :qid |right-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$5@97@01 $Ref)) (!
  (=> (Set_in n$5@97@01 nodes@2@01) (not (= n$5@97@01 $Ref.null)))
  :pattern ((Set_in n$5@97@01 nodes@2@01))
  :pattern ((inv@98@01 n$5@97@01))
  :pattern ((img@99@01 n$5@97@01))
  :qid |right-permImpliesNonNull|)))
(declare-const sm@100@01 $FVF<right>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@98@01 r) nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) r) r))
  :pattern ((inv@98@01 r))
  :qid |quant-u-68|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01))))))))
(declare-const n$6@101@01 $Ref)
(push) ; 5
; [eval] (n$6 in nodes)
(assert (Set_in n$6@101@01 nodes@2@01))
(pop) ; 5
(declare-fun inv@102@01 ($Ref) $Ref)
(declare-fun img@103@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$61@101@01 $Ref) (n$62@101@01 $Ref)) (!
  (=>
    (and
      (Set_in n$61@101@01 nodes@2@01)
      (Set_in n$62@101@01 nodes@2@01)
      (= n$61@101@01 n$62@101@01))
    (= n$61@101@01 n$62@101@01))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$6@101@01 $Ref)) (!
  (=>
    (Set_in n$6@101@01 nodes@2@01)
    (and (= (inv@102@01 n$6@101@01) n$6@101@01) (img@103@01 n$6@101@01)))
  :pattern ((Set_in n$6@101@01 nodes@2@01))
  :pattern ((inv@102@01 n$6@101@01))
  :pattern ((img@103@01 n$6@101@01))
  :qid |quant-u-70|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (= (inv@102@01 r) r))
  :pattern ((inv@102@01 r))
  :qid |is_marked-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$6@101@01 $Ref)) (!
  (=> (Set_in n$6@101@01 nodes@2@01) (not (= n$6@101@01 $Ref.null)))
  :pattern ((Set_in n$6@101@01 nodes@2@01))
  :pattern ((inv@102@01 n$6@101@01))
  :pattern ((img@103@01 n$6@101@01))
  :qid |is_marked-permImpliesNonNull|)))
(declare-const sm@104@01 $FVF<is_marked>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@102@01 r) nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r) r))
  :pattern ((inv@102@01 r))
  :qid |quant-u-71|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01))))))
  $Snap.unit))
; [eval] (forall n$7: Ref :: { (n$7.left in nodes) } { (n$7 in nodes), n$7.left } (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes))
(declare-const n$7@105@01 $Ref)
(push) ; 5
; [eval] (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes)
; [eval] (n$7 in nodes) && n$7.left != null
; [eval] (n$7 in nodes)
(push) ; 6
; [then-branch: 48 | !(n$7@105@01 in nodes@2@01) | live]
; [else-branch: 48 | n$7@105@01 in nodes@2@01 | live]
(push) ; 7
; [then-branch: 48 | !(n$7@105@01 in nodes@2@01)]
(assert (not (Set_in n$7@105@01 nodes@2@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 48 | n$7@105@01 in nodes@2@01]
(assert (Set_in n$7@105@01 nodes@2@01))
; [eval] n$7.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef24|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) n$7@105@01))
(push) ; 8
(assert (not (and (img@95@01 n$7@105@01) (Set_in (inv@94@01 n$7@105@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (=>
  (Set_in n$7@105@01 nodes@2@01)
  (and
    (Set_in n$7@105@01 nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) n$7@105@01))))
(assert (or (Set_in n$7@105@01 nodes@2@01) (not (Set_in n$7@105@01 nodes@2@01))))
(push) ; 6
; [then-branch: 49 | n$7@105@01 in nodes@2@01 && Lookup(left, sm@96@01, n$7@105@01) != Null | live]
; [else-branch: 49 | !(n$7@105@01 in nodes@2@01 && Lookup(left, sm@96@01, n$7@105@01) != Null) | live]
(push) ; 7
; [then-branch: 49 | n$7@105@01 in nodes@2@01 && Lookup(left, sm@96@01, n$7@105@01) != Null]
(assert (and
  (Set_in n$7@105@01 nodes@2@01)
  (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) $Ref.null))))
; [eval] (n$7.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef24|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) n$7@105@01))
(push) ; 8
(assert (not (and (img@95@01 n$7@105@01) (Set_in (inv@94@01 n$7@105@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 49 | !(n$7@105@01 in nodes@2@01 && Lookup(left, sm@96@01, n$7@105@01) != Null)]
(assert (not
  (and
    (Set_in n$7@105@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (=>
  (and
    (Set_in n$7@105@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) $Ref.null)))
  (and
    (Set_in n$7@105@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) n$7@105@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$7@105@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) $Ref.null))))
  (and
    (Set_in n$7@105@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$7@105@01 $Ref)) (!
  (and
    (=>
      (Set_in n$7@105@01 nodes@2@01)
      (and
        (Set_in n$7@105@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) n$7@105@01)))
    (or (Set_in n$7@105@01 nodes@2@01) (not (Set_in n$7@105@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$7@105@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) $Ref.null)))
      (and
        (Set_in n$7@105@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) n$7@105@01)))
    (or
      (not
        (and
          (Set_in n$7@105@01 nodes@2@01)
          (not
            (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) $Ref.null))))
      (and
        (Set_in n$7@105@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) nodes@2@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@105@01 $Ref)) (!
  (and
    (=>
      (Set_in n$7@105@01 nodes@2@01)
      (and
        (Set_in n$7@105@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) n$7@105@01)))
    (or (Set_in n$7@105@01 nodes@2@01) (not (Set_in n$7@105@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$7@105@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) $Ref.null)))
      (and
        (Set_in n$7@105@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) n$7@105@01)))
    (or
      (not
        (and
          (Set_in n$7@105@01 nodes@2@01)
          (not
            (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) $Ref.null))))
      (and
        (Set_in n$7@105@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) $Ref.null)))))
  :pattern ((Set_in n$7@105@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) n$7@105@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@105@01 $Ref)) (!
  (=>
    (and
      (Set_in n$7@105@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) nodes@2@01))
  :pattern ((Set_in n$7@105@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@105@01) n$7@105@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))))
  $Snap.unit))
; [eval] (forall n$8: Ref :: { (n$8.right in nodes) } { (n$8 in nodes), n$8.right } (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes))
(declare-const n$8@106@01 $Ref)
(push) ; 5
; [eval] (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes)
; [eval] (n$8 in nodes) && n$8.right != null
; [eval] (n$8 in nodes)
(push) ; 6
; [then-branch: 50 | !(n$8@106@01 in nodes@2@01) | live]
; [else-branch: 50 | n$8@106@01 in nodes@2@01 | live]
(push) ; 7
; [then-branch: 50 | !(n$8@106@01 in nodes@2@01)]
(assert (not (Set_in n$8@106@01 nodes@2@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 50 | n$8@106@01 in nodes@2@01]
(assert (Set_in n$8@106@01 nodes@2@01))
; [eval] n$8.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
    :qid |qp.fvfValDef25|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef26|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01) n$8@106@01))
(push) ; 8
(assert (not (and (img@99@01 n$8@106@01) (Set_in (inv@98@01 n$8@106@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (=>
  (Set_in n$8@106@01 nodes@2@01)
  (and
    (Set_in n$8@106@01 nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01) n$8@106@01))))
(assert (or (Set_in n$8@106@01 nodes@2@01) (not (Set_in n$8@106@01 nodes@2@01))))
(push) ; 6
; [then-branch: 51 | n$8@106@01 in nodes@2@01 && Lookup(right, sm@100@01, n$8@106@01) != Null | live]
; [else-branch: 51 | !(n$8@106@01 in nodes@2@01 && Lookup(right, sm@100@01, n$8@106@01) != Null) | live]
(push) ; 7
; [then-branch: 51 | n$8@106@01 in nodes@2@01 && Lookup(right, sm@100@01, n$8@106@01) != Null]
(assert (and
  (Set_in n$8@106@01 nodes@2@01)
  (not (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01) $Ref.null))))
; [eval] (n$8.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
    :qid |qp.fvfValDef25|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef26|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01) n$8@106@01))
(push) ; 8
(assert (not (and (img@99@01 n$8@106@01) (Set_in (inv@98@01 n$8@106@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 51 | !(n$8@106@01 in nodes@2@01 && Lookup(right, sm@100@01, n$8@106@01) != Null)]
(assert (not
  (and
    (Set_in n$8@106@01 nodes@2@01)
    (not
      (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (=>
  (and
    (Set_in n$8@106@01 nodes@2@01)
    (not
      (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01) $Ref.null)))
  (and
    (Set_in n$8@106@01 nodes@2@01)
    (not
      (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01) n$8@106@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$8@106@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01) $Ref.null))))
  (and
    (Set_in n$8@106@01 nodes@2@01)
    (not
      (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$8@106@01 $Ref)) (!
  (and
    (=>
      (Set_in n$8@106@01 nodes@2@01)
      (and
        (Set_in n$8@106@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01) n$8@106@01)))
    (or (Set_in n$8@106@01 nodes@2@01) (not (Set_in n$8@106@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$8@106@01 nodes@2@01)
        (not
          (=
            ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01)
            $Ref.null)))
      (and
        (Set_in n$8@106@01 nodes@2@01)
        (not
          (=
            ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01)
            $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01) n$8@106@01)))
    (or
      (not
        (and
          (Set_in n$8@106@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01)
              $Ref.null))))
      (and
        (Set_in n$8@106@01 nodes@2@01)
        (not
          (=
            ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01)
            $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01) nodes@2@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@106@01 $Ref)) (!
  (and
    (=>
      (Set_in n$8@106@01 nodes@2@01)
      (and
        (Set_in n$8@106@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01) n$8@106@01)))
    (or (Set_in n$8@106@01 nodes@2@01) (not (Set_in n$8@106@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$8@106@01 nodes@2@01)
        (not
          (=
            ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01)
            $Ref.null)))
      (and
        (Set_in n$8@106@01 nodes@2@01)
        (not
          (=
            ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01)
            $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01) n$8@106@01)))
    (or
      (not
        (and
          (Set_in n$8@106@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01)
              $Ref.null))))
      (and
        (Set_in n$8@106@01 nodes@2@01)
        (not
          (=
            ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01)
            $Ref.null)))))
  :pattern ((Set_in n$8@106@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01) n$8@106@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@106@01 $Ref)) (!
  (=>
    (and
      (Set_in n$8@106@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01) nodes@2@01))
  :pattern ((Set_in n$8@106@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@106@01) n$8@106@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } (n in nodes) ==> old(n.is_marked) ==> n.is_marked)
(declare-const n@107@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(n.is_marked) ==> n.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 52 | n@107@01 in nodes@2@01 | live]
; [else-branch: 52 | !(n@107@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 52 | n@107@01 in nodes@2@01]
(assert (Set_in n@107@01 nodes@2@01))
; [eval] old(n.is_marked) ==> n.is_marked
; [eval] old(n.is_marked)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@107@01) n@107@01))
(push) ; 8
(assert (not (and (img@69@01 n@107@01) (Set_in (inv@68@01 n@107@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 53 | Lookup(is_marked, sm@70@01, n@107@01) | live]
; [else-branch: 53 | !(Lookup(is_marked, sm@70@01, n@107@01)) | live]
(push) ; 9
; [then-branch: 53 | Lookup(is_marked, sm@70@01, n@107@01)]
(assert ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@107@01))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef28|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@107@01) n@107@01))
(push) ; 10
(assert (not (and (img@103@01 n@107@01) (Set_in (inv@102@01 n@107@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(push) ; 9
; [else-branch: 53 | !(Lookup(is_marked, sm@70@01, n@107@01))]
(assert (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@107@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@107@01)
  (and
    ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@107@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@107@01) n@107@01))))
; Joined path conditions
(assert (or
  (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@107@01))
  ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@107@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 52 | !(n@107@01 in nodes@2@01)]
(assert (not (Set_in n@107@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (Set_in n@107@01 nodes@2@01)
  (and
    (Set_in n@107@01 nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@107@01) n@107@01)
    (=>
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@107@01)
      (and
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@107@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@107@01) n@107@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@107@01))
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@107@01)))))
; Joined path conditions
(assert (or (not (Set_in n@107@01 nodes@2@01)) (Set_in n@107@01 nodes@2@01)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@107@01 $Ref)) (!
  (and
    (=>
      (Set_in n@107@01 nodes@2@01)
      (and
        (Set_in n@107@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@107@01) n@107@01)
        (=>
          ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@107@01)
          (and
            ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@107@01)
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@107@01) n@107@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@107@01))
          ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@107@01))))
    (or (not (Set_in n@107@01 nodes@2@01)) (Set_in n@107@01 nodes@2@01)))
  :pattern ((Set_in n@107@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@107@01) n@107@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102-aux|)))
(assert (forall ((n@107@01 $Ref)) (!
  (=>
    (and
      (Set_in n@107@01 nodes@2@01)
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@107@01))
    ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@107@01))
  :pattern ((Set_in n@107@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@107@01) n@107@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))))))
  $Snap.unit))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef28|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01)) ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01)))
(push) ; 5
(assert (not (and
  (img@103@01 ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01))
  (Set_in (inv@102@01 ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01)) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.left } (n in nodes) ==> n.left == old(n.left))
(declare-const n@108@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> n.left == old(n.left)
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 54 | n@108@01 in nodes@2@01 | live]
; [else-branch: 54 | !(n@108@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 54 | n@108@01 in nodes@2@01]
(assert (Set_in n@108@01 nodes@2@01))
; [eval] n.left == old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef24|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@108@01) n@108@01))
(push) ; 8
(assert (not (and (img@95@01 n@108@01) (Set_in (inv@94@01 n@108@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [eval] old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@108@01) n@108@01))
(push) ; 8
(assert (not (and (img@61@01 n@108@01) (Set_in (inv@60@01 n@108@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 54 | !(n@108@01 in nodes@2@01)]
(assert (not (Set_in n@108@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (=>
  (Set_in n@108@01 nodes@2@01)
  (and
    (Set_in n@108@01 nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@108@01) n@108@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@108@01) n@108@01))))
; Joined path conditions
(assert (or (not (Set_in n@108@01 nodes@2@01)) (Set_in n@108@01 nodes@2@01)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@108@01 $Ref)) (!
  (and
    (=>
      (Set_in n@108@01 nodes@2@01)
      (and
        (Set_in n@108@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@108@01) n@108@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@108@01) n@108@01)))
    (or (not (Set_in n@108@01 nodes@2@01)) (Set_in n@108@01 nodes@2@01)))
  :pattern ((Set_in n@108@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@108@01) n@108@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86-aux|)))
(assert (forall ((n@108@01 $Ref)) (!
  (=>
    (Set_in n@108@01 nodes@2@01)
    (=
      ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@108@01)
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@108@01)))
  :pattern ((Set_in n@108@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@108@01) n@108@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.right } (n in nodes) ==> n.right == old(n.right))
(declare-const n@109@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> n.right == old(n.right)
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 55 | n@109@01 in nodes@2@01 | live]
; [else-branch: 55 | !(n@109@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 55 | n@109@01 in nodes@2@01]
(assert (Set_in n@109@01 nodes@2@01))
; [eval] n.right == old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
    :qid |qp.fvfValDef25|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef26|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@109@01) n@109@01))
(push) ; 8
(assert (not (and (img@99@01 n@109@01) (Set_in (inv@98@01 n@109@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [eval] old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@109@01) n@109@01))
(push) ; 8
(assert (not (and (img@65@01 n@109@01) (Set_in (inv@64@01 n@109@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 55 | !(n@109@01 in nodes@2@01)]
(assert (not (Set_in n@109@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (=>
  (Set_in n@109@01 nodes@2@01)
  (and
    (Set_in n@109@01 nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@109@01) n@109@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@109@01) n@109@01))))
; Joined path conditions
(assert (or (not (Set_in n@109@01 nodes@2@01)) (Set_in n@109@01 nodes@2@01)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@109@01 $Ref)) (!
  (and
    (=>
      (Set_in n@109@01 nodes@2@01)
      (and
        (Set_in n@109@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@109@01) n@109@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@109@01) n@109@01)))
    (or (not (Set_in n@109@01 nodes@2@01)) (Set_in n@109@01 nodes@2@01)))
  :pattern ((Set_in n@109@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@109@01) n@109@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89-aux|)))
(assert (forall ((n@109@01 $Ref)) (!
  (=>
    (Set_in n@109@01 nodes@2@01)
    (=
      ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@109@01)
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@109@01)))
  :pattern ((Set_in n@109@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@109@01) n@109@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01))))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.left.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked)
(declare-const n@110@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 56 | n@110@01 in nodes@2@01 | live]
; [else-branch: 56 | !(n@110@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 56 | n@110@01 in nodes@2@01]
(assert (Set_in n@110@01 nodes@2@01))
; [eval] old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01) n@110@01))
(push) ; 8
(assert (not (and (img@69@01 n@110@01) (Set_in (inv@68@01 n@110@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 57 | Lookup(is_marked, sm@70@01, n@110@01) | live]
; [else-branch: 57 | !(Lookup(is_marked, sm@70@01, n@110@01)) | live]
(push) ; 9
; [then-branch: 57 | Lookup(is_marked, sm@70@01, n@110@01)]
(assert ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
(pop) ; 9
(push) ; 9
; [else-branch: 57 | !(Lookup(is_marked, sm@70@01, n@110@01))]
(assert (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef28|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01) n@110@01))
(push) ; 10
(assert (not (and (img@103@01 n@110@01) (Set_in (inv@102@01 n@110@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01) n@110@01))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
  ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01)))
(push) ; 8
; [then-branch: 58 | !(Lookup(is_marked, sm@70@01, n@110@01)) && Lookup(is_marked, sm@104@01, n@110@01) | live]
; [else-branch: 58 | !(!(Lookup(is_marked, sm@70@01, n@110@01)) && Lookup(is_marked, sm@104@01, n@110@01)) | live]
(push) ; 9
; [then-branch: 58 | !(Lookup(is_marked, sm@70@01, n@110@01)) && Lookup(is_marked, sm@104@01, n@110@01)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
  ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01)))
; [eval] n.left == null || n.left.is_marked
; [eval] n.left == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef24|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01) n@110@01))
(push) ; 10
(assert (not (and (img@95@01 n@110@01) (Set_in (inv@94@01 n@110@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 59 | Lookup(left, sm@96@01, n@110@01) == Null | live]
; [else-branch: 59 | Lookup(left, sm@96@01, n@110@01) != Null | live]
(push) ; 11
; [then-branch: 59 | Lookup(left, sm@96@01, n@110@01) == Null]
(assert (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01) $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 59 | Lookup(left, sm@96@01, n@110@01) != Null]
(assert (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef24|))))
(push) ; 12
(assert (not (and (img@95@01 n@110@01) (Set_in (inv@94@01 n@110@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef28|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01)) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01)))
(push) ; 12
(assert (not (and
  (img@103@01 ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01))
  (Set_in (inv@102@01 ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01)) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01)) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01)))))
(assert (or
  (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01) $Ref.null))
  (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01) $Ref.null)))
(pop) ; 9
(push) ; 9
; [else-branch: 58 | !(!(Lookup(is_marked, sm@70@01, n@110@01)) && Lookup(is_marked, sm@104@01, n@110@01))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
    ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
    ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
    ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01) n@110@01)
    (=>
      (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01) $Ref.null))
      (and
        (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01)) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01))))
    (or
      (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01) $Ref.null))
      (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01)))
  (and
    (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
    ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 56 | !(n@110@01 in nodes@2@01)]
(assert (not (Set_in n@110@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (=>
  (Set_in n@110@01 nodes@2@01)
  (and
    (Set_in n@110@01 nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01) n@110@01)
    (=>
      (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01) n@110@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01) n@110@01)
        (=>
          (not
            (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01) $Ref.null))
          (and
            (not
              (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01) $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01)) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01))))
        (or
          (not
            (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01) $Ref.null))
          (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
          ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01)))
      (and
        (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01))))))
; Joined path conditions
(assert (or (not (Set_in n@110@01 nodes@2@01)) (Set_in n@110@01 nodes@2@01)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@110@01 $Ref)) (!
  (and
    (=>
      (Set_in n@110@01 nodes@2@01)
      (and
        (Set_in n@110@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01) n@110@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01) n@110@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
          ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
            ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
            ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01)
            ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01) n@110@01)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01)) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01)
                  $Ref.null))
              (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01) $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
              ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
            ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01)))))
    (or (not (Set_in n@110@01 nodes@2@01)) (Set_in n@110@01 nodes@2@01)))
  :pattern ((Set_in n@110@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01) n@110@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@110@01 $Ref)) (!
  (and
    (=>
      (Set_in n@110@01 nodes@2@01)
      (and
        (Set_in n@110@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01) n@110@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01) n@110@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
          ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
            ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
            ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01)
            ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01) n@110@01)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01)) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01)
                  $Ref.null))
              (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01) $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
              ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
            ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01)))))
    (or (not (Set_in n@110@01 nodes@2@01)) (Set_in n@110@01 nodes@2@01)))
  :pattern ((Set_in n@110@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01) n@110@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01)) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@110@01 $Ref)) (!
  (=>
    (and
      (Set_in n@110@01 nodes@2@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@110@01))
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01)))
    (or
      (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01))))
  :pattern ((Set_in n@110@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@110@01) n@110@01))
  :pattern ((Set_in n@110@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01) n@110@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01)) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@110@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01))))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.right.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked)
(declare-const n@111@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 60 | n@111@01 in nodes@2@01 | live]
; [else-branch: 60 | !(n@111@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 60 | n@111@01 in nodes@2@01]
(assert (Set_in n@111@01 nodes@2@01))
; [eval] old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01) n@111@01))
(push) ; 8
(assert (not (and (img@69@01 n@111@01) (Set_in (inv@68@01 n@111@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 61 | Lookup(is_marked, sm@70@01, n@111@01) | live]
; [else-branch: 61 | !(Lookup(is_marked, sm@70@01, n@111@01)) | live]
(push) ; 9
; [then-branch: 61 | Lookup(is_marked, sm@70@01, n@111@01)]
(assert ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
(pop) ; 9
(push) ; 9
; [else-branch: 61 | !(Lookup(is_marked, sm@70@01, n@111@01))]
(assert (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef28|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01) n@111@01))
(push) ; 10
(assert (not (and (img@103@01 n@111@01) (Set_in (inv@102@01 n@111@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01) n@111@01))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
  ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01)))
(push) ; 8
; [then-branch: 62 | !(Lookup(is_marked, sm@70@01, n@111@01)) && Lookup(is_marked, sm@104@01, n@111@01) | live]
; [else-branch: 62 | !(!(Lookup(is_marked, sm@70@01, n@111@01)) && Lookup(is_marked, sm@104@01, n@111@01)) | live]
(push) ; 9
; [then-branch: 62 | !(Lookup(is_marked, sm@70@01, n@111@01)) && Lookup(is_marked, sm@104@01, n@111@01)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
  ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01)))
; [eval] n.right == null || n.right.is_marked
; [eval] n.right == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
    :qid |qp.fvfValDef25|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef26|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01) n@111@01))
(push) ; 10
(assert (not (and (img@99@01 n@111@01) (Set_in (inv@98@01 n@111@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 63 | Lookup(right, sm@100@01, n@111@01) == Null | live]
; [else-branch: 63 | Lookup(right, sm@100@01, n@111@01) != Null | live]
(push) ; 11
; [then-branch: 63 | Lookup(right, sm@100@01, n@111@01) == Null]
(assert (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01) $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 63 | Lookup(right, sm@100@01, n@111@01) != Null]
(assert (not (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
    :qid |qp.fvfValDef25|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef26|))))
(push) ; 12
(assert (not (and (img@99@01 n@111@01) (Set_in (inv@98@01 n@111@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef28|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01)) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01)))
(push) ; 12
(assert (not (and
  (img@103@01 ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01))
  (Set_in (inv@102@01 ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01)) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (not (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01)) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01)))))
(assert (or
  (not (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01) $Ref.null))
  (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01) $Ref.null)))
(pop) ; 9
(push) ; 9
; [else-branch: 62 | !(!(Lookup(is_marked, sm@70@01, n@111@01)) && Lookup(is_marked, sm@104@01, n@111@01))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
    ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
    ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
    ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01) n@111@01)
    (=>
      (not
        (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01) $Ref.null))
      (and
        (not
          (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01)) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01))))
    (or
      (not
        (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01) $Ref.null))
      (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01)))
  (and
    (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
    ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 60 | !(n@111@01 in nodes@2@01)]
(assert (not (Set_in n@111@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (=>
  (Set_in n@111@01 nodes@2@01)
  (and
    (Set_in n@111@01 nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01) n@111@01)
    (=>
      (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01) n@111@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01) n@111@01)
        (=>
          (not
            (=
              ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01)
              $Ref.null))
          (and
            (not
              (=
                ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01)
                $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01)) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01))))
        (or
          (not
            (=
              ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01)
              $Ref.null))
          (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
          ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01)))
      (and
        (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01))))))
; Joined path conditions
(assert (or (not (Set_in n@111@01 nodes@2@01)) (Set_in n@111@01 nodes@2@01)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@111@01 $Ref)) (!
  (and
    (=>
      (Set_in n@111@01 nodes@2@01)
      (and
        (Set_in n@111@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01) n@111@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01) n@111@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
          ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
            ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
            ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01)
            ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01) n@111@01)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01)) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
              ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
            ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01)))))
    (or (not (Set_in n@111@01 nodes@2@01)) (Set_in n@111@01 nodes@2@01)))
  :pattern ((Set_in n@111@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01) n@111@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@111@01 $Ref)) (!
  (and
    (=>
      (Set_in n@111@01 nodes@2@01)
      (and
        (Set_in n@111@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01) n@111@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01) n@111@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
          ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
            ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
            ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01)
            ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01) n@111@01)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01)) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
              ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
            ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01)))))
    (or (not (Set_in n@111@01 nodes@2@01)) (Set_in n@111@01 nodes@2@01)))
  :pattern ((Set_in n@111@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01) n@111@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01)) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@111@01 $Ref)) (!
  (=>
    (and
      (Set_in n@111@01 nodes@2@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@111@01))
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01)))
    (or
      (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01))))
  :pattern ((Set_in n@111@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@111@01) n@111@01))
  :pattern ((Set_in n@111@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01) n@111@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01)) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@111@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] (node in nodes)
; [eval] !((null in nodes))
; [eval] (null in nodes)
(declare-const n$4@112@01 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$4 in nodes)
(assert (Set_in n$4@112@01 nodes@2@01))
(pop) ; 5
(declare-fun inv@113@01 ($Ref) $Ref)
(declare-fun img@114@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$41@112@01 $Ref) (n$42@112@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$41@112@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$41@112@01) n$41@112@01))
      (and
        (Set_in n$42@112@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$42@112@01) n$42@112@01))
      (= n$41@112@01 n$42@112@01))
    (= n$41@112@01 n$42@112@01))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@112@01 $Ref)) (!
  (=>
    (Set_in n$4@112@01 nodes@2@01)
    (and (= (inv@113@01 n$4@112@01) n$4@112@01) (img@114@01 n$4@112@01)))
  :pattern ((Set_in n$4@112@01 nodes@2@01))
  :pattern ((inv@113@01 n$4@112@01))
  :pattern ((img@114@01 n$4@112@01))
  :qid |left-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@114@01 r) (Set_in (inv@113@01 r) nodes@2@01))
    (= (inv@113@01 r) r))
  :pattern ((inv@113@01 r))
  :qid |left-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@113@01 r) nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) r) r))
  :pattern ((inv@113@01 r))
  :qid |quant-u-73|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@115@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@113@01 r) nodes@2@01) (img@114@01 r) (= r (inv@113@01 r)))
    ($Perm.min
      (ite
        (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      (pTaken@115@01 r))
    $Perm.No)
  
  :qid |quant-u-75|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@113@01 r) nodes@2@01) (img@114@01 r) (= r (inv@113@01 r)))
    (= (- $Perm.Write (pTaken@115@01 r)) $Perm.No))
  
  :qid |quant-u-76|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$5@116@01 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$5 in nodes)
(assert (Set_in n$5@116@01 nodes@2@01))
(pop) ; 5
(declare-fun inv@117@01 ($Ref) $Ref)
(declare-fun img@118@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$51@116@01 $Ref) (n$52@116@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$51@116@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$51@116@01) n$51@116@01))
      (and
        (Set_in n$52@116@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$52@116@01) n$52@116@01))
      (= n$51@116@01 n$52@116@01))
    (= n$51@116@01 n$52@116@01))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$5@116@01 $Ref)) (!
  (=>
    (Set_in n$5@116@01 nodes@2@01)
    (and (= (inv@117@01 n$5@116@01) n$5@116@01) (img@118@01 n$5@116@01)))
  :pattern ((Set_in n$5@116@01 nodes@2@01))
  :pattern ((inv@117@01 n$5@116@01))
  :pattern ((img@118@01 n$5@116@01))
  :qid |right-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@118@01 r) (Set_in (inv@117@01 r) nodes@2@01))
    (= (inv@117@01 r) r))
  :pattern ((inv@117@01 r))
  :qid |right-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@117@01 r) nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) r) r))
  :pattern ((inv@117@01 r))
  :qid |quant-u-78|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@119@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@117@01 r) nodes@2@01) (img@118@01 r) (= r (inv@117@01 r)))
    ($Perm.min
      (ite
        (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      (pTaken@119@01 r))
    $Perm.No)
  
  :qid |quant-u-80|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@117@01 r) nodes@2@01) (img@118@01 r) (= r (inv@117@01 r)))
    (= (- $Perm.Write (pTaken@119@01 r)) $Perm.No))
  
  :qid |quant-u-81|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$6@120@01 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$6 in nodes)
(assert (Set_in n$6@120@01 nodes@2@01))
(pop) ; 5
(declare-fun inv@121@01 ($Ref) $Ref)
(declare-fun img@122@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$61@120@01 $Ref) (n$62@120@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$61@120@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n$61@120@01) n$61@120@01))
      (and
        (Set_in n$62@120@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n$62@120@01) n$62@120@01))
      (= n$61@120@01 n$62@120@01))
    (= n$61@120@01 n$62@120@01))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$6@120@01 $Ref)) (!
  (=>
    (Set_in n$6@120@01 nodes@2@01)
    (and (= (inv@121@01 n$6@120@01) n$6@120@01) (img@122@01 n$6@120@01)))
  :pattern ((Set_in n$6@120@01 nodes@2@01))
  :pattern ((inv@121@01 n$6@120@01))
  :pattern ((img@122@01 n$6@120@01))
  :qid |is_marked-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@122@01 r) (Set_in (inv@121@01 r) nodes@2@01))
    (= (inv@121@01 r) r))
  :pattern ((inv@121@01 r))
  :qid |is_marked-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@121@01 r) nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r) r))
  :pattern ((inv@121@01 r))
  :qid |quant-u-83|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@123@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@121@01 r) nodes@2@01) (img@122@01 r) (= r (inv@121@01 r)))
    ($Perm.min
      (ite
        (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      (pTaken@123@01 r))
    $Perm.No)
  
  :qid |quant-u-85|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@121@01 r) nodes@2@01) (img@122@01 r) (= r (inv@121@01 r)))
    (= (- $Perm.Write (pTaken@123@01 r)) $Perm.No))
  
  :qid |quant-u-86|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall n$7: Ref :: { (n$7.left in nodes) } { (n$7 in nodes), n$7.left } (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes))
(declare-const n$7@124@01 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes)
; [eval] (n$7 in nodes) && n$7.left != null
; [eval] (n$7 in nodes)
(push) ; 6
; [then-branch: 64 | !(n$7@124@01 in nodes@2@01) | live]
; [else-branch: 64 | n$7@124@01 in nodes@2@01 | live]
(push) ; 7
; [then-branch: 64 | !(n$7@124@01 in nodes@2@01)]
(assert (not (Set_in n$7@124@01 nodes@2@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 64 | n$7@124@01 in nodes@2@01]
(assert (Set_in n$7@124@01 nodes@2@01))
; [eval] n$7.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef24|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) n$7@124@01))
(push) ; 8
(assert (not (and (img@95@01 n$7@124@01) (Set_in (inv@94@01 n$7@124@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (=>
  (Set_in n$7@124@01 nodes@2@01)
  (and
    (Set_in n$7@124@01 nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) n$7@124@01))))
(assert (or (Set_in n$7@124@01 nodes@2@01) (not (Set_in n$7@124@01 nodes@2@01))))
(push) ; 6
; [then-branch: 65 | n$7@124@01 in nodes@2@01 && Lookup(left, sm@96@01, n$7@124@01) != Null | live]
; [else-branch: 65 | !(n$7@124@01 in nodes@2@01 && Lookup(left, sm@96@01, n$7@124@01) != Null) | live]
(push) ; 7
; [then-branch: 65 | n$7@124@01 in nodes@2@01 && Lookup(left, sm@96@01, n$7@124@01) != Null]
(assert (and
  (Set_in n$7@124@01 nodes@2@01)
  (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) $Ref.null))))
; [eval] (n$7.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef24|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) n$7@124@01))
(push) ; 8
(assert (not (and (img@95@01 n$7@124@01) (Set_in (inv@94@01 n$7@124@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 65 | !(n$7@124@01 in nodes@2@01 && Lookup(left, sm@96@01, n$7@124@01) != Null)]
(assert (not
  (and
    (Set_in n$7@124@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (=>
  (and
    (Set_in n$7@124@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) $Ref.null)))
  (and
    (Set_in n$7@124@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) n$7@124@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$7@124@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) $Ref.null))))
  (and
    (Set_in n$7@124@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$7@124@01 $Ref)) (!
  (and
    (=>
      (Set_in n$7@124@01 nodes@2@01)
      (and
        (Set_in n$7@124@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) n$7@124@01)))
    (or (Set_in n$7@124@01 nodes@2@01) (not (Set_in n$7@124@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$7@124@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) $Ref.null)))
      (and
        (Set_in n$7@124@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) n$7@124@01)))
    (or
      (not
        (and
          (Set_in n$7@124@01 nodes@2@01)
          (not
            (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) $Ref.null))))
      (and
        (Set_in n$7@124@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) nodes@2@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@124@01 $Ref)) (!
  (and
    (=>
      (Set_in n$7@124@01 nodes@2@01)
      (and
        (Set_in n$7@124@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) n$7@124@01)))
    (or (Set_in n$7@124@01 nodes@2@01) (not (Set_in n$7@124@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$7@124@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) $Ref.null)))
      (and
        (Set_in n$7@124@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) n$7@124@01)))
    (or
      (not
        (and
          (Set_in n$7@124@01 nodes@2@01)
          (not
            (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) $Ref.null))))
      (and
        (Set_in n$7@124@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) $Ref.null)))))
  :pattern ((Set_in n$7@124@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) n$7@124@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(push) ; 5
(assert (not (forall ((n$7@124@01 $Ref)) (!
  (=>
    (and
      (Set_in n$7@124@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) nodes@2@01))
  :pattern ((Set_in n$7@124@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) n$7@124@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$7@124@01 $Ref)) (!
  (=>
    (and
      (Set_in n$7@124@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) nodes@2@01))
  :pattern ((Set_in n$7@124@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n$7@124@01) n$7@124@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
; [eval] (forall n$8: Ref :: { (n$8.right in nodes) } { (n$8 in nodes), n$8.right } (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes))
(declare-const n$8@125@01 $Ref)
(push) ; 5
; [eval] (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes)
; [eval] (n$8 in nodes) && n$8.right != null
; [eval] (n$8 in nodes)
(push) ; 6
; [then-branch: 66 | !(n$8@125@01 in nodes@2@01) | live]
; [else-branch: 66 | n$8@125@01 in nodes@2@01 | live]
(push) ; 7
; [then-branch: 66 | !(n$8@125@01 in nodes@2@01)]
(assert (not (Set_in n$8@125@01 nodes@2@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 66 | n$8@125@01 in nodes@2@01]
(assert (Set_in n$8@125@01 nodes@2@01))
; [eval] n$8.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
    :qid |qp.fvfValDef25|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef26|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01) n$8@125@01))
(push) ; 8
(assert (not (and (img@99@01 n$8@125@01) (Set_in (inv@98@01 n$8@125@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (=>
  (Set_in n$8@125@01 nodes@2@01)
  (and
    (Set_in n$8@125@01 nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01) n$8@125@01))))
(assert (or (Set_in n$8@125@01 nodes@2@01) (not (Set_in n$8@125@01 nodes@2@01))))
(push) ; 6
; [then-branch: 67 | n$8@125@01 in nodes@2@01 && Lookup(right, sm@100@01, n$8@125@01) != Null | live]
; [else-branch: 67 | !(n$8@125@01 in nodes@2@01 && Lookup(right, sm@100@01, n$8@125@01) != Null) | live]
(push) ; 7
; [then-branch: 67 | n$8@125@01 in nodes@2@01 && Lookup(right, sm@100@01, n$8@125@01) != Null]
(assert (and
  (Set_in n$8@125@01 nodes@2@01)
  (not (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01) $Ref.null))))
; [eval] (n$8.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
    :qid |qp.fvfValDef25|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef26|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01) n$8@125@01))
(push) ; 8
(assert (not (and (img@99@01 n$8@125@01) (Set_in (inv@98@01 n$8@125@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 67 | !(n$8@125@01 in nodes@2@01 && Lookup(right, sm@100@01, n$8@125@01) != Null)]
(assert (not
  (and
    (Set_in n$8@125@01 nodes@2@01)
    (not
      (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (=>
  (and
    (Set_in n$8@125@01 nodes@2@01)
    (not
      (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01) $Ref.null)))
  (and
    (Set_in n$8@125@01 nodes@2@01)
    (not
      (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01) n$8@125@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$8@125@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01) $Ref.null))))
  (and
    (Set_in n$8@125@01 nodes@2@01)
    (not
      (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$8@125@01 $Ref)) (!
  (and
    (=>
      (Set_in n$8@125@01 nodes@2@01)
      (and
        (Set_in n$8@125@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01) n$8@125@01)))
    (or (Set_in n$8@125@01 nodes@2@01) (not (Set_in n$8@125@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$8@125@01 nodes@2@01)
        (not
          (=
            ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01)
            $Ref.null)))
      (and
        (Set_in n$8@125@01 nodes@2@01)
        (not
          (=
            ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01)
            $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01) n$8@125@01)))
    (or
      (not
        (and
          (Set_in n$8@125@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01)
              $Ref.null))))
      (and
        (Set_in n$8@125@01 nodes@2@01)
        (not
          (=
            ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01)
            $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01) nodes@2@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@125@01 $Ref)) (!
  (and
    (=>
      (Set_in n$8@125@01 nodes@2@01)
      (and
        (Set_in n$8@125@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01) n$8@125@01)))
    (or (Set_in n$8@125@01 nodes@2@01) (not (Set_in n$8@125@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$8@125@01 nodes@2@01)
        (not
          (=
            ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01)
            $Ref.null)))
      (and
        (Set_in n$8@125@01 nodes@2@01)
        (not
          (=
            ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01)
            $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01) n$8@125@01)))
    (or
      (not
        (and
          (Set_in n$8@125@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01)
              $Ref.null))))
      (and
        (Set_in n$8@125@01 nodes@2@01)
        (not
          (=
            ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01)
            $Ref.null)))))
  :pattern ((Set_in n$8@125@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01) n$8@125@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(push) ; 5
(assert (not (forall ((n$8@125@01 $Ref)) (!
  (=>
    (and
      (Set_in n$8@125@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01) nodes@2@01))
  :pattern ((Set_in n$8@125@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01) n$8@125@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$8@125@01 $Ref)) (!
  (=>
    (and
      (Set_in n$8@125@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01) nodes@2@01))
  :pattern ((Set_in n$8@125@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n$8@125@01) n$8@125@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } (n in nodes) ==> old(n.is_marked) ==> n.is_marked)
(declare-const n@126@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(n.is_marked) ==> n.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 68 | n@126@01 in nodes@2@01 | live]
; [else-branch: 68 | !(n@126@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 68 | n@126@01 in nodes@2@01]
(assert (Set_in n@126@01 nodes@2@01))
; [eval] old(n.is_marked) ==> n.is_marked
; [eval] old(n.is_marked)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@126@01) n@126@01))
(push) ; 8
(assert (not (and (img@15@01 n@126@01) (Set_in (inv@14@01 n@126@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 69 | Lookup(is_marked, sm@16@01, n@126@01) | live]
; [else-branch: 69 | !(Lookup(is_marked, sm@16@01, n@126@01)) | live]
(push) ; 9
; [then-branch: 69 | Lookup(is_marked, sm@16@01, n@126@01)]
(assert ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@126@01))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef28|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@126@01) n@126@01))
(push) ; 10
(assert (not (and (img@103@01 n@126@01) (Set_in (inv@102@01 n@126@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(push) ; 9
; [else-branch: 69 | !(Lookup(is_marked, sm@16@01, n@126@01))]
(assert (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@126@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@126@01)
  (and
    ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@126@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@126@01) n@126@01))))
; Joined path conditions
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@126@01))
  ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@126@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 68 | !(n@126@01 in nodes@2@01)]
(assert (not (Set_in n@126@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (Set_in n@126@01 nodes@2@01)
  (and
    (Set_in n@126@01 nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@126@01) n@126@01)
    (=>
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@126@01)
      (and
        ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@126@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@126@01) n@126@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@126@01))
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@126@01)))))
; Joined path conditions
(assert (or (not (Set_in n@126@01 nodes@2@01)) (Set_in n@126@01 nodes@2@01)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@126@01 $Ref)) (!
  (and
    (=>
      (Set_in n@126@01 nodes@2@01)
      (and
        (Set_in n@126@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@126@01) n@126@01)
        (=>
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@126@01)
          (and
            ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@126@01)
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@126@01) n@126@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@126@01))
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@126@01))))
    (or (not (Set_in n@126@01 nodes@2@01)) (Set_in n@126@01 nodes@2@01)))
  :pattern ((Set_in n@126@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@126@01) n@126@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102-aux|)))
(push) ; 5
(assert (not (forall ((n@126@01 $Ref)) (!
  (=>
    (and
      (Set_in n@126@01 nodes@2@01)
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@126@01))
    ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@126@01))
  :pattern ((Set_in n@126@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@126@01) n@126@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n@126@01 $Ref)) (!
  (=>
    (and
      (Set_in n@126@01 nodes@2@01)
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@126@01))
    ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@126@01))
  :pattern ((Set_in n@126@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@126@01) n@126@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef28|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) node@3@01) node@3@01))
(push) ; 5
(assert (not (and (img@103@01 node@3@01) (Set_in (inv@102@01 node@3@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) node@3@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) node@3@01))
; [eval] (forall n: Ref :: { (n in nodes), n.left } (n in nodes) ==> n.left == old(n.left))
(declare-const n@127@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> n.left == old(n.left)
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 70 | n@127@01 in nodes@2@01 | live]
; [else-branch: 70 | !(n@127@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 70 | n@127@01 in nodes@2@01]
(assert (Set_in n@127@01 nodes@2@01))
; [eval] n.left == old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef24|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@127@01) n@127@01))
(push) ; 8
(assert (not (and (img@95@01 n@127@01) (Set_in (inv@94@01 n@127@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [eval] old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@127@01) n@127@01))
(push) ; 8
(assert (not (and (img@7@01 n@127@01) (Set_in (inv@6@01 n@127@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 70 | !(n@127@01 in nodes@2@01)]
(assert (not (Set_in n@127@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (Set_in n@127@01 nodes@2@01)
  (and
    (Set_in n@127@01 nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@127@01) n@127@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@127@01) n@127@01))))
; Joined path conditions
(assert (or (not (Set_in n@127@01 nodes@2@01)) (Set_in n@127@01 nodes@2@01)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@127@01 $Ref)) (!
  (and
    (=>
      (Set_in n@127@01 nodes@2@01)
      (and
        (Set_in n@127@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@127@01) n@127@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@127@01) n@127@01)))
    (or (not (Set_in n@127@01 nodes@2@01)) (Set_in n@127@01 nodes@2@01)))
  :pattern ((Set_in n@127@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@127@01) n@127@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86-aux|)))
(push) ; 5
(assert (not (forall ((n@127@01 $Ref)) (!
  (=>
    (Set_in n@127@01 nodes@2@01)
    (=
      ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@127@01)
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@127@01)))
  :pattern ((Set_in n@127@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@127@01) n@127@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n@127@01 $Ref)) (!
  (=>
    (Set_in n@127@01 nodes@2@01)
    (=
      ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@127@01)
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@127@01)))
  :pattern ((Set_in n@127@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@127@01) n@127@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86|)))
; [eval] (forall n: Ref :: { (n in nodes), n.right } (n in nodes) ==> n.right == old(n.right))
(declare-const n@128@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> n.right == old(n.right)
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 71 | n@128@01 in nodes@2@01 | live]
; [else-branch: 71 | !(n@128@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 71 | n@128@01 in nodes@2@01]
(assert (Set_in n@128@01 nodes@2@01))
; [eval] n.right == old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
    :qid |qp.fvfValDef25|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef26|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@128@01) n@128@01))
(push) ; 8
(assert (not (and (img@99@01 n@128@01) (Set_in (inv@98@01 n@128@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [eval] old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@128@01) n@128@01))
(push) ; 8
(assert (not (and (img@11@01 n@128@01) (Set_in (inv@10@01 n@128@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 71 | !(n@128@01 in nodes@2@01)]
(assert (not (Set_in n@128@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (Set_in n@128@01 nodes@2@01)
  (and
    (Set_in n@128@01 nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@128@01) n@128@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@128@01) n@128@01))))
; Joined path conditions
(assert (or (not (Set_in n@128@01 nodes@2@01)) (Set_in n@128@01 nodes@2@01)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@128@01 $Ref)) (!
  (and
    (=>
      (Set_in n@128@01 nodes@2@01)
      (and
        (Set_in n@128@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@128@01) n@128@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@128@01) n@128@01)))
    (or (not (Set_in n@128@01 nodes@2@01)) (Set_in n@128@01 nodes@2@01)))
  :pattern ((Set_in n@128@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@128@01) n@128@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89-aux|)))
(push) ; 5
(assert (not (forall ((n@128@01 $Ref)) (!
  (=>
    (Set_in n@128@01 nodes@2@01)
    (=
      ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@128@01)
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@128@01)))
  :pattern ((Set_in n@128@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@128@01) n@128@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n@128@01 $Ref)) (!
  (=>
    (Set_in n@128@01 nodes@2@01)
    (=
      ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@128@01)
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@128@01)))
  :pattern ((Set_in n@128@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@128@01) n@128@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89|)))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.left.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked)
(declare-const n@129@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 72 | n@129@01 in nodes@2@01 | live]
; [else-branch: 72 | !(n@129@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 72 | n@129@01 in nodes@2@01]
(assert (Set_in n@129@01 nodes@2@01))
; [eval] old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01) n@129@01))
(push) ; 8
(assert (not (and (img@15@01 n@129@01) (Set_in (inv@14@01 n@129@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 73 | Lookup(is_marked, sm@16@01, n@129@01) | live]
; [else-branch: 73 | !(Lookup(is_marked, sm@16@01, n@129@01)) | live]
(push) ; 9
; [then-branch: 73 | Lookup(is_marked, sm@16@01, n@129@01)]
(assert ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
(pop) ; 9
(push) ; 9
; [else-branch: 73 | !(Lookup(is_marked, sm@16@01, n@129@01))]
(assert (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef28|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01) n@129@01))
(push) ; 10
(assert (not (and (img@103@01 n@129@01) (Set_in (inv@102@01 n@129@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01) n@129@01))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
  ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01)))
(push) ; 8
; [then-branch: 74 | !(Lookup(is_marked, sm@16@01, n@129@01)) && Lookup(is_marked, sm@104@01, n@129@01) | live]
; [else-branch: 74 | !(!(Lookup(is_marked, sm@16@01, n@129@01)) && Lookup(is_marked, sm@104@01, n@129@01)) | live]
(push) ; 9
; [then-branch: 74 | !(Lookup(is_marked, sm@16@01, n@129@01)) && Lookup(is_marked, sm@104@01, n@129@01)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
  ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01)))
; [eval] n.left == null || n.left.is_marked
; [eval] n.left == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef24|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) n@129@01))
(push) ; 10
(assert (not (and (img@95@01 n@129@01) (Set_in (inv@94@01 n@129@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 75 | Lookup(left, sm@96@01, n@129@01) == Null | live]
; [else-branch: 75 | Lookup(left, sm@96@01, n@129@01) != Null | live]
(push) ; 11
; [then-branch: 75 | Lookup(left, sm@96@01, n@129@01) == Null]
(assert (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 75 | Lookup(left, sm@96@01, n@129@01) != Null]
(assert (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
    :qid |qp.fvfValDef23|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef24|))))
(push) ; 12
(assert (not (and (img@95@01 n@129@01) (Set_in (inv@94@01 n@129@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef28|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01)) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01)))
(push) ; 12
(assert (not (and
  (img@103@01 ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01))
  (Set_in (inv@102@01 ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01)) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01)) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01)))))
(assert (or
  (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) $Ref.null))
  (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) $Ref.null)))
(pop) ; 9
(push) ; 9
; [else-branch: 74 | !(!(Lookup(is_marked, sm@16@01, n@129@01)) && Lookup(is_marked, sm@104@01, n@129@01))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
    ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
    ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
    ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) n@129@01)
    (=>
      (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) $Ref.null))
      (and
        (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01)) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01))))
    (or
      (not (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) $Ref.null))
      (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01)))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
    ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 72 | !(n@129@01 in nodes@2@01)]
(assert (not (Set_in n@129@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
(assert (=>
  (Set_in n@129@01 nodes@2@01)
  (and
    (Set_in n@129@01 nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01) n@129@01)
    (=>
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01) n@129@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) n@129@01)
        (=>
          (not
            (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) $Ref.null))
          (and
            (not
              (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01)) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01))))
        (or
          (not
            (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) $Ref.null))
          (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
          ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01)))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01))))))
; Joined path conditions
(assert (or (not (Set_in n@129@01 nodes@2@01)) (Set_in n@129@01 nodes@2@01)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@95@01 r) (Set_in (inv@94@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@96@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r))
  :qid |qp.fvfValDef23|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@92@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@96@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef24|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@129@01 $Ref)) (!
  (and
    (=>
      (Set_in n@129@01 nodes@2@01)
      (and
        (Set_in n@129@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01) n@129@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01) n@129@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
            ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
            ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01)
            ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) n@129@01)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01)) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01)
                  $Ref.null))
              (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
              ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
            ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01)))))
    (or (not (Set_in n@129@01 nodes@2@01)) (Set_in n@129@01 nodes@2@01)))
  :pattern ((Set_in n@129@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01) n@129@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@129@01 $Ref)) (!
  (and
    (=>
      (Set_in n@129@01 nodes@2@01)
      (and
        (Set_in n@129@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01) n@129@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01) n@129@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
            ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
            ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01)
            ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) n@129@01)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01)) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01)
                  $Ref.null))
              (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
              ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
            ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01)))))
    (or (not (Set_in n@129@01 nodes@2@01)) (Set_in n@129@01 nodes@2@01)))
  :pattern ((Set_in n@129@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) n@129@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01)) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(push) ; 5
(assert (not (forall ((n@129@01 $Ref)) (!
  (=>
    (and
      (Set_in n@129@01 nodes@2@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01)))
    (or
      (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01))))
  :pattern ((Set_in n@129@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01) n@129@01))
  :pattern ((Set_in n@129@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) n@129@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01)) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n@129@01 $Ref)) (!
  (=>
    (and
      (Set_in n@129@01 nodes@2@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@129@01))
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01)))
    (or
      (= ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01))))
  :pattern ((Set_in n@129@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@129@01) n@129@01))
  :pattern ((Set_in n@129@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01) n@129@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01)) ($FVF.lookup_left (as sm@96@01  $FVF<left>) n@129@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|)))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.right.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked)
(declare-const n@130@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 76 | n@130@01 in nodes@2@01 | live]
; [else-branch: 76 | !(n@130@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 76 | n@130@01 in nodes@2@01]
(assert (Set_in n@130@01 nodes@2@01))
; [eval] old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01) n@130@01))
(push) ; 8
(assert (not (and (img@15@01 n@130@01) (Set_in (inv@14@01 n@130@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 77 | Lookup(is_marked, sm@16@01, n@130@01) | live]
; [else-branch: 77 | !(Lookup(is_marked, sm@16@01, n@130@01)) | live]
(push) ; 9
; [then-branch: 77 | Lookup(is_marked, sm@16@01, n@130@01)]
(assert ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
(pop) ; 9
(push) ; 9
; [else-branch: 77 | !(Lookup(is_marked, sm@16@01, n@130@01))]
(assert (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef28|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01) n@130@01))
(push) ; 10
(assert (not (and (img@103@01 n@130@01) (Set_in (inv@102@01 n@130@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01) n@130@01))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
  ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01)))
(push) ; 8
; [then-branch: 78 | !(Lookup(is_marked, sm@16@01, n@130@01)) && Lookup(is_marked, sm@104@01, n@130@01) | live]
; [else-branch: 78 | !(!(Lookup(is_marked, sm@16@01, n@130@01)) && Lookup(is_marked, sm@104@01, n@130@01)) | live]
(push) ; 9
; [then-branch: 78 | !(Lookup(is_marked, sm@16@01, n@130@01)) && Lookup(is_marked, sm@104@01, n@130@01)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
  ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01)))
; [eval] n.right == null || n.right.is_marked
; [eval] n.right == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
    :qid |qp.fvfValDef25|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef26|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01) n@130@01))
(push) ; 10
(assert (not (and (img@99@01 n@130@01) (Set_in (inv@98@01 n@130@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 79 | Lookup(right, sm@100@01, n@130@01) == Null | live]
; [else-branch: 79 | Lookup(right, sm@100@01, n@130@01) != Null | live]
(push) ; 11
; [then-branch: 79 | Lookup(right, sm@100@01, n@130@01) == Null]
(assert (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01) $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 79 | Lookup(right, sm@100@01, n@130@01) != Null]
(assert (not (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
    :qid |qp.fvfValDef25|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef26|))))
(push) ; 12
(assert (not (and (img@99@01 n@130@01) (Set_in (inv@98@01 n@130@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
    :qid |qp.fvfValDef27|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef28|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)))
(push) ; 12
(assert (not (and
  (img@103@01 ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01))
  (Set_in (inv@102@01 ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (not (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)))))
(assert (or
  (not (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01) $Ref.null))
  (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01) $Ref.null)))
(pop) ; 9
(push) ; 9
; [else-branch: 78 | !(!(Lookup(is_marked, sm@16@01, n@130@01)) && Lookup(is_marked, sm@104@01, n@130@01))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
    ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
    ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
    ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01) n@130@01)
    (=>
      (not
        (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01) $Ref.null))
      (and
        (not
          (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01))))
    (or
      (not
        (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01) $Ref.null))
      (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01)))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
    ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 76 | !(n@130@01 in nodes@2@01)]
(assert (not (Set_in n@130@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (=>
  (Set_in n@130@01 nodes@2@01)
  (and
    (Set_in n@130@01 nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01) n@130@01)
    (=>
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01) n@130@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01) n@130@01)
        (=>
          (not
            (=
              ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)
              $Ref.null))
          (and
            (not
              (=
                ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)
                $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01))))
        (or
          (not
            (=
              ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)
              $Ref.null))
          (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
          ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01)))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01))))))
; Joined path conditions
(assert (or (not (Set_in n@130@01 nodes@2@01)) (Set_in n@130@01 nodes@2@01)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@103@01 r) (Set_in (inv@102@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@99@01 r) (Set_in (inv@98@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@100@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@100@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef26|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@130@01 $Ref)) (!
  (and
    (=>
      (Set_in n@130@01 nodes@2@01)
      (and
        (Set_in n@130@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01) n@130@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01) n@130@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
            ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
            ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01)
            ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01) n@130@01)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
              ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
            ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01)))))
    (or (not (Set_in n@130@01 nodes@2@01)) (Set_in n@130@01 nodes@2@01)))
  :pattern ((Set_in n@130@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01) n@130@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@130@01 $Ref)) (!
  (and
    (=>
      (Set_in n@130@01 nodes@2@01)
      (and
        (Set_in n@130@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01) n@130@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01) n@130@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
            ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
            ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01)
            ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01) n@130@01)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
              ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
            ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01)))))
    (or (not (Set_in n@130@01 nodes@2@01)) (Set_in n@130@01 nodes@2@01)))
  :pattern ((Set_in n@130@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01) n@130@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(push) ; 5
(assert (not (forall ((n@130@01 $Ref)) (!
  (=>
    (and
      (Set_in n@130@01 nodes@2@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01)))
    (or
      (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01))))
  :pattern ((Set_in n@130@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01) n@130@01))
  :pattern ((Set_in n@130@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01) n@130@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n@130@01 $Ref)) (!
  (=>
    (and
      (Set_in n@130@01 nodes@2@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@130@01))
        ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01)))
    (or
      (= ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01))))
  :pattern ((Set_in n@130@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) n@130@01) n@130@01))
  :pattern ((Set_in n@130@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01) n@130@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@104@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)) ($FVF.lookup_right (as sm@100@01  $FVF<right>) n@130@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|)))
(pop) ; 4
(push) ; 4
; [else-branch: 43 | !(Lookup(right, sm@66@01, node@3@01) != Null && !(Lookup(is_marked, sm@70@01, Lookup(right, sm@66@01, node@3@01))))]
(assert (not
  (and
    (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01) $Ref.null))
    (not
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01))))))
(pop) ; 4
; [eval] !(node.right != null && !node.right.is_marked)
; [eval] node.right != null && !node.right.is_marked
; [eval] node.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(push) ; 4
(assert (not (and (img@65@01 node@3@01) (Set_in (inv@64@01 node@3@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
; [then-branch: 80 | Lookup(right, sm@66@01, node@3@01) == Null | live]
; [else-branch: 80 | Lookup(right, sm@66@01, node@3@01) != Null | live]
(push) ; 5
; [then-branch: 80 | Lookup(right, sm@66@01, node@3@01) == Null]
(assert (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01) $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 80 | Lookup(right, sm@66@01, node@3@01) != Null]
(assert (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01) $Ref.null)))
; [eval] !node.right.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(push) ; 6
(assert (not (and (img@65@01 node@3@01) (Set_in (inv@64@01 node@3@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01)) ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01)))
(push) ; 6
(assert (not (and
  (img@69@01 ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01))
  (Set_in (inv@68@01 ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01)) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01) $Ref.null))
  (not
    ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01))))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01) $Ref.null))
    (not
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01)))))))
(check-sat)
; unknown
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
; [then-branch: 81 | !(Lookup(right, sm@66@01, node@3@01) != Null && !(Lookup(is_marked, sm@70@01, Lookup(right, sm@66@01, node@3@01)))) | live]
; [else-branch: 81 | Lookup(right, sm@66@01, node@3@01) != Null && !(Lookup(is_marked, sm@70@01, Lookup(right, sm@66@01, node@3@01))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 81 | !(Lookup(right, sm@66@01, node@3@01) != Null && !(Lookup(is_marked, sm@70@01, Lookup(right, sm@66@01, node@3@01))))]
(assert (not
  (and
    (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01) $Ref.null))
    (not
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01))))))
; [eval] (node in nodes)
; [eval] !((null in nodes))
; [eval] (null in nodes)
(declare-const n$4@131@01 $Ref)
(push) ; 5
; [eval] (n$4 in nodes)
(assert (Set_in n$4@131@01 nodes@2@01))
(pop) ; 5
(declare-fun inv@132@01 ($Ref) $Ref)
(declare-fun img@133@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$41@131@01 $Ref) (n$42@131@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$41@131@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$41@131@01) n$41@131@01))
      (and
        (Set_in n$42@131@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$42@131@01) n$42@131@01))
      (= n$41@131@01 n$42@131@01))
    (= n$41@131@01 n$42@131@01))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@131@01 $Ref)) (!
  (=>
    (Set_in n$4@131@01 nodes@2@01)
    (and (= (inv@132@01 n$4@131@01) n$4@131@01) (img@133@01 n$4@131@01)))
  :pattern ((Set_in n$4@131@01 nodes@2@01))
  :pattern ((inv@132@01 n$4@131@01))
  :pattern ((img@133@01 n$4@131@01))
  :qid |left-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@133@01 r) (Set_in (inv@132@01 r) nodes@2@01))
    (= (inv@132@01 r) r))
  :pattern ((inv@132@01 r))
  :qid |left-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@132@01 r) nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) r) r))
  :pattern ((inv@132@01 r))
  :qid |quant-u-88|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@134@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@132@01 r) nodes@2@01) (img@133@01 r) (= r (inv@132@01 r)))
    ($Perm.min
      (ite
        (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      (pTaken@134@01 r))
    $Perm.No)
  
  :qid |quant-u-90|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@132@01 r) nodes@2@01) (img@133@01 r) (= r (inv@132@01 r)))
    (= (- $Perm.Write (pTaken@134@01 r)) $Perm.No))
  
  :qid |quant-u-91|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$5@135@01 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$5 in nodes)
(assert (Set_in n$5@135@01 nodes@2@01))
(pop) ; 5
(declare-fun inv@136@01 ($Ref) $Ref)
(declare-fun img@137@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$51@135@01 $Ref) (n$52@135@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$51@135@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$51@135@01) n$51@135@01))
      (and
        (Set_in n$52@135@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$52@135@01) n$52@135@01))
      (= n$51@135@01 n$52@135@01))
    (= n$51@135@01 n$52@135@01))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$5@135@01 $Ref)) (!
  (=>
    (Set_in n$5@135@01 nodes@2@01)
    (and (= (inv@136@01 n$5@135@01) n$5@135@01) (img@137@01 n$5@135@01)))
  :pattern ((Set_in n$5@135@01 nodes@2@01))
  :pattern ((inv@136@01 n$5@135@01))
  :pattern ((img@137@01 n$5@135@01))
  :qid |right-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@137@01 r) (Set_in (inv@136@01 r) nodes@2@01))
    (= (inv@136@01 r) r))
  :pattern ((inv@136@01 r))
  :qid |right-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@136@01 r) nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) r) r))
  :pattern ((inv@136@01 r))
  :qid |quant-u-93|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@138@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@136@01 r) nodes@2@01) (img@137@01 r) (= r (inv@136@01 r)))
    ($Perm.min
      (ite
        (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      (pTaken@138@01 r))
    $Perm.No)
  
  :qid |quant-u-95|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@136@01 r) nodes@2@01) (img@137@01 r) (= r (inv@136@01 r)))
    (= (- $Perm.Write (pTaken@138@01 r)) $Perm.No))
  
  :qid |quant-u-96|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$6@139@01 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$6 in nodes)
(assert (Set_in n$6@139@01 nodes@2@01))
(pop) ; 5
(declare-fun inv@140@01 ($Ref) $Ref)
(declare-fun img@141@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$61@139@01 $Ref) (n$62@139@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$61@139@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n$61@139@01) n$61@139@01))
      (and
        (Set_in n$62@139@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n$62@139@01) n$62@139@01))
      (= n$61@139@01 n$62@139@01))
    (= n$61@139@01 n$62@139@01))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$6@139@01 $Ref)) (!
  (=>
    (Set_in n$6@139@01 nodes@2@01)
    (and (= (inv@140@01 n$6@139@01) n$6@139@01) (img@141@01 n$6@139@01)))
  :pattern ((Set_in n$6@139@01 nodes@2@01))
  :pattern ((inv@140@01 n$6@139@01))
  :pattern ((img@141@01 n$6@139@01))
  :qid |is_marked-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@141@01 r) (Set_in (inv@140@01 r) nodes@2@01))
    (= (inv@140@01 r) r))
  :pattern ((inv@140@01 r))
  :qid |is_marked-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@140@01 r) nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r) r))
  :pattern ((inv@140@01 r))
  :qid |quant-u-98|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@142@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@140@01 r) nodes@2@01) (img@141@01 r) (= r (inv@140@01 r)))
    ($Perm.min
      (ite
        (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      (pTaken@142@01 r))
    $Perm.No)
  
  :qid |quant-u-100|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@140@01 r) nodes@2@01) (img@141@01 r) (= r (inv@140@01 r)))
    (= (- $Perm.Write (pTaken@142@01 r)) $Perm.No))
  
  :qid |quant-u-101|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall n$7: Ref :: { (n$7.left in nodes) } { (n$7 in nodes), n$7.left } (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes))
(declare-const n$7@143@01 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes)
; [eval] (n$7 in nodes) && n$7.left != null
; [eval] (n$7 in nodes)
(push) ; 6
; [then-branch: 82 | !(n$7@143@01 in nodes@2@01) | live]
; [else-branch: 82 | n$7@143@01 in nodes@2@01 | live]
(push) ; 7
; [then-branch: 82 | !(n$7@143@01 in nodes@2@01)]
(assert (not (Set_in n$7@143@01 nodes@2@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 82 | n$7@143@01 in nodes@2@01]
(assert (Set_in n$7@143@01 nodes@2@01))
; [eval] n$7.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) n$7@143@01))
(push) ; 8
(assert (not (and (img@61@01 n$7@143@01) (Set_in (inv@60@01 n$7@143@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (=>
  (Set_in n$7@143@01 nodes@2@01)
  (and
    (Set_in n$7@143@01 nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) n$7@143@01))))
(assert (or (Set_in n$7@143@01 nodes@2@01) (not (Set_in n$7@143@01 nodes@2@01))))
(push) ; 6
; [then-branch: 83 | n$7@143@01 in nodes@2@01 && Lookup(left, sm@62@01, n$7@143@01) != Null | live]
; [else-branch: 83 | !(n$7@143@01 in nodes@2@01 && Lookup(left, sm@62@01, n$7@143@01) != Null) | live]
(push) ; 7
; [then-branch: 83 | n$7@143@01 in nodes@2@01 && Lookup(left, sm@62@01, n$7@143@01) != Null]
(assert (and
  (Set_in n$7@143@01 nodes@2@01)
  (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) $Ref.null))))
; [eval] (n$7.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) n$7@143@01))
(push) ; 8
(assert (not (and (img@61@01 n$7@143@01) (Set_in (inv@60@01 n$7@143@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 83 | !(n$7@143@01 in nodes@2@01 && Lookup(left, sm@62@01, n$7@143@01) != Null)]
(assert (not
  (and
    (Set_in n$7@143@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (=>
  (and
    (Set_in n$7@143@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) $Ref.null)))
  (and
    (Set_in n$7@143@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) n$7@143@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$7@143@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) $Ref.null))))
  (and
    (Set_in n$7@143@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$7@143@01 $Ref)) (!
  (and
    (=>
      (Set_in n$7@143@01 nodes@2@01)
      (and
        (Set_in n$7@143@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) n$7@143@01)))
    (or (Set_in n$7@143@01 nodes@2@01) (not (Set_in n$7@143@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$7@143@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) $Ref.null)))
      (and
        (Set_in n$7@143@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) n$7@143@01)))
    (or
      (not
        (and
          (Set_in n$7@143@01 nodes@2@01)
          (not
            (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) $Ref.null))))
      (and
        (Set_in n$7@143@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) nodes@2@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@143@01 $Ref)) (!
  (and
    (=>
      (Set_in n$7@143@01 nodes@2@01)
      (and
        (Set_in n$7@143@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) n$7@143@01)))
    (or (Set_in n$7@143@01 nodes@2@01) (not (Set_in n$7@143@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$7@143@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) $Ref.null)))
      (and
        (Set_in n$7@143@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) n$7@143@01)))
    (or
      (not
        (and
          (Set_in n$7@143@01 nodes@2@01)
          (not
            (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) $Ref.null))))
      (and
        (Set_in n$7@143@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) $Ref.null)))))
  :pattern ((Set_in n$7@143@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) n$7@143@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(push) ; 5
(assert (not (forall ((n$7@143@01 $Ref)) (!
  (=>
    (and
      (Set_in n$7@143@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) nodes@2@01))
  :pattern ((Set_in n$7@143@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) n$7@143@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$7@143@01 $Ref)) (!
  (=>
    (and
      (Set_in n$7@143@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) nodes@2@01))
  :pattern ((Set_in n$7@143@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n$7@143@01) n$7@143@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
; [eval] (forall n$8: Ref :: { (n$8.right in nodes) } { (n$8 in nodes), n$8.right } (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes))
(declare-const n$8@144@01 $Ref)
(push) ; 5
; [eval] (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes)
; [eval] (n$8 in nodes) && n$8.right != null
; [eval] (n$8 in nodes)
(push) ; 6
; [then-branch: 84 | !(n$8@144@01 in nodes@2@01) | live]
; [else-branch: 84 | n$8@144@01 in nodes@2@01 | live]
(push) ; 7
; [then-branch: 84 | !(n$8@144@01 in nodes@2@01)]
(assert (not (Set_in n$8@144@01 nodes@2@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 84 | n$8@144@01 in nodes@2@01]
(assert (Set_in n$8@144@01 nodes@2@01))
; [eval] n$8.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) n$8@144@01))
(push) ; 8
(assert (not (and (img@65@01 n$8@144@01) (Set_in (inv@64@01 n$8@144@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (=>
  (Set_in n$8@144@01 nodes@2@01)
  (and
    (Set_in n$8@144@01 nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) n$8@144@01))))
(assert (or (Set_in n$8@144@01 nodes@2@01) (not (Set_in n$8@144@01 nodes@2@01))))
(push) ; 6
; [then-branch: 85 | n$8@144@01 in nodes@2@01 && Lookup(right, sm@66@01, n$8@144@01) != Null | live]
; [else-branch: 85 | !(n$8@144@01 in nodes@2@01 && Lookup(right, sm@66@01, n$8@144@01) != Null) | live]
(push) ; 7
; [then-branch: 85 | n$8@144@01 in nodes@2@01 && Lookup(right, sm@66@01, n$8@144@01) != Null]
(assert (and
  (Set_in n$8@144@01 nodes@2@01)
  (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) $Ref.null))))
; [eval] (n$8.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) n$8@144@01))
(push) ; 8
(assert (not (and (img@65@01 n$8@144@01) (Set_in (inv@64@01 n$8@144@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 85 | !(n$8@144@01 in nodes@2@01 && Lookup(right, sm@66@01, n$8@144@01) != Null)]
(assert (not
  (and
    (Set_in n$8@144@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (=>
  (and
    (Set_in n$8@144@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) $Ref.null)))
  (and
    (Set_in n$8@144@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) n$8@144@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$8@144@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) $Ref.null))))
  (and
    (Set_in n$8@144@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$8@144@01 $Ref)) (!
  (and
    (=>
      (Set_in n$8@144@01 nodes@2@01)
      (and
        (Set_in n$8@144@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) n$8@144@01)))
    (or (Set_in n$8@144@01 nodes@2@01) (not (Set_in n$8@144@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$8@144@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) $Ref.null)))
      (and
        (Set_in n$8@144@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) n$8@144@01)))
    (or
      (not
        (and
          (Set_in n$8@144@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01)
              $Ref.null))))
      (and
        (Set_in n$8@144@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) nodes@2@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@144@01 $Ref)) (!
  (and
    (=>
      (Set_in n$8@144@01 nodes@2@01)
      (and
        (Set_in n$8@144@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) n$8@144@01)))
    (or (Set_in n$8@144@01 nodes@2@01) (not (Set_in n$8@144@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$8@144@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) $Ref.null)))
      (and
        (Set_in n$8@144@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) n$8@144@01)))
    (or
      (not
        (and
          (Set_in n$8@144@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01)
              $Ref.null))))
      (and
        (Set_in n$8@144@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) $Ref.null)))))
  :pattern ((Set_in n$8@144@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) n$8@144@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(push) ; 5
(assert (not (forall ((n$8@144@01 $Ref)) (!
  (=>
    (and
      (Set_in n$8@144@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) nodes@2@01))
  :pattern ((Set_in n$8@144@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) n$8@144@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$8@144@01 $Ref)) (!
  (=>
    (and
      (Set_in n$8@144@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) nodes@2@01))
  :pattern ((Set_in n$8@144@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n$8@144@01) n$8@144@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } (n in nodes) ==> old(n.is_marked) ==> n.is_marked)
(declare-const n@145@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(n.is_marked) ==> n.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 86 | n@145@01 in nodes@2@01 | live]
; [else-branch: 86 | !(n@145@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 86 | n@145@01 in nodes@2@01]
(assert (Set_in n@145@01 nodes@2@01))
; [eval] old(n.is_marked) ==> n.is_marked
; [eval] old(n.is_marked)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@145@01) n@145@01))
(push) ; 8
(assert (not (and (img@15@01 n@145@01) (Set_in (inv@14@01 n@145@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 87 | Lookup(is_marked, sm@16@01, n@145@01) | live]
; [else-branch: 87 | !(Lookup(is_marked, sm@16@01, n@145@01)) | live]
(push) ; 9
; [then-branch: 87 | Lookup(is_marked, sm@16@01, n@145@01)]
(assert ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@145@01))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@145@01) n@145@01))
(push) ; 10
(assert (not (and (img@69@01 n@145@01) (Set_in (inv@68@01 n@145@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(push) ; 9
; [else-branch: 87 | !(Lookup(is_marked, sm@16@01, n@145@01))]
(assert (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@145@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@145@01)
  (and
    ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@145@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@145@01) n@145@01))))
; Joined path conditions
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@145@01))
  ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@145@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 86 | !(n@145@01 in nodes@2@01)]
(assert (not (Set_in n@145@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (Set_in n@145@01 nodes@2@01)
  (and
    (Set_in n@145@01 nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@145@01) n@145@01)
    (=>
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@145@01)
      (and
        ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@145@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@145@01) n@145@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@145@01))
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@145@01)))))
; Joined path conditions
(assert (or (not (Set_in n@145@01 nodes@2@01)) (Set_in n@145@01 nodes@2@01)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@145@01 $Ref)) (!
  (and
    (=>
      (Set_in n@145@01 nodes@2@01)
      (and
        (Set_in n@145@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@145@01) n@145@01)
        (=>
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@145@01)
          (and
            ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@145@01)
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@145@01) n@145@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@145@01))
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@145@01))))
    (or (not (Set_in n@145@01 nodes@2@01)) (Set_in n@145@01 nodes@2@01)))
  :pattern ((Set_in n@145@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@145@01) n@145@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102-aux|)))
(push) ; 5
(assert (not (forall ((n@145@01 $Ref)) (!
  (=>
    (and
      (Set_in n@145@01 nodes@2@01)
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@145@01))
    ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@145@01))
  :pattern ((Set_in n@145@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@145@01) n@145@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n@145@01 $Ref)) (!
  (=>
    (and
      (Set_in n@145@01 nodes@2@01)
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@145@01))
    ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@145@01))
  :pattern ((Set_in n@145@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@145@01) n@145@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) node@3@01) node@3@01))
(push) ; 5
(assert (not (and (img@69@01 node@3@01) (Set_in (inv@68@01 node@3@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) node@3@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) node@3@01))
; [eval] (forall n: Ref :: { (n in nodes), n.left } (n in nodes) ==> n.left == old(n.left))
(declare-const n@146@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> n.left == old(n.left)
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 88 | n@146@01 in nodes@2@01 | live]
; [else-branch: 88 | !(n@146@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 88 | n@146@01 in nodes@2@01]
(assert (Set_in n@146@01 nodes@2@01))
; [eval] n.left == old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@146@01) n@146@01))
(push) ; 8
(assert (not (and (img@61@01 n@146@01) (Set_in (inv@60@01 n@146@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [eval] old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@146@01) n@146@01))
(push) ; 8
(assert (not (and (img@7@01 n@146@01) (Set_in (inv@6@01 n@146@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 88 | !(n@146@01 in nodes@2@01)]
(assert (not (Set_in n@146@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (Set_in n@146@01 nodes@2@01)
  (and
    (Set_in n@146@01 nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@146@01) n@146@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@146@01) n@146@01))))
; Joined path conditions
(assert (or (not (Set_in n@146@01 nodes@2@01)) (Set_in n@146@01 nodes@2@01)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@146@01 $Ref)) (!
  (and
    (=>
      (Set_in n@146@01 nodes@2@01)
      (and
        (Set_in n@146@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@146@01) n@146@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@146@01) n@146@01)))
    (or (not (Set_in n@146@01 nodes@2@01)) (Set_in n@146@01 nodes@2@01)))
  :pattern ((Set_in n@146@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@146@01) n@146@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86-aux|)))
(push) ; 5
(assert (not (forall ((n@146@01 $Ref)) (!
  (=>
    (Set_in n@146@01 nodes@2@01)
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@146@01)
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@146@01)))
  :pattern ((Set_in n@146@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@146@01) n@146@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n@146@01 $Ref)) (!
  (=>
    (Set_in n@146@01 nodes@2@01)
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@146@01)
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@146@01)))
  :pattern ((Set_in n@146@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@146@01) n@146@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86|)))
; [eval] (forall n: Ref :: { (n in nodes), n.right } (n in nodes) ==> n.right == old(n.right))
(declare-const n@147@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> n.right == old(n.right)
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 89 | n@147@01 in nodes@2@01 | live]
; [else-branch: 89 | !(n@147@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 89 | n@147@01 in nodes@2@01]
(assert (Set_in n@147@01 nodes@2@01))
; [eval] n.right == old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@147@01) n@147@01))
(push) ; 8
(assert (not (and (img@65@01 n@147@01) (Set_in (inv@64@01 n@147@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [eval] old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@147@01) n@147@01))
(push) ; 8
(assert (not (and (img@11@01 n@147@01) (Set_in (inv@10@01 n@147@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 89 | !(n@147@01 in nodes@2@01)]
(assert (not (Set_in n@147@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (Set_in n@147@01 nodes@2@01)
  (and
    (Set_in n@147@01 nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@147@01) n@147@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@147@01) n@147@01))))
; Joined path conditions
(assert (or (not (Set_in n@147@01 nodes@2@01)) (Set_in n@147@01 nodes@2@01)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@147@01 $Ref)) (!
  (and
    (=>
      (Set_in n@147@01 nodes@2@01)
      (and
        (Set_in n@147@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@147@01) n@147@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@147@01) n@147@01)))
    (or (not (Set_in n@147@01 nodes@2@01)) (Set_in n@147@01 nodes@2@01)))
  :pattern ((Set_in n@147@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@147@01) n@147@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89-aux|)))
(push) ; 5
(assert (not (forall ((n@147@01 $Ref)) (!
  (=>
    (Set_in n@147@01 nodes@2@01)
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@147@01)
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@147@01)))
  :pattern ((Set_in n@147@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@147@01) n@147@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n@147@01 $Ref)) (!
  (=>
    (Set_in n@147@01 nodes@2@01)
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@147@01)
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@147@01)))
  :pattern ((Set_in n@147@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@147@01) n@147@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89|)))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.left.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked)
(declare-const n@148@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 90 | n@148@01 in nodes@2@01 | live]
; [else-branch: 90 | !(n@148@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 90 | n@148@01 in nodes@2@01]
(assert (Set_in n@148@01 nodes@2@01))
; [eval] old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01) n@148@01))
(push) ; 8
(assert (not (and (img@15@01 n@148@01) (Set_in (inv@14@01 n@148@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 91 | Lookup(is_marked, sm@16@01, n@148@01) | live]
; [else-branch: 91 | !(Lookup(is_marked, sm@16@01, n@148@01)) | live]
(push) ; 9
; [then-branch: 91 | Lookup(is_marked, sm@16@01, n@148@01)]
(assert ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
(pop) ; 9
(push) ; 9
; [else-branch: 91 | !(Lookup(is_marked, sm@16@01, n@148@01))]
(assert (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01) n@148@01))
(push) ; 10
(assert (not (and (img@69@01 n@148@01) (Set_in (inv@68@01 n@148@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01) n@148@01))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
  ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01)))
(push) ; 8
; [then-branch: 92 | !(Lookup(is_marked, sm@16@01, n@148@01)) && Lookup(is_marked, sm@70@01, n@148@01) | live]
; [else-branch: 92 | !(!(Lookup(is_marked, sm@16@01, n@148@01)) && Lookup(is_marked, sm@70@01, n@148@01)) | live]
(push) ; 9
; [then-branch: 92 | !(Lookup(is_marked, sm@16@01, n@148@01)) && Lookup(is_marked, sm@70@01, n@148@01)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
  ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01)))
; [eval] n.left == null || n.left.is_marked
; [eval] n.left == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) n@148@01))
(push) ; 10
(assert (not (and (img@61@01 n@148@01) (Set_in (inv@60@01 n@148@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 93 | Lookup(left, sm@62@01, n@148@01) == Null | live]
; [else-branch: 93 | Lookup(left, sm@62@01, n@148@01) != Null | live]
(push) ; 11
; [then-branch: 93 | Lookup(left, sm@62@01, n@148@01) == Null]
(assert (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 93 | Lookup(left, sm@62@01, n@148@01) != Null]
(assert (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
    :qid |qp.fvfValDef17|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef18|))))
(push) ; 12
(assert (not (and (img@61@01 n@148@01) (Set_in (inv@60@01 n@148@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01)) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01)))
(push) ; 12
(assert (not (and
  (img@69@01 ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01))
  (Set_in (inv@68@01 ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01)) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01)) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01)))))
(assert (or
  (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) $Ref.null))
  (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) $Ref.null)))
(pop) ; 9
(push) ; 9
; [else-branch: 92 | !(!(Lookup(is_marked, sm@16@01, n@148@01)) && Lookup(is_marked, sm@70@01, n@148@01))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
    ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
    ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
    ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) n@148@01)
    (=>
      (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) $Ref.null))
      (and
        (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01)) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01))))
    (or
      (not (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) $Ref.null))
      (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01)))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
    ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 90 | !(n@148@01 in nodes@2@01)]
(assert (not (Set_in n@148@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
(assert (=>
  (Set_in n@148@01 nodes@2@01)
  (and
    (Set_in n@148@01 nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01) n@148@01)
    (=>
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01) n@148@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) n@148@01)
        (=>
          (not
            (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) $Ref.null))
          (and
            (not
              (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01)) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01))))
        (or
          (not
            (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) $Ref.null))
          (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
          ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01)))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01))))))
; Joined path conditions
(assert (or (not (Set_in n@148@01 nodes@2@01)) (Set_in n@148@01 nodes@2@01)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@61@01 r) (Set_in (inv@60@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@62@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@62@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef18|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@148@01 $Ref)) (!
  (and
    (=>
      (Set_in n@148@01 nodes@2@01)
      (and
        (Set_in n@148@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01) n@148@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01) n@148@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
            ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
            ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01)
            ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) n@148@01)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01)) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01)
                  $Ref.null))
              (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
              ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
            ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01)))))
    (or (not (Set_in n@148@01 nodes@2@01)) (Set_in n@148@01 nodes@2@01)))
  :pattern ((Set_in n@148@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01) n@148@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@148@01 $Ref)) (!
  (and
    (=>
      (Set_in n@148@01 nodes@2@01)
      (and
        (Set_in n@148@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01) n@148@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01) n@148@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
            ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
            ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01)
            ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) n@148@01)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01)) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01)
                  $Ref.null))
              (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
              ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
            ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01)))))
    (or (not (Set_in n@148@01 nodes@2@01)) (Set_in n@148@01 nodes@2@01)))
  :pattern ((Set_in n@148@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) n@148@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01)) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(push) ; 5
(assert (not (forall ((n@148@01 $Ref)) (!
  (=>
    (and
      (Set_in n@148@01 nodes@2@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01)))
    (or
      (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01))))
  :pattern ((Set_in n@148@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01) n@148@01))
  :pattern ((Set_in n@148@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) n@148@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01)) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n@148@01 $Ref)) (!
  (=>
    (and
      (Set_in n@148@01 nodes@2@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@148@01))
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01)))
    (or
      (= ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01))))
  :pattern ((Set_in n@148@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@148@01) n@148@01))
  :pattern ((Set_in n@148@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01) n@148@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01)) ($FVF.lookup_left (as sm@62@01  $FVF<left>) n@148@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|)))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.right.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked)
(declare-const n@149@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 94 | n@149@01 in nodes@2@01 | live]
; [else-branch: 94 | !(n@149@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 94 | n@149@01 in nodes@2@01]
(assert (Set_in n@149@01 nodes@2@01))
; [eval] old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01) n@149@01))
(push) ; 8
(assert (not (and (img@15@01 n@149@01) (Set_in (inv@14@01 n@149@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 95 | Lookup(is_marked, sm@16@01, n@149@01) | live]
; [else-branch: 95 | !(Lookup(is_marked, sm@16@01, n@149@01)) | live]
(push) ; 9
; [then-branch: 95 | Lookup(is_marked, sm@16@01, n@149@01)]
(assert ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
(pop) ; 9
(push) ; 9
; [else-branch: 95 | !(Lookup(is_marked, sm@16@01, n@149@01))]
(assert (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01) n@149@01))
(push) ; 10
(assert (not (and (img@69@01 n@149@01) (Set_in (inv@68@01 n@149@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01) n@149@01))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
  ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01)))
(push) ; 8
; [then-branch: 96 | !(Lookup(is_marked, sm@16@01, n@149@01)) && Lookup(is_marked, sm@70@01, n@149@01) | live]
; [else-branch: 96 | !(!(Lookup(is_marked, sm@16@01, n@149@01)) && Lookup(is_marked, sm@70@01, n@149@01)) | live]
(push) ; 9
; [then-branch: 96 | !(Lookup(is_marked, sm@16@01, n@149@01)) && Lookup(is_marked, sm@70@01, n@149@01)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
  ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01)))
; [eval] n.right == null || n.right.is_marked
; [eval] n.right == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01) n@149@01))
(push) ; 10
(assert (not (and (img@65@01 n@149@01) (Set_in (inv@64@01 n@149@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 97 | Lookup(right, sm@66@01, n@149@01) == Null | live]
; [else-branch: 97 | Lookup(right, sm@66@01, n@149@01) != Null | live]
(push) ; 11
; [then-branch: 97 | Lookup(right, sm@66@01, n@149@01) == Null]
(assert (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01) $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 97 | Lookup(right, sm@66@01, n@149@01) != Null]
(assert (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef20|))))
(push) ; 12
(assert (not (and (img@65@01 n@149@01) (Set_in (inv@64@01 n@149@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
    :qid |qp.fvfValDef21|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef22|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01)) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01)))
(push) ; 12
(assert (not (and
  (img@69@01 ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01))
  (Set_in (inv@68@01 ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01)) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01)) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01)))))
(assert (or
  (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01) $Ref.null))
  (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01) $Ref.null)))
(pop) ; 9
(push) ; 9
; [else-branch: 96 | !(!(Lookup(is_marked, sm@16@01, n@149@01)) && Lookup(is_marked, sm@70@01, n@149@01))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
    ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
    ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
    ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01) n@149@01)
    (=>
      (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01) $Ref.null))
      (and
        (not
          (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01)) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01))))
    (or
      (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01) $Ref.null))
      (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01)))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
    ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 94 | !(n@149@01 in nodes@2@01)]
(assert (not (Set_in n@149@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
(assert (=>
  (Set_in n@149@01 nodes@2@01)
  (and
    (Set_in n@149@01 nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01) n@149@01)
    (=>
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01) n@149@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01) n@149@01)
        (=>
          (not
            (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01) $Ref.null))
          (and
            (not
              (=
                ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01)
                $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01)) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01))))
        (or
          (not
            (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01) $Ref.null))
          (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
          ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01)))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01))))))
; Joined path conditions
(assert (or (not (Set_in n@149@01 nodes@2@01)) (Set_in n@149@01 nodes@2@01)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@69@01 r) (Set_in (inv@68@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@58@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@65@01 r) (Set_in (inv@64@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@66@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@58@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@66@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef20|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@149@01 $Ref)) (!
  (and
    (=>
      (Set_in n@149@01 nodes@2@01)
      (and
        (Set_in n@149@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01) n@149@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01) n@149@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
            ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
            ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01)
            ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01) n@149@01)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01)) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
              ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
            ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01)))))
    (or (not (Set_in n@149@01 nodes@2@01)) (Set_in n@149@01 nodes@2@01)))
  :pattern ((Set_in n@149@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01) n@149@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@149@01 $Ref)) (!
  (and
    (=>
      (Set_in n@149@01 nodes@2@01)
      (and
        (Set_in n@149@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01) n@149@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01) n@149@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
            ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
            ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01)
            ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01) n@149@01)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01)) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
              ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
            ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01)))))
    (or (not (Set_in n@149@01 nodes@2@01)) (Set_in n@149@01 nodes@2@01)))
  :pattern ((Set_in n@149@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01) n@149@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01)) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(push) ; 5
(assert (not (forall ((n@149@01 $Ref)) (!
  (=>
    (and
      (Set_in n@149@01 nodes@2@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01)))
    (or
      (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01))))
  :pattern ((Set_in n@149@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01) n@149@01))
  :pattern ((Set_in n@149@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01) n@149@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01)) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n@149@01 $Ref)) (!
  (=>
    (and
      (Set_in n@149@01 nodes@2@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@149@01))
        ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01)))
    (or
      (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01))))
  :pattern ((Set_in n@149@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) n@149@01) n@149@01))
  :pattern ((Set_in n@149@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01) n@149@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01)) ($FVF.lookup_right (as sm@66@01  $FVF<right>) n@149@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|)))
(pop) ; 4
(push) ; 4
; [else-branch: 81 | Lookup(right, sm@66@01, node@3@01) != Null && !(Lookup(is_marked, sm@70@01, Lookup(right, sm@66@01, node@3@01)))]
(assert (and
  (not (= ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01) $Ref.null))
  (not
    ($FVF.lookup_is_marked (as sm@70@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@66@01  $FVF<right>) node@3@01)))))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 21 | !(Lookup(left, sm@8@01, node@3@01) != Null && !(Lookup(is_marked, sm@41@01, Lookup(left, sm@8@01, node@3@01))))]
(assert (not
  (and
    (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01) $Ref.null))
    (not
      ($FVF.lookup_is_marked (as sm@41@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01))))))
(pop) ; 3
; [eval] !(node.left != null && !node.left.is_marked)
; [eval] node.left != null && !node.left.is_marked
; [eval] node.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(push) ; 3
(assert (not (and (img@7@01 node@3@01) (Set_in (inv@6@01 node@3@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
; [then-branch: 98 | Lookup(left, sm@8@01, node@3@01) == Null | live]
; [else-branch: 98 | Lookup(left, sm@8@01, node@3@01) != Null | live]
(push) ; 4
; [then-branch: 98 | Lookup(left, sm@8@01, node@3@01) == Null]
(assert (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01) $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch: 98 | Lookup(left, sm@8@01, node@3@01) != Null]
(assert (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01) $Ref.null)))
; [eval] !node.left.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(push) ; 5
(assert (not (and (img@7@01 node@3@01) (Set_in (inv@6@01 node@3@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(declare-const sm@150@01 $FVF<is_marked>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(declare-const pm@151@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_is_marked (as pm@151@01  $FPM) r)
    (+
      (ite (= r node@3@01) $Perm.Write $Perm.No)
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (- $Perm.Write (pTaken@39@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_is_marked (as pm@151@01  $FPM) r))
  :qid |qp.resPrmSumDef32|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.perm_is_marked (as pm@151@01  $FPM) r))
  :qid |qp.resTrgDef33|)))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01)) ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01)))
(push) ; 5
(assert (not (<
  $Perm.No
  ($FVF.perm_is_marked (as pm@151@01  $FPM) ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_is_marked (as pm@151@01  $FPM) r)
    (+
      (ite (= r node@3@01) $Perm.Write $Perm.No)
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (- $Perm.Write (pTaken@39@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_is_marked (as pm@151@01  $FPM) r))
  :qid |qp.resPrmSumDef32|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.perm_is_marked (as pm@151@01  $FPM) r))
  :qid |qp.resTrgDef33|)))
(assert (=>
  (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01)) ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01)))))
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01) $Ref.null))
  (not
    ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01) $Ref.null))
    (not
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [then-branch: 99 | !(Lookup(left, sm@8@01, node@3@01) != Null && !(Lookup(is_marked, sm@150@01, Lookup(left, sm@8@01, node@3@01)))) | live]
; [else-branch: 99 | Lookup(left, sm@8@01, node@3@01) != Null && !(Lookup(is_marked, sm@150@01, Lookup(left, sm@8@01, node@3@01))) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 99 | !(Lookup(left, sm@8@01, node@3@01) != Null && !(Lookup(is_marked, sm@150@01, Lookup(left, sm@8@01, node@3@01))))]
(assert (not
  (and
    (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01) $Ref.null))
    (not
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01))))))
; [eval] node.right != null && !node.right.is_marked
; [eval] node.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01) node@3@01))
(push) ; 4
(assert (not (and (img@11@01 node@3@01) (Set_in (inv@10@01 node@3@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
; [then-branch: 100 | Lookup(right, sm@12@01, node@3@01) == Null | live]
; [else-branch: 100 | Lookup(right, sm@12@01, node@3@01) != Null | live]
(push) ; 5
; [then-branch: 100 | Lookup(right, sm@12@01, node@3@01) == Null]
(assert (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01) $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 100 | Lookup(right, sm@12@01, node@3@01) != Null]
(assert (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01) $Ref.null)))
; [eval] !node.right.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(push) ; 6
(assert (not (and (img@11@01 node@3@01) (Set_in (inv@10@01 node@3@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@01)
      (=
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef29|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef30|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef31|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01)) ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01)))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01) node@3@01)
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@15@01 ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01))
        (Set_in (inv@14@01 ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01)) nodes@2@01))
      (-
        $Perm.Write
        (pTaken@39@01 ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (=>
  (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01)) ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01)))))
(assert (or
  (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01) $Ref.null))
  (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01) $Ref.null)))
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01) $Ref.null))
    (not
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01)))))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01) $Ref.null))
  (not
    ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01))))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 101 | Lookup(right, sm@12@01, node@3@01) != Null && !(Lookup(is_marked, sm@150@01, Lookup(right, sm@12@01, node@3@01))) | live]
; [else-branch: 101 | !(Lookup(right, sm@12@01, node@3@01) != Null && !(Lookup(is_marked, sm@150@01, Lookup(right, sm@12@01, node@3@01)))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 101 | Lookup(right, sm@12@01, node@3@01) != Null && !(Lookup(is_marked, sm@150@01, Lookup(right, sm@12@01, node@3@01)))]
(assert (and
  (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01) $Ref.null))
  (not
    ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01)))))
; [exec]
; trav_rec(nodes, node.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(push) ; 5
(assert (not (and (img@11@01 node@3@01) (Set_in (inv@10@01 node@3@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] (node in nodes)
(push) ; 5
(assert (not (Set_in ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01) nodes@2@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (Set_in ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01) nodes@2@01))
; [eval] !((null in nodes))
; [eval] (null in nodes)
(declare-const n@152@01 $Ref)
(push) ; 5
; [eval] (n in nodes)
(assert (Set_in n@152@01 nodes@2@01))
(pop) ; 5
(declare-fun inv@153@01 ($Ref) $Ref)
(declare-fun img@154@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n1@152@01 $Ref) (n2@152@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@152@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n1@152@01) n1@152@01))
      (and
        (Set_in n2@152@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n2@152@01) n2@152@01))
      (= n1@152@01 n2@152@01))
    (= n1@152@01 n2@152@01))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@152@01 $Ref)) (!
  (=>
    (Set_in n@152@01 nodes@2@01)
    (and (= (inv@153@01 n@152@01) n@152@01) (img@154@01 n@152@01)))
  :pattern ((Set_in n@152@01 nodes@2@01))
  :pattern ((inv@153@01 n@152@01))
  :pattern ((img@154@01 n@152@01))
  :qid |left-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@154@01 r) (Set_in (inv@153@01 r) nodes@2@01))
    (= (inv@153@01 r) r))
  :pattern ((inv@153@01 r))
  :qid |left-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@153@01 r) nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) r) r))
  :pattern ((inv@153@01 r))
  :qid |quant-u-103|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@155@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@153@01 r) nodes@2@01) (img@154@01 r) (= r (inv@153@01 r)))
    ($Perm.min
      (ite
        (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      (pTaken@155@01 r))
    $Perm.No)
  
  :qid |quant-u-105|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@153@01 r) nodes@2@01) (img@154@01 r) (= r (inv@153@01 r)))
    (= (- $Perm.Write (pTaken@155@01 r)) $Perm.No))
  
  :qid |quant-u-106|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$0@156@01 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$0 in nodes)
(assert (Set_in n$0@156@01 nodes@2@01))
(pop) ; 5
(declare-fun inv@157@01 ($Ref) $Ref)
(declare-fun img@158@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$01@156@01 $Ref) (n$02@156@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$01@156@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$01@156@01) n$01@156@01))
      (and
        (Set_in n$02@156@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$02@156@01) n$02@156@01))
      (= n$01@156@01 n$02@156@01))
    (= n$01@156@01 n$02@156@01))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@156@01 $Ref)) (!
  (=>
    (Set_in n$0@156@01 nodes@2@01)
    (and (= (inv@157@01 n$0@156@01) n$0@156@01) (img@158@01 n$0@156@01)))
  :pattern ((Set_in n$0@156@01 nodes@2@01))
  :pattern ((inv@157@01 n$0@156@01))
  :pattern ((img@158@01 n$0@156@01))
  :qid |right-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@158@01 r) (Set_in (inv@157@01 r) nodes@2@01))
    (= (inv@157@01 r) r))
  :pattern ((inv@157@01 r))
  :qid |right-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@157@01 r) nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) r) r))
  :pattern ((inv@157@01 r))
  :qid |quant-u-108|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@159@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@157@01 r) nodes@2@01) (img@158@01 r) (= r (inv@157@01 r)))
    ($Perm.min
      (ite
        (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      (pTaken@159@01 r))
    $Perm.No)
  
  :qid |quant-u-110|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@157@01 r) nodes@2@01) (img@158@01 r) (= r (inv@157@01 r)))
    (= (- $Perm.Write (pTaken@159@01 r)) $Perm.No))
  
  :qid |quant-u-111|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$1@160@01 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$1 in nodes)
(assert (Set_in n$1@160@01 nodes@2@01))
(pop) ; 5
(declare-fun inv@161@01 ($Ref) $Ref)
(declare-fun img@162@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$11@160@01 $Ref) (n$12@160@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$11@160@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n$11@160@01) n$11@160@01))
      (and
        (Set_in n$12@160@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n$12@160@01) n$12@160@01))
      (= n$11@160@01 n$12@160@01))
    (= n$11@160@01 n$12@160@01))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@160@01 $Ref)) (!
  (=>
    (Set_in n$1@160@01 nodes@2@01)
    (and (= (inv@161@01 n$1@160@01) n$1@160@01) (img@162@01 n$1@160@01)))
  :pattern ((Set_in n$1@160@01 nodes@2@01))
  :pattern ((inv@161@01 n$1@160@01))
  :pattern ((img@162@01 n$1@160@01))
  :qid |is_marked-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@162@01 r) (Set_in (inv@161@01 r) nodes@2@01))
    (= (inv@161@01 r) r))
  :pattern ((inv@161@01 r))
  :qid |is_marked-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@161@01 r) nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r) r))
  :pattern ((inv@161@01 r))
  :qid |quant-u-113|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@163@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@161@01 r) nodes@2@01) (img@162@01 r) (= r (inv@161@01 r)))
    ($Perm.min
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (- $Perm.Write (pTaken@39@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@164@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@161@01 r) nodes@2@01) (img@162@01 r) (= r (inv@161@01 r)))
    ($Perm.min
      (ite (= r node@3@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@163@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (- $Perm.Write (pTaken@39@01 r))
        $Perm.No)
      (pTaken@163@01 r))
    $Perm.No)
  
  :qid |quant-u-115|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@161@01 r) nodes@2@01) (img@162@01 r) (= r (inv@161@01 r)))
    (= (- $Perm.Write (pTaken@163@01 r)) $Perm.No))
  
  :qid |quant-u-116|))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@164@01 node@3@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@161@01 r) nodes@2@01) (img@162@01 r) (= r (inv@161@01 r)))
    (= (- (- $Perm.Write (pTaken@163@01 r)) (pTaken@164@01 r)) $Perm.No))
  
  :qid |quant-u-118|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall n$2: Ref :: { (n$2.left in nodes) } { (n$2 in nodes), n$2.left } (n$2 in nodes) && n$2.left != null ==> (n$2.left in nodes))
(declare-const n$2@165@01 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$2 in nodes) && n$2.left != null ==> (n$2.left in nodes)
; [eval] (n$2 in nodes) && n$2.left != null
; [eval] (n$2 in nodes)
(push) ; 6
; [then-branch: 102 | !(n$2@165@01 in nodes@2@01) | live]
; [else-branch: 102 | n$2@165@01 in nodes@2@01 | live]
(push) ; 7
; [then-branch: 102 | !(n$2@165@01 in nodes@2@01)]
(assert (not (Set_in n$2@165@01 nodes@2@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 102 | n$2@165@01 in nodes@2@01]
(assert (Set_in n$2@165@01 nodes@2@01))
; [eval] n$2.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) n$2@165@01))
(push) ; 8
(assert (not (and (img@7@01 n$2@165@01) (Set_in (inv@6@01 n$2@165@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (Set_in n$2@165@01 nodes@2@01)
  (and
    (Set_in n$2@165@01 nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) n$2@165@01))))
(assert (or (Set_in n$2@165@01 nodes@2@01) (not (Set_in n$2@165@01 nodes@2@01))))
(push) ; 6
; [then-branch: 103 | n$2@165@01 in nodes@2@01 && Lookup(left, sm@8@01, n$2@165@01) != Null | live]
; [else-branch: 103 | !(n$2@165@01 in nodes@2@01 && Lookup(left, sm@8@01, n$2@165@01) != Null) | live]
(push) ; 7
; [then-branch: 103 | n$2@165@01 in nodes@2@01 && Lookup(left, sm@8@01, n$2@165@01) != Null]
(assert (and
  (Set_in n$2@165@01 nodes@2@01)
  (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) $Ref.null))))
; [eval] (n$2.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) n$2@165@01))
(push) ; 8
(assert (not (and (img@7@01 n$2@165@01) (Set_in (inv@6@01 n$2@165@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 103 | !(n$2@165@01 in nodes@2@01 && Lookup(left, sm@8@01, n$2@165@01) != Null)]
(assert (not
  (and
    (Set_in n$2@165@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (and
    (Set_in n$2@165@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) $Ref.null)))
  (and
    (Set_in n$2@165@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) n$2@165@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@165@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) $Ref.null))))
  (and
    (Set_in n$2@165@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@165@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@165@01 nodes@2@01)
      (and
        (Set_in n$2@165@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) n$2@165@01)))
    (or (Set_in n$2@165@01 nodes@2@01) (not (Set_in n$2@165@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$2@165@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) $Ref.null)))
      (and
        (Set_in n$2@165@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) n$2@165@01)))
    (or
      (not
        (and
          (Set_in n$2@165@01 nodes@2@01)
          (not
            (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) $Ref.null))))
      (and
        (Set_in n$2@165@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) nodes@2@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(assert (forall ((n$2@165@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@165@01 nodes@2@01)
      (and
        (Set_in n$2@165@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) n$2@165@01)))
    (or (Set_in n$2@165@01 nodes@2@01) (not (Set_in n$2@165@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$2@165@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) $Ref.null)))
      (and
        (Set_in n$2@165@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) n$2@165@01)))
    (or
      (not
        (and
          (Set_in n$2@165@01 nodes@2@01)
          (not
            (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) $Ref.null))))
      (and
        (Set_in n$2@165@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) $Ref.null)))))
  :pattern ((Set_in n$2@165@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) n$2@165@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(push) ; 5
(assert (not (forall ((n$2@165@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@165@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) nodes@2@01))
  :pattern ((Set_in n$2@165@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) n$2@165@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$2@165@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@165@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) nodes@2@01))
  :pattern ((Set_in n$2@165@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$2@165@01) n$2@165@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|)))
; [eval] (forall n$3: Ref :: { (n$3.right in nodes) } { (n$3 in nodes), n$3.right } (n$3 in nodes) && n$3.right != null ==> (n$3.right in nodes))
(declare-const n$3@166@01 $Ref)
(push) ; 5
; [eval] (n$3 in nodes) && n$3.right != null ==> (n$3.right in nodes)
; [eval] (n$3 in nodes) && n$3.right != null
; [eval] (n$3 in nodes)
(push) ; 6
; [then-branch: 104 | !(n$3@166@01 in nodes@2@01) | live]
; [else-branch: 104 | n$3@166@01 in nodes@2@01 | live]
(push) ; 7
; [then-branch: 104 | !(n$3@166@01 in nodes@2@01)]
(assert (not (Set_in n$3@166@01 nodes@2@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 104 | n$3@166@01 in nodes@2@01]
(assert (Set_in n$3@166@01 nodes@2@01))
; [eval] n$3.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) n$3@166@01))
(push) ; 8
(assert (not (and (img@11@01 n$3@166@01) (Set_in (inv@10@01 n$3@166@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (Set_in n$3@166@01 nodes@2@01)
  (and
    (Set_in n$3@166@01 nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) n$3@166@01))))
(assert (or (Set_in n$3@166@01 nodes@2@01) (not (Set_in n$3@166@01 nodes@2@01))))
(push) ; 6
; [then-branch: 105 | n$3@166@01 in nodes@2@01 && Lookup(right, sm@12@01, n$3@166@01) != Null | live]
; [else-branch: 105 | !(n$3@166@01 in nodes@2@01 && Lookup(right, sm@12@01, n$3@166@01) != Null) | live]
(push) ; 7
; [then-branch: 105 | n$3@166@01 in nodes@2@01 && Lookup(right, sm@12@01, n$3@166@01) != Null]
(assert (and
  (Set_in n$3@166@01 nodes@2@01)
  (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) $Ref.null))))
; [eval] (n$3.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) n$3@166@01))
(push) ; 8
(assert (not (and (img@11@01 n$3@166@01) (Set_in (inv@10@01 n$3@166@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 105 | !(n$3@166@01 in nodes@2@01 && Lookup(right, sm@12@01, n$3@166@01) != Null)]
(assert (not
  (and
    (Set_in n$3@166@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (and
    (Set_in n$3@166@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) $Ref.null)))
  (and
    (Set_in n$3@166@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) n$3@166@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$3@166@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) $Ref.null))))
  (and
    (Set_in n$3@166@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$3@166@01 $Ref)) (!
  (and
    (=>
      (Set_in n$3@166@01 nodes@2@01)
      (and
        (Set_in n$3@166@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) n$3@166@01)))
    (or (Set_in n$3@166@01 nodes@2@01) (not (Set_in n$3@166@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$3@166@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) $Ref.null)))
      (and
        (Set_in n$3@166@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) n$3@166@01)))
    (or
      (not
        (and
          (Set_in n$3@166@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01)
              $Ref.null))))
      (and
        (Set_in n$3@166@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) nodes@2@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(assert (forall ((n$3@166@01 $Ref)) (!
  (and
    (=>
      (Set_in n$3@166@01 nodes@2@01)
      (and
        (Set_in n$3@166@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) n$3@166@01)))
    (or (Set_in n$3@166@01 nodes@2@01) (not (Set_in n$3@166@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$3@166@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) $Ref.null)))
      (and
        (Set_in n$3@166@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) n$3@166@01)))
    (or
      (not
        (and
          (Set_in n$3@166@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01)
              $Ref.null))))
      (and
        (Set_in n$3@166@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) $Ref.null)))))
  :pattern ((Set_in n$3@166@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) n$3@166@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(push) ; 5
(assert (not (forall ((n$3@166@01 $Ref)) (!
  (=>
    (and
      (Set_in n$3@166@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) nodes@2@01))
  :pattern ((Set_in n$3@166@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) n$3@166@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$3@166@01 $Ref)) (!
  (=>
    (and
      (Set_in n$3@166@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) nodes@2@01))
  :pattern ((Set_in n$3@166@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$3@166@01) n$3@166@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|)))
; [eval] !node.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@01)
      (=
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef29|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef30|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef31|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01)) ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01)))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01) node@3@01)
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@15@01 ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01))
        (Set_in (inv@14@01 ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01)) nodes@2@01))
      (-
        $Perm.Write
        (pTaken@39@01 ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(declare-const $t@167@01 $Snap)
(assert (= $t@167@01 ($Snap.combine ($Snap.first $t@167@01) ($Snap.second $t@167@01))))
(assert (= ($Snap.first $t@167@01) $Snap.unit))
; [eval] (node in nodes)
(assert (=
  ($Snap.second $t@167@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@167@01))
    ($Snap.second ($Snap.second $t@167@01)))))
(assert (= ($Snap.first ($Snap.second $t@167@01)) $Snap.unit))
; [eval] !((null in nodes))
; [eval] (null in nodes)
(assert (=
  ($Snap.second ($Snap.second $t@167@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@167@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))
(declare-const n$4@168@01 $Ref)
(push) ; 5
; [eval] (n$4 in nodes)
(assert (Set_in n$4@168@01 nodes@2@01))
(pop) ; 5
(declare-fun inv@169@01 ($Ref) $Ref)
(declare-fun img@170@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$41@168@01 $Ref) (n$42@168@01 $Ref)) (!
  (=>
    (and
      (Set_in n$41@168@01 nodes@2@01)
      (Set_in n$42@168@01 nodes@2@01)
      (= n$41@168@01 n$42@168@01))
    (= n$41@168@01 n$42@168@01))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@168@01 $Ref)) (!
  (=>
    (Set_in n$4@168@01 nodes@2@01)
    (and (= (inv@169@01 n$4@168@01) n$4@168@01) (img@170@01 n$4@168@01)))
  :pattern ((Set_in n$4@168@01 nodes@2@01))
  :pattern ((inv@169@01 n$4@168@01))
  :pattern ((img@170@01 n$4@168@01))
  :qid |quant-u-120|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
    (= (inv@169@01 r) r))
  :pattern ((inv@169@01 r))
  :qid |left-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$4@168@01 $Ref)) (!
  (=> (Set_in n$4@168@01 nodes@2@01) (not (= n$4@168@01 $Ref.null)))
  :pattern ((Set_in n$4@168@01 nodes@2@01))
  :pattern ((inv@169@01 n$4@168@01))
  :pattern ((img@170@01 n$4@168@01))
  :qid |left-permImpliesNonNull|)))
(declare-const sm@171@01 $FVF<left>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@169@01 r) nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) r) r))
  :pattern ((inv@169@01 r))
  :qid |quant-u-121|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@167@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))
(declare-const n$5@172@01 $Ref)
(push) ; 5
; [eval] (n$5 in nodes)
(assert (Set_in n$5@172@01 nodes@2@01))
(pop) ; 5
(declare-fun inv@173@01 ($Ref) $Ref)
(declare-fun img@174@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$51@172@01 $Ref) (n$52@172@01 $Ref)) (!
  (=>
    (and
      (Set_in n$51@172@01 nodes@2@01)
      (Set_in n$52@172@01 nodes@2@01)
      (= n$51@172@01 n$52@172@01))
    (= n$51@172@01 n$52@172@01))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$5@172@01 $Ref)) (!
  (=>
    (Set_in n$5@172@01 nodes@2@01)
    (and (= (inv@173@01 n$5@172@01) n$5@172@01) (img@174@01 n$5@172@01)))
  :pattern ((Set_in n$5@172@01 nodes@2@01))
  :pattern ((inv@173@01 n$5@172@01))
  :pattern ((img@174@01 n$5@172@01))
  :qid |quant-u-123|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
    (= (inv@173@01 r) r))
  :pattern ((inv@173@01 r))
  :qid |right-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$5@172@01 $Ref)) (!
  (=> (Set_in n$5@172@01 nodes@2@01) (not (= n$5@172@01 $Ref.null)))
  :pattern ((Set_in n$5@172@01 nodes@2@01))
  :pattern ((inv@173@01 n$5@172@01))
  :pattern ((img@174@01 n$5@172@01))
  :qid |right-permImpliesNonNull|)))
(declare-const sm@175@01 $FVF<right>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@173@01 r) nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) r) r))
  :pattern ((inv@173@01 r))
  :qid |quant-u-124|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))))
(declare-const n$6@176@01 $Ref)
(push) ; 5
; [eval] (n$6 in nodes)
(assert (Set_in n$6@176@01 nodes@2@01))
(pop) ; 5
(declare-fun inv@177@01 ($Ref) $Ref)
(declare-fun img@178@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$61@176@01 $Ref) (n$62@176@01 $Ref)) (!
  (=>
    (and
      (Set_in n$61@176@01 nodes@2@01)
      (Set_in n$62@176@01 nodes@2@01)
      (= n$61@176@01 n$62@176@01))
    (= n$61@176@01 n$62@176@01))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$6@176@01 $Ref)) (!
  (=>
    (Set_in n$6@176@01 nodes@2@01)
    (and (= (inv@177@01 n$6@176@01) n$6@176@01) (img@178@01 n$6@176@01)))
  :pattern ((Set_in n$6@176@01 nodes@2@01))
  :pattern ((inv@177@01 n$6@176@01))
  :pattern ((img@178@01 n$6@176@01))
  :qid |quant-u-126|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (= (inv@177@01 r) r))
  :pattern ((inv@177@01 r))
  :qid |is_marked-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$6@176@01 $Ref)) (!
  (=> (Set_in n$6@176@01 nodes@2@01) (not (= n$6@176@01 $Ref.null)))
  :pattern ((Set_in n$6@176@01 nodes@2@01))
  :pattern ((inv@177@01 n$6@176@01))
  :pattern ((img@178@01 n$6@176@01))
  :qid |is_marked-permImpliesNonNull|)))
(declare-const sm@179@01 $FVF<is_marked>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@177@01 r) nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r) r))
  :pattern ((inv@177@01 r))
  :qid |quant-u-127|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))
  $Snap.unit))
; [eval] (forall n$7: Ref :: { (n$7.left in nodes) } { (n$7 in nodes), n$7.left } (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes))
(declare-const n$7@180@01 $Ref)
(push) ; 5
; [eval] (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes)
; [eval] (n$7 in nodes) && n$7.left != null
; [eval] (n$7 in nodes)
(push) ; 6
; [then-branch: 106 | !(n$7@180@01 in nodes@2@01) | live]
; [else-branch: 106 | n$7@180@01 in nodes@2@01 | live]
(push) ; 7
; [then-branch: 106 | !(n$7@180@01 in nodes@2@01)]
(assert (not (Set_in n$7@180@01 nodes@2@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 106 | n$7@180@01 in nodes@2@01]
(assert (Set_in n$7@180@01 nodes@2@01))
; [eval] n$7.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
    :qid |qp.fvfValDef34|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef35|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) n$7@180@01))
(push) ; 8
(assert (not (and (img@170@01 n$7@180@01) (Set_in (inv@169@01 n$7@180@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (=>
  (Set_in n$7@180@01 nodes@2@01)
  (and
    (Set_in n$7@180@01 nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) n$7@180@01))))
(assert (or (Set_in n$7@180@01 nodes@2@01) (not (Set_in n$7@180@01 nodes@2@01))))
(push) ; 6
; [then-branch: 107 | n$7@180@01 in nodes@2@01 && Lookup(left, sm@171@01, n$7@180@01) != Null | live]
; [else-branch: 107 | !(n$7@180@01 in nodes@2@01 && Lookup(left, sm@171@01, n$7@180@01) != Null) | live]
(push) ; 7
; [then-branch: 107 | n$7@180@01 in nodes@2@01 && Lookup(left, sm@171@01, n$7@180@01) != Null]
(assert (and
  (Set_in n$7@180@01 nodes@2@01)
  (not (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) $Ref.null))))
; [eval] (n$7.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
    :qid |qp.fvfValDef34|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef35|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) n$7@180@01))
(push) ; 8
(assert (not (and (img@170@01 n$7@180@01) (Set_in (inv@169@01 n$7@180@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 107 | !(n$7@180@01 in nodes@2@01 && Lookup(left, sm@171@01, n$7@180@01) != Null)]
(assert (not
  (and
    (Set_in n$7@180@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (=>
  (and
    (Set_in n$7@180@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) $Ref.null)))
  (and
    (Set_in n$7@180@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) n$7@180@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$7@180@01 nodes@2@01)
      (not
        (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) $Ref.null))))
  (and
    (Set_in n$7@180@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$7@180@01 $Ref)) (!
  (and
    (=>
      (Set_in n$7@180@01 nodes@2@01)
      (and
        (Set_in n$7@180@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) n$7@180@01)))
    (or (Set_in n$7@180@01 nodes@2@01) (not (Set_in n$7@180@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$7@180@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) $Ref.null)))
      (and
        (Set_in n$7@180@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) n$7@180@01)))
    (or
      (not
        (and
          (Set_in n$7@180@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01)
              $Ref.null))))
      (and
        (Set_in n$7@180@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) nodes@2@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@180@01 $Ref)) (!
  (and
    (=>
      (Set_in n$7@180@01 nodes@2@01)
      (and
        (Set_in n$7@180@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) n$7@180@01)))
    (or (Set_in n$7@180@01 nodes@2@01) (not (Set_in n$7@180@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$7@180@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) $Ref.null)))
      (and
        (Set_in n$7@180@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) n$7@180@01)))
    (or
      (not
        (and
          (Set_in n$7@180@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01)
              $Ref.null))))
      (and
        (Set_in n$7@180@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) $Ref.null)))))
  :pattern ((Set_in n$7@180@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) n$7@180@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@180@01 $Ref)) (!
  (=>
    (and
      (Set_in n$7@180@01 nodes@2@01)
      (not
        (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) nodes@2@01))
  :pattern ((Set_in n$7@180@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@180@01) n$7@180@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))
  $Snap.unit))
; [eval] (forall n$8: Ref :: { (n$8.right in nodes) } { (n$8 in nodes), n$8.right } (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes))
(declare-const n$8@181@01 $Ref)
(push) ; 5
; [eval] (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes)
; [eval] (n$8 in nodes) && n$8.right != null
; [eval] (n$8 in nodes)
(push) ; 6
; [then-branch: 108 | !(n$8@181@01 in nodes@2@01) | live]
; [else-branch: 108 | n$8@181@01 in nodes@2@01 | live]
(push) ; 7
; [then-branch: 108 | !(n$8@181@01 in nodes@2@01)]
(assert (not (Set_in n$8@181@01 nodes@2@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 108 | n$8@181@01 in nodes@2@01]
(assert (Set_in n$8@181@01 nodes@2@01))
; [eval] n$8.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
    :qid |qp.fvfValDef36|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef37|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01) n$8@181@01))
(push) ; 8
(assert (not (and (img@174@01 n$8@181@01) (Set_in (inv@173@01 n$8@181@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (=>
  (Set_in n$8@181@01 nodes@2@01)
  (and
    (Set_in n$8@181@01 nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01) n$8@181@01))))
(assert (or (Set_in n$8@181@01 nodes@2@01) (not (Set_in n$8@181@01 nodes@2@01))))
(push) ; 6
; [then-branch: 109 | n$8@181@01 in nodes@2@01 && Lookup(right, sm@175@01, n$8@181@01) != Null | live]
; [else-branch: 109 | !(n$8@181@01 in nodes@2@01 && Lookup(right, sm@175@01, n$8@181@01) != Null) | live]
(push) ; 7
; [then-branch: 109 | n$8@181@01 in nodes@2@01 && Lookup(right, sm@175@01, n$8@181@01) != Null]
(assert (and
  (Set_in n$8@181@01 nodes@2@01)
  (not (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01) $Ref.null))))
; [eval] (n$8.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
    :qid |qp.fvfValDef36|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef37|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01) n$8@181@01))
(push) ; 8
(assert (not (and (img@174@01 n$8@181@01) (Set_in (inv@173@01 n$8@181@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 109 | !(n$8@181@01 in nodes@2@01 && Lookup(right, sm@175@01, n$8@181@01) != Null)]
(assert (not
  (and
    (Set_in n$8@181@01 nodes@2@01)
    (not
      (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (=>
  (and
    (Set_in n$8@181@01 nodes@2@01)
    (not
      (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01) $Ref.null)))
  (and
    (Set_in n$8@181@01 nodes@2@01)
    (not
      (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01) n$8@181@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$8@181@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01) $Ref.null))))
  (and
    (Set_in n$8@181@01 nodes@2@01)
    (not
      (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$8@181@01 $Ref)) (!
  (and
    (=>
      (Set_in n$8@181@01 nodes@2@01)
      (and
        (Set_in n$8@181@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01) n$8@181@01)))
    (or (Set_in n$8@181@01 nodes@2@01) (not (Set_in n$8@181@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$8@181@01 nodes@2@01)
        (not
          (=
            ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01)
            $Ref.null)))
      (and
        (Set_in n$8@181@01 nodes@2@01)
        (not
          (=
            ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01)
            $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01) n$8@181@01)))
    (or
      (not
        (and
          (Set_in n$8@181@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01)
              $Ref.null))))
      (and
        (Set_in n$8@181@01 nodes@2@01)
        (not
          (=
            ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01)
            $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01) nodes@2@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@181@01 $Ref)) (!
  (and
    (=>
      (Set_in n$8@181@01 nodes@2@01)
      (and
        (Set_in n$8@181@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01) n$8@181@01)))
    (or (Set_in n$8@181@01 nodes@2@01) (not (Set_in n$8@181@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$8@181@01 nodes@2@01)
        (not
          (=
            ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01)
            $Ref.null)))
      (and
        (Set_in n$8@181@01 nodes@2@01)
        (not
          (=
            ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01)
            $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01) n$8@181@01)))
    (or
      (not
        (and
          (Set_in n$8@181@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01)
              $Ref.null))))
      (and
        (Set_in n$8@181@01 nodes@2@01)
        (not
          (=
            ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01)
            $Ref.null)))))
  :pattern ((Set_in n$8@181@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01) n$8@181@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@181@01 $Ref)) (!
  (=>
    (and
      (Set_in n$8@181@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01) nodes@2@01))
  :pattern ((Set_in n$8@181@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@181@01) n$8@181@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } (n in nodes) ==> old(n.is_marked) ==> n.is_marked)
(declare-const n@182@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(n.is_marked) ==> n.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 110 | n@182@01 in nodes@2@01 | live]
; [else-branch: 110 | !(n@182@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 110 | n@182@01 in nodes@2@01]
(assert (Set_in n@182@01 nodes@2@01))
; [eval] old(n.is_marked) ==> n.is_marked
; [eval] old(n.is_marked)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@01)
      (=
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef29|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef30|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef31|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@182@01) n@182@01))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite (= n@182@01 node@3@01) $Perm.Write $Perm.No)
    (ite
      (and (img@15@01 n@182@01) (Set_in (inv@14@01 n@182@01) nodes@2@01))
      (- $Perm.Write (pTaken@39@01 n@182@01))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 111 | Lookup(is_marked, sm@150@01, n@182@01) | live]
; [else-branch: 111 | !(Lookup(is_marked, sm@150@01, n@182@01)) | live]
(push) ; 9
; [then-branch: 111 | Lookup(is_marked, sm@150@01, n@182@01)]
(assert ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@182@01))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
    :qid |qp.fvfValDef38|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef39|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@182@01) n@182@01))
(push) ; 10
(assert (not (and (img@178@01 n@182@01) (Set_in (inv@177@01 n@182@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(push) ; 9
; [else-branch: 111 | !(Lookup(is_marked, sm@150@01, n@182@01))]
(assert (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@182@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@182@01)
  (and
    ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@182@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@182@01) n@182@01))))
; Joined path conditions
(assert (or
  (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@182@01))
  ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@182@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 110 | !(n@182@01 in nodes@2@01)]
(assert (not (Set_in n@182@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (Set_in n@182@01 nodes@2@01)
  (and
    (Set_in n@182@01 nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@182@01) n@182@01)
    (=>
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@182@01)
      (and
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@182@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@182@01) n@182@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@182@01))
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@182@01)))))
; Joined path conditions
(assert (or (not (Set_in n@182@01 nodes@2@01)) (Set_in n@182@01 nodes@2@01)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@182@01 $Ref)) (!
  (and
    (=>
      (Set_in n@182@01 nodes@2@01)
      (and
        (Set_in n@182@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@182@01) n@182@01)
        (=>
          ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@182@01)
          (and
            ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@182@01)
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@182@01) n@182@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@182@01))
          ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@182@01))))
    (or (not (Set_in n@182@01 nodes@2@01)) (Set_in n@182@01 nodes@2@01)))
  :pattern ((Set_in n@182@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@182@01) n@182@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102-aux|)))
(assert (forall ((n@182@01 $Ref)) (!
  (=>
    (and
      (Set_in n@182@01 nodes@2@01)
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@182@01))
    ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@182@01))
  :pattern ((Set_in n@182@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@182@01) n@182@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))))
  $Snap.unit))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
    :qid |qp.fvfValDef38|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef39|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01)) ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01)))
(push) ; 5
(assert (not (and
  (img@178@01 ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01))
  (Set_in (inv@177@01 ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01)) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.left } (n in nodes) ==> n.left == old(n.left))
(declare-const n@183@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> n.left == old(n.left)
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 112 | n@183@01 in nodes@2@01 | live]
; [else-branch: 112 | !(n@183@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 112 | n@183@01 in nodes@2@01]
(assert (Set_in n@183@01 nodes@2@01))
; [eval] n.left == old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
    :qid |qp.fvfValDef34|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef35|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@183@01) n@183@01))
(push) ; 8
(assert (not (and (img@170@01 n@183@01) (Set_in (inv@169@01 n@183@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [eval] old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@183@01) n@183@01))
(push) ; 8
(assert (not (and (img@7@01 n@183@01) (Set_in (inv@6@01 n@183@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 112 | !(n@183@01 in nodes@2@01)]
(assert (not (Set_in n@183@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (Set_in n@183@01 nodes@2@01)
  (and
    (Set_in n@183@01 nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@183@01) n@183@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@183@01) n@183@01))))
; Joined path conditions
(assert (or (not (Set_in n@183@01 nodes@2@01)) (Set_in n@183@01 nodes@2@01)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@183@01 $Ref)) (!
  (and
    (=>
      (Set_in n@183@01 nodes@2@01)
      (and
        (Set_in n@183@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@183@01) n@183@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@183@01) n@183@01)))
    (or (not (Set_in n@183@01 nodes@2@01)) (Set_in n@183@01 nodes@2@01)))
  :pattern ((Set_in n@183@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@183@01) n@183@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86-aux|)))
(assert (forall ((n@183@01 $Ref)) (!
  (=>
    (Set_in n@183@01 nodes@2@01)
    (=
      ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@183@01)
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@183@01)))
  :pattern ((Set_in n@183@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@183@01) n@183@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.right } (n in nodes) ==> n.right == old(n.right))
(declare-const n@184@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> n.right == old(n.right)
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 113 | n@184@01 in nodes@2@01 | live]
; [else-branch: 113 | !(n@184@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 113 | n@184@01 in nodes@2@01]
(assert (Set_in n@184@01 nodes@2@01))
; [eval] n.right == old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
    :qid |qp.fvfValDef36|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef37|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@184@01) n@184@01))
(push) ; 8
(assert (not (and (img@174@01 n@184@01) (Set_in (inv@173@01 n@184@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [eval] old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@184@01) n@184@01))
(push) ; 8
(assert (not (and (img@11@01 n@184@01) (Set_in (inv@10@01 n@184@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 113 | !(n@184@01 in nodes@2@01)]
(assert (not (Set_in n@184@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (Set_in n@184@01 nodes@2@01)
  (and
    (Set_in n@184@01 nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@184@01) n@184@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@184@01) n@184@01))))
; Joined path conditions
(assert (or (not (Set_in n@184@01 nodes@2@01)) (Set_in n@184@01 nodes@2@01)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@184@01 $Ref)) (!
  (and
    (=>
      (Set_in n@184@01 nodes@2@01)
      (and
        (Set_in n@184@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@184@01) n@184@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@184@01) n@184@01)))
    (or (not (Set_in n@184@01 nodes@2@01)) (Set_in n@184@01 nodes@2@01)))
  :pattern ((Set_in n@184@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@184@01) n@184@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89-aux|)))
(assert (forall ((n@184@01 $Ref)) (!
  (=>
    (Set_in n@184@01 nodes@2@01)
    (=
      ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@184@01)
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@184@01)))
  :pattern ((Set_in n@184@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@184@01) n@184@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.left.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked)
(declare-const n@185@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 114 | n@185@01 in nodes@2@01 | live]
; [else-branch: 114 | !(n@185@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 114 | n@185@01 in nodes@2@01]
(assert (Set_in n@185@01 nodes@2@01))
; [eval] old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@01)
      (=
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef29|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef30|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef31|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01) n@185@01))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite (= n@185@01 node@3@01) $Perm.Write $Perm.No)
    (ite
      (and (img@15@01 n@185@01) (Set_in (inv@14@01 n@185@01) nodes@2@01))
      (- $Perm.Write (pTaken@39@01 n@185@01))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 115 | Lookup(is_marked, sm@150@01, n@185@01) | live]
; [else-branch: 115 | !(Lookup(is_marked, sm@150@01, n@185@01)) | live]
(push) ; 9
; [then-branch: 115 | Lookup(is_marked, sm@150@01, n@185@01)]
(assert ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
(pop) ; 9
(push) ; 9
; [else-branch: 115 | !(Lookup(is_marked, sm@150@01, n@185@01))]
(assert (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
    :qid |qp.fvfValDef38|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef39|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01) n@185@01))
(push) ; 10
(assert (not (and (img@178@01 n@185@01) (Set_in (inv@177@01 n@185@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01) n@185@01))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
  ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01)))
(push) ; 8
; [then-branch: 116 | !(Lookup(is_marked, sm@150@01, n@185@01)) && Lookup(is_marked, sm@179@01, n@185@01) | live]
; [else-branch: 116 | !(!(Lookup(is_marked, sm@150@01, n@185@01)) && Lookup(is_marked, sm@179@01, n@185@01)) | live]
(push) ; 9
; [then-branch: 116 | !(Lookup(is_marked, sm@150@01, n@185@01)) && Lookup(is_marked, sm@179@01, n@185@01)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
  ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01)))
; [eval] n.left == null || n.left.is_marked
; [eval] n.left == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
    :qid |qp.fvfValDef34|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef35|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01) n@185@01))
(push) ; 10
(assert (not (and (img@170@01 n@185@01) (Set_in (inv@169@01 n@185@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 117 | Lookup(left, sm@171@01, n@185@01) == Null | live]
; [else-branch: 117 | Lookup(left, sm@171@01, n@185@01) != Null | live]
(push) ; 11
; [then-branch: 117 | Lookup(left, sm@171@01, n@185@01) == Null]
(assert (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01) $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 117 | Lookup(left, sm@171@01, n@185@01) != Null]
(assert (not (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
    :qid |qp.fvfValDef34|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef35|))))
(push) ; 12
(assert (not (and (img@170@01 n@185@01) (Set_in (inv@169@01 n@185@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
    :qid |qp.fvfValDef38|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef39|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01)) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01)))
(push) ; 12
(assert (not (and
  (img@178@01 ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01))
  (Set_in (inv@177@01 ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01)) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (not (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01)) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01)))))
(assert (or
  (not (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01) $Ref.null))
  (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01) $Ref.null)))
(pop) ; 9
(push) ; 9
; [else-branch: 116 | !(!(Lookup(is_marked, sm@150@01, n@185@01)) && Lookup(is_marked, sm@179@01, n@185@01))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
    ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
    ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
    ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01) n@185@01)
    (=>
      (not (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01) $Ref.null))
      (and
        (not
          (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01)) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01))))
    (or
      (not (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01) $Ref.null))
      (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01)))
  (and
    (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
    ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 114 | !(n@185@01 in nodes@2@01)]
(assert (not (Set_in n@185@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (=>
  (Set_in n@185@01 nodes@2@01)
  (and
    (Set_in n@185@01 nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01) n@185@01)
    (=>
      (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01) n@185@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01) n@185@01)
        (=>
          (not
            (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01) $Ref.null))
          (and
            (not
              (=
                ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01)
                $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01)) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01))))
        (or
          (not
            (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01) $Ref.null))
          (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
          ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01)))
      (and
        (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01))))))
; Joined path conditions
(assert (or (not (Set_in n@185@01 nodes@2@01)) (Set_in n@185@01 nodes@2@01)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@185@01 $Ref)) (!
  (and
    (=>
      (Set_in n@185@01 nodes@2@01)
      (and
        (Set_in n@185@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01) n@185@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01) n@185@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
          ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
        (=>
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
            ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
            ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01)
            ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01) n@185@01)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01)) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01)
                  $Ref.null))
              (=
                ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
              ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01)))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
            ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01)))))
    (or (not (Set_in n@185@01 nodes@2@01)) (Set_in n@185@01 nodes@2@01)))
  :pattern ((Set_in n@185@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01) n@185@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@185@01 $Ref)) (!
  (and
    (=>
      (Set_in n@185@01 nodes@2@01)
      (and
        (Set_in n@185@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01) n@185@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01) n@185@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
          ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
        (=>
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
            ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
            ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01)
            ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01) n@185@01)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01)) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01)
                  $Ref.null))
              (=
                ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
              ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01)))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
            ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01)))))
    (or (not (Set_in n@185@01 nodes@2@01)) (Set_in n@185@01 nodes@2@01)))
  :pattern ((Set_in n@185@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01) n@185@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01)) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@185@01 $Ref)) (!
  (=>
    (and
      (Set_in n@185@01 nodes@2@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@185@01))
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01)))
    (or
      (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01))))
  :pattern ((Set_in n@185@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@185@01) n@185@01))
  :pattern ((Set_in n@185@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01) n@185@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01)) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@185@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01))))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.right.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked)
(declare-const n@186@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 118 | n@186@01 in nodes@2@01 | live]
; [else-branch: 118 | !(n@186@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 118 | n@186@01 in nodes@2@01]
(assert (Set_in n@186@01 nodes@2@01))
; [eval] old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@01)
      (=
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef29|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef30|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef31|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01) n@186@01))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite (= n@186@01 node@3@01) $Perm.Write $Perm.No)
    (ite
      (and (img@15@01 n@186@01) (Set_in (inv@14@01 n@186@01) nodes@2@01))
      (- $Perm.Write (pTaken@39@01 n@186@01))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 119 | Lookup(is_marked, sm@150@01, n@186@01) | live]
; [else-branch: 119 | !(Lookup(is_marked, sm@150@01, n@186@01)) | live]
(push) ; 9
; [then-branch: 119 | Lookup(is_marked, sm@150@01, n@186@01)]
(assert ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
(pop) ; 9
(push) ; 9
; [else-branch: 119 | !(Lookup(is_marked, sm@150@01, n@186@01))]
(assert (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
    :qid |qp.fvfValDef38|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef39|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01) n@186@01))
(push) ; 10
(assert (not (and (img@178@01 n@186@01) (Set_in (inv@177@01 n@186@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01) n@186@01))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
  ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01)))
(push) ; 8
; [then-branch: 120 | !(Lookup(is_marked, sm@150@01, n@186@01)) && Lookup(is_marked, sm@179@01, n@186@01) | live]
; [else-branch: 120 | !(!(Lookup(is_marked, sm@150@01, n@186@01)) && Lookup(is_marked, sm@179@01, n@186@01)) | live]
(push) ; 9
; [then-branch: 120 | !(Lookup(is_marked, sm@150@01, n@186@01)) && Lookup(is_marked, sm@179@01, n@186@01)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
  ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01)))
; [eval] n.right == null || n.right.is_marked
; [eval] n.right == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
    :qid |qp.fvfValDef36|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef37|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01) n@186@01))
(push) ; 10
(assert (not (and (img@174@01 n@186@01) (Set_in (inv@173@01 n@186@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 121 | Lookup(right, sm@175@01, n@186@01) == Null | live]
; [else-branch: 121 | Lookup(right, sm@175@01, n@186@01) != Null | live]
(push) ; 11
; [then-branch: 121 | Lookup(right, sm@175@01, n@186@01) == Null]
(assert (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01) $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 121 | Lookup(right, sm@175@01, n@186@01) != Null]
(assert (not (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
    :qid |qp.fvfValDef36|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef37|))))
(push) ; 12
(assert (not (and (img@174@01 n@186@01) (Set_in (inv@173@01 n@186@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
    :qid |qp.fvfValDef38|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef39|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01)) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01)))
(push) ; 12
(assert (not (and
  (img@178@01 ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01))
  (Set_in (inv@177@01 ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01)) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (not (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01)) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01)))))
(assert (or
  (not (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01) $Ref.null))
  (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01) $Ref.null)))
(pop) ; 9
(push) ; 9
; [else-branch: 120 | !(!(Lookup(is_marked, sm@150@01, n@186@01)) && Lookup(is_marked, sm@179@01, n@186@01))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
    ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
    ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
    ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01) n@186@01)
    (=>
      (not
        (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01) $Ref.null))
      (and
        (not
          (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01)) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01))))
    (or
      (not
        (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01) $Ref.null))
      (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01)))
  (and
    (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
    ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 118 | !(n@186@01 in nodes@2@01)]
(assert (not (Set_in n@186@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (=>
  (Set_in n@186@01 nodes@2@01)
  (and
    (Set_in n@186@01 nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01) n@186@01)
    (=>
      (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01) n@186@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01) n@186@01)
        (=>
          (not
            (=
              ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01)
              $Ref.null))
          (and
            (not
              (=
                ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01)
                $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01)) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01))))
        (or
          (not
            (=
              ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01)
              $Ref.null))
          (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
          ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01)))
      (and
        (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01))))))
; Joined path conditions
(assert (or (not (Set_in n@186@01 nodes@2@01)) (Set_in n@186@01 nodes@2@01)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@186@01 $Ref)) (!
  (and
    (=>
      (Set_in n@186@01 nodes@2@01)
      (and
        (Set_in n@186@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01) n@186@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01) n@186@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
          ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
        (=>
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
            ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
            ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01)
            ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01) n@186@01)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01)) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
              ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01)))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
            ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01)))))
    (or (not (Set_in n@186@01 nodes@2@01)) (Set_in n@186@01 nodes@2@01)))
  :pattern ((Set_in n@186@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01) n@186@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@186@01 $Ref)) (!
  (and
    (=>
      (Set_in n@186@01 nodes@2@01)
      (and
        (Set_in n@186@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01) n@186@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01) n@186@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
          ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
        (=>
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
            ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
            ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01)
            ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01) n@186@01)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01)) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
              ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01)))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
            ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01)))))
    (or (not (Set_in n@186@01 nodes@2@01)) (Set_in n@186@01 nodes@2@01)))
  :pattern ((Set_in n@186@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01) n@186@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01)) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@186@01 $Ref)) (!
  (=>
    (and
      (Set_in n@186@01 nodes@2@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@186@01))
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01)))
    (or
      (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01))))
  :pattern ((Set_in n@186@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@186@01) n@186@01))
  :pattern ((Set_in n@186@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01) n@186@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01)) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@186@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] (node in nodes)
; [eval] !((null in nodes))
; [eval] (null in nodes)
(declare-const n$4@187@01 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$4 in nodes)
(assert (Set_in n$4@187@01 nodes@2@01))
(pop) ; 5
(declare-fun inv@188@01 ($Ref) $Ref)
(declare-fun img@189@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$41@187@01 $Ref) (n$42@187@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$41@187@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$41@187@01) n$41@187@01))
      (and
        (Set_in n$42@187@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$42@187@01) n$42@187@01))
      (= n$41@187@01 n$42@187@01))
    (= n$41@187@01 n$42@187@01))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@187@01 $Ref)) (!
  (=>
    (Set_in n$4@187@01 nodes@2@01)
    (and (= (inv@188@01 n$4@187@01) n$4@187@01) (img@189@01 n$4@187@01)))
  :pattern ((Set_in n$4@187@01 nodes@2@01))
  :pattern ((inv@188@01 n$4@187@01))
  :pattern ((img@189@01 n$4@187@01))
  :qid |left-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) nodes@2@01))
    (= (inv@188@01 r) r))
  :pattern ((inv@188@01 r))
  :qid |left-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@188@01 r) nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) r) r))
  :pattern ((inv@188@01 r))
  :qid |quant-u-129|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@190@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@188@01 r) nodes@2@01) (img@189@01 r) (= r (inv@188@01 r)))
    ($Perm.min
      (ite
        (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      (pTaken@190@01 r))
    $Perm.No)
  
  :qid |quant-u-131|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@188@01 r) nodes@2@01) (img@189@01 r) (= r (inv@188@01 r)))
    (= (- $Perm.Write (pTaken@190@01 r)) $Perm.No))
  
  :qid |quant-u-132|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$5@191@01 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$5 in nodes)
(assert (Set_in n$5@191@01 nodes@2@01))
(pop) ; 5
(declare-fun inv@192@01 ($Ref) $Ref)
(declare-fun img@193@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$51@191@01 $Ref) (n$52@191@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$51@191@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$51@191@01) n$51@191@01))
      (and
        (Set_in n$52@191@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$52@191@01) n$52@191@01))
      (= n$51@191@01 n$52@191@01))
    (= n$51@191@01 n$52@191@01))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$5@191@01 $Ref)) (!
  (=>
    (Set_in n$5@191@01 nodes@2@01)
    (and (= (inv@192@01 n$5@191@01) n$5@191@01) (img@193@01 n$5@191@01)))
  :pattern ((Set_in n$5@191@01 nodes@2@01))
  :pattern ((inv@192@01 n$5@191@01))
  :pattern ((img@193@01 n$5@191@01))
  :qid |right-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@193@01 r) (Set_in (inv@192@01 r) nodes@2@01))
    (= (inv@192@01 r) r))
  :pattern ((inv@192@01 r))
  :qid |right-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@192@01 r) nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) r) r))
  :pattern ((inv@192@01 r))
  :qid |quant-u-134|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@194@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@192@01 r) nodes@2@01) (img@193@01 r) (= r (inv@192@01 r)))
    ($Perm.min
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      (pTaken@194@01 r))
    $Perm.No)
  
  :qid |quant-u-136|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@192@01 r) nodes@2@01) (img@193@01 r) (= r (inv@192@01 r)))
    (= (- $Perm.Write (pTaken@194@01 r)) $Perm.No))
  
  :qid |quant-u-137|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$6@195@01 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$6 in nodes)
(assert (Set_in n$6@195@01 nodes@2@01))
(pop) ; 5
(declare-fun inv@196@01 ($Ref) $Ref)
(declare-fun img@197@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$61@195@01 $Ref) (n$62@195@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$61@195@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n$61@195@01) n$61@195@01))
      (and
        (Set_in n$62@195@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n$62@195@01) n$62@195@01))
      (= n$61@195@01 n$62@195@01))
    (= n$61@195@01 n$62@195@01))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$6@195@01 $Ref)) (!
  (=>
    (Set_in n$6@195@01 nodes@2@01)
    (and (= (inv@196@01 n$6@195@01) n$6@195@01) (img@197@01 n$6@195@01)))
  :pattern ((Set_in n$6@195@01 nodes@2@01))
  :pattern ((inv@196@01 n$6@195@01))
  :pattern ((img@197@01 n$6@195@01))
  :qid |is_marked-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@197@01 r) (Set_in (inv@196@01 r) nodes@2@01))
    (= (inv@196@01 r) r))
  :pattern ((inv@196@01 r))
  :qid |is_marked-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@196@01 r) nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r) r))
  :pattern ((inv@196@01 r))
  :qid |quant-u-139|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@198@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@196@01 r) nodes@2@01) (img@197@01 r) (= r (inv@196@01 r)))
    ($Perm.min
      (ite
        (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      (pTaken@198@01 r))
    $Perm.No)
  
  :qid |quant-u-141|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@196@01 r) nodes@2@01) (img@197@01 r) (= r (inv@196@01 r)))
    (= (- $Perm.Write (pTaken@198@01 r)) $Perm.No))
  
  :qid |quant-u-142|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall n$7: Ref :: { (n$7.left in nodes) } { (n$7 in nodes), n$7.left } (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes))
(declare-const n$7@199@01 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes)
; [eval] (n$7 in nodes) && n$7.left != null
; [eval] (n$7 in nodes)
(push) ; 6
; [then-branch: 122 | !(n$7@199@01 in nodes@2@01) | live]
; [else-branch: 122 | n$7@199@01 in nodes@2@01 | live]
(push) ; 7
; [then-branch: 122 | !(n$7@199@01 in nodes@2@01)]
(assert (not (Set_in n$7@199@01 nodes@2@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 122 | n$7@199@01 in nodes@2@01]
(assert (Set_in n$7@199@01 nodes@2@01))
; [eval] n$7.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
    :qid |qp.fvfValDef34|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef35|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) n$7@199@01))
(push) ; 8
(assert (not (and (img@170@01 n$7@199@01) (Set_in (inv@169@01 n$7@199@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (=>
  (Set_in n$7@199@01 nodes@2@01)
  (and
    (Set_in n$7@199@01 nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) n$7@199@01))))
(assert (or (Set_in n$7@199@01 nodes@2@01) (not (Set_in n$7@199@01 nodes@2@01))))
(push) ; 6
; [then-branch: 123 | n$7@199@01 in nodes@2@01 && Lookup(left, sm@171@01, n$7@199@01) != Null | live]
; [else-branch: 123 | !(n$7@199@01 in nodes@2@01 && Lookup(left, sm@171@01, n$7@199@01) != Null) | live]
(push) ; 7
; [then-branch: 123 | n$7@199@01 in nodes@2@01 && Lookup(left, sm@171@01, n$7@199@01) != Null]
(assert (and
  (Set_in n$7@199@01 nodes@2@01)
  (not (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) $Ref.null))))
; [eval] (n$7.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
    :qid |qp.fvfValDef34|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef35|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) n$7@199@01))
(push) ; 8
(assert (not (and (img@170@01 n$7@199@01) (Set_in (inv@169@01 n$7@199@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 123 | !(n$7@199@01 in nodes@2@01 && Lookup(left, sm@171@01, n$7@199@01) != Null)]
(assert (not
  (and
    (Set_in n$7@199@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (=>
  (and
    (Set_in n$7@199@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) $Ref.null)))
  (and
    (Set_in n$7@199@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) n$7@199@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$7@199@01 nodes@2@01)
      (not
        (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) $Ref.null))))
  (and
    (Set_in n$7@199@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$7@199@01 $Ref)) (!
  (and
    (=>
      (Set_in n$7@199@01 nodes@2@01)
      (and
        (Set_in n$7@199@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) n$7@199@01)))
    (or (Set_in n$7@199@01 nodes@2@01) (not (Set_in n$7@199@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$7@199@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) $Ref.null)))
      (and
        (Set_in n$7@199@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) n$7@199@01)))
    (or
      (not
        (and
          (Set_in n$7@199@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01)
              $Ref.null))))
      (and
        (Set_in n$7@199@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) nodes@2@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@199@01 $Ref)) (!
  (and
    (=>
      (Set_in n$7@199@01 nodes@2@01)
      (and
        (Set_in n$7@199@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) n$7@199@01)))
    (or (Set_in n$7@199@01 nodes@2@01) (not (Set_in n$7@199@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$7@199@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) $Ref.null)))
      (and
        (Set_in n$7@199@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) n$7@199@01)))
    (or
      (not
        (and
          (Set_in n$7@199@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01)
              $Ref.null))))
      (and
        (Set_in n$7@199@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) $Ref.null)))))
  :pattern ((Set_in n$7@199@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) n$7@199@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(push) ; 5
(assert (not (forall ((n$7@199@01 $Ref)) (!
  (=>
    (and
      (Set_in n$7@199@01 nodes@2@01)
      (not
        (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) nodes@2@01))
  :pattern ((Set_in n$7@199@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) n$7@199@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$7@199@01 $Ref)) (!
  (=>
    (and
      (Set_in n$7@199@01 nodes@2@01)
      (not
        (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) nodes@2@01))
  :pattern ((Set_in n$7@199@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n$7@199@01) n$7@199@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
; [eval] (forall n$8: Ref :: { (n$8.right in nodes) } { (n$8 in nodes), n$8.right } (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes))
(declare-const n$8@200@01 $Ref)
(push) ; 5
; [eval] (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes)
; [eval] (n$8 in nodes) && n$8.right != null
; [eval] (n$8 in nodes)
(push) ; 6
; [then-branch: 124 | !(n$8@200@01 in nodes@2@01) | live]
; [else-branch: 124 | n$8@200@01 in nodes@2@01 | live]
(push) ; 7
; [then-branch: 124 | !(n$8@200@01 in nodes@2@01)]
(assert (not (Set_in n$8@200@01 nodes@2@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 124 | n$8@200@01 in nodes@2@01]
(assert (Set_in n$8@200@01 nodes@2@01))
; [eval] n$8.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
    :qid |qp.fvfValDef36|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef37|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01) n$8@200@01))
(push) ; 8
(assert (not (and (img@174@01 n$8@200@01) (Set_in (inv@173@01 n$8@200@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (=>
  (Set_in n$8@200@01 nodes@2@01)
  (and
    (Set_in n$8@200@01 nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01) n$8@200@01))))
(assert (or (Set_in n$8@200@01 nodes@2@01) (not (Set_in n$8@200@01 nodes@2@01))))
(push) ; 6
; [then-branch: 125 | n$8@200@01 in nodes@2@01 && Lookup(right, sm@175@01, n$8@200@01) != Null | live]
; [else-branch: 125 | !(n$8@200@01 in nodes@2@01 && Lookup(right, sm@175@01, n$8@200@01) != Null) | live]
(push) ; 7
; [then-branch: 125 | n$8@200@01 in nodes@2@01 && Lookup(right, sm@175@01, n$8@200@01) != Null]
(assert (and
  (Set_in n$8@200@01 nodes@2@01)
  (not (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01) $Ref.null))))
; [eval] (n$8.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
    :qid |qp.fvfValDef36|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef37|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01) n$8@200@01))
(push) ; 8
(assert (not (and (img@174@01 n$8@200@01) (Set_in (inv@173@01 n$8@200@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 125 | !(n$8@200@01 in nodes@2@01 && Lookup(right, sm@175@01, n$8@200@01) != Null)]
(assert (not
  (and
    (Set_in n$8@200@01 nodes@2@01)
    (not
      (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (=>
  (and
    (Set_in n$8@200@01 nodes@2@01)
    (not
      (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01) $Ref.null)))
  (and
    (Set_in n$8@200@01 nodes@2@01)
    (not
      (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01) n$8@200@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$8@200@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01) $Ref.null))))
  (and
    (Set_in n$8@200@01 nodes@2@01)
    (not
      (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$8@200@01 $Ref)) (!
  (and
    (=>
      (Set_in n$8@200@01 nodes@2@01)
      (and
        (Set_in n$8@200@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01) n$8@200@01)))
    (or (Set_in n$8@200@01 nodes@2@01) (not (Set_in n$8@200@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$8@200@01 nodes@2@01)
        (not
          (=
            ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01)
            $Ref.null)))
      (and
        (Set_in n$8@200@01 nodes@2@01)
        (not
          (=
            ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01)
            $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01) n$8@200@01)))
    (or
      (not
        (and
          (Set_in n$8@200@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01)
              $Ref.null))))
      (and
        (Set_in n$8@200@01 nodes@2@01)
        (not
          (=
            ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01)
            $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01) nodes@2@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@200@01 $Ref)) (!
  (and
    (=>
      (Set_in n$8@200@01 nodes@2@01)
      (and
        (Set_in n$8@200@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01) n$8@200@01)))
    (or (Set_in n$8@200@01 nodes@2@01) (not (Set_in n$8@200@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$8@200@01 nodes@2@01)
        (not
          (=
            ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01)
            $Ref.null)))
      (and
        (Set_in n$8@200@01 nodes@2@01)
        (not
          (=
            ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01)
            $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01) n$8@200@01)))
    (or
      (not
        (and
          (Set_in n$8@200@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01)
              $Ref.null))))
      (and
        (Set_in n$8@200@01 nodes@2@01)
        (not
          (=
            ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01)
            $Ref.null)))))
  :pattern ((Set_in n$8@200@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01) n$8@200@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(push) ; 5
(assert (not (forall ((n$8@200@01 $Ref)) (!
  (=>
    (and
      (Set_in n$8@200@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01) nodes@2@01))
  :pattern ((Set_in n$8@200@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01) n$8@200@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$8@200@01 $Ref)) (!
  (=>
    (and
      (Set_in n$8@200@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01) nodes@2@01))
  :pattern ((Set_in n$8@200@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n$8@200@01) n$8@200@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } (n in nodes) ==> old(n.is_marked) ==> n.is_marked)
(declare-const n@201@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(n.is_marked) ==> n.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 126 | n@201@01 in nodes@2@01 | live]
; [else-branch: 126 | !(n@201@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 126 | n@201@01 in nodes@2@01]
(assert (Set_in n@201@01 nodes@2@01))
; [eval] old(n.is_marked) ==> n.is_marked
; [eval] old(n.is_marked)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@201@01) n@201@01))
(push) ; 8
(assert (not (and (img@15@01 n@201@01) (Set_in (inv@14@01 n@201@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 127 | Lookup(is_marked, sm@16@01, n@201@01) | live]
; [else-branch: 127 | !(Lookup(is_marked, sm@16@01, n@201@01)) | live]
(push) ; 9
; [then-branch: 127 | Lookup(is_marked, sm@16@01, n@201@01)]
(assert ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@201@01))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
    :qid |qp.fvfValDef38|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef39|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@201@01) n@201@01))
(push) ; 10
(assert (not (and (img@178@01 n@201@01) (Set_in (inv@177@01 n@201@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(push) ; 9
; [else-branch: 127 | !(Lookup(is_marked, sm@16@01, n@201@01))]
(assert (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@201@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@201@01)
  (and
    ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@201@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@201@01) n@201@01))))
; Joined path conditions
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@201@01))
  ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@201@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 126 | !(n@201@01 in nodes@2@01)]
(assert (not (Set_in n@201@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (Set_in n@201@01 nodes@2@01)
  (and
    (Set_in n@201@01 nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@201@01) n@201@01)
    (=>
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@201@01)
      (and
        ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@201@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@201@01) n@201@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@201@01))
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@201@01)))))
; Joined path conditions
(assert (or (not (Set_in n@201@01 nodes@2@01)) (Set_in n@201@01 nodes@2@01)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@201@01 $Ref)) (!
  (and
    (=>
      (Set_in n@201@01 nodes@2@01)
      (and
        (Set_in n@201@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@201@01) n@201@01)
        (=>
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@201@01)
          (and
            ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@201@01)
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@201@01) n@201@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@201@01))
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@201@01))))
    (or (not (Set_in n@201@01 nodes@2@01)) (Set_in n@201@01 nodes@2@01)))
  :pattern ((Set_in n@201@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@201@01) n@201@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102-aux|)))
(push) ; 5
(assert (not (forall ((n@201@01 $Ref)) (!
  (=>
    (and
      (Set_in n@201@01 nodes@2@01)
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@201@01))
    ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@201@01))
  :pattern ((Set_in n@201@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@201@01) n@201@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n@201@01 $Ref)) (!
  (=>
    (and
      (Set_in n@201@01 nodes@2@01)
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@201@01))
    ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@201@01))
  :pattern ((Set_in n@201@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@201@01) n@201@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
    :qid |qp.fvfValDef38|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef39|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) node@3@01) node@3@01))
(push) ; 5
(assert (not (and (img@178@01 node@3@01) (Set_in (inv@177@01 node@3@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) node@3@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) node@3@01))
; [eval] (forall n: Ref :: { (n in nodes), n.left } (n in nodes) ==> n.left == old(n.left))
(declare-const n@202@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> n.left == old(n.left)
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 128 | n@202@01 in nodes@2@01 | live]
; [else-branch: 128 | !(n@202@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 128 | n@202@01 in nodes@2@01]
(assert (Set_in n@202@01 nodes@2@01))
; [eval] n.left == old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
    :qid |qp.fvfValDef34|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef35|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@202@01) n@202@01))
(push) ; 8
(assert (not (and (img@170@01 n@202@01) (Set_in (inv@169@01 n@202@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [eval] old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@202@01) n@202@01))
(push) ; 8
(assert (not (and (img@7@01 n@202@01) (Set_in (inv@6@01 n@202@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 128 | !(n@202@01 in nodes@2@01)]
(assert (not (Set_in n@202@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (Set_in n@202@01 nodes@2@01)
  (and
    (Set_in n@202@01 nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@202@01) n@202@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@202@01) n@202@01))))
; Joined path conditions
(assert (or (not (Set_in n@202@01 nodes@2@01)) (Set_in n@202@01 nodes@2@01)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@202@01 $Ref)) (!
  (and
    (=>
      (Set_in n@202@01 nodes@2@01)
      (and
        (Set_in n@202@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@202@01) n@202@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@202@01) n@202@01)))
    (or (not (Set_in n@202@01 nodes@2@01)) (Set_in n@202@01 nodes@2@01)))
  :pattern ((Set_in n@202@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@202@01) n@202@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86-aux|)))
(push) ; 5
(assert (not (forall ((n@202@01 $Ref)) (!
  (=>
    (Set_in n@202@01 nodes@2@01)
    (=
      ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@202@01)
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@202@01)))
  :pattern ((Set_in n@202@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@202@01) n@202@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n@202@01 $Ref)) (!
  (=>
    (Set_in n@202@01 nodes@2@01)
    (=
      ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@202@01)
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@202@01)))
  :pattern ((Set_in n@202@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@202@01) n@202@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86|)))
; [eval] (forall n: Ref :: { (n in nodes), n.right } (n in nodes) ==> n.right == old(n.right))
(declare-const n@203@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> n.right == old(n.right)
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 129 | n@203@01 in nodes@2@01 | live]
; [else-branch: 129 | !(n@203@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 129 | n@203@01 in nodes@2@01]
(assert (Set_in n@203@01 nodes@2@01))
; [eval] n.right == old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
    :qid |qp.fvfValDef36|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef37|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@203@01) n@203@01))
(push) ; 8
(assert (not (and (img@174@01 n@203@01) (Set_in (inv@173@01 n@203@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [eval] old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@203@01) n@203@01))
(push) ; 8
(assert (not (and (img@11@01 n@203@01) (Set_in (inv@10@01 n@203@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 129 | !(n@203@01 in nodes@2@01)]
(assert (not (Set_in n@203@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (Set_in n@203@01 nodes@2@01)
  (and
    (Set_in n@203@01 nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@203@01) n@203@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@203@01) n@203@01))))
; Joined path conditions
(assert (or (not (Set_in n@203@01 nodes@2@01)) (Set_in n@203@01 nodes@2@01)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@203@01 $Ref)) (!
  (and
    (=>
      (Set_in n@203@01 nodes@2@01)
      (and
        (Set_in n@203@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@203@01) n@203@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@203@01) n@203@01)))
    (or (not (Set_in n@203@01 nodes@2@01)) (Set_in n@203@01 nodes@2@01)))
  :pattern ((Set_in n@203@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@203@01) n@203@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89-aux|)))
(push) ; 5
(assert (not (forall ((n@203@01 $Ref)) (!
  (=>
    (Set_in n@203@01 nodes@2@01)
    (=
      ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@203@01)
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@203@01)))
  :pattern ((Set_in n@203@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@203@01) n@203@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n@203@01 $Ref)) (!
  (=>
    (Set_in n@203@01 nodes@2@01)
    (=
      ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@203@01)
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@203@01)))
  :pattern ((Set_in n@203@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@203@01) n@203@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89|)))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.left.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked)
(declare-const n@204@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 130 | n@204@01 in nodes@2@01 | live]
; [else-branch: 130 | !(n@204@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 130 | n@204@01 in nodes@2@01]
(assert (Set_in n@204@01 nodes@2@01))
; [eval] old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01) n@204@01))
(push) ; 8
(assert (not (and (img@15@01 n@204@01) (Set_in (inv@14@01 n@204@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 131 | Lookup(is_marked, sm@16@01, n@204@01) | live]
; [else-branch: 131 | !(Lookup(is_marked, sm@16@01, n@204@01)) | live]
(push) ; 9
; [then-branch: 131 | Lookup(is_marked, sm@16@01, n@204@01)]
(assert ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
(pop) ; 9
(push) ; 9
; [else-branch: 131 | !(Lookup(is_marked, sm@16@01, n@204@01))]
(assert (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
    :qid |qp.fvfValDef38|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef39|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01) n@204@01))
(push) ; 10
(assert (not (and (img@178@01 n@204@01) (Set_in (inv@177@01 n@204@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01) n@204@01))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
  ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01)))
(push) ; 8
; [then-branch: 132 | !(Lookup(is_marked, sm@16@01, n@204@01)) && Lookup(is_marked, sm@179@01, n@204@01) | live]
; [else-branch: 132 | !(!(Lookup(is_marked, sm@16@01, n@204@01)) && Lookup(is_marked, sm@179@01, n@204@01)) | live]
(push) ; 9
; [then-branch: 132 | !(Lookup(is_marked, sm@16@01, n@204@01)) && Lookup(is_marked, sm@179@01, n@204@01)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
  ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01)))
; [eval] n.left == null || n.left.is_marked
; [eval] n.left == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
    :qid |qp.fvfValDef34|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef35|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01) n@204@01))
(push) ; 10
(assert (not (and (img@170@01 n@204@01) (Set_in (inv@169@01 n@204@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 133 | Lookup(left, sm@171@01, n@204@01) == Null | live]
; [else-branch: 133 | Lookup(left, sm@171@01, n@204@01) != Null | live]
(push) ; 11
; [then-branch: 133 | Lookup(left, sm@171@01, n@204@01) == Null]
(assert (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01) $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 133 | Lookup(left, sm@171@01, n@204@01) != Null]
(assert (not (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
    :qid |qp.fvfValDef34|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef35|))))
(push) ; 12
(assert (not (and (img@170@01 n@204@01) (Set_in (inv@169@01 n@204@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
    :qid |qp.fvfValDef38|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef39|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01)) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01)))
(push) ; 12
(assert (not (and
  (img@178@01 ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01))
  (Set_in (inv@177@01 ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01)) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (not (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01)) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01)))))
(assert (or
  (not (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01) $Ref.null))
  (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01) $Ref.null)))
(pop) ; 9
(push) ; 9
; [else-branch: 132 | !(!(Lookup(is_marked, sm@16@01, n@204@01)) && Lookup(is_marked, sm@179@01, n@204@01))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
    ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
    ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
    ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01) n@204@01)
    (=>
      (not (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01) $Ref.null))
      (and
        (not
          (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01)) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01))))
    (or
      (not (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01) $Ref.null))
      (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01)))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
    ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 130 | !(n@204@01 in nodes@2@01)]
(assert (not (Set_in n@204@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
(assert (=>
  (Set_in n@204@01 nodes@2@01)
  (and
    (Set_in n@204@01 nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01) n@204@01)
    (=>
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01) n@204@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01) n@204@01)
        (=>
          (not
            (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01) $Ref.null))
          (and
            (not
              (=
                ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01)
                $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01)) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01))))
        (or
          (not
            (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01) $Ref.null))
          (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
          ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01)))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01))))))
; Joined path conditions
(assert (or (not (Set_in n@204@01 nodes@2@01)) (Set_in n@204@01 nodes@2@01)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@170@01 r) (Set_in (inv@169@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@171@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@167@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@171@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef35|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@204@01 $Ref)) (!
  (and
    (=>
      (Set_in n@204@01 nodes@2@01)
      (and
        (Set_in n@204@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01) n@204@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01) n@204@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
            ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
            ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01)
            ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01) n@204@01)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01)) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01)
                  $Ref.null))
              (=
                ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
              ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
            ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01)))))
    (or (not (Set_in n@204@01 nodes@2@01)) (Set_in n@204@01 nodes@2@01)))
  :pattern ((Set_in n@204@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01) n@204@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@204@01 $Ref)) (!
  (and
    (=>
      (Set_in n@204@01 nodes@2@01)
      (and
        (Set_in n@204@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01) n@204@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01) n@204@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
            ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
            ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01)
            ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01) n@204@01)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01)) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01)
                  $Ref.null))
              (=
                ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
              ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
            ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01)))))
    (or (not (Set_in n@204@01 nodes@2@01)) (Set_in n@204@01 nodes@2@01)))
  :pattern ((Set_in n@204@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01) n@204@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01)) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(push) ; 5
(assert (not (forall ((n@204@01 $Ref)) (!
  (=>
    (and
      (Set_in n@204@01 nodes@2@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01)))
    (or
      (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01))))
  :pattern ((Set_in n@204@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01) n@204@01))
  :pattern ((Set_in n@204@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01) n@204@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01)) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n@204@01 $Ref)) (!
  (=>
    (and
      (Set_in n@204@01 nodes@2@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@204@01))
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01)))
    (or
      (= ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01))))
  :pattern ((Set_in n@204@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@204@01) n@204@01))
  :pattern ((Set_in n@204@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01) n@204@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01)) ($FVF.lookup_left (as sm@171@01  $FVF<left>) n@204@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|)))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.right.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked)
(declare-const n@205@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 134 | n@205@01 in nodes@2@01 | live]
; [else-branch: 134 | !(n@205@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 134 | n@205@01 in nodes@2@01]
(assert (Set_in n@205@01 nodes@2@01))
; [eval] old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01) n@205@01))
(push) ; 8
(assert (not (and (img@15@01 n@205@01) (Set_in (inv@14@01 n@205@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 135 | Lookup(is_marked, sm@16@01, n@205@01) | live]
; [else-branch: 135 | !(Lookup(is_marked, sm@16@01, n@205@01)) | live]
(push) ; 9
; [then-branch: 135 | Lookup(is_marked, sm@16@01, n@205@01)]
(assert ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
(pop) ; 9
(push) ; 9
; [else-branch: 135 | !(Lookup(is_marked, sm@16@01, n@205@01))]
(assert (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
    :qid |qp.fvfValDef38|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef39|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01) n@205@01))
(push) ; 10
(assert (not (and (img@178@01 n@205@01) (Set_in (inv@177@01 n@205@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01) n@205@01))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
  ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01)))
(push) ; 8
; [then-branch: 136 | !(Lookup(is_marked, sm@16@01, n@205@01)) && Lookup(is_marked, sm@179@01, n@205@01) | live]
; [else-branch: 136 | !(!(Lookup(is_marked, sm@16@01, n@205@01)) && Lookup(is_marked, sm@179@01, n@205@01)) | live]
(push) ; 9
; [then-branch: 136 | !(Lookup(is_marked, sm@16@01, n@205@01)) && Lookup(is_marked, sm@179@01, n@205@01)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
  ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01)))
; [eval] n.right == null || n.right.is_marked
; [eval] n.right == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
    :qid |qp.fvfValDef36|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef37|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01) n@205@01))
(push) ; 10
(assert (not (and (img@174@01 n@205@01) (Set_in (inv@173@01 n@205@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 137 | Lookup(right, sm@175@01, n@205@01) == Null | live]
; [else-branch: 137 | Lookup(right, sm@175@01, n@205@01) != Null | live]
(push) ; 11
; [then-branch: 137 | Lookup(right, sm@175@01, n@205@01) == Null]
(assert (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01) $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 137 | Lookup(right, sm@175@01, n@205@01) != Null]
(assert (not (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
    :qid |qp.fvfValDef36|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef37|))))
(push) ; 12
(assert (not (and (img@174@01 n@205@01) (Set_in (inv@173@01 n@205@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
    :qid |qp.fvfValDef38|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef39|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)))
(push) ; 12
(assert (not (and
  (img@178@01 ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01))
  (Set_in (inv@177@01 ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (not (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)))))
(assert (or
  (not (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01) $Ref.null))
  (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01) $Ref.null)))
(pop) ; 9
(push) ; 9
; [else-branch: 136 | !(!(Lookup(is_marked, sm@16@01, n@205@01)) && Lookup(is_marked, sm@179@01, n@205@01))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
    ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
    ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
    ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01) n@205@01)
    (=>
      (not
        (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01) $Ref.null))
      (and
        (not
          (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01))))
    (or
      (not
        (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01) $Ref.null))
      (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01)))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
    ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 134 | !(n@205@01 in nodes@2@01)]
(assert (not (Set_in n@205@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (=>
  (Set_in n@205@01 nodes@2@01)
  (and
    (Set_in n@205@01 nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01) n@205@01)
    (=>
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01) n@205@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01) n@205@01)
        (=>
          (not
            (=
              ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)
              $Ref.null))
          (and
            (not
              (=
                ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)
                $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01))))
        (or
          (not
            (=
              ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)
              $Ref.null))
          (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
          ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01)))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01))))))
; Joined path conditions
(assert (or (not (Set_in n@205@01 nodes@2@01)) (Set_in n@205@01 nodes@2@01)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@178@01 r) (Set_in (inv@177@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@167@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@174@01 r) (Set_in (inv@173@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@175@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@167@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@175@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef37|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@205@01 $Ref)) (!
  (and
    (=>
      (Set_in n@205@01 nodes@2@01)
      (and
        (Set_in n@205@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01) n@205@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01) n@205@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
            ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
            ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01)
            ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01) n@205@01)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
              ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
            ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01)))))
    (or (not (Set_in n@205@01 nodes@2@01)) (Set_in n@205@01 nodes@2@01)))
  :pattern ((Set_in n@205@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01) n@205@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@205@01 $Ref)) (!
  (and
    (=>
      (Set_in n@205@01 nodes@2@01)
      (and
        (Set_in n@205@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01) n@205@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01) n@205@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
            ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
            ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01)
            ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01) n@205@01)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
              ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
            ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01)))))
    (or (not (Set_in n@205@01 nodes@2@01)) (Set_in n@205@01 nodes@2@01)))
  :pattern ((Set_in n@205@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01) n@205@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(push) ; 5
(assert (not (forall ((n@205@01 $Ref)) (!
  (=>
    (and
      (Set_in n@205@01 nodes@2@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01)))
    (or
      (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01))))
  :pattern ((Set_in n@205@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01) n@205@01))
  :pattern ((Set_in n@205@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01) n@205@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n@205@01 $Ref)) (!
  (=>
    (and
      (Set_in n@205@01 nodes@2@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@205@01))
        ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01)))
    (or
      (= ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01))))
  :pattern ((Set_in n@205@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) n@205@01) n@205@01))
  :pattern ((Set_in n@205@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01) n@205@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@179@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)) ($FVF.lookup_right (as sm@175@01  $FVF<right>) n@205@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|)))
(pop) ; 4
(push) ; 4
; [else-branch: 101 | !(Lookup(right, sm@12@01, node@3@01) != Null && !(Lookup(is_marked, sm@150@01, Lookup(right, sm@12@01, node@3@01))))]
(assert (not
  (and
    (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01) $Ref.null))
    (not
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01))))))
(pop) ; 4
; [eval] !(node.right != null && !node.right.is_marked)
; [eval] node.right != null && !node.right.is_marked
; [eval] node.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(push) ; 4
(assert (not (and (img@11@01 node@3@01) (Set_in (inv@10@01 node@3@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(push) ; 4
; [then-branch: 138 | Lookup(right, sm@12@01, node@3@01) == Null | live]
; [else-branch: 138 | Lookup(right, sm@12@01, node@3@01) != Null | live]
(push) ; 5
; [then-branch: 138 | Lookup(right, sm@12@01, node@3@01) == Null]
(assert (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01) $Ref.null))
(pop) ; 5
(push) ; 5
; [else-branch: 138 | Lookup(right, sm@12@01, node@3@01) != Null]
(assert (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01) $Ref.null)))
; [eval] !node.right.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(push) ; 6
(assert (not (and (img@11@01 node@3@01) (Set_in (inv@10@01 node@3@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@01)
      (=
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef29|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef30|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef31|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01)) ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01)))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01) node@3@01)
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@15@01 ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01))
        (Set_in (inv@14@01 ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01)) nodes@2@01))
      (-
        $Perm.Write
        (pTaken@39@01 ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01) $Ref.null))
  (not
    ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01))))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01) $Ref.null))
    (not
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01)))))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 139 | !(Lookup(right, sm@12@01, node@3@01) != Null && !(Lookup(is_marked, sm@150@01, Lookup(right, sm@12@01, node@3@01)))) | live]
; [else-branch: 139 | Lookup(right, sm@12@01, node@3@01) != Null && !(Lookup(is_marked, sm@150@01, Lookup(right, sm@12@01, node@3@01))) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 139 | !(Lookup(right, sm@12@01, node@3@01) != Null && !(Lookup(is_marked, sm@150@01, Lookup(right, sm@12@01, node@3@01))))]
(assert (not
  (and
    (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01) $Ref.null))
    (not
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01))))))
; [eval] (node in nodes)
; [eval] !((null in nodes))
; [eval] (null in nodes)
(declare-const n$4@206@01 $Ref)
(push) ; 5
; [eval] (n$4 in nodes)
(assert (Set_in n$4@206@01 nodes@2@01))
(pop) ; 5
(declare-fun inv@207@01 ($Ref) $Ref)
(declare-fun img@208@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$41@206@01 $Ref) (n$42@206@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$41@206@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$41@206@01) n$41@206@01))
      (and
        (Set_in n$42@206@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$42@206@01) n$42@206@01))
      (= n$41@206@01 n$42@206@01))
    (= n$41@206@01 n$42@206@01))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@206@01 $Ref)) (!
  (=>
    (Set_in n$4@206@01 nodes@2@01)
    (and (= (inv@207@01 n$4@206@01) n$4@206@01) (img@208@01 n$4@206@01)))
  :pattern ((Set_in n$4@206@01 nodes@2@01))
  :pattern ((inv@207@01 n$4@206@01))
  :pattern ((img@208@01 n$4@206@01))
  :qid |left-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@208@01 r) (Set_in (inv@207@01 r) nodes@2@01))
    (= (inv@207@01 r) r))
  :pattern ((inv@207@01 r))
  :qid |left-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@207@01 r) nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) r) r))
  :pattern ((inv@207@01 r))
  :qid |quant-u-144|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@209@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@207@01 r) nodes@2@01) (img@208@01 r) (= r (inv@207@01 r)))
    ($Perm.min
      (ite
        (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      (pTaken@209@01 r))
    $Perm.No)
  
  :qid |quant-u-146|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@207@01 r) nodes@2@01) (img@208@01 r) (= r (inv@207@01 r)))
    (= (- $Perm.Write (pTaken@209@01 r)) $Perm.No))
  
  :qid |quant-u-147|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$5@210@01 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$5 in nodes)
(assert (Set_in n$5@210@01 nodes@2@01))
(pop) ; 5
(declare-fun inv@211@01 ($Ref) $Ref)
(declare-fun img@212@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$51@210@01 $Ref) (n$52@210@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$51@210@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$51@210@01) n$51@210@01))
      (and
        (Set_in n$52@210@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$52@210@01) n$52@210@01))
      (= n$51@210@01 n$52@210@01))
    (= n$51@210@01 n$52@210@01))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$5@210@01 $Ref)) (!
  (=>
    (Set_in n$5@210@01 nodes@2@01)
    (and (= (inv@211@01 n$5@210@01) n$5@210@01) (img@212@01 n$5@210@01)))
  :pattern ((Set_in n$5@210@01 nodes@2@01))
  :pattern ((inv@211@01 n$5@210@01))
  :pattern ((img@212@01 n$5@210@01))
  :qid |right-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@212@01 r) (Set_in (inv@211@01 r) nodes@2@01))
    (= (inv@211@01 r) r))
  :pattern ((inv@211@01 r))
  :qid |right-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@211@01 r) nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) r) r))
  :pattern ((inv@211@01 r))
  :qid |quant-u-149|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@213@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@211@01 r) nodes@2@01) (img@212@01 r) (= r (inv@211@01 r)))
    ($Perm.min
      (ite
        (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
        $Perm.Write
        $Perm.No)
      (pTaken@213@01 r))
    $Perm.No)
  
  :qid |quant-u-151|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@211@01 r) nodes@2@01) (img@212@01 r) (= r (inv@211@01 r)))
    (= (- $Perm.Write (pTaken@213@01 r)) $Perm.No))
  
  :qid |quant-u-152|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$6@214@01 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$6 in nodes)
(assert (Set_in n$6@214@01 nodes@2@01))
(pop) ; 5
(declare-fun inv@215@01 ($Ref) $Ref)
(declare-fun img@216@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n$61@214@01 $Ref) (n$62@214@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$61@214@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n$61@214@01) n$61@214@01))
      (and
        (Set_in n$62@214@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n$62@214@01) n$62@214@01))
      (= n$61@214@01 n$62@214@01))
    (= n$61@214@01 n$62@214@01))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$6@214@01 $Ref)) (!
  (=>
    (Set_in n$6@214@01 nodes@2@01)
    (and (= (inv@215@01 n$6@214@01) n$6@214@01) (img@216@01 n$6@214@01)))
  :pattern ((Set_in n$6@214@01 nodes@2@01))
  :pattern ((inv@215@01 n$6@214@01))
  :pattern ((img@216@01 n$6@214@01))
  :qid |is_marked-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@216@01 r) (Set_in (inv@215@01 r) nodes@2@01))
    (= (inv@215@01 r) r))
  :pattern ((inv@215@01 r))
  :qid |is_marked-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@215@01 r) nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r) r))
  :pattern ((inv@215@01 r))
  :qid |quant-u-154|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@217@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@215@01 r) nodes@2@01) (img@216@01 r) (= r (inv@215@01 r)))
    ($Perm.min
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (- $Perm.Write (pTaken@39@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@218@01 ((r $Ref)) $Perm
  (ite
    (and (Set_in (inv@215@01 r) nodes@2@01) (img@216@01 r) (= r (inv@215@01 r)))
    ($Perm.min
      (ite (= r node@3@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@217@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (- $Perm.Write (pTaken@39@01 r))
        $Perm.No)
      (pTaken@217@01 r))
    $Perm.No)
  
  :qid |quant-u-156|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@215@01 r) nodes@2@01) (img@216@01 r) (= r (inv@215@01 r)))
    (= (- $Perm.Write (pTaken@217@01 r)) $Perm.No))
  
  :qid |quant-u-157|))))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@218@01 node@3@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@215@01 r) nodes@2@01) (img@216@01 r) (= r (inv@215@01 r)))
    (= (- (- $Perm.Write (pTaken@217@01 r)) (pTaken@218@01 r)) $Perm.No))
  
  :qid |quant-u-159|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall n$7: Ref :: { (n$7.left in nodes) } { (n$7 in nodes), n$7.left } (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes))
(declare-const n$7@219@01 $Ref)
(set-option :timeout 0)
(push) ; 5
; [eval] (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes)
; [eval] (n$7 in nodes) && n$7.left != null
; [eval] (n$7 in nodes)
(push) ; 6
; [then-branch: 140 | !(n$7@219@01 in nodes@2@01) | live]
; [else-branch: 140 | n$7@219@01 in nodes@2@01 | live]
(push) ; 7
; [then-branch: 140 | !(n$7@219@01 in nodes@2@01)]
(assert (not (Set_in n$7@219@01 nodes@2@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 140 | n$7@219@01 in nodes@2@01]
(assert (Set_in n$7@219@01 nodes@2@01))
; [eval] n$7.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) n$7@219@01))
(push) ; 8
(assert (not (and (img@7@01 n$7@219@01) (Set_in (inv@6@01 n$7@219@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (Set_in n$7@219@01 nodes@2@01)
  (and
    (Set_in n$7@219@01 nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) n$7@219@01))))
(assert (or (Set_in n$7@219@01 nodes@2@01) (not (Set_in n$7@219@01 nodes@2@01))))
(push) ; 6
; [then-branch: 141 | n$7@219@01 in nodes@2@01 && Lookup(left, sm@8@01, n$7@219@01) != Null | live]
; [else-branch: 141 | !(n$7@219@01 in nodes@2@01 && Lookup(left, sm@8@01, n$7@219@01) != Null) | live]
(push) ; 7
; [then-branch: 141 | n$7@219@01 in nodes@2@01 && Lookup(left, sm@8@01, n$7@219@01) != Null]
(assert (and
  (Set_in n$7@219@01 nodes@2@01)
  (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) $Ref.null))))
; [eval] (n$7.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) n$7@219@01))
(push) ; 8
(assert (not (and (img@7@01 n$7@219@01) (Set_in (inv@6@01 n$7@219@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 141 | !(n$7@219@01 in nodes@2@01 && Lookup(left, sm@8@01, n$7@219@01) != Null)]
(assert (not
  (and
    (Set_in n$7@219@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (and
    (Set_in n$7@219@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) $Ref.null)))
  (and
    (Set_in n$7@219@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) n$7@219@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$7@219@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) $Ref.null))))
  (and
    (Set_in n$7@219@01 nodes@2@01)
    (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$7@219@01 $Ref)) (!
  (and
    (=>
      (Set_in n$7@219@01 nodes@2@01)
      (and
        (Set_in n$7@219@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) n$7@219@01)))
    (or (Set_in n$7@219@01 nodes@2@01) (not (Set_in n$7@219@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$7@219@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) $Ref.null)))
      (and
        (Set_in n$7@219@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) n$7@219@01)))
    (or
      (not
        (and
          (Set_in n$7@219@01 nodes@2@01)
          (not
            (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) $Ref.null))))
      (and
        (Set_in n$7@219@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) nodes@2@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@219@01 $Ref)) (!
  (and
    (=>
      (Set_in n$7@219@01 nodes@2@01)
      (and
        (Set_in n$7@219@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) n$7@219@01)))
    (or (Set_in n$7@219@01 nodes@2@01) (not (Set_in n$7@219@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$7@219@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) $Ref.null)))
      (and
        (Set_in n$7@219@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) n$7@219@01)))
    (or
      (not
        (and
          (Set_in n$7@219@01 nodes@2@01)
          (not
            (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) $Ref.null))))
      (and
        (Set_in n$7@219@01 nodes@2@01)
        (not
          (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) $Ref.null)))))
  :pattern ((Set_in n$7@219@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) n$7@219@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(push) ; 5
(assert (not (forall ((n$7@219@01 $Ref)) (!
  (=>
    (and
      (Set_in n$7@219@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) nodes@2@01))
  :pattern ((Set_in n$7@219@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) n$7@219@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$7@219@01 $Ref)) (!
  (=>
    (and
      (Set_in n$7@219@01 nodes@2@01)
      (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) nodes@2@01))
  :pattern ((Set_in n$7@219@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n$7@219@01) n$7@219@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
; [eval] (forall n$8: Ref :: { (n$8.right in nodes) } { (n$8 in nodes), n$8.right } (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes))
(declare-const n$8@220@01 $Ref)
(push) ; 5
; [eval] (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes)
; [eval] (n$8 in nodes) && n$8.right != null
; [eval] (n$8 in nodes)
(push) ; 6
; [then-branch: 142 | !(n$8@220@01 in nodes@2@01) | live]
; [else-branch: 142 | n$8@220@01 in nodes@2@01 | live]
(push) ; 7
; [then-branch: 142 | !(n$8@220@01 in nodes@2@01)]
(assert (not (Set_in n$8@220@01 nodes@2@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 142 | n$8@220@01 in nodes@2@01]
(assert (Set_in n$8@220@01 nodes@2@01))
; [eval] n$8.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) n$8@220@01))
(push) ; 8
(assert (not (and (img@11@01 n$8@220@01) (Set_in (inv@10@01 n$8@220@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (Set_in n$8@220@01 nodes@2@01)
  (and
    (Set_in n$8@220@01 nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) n$8@220@01))))
(assert (or (Set_in n$8@220@01 nodes@2@01) (not (Set_in n$8@220@01 nodes@2@01))))
(push) ; 6
; [then-branch: 143 | n$8@220@01 in nodes@2@01 && Lookup(right, sm@12@01, n$8@220@01) != Null | live]
; [else-branch: 143 | !(n$8@220@01 in nodes@2@01 && Lookup(right, sm@12@01, n$8@220@01) != Null) | live]
(push) ; 7
; [then-branch: 143 | n$8@220@01 in nodes@2@01 && Lookup(right, sm@12@01, n$8@220@01) != Null]
(assert (and
  (Set_in n$8@220@01 nodes@2@01)
  (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) $Ref.null))))
; [eval] (n$8.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) n$8@220@01))
(push) ; 8
(assert (not (and (img@11@01 n$8@220@01) (Set_in (inv@10@01 n$8@220@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 143 | !(n$8@220@01 in nodes@2@01 && Lookup(right, sm@12@01, n$8@220@01) != Null)]
(assert (not
  (and
    (Set_in n$8@220@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) $Ref.null)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (and
    (Set_in n$8@220@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) $Ref.null)))
  (and
    (Set_in n$8@220@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) n$8@220@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$8@220@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) $Ref.null))))
  (and
    (Set_in n$8@220@01 nodes@2@01)
    (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$8@220@01 $Ref)) (!
  (and
    (=>
      (Set_in n$8@220@01 nodes@2@01)
      (and
        (Set_in n$8@220@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) n$8@220@01)))
    (or (Set_in n$8@220@01 nodes@2@01) (not (Set_in n$8@220@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$8@220@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) $Ref.null)))
      (and
        (Set_in n$8@220@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) n$8@220@01)))
    (or
      (not
        (and
          (Set_in n$8@220@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01)
              $Ref.null))))
      (and
        (Set_in n$8@220@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) nodes@2@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@220@01 $Ref)) (!
  (and
    (=>
      (Set_in n$8@220@01 nodes@2@01)
      (and
        (Set_in n$8@220@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) n$8@220@01)))
    (or (Set_in n$8@220@01 nodes@2@01) (not (Set_in n$8@220@01 nodes@2@01)))
    (=>
      (and
        (Set_in n$8@220@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) $Ref.null)))
      (and
        (Set_in n$8@220@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) n$8@220@01)))
    (or
      (not
        (and
          (Set_in n$8@220@01 nodes@2@01)
          (not
            (=
              ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01)
              $Ref.null))))
      (and
        (Set_in n$8@220@01 nodes@2@01)
        (not
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) $Ref.null)))))
  :pattern ((Set_in n$8@220@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) n$8@220@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(push) ; 5
(assert (not (forall ((n$8@220@01 $Ref)) (!
  (=>
    (and
      (Set_in n$8@220@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) nodes@2@01))
  :pattern ((Set_in n$8@220@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) n$8@220@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$8@220@01 $Ref)) (!
  (=>
    (and
      (Set_in n$8@220@01 nodes@2@01)
      (not
        (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) nodes@2@01))
  :pattern ((Set_in ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) nodes@2@01))
  :pattern ((Set_in n$8@220@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n$8@220@01) n$8@220@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } (n in nodes) ==> old(n.is_marked) ==> n.is_marked)
(declare-const n@221@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(n.is_marked) ==> n.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 144 | n@221@01 in nodes@2@01 | live]
; [else-branch: 144 | !(n@221@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 144 | n@221@01 in nodes@2@01]
(assert (Set_in n@221@01 nodes@2@01))
; [eval] old(n.is_marked) ==> n.is_marked
; [eval] old(n.is_marked)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@221@01) n@221@01))
(push) ; 8
(assert (not (and (img@15@01 n@221@01) (Set_in (inv@14@01 n@221@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 145 | Lookup(is_marked, sm@16@01, n@221@01) | live]
; [else-branch: 145 | !(Lookup(is_marked, sm@16@01, n@221@01)) | live]
(push) ; 9
; [then-branch: 145 | Lookup(is_marked, sm@16@01, n@221@01)]
(assert ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@221@01))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@01)
      (=
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef29|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef30|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef31|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@221@01) n@221@01))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite (= n@221@01 node@3@01) $Perm.Write $Perm.No)
    (ite
      (and (img@15@01 n@221@01) (Set_in (inv@14@01 n@221@01) nodes@2@01))
      (- $Perm.Write (pTaken@39@01 n@221@01))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(push) ; 9
; [else-branch: 145 | !(Lookup(is_marked, sm@16@01, n@221@01))]
(assert (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@221@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (=>
  ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@221@01)
  (and
    ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@221@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@221@01) n@221@01))))
; Joined path conditions
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@221@01))
  ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@221@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 144 | !(n@221@01 in nodes@2@01)]
(assert (not (Set_in n@221@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (=>
  (Set_in n@221@01 nodes@2@01)
  (and
    (Set_in n@221@01 nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@221@01) n@221@01)
    (=>
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@221@01)
      (and
        ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@221@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@221@01) n@221@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@221@01))
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@221@01)))))
; Joined path conditions
(assert (or (not (Set_in n@221@01 nodes@2@01)) (Set_in n@221@01 nodes@2@01)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@221@01 $Ref)) (!
  (and
    (=>
      (Set_in n@221@01 nodes@2@01)
      (and
        (Set_in n@221@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@221@01) n@221@01)
        (=>
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@221@01)
          (and
            ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@221@01)
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@221@01) n@221@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@221@01))
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@221@01))))
    (or (not (Set_in n@221@01 nodes@2@01)) (Set_in n@221@01 nodes@2@01)))
  :pattern ((Set_in n@221@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@221@01) n@221@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102-aux|)))
(push) ; 5
(assert (not (forall ((n@221@01 $Ref)) (!
  (=>
    (and
      (Set_in n@221@01 nodes@2@01)
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@221@01))
    ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@221@01))
  :pattern ((Set_in n@221@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@221@01) n@221@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n@221@01 $Ref)) (!
  (=>
    (and
      (Set_in n@221@01 nodes@2@01)
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@221@01))
    ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@221@01))
  :pattern ((Set_in n@221@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@221@01) n@221@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@01)
      (=
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef29|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef30|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef31|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) node@3@01) node@3@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    $Perm.Write
    (ite
      (and (img@15@01 node@3@01) (Set_in (inv@14@01 node@3@01) nodes@2@01))
      (- $Perm.Write (pTaken@39@01 node@3@01))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) node@3@01)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) node@3@01))
; [eval] (forall n: Ref :: { (n in nodes), n.left } (n in nodes) ==> n.left == old(n.left))
(declare-const n@222@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> n.left == old(n.left)
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 146 | n@222@01 in nodes@2@01 | live]
; [else-branch: 146 | !(n@222@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 146 | n@222@01 in nodes@2@01]
(assert (Set_in n@222@01 nodes@2@01))
; [eval] n.left == old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@222@01) n@222@01))
(push) ; 8
(assert (not (and (img@7@01 n@222@01) (Set_in (inv@6@01 n@222@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [eval] old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(push) ; 8
(assert (not (and (img@7@01 n@222@01) (Set_in (inv@6@01 n@222@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 146 | !(n@222@01 in nodes@2@01)]
(assert (not (Set_in n@222@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (Set_in n@222@01 nodes@2@01)
  (and
    (Set_in n@222@01 nodes@2@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@222@01) n@222@01))))
; Joined path conditions
(assert (or (not (Set_in n@222@01 nodes@2@01)) (Set_in n@222@01 nodes@2@01)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@222@01 $Ref)) (!
  (and
    (=>
      (Set_in n@222@01 nodes@2@01)
      (and
        (Set_in n@222@01 nodes@2@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@222@01) n@222@01)))
    (or (not (Set_in n@222@01 nodes@2@01)) (Set_in n@222@01 nodes@2@01)))
  :pattern ((Set_in n@222@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@222@01) n@222@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86-aux|)))
; [eval] (forall n: Ref :: { (n in nodes), n.right } (n in nodes) ==> n.right == old(n.right))
(declare-const n@223@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> n.right == old(n.right)
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 147 | n@223@01 in nodes@2@01 | live]
; [else-branch: 147 | !(n@223@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 147 | n@223@01 in nodes@2@01]
(assert (Set_in n@223@01 nodes@2@01))
; [eval] n.right == old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@223@01) n@223@01))
(push) ; 8
(assert (not (and (img@11@01 n@223@01) (Set_in (inv@10@01 n@223@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
; [eval] old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(push) ; 8
(assert (not (and (img@11@01 n@223@01) (Set_in (inv@10@01 n@223@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 147 | !(n@223@01 in nodes@2@01)]
(assert (not (Set_in n@223@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (Set_in n@223@01 nodes@2@01)
  (and
    (Set_in n@223@01 nodes@2@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@223@01) n@223@01))))
; Joined path conditions
(assert (or (not (Set_in n@223@01 nodes@2@01)) (Set_in n@223@01 nodes@2@01)))
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@223@01 $Ref)) (!
  (and
    (=>
      (Set_in n@223@01 nodes@2@01)
      (and
        (Set_in n@223@01 nodes@2@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@223@01) n@223@01)))
    (or (not (Set_in n@223@01 nodes@2@01)) (Set_in n@223@01 nodes@2@01)))
  :pattern ((Set_in n@223@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@223@01) n@223@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89-aux|)))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.left.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked)
(declare-const n@224@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 148 | n@224@01 in nodes@2@01 | live]
; [else-branch: 148 | !(n@224@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 148 | n@224@01 in nodes@2@01]
(assert (Set_in n@224@01 nodes@2@01))
; [eval] old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01) n@224@01))
(push) ; 8
(assert (not (and (img@15@01 n@224@01) (Set_in (inv@14@01 n@224@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 149 | Lookup(is_marked, sm@16@01, n@224@01) | live]
; [else-branch: 149 | !(Lookup(is_marked, sm@16@01, n@224@01)) | live]
(push) ; 9
; [then-branch: 149 | Lookup(is_marked, sm@16@01, n@224@01)]
(assert ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
(pop) ; 9
(push) ; 9
; [else-branch: 149 | !(Lookup(is_marked, sm@16@01, n@224@01))]
(assert (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@01)
      (=
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef29|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef30|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef31|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01) n@224@01))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite (= n@224@01 node@3@01) $Perm.Write $Perm.No)
    (ite
      (and (img@15@01 n@224@01) (Set_in (inv@14@01 n@224@01) nodes@2@01))
      (- $Perm.Write (pTaken@39@01 n@224@01))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01) n@224@01))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
  ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01)))
(push) ; 8
; [then-branch: 150 | !(Lookup(is_marked, sm@16@01, n@224@01)) && Lookup(is_marked, sm@150@01, n@224@01) | live]
; [else-branch: 150 | !(!(Lookup(is_marked, sm@16@01, n@224@01)) && Lookup(is_marked, sm@150@01, n@224@01)) | live]
(push) ; 9
; [then-branch: 150 | !(Lookup(is_marked, sm@16@01, n@224@01)) && Lookup(is_marked, sm@150@01, n@224@01)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
  ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01)))
; [eval] n.left == null || n.left.is_marked
; [eval] n.left == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) n@224@01))
(push) ; 10
(assert (not (and (img@7@01 n@224@01) (Set_in (inv@6@01 n@224@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 151 | Lookup(left, sm@8@01, n@224@01) == Null | live]
; [else-branch: 151 | Lookup(left, sm@8@01, n@224@01) != Null | live]
(push) ; 11
; [then-branch: 151 | Lookup(left, sm@8@01, n@224@01) == Null]
(assert (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 151 | Lookup(left, sm@8@01, n@224@01) != Null]
(assert (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
      (=
        ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef1|))))
(push) ; 12
(assert (not (and (img@7@01 n@224@01) (Set_in (inv@6@01 n@224@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@01)
      (=
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef29|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef30|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef31|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01)) ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01)))
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (ite
      (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) node@3@01)
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@15@01 ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01))
        (Set_in (inv@14@01 ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01)) nodes@2@01))
      (-
        $Perm.Write
        (pTaken@39@01 ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (=>
  (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01)) ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01)))))
(assert (or
  (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) $Ref.null))
  (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) $Ref.null)))
(pop) ; 9
(push) ; 9
; [else-branch: 150 | !(!(Lookup(is_marked, sm@16@01, n@224@01)) && Lookup(is_marked, sm@150@01, n@224@01))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
    ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
    ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
    ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) n@224@01)
    (=>
      (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) $Ref.null))
      (and
        (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01)) ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01))))
    (or
      (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) $Ref.null))
      (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01)))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
    ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 148 | !(n@224@01 in nodes@2@01)]
(assert (not (Set_in n@224@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
(assert (=>
  (Set_in n@224@01 nodes@2@01)
  (and
    (Set_in n@224@01 nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01) n@224@01)
    (=>
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01) n@224@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) n@224@01)
        (=>
          (not
            (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) $Ref.null))
          (and
            (not
              (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01)) ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01))))
        (or
          (not
            (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) $Ref.null))
          (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
          ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01)))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01))))))
; Joined path conditions
(assert (or (not (Set_in n@224@01 nodes@2@01)) (Set_in n@224@01 nodes@2@01)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@7@01 r) (Set_in (inv@6@01 r) nodes@2@01))
    (=
      ($FVF.lookup_left (as sm@8@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@4@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@8@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@224@01 $Ref)) (!
  (and
    (=>
      (Set_in n@224@01 nodes@2@01)
      (and
        (Set_in n@224@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01) n@224@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01) n@224@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
            ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
            ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01)
            ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) n@224@01)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01)) ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01)
                  $Ref.null))
              (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
              ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
            ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01)))))
    (or (not (Set_in n@224@01 nodes@2@01)) (Set_in n@224@01 nodes@2@01)))
  :pattern ((Set_in n@224@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01) n@224@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@224@01 $Ref)) (!
  (and
    (=>
      (Set_in n@224@01 nodes@2@01)
      (and
        (Set_in n@224@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01) n@224@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01) n@224@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
            ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
            ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01)
            ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) n@224@01)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01)) ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01)
                  $Ref.null))
              (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
              ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
            ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01)))))
    (or (not (Set_in n@224@01 nodes@2@01)) (Set_in n@224@01 nodes@2@01)))
  :pattern ((Set_in n@224@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) n@224@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01)) ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(push) ; 5
(assert (not (forall ((n@224@01 $Ref)) (!
  (=>
    (and
      (Set_in n@224@01 nodes@2@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01)))
    (or
      (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01))))
  :pattern ((Set_in n@224@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01) n@224@01))
  :pattern ((Set_in n@224@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) n@224@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01)) ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n@224@01 $Ref)) (!
  (=>
    (and
      (Set_in n@224@01 nodes@2@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@224@01))
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01)))
    (or
      (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01))))
  :pattern ((Set_in n@224@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@224@01) n@224@01))
  :pattern ((Set_in n@224@01 nodes@2@01) ($FVF.loc_left ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01) n@224@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01)) ($FVF.lookup_left (as sm@8@01  $FVF<left>) n@224@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|)))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.right.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked)
(declare-const n@225@01 $Ref)
(push) ; 5
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] (n in nodes)
(push) ; 6
; [then-branch: 152 | n@225@01 in nodes@2@01 | live]
; [else-branch: 152 | !(n@225@01 in nodes@2@01) | live]
(push) ; 7
; [then-branch: 152 | n@225@01 in nodes@2@01]
(assert (Set_in n@225@01 nodes@2@01))
; [eval] old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (=
        ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01) n@225@01))
(push) ; 8
(assert (not (and (img@15@01 n@225@01) (Set_in (inv@14@01 n@225@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 153 | Lookup(is_marked, sm@16@01, n@225@01) | live]
; [else-branch: 153 | !(Lookup(is_marked, sm@16@01, n@225@01)) | live]
(push) ; 9
; [then-branch: 153 | Lookup(is_marked, sm@16@01, n@225@01)]
(assert ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
(pop) ; 9
(push) ; 9
; [else-branch: 153 | !(Lookup(is_marked, sm@16@01, n@225@01))]
(assert (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@01)
      (=
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef29|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef30|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef31|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01) n@225@01))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite (= n@225@01 node@3@01) $Perm.Write $Perm.No)
    (ite
      (and (img@15@01 n@225@01) (Set_in (inv@14@01 n@225@01) nodes@2@01))
      (- $Perm.Write (pTaken@39@01 n@225@01))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01) n@225@01))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
  ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01)))
(push) ; 8
; [then-branch: 154 | !(Lookup(is_marked, sm@16@01, n@225@01)) && Lookup(is_marked, sm@150@01, n@225@01) | live]
; [else-branch: 154 | !(!(Lookup(is_marked, sm@16@01, n@225@01)) && Lookup(is_marked, sm@150@01, n@225@01)) | live]
(push) ; 9
; [then-branch: 154 | !(Lookup(is_marked, sm@16@01, n@225@01)) && Lookup(is_marked, sm@150@01, n@225@01)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
  ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01)))
; [eval] n.right == null || n.right.is_marked
; [eval] n.right == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01) n@225@01))
(push) ; 10
(assert (not (and (img@11@01 n@225@01) (Set_in (inv@10@01 n@225@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(push) ; 10
; [then-branch: 155 | Lookup(right, sm@12@01, n@225@01) == Null | live]
; [else-branch: 155 | Lookup(right, sm@12@01, n@225@01) != Null | live]
(push) ; 11
; [then-branch: 155 | Lookup(right, sm@12@01, n@225@01) == Null]
(assert (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01) $Ref.null))
(pop) ; 11
(push) ; 11
; [else-branch: 155 | Lookup(right, sm@12@01, n@225@01) != Null]
(assert (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
      (=
        ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
    :qid |qp.fvfValDef2|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef3|))))
(push) ; 12
(assert (not (and (img@11@01 n@225@01) (Set_in (inv@10@01 n@225@01) nodes@2@01))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r node@3@01)
      (=
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef29|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
        (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
        false)
      (=
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef30|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef31|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01)) ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01)))
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (ite
      (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01) node@3@01)
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@15@01 ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01))
        (Set_in (inv@14@01 ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01)) nodes@2@01))
      (-
        $Perm.Write
        (pTaken@39@01 ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0,00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (=>
  (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01)) ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01)))))
(assert (or
  (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01) $Ref.null))
  (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01) $Ref.null)))
(pop) ; 9
(push) ; 9
; [else-branch: 154 | !(!(Lookup(is_marked, sm@16@01, n@225@01)) && Lookup(is_marked, sm@150@01, n@225@01))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
    ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
    ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
    ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01) n@225@01)
    (=>
      (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01) $Ref.null))
      (and
        (not
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01)) ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01))))
    (or
      (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01) $Ref.null))
      (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01)))
  (and
    (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
    ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 152 | !(n@225@01 in nodes@2@01)]
(assert (not (Set_in n@225@01 nodes@2@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
(assert (=>
  (Set_in n@225@01 nodes@2@01)
  (and
    (Set_in n@225@01 nodes@2@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01) n@225@01)
    (=>
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01) n@225@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01) n@225@01)
        (=>
          (not
            (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01) $Ref.null))
          (and
            (not
              (=
                ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01)
                $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01)) ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01))))
        (or
          (not
            (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01) $Ref.null))
          (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
          ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01)))
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01))))))
; Joined path conditions
(assert (or (not (Set_in n@225@01 nodes@2@01)) (Set_in n@225@01 nodes@2@01)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
    (=
      ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r node@3@01)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef29|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and (img@15@01 r) (Set_in (inv@14@01 r) nodes@2@01))
      (< $Perm.No (- $Perm.Write (pTaken@39@01 r)))
      false)
    (=
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@40@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@11@01 r) (Set_in (inv@10@01 r) nodes@2@01))
    (=
      ($FVF.lookup_right (as sm@12@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@12@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@225@01 $Ref)) (!
  (and
    (=>
      (Set_in n@225@01 nodes@2@01)
      (and
        (Set_in n@225@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01) n@225@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01) n@225@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
            ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
            ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01)
            ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01) n@225@01)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01)) ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
              ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
            ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01)))))
    (or (not (Set_in n@225@01 nodes@2@01)) (Set_in n@225@01 nodes@2@01)))
  :pattern ((Set_in n@225@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01) n@225@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@225@01 $Ref)) (!
  (and
    (=>
      (Set_in n@225@01 nodes@2@01)
      (and
        (Set_in n@225@01 nodes@2@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01) n@225@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01) n@225@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
          ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
        (=>
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
            ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
            ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01)
            ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01) n@225@01)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01)) ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
              ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01)))
          (and
            (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
            ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01)))))
    (or (not (Set_in n@225@01 nodes@2@01)) (Set_in n@225@01 nodes@2@01)))
  :pattern ((Set_in n@225@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01) n@225@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01)) ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(push) ; 5
(assert (not (forall ((n@225@01 $Ref)) (!
  (=>
    (and
      (Set_in n@225@01 nodes@2@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01)))
    (or
      (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01))))
  :pattern ((Set_in n@225@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01) n@225@01))
  :pattern ((Set_in n@225@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01) n@225@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01)) ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n@225@01 $Ref)) (!
  (=>
    (and
      (Set_in n@225@01 nodes@2@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@16@01  $FVF<is_marked>) n@225@01))
        ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01)))
    (or
      (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01))))
  :pattern ((Set_in n@225@01 nodes@2@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) n@225@01) n@225@01))
  :pattern ((Set_in n@225@01 nodes@2@01) ($FVF.loc_right ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01) n@225@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01)) ($FVF.lookup_right (as sm@12@01  $FVF<right>) n@225@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|)))
(pop) ; 4
(push) ; 4
; [else-branch: 139 | Lookup(right, sm@12@01, node@3@01) != Null && !(Lookup(is_marked, sm@150@01, Lookup(right, sm@12@01, node@3@01)))]
(assert (and
  (not (= ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01) $Ref.null))
  (not
    ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@12@01  $FVF<right>) node@3@01)))))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 99 | Lookup(left, sm@8@01, node@3@01) != Null && !(Lookup(is_marked, sm@150@01, Lookup(left, sm@8@01, node@3@01)))]
(assert (and
  (not (= ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01) $Ref.null))
  (not
    ($FVF.lookup_is_marked (as sm@150@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@8@01  $FVF<left>) node@3@01)))))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- client_success ----------
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var a: Ref
(declare-const a@226@01 $Ref)
; [exec]
; var b: Ref
(declare-const b@227@01 $Ref)
; [exec]
; var nodes: Set[Ref]
(declare-const nodes@228@01 Set<$Ref>)
; [exec]
; a := new(left, right, is_marked)
(declare-const a@229@01 $Ref)
(assert (not (= a@229@01 $Ref.null)))
(declare-const left@230@01 $Ref)
(declare-const sm@231@01 $FVF<left>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_left (as sm@231@01  $FVF<left>) a@229@01) left@230@01))
(declare-const right@232@01 $Ref)
(declare-const sm@233@01 $FVF<right>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_right (as sm@233@01  $FVF<right>) a@229@01) right@232@01))
(declare-const is_marked@234@01 Bool)
(declare-const sm@235@01 $FVF<is_marked>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_is_marked (as sm@235@01  $FVF<is_marked>) a@229@01)
  is_marked@234@01))
(assert (not (= a@229@01 b@227@01)))
(assert (not (= a@229@01 a@226@01)))
(assert (not (Set_in a@229@01 nodes@228@01)))
; [exec]
; a.is_marked := false
(declare-const sm@236@01 $FVF<is_marked>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_is_marked (as sm@236@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@235@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@236@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@235@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef40|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@235@01  $FVF<is_marked>) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@236@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef41|)))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@236@01  $FVF<is_marked>) a@229@01) a@229@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@237@01 ((r $Ref)) $Perm
  (ite
    (= r a@229@01)
    ($Perm.min (ite (= r a@229@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@237@01 a@229@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r a@229@01) (= (- $Perm.Write (pTaken@237@01 r)) $Perm.No))
  
  :qid |quant-u-162|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@238@01 $FVF<is_marked>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) a@229@01) false))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) a@229@01) a@229@01))
; [exec]
; b := new(left, right, is_marked)
(declare-const b@239@01 $Ref)
(assert (not (= b@239@01 $Ref.null)))
(declare-const left@240@01 $Ref)
(declare-const sm@241@01 $FVF<left>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_left (as sm@241@01  $FVF<left>) b@239@01) left@240@01))
(declare-const right@242@01 $Ref)
(declare-const sm@243@01 $FVF<right>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_right (as sm@243@01  $FVF<right>) b@239@01) right@242@01))
(declare-const is_marked@244@01 Bool)
(declare-const sm@245@01 $FVF<is_marked>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_is_marked (as sm@245@01  $FVF<is_marked>) b@239@01)
  is_marked@244@01))
(assert (not (= b@239@01 ($FVF.lookup_right (as sm@233@01  $FVF<right>) a@229@01))))
(assert (not (= b@239@01 a@229@01)))
(assert (not (= b@239@01 b@227@01)))
(assert (not (= b@239@01 ($FVF.lookup_left (as sm@231@01  $FVF<left>) a@229@01))))
(assert (not (Set_in b@239@01 nodes@228@01)))
; [exec]
; b.is_marked := false
(declare-const sm@246@01 $FVF<is_marked>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_is_marked (as sm@246@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@245@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@246@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@245@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_is_marked (as sm@246@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@246@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef43|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@245@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@246@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef44|)))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@246@01  $FVF<is_marked>) b@239@01) b@239@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@247@01 ((r $Ref)) $Perm
  (ite
    (= r b@239@01)
    ($Perm.min (ite (= r b@239@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@248@01 ((r $Ref)) $Perm
  (ite
    (= r b@239@01)
    ($Perm.min
      (ite (= r a@229@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@247@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@247@01 b@239@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r b@239@01) (= (- $Perm.Write (pTaken@247@01 r)) $Perm.No))
  
  :qid |quant-u-165|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@249@01 $FVF<is_marked>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) b@239@01) false))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) b@239@01) b@239@01))
; [exec]
; a.left := b
(declare-const sm@250@01 $FVF<left>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_left (as sm@250@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@231@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@250@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@231@01  $FVF<left>) r))
  :qid |qp.fvfValDef45|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_left (as sm@250@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@241@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@250@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@241@01  $FVF<left>) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_left ($FVF.lookup_left (as sm@231@01  $FVF<left>) r) r)
    ($FVF.loc_left ($FVF.lookup_left (as sm@241@01  $FVF<left>) r) r))
  :pattern (($FVF.lookup_left (as sm@250@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef47|)))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@250@01  $FVF<left>) a@229@01) a@229@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@251@01 ((r $Ref)) $Perm
  (ite
    (= r a@229@01)
    ($Perm.min (ite (= r a@229@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@252@01 ((r $Ref)) $Perm
  (ite
    (= r a@229@01)
    ($Perm.min
      (ite (= r b@239@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@251@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@251@01 a@229@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r a@229@01) (= (- $Perm.Write (pTaken@251@01 r)) $Perm.No))
  
  :qid |quant-u-168|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@253@01 $FVF<left>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_left (as sm@253@01  $FVF<left>) a@229@01) b@239@01))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@253@01  $FVF<left>) a@229@01) a@229@01))
; [exec]
; a.right := null
(declare-const sm@254@01 $FVF<right>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_right (as sm@254@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@243@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@254@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@243@01  $FVF<right>) r))
  :qid |qp.fvfValDef48|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_right (as sm@254@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@233@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@254@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@233@01  $FVF<right>) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@243@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@233@01  $FVF<right>) r) r))
  :pattern (($FVF.lookup_right (as sm@254@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef50|)))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@254@01  $FVF<right>) a@229@01) a@229@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@255@01 ((r $Ref)) $Perm
  (ite
    (= r a@229@01)
    ($Perm.min (ite (= r a@229@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@256@01 ((r $Ref)) $Perm
  (ite
    (= r a@229@01)
    ($Perm.min
      (ite (= r b@239@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@255@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@255@01 a@229@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r a@229@01) (= (- $Perm.Write (pTaken@255@01 r)) $Perm.No))
  
  :qid |quant-u-171|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@257@01 $FVF<right>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_right (as sm@257@01  $FVF<right>) a@229@01) $Ref.null))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@257@01  $FVF<right>) a@229@01) a@229@01))
; [exec]
; b.left := null
(declare-const sm@258@01 $FVF<left>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_left (as sm@258@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@241@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@258@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@241@01  $FVF<left>) r))
  :qid |qp.fvfValDef51|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_left (as sm@258@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@253@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@258@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@253@01  $FVF<left>) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_left ($FVF.lookup_left (as sm@241@01  $FVF<left>) r) r)
    ($FVF.loc_left ($FVF.lookup_left (as sm@253@01  $FVF<left>) r) r))
  :pattern (($FVF.lookup_left (as sm@258@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef53|)))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@258@01  $FVF<left>) b@239@01) b@239@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@259@01 ((r $Ref)) $Perm
  (ite
    (= r b@239@01)
    ($Perm.min (ite (= r b@239@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@260@01 ((r $Ref)) $Perm
  (ite
    (= r b@239@01)
    ($Perm.min
      (ite (= r a@229@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@259@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@259@01 b@239@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r b@239@01) (= (- $Perm.Write (pTaken@259@01 r)) $Perm.No))
  
  :qid |quant-u-174|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@261@01 $FVF<left>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_left (as sm@261@01  $FVF<left>) b@239@01) $Ref.null))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@261@01  $FVF<left>) b@239@01) b@239@01))
; [exec]
; b.right := a
(declare-const sm@262@01 $FVF<right>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_right (as sm@262@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@243@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@262@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@243@01  $FVF<right>) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_right (as sm@262@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@257@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@262@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@257@01  $FVF<right>) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@243@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@257@01  $FVF<right>) r) r))
  :pattern (($FVF.lookup_right (as sm@262@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef56|)))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@262@01  $FVF<right>) b@239@01) b@239@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@263@01 ((r $Ref)) $Perm
  (ite
    (= r b@239@01)
    ($Perm.min (ite (= r b@239@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@264@01 ((r $Ref)) $Perm
  (ite
    (= r b@239@01)
    ($Perm.min
      (ite (= r a@229@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@263@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@263@01 b@239@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r b@239@01) (= (- $Perm.Write (pTaken@263@01 r)) $Perm.No))
  
  :qid |quant-u-177|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@265@01 $FVF<right>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_right (as sm@265@01  $FVF<right>) b@239@01) a@229@01))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@265@01  $FVF<right>) b@239@01) b@239@01))
; [exec]
; nodes := Set(a, b)
; [eval] Set(a, b)
(declare-const nodes@266@01 Set<$Ref>)
(assert (= nodes@266@01 (Set_unionone (Set_singleton a@229@01) b@239@01)))
; [exec]
; assert (forall n: Ref :: { (n in nodes) } (n in nodes) ==> !n.is_marked)
; [eval] (forall n: Ref :: { (n in nodes) } (n in nodes) ==> !n.is_marked)
(declare-const n@267@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n in nodes) ==> !n.is_marked
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 156 | n@267@01 in nodes@266@01 | live]
; [else-branch: 156 | !(n@267@01 in nodes@266@01) | live]
(push) ; 5
; [then-branch: 156 | n@267@01 in nodes@266@01]
(assert (Set_in n@267@01 nodes@266@01))
; [eval] !n.is_marked
(declare-const sm@268@01 $FVF<is_marked>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef59|)))
(declare-const pm@269@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_is_marked (as pm@269@01  $FPM) r)
    (+
      (ite (= r b@239@01) $Perm.Write $Perm.No)
      (ite (= r a@229@01) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_is_marked (as pm@269@01  $FPM) r))
  :qid |qp.resPrmSumDef60|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.perm_is_marked (as pm@269@01  $FPM) r))
  :qid |qp.resTrgDef61|)))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@267@01) n@267@01))
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_is_marked (as pm@269@01  $FPM) n@267@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 156 | !(n@267@01 in nodes@266@01)]
(assert (not (Set_in n@267@01 nodes@266@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_is_marked (as pm@269@01  $FPM) r)
    (+
      (ite (= r b@239@01) $Perm.Write $Perm.No)
      (ite (= r a@229@01) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_is_marked (as pm@269@01  $FPM) r))
  :qid |qp.resPrmSumDef60|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.perm_is_marked (as pm@269@01  $FPM) r))
  :qid |qp.resTrgDef61|)))
(assert (=>
  (Set_in n@267@01 nodes@266@01)
  (and
    (Set_in n@267@01 nodes@266@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@267@01) n@267@01))))
; Joined path conditions
(assert (or (not (Set_in n@267@01 nodes@266@01)) (Set_in n@267@01 nodes@266@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_is_marked (as pm@269@01  $FPM) r)
    (+
      (ite (= r b@239@01) $Perm.Write $Perm.No)
      (ite (= r a@229@01) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_is_marked (as pm@269@01  $FPM) r))
  :qid |qp.resPrmSumDef60|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.perm_is_marked (as pm@269@01  $FPM) r))
  :qid |qp.resTrgDef61|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@267@01 $Ref)) (!
  (and
    (=>
      (Set_in n@267@01 nodes@266@01)
      (and
        (Set_in n@267@01 nodes@266@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@267@01) n@267@01)))
    (or (not (Set_in n@267@01 nodes@266@01)) (Set_in n@267@01 nodes@266@01)))
  :pattern ((Set_in n@267@01 nodes@266@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@63@9@63@53-aux|)))
(push) ; 3
(assert (not (forall ((n@267@01 $Ref)) (!
  (=>
    (Set_in n@267@01 nodes@266@01)
    (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@267@01)))
  :pattern ((Set_in n@267@01 nodes@266@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@63@9@63@53|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n@267@01 $Ref)) (!
  (=>
    (Set_in n@267@01 nodes@266@01)
    (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@267@01)))
  :pattern ((Set_in n@267@01 nodes@266@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@63@9@63@53|)))
; [exec]
; trav_rec(nodes, a)
; [eval] (node in nodes)
(push) ; 3
(assert (not (Set_in a@229@01 nodes@266@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (Set_in a@229@01 nodes@266@01))
; [eval] !((null in nodes))
; [eval] (null in nodes)
(push) ; 3
(assert (not (not (Set_in $Ref.null nodes@266@01))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (not (Set_in $Ref.null nodes@266@01)))
(declare-const n@270@01 $Ref)
(push) ; 3
; [eval] (n in nodes)
(assert (Set_in n@270@01 nodes@266@01))
(pop) ; 3
(declare-fun inv@271@01 ($Ref) $Ref)
(declare-fun img@272@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@273@01 $FVF<left>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_left (as sm@273@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@253@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@253@01  $FVF<left>) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_left (as sm@273@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@261@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@261@01  $FVF<left>) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_left ($FVF.lookup_left (as sm@253@01  $FVF<left>) r) r)
    ($FVF.loc_left ($FVF.lookup_left (as sm@261@01  $FVF<left>) r) r))
  :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef64|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n1@270@01 $Ref) (n2@270@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@270@01 nodes@266@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@273@01  $FVF<left>) n1@270@01) n1@270@01))
      (and
        (Set_in n2@270@01 nodes@266@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@273@01  $FVF<left>) n2@270@01) n2@270@01))
      (= n1@270@01 n2@270@01))
    (= n1@270@01 n2@270@01))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@270@01 $Ref)) (!
  (=>
    (Set_in n@270@01 nodes@266@01)
    (and (= (inv@271@01 n@270@01) n@270@01) (img@272@01 n@270@01)))
  :pattern ((Set_in n@270@01 nodes@266@01))
  :pattern ((inv@271@01 n@270@01))
  :pattern ((img@272@01 n@270@01))
  :qid |left-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@272@01 r) (Set_in (inv@271@01 r) nodes@266@01))
    (= (inv@271@01 r) r))
  :pattern ((inv@271@01 r))
  :qid |left-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@271@01 r) nodes@266@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@273@01  $FVF<left>) r) r))
  :pattern ((inv@271@01 r))
  :qid |quant-u-179|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@274@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@271@01 r) nodes@266@01)
      (img@272@01 r)
      (= r (inv@271@01 r)))
    ($Perm.min (ite (= r a@229@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@275@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@271@01 r) nodes@266@01)
      (img@272@01 r)
      (= r (inv@271@01 r)))
    ($Perm.min
      (ite (= r b@239@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@274@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@274@01 a@229@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@271@01 r) nodes@266@01)
      (img@272@01 r)
      (= r (inv@271@01 r)))
    (= (- $Perm.Write (pTaken@274@01 r)) $Perm.No))
  
  :qid |quant-u-182|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@275@01 b@239@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@271@01 r) nodes@266@01)
      (img@272@01 r)
      (= r (inv@271@01 r)))
    (= (- (- $Perm.Write (pTaken@274@01 r)) (pTaken@275@01 r)) $Perm.No))
  
  :qid |quant-u-184|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$0@276@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n$0 in nodes)
(assert (Set_in n$0@276@01 nodes@266@01))
(pop) ; 3
(declare-fun inv@277@01 ($Ref) $Ref)
(declare-fun img@278@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@279@01 $FVF<right>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_right (as sm@279@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@257@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@279@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@257@01  $FVF<right>) r))
  :qid |qp.fvfValDef65|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_right (as sm@279@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@265@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@279@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@265@01  $FVF<right>) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@257@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@265@01  $FVF<right>) r) r))
  :pattern (($FVF.lookup_right (as sm@279@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef67|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$01@276@01 $Ref) (n$02@276@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$01@276@01 nodes@266@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@279@01  $FVF<right>) n$01@276@01) n$01@276@01))
      (and
        (Set_in n$02@276@01 nodes@266@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@279@01  $FVF<right>) n$02@276@01) n$02@276@01))
      (= n$01@276@01 n$02@276@01))
    (= n$01@276@01 n$02@276@01))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@276@01 $Ref)) (!
  (=>
    (Set_in n$0@276@01 nodes@266@01)
    (and (= (inv@277@01 n$0@276@01) n$0@276@01) (img@278@01 n$0@276@01)))
  :pattern ((Set_in n$0@276@01 nodes@266@01))
  :pattern ((inv@277@01 n$0@276@01))
  :pattern ((img@278@01 n$0@276@01))
  :qid |right-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@278@01 r) (Set_in (inv@277@01 r) nodes@266@01))
    (= (inv@277@01 r) r))
  :pattern ((inv@277@01 r))
  :qid |right-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@277@01 r) nodes@266@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@279@01  $FVF<right>) r) r))
  :pattern ((inv@277@01 r))
  :qid |quant-u-186|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@280@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@277@01 r) nodes@266@01)
      (img@278@01 r)
      (= r (inv@277@01 r)))
    ($Perm.min (ite (= r a@229@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@281@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@277@01 r) nodes@266@01)
      (img@278@01 r)
      (= r (inv@277@01 r)))
    ($Perm.min
      (ite (= r b@239@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@280@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@280@01 a@229@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@277@01 r) nodes@266@01)
      (img@278@01 r)
      (= r (inv@277@01 r)))
    (= (- $Perm.Write (pTaken@280@01 r)) $Perm.No))
  
  :qid |quant-u-189|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@281@01 b@239@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@277@01 r) nodes@266@01)
      (img@278@01 r)
      (= r (inv@277@01 r)))
    (= (- (- $Perm.Write (pTaken@280@01 r)) (pTaken@281@01 r)) $Perm.No))
  
  :qid |quant-u-191|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$1@282@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n$1 in nodes)
(assert (Set_in n$1@282@01 nodes@266@01))
(pop) ; 3
(declare-fun inv@283@01 ($Ref) $Ref)
(declare-fun img@284@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$11@282@01 $Ref) (n$12@282@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$11@282@01 nodes@266@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n$11@282@01) n$11@282@01))
      (and
        (Set_in n$12@282@01 nodes@266@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n$12@282@01) n$12@282@01))
      (= n$11@282@01 n$12@282@01))
    (= n$11@282@01 n$12@282@01))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@282@01 $Ref)) (!
  (=>
    (Set_in n$1@282@01 nodes@266@01)
    (and (= (inv@283@01 n$1@282@01) n$1@282@01) (img@284@01 n$1@282@01)))
  :pattern ((Set_in n$1@282@01 nodes@266@01))
  :pattern ((inv@283@01 n$1@282@01))
  :pattern ((img@284@01 n$1@282@01))
  :qid |is_marked-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@284@01 r) (Set_in (inv@283@01 r) nodes@266@01))
    (= (inv@283@01 r) r))
  :pattern ((inv@283@01 r))
  :qid |is_marked-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@283@01 r) nodes@266@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r) r))
  :pattern ((inv@283@01 r))
  :qid |quant-u-193|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@285@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@283@01 r) nodes@266@01)
      (img@284@01 r)
      (= r (inv@283@01 r)))
    ($Perm.min (ite (= r b@239@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@286@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@283@01 r) nodes@266@01)
      (img@284@01 r)
      (= r (inv@283@01 r)))
    ($Perm.min
      (ite (= r a@229@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@285@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@285@01 b@239@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@283@01 r) nodes@266@01)
      (img@284@01 r)
      (= r (inv@283@01 r)))
    (= (- $Perm.Write (pTaken@285@01 r)) $Perm.No))
  
  :qid |quant-u-196|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@286@01 a@229@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@283@01 r) nodes@266@01)
      (img@284@01 r)
      (= r (inv@283@01 r)))
    (= (- (- $Perm.Write (pTaken@285@01 r)) (pTaken@286@01 r)) $Perm.No))
  
  :qid |quant-u-198|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall n$2: Ref :: { (n$2.left in nodes) } { (n$2 in nodes), n$2.left } (n$2 in nodes) && n$2.left != null ==> (n$2.left in nodes))
(declare-const n$2@287@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n$2 in nodes) && n$2.left != null ==> (n$2.left in nodes)
; [eval] (n$2 in nodes) && n$2.left != null
; [eval] (n$2 in nodes)
(push) ; 4
; [then-branch: 157 | !(n$2@287@01 in nodes@266@01) | live]
; [else-branch: 157 | n$2@287@01 in nodes@266@01 | live]
(push) ; 5
; [then-branch: 157 | !(n$2@287@01 in nodes@266@01)]
(assert (not (Set_in n$2@287@01 nodes@266@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 157 | n$2@287@01 in nodes@266@01]
(assert (Set_in n$2@287@01 nodes@266@01))
; [eval] n$2.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r a@229@01)
      (=
        ($FVF.lookup_left (as sm@273@01  $FVF<left>) r)
        ($FVF.lookup_left (as sm@253@01  $FVF<left>) r)))
    :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left (as sm@253@01  $FVF<left>) r))
    :qid |qp.fvfValDef62|))
  (forall ((r $Ref)) (!
    (=>
      (= r b@239@01)
      (=
        ($FVF.lookup_left (as sm@273@01  $FVF<left>) r)
        ($FVF.lookup_left (as sm@261@01  $FVF<left>) r)))
    :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left (as sm@261@01  $FVF<left>) r))
    :qid |qp.fvfValDef63|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_left ($FVF.lookup_left (as sm@253@01  $FVF<left>) r) r)
      ($FVF.loc_left ($FVF.lookup_left (as sm@261@01  $FVF<left>) r) r))
    :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef64|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) n$2@287@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@287@01 a@229@01) $Perm.Write $Perm.No)
    (ite (= n$2@287@01 b@239@01) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_left (as sm@273@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@253@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@253@01  $FVF<left>) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_left (as sm@273@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@261@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@261@01  $FVF<left>) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_left ($FVF.lookup_left (as sm@253@01  $FVF<left>) r) r)
    ($FVF.loc_left ($FVF.lookup_left (as sm@261@01  $FVF<left>) r) r))
  :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef64|)))
(assert (=>
  (Set_in n$2@287@01 nodes@266@01)
  (and
    (Set_in n$2@287@01 nodes@266@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) n$2@287@01))))
(assert (or (Set_in n$2@287@01 nodes@266@01) (not (Set_in n$2@287@01 nodes@266@01))))
(push) ; 4
; [then-branch: 158 | n$2@287@01 in nodes@266@01 && Lookup(left, sm@273@01, n$2@287@01) != Null | live]
; [else-branch: 158 | !(n$2@287@01 in nodes@266@01 && Lookup(left, sm@273@01, n$2@287@01) != Null) | live]
(push) ; 5
; [then-branch: 158 | n$2@287@01 in nodes@266@01 && Lookup(left, sm@273@01, n$2@287@01) != Null]
(assert (and
  (Set_in n$2@287@01 nodes@266@01)
  (not (= ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) $Ref.null))))
; [eval] (n$2.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r a@229@01)
      (=
        ($FVF.lookup_left (as sm@273@01  $FVF<left>) r)
        ($FVF.lookup_left (as sm@253@01  $FVF<left>) r)))
    :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left (as sm@253@01  $FVF<left>) r))
    :qid |qp.fvfValDef62|))
  (forall ((r $Ref)) (!
    (=>
      (= r b@239@01)
      (=
        ($FVF.lookup_left (as sm@273@01  $FVF<left>) r)
        ($FVF.lookup_left (as sm@261@01  $FVF<left>) r)))
    :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left (as sm@261@01  $FVF<left>) r))
    :qid |qp.fvfValDef63|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_left ($FVF.lookup_left (as sm@253@01  $FVF<left>) r) r)
      ($FVF.loc_left ($FVF.lookup_left (as sm@261@01  $FVF<left>) r) r))
    :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef64|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) n$2@287@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@287@01 a@229@01) $Perm.Write $Perm.No)
    (ite (= n$2@287@01 b@239@01) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 158 | !(n$2@287@01 in nodes@266@01 && Lookup(left, sm@273@01, n$2@287@01) != Null)]
(assert (not
  (and
    (Set_in n$2@287@01 nodes@266@01)
    (not (= ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_left (as sm@273@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@253@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@253@01  $FVF<left>) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_left (as sm@273@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@261@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@261@01  $FVF<left>) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_left ($FVF.lookup_left (as sm@253@01  $FVF<left>) r) r)
    ($FVF.loc_left ($FVF.lookup_left (as sm@261@01  $FVF<left>) r) r))
  :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef64|)))
(assert (=>
  (and
    (Set_in n$2@287@01 nodes@266@01)
    (not (= ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) $Ref.null)))
  (and
    (Set_in n$2@287@01 nodes@266@01)
    (not (= ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) n$2@287@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@287@01 nodes@266@01)
      (not
        (= ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) $Ref.null))))
  (and
    (Set_in n$2@287@01 nodes@266@01)
    (not (= ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_left (as sm@273@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@253@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@253@01  $FVF<left>) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_left (as sm@273@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@261@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@261@01  $FVF<left>) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_left ($FVF.lookup_left (as sm@253@01  $FVF<left>) r) r)
    ($FVF.loc_left ($FVF.lookup_left (as sm@261@01  $FVF<left>) r) r))
  :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef64|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@287@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@287@01 nodes@266@01)
      (and
        (Set_in n$2@287@01 nodes@266@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) n$2@287@01)))
    (or (Set_in n$2@287@01 nodes@266@01) (not (Set_in n$2@287@01 nodes@266@01)))
    (=>
      (and
        (Set_in n$2@287@01 nodes@266@01)
        (not
          (= ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) $Ref.null)))
      (and
        (Set_in n$2@287@01 nodes@266@01)
        (not
          (= ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) n$2@287@01)))
    (or
      (not
        (and
          (Set_in n$2@287@01 nodes@266@01)
          (not
            (=
              ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01)
              $Ref.null))))
      (and
        (Set_in n$2@287@01 nodes@266@01)
        (not
          (= ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) nodes@266@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(assert (forall ((n$2@287@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@287@01 nodes@266@01)
      (and
        (Set_in n$2@287@01 nodes@266@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) n$2@287@01)))
    (or (Set_in n$2@287@01 nodes@266@01) (not (Set_in n$2@287@01 nodes@266@01)))
    (=>
      (and
        (Set_in n$2@287@01 nodes@266@01)
        (not
          (= ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) $Ref.null)))
      (and
        (Set_in n$2@287@01 nodes@266@01)
        (not
          (= ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) n$2@287@01)))
    (or
      (not
        (and
          (Set_in n$2@287@01 nodes@266@01)
          (not
            (=
              ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01)
              $Ref.null))))
      (and
        (Set_in n$2@287@01 nodes@266@01)
        (not
          (= ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) $Ref.null)))))
  :pattern ((Set_in n$2@287@01 nodes@266@01) ($FVF.loc_left ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) n$2@287@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(push) ; 3
(assert (not (forall ((n$2@287@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@287@01 nodes@266@01)
      (not
        (= ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) nodes@266@01))
  :pattern ((Set_in ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) nodes@266@01))
  :pattern ((Set_in n$2@287@01 nodes@266@01) ($FVF.loc_left ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) n$2@287@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$2@287@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@287@01 nodes@266@01)
      (not
        (= ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) nodes@266@01))
  :pattern ((Set_in ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) nodes@266@01))
  :pattern ((Set_in n$2@287@01 nodes@266@01) ($FVF.loc_left ($FVF.lookup_left (as sm@273@01  $FVF<left>) n$2@287@01) n$2@287@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|)))
; [eval] (forall n$3: Ref :: { (n$3.right in nodes) } { (n$3 in nodes), n$3.right } (n$3 in nodes) && n$3.right != null ==> (n$3.right in nodes))
(declare-const n$3@288@01 $Ref)
(push) ; 3
; [eval] (n$3 in nodes) && n$3.right != null ==> (n$3.right in nodes)
; [eval] (n$3 in nodes) && n$3.right != null
; [eval] (n$3 in nodes)
(push) ; 4
; [then-branch: 159 | !(n$3@288@01 in nodes@266@01) | live]
; [else-branch: 159 | n$3@288@01 in nodes@266@01 | live]
(push) ; 5
; [then-branch: 159 | !(n$3@288@01 in nodes@266@01)]
(assert (not (Set_in n$3@288@01 nodes@266@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 159 | n$3@288@01 in nodes@266@01]
(assert (Set_in n$3@288@01 nodes@266@01))
; [eval] n$3.right != null
(declare-const sm@289@01 $FVF<right>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_right (as sm@289@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@265@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@289@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@265@01  $FVF<right>) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_right (as sm@289@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@257@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@289@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@257@01  $FVF<right>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@265@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@257@01  $FVF<right>) r) r))
  :pattern (($FVF.lookup_right (as sm@289@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef70|)))
(declare-const pm@290@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_right (as pm@290@01  $FPM) r)
    (+
      (ite (= r b@239@01) $Perm.Write $Perm.No)
      (ite (= r a@229@01) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_right (as pm@290@01  $FPM) r))
  :qid |qp.resPrmSumDef71|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@289@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@265@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@257@01  $FVF<right>) r) r))
  :pattern (($FVF.perm_right (as pm@290@01  $FPM) r))
  :qid |qp.resTrgDef72|)))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01) n$3@288@01))
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_right (as pm@290@01  $FPM) n$3@288@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_right (as sm@289@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@265@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@289@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@265@01  $FVF<right>) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_right (as sm@289@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@257@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@289@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@257@01  $FVF<right>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@265@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@257@01  $FVF<right>) r) r))
  :pattern (($FVF.lookup_right (as sm@289@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef70|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_right (as pm@290@01  $FPM) r)
    (+
      (ite (= r b@239@01) $Perm.Write $Perm.No)
      (ite (= r a@229@01) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_right (as pm@290@01  $FPM) r))
  :qid |qp.resPrmSumDef71|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@289@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@265@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@257@01  $FVF<right>) r) r))
  :pattern (($FVF.perm_right (as pm@290@01  $FPM) r))
  :qid |qp.resTrgDef72|)))
(assert (=>
  (Set_in n$3@288@01 nodes@266@01)
  (and
    (Set_in n$3@288@01 nodes@266@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01) n$3@288@01))))
(assert (or (Set_in n$3@288@01 nodes@266@01) (not (Set_in n$3@288@01 nodes@266@01))))
(push) ; 4
; [then-branch: 160 | n$3@288@01 in nodes@266@01 && Lookup(right, sm@289@01, n$3@288@01) != Null | live]
; [else-branch: 160 | !(n$3@288@01 in nodes@266@01 && Lookup(right, sm@289@01, n$3@288@01) != Null) | live]
(push) ; 5
; [then-branch: 160 | n$3@288@01 in nodes@266@01 && Lookup(right, sm@289@01, n$3@288@01) != Null]
(assert (and
  (Set_in n$3@288@01 nodes@266@01)
  (not (= ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01) $Ref.null))))
; [eval] (n$3.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r b@239@01)
      (=
        ($FVF.lookup_right (as sm@289@01  $FVF<right>) r)
        ($FVF.lookup_right (as sm@265@01  $FVF<right>) r)))
    :pattern (($FVF.lookup_right (as sm@289@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right (as sm@265@01  $FVF<right>) r))
    :qid |qp.fvfValDef68|))
  (forall ((r $Ref)) (!
    (=>
      (= r a@229@01)
      (=
        ($FVF.lookup_right (as sm@289@01  $FVF<right>) r)
        ($FVF.lookup_right (as sm@257@01  $FVF<right>) r)))
    :pattern (($FVF.lookup_right (as sm@289@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right (as sm@257@01  $FVF<right>) r))
    :qid |qp.fvfValDef69|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_right ($FVF.lookup_right (as sm@265@01  $FVF<right>) r) r)
      ($FVF.loc_right ($FVF.lookup_right (as sm@257@01  $FVF<right>) r) r))
    :pattern (($FVF.lookup_right (as sm@289@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef70|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01) n$3@288@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$3@288@01 b@239@01) $Perm.Write $Perm.No)
    (ite (= n$3@288@01 a@229@01) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 160 | !(n$3@288@01 in nodes@266@01 && Lookup(right, sm@289@01, n$3@288@01) != Null)]
(assert (not
  (and
    (Set_in n$3@288@01 nodes@266@01)
    (not
      (= ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_right (as sm@289@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@265@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@289@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@265@01  $FVF<right>) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_right (as sm@289@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@257@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@289@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@257@01  $FVF<right>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@265@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@257@01  $FVF<right>) r) r))
  :pattern (($FVF.lookup_right (as sm@289@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef70|)))
(assert (=>
  (and
    (Set_in n$3@288@01 nodes@266@01)
    (not
      (= ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01) $Ref.null)))
  (and
    (Set_in n$3@288@01 nodes@266@01)
    (not
      (= ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01) n$3@288@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$3@288@01 nodes@266@01)
      (not
        (= ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01) $Ref.null))))
  (and
    (Set_in n$3@288@01 nodes@266@01)
    (not
      (= ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_right (as sm@289@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@265@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@289@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@265@01  $FVF<right>) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_right (as sm@289@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@257@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@289@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@257@01  $FVF<right>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@265@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@257@01  $FVF<right>) r) r))
  :pattern (($FVF.lookup_right (as sm@289@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef70|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_right (as pm@290@01  $FPM) r)
    (+
      (ite (= r b@239@01) $Perm.Write $Perm.No)
      (ite (= r a@229@01) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_right (as pm@290@01  $FPM) r))
  :qid |qp.resPrmSumDef71|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@289@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@265@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@257@01  $FVF<right>) r) r))
  :pattern (($FVF.perm_right (as pm@290@01  $FPM) r))
  :qid |qp.resTrgDef72|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$3@288@01 $Ref)) (!
  (and
    (=>
      (Set_in n$3@288@01 nodes@266@01)
      (and
        (Set_in n$3@288@01 nodes@266@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01) n$3@288@01)))
    (or (Set_in n$3@288@01 nodes@266@01) (not (Set_in n$3@288@01 nodes@266@01)))
    (=>
      (and
        (Set_in n$3@288@01 nodes@266@01)
        (not
          (=
            ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01)
            $Ref.null)))
      (and
        (Set_in n$3@288@01 nodes@266@01)
        (not
          (=
            ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01)
            $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01) n$3@288@01)))
    (or
      (not
        (and
          (Set_in n$3@288@01 nodes@266@01)
          (not
            (=
              ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01)
              $Ref.null))))
      (and
        (Set_in n$3@288@01 nodes@266@01)
        (not
          (=
            ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01)
            $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01) nodes@266@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(assert (forall ((n$3@288@01 $Ref)) (!
  (and
    (=>
      (Set_in n$3@288@01 nodes@266@01)
      (and
        (Set_in n$3@288@01 nodes@266@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01) n$3@288@01)))
    (or (Set_in n$3@288@01 nodes@266@01) (not (Set_in n$3@288@01 nodes@266@01)))
    (=>
      (and
        (Set_in n$3@288@01 nodes@266@01)
        (not
          (=
            ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01)
            $Ref.null)))
      (and
        (Set_in n$3@288@01 nodes@266@01)
        (not
          (=
            ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01)
            $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01) n$3@288@01)))
    (or
      (not
        (and
          (Set_in n$3@288@01 nodes@266@01)
          (not
            (=
              ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01)
              $Ref.null))))
      (and
        (Set_in n$3@288@01 nodes@266@01)
        (not
          (=
            ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01)
            $Ref.null)))))
  :pattern ((Set_in n$3@288@01 nodes@266@01) ($FVF.loc_right ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01) n$3@288@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(push) ; 3
(assert (not (forall ((n$3@288@01 $Ref)) (!
  (=>
    (and
      (Set_in n$3@288@01 nodes@266@01)
      (not
        (= ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01) nodes@266@01))
  :pattern ((Set_in ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01) nodes@266@01))
  :pattern ((Set_in n$3@288@01 nodes@266@01) ($FVF.loc_right ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01) n$3@288@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$3@288@01 $Ref)) (!
  (=>
    (and
      (Set_in n$3@288@01 nodes@266@01)
      (not
        (= ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01) nodes@266@01))
  :pattern ((Set_in ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01) nodes@266@01))
  :pattern ((Set_in n$3@288@01 nodes@266@01) ($FVF.loc_right ($FVF.lookup_right (as sm@289@01  $FVF<right>) n$3@288@01) n$3@288@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|)))
; [eval] !node.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r b@239@01)
      (=
        ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef57|))
  (forall ((r $Ref)) (!
    (=>
      (= r a@229@01)
      (=
        ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef58|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef59|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) a@229@01) a@229@01))
(push) ; 3
(assert (not (< $Perm.No (+ (ite (= a@229@01 b@239@01) $Perm.Write $Perm.No) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) a@229@01))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) a@229@01)))
(declare-const $t@291@01 $Snap)
(assert (= $t@291@01 ($Snap.combine ($Snap.first $t@291@01) ($Snap.second $t@291@01))))
(assert (= ($Snap.first $t@291@01) $Snap.unit))
; [eval] (node in nodes)
(assert (=
  ($Snap.second $t@291@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@291@01))
    ($Snap.second ($Snap.second $t@291@01)))))
(assert (= ($Snap.first ($Snap.second $t@291@01)) $Snap.unit))
; [eval] !((null in nodes))
; [eval] (null in nodes)
(assert (=
  ($Snap.second ($Snap.second $t@291@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@291@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
(declare-const n$4@292@01 $Ref)
(push) ; 3
; [eval] (n$4 in nodes)
(assert (Set_in n$4@292@01 nodes@266@01))
(pop) ; 3
(declare-fun inv@293@01 ($Ref) $Ref)
(declare-fun img@294@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$41@292@01 $Ref) (n$42@292@01 $Ref)) (!
  (=>
    (and
      (Set_in n$41@292@01 nodes@266@01)
      (Set_in n$42@292@01 nodes@266@01)
      (= n$41@292@01 n$42@292@01))
    (= n$41@292@01 n$42@292@01))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@292@01 $Ref)) (!
  (=>
    (Set_in n$4@292@01 nodes@266@01)
    (and (= (inv@293@01 n$4@292@01) n$4@292@01) (img@294@01 n$4@292@01)))
  :pattern ((Set_in n$4@292@01 nodes@266@01))
  :pattern ((inv@293@01 n$4@292@01))
  :pattern ((img@294@01 n$4@292@01))
  :qid |quant-u-200|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@294@01 r) (Set_in (inv@293@01 r) nodes@266@01))
    (= (inv@293@01 r) r))
  :pattern ((inv@293@01 r))
  :qid |left-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$4@292@01 $Ref)) (!
  (=> (Set_in n$4@292@01 nodes@266@01) (not (= n$4@292@01 $Ref.null)))
  :pattern ((Set_in n$4@292@01 nodes@266@01))
  :pattern ((inv@293@01 n$4@292@01))
  :pattern ((img@294@01 n$4@292@01))
  :qid |left-permImpliesNonNull|)))
(declare-const sm@295@01 $FVF<left>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@294@01 r) (Set_in (inv@293@01 r) nodes@266@01))
    (=
      ($FVF.lookup_left (as sm@295@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@293@01 r) nodes@266@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@295@01  $FVF<left>) r) r))
  :pattern ((inv@293@01 r))
  :qid |quant-u-201|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@291@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))
(declare-const n$5@296@01 $Ref)
(push) ; 3
; [eval] (n$5 in nodes)
(assert (Set_in n$5@296@01 nodes@266@01))
(pop) ; 3
(declare-fun inv@297@01 ($Ref) $Ref)
(declare-fun img@298@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$51@296@01 $Ref) (n$52@296@01 $Ref)) (!
  (=>
    (and
      (Set_in n$51@296@01 nodes@266@01)
      (Set_in n$52@296@01 nodes@266@01)
      (= n$51@296@01 n$52@296@01))
    (= n$51@296@01 n$52@296@01))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$5@296@01 $Ref)) (!
  (=>
    (Set_in n$5@296@01 nodes@266@01)
    (and (= (inv@297@01 n$5@296@01) n$5@296@01) (img@298@01 n$5@296@01)))
  :pattern ((Set_in n$5@296@01 nodes@266@01))
  :pattern ((inv@297@01 n$5@296@01))
  :pattern ((img@298@01 n$5@296@01))
  :qid |quant-u-203|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@298@01 r) (Set_in (inv@297@01 r) nodes@266@01))
    (= (inv@297@01 r) r))
  :pattern ((inv@297@01 r))
  :qid |right-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$5@296@01 $Ref)) (!
  (=> (Set_in n$5@296@01 nodes@266@01) (not (= n$5@296@01 $Ref.null)))
  :pattern ((Set_in n$5@296@01 nodes@266@01))
  :pattern ((inv@297@01 n$5@296@01))
  :pattern ((img@298@01 n$5@296@01))
  :qid |right-permImpliesNonNull|)))
(declare-const sm@299@01 $FVF<right>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@298@01 r) (Set_in (inv@297@01 r) nodes@266@01))
    (=
      ($FVF.lookup_right (as sm@299@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef76|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@297@01 r) nodes@266@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@299@01  $FVF<right>) r) r))
  :pattern ((inv@297@01 r))
  :qid |quant-u-204|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
(declare-const n$6@300@01 $Ref)
(push) ; 3
; [eval] (n$6 in nodes)
(assert (Set_in n$6@300@01 nodes@266@01))
(pop) ; 3
(declare-fun inv@301@01 ($Ref) $Ref)
(declare-fun img@302@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$61@300@01 $Ref) (n$62@300@01 $Ref)) (!
  (=>
    (and
      (Set_in n$61@300@01 nodes@266@01)
      (Set_in n$62@300@01 nodes@266@01)
      (= n$61@300@01 n$62@300@01))
    (= n$61@300@01 n$62@300@01))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$6@300@01 $Ref)) (!
  (=>
    (Set_in n$6@300@01 nodes@266@01)
    (and (= (inv@301@01 n$6@300@01) n$6@300@01) (img@302@01 n$6@300@01)))
  :pattern ((Set_in n$6@300@01 nodes@266@01))
  :pattern ((inv@301@01 n$6@300@01))
  :pattern ((img@302@01 n$6@300@01))
  :qid |quant-u-206|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@302@01 r) (Set_in (inv@301@01 r) nodes@266@01))
    (= (inv@301@01 r) r))
  :pattern ((inv@301@01 r))
  :qid |is_marked-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$6@300@01 $Ref)) (!
  (=> (Set_in n$6@300@01 nodes@266@01) (not (= n$6@300@01 $Ref.null)))
  :pattern ((Set_in n$6@300@01 nodes@266@01))
  :pattern ((inv@301@01 n$6@300@01))
  :pattern ((img@302@01 n$6@300@01))
  :qid |is_marked-permImpliesNonNull|)))
(declare-const sm@303@01 $FVF<is_marked>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@302@01 r) (Set_in (inv@301@01 r) nodes@266@01))
    (=
      ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r))
  :qid |qp.fvfValDef77|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@301@01 r) nodes@266@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r) r))
  :pattern ((inv@301@01 r))
  :qid |quant-u-207|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
  $Snap.unit))
; [eval] (forall n$7: Ref :: { (n$7.left in nodes) } { (n$7 in nodes), n$7.left } (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes))
(declare-const n$7@304@01 $Ref)
(push) ; 3
; [eval] (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes)
; [eval] (n$7 in nodes) && n$7.left != null
; [eval] (n$7 in nodes)
(push) ; 4
; [then-branch: 161 | !(n$7@304@01 in nodes@266@01) | live]
; [else-branch: 161 | n$7@304@01 in nodes@266@01 | live]
(push) ; 5
; [then-branch: 161 | !(n$7@304@01 in nodes@266@01)]
(assert (not (Set_in n$7@304@01 nodes@266@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 161 | n$7@304@01 in nodes@266@01]
(assert (Set_in n$7@304@01 nodes@266@01))
; [eval] n$7.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@294@01 r) (Set_in (inv@293@01 r) nodes@266@01))
      (=
        ($FVF.lookup_left (as sm@295@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r))
    :qid |qp.fvfValDef73|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef74|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) n$7@304@01))
(push) ; 6
(assert (not (and (img@294@01 n$7@304@01) (Set_in (inv@293@01 n$7@304@01) nodes@266@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@294@01 r) (Set_in (inv@293@01 r) nodes@266@01))
    (=
      ($FVF.lookup_left (as sm@295@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (=>
  (Set_in n$7@304@01 nodes@266@01)
  (and
    (Set_in n$7@304@01 nodes@266@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) n$7@304@01))))
(assert (or (Set_in n$7@304@01 nodes@266@01) (not (Set_in n$7@304@01 nodes@266@01))))
(push) ; 4
; [then-branch: 162 | n$7@304@01 in nodes@266@01 && Lookup(left, sm@295@01, n$7@304@01) != Null | live]
; [else-branch: 162 | !(n$7@304@01 in nodes@266@01 && Lookup(left, sm@295@01, n$7@304@01) != Null) | live]
(push) ; 5
; [then-branch: 162 | n$7@304@01 in nodes@266@01 && Lookup(left, sm@295@01, n$7@304@01) != Null]
(assert (and
  (Set_in n$7@304@01 nodes@266@01)
  (not (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) $Ref.null))))
; [eval] (n$7.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@294@01 r) (Set_in (inv@293@01 r) nodes@266@01))
      (=
        ($FVF.lookup_left (as sm@295@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r))
    :qid |qp.fvfValDef73|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef74|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) n$7@304@01))
(push) ; 6
(assert (not (and (img@294@01 n$7@304@01) (Set_in (inv@293@01 n$7@304@01) nodes@266@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 162 | !(n$7@304@01 in nodes@266@01 && Lookup(left, sm@295@01, n$7@304@01) != Null)]
(assert (not
  (and
    (Set_in n$7@304@01 nodes@266@01)
    (not (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@294@01 r) (Set_in (inv@293@01 r) nodes@266@01))
    (=
      ($FVF.lookup_left (as sm@295@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (=>
  (and
    (Set_in n$7@304@01 nodes@266@01)
    (not (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) $Ref.null)))
  (and
    (Set_in n$7@304@01 nodes@266@01)
    (not (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) n$7@304@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$7@304@01 nodes@266@01)
      (not
        (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) $Ref.null))))
  (and
    (Set_in n$7@304@01 nodes@266@01)
    (not (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@294@01 r) (Set_in (inv@293@01 r) nodes@266@01))
    (=
      ($FVF.lookup_left (as sm@295@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef74|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$7@304@01 $Ref)) (!
  (and
    (=>
      (Set_in n$7@304@01 nodes@266@01)
      (and
        (Set_in n$7@304@01 nodes@266@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) n$7@304@01)))
    (or (Set_in n$7@304@01 nodes@266@01) (not (Set_in n$7@304@01 nodes@266@01)))
    (=>
      (and
        (Set_in n$7@304@01 nodes@266@01)
        (not
          (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) $Ref.null)))
      (and
        (Set_in n$7@304@01 nodes@266@01)
        (not
          (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) n$7@304@01)))
    (or
      (not
        (and
          (Set_in n$7@304@01 nodes@266@01)
          (not
            (=
              ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01)
              $Ref.null))))
      (and
        (Set_in n$7@304@01 nodes@266@01)
        (not
          (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) nodes@266@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@304@01 $Ref)) (!
  (and
    (=>
      (Set_in n$7@304@01 nodes@266@01)
      (and
        (Set_in n$7@304@01 nodes@266@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) n$7@304@01)))
    (or (Set_in n$7@304@01 nodes@266@01) (not (Set_in n$7@304@01 nodes@266@01)))
    (=>
      (and
        (Set_in n$7@304@01 nodes@266@01)
        (not
          (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) $Ref.null)))
      (and
        (Set_in n$7@304@01 nodes@266@01)
        (not
          (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) n$7@304@01)))
    (or
      (not
        (and
          (Set_in n$7@304@01 nodes@266@01)
          (not
            (=
              ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01)
              $Ref.null))))
      (and
        (Set_in n$7@304@01 nodes@266@01)
        (not
          (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) $Ref.null)))))
  :pattern ((Set_in n$7@304@01 nodes@266@01) ($FVF.loc_left ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) n$7@304@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@304@01 $Ref)) (!
  (=>
    (and
      (Set_in n$7@304@01 nodes@266@01)
      (not
        (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) nodes@266@01))
  :pattern ((Set_in ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) nodes@266@01))
  :pattern ((Set_in n$7@304@01 nodes@266@01) ($FVF.loc_left ($FVF.lookup_left (as sm@295@01  $FVF<left>) n$7@304@01) n$7@304@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))
  $Snap.unit))
; [eval] (forall n$8: Ref :: { (n$8.right in nodes) } { (n$8 in nodes), n$8.right } (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes))
(declare-const n$8@305@01 $Ref)
(push) ; 3
; [eval] (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes)
; [eval] (n$8 in nodes) && n$8.right != null
; [eval] (n$8 in nodes)
(push) ; 4
; [then-branch: 163 | !(n$8@305@01 in nodes@266@01) | live]
; [else-branch: 163 | n$8@305@01 in nodes@266@01 | live]
(push) ; 5
; [then-branch: 163 | !(n$8@305@01 in nodes@266@01)]
(assert (not (Set_in n$8@305@01 nodes@266@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 163 | n$8@305@01 in nodes@266@01]
(assert (Set_in n$8@305@01 nodes@266@01))
; [eval] n$8.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@298@01 r) (Set_in (inv@297@01 r) nodes@266@01))
      (=
        ($FVF.lookup_right (as sm@299@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r))
    :qid |qp.fvfValDef75|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef76|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01) n$8@305@01))
(push) ; 6
(assert (not (and (img@298@01 n$8@305@01) (Set_in (inv@297@01 n$8@305@01) nodes@266@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@298@01 r) (Set_in (inv@297@01 r) nodes@266@01))
    (=
      ($FVF.lookup_right (as sm@299@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef76|)))
(assert (=>
  (Set_in n$8@305@01 nodes@266@01)
  (and
    (Set_in n$8@305@01 nodes@266@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01) n$8@305@01))))
(assert (or (Set_in n$8@305@01 nodes@266@01) (not (Set_in n$8@305@01 nodes@266@01))))
(push) ; 4
; [then-branch: 164 | n$8@305@01 in nodes@266@01 && Lookup(right, sm@299@01, n$8@305@01) != Null | live]
; [else-branch: 164 | !(n$8@305@01 in nodes@266@01 && Lookup(right, sm@299@01, n$8@305@01) != Null) | live]
(push) ; 5
; [then-branch: 164 | n$8@305@01 in nodes@266@01 && Lookup(right, sm@299@01, n$8@305@01) != Null]
(assert (and
  (Set_in n$8@305@01 nodes@266@01)
  (not (= ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01) $Ref.null))))
; [eval] (n$8.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@298@01 r) (Set_in (inv@297@01 r) nodes@266@01))
      (=
        ($FVF.lookup_right (as sm@299@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r))
    :qid |qp.fvfValDef75|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef76|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01) n$8@305@01))
(push) ; 6
(assert (not (and (img@298@01 n$8@305@01) (Set_in (inv@297@01 n$8@305@01) nodes@266@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 164 | !(n$8@305@01 in nodes@266@01 && Lookup(right, sm@299@01, n$8@305@01) != Null)]
(assert (not
  (and
    (Set_in n$8@305@01 nodes@266@01)
    (not
      (= ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@298@01 r) (Set_in (inv@297@01 r) nodes@266@01))
    (=
      ($FVF.lookup_right (as sm@299@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef76|)))
(assert (=>
  (and
    (Set_in n$8@305@01 nodes@266@01)
    (not
      (= ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01) $Ref.null)))
  (and
    (Set_in n$8@305@01 nodes@266@01)
    (not
      (= ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01) n$8@305@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$8@305@01 nodes@266@01)
      (not
        (= ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01) $Ref.null))))
  (and
    (Set_in n$8@305@01 nodes@266@01)
    (not
      (= ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@298@01 r) (Set_in (inv@297@01 r) nodes@266@01))
    (=
      ($FVF.lookup_right (as sm@299@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef76|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$8@305@01 $Ref)) (!
  (and
    (=>
      (Set_in n$8@305@01 nodes@266@01)
      (and
        (Set_in n$8@305@01 nodes@266@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01) n$8@305@01)))
    (or (Set_in n$8@305@01 nodes@266@01) (not (Set_in n$8@305@01 nodes@266@01)))
    (=>
      (and
        (Set_in n$8@305@01 nodes@266@01)
        (not
          (=
            ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01)
            $Ref.null)))
      (and
        (Set_in n$8@305@01 nodes@266@01)
        (not
          (=
            ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01)
            $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01) n$8@305@01)))
    (or
      (not
        (and
          (Set_in n$8@305@01 nodes@266@01)
          (not
            (=
              ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01)
              $Ref.null))))
      (and
        (Set_in n$8@305@01 nodes@266@01)
        (not
          (=
            ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01)
            $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01) nodes@266@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@305@01 $Ref)) (!
  (and
    (=>
      (Set_in n$8@305@01 nodes@266@01)
      (and
        (Set_in n$8@305@01 nodes@266@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01) n$8@305@01)))
    (or (Set_in n$8@305@01 nodes@266@01) (not (Set_in n$8@305@01 nodes@266@01)))
    (=>
      (and
        (Set_in n$8@305@01 nodes@266@01)
        (not
          (=
            ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01)
            $Ref.null)))
      (and
        (Set_in n$8@305@01 nodes@266@01)
        (not
          (=
            ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01)
            $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01) n$8@305@01)))
    (or
      (not
        (and
          (Set_in n$8@305@01 nodes@266@01)
          (not
            (=
              ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01)
              $Ref.null))))
      (and
        (Set_in n$8@305@01 nodes@266@01)
        (not
          (=
            ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01)
            $Ref.null)))))
  :pattern ((Set_in n$8@305@01 nodes@266@01) ($FVF.loc_right ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01) n$8@305@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@305@01 $Ref)) (!
  (=>
    (and
      (Set_in n$8@305@01 nodes@266@01)
      (not
        (= ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01) nodes@266@01))
  :pattern ((Set_in ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01) nodes@266@01))
  :pattern ((Set_in n$8@305@01 nodes@266@01) ($FVF.loc_right ($FVF.lookup_right (as sm@299@01  $FVF<right>) n$8@305@01) n$8@305@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } (n in nodes) ==> old(n.is_marked) ==> n.is_marked)
(declare-const n@306@01 $Ref)
(push) ; 3
; [eval] (n in nodes) ==> old(n.is_marked) ==> n.is_marked
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 165 | n@306@01 in nodes@266@01 | live]
; [else-branch: 165 | !(n@306@01 in nodes@266@01) | live]
(push) ; 5
; [then-branch: 165 | n@306@01 in nodes@266@01]
(assert (Set_in n@306@01 nodes@266@01))
; [eval] old(n.is_marked) ==> n.is_marked
; [eval] old(n.is_marked)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r b@239@01)
      (=
        ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef57|))
  (forall ((r $Ref)) (!
    (=>
      (= r a@229@01)
      (=
        ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef58|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef59|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@306@01) n@306@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n@306@01 b@239@01) $Perm.Write $Perm.No)
    (ite (= n@306@01 a@229@01) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 166 | Lookup(is_marked, sm@268@01, n@306@01) | live]
; [else-branch: 166 | !(Lookup(is_marked, sm@268@01, n@306@01)) | live]
(push) ; 7
; [then-branch: 166 | Lookup(is_marked, sm@268@01, n@306@01)]
(assert ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@306@01))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@302@01 r) (Set_in (inv@301@01 r) nodes@266@01))
      (=
        ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r))
    :qid |qp.fvfValDef77|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef78|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@306@01) n@306@01))
(push) ; 8
(assert (not (and (img@302@01 n@306@01) (Set_in (inv@301@01 n@306@01) nodes@266@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 166 | !(Lookup(is_marked, sm@268@01, n@306@01))]
(assert (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@306@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@302@01 r) (Set_in (inv@301@01 r) nodes@266@01))
    (=
      ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r))
  :qid |qp.fvfValDef77|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef78|)))
(assert (=>
  ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@306@01)
  (and
    ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@306@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@306@01) n@306@01))))
; Joined path conditions
(assert (or
  (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@306@01))
  ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@306@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 165 | !(n@306@01 in nodes@266@01)]
(assert (not (Set_in n@306@01 nodes@266@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@302@01 r) (Set_in (inv@301@01 r) nodes@266@01))
    (=
      ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r))
  :qid |qp.fvfValDef77|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef78|)))
(assert (=>
  (Set_in n@306@01 nodes@266@01)
  (and
    (Set_in n@306@01 nodes@266@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@306@01) n@306@01)
    (=>
      ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@306@01)
      (and
        ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@306@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@306@01) n@306@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@306@01))
      ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@306@01)))))
; Joined path conditions
(assert (or (not (Set_in n@306@01 nodes@266@01)) (Set_in n@306@01 nodes@266@01)))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@302@01 r) (Set_in (inv@301@01 r) nodes@266@01))
    (=
      ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r))
  :qid |qp.fvfValDef77|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef78|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@306@01 $Ref)) (!
  (and
    (=>
      (Set_in n@306@01 nodes@266@01)
      (and
        (Set_in n@306@01 nodes@266@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@306@01) n@306@01)
        (=>
          ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@306@01)
          (and
            ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@306@01)
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@306@01) n@306@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@306@01))
          ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@306@01))))
    (or (not (Set_in n@306@01 nodes@266@01)) (Set_in n@306@01 nodes@266@01)))
  :pattern ((Set_in n@306@01 nodes@266@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@306@01) n@306@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102-aux|)))
(assert (forall ((n@306@01 $Ref)) (!
  (=>
    (and
      (Set_in n@306@01 nodes@266@01)
      ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@306@01))
    ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@306@01))
  :pattern ((Set_in n@306@01 nodes@266@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@306@01) n@306@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))
  $Snap.unit))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@302@01 r) (Set_in (inv@301@01 r) nodes@266@01))
      (=
        ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r))
    :qid |qp.fvfValDef77|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef78|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) a@229@01) a@229@01))
(push) ; 3
(assert (not (and (img@302@01 a@229@01) (Set_in (inv@301@01 a@229@01) nodes@266@01))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) a@229@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.left } (n in nodes) ==> n.left == old(n.left))
(declare-const n@307@01 $Ref)
(push) ; 3
; [eval] (n in nodes) ==> n.left == old(n.left)
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 167 | n@307@01 in nodes@266@01 | live]
; [else-branch: 167 | !(n@307@01 in nodes@266@01) | live]
(push) ; 5
; [then-branch: 167 | n@307@01 in nodes@266@01]
(assert (Set_in n@307@01 nodes@266@01))
; [eval] n.left == old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@294@01 r) (Set_in (inv@293@01 r) nodes@266@01))
      (=
        ($FVF.lookup_left (as sm@295@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r))
    :qid |qp.fvfValDef73|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef74|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@307@01) n@307@01))
(push) ; 6
(assert (not (and (img@294@01 n@307@01) (Set_in (inv@293@01 n@307@01) nodes@266@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [eval] old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r a@229@01)
      (=
        ($FVF.lookup_left (as sm@273@01  $FVF<left>) r)
        ($FVF.lookup_left (as sm@253@01  $FVF<left>) r)))
    :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left (as sm@253@01  $FVF<left>) r))
    :qid |qp.fvfValDef62|))
  (forall ((r $Ref)) (!
    (=>
      (= r b@239@01)
      (=
        ($FVF.lookup_left (as sm@273@01  $FVF<left>) r)
        ($FVF.lookup_left (as sm@261@01  $FVF<left>) r)))
    :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left (as sm@261@01  $FVF<left>) r))
    :qid |qp.fvfValDef63|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_left ($FVF.lookup_left (as sm@253@01  $FVF<left>) r) r)
      ($FVF.loc_left ($FVF.lookup_left (as sm@261@01  $FVF<left>) r) r))
    :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef64|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@273@01  $FVF<left>) n@307@01) n@307@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n@307@01 a@229@01) $Perm.Write $Perm.No)
    (ite (= n@307@01 b@239@01) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 167 | !(n@307@01 in nodes@266@01)]
(assert (not (Set_in n@307@01 nodes@266@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@294@01 r) (Set_in (inv@293@01 r) nodes@266@01))
    (=
      ($FVF.lookup_left (as sm@295@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_left (as sm@273@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@253@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@253@01  $FVF<left>) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_left (as sm@273@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@261@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@261@01  $FVF<left>) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_left ($FVF.lookup_left (as sm@253@01  $FVF<left>) r) r)
    ($FVF.loc_left ($FVF.lookup_left (as sm@261@01  $FVF<left>) r) r))
  :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef64|)))
(assert (=>
  (Set_in n@307@01 nodes@266@01)
  (and
    (Set_in n@307@01 nodes@266@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@307@01) n@307@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@273@01  $FVF<left>) n@307@01) n@307@01))))
; Joined path conditions
(assert (or (not (Set_in n@307@01 nodes@266@01)) (Set_in n@307@01 nodes@266@01)))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@294@01 r) (Set_in (inv@293@01 r) nodes@266@01))
    (=
      ($FVF.lookup_left (as sm@295@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_left (as sm@273@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@253@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@253@01  $FVF<left>) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_left (as sm@273@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@261@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@261@01  $FVF<left>) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_left ($FVF.lookup_left (as sm@253@01  $FVF<left>) r) r)
    ($FVF.loc_left ($FVF.lookup_left (as sm@261@01  $FVF<left>) r) r))
  :pattern (($FVF.lookup_left (as sm@273@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef64|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@307@01 $Ref)) (!
  (and
    (=>
      (Set_in n@307@01 nodes@266@01)
      (and
        (Set_in n@307@01 nodes@266@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@307@01) n@307@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@273@01  $FVF<left>) n@307@01) n@307@01)))
    (or (not (Set_in n@307@01 nodes@266@01)) (Set_in n@307@01 nodes@266@01)))
  :pattern ((Set_in n@307@01 nodes@266@01) ($FVF.loc_left ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@307@01) n@307@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86-aux|)))
(assert (forall ((n@307@01 $Ref)) (!
  (=>
    (Set_in n@307@01 nodes@266@01)
    (=
      ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@307@01)
      ($FVF.lookup_left (as sm@273@01  $FVF<left>) n@307@01)))
  :pattern ((Set_in n@307@01 nodes@266@01) ($FVF.loc_left ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@307@01) n@307@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.right } (n in nodes) ==> n.right == old(n.right))
(declare-const n@308@01 $Ref)
(push) ; 3
; [eval] (n in nodes) ==> n.right == old(n.right)
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 168 | n@308@01 in nodes@266@01 | live]
; [else-branch: 168 | !(n@308@01 in nodes@266@01) | live]
(push) ; 5
; [then-branch: 168 | n@308@01 in nodes@266@01]
(assert (Set_in n@308@01 nodes@266@01))
; [eval] n.right == old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@298@01 r) (Set_in (inv@297@01 r) nodes@266@01))
      (=
        ($FVF.lookup_right (as sm@299@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r))
    :qid |qp.fvfValDef75|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef76|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@308@01) n@308@01))
(push) ; 6
(assert (not (and (img@298@01 n@308@01) (Set_in (inv@297@01 n@308@01) nodes@266@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [eval] old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r b@239@01)
      (=
        ($FVF.lookup_right (as sm@289@01  $FVF<right>) r)
        ($FVF.lookup_right (as sm@265@01  $FVF<right>) r)))
    :pattern (($FVF.lookup_right (as sm@289@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right (as sm@265@01  $FVF<right>) r))
    :qid |qp.fvfValDef68|))
  (forall ((r $Ref)) (!
    (=>
      (= r a@229@01)
      (=
        ($FVF.lookup_right (as sm@289@01  $FVF<right>) r)
        ($FVF.lookup_right (as sm@257@01  $FVF<right>) r)))
    :pattern (($FVF.lookup_right (as sm@289@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right (as sm@257@01  $FVF<right>) r))
    :qid |qp.fvfValDef69|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_right ($FVF.lookup_right (as sm@265@01  $FVF<right>) r) r)
      ($FVF.loc_right ($FVF.lookup_right (as sm@257@01  $FVF<right>) r) r))
    :pattern (($FVF.lookup_right (as sm@289@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef70|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@289@01  $FVF<right>) n@308@01) n@308@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n@308@01 b@239@01) $Perm.Write $Perm.No)
    (ite (= n@308@01 a@229@01) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 168 | !(n@308@01 in nodes@266@01)]
(assert (not (Set_in n@308@01 nodes@266@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@298@01 r) (Set_in (inv@297@01 r) nodes@266@01))
    (=
      ($FVF.lookup_right (as sm@299@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef76|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_right (as sm@289@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@265@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@289@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@265@01  $FVF<right>) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_right (as sm@289@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@257@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@289@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@257@01  $FVF<right>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@265@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@257@01  $FVF<right>) r) r))
  :pattern (($FVF.lookup_right (as sm@289@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef70|)))
(assert (=>
  (Set_in n@308@01 nodes@266@01)
  (and
    (Set_in n@308@01 nodes@266@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@308@01) n@308@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@289@01  $FVF<right>) n@308@01) n@308@01))))
; Joined path conditions
(assert (or (not (Set_in n@308@01 nodes@266@01)) (Set_in n@308@01 nodes@266@01)))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@298@01 r) (Set_in (inv@297@01 r) nodes@266@01))
    (=
      ($FVF.lookup_right (as sm@299@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef76|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_right (as sm@289@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@265@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@289@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@265@01  $FVF<right>) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_right (as sm@289@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@257@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@289@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@257@01  $FVF<right>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@265@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@257@01  $FVF<right>) r) r))
  :pattern (($FVF.lookup_right (as sm@289@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef70|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@308@01 $Ref)) (!
  (and
    (=>
      (Set_in n@308@01 nodes@266@01)
      (and
        (Set_in n@308@01 nodes@266@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@308@01) n@308@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@289@01  $FVF<right>) n@308@01) n@308@01)))
    (or (not (Set_in n@308@01 nodes@266@01)) (Set_in n@308@01 nodes@266@01)))
  :pattern ((Set_in n@308@01 nodes@266@01) ($FVF.loc_right ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@308@01) n@308@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89-aux|)))
(assert (forall ((n@308@01 $Ref)) (!
  (=>
    (Set_in n@308@01 nodes@266@01)
    (=
      ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@308@01)
      ($FVF.lookup_right (as sm@289@01  $FVF<right>) n@308@01)))
  :pattern ((Set_in n@308@01 nodes@266@01) ($FVF.loc_right ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@308@01) n@308@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.left.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked)
(declare-const n@309@01 $Ref)
(push) ; 3
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 169 | n@309@01 in nodes@266@01 | live]
; [else-branch: 169 | !(n@309@01 in nodes@266@01) | live]
(push) ; 5
; [then-branch: 169 | n@309@01 in nodes@266@01]
(assert (Set_in n@309@01 nodes@266@01))
; [eval] old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r b@239@01)
      (=
        ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef57|))
  (forall ((r $Ref)) (!
    (=>
      (= r a@229@01)
      (=
        ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef58|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef59|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01) n@309@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n@309@01 b@239@01) $Perm.Write $Perm.No)
    (ite (= n@309@01 a@229@01) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 170 | Lookup(is_marked, sm@268@01, n@309@01) | live]
; [else-branch: 170 | !(Lookup(is_marked, sm@268@01, n@309@01)) | live]
(push) ; 7
; [then-branch: 170 | Lookup(is_marked, sm@268@01, n@309@01)]
(assert ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
(pop) ; 7
(push) ; 7
; [else-branch: 170 | !(Lookup(is_marked, sm@268@01, n@309@01))]
(assert (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@302@01 r) (Set_in (inv@301@01 r) nodes@266@01))
      (=
        ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r))
    :qid |qp.fvfValDef77|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef78|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01) n@309@01))
(push) ; 8
(assert (not (and (img@302@01 n@309@01) (Set_in (inv@301@01 n@309@01) nodes@266@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@302@01 r) (Set_in (inv@301@01 r) nodes@266@01))
    (=
      ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r))
  :qid |qp.fvfValDef77|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef78|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01) n@309@01))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
  ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01)))
(push) ; 6
; [then-branch: 171 | !(Lookup(is_marked, sm@268@01, n@309@01)) && Lookup(is_marked, sm@303@01, n@309@01) | live]
; [else-branch: 171 | !(!(Lookup(is_marked, sm@268@01, n@309@01)) && Lookup(is_marked, sm@303@01, n@309@01)) | live]
(push) ; 7
; [then-branch: 171 | !(Lookup(is_marked, sm@268@01, n@309@01)) && Lookup(is_marked, sm@303@01, n@309@01)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
  ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01)))
; [eval] n.left == null || n.left.is_marked
; [eval] n.left == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@294@01 r) (Set_in (inv@293@01 r) nodes@266@01))
      (=
        ($FVF.lookup_left (as sm@295@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r))
    :qid |qp.fvfValDef73|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef74|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01) n@309@01))
(push) ; 8
(assert (not (and (img@294@01 n@309@01) (Set_in (inv@293@01 n@309@01) nodes@266@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 172 | Lookup(left, sm@295@01, n@309@01) == Null | live]
; [else-branch: 172 | Lookup(left, sm@295@01, n@309@01) != Null | live]
(push) ; 9
; [then-branch: 172 | Lookup(left, sm@295@01, n@309@01) == Null]
(assert (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01) $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 172 | Lookup(left, sm@295@01, n@309@01) != Null]
(assert (not (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@294@01 r) (Set_in (inv@293@01 r) nodes@266@01))
      (=
        ($FVF.lookup_left (as sm@295@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r))
    :qid |qp.fvfValDef73|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef74|))))
(push) ; 10
(assert (not (and (img@294@01 n@309@01) (Set_in (inv@293@01 n@309@01) nodes@266@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@302@01 r) (Set_in (inv@301@01 r) nodes@266@01))
      (=
        ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r))
    :qid |qp.fvfValDef77|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef78|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01)) ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01)))
(push) ; 10
(assert (not (and
  (img@302@01 ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01))
  (Set_in (inv@301@01 ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01)) nodes@266@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@294@01 r) (Set_in (inv@293@01 r) nodes@266@01))
    (=
      ($FVF.lookup_left (as sm@295@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@302@01 r) (Set_in (inv@301@01 r) nodes@266@01))
    (=
      ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r))
  :qid |qp.fvfValDef77|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef78|)))
(assert (=>
  (not (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01)) ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01)))))
(assert (or
  (not (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01) $Ref.null))
  (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01) $Ref.null)))
(pop) ; 7
(push) ; 7
; [else-branch: 171 | !(!(Lookup(is_marked, sm@268@01, n@309@01)) && Lookup(is_marked, sm@303@01, n@309@01))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
    ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@294@01 r) (Set_in (inv@293@01 r) nodes@266@01))
    (=
      ($FVF.lookup_left (as sm@295@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@302@01 r) (Set_in (inv@301@01 r) nodes@266@01))
    (=
      ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r))
  :qid |qp.fvfValDef77|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef78|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
    ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
    ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01) n@309@01)
    (=>
      (not (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01) $Ref.null))
      (and
        (not
          (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01)) ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01))))
    (or
      (not (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01) $Ref.null))
      (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
      ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01)))
  (and
    (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
    ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 169 | !(n@309@01 in nodes@266@01)]
(assert (not (Set_in n@309@01 nodes@266@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@302@01 r) (Set_in (inv@301@01 r) nodes@266@01))
    (=
      ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r))
  :qid |qp.fvfValDef77|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@294@01 r) (Set_in (inv@293@01 r) nodes@266@01))
    (=
      ($FVF.lookup_left (as sm@295@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (=>
  (Set_in n@309@01 nodes@266@01)
  (and
    (Set_in n@309@01 nodes@266@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01) n@309@01)
    (=>
      (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01) n@309@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
      ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
        ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
        ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01) n@309@01)
        (=>
          (not
            (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01) $Ref.null))
          (and
            (not
              (=
                ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01)
                $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01)) ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01))))
        (or
          (not
            (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01) $Ref.null))
          (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
          ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01)))
      (and
        (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
        ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01))))))
; Joined path conditions
(assert (or (not (Set_in n@309@01 nodes@266@01)) (Set_in n@309@01 nodes@266@01)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@302@01 r) (Set_in (inv@301@01 r) nodes@266@01))
    (=
      ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r))
  :qid |qp.fvfValDef77|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@294@01 r) (Set_in (inv@293@01 r) nodes@266@01))
    (=
      ($FVF.lookup_left (as sm@295@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@291@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@295@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef74|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@309@01 $Ref)) (!
  (and
    (=>
      (Set_in n@309@01 nodes@266@01)
      (and
        (Set_in n@309@01 nodes@266@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01) n@309@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01) n@309@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
          ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
        (=>
          (and
            (not
              ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
            ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
            ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01)
            ($FVF.loc_left ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01) n@309@01)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01)) ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01)
                  $Ref.null))
              (=
                ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
              ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01)))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
            ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01)))))
    (or (not (Set_in n@309@01 nodes@266@01)) (Set_in n@309@01 nodes@266@01)))
  :pattern ((Set_in n@309@01 nodes@266@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01) n@309@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@309@01 $Ref)) (!
  (and
    (=>
      (Set_in n@309@01 nodes@266@01)
      (and
        (Set_in n@309@01 nodes@266@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01) n@309@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01) n@309@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
          ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
        (=>
          (and
            (not
              ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
            ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
            ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01)
            ($FVF.loc_left ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01) n@309@01)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01)) ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01)
                  $Ref.null))
              (=
                ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
              ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01)))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
            ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01)))))
    (or (not (Set_in n@309@01 nodes@266@01)) (Set_in n@309@01 nodes@266@01)))
  :pattern ((Set_in n@309@01 nodes@266@01) ($FVF.loc_left ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01) n@309@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01)) ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@309@01 $Ref)) (!
  (=>
    (and
      (Set_in n@309@01 nodes@266@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@309@01))
        ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01)))
    (or
      (= ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01))))
  :pattern ((Set_in n@309@01 nodes@266@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@309@01) n@309@01))
  :pattern ((Set_in n@309@01 nodes@266@01) ($FVF.loc_left ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01) n@309@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01)) ($FVF.lookup_left (as sm@295@01  $FVF<left>) n@309@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.right.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked)
(declare-const n@310@01 $Ref)
(push) ; 3
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 173 | n@310@01 in nodes@266@01 | live]
; [else-branch: 173 | !(n@310@01 in nodes@266@01) | live]
(push) ; 5
; [then-branch: 173 | n@310@01 in nodes@266@01]
(assert (Set_in n@310@01 nodes@266@01))
; [eval] old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r b@239@01)
      (=
        ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef57|))
  (forall ((r $Ref)) (!
    (=>
      (= r a@229@01)
      (=
        ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef58|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef59|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01) n@310@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n@310@01 b@239@01) $Perm.Write $Perm.No)
    (ite (= n@310@01 a@229@01) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 174 | Lookup(is_marked, sm@268@01, n@310@01) | live]
; [else-branch: 174 | !(Lookup(is_marked, sm@268@01, n@310@01)) | live]
(push) ; 7
; [then-branch: 174 | Lookup(is_marked, sm@268@01, n@310@01)]
(assert ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
(pop) ; 7
(push) ; 7
; [else-branch: 174 | !(Lookup(is_marked, sm@268@01, n@310@01))]
(assert (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@302@01 r) (Set_in (inv@301@01 r) nodes@266@01))
      (=
        ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r))
    :qid |qp.fvfValDef77|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef78|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01) n@310@01))
(push) ; 8
(assert (not (and (img@302@01 n@310@01) (Set_in (inv@301@01 n@310@01) nodes@266@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@302@01 r) (Set_in (inv@301@01 r) nodes@266@01))
    (=
      ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r))
  :qid |qp.fvfValDef77|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef78|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01) n@310@01))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
  ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01)))
(push) ; 6
; [then-branch: 175 | !(Lookup(is_marked, sm@268@01, n@310@01)) && Lookup(is_marked, sm@303@01, n@310@01) | live]
; [else-branch: 175 | !(!(Lookup(is_marked, sm@268@01, n@310@01)) && Lookup(is_marked, sm@303@01, n@310@01)) | live]
(push) ; 7
; [then-branch: 175 | !(Lookup(is_marked, sm@268@01, n@310@01)) && Lookup(is_marked, sm@303@01, n@310@01)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
  ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01)))
; [eval] n.right == null || n.right.is_marked
; [eval] n.right == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@298@01 r) (Set_in (inv@297@01 r) nodes@266@01))
      (=
        ($FVF.lookup_right (as sm@299@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r))
    :qid |qp.fvfValDef75|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef76|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01) n@310@01))
(push) ; 8
(assert (not (and (img@298@01 n@310@01) (Set_in (inv@297@01 n@310@01) nodes@266@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 176 | Lookup(right, sm@299@01, n@310@01) == Null | live]
; [else-branch: 176 | Lookup(right, sm@299@01, n@310@01) != Null | live]
(push) ; 9
; [then-branch: 176 | Lookup(right, sm@299@01, n@310@01) == Null]
(assert (= ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01) $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 176 | Lookup(right, sm@299@01, n@310@01) != Null]
(assert (not (= ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@298@01 r) (Set_in (inv@297@01 r) nodes@266@01))
      (=
        ($FVF.lookup_right (as sm@299@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r))
    :qid |qp.fvfValDef75|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef76|))))
(push) ; 10
(assert (not (and (img@298@01 n@310@01) (Set_in (inv@297@01 n@310@01) nodes@266@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@302@01 r) (Set_in (inv@301@01 r) nodes@266@01))
      (=
        ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r))
    :qid |qp.fvfValDef77|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef78|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01)) ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01)))
(push) ; 10
(assert (not (and
  (img@302@01 ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01))
  (Set_in (inv@301@01 ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01)) nodes@266@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@298@01 r) (Set_in (inv@297@01 r) nodes@266@01))
    (=
      ($FVF.lookup_right (as sm@299@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef76|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@302@01 r) (Set_in (inv@301@01 r) nodes@266@01))
    (=
      ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r))
  :qid |qp.fvfValDef77|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef78|)))
(assert (=>
  (not (= ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01)) ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01)))))
(assert (or
  (not (= ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01) $Ref.null))
  (= ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01) $Ref.null)))
(pop) ; 7
(push) ; 7
; [else-branch: 175 | !(!(Lookup(is_marked, sm@268@01, n@310@01)) && Lookup(is_marked, sm@303@01, n@310@01))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
    ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@298@01 r) (Set_in (inv@297@01 r) nodes@266@01))
    (=
      ($FVF.lookup_right (as sm@299@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef76|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@302@01 r) (Set_in (inv@301@01 r) nodes@266@01))
    (=
      ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r))
  :qid |qp.fvfValDef77|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef78|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
    ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
    ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01) n@310@01)
    (=>
      (not
        (= ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01) $Ref.null))
      (and
        (not
          (= ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01)) ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01))))
    (or
      (not
        (= ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01) $Ref.null))
      (= ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
      ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01)))
  (and
    (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
    ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 173 | !(n@310@01 in nodes@266@01)]
(assert (not (Set_in n@310@01 nodes@266@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@302@01 r) (Set_in (inv@301@01 r) nodes@266@01))
    (=
      ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r))
  :qid |qp.fvfValDef77|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@298@01 r) (Set_in (inv@297@01 r) nodes@266@01))
    (=
      ($FVF.lookup_right (as sm@299@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef76|)))
(assert (=>
  (Set_in n@310@01 nodes@266@01)
  (and
    (Set_in n@310@01 nodes@266@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01) n@310@01)
    (=>
      (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01) n@310@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
      ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
        ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
        ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01) n@310@01)
        (=>
          (not
            (=
              ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01)
              $Ref.null))
          (and
            (not
              (=
                ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01)
                $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01)) ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01))))
        (or
          (not
            (=
              ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01)
              $Ref.null))
          (= ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
          ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01)))
      (and
        (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
        ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01))))))
; Joined path conditions
(assert (or (not (Set_in n@310@01 nodes@266@01)) (Set_in n@310@01 nodes@266@01)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@239@01)
    (=
      ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@229@01)
    (=
      ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@249@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@238@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@302@01 r) (Set_in (inv@301@01 r) nodes@266@01))
    (=
      ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r))
  :qid |qp.fvfValDef77|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@298@01 r) (Set_in (inv@297@01 r) nodes@266@01))
    (=
      ($FVF.lookup_right (as sm@299@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@299@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef76|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@310@01 $Ref)) (!
  (and
    (=>
      (Set_in n@310@01 nodes@266@01)
      (and
        (Set_in n@310@01 nodes@266@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01) n@310@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01) n@310@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
          ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
        (=>
          (and
            (not
              ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
            ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
            ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01)
            ($FVF.loc_right ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01) n@310@01)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01)) ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
              ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01)))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
            ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01)))))
    (or (not (Set_in n@310@01 nodes@266@01)) (Set_in n@310@01 nodes@266@01)))
  :pattern ((Set_in n@310@01 nodes@266@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01) n@310@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@310@01 $Ref)) (!
  (and
    (=>
      (Set_in n@310@01 nodes@266@01)
      (and
        (Set_in n@310@01 nodes@266@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01) n@310@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01) n@310@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
          ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
        (=>
          (and
            (not
              ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
            ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
            ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01)
            ($FVF.loc_right ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01) n@310@01)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01)) ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
              ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01)))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
            ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01)))))
    (or (not (Set_in n@310@01 nodes@266@01)) (Set_in n@310@01 nodes@266@01)))
  :pattern ((Set_in n@310@01 nodes@266@01) ($FVF.loc_right ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01) n@310@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01)) ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@310@01 $Ref)) (!
  (=>
    (and
      (Set_in n@310@01 nodes@266@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@268@01  $FVF<is_marked>) n@310@01))
        ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01)))
    (or
      (= ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01))))
  :pattern ((Set_in n@310@01 nodes@266@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@310@01) n@310@01))
  :pattern ((Set_in n@310@01 nodes@266@01) ($FVF.loc_right ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01) n@310@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01)) ($FVF.lookup_right (as sm@299@01  $FVF<right>) n@310@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; assert (forall n: Ref :: { (n in nodes) } (n in nodes) ==> n.is_marked)
; [eval] (forall n: Ref :: { (n in nodes) } (n in nodes) ==> n.is_marked)
(declare-const n@311@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n in nodes) ==> n.is_marked
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 177 | n@311@01 in nodes@266@01 | live]
; [else-branch: 177 | !(n@311@01 in nodes@266@01) | live]
(push) ; 5
; [then-branch: 177 | n@311@01 in nodes@266@01]
(assert (Set_in n@311@01 nodes@266@01))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@302@01 r) (Set_in (inv@301@01 r) nodes@266@01))
      (=
        ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r))
    :qid |qp.fvfValDef77|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef78|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@311@01) n@311@01))
(push) ; 6
(assert (not (and (img@302@01 n@311@01) (Set_in (inv@301@01 n@311@01) nodes@266@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 177 | !(n@311@01 in nodes@266@01)]
(assert (not (Set_in n@311@01 nodes@266@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@302@01 r) (Set_in (inv@301@01 r) nodes@266@01))
    (=
      ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r))
  :qid |qp.fvfValDef77|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef78|)))
(assert (=>
  (Set_in n@311@01 nodes@266@01)
  (and
    (Set_in n@311@01 nodes@266@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@311@01) n@311@01))))
; Joined path conditions
(assert (or (not (Set_in n@311@01 nodes@266@01)) (Set_in n@311@01 nodes@266@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@302@01 r) (Set_in (inv@301@01 r) nodes@266@01))
    (=
      ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r))
  :qid |qp.fvfValDef77|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef78|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@311@01 $Ref)) (!
  (and
    (=>
      (Set_in n@311@01 nodes@266@01)
      (and
        (Set_in n@311@01 nodes@266@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@311@01) n@311@01)))
    (or (not (Set_in n@311@01 nodes@266@01)) (Set_in n@311@01 nodes@266@01)))
  :pattern ((Set_in n@311@01 nodes@266@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@67@9@67@52-aux|)))
(push) ; 3
(assert (not (forall ((n@311@01 $Ref)) (!
  (=>
    (Set_in n@311@01 nodes@266@01)
    ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@311@01))
  :pattern ((Set_in n@311@01 nodes@266@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@67@9@67@52|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n@311@01 $Ref)) (!
  (=>
    (Set_in n@311@01 nodes@266@01)
    ($FVF.lookup_is_marked (as sm@303@01  $FVF<is_marked>) n@311@01))
  :pattern ((Set_in n@311@01 nodes@266@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@67@9@67@52|)))
(pop) ; 2
(pop) ; 1
; ---------- client_failure ----------
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var a: Ref
(declare-const a@312@01 $Ref)
; [exec]
; var b: Ref
(declare-const b@313@01 $Ref)
; [exec]
; var nodes: Set[Ref]
(declare-const nodes@314@01 Set<$Ref>)
; [exec]
; a := new(left, right, is_marked)
(declare-const a@315@01 $Ref)
(assert (not (= a@315@01 $Ref.null)))
(declare-const left@316@01 $Ref)
(declare-const sm@317@01 $FVF<left>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_left (as sm@317@01  $FVF<left>) a@315@01) left@316@01))
(declare-const right@318@01 $Ref)
(declare-const sm@319@01 $FVF<right>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_right (as sm@319@01  $FVF<right>) a@315@01) right@318@01))
(declare-const is_marked@320@01 Bool)
(declare-const sm@321@01 $FVF<is_marked>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_is_marked (as sm@321@01  $FVF<is_marked>) a@315@01)
  is_marked@320@01))
(assert (not (= a@315@01 a@312@01)))
(assert (not (= a@315@01 b@313@01)))
(assert (not (Set_in a@315@01 nodes@314@01)))
; [exec]
; a.is_marked := false
(declare-const sm@322@01 $FVF<is_marked>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_is_marked (as sm@322@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@321@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@322@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@321@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@321@01  $FVF<is_marked>) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@322@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef80|)))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@322@01  $FVF<is_marked>) a@315@01) a@315@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@323@01 ((r $Ref)) $Perm
  (ite
    (= r a@315@01)
    ($Perm.min (ite (= r a@315@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@323@01 a@315@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r a@315@01) (= (- $Perm.Write (pTaken@323@01 r)) $Perm.No))
  
  :qid |quant-u-210|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@324@01 $FVF<is_marked>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) a@315@01) false))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) a@315@01) a@315@01))
; [exec]
; b := new(left, right, is_marked)
(declare-const b@325@01 $Ref)
(assert (not (= b@325@01 $Ref.null)))
(declare-const left@326@01 $Ref)
(declare-const sm@327@01 $FVF<left>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_left (as sm@327@01  $FVF<left>) b@325@01) left@326@01))
(declare-const right@328@01 $Ref)
(declare-const sm@329@01 $FVF<right>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_right (as sm@329@01  $FVF<right>) b@325@01) right@328@01))
(declare-const is_marked@330@01 Bool)
(declare-const sm@331@01 $FVF<is_marked>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_is_marked (as sm@331@01  $FVF<is_marked>) b@325@01)
  is_marked@330@01))
(assert (not (= b@325@01 a@315@01)))
(assert (not (= b@325@01 ($FVF.lookup_right (as sm@319@01  $FVF<right>) a@315@01))))
(assert (not (= b@325@01 ($FVF.lookup_left (as sm@317@01  $FVF<left>) a@315@01))))
(assert (not (= b@325@01 b@313@01)))
(assert (not (Set_in b@325@01 nodes@314@01)))
; [exec]
; b.is_marked := false
(declare-const sm@332@01 $FVF<is_marked>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_is_marked (as sm@332@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@331@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@332@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@331@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef81|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_is_marked (as sm@332@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@332@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef82|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@331@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@332@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef83|)))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@332@01  $FVF<is_marked>) b@325@01) b@325@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@333@01 ((r $Ref)) $Perm
  (ite
    (= r b@325@01)
    ($Perm.min (ite (= r b@325@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@334@01 ((r $Ref)) $Perm
  (ite
    (= r b@325@01)
    ($Perm.min
      (ite (= r a@315@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@333@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@333@01 b@325@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r b@325@01) (= (- $Perm.Write (pTaken@333@01 r)) $Perm.No))
  
  :qid |quant-u-213|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@335@01 $FVF<is_marked>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) b@325@01) false))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) b@325@01) b@325@01))
; [exec]
; a.left := a
(declare-const sm@336@01 $FVF<left>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_left (as sm@336@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@317@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@336@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@317@01  $FVF<left>) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_left (as sm@336@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@327@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@336@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@327@01  $FVF<left>) r))
  :qid |qp.fvfValDef85|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_left ($FVF.lookup_left (as sm@317@01  $FVF<left>) r) r)
    ($FVF.loc_left ($FVF.lookup_left (as sm@327@01  $FVF<left>) r) r))
  :pattern (($FVF.lookup_left (as sm@336@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef86|)))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@336@01  $FVF<left>) a@315@01) a@315@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@337@01 ((r $Ref)) $Perm
  (ite
    (= r a@315@01)
    ($Perm.min (ite (= r a@315@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@338@01 ((r $Ref)) $Perm
  (ite
    (= r a@315@01)
    ($Perm.min
      (ite (= r b@325@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@337@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@337@01 a@315@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r a@315@01) (= (- $Perm.Write (pTaken@337@01 r)) $Perm.No))
  
  :qid |quant-u-216|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@339@01 $FVF<left>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_left (as sm@339@01  $FVF<left>) a@315@01) a@315@01))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@339@01  $FVF<left>) a@315@01) a@315@01))
; [exec]
; a.right := a
(declare-const sm@340@01 $FVF<right>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_right (as sm@340@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@329@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@340@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@329@01  $FVF<right>) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_right (as sm@340@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@319@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@340@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@319@01  $FVF<right>) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@329@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@319@01  $FVF<right>) r) r))
  :pattern (($FVF.lookup_right (as sm@340@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef89|)))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@340@01  $FVF<right>) a@315@01) a@315@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@341@01 ((r $Ref)) $Perm
  (ite
    (= r a@315@01)
    ($Perm.min (ite (= r a@315@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@342@01 ((r $Ref)) $Perm
  (ite
    (= r a@315@01)
    ($Perm.min
      (ite (= r b@325@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@341@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@341@01 a@315@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r a@315@01) (= (- $Perm.Write (pTaken@341@01 r)) $Perm.No))
  
  :qid |quant-u-219|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@343@01 $FVF<right>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_right (as sm@343@01  $FVF<right>) a@315@01) a@315@01))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@343@01  $FVF<right>) a@315@01) a@315@01))
; [exec]
; b.left := a
(declare-const sm@344@01 $FVF<left>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_left (as sm@344@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@327@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@344@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@327@01  $FVF<left>) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_left (as sm@344@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@339@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@344@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@339@01  $FVF<left>) r))
  :qid |qp.fvfValDef91|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_left ($FVF.lookup_left (as sm@327@01  $FVF<left>) r) r)
    ($FVF.loc_left ($FVF.lookup_left (as sm@339@01  $FVF<left>) r) r))
  :pattern (($FVF.lookup_left (as sm@344@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef92|)))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@344@01  $FVF<left>) b@325@01) b@325@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@345@01 ((r $Ref)) $Perm
  (ite
    (= r b@325@01)
    ($Perm.min (ite (= r b@325@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@346@01 ((r $Ref)) $Perm
  (ite
    (= r b@325@01)
    ($Perm.min
      (ite (= r a@315@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@345@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@345@01 b@325@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r b@325@01) (= (- $Perm.Write (pTaken@345@01 r)) $Perm.No))
  
  :qid |quant-u-222|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@347@01 $FVF<left>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_left (as sm@347@01  $FVF<left>) b@325@01) a@315@01))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@347@01  $FVF<left>) b@325@01) b@325@01))
; [exec]
; b.right := a
(declare-const sm@348@01 $FVF<right>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_right (as sm@348@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@329@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@348@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@329@01  $FVF<right>) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_right (as sm@348@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@343@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@348@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@343@01  $FVF<right>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@329@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@343@01  $FVF<right>) r) r))
  :pattern (($FVF.lookup_right (as sm@348@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef95|)))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@348@01  $FVF<right>) b@325@01) b@325@01))
; Precomputing data for removing quantified permissions
(define-fun pTaken@349@01 ((r $Ref)) $Perm
  (ite
    (= r b@325@01)
    ($Perm.min (ite (= r b@325@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@350@01 ((r $Ref)) $Perm
  (ite
    (= r b@325@01)
    ($Perm.min
      (ite (= r a@315@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@349@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@349@01 b@325@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r b@325@01) (= (- $Perm.Write (pTaken@349@01 r)) $Perm.No))
  
  :qid |quant-u-225|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@351@01 $FVF<right>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_right (as sm@351@01  $FVF<right>) b@325@01) a@315@01))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@351@01  $FVF<right>) b@325@01) b@325@01))
; [exec]
; nodes := Set(a, b)
; [eval] Set(a, b)
(declare-const nodes@352@01 Set<$Ref>)
(assert (= nodes@352@01 (Set_unionone (Set_singleton a@315@01) b@325@01)))
; [exec]
; assert (forall n: Ref :: { (n in nodes) } (n in nodes) ==> !n.is_marked)
; [eval] (forall n: Ref :: { (n in nodes) } (n in nodes) ==> !n.is_marked)
(declare-const n@353@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n in nodes) ==> !n.is_marked
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 178 | n@353@01 in nodes@352@01 | live]
; [else-branch: 178 | !(n@353@01 in nodes@352@01) | live]
(push) ; 5
; [then-branch: 178 | n@353@01 in nodes@352@01]
(assert (Set_in n@353@01 nodes@352@01))
; [eval] !n.is_marked
(declare-const sm@354@01 $FVF<is_marked>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef98|)))
(declare-const pm@355@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_is_marked (as pm@355@01  $FPM) r)
    (+
      (ite (= r b@325@01) $Perm.Write $Perm.No)
      (ite (= r a@315@01) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_is_marked (as pm@355@01  $FPM) r))
  :qid |qp.resPrmSumDef99|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.perm_is_marked (as pm@355@01  $FPM) r))
  :qid |qp.resTrgDef100|)))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@353@01) n@353@01))
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_is_marked (as pm@355@01  $FPM) n@353@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 178 | !(n@353@01 in nodes@352@01)]
(assert (not (Set_in n@353@01 nodes@352@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef98|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_is_marked (as pm@355@01  $FPM) r)
    (+
      (ite (= r b@325@01) $Perm.Write $Perm.No)
      (ite (= r a@315@01) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_is_marked (as pm@355@01  $FPM) r))
  :qid |qp.resPrmSumDef99|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.perm_is_marked (as pm@355@01  $FPM) r))
  :qid |qp.resTrgDef100|)))
(assert (=>
  (Set_in n@353@01 nodes@352@01)
  (and
    (Set_in n@353@01 nodes@352@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@353@01) n@353@01))))
; Joined path conditions
(assert (or (not (Set_in n@353@01 nodes@352@01)) (Set_in n@353@01 nodes@352@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef98|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_is_marked (as pm@355@01  $FPM) r)
    (+
      (ite (= r b@325@01) $Perm.Write $Perm.No)
      (ite (= r a@315@01) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_is_marked (as pm@355@01  $FPM) r))
  :qid |qp.resPrmSumDef99|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.perm_is_marked (as pm@355@01  $FPM) r))
  :qid |qp.resTrgDef100|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@353@01 $Ref)) (!
  (and
    (=>
      (Set_in n@353@01 nodes@352@01)
      (and
        (Set_in n@353@01 nodes@352@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@353@01) n@353@01)))
    (or (not (Set_in n@353@01 nodes@352@01)) (Set_in n@353@01 nodes@352@01)))
  :pattern ((Set_in n@353@01 nodes@352@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@79@9@79@53-aux|)))
(push) ; 3
(assert (not (forall ((n@353@01 $Ref)) (!
  (=>
    (Set_in n@353@01 nodes@352@01)
    (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@353@01)))
  :pattern ((Set_in n@353@01 nodes@352@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@79@9@79@53|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n@353@01 $Ref)) (!
  (=>
    (Set_in n@353@01 nodes@352@01)
    (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@353@01)))
  :pattern ((Set_in n@353@01 nodes@352@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@79@9@79@53|)))
; [exec]
; trav_rec(nodes, a)
; [eval] (node in nodes)
(push) ; 3
(assert (not (Set_in a@315@01 nodes@352@01)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (Set_in a@315@01 nodes@352@01))
; [eval] !((null in nodes))
; [eval] (null in nodes)
(push) ; 3
(assert (not (not (Set_in $Ref.null nodes@352@01))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (not (Set_in $Ref.null nodes@352@01)))
(declare-const n@356@01 $Ref)
(push) ; 3
; [eval] (n in nodes)
(assert (Set_in n@356@01 nodes@352@01))
(pop) ; 3
(declare-fun inv@357@01 ($Ref) $Ref)
(declare-fun img@358@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@359@01 $FVF<left>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_left (as sm@359@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@339@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@339@01  $FVF<left>) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_left (as sm@359@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@347@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@347@01  $FVF<left>) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_left ($FVF.lookup_left (as sm@339@01  $FVF<left>) r) r)
    ($FVF.loc_left ($FVF.lookup_left (as sm@347@01  $FVF<left>) r) r))
  :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef103|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n1@356@01 $Ref) (n2@356@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@356@01 nodes@352@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@359@01  $FVF<left>) n1@356@01) n1@356@01))
      (and
        (Set_in n2@356@01 nodes@352@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@359@01  $FVF<left>) n2@356@01) n2@356@01))
      (= n1@356@01 n2@356@01))
    (= n1@356@01 n2@356@01))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@356@01 $Ref)) (!
  (=>
    (Set_in n@356@01 nodes@352@01)
    (and (= (inv@357@01 n@356@01) n@356@01) (img@358@01 n@356@01)))
  :pattern ((Set_in n@356@01 nodes@352@01))
  :pattern ((inv@357@01 n@356@01))
  :pattern ((img@358@01 n@356@01))
  :qid |left-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@358@01 r) (Set_in (inv@357@01 r) nodes@352@01))
    (= (inv@357@01 r) r))
  :pattern ((inv@357@01 r))
  :qid |left-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@357@01 r) nodes@352@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@359@01  $FVF<left>) r) r))
  :pattern ((inv@357@01 r))
  :qid |quant-u-227|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@360@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@357@01 r) nodes@352@01)
      (img@358@01 r)
      (= r (inv@357@01 r)))
    ($Perm.min (ite (= r a@315@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@361@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@357@01 r) nodes@352@01)
      (img@358@01 r)
      (= r (inv@357@01 r)))
    ($Perm.min
      (ite (= r b@325@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@360@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@360@01 a@315@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@357@01 r) nodes@352@01)
      (img@358@01 r)
      (= r (inv@357@01 r)))
    (= (- $Perm.Write (pTaken@360@01 r)) $Perm.No))
  
  :qid |quant-u-230|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@361@01 b@325@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@357@01 r) nodes@352@01)
      (img@358@01 r)
      (= r (inv@357@01 r)))
    (= (- (- $Perm.Write (pTaken@360@01 r)) (pTaken@361@01 r)) $Perm.No))
  
  :qid |quant-u-232|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$0@362@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n$0 in nodes)
(assert (Set_in n$0@362@01 nodes@352@01))
(pop) ; 3
(declare-fun inv@363@01 ($Ref) $Ref)
(declare-fun img@364@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@365@01 $FVF<right>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_right (as sm@365@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@343@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@365@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@343@01  $FVF<right>) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_right (as sm@365@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@351@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@365@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@351@01  $FVF<right>) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@343@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@351@01  $FVF<right>) r) r))
  :pattern (($FVF.lookup_right (as sm@365@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef106|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$01@362@01 $Ref) (n$02@362@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$01@362@01 nodes@352@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@365@01  $FVF<right>) n$01@362@01) n$01@362@01))
      (and
        (Set_in n$02@362@01 nodes@352@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@365@01  $FVF<right>) n$02@362@01) n$02@362@01))
      (= n$01@362@01 n$02@362@01))
    (= n$01@362@01 n$02@362@01))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@362@01 $Ref)) (!
  (=>
    (Set_in n$0@362@01 nodes@352@01)
    (and (= (inv@363@01 n$0@362@01) n$0@362@01) (img@364@01 n$0@362@01)))
  :pattern ((Set_in n$0@362@01 nodes@352@01))
  :pattern ((inv@363@01 n$0@362@01))
  :pattern ((img@364@01 n$0@362@01))
  :qid |right-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@364@01 r) (Set_in (inv@363@01 r) nodes@352@01))
    (= (inv@363@01 r) r))
  :pattern ((inv@363@01 r))
  :qid |right-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@363@01 r) nodes@352@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@365@01  $FVF<right>) r) r))
  :pattern ((inv@363@01 r))
  :qid |quant-u-234|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@366@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@363@01 r) nodes@352@01)
      (img@364@01 r)
      (= r (inv@363@01 r)))
    ($Perm.min (ite (= r a@315@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@367@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@363@01 r) nodes@352@01)
      (img@364@01 r)
      (= r (inv@363@01 r)))
    ($Perm.min
      (ite (= r b@325@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@366@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@366@01 a@315@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@363@01 r) nodes@352@01)
      (img@364@01 r)
      (= r (inv@363@01 r)))
    (= (- $Perm.Write (pTaken@366@01 r)) $Perm.No))
  
  :qid |quant-u-237|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@367@01 b@325@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@363@01 r) nodes@352@01)
      (img@364@01 r)
      (= r (inv@363@01 r)))
    (= (- (- $Perm.Write (pTaken@366@01 r)) (pTaken@367@01 r)) $Perm.No))
  
  :qid |quant-u-239|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
(declare-const n$1@368@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n$1 in nodes)
(assert (Set_in n$1@368@01 nodes@352@01))
(pop) ; 3
(declare-fun inv@369@01 ($Ref) $Ref)
(declare-fun img@370@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$11@368@01 $Ref) (n$12@368@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$11@368@01 nodes@352@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n$11@368@01) n$11@368@01))
      (and
        (Set_in n$12@368@01 nodes@352@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n$12@368@01) n$12@368@01))
      (= n$11@368@01 n$12@368@01))
    (= n$11@368@01 n$12@368@01))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@368@01 $Ref)) (!
  (=>
    (Set_in n$1@368@01 nodes@352@01)
    (and (= (inv@369@01 n$1@368@01) n$1@368@01) (img@370@01 n$1@368@01)))
  :pattern ((Set_in n$1@368@01 nodes@352@01))
  :pattern ((inv@369@01 n$1@368@01))
  :pattern ((img@370@01 n$1@368@01))
  :qid |is_marked-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@370@01 r) (Set_in (inv@369@01 r) nodes@352@01))
    (= (inv@369@01 r) r))
  :pattern ((inv@369@01 r))
  :qid |is_marked-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@369@01 r) nodes@352@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r) r))
  :pattern ((inv@369@01 r))
  :qid |quant-u-241|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@371@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@369@01 r) nodes@352@01)
      (img@370@01 r)
      (= r (inv@369@01 r)))
    ($Perm.min (ite (= r b@325@01) $Perm.Write $Perm.No) $Perm.Write)
    $Perm.No))
(define-fun pTaken@372@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@369@01 r) nodes@352@01)
      (img@370@01 r)
      (= r (inv@369@01 r)))
    ($Perm.min
      (ite (= r a@315@01) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@371@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@371@01 b@325@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@369@01 r) nodes@352@01)
      (img@370@01 r)
      (= r (inv@369@01 r)))
    (= (- $Perm.Write (pTaken@371@01 r)) $Perm.No))
  
  :qid |quant-u-244|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (= (- $Perm.Write (pTaken@372@01 a@315@01)) $Perm.No)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@369@01 r) nodes@352@01)
      (img@370@01 r)
      (= r (inv@369@01 r)))
    (= (- (- $Perm.Write (pTaken@371@01 r)) (pTaken@372@01 r)) $Perm.No))
  
  :qid |quant-u-246|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; Definitional axioms for snapshot map values
; [eval] (forall n$2: Ref :: { (n$2.left in nodes) } { (n$2 in nodes), n$2.left } (n$2 in nodes) && n$2.left != null ==> (n$2.left in nodes))
(declare-const n$2@373@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n$2 in nodes) && n$2.left != null ==> (n$2.left in nodes)
; [eval] (n$2 in nodes) && n$2.left != null
; [eval] (n$2 in nodes)
(push) ; 4
; [then-branch: 179 | !(n$2@373@01 in nodes@352@01) | live]
; [else-branch: 179 | n$2@373@01 in nodes@352@01 | live]
(push) ; 5
; [then-branch: 179 | !(n$2@373@01 in nodes@352@01)]
(assert (not (Set_in n$2@373@01 nodes@352@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 179 | n$2@373@01 in nodes@352@01]
(assert (Set_in n$2@373@01 nodes@352@01))
; [eval] n$2.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r a@315@01)
      (=
        ($FVF.lookup_left (as sm@359@01  $FVF<left>) r)
        ($FVF.lookup_left (as sm@339@01  $FVF<left>) r)))
    :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left (as sm@339@01  $FVF<left>) r))
    :qid |qp.fvfValDef101|))
  (forall ((r $Ref)) (!
    (=>
      (= r b@325@01)
      (=
        ($FVF.lookup_left (as sm@359@01  $FVF<left>) r)
        ($FVF.lookup_left (as sm@347@01  $FVF<left>) r)))
    :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left (as sm@347@01  $FVF<left>) r))
    :qid |qp.fvfValDef102|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_left ($FVF.lookup_left (as sm@339@01  $FVF<left>) r) r)
      ($FVF.loc_left ($FVF.lookup_left (as sm@347@01  $FVF<left>) r) r))
    :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef103|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) n$2@373@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@373@01 a@315@01) $Perm.Write $Perm.No)
    (ite (= n$2@373@01 b@325@01) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_left (as sm@359@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@339@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@339@01  $FVF<left>) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_left (as sm@359@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@347@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@347@01  $FVF<left>) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_left ($FVF.lookup_left (as sm@339@01  $FVF<left>) r) r)
    ($FVF.loc_left ($FVF.lookup_left (as sm@347@01  $FVF<left>) r) r))
  :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef103|)))
(assert (=>
  (Set_in n$2@373@01 nodes@352@01)
  (and
    (Set_in n$2@373@01 nodes@352@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) n$2@373@01))))
(assert (or (Set_in n$2@373@01 nodes@352@01) (not (Set_in n$2@373@01 nodes@352@01))))
(push) ; 4
; [then-branch: 180 | n$2@373@01 in nodes@352@01 && Lookup(left, sm@359@01, n$2@373@01) != Null | live]
; [else-branch: 180 | !(n$2@373@01 in nodes@352@01 && Lookup(left, sm@359@01, n$2@373@01) != Null) | live]
(push) ; 5
; [then-branch: 180 | n$2@373@01 in nodes@352@01 && Lookup(left, sm@359@01, n$2@373@01) != Null]
(assert (and
  (Set_in n$2@373@01 nodes@352@01)
  (not (= ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) $Ref.null))))
; [eval] (n$2.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r a@315@01)
      (=
        ($FVF.lookup_left (as sm@359@01  $FVF<left>) r)
        ($FVF.lookup_left (as sm@339@01  $FVF<left>) r)))
    :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left (as sm@339@01  $FVF<left>) r))
    :qid |qp.fvfValDef101|))
  (forall ((r $Ref)) (!
    (=>
      (= r b@325@01)
      (=
        ($FVF.lookup_left (as sm@359@01  $FVF<left>) r)
        ($FVF.lookup_left (as sm@347@01  $FVF<left>) r)))
    :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left (as sm@347@01  $FVF<left>) r))
    :qid |qp.fvfValDef102|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_left ($FVF.lookup_left (as sm@339@01  $FVF<left>) r) r)
      ($FVF.loc_left ($FVF.lookup_left (as sm@347@01  $FVF<left>) r) r))
    :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef103|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) n$2@373@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$2@373@01 a@315@01) $Perm.Write $Perm.No)
    (ite (= n$2@373@01 b@325@01) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 180 | !(n$2@373@01 in nodes@352@01 && Lookup(left, sm@359@01, n$2@373@01) != Null)]
(assert (not
  (and
    (Set_in n$2@373@01 nodes@352@01)
    (not (= ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_left (as sm@359@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@339@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@339@01  $FVF<left>) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_left (as sm@359@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@347@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@347@01  $FVF<left>) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_left ($FVF.lookup_left (as sm@339@01  $FVF<left>) r) r)
    ($FVF.loc_left ($FVF.lookup_left (as sm@347@01  $FVF<left>) r) r))
  :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef103|)))
(assert (=>
  (and
    (Set_in n$2@373@01 nodes@352@01)
    (not (= ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) $Ref.null)))
  (and
    (Set_in n$2@373@01 nodes@352@01)
    (not (= ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) n$2@373@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@373@01 nodes@352@01)
      (not
        (= ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) $Ref.null))))
  (and
    (Set_in n$2@373@01 nodes@352@01)
    (not (= ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_left (as sm@359@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@339@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@339@01  $FVF<left>) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_left (as sm@359@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@347@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@347@01  $FVF<left>) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_left ($FVF.lookup_left (as sm@339@01  $FVF<left>) r) r)
    ($FVF.loc_left ($FVF.lookup_left (as sm@347@01  $FVF<left>) r) r))
  :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef103|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@373@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@373@01 nodes@352@01)
      (and
        (Set_in n$2@373@01 nodes@352@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) n$2@373@01)))
    (or (Set_in n$2@373@01 nodes@352@01) (not (Set_in n$2@373@01 nodes@352@01)))
    (=>
      (and
        (Set_in n$2@373@01 nodes@352@01)
        (not
          (= ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) $Ref.null)))
      (and
        (Set_in n$2@373@01 nodes@352@01)
        (not
          (= ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) n$2@373@01)))
    (or
      (not
        (and
          (Set_in n$2@373@01 nodes@352@01)
          (not
            (=
              ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01)
              $Ref.null))))
      (and
        (Set_in n$2@373@01 nodes@352@01)
        (not
          (= ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) nodes@352@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(assert (forall ((n$2@373@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@373@01 nodes@352@01)
      (and
        (Set_in n$2@373@01 nodes@352@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) n$2@373@01)))
    (or (Set_in n$2@373@01 nodes@352@01) (not (Set_in n$2@373@01 nodes@352@01)))
    (=>
      (and
        (Set_in n$2@373@01 nodes@352@01)
        (not
          (= ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) $Ref.null)))
      (and
        (Set_in n$2@373@01 nodes@352@01)
        (not
          (= ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) n$2@373@01)))
    (or
      (not
        (and
          (Set_in n$2@373@01 nodes@352@01)
          (not
            (=
              ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01)
              $Ref.null))))
      (and
        (Set_in n$2@373@01 nodes@352@01)
        (not
          (= ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) $Ref.null)))))
  :pattern ((Set_in n$2@373@01 nodes@352@01) ($FVF.loc_left ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) n$2@373@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(push) ; 3
(assert (not (forall ((n$2@373@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@373@01 nodes@352@01)
      (not
        (= ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) nodes@352@01))
  :pattern ((Set_in ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) nodes@352@01))
  :pattern ((Set_in n$2@373@01 nodes@352@01) ($FVF.loc_left ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) n$2@373@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$2@373@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@373@01 nodes@352@01)
      (not
        (= ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) nodes@352@01))
  :pattern ((Set_in ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) nodes@352@01))
  :pattern ((Set_in n$2@373@01 nodes@352@01) ($FVF.loc_left ($FVF.lookup_left (as sm@359@01  $FVF<left>) n$2@373@01) n$2@373@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|)))
; [eval] (forall n$3: Ref :: { (n$3.right in nodes) } { (n$3 in nodes), n$3.right } (n$3 in nodes) && n$3.right != null ==> (n$3.right in nodes))
(declare-const n$3@374@01 $Ref)
(push) ; 3
; [eval] (n$3 in nodes) && n$3.right != null ==> (n$3.right in nodes)
; [eval] (n$3 in nodes) && n$3.right != null
; [eval] (n$3 in nodes)
(push) ; 4
; [then-branch: 181 | !(n$3@374@01 in nodes@352@01) | live]
; [else-branch: 181 | n$3@374@01 in nodes@352@01 | live]
(push) ; 5
; [then-branch: 181 | !(n$3@374@01 in nodes@352@01)]
(assert (not (Set_in n$3@374@01 nodes@352@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 181 | n$3@374@01 in nodes@352@01]
(assert (Set_in n$3@374@01 nodes@352@01))
; [eval] n$3.right != null
(declare-const sm@375@01 $FVF<right>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_right (as sm@375@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@351@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@375@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@351@01  $FVF<right>) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_right (as sm@375@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@343@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@375@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@343@01  $FVF<right>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@351@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@343@01  $FVF<right>) r) r))
  :pattern (($FVF.lookup_right (as sm@375@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef109|)))
(declare-const pm@376@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_right (as pm@376@01  $FPM) r)
    (+
      (ite (= r b@325@01) $Perm.Write $Perm.No)
      (ite (= r a@315@01) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_right (as pm@376@01  $FPM) r))
  :qid |qp.resPrmSumDef110|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@375@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@351@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@343@01  $FVF<right>) r) r))
  :pattern (($FVF.perm_right (as pm@376@01  $FPM) r))
  :qid |qp.resTrgDef111|)))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01) n$3@374@01))
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_right (as pm@376@01  $FPM) n$3@374@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_right (as sm@375@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@351@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@375@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@351@01  $FVF<right>) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_right (as sm@375@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@343@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@375@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@343@01  $FVF<right>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@351@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@343@01  $FVF<right>) r) r))
  :pattern (($FVF.lookup_right (as sm@375@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_right (as pm@376@01  $FPM) r)
    (+
      (ite (= r b@325@01) $Perm.Write $Perm.No)
      (ite (= r a@315@01) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_right (as pm@376@01  $FPM) r))
  :qid |qp.resPrmSumDef110|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@375@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@351@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@343@01  $FVF<right>) r) r))
  :pattern (($FVF.perm_right (as pm@376@01  $FPM) r))
  :qid |qp.resTrgDef111|)))
(assert (=>
  (Set_in n$3@374@01 nodes@352@01)
  (and
    (Set_in n$3@374@01 nodes@352@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01) n$3@374@01))))
(assert (or (Set_in n$3@374@01 nodes@352@01) (not (Set_in n$3@374@01 nodes@352@01))))
(push) ; 4
; [then-branch: 182 | n$3@374@01 in nodes@352@01 && Lookup(right, sm@375@01, n$3@374@01) != Null | live]
; [else-branch: 182 | !(n$3@374@01 in nodes@352@01 && Lookup(right, sm@375@01, n$3@374@01) != Null) | live]
(push) ; 5
; [then-branch: 182 | n$3@374@01 in nodes@352@01 && Lookup(right, sm@375@01, n$3@374@01) != Null]
(assert (and
  (Set_in n$3@374@01 nodes@352@01)
  (not (= ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01) $Ref.null))))
; [eval] (n$3.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r b@325@01)
      (=
        ($FVF.lookup_right (as sm@375@01  $FVF<right>) r)
        ($FVF.lookup_right (as sm@351@01  $FVF<right>) r)))
    :pattern (($FVF.lookup_right (as sm@375@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right (as sm@351@01  $FVF<right>) r))
    :qid |qp.fvfValDef107|))
  (forall ((r $Ref)) (!
    (=>
      (= r a@315@01)
      (=
        ($FVF.lookup_right (as sm@375@01  $FVF<right>) r)
        ($FVF.lookup_right (as sm@343@01  $FVF<right>) r)))
    :pattern (($FVF.lookup_right (as sm@375@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right (as sm@343@01  $FVF<right>) r))
    :qid |qp.fvfValDef108|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_right ($FVF.lookup_right (as sm@351@01  $FVF<right>) r) r)
      ($FVF.loc_right ($FVF.lookup_right (as sm@343@01  $FVF<right>) r) r))
    :pattern (($FVF.lookup_right (as sm@375@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef109|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01) n$3@374@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n$3@374@01 b@325@01) $Perm.Write $Perm.No)
    (ite (= n$3@374@01 a@315@01) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 182 | !(n$3@374@01 in nodes@352@01 && Lookup(right, sm@375@01, n$3@374@01) != Null)]
(assert (not
  (and
    (Set_in n$3@374@01 nodes@352@01)
    (not
      (= ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_right (as sm@375@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@351@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@375@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@351@01  $FVF<right>) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_right (as sm@375@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@343@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@375@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@343@01  $FVF<right>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@351@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@343@01  $FVF<right>) r) r))
  :pattern (($FVF.lookup_right (as sm@375@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (=>
  (and
    (Set_in n$3@374@01 nodes@352@01)
    (not
      (= ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01) $Ref.null)))
  (and
    (Set_in n$3@374@01 nodes@352@01)
    (not
      (= ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01) n$3@374@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$3@374@01 nodes@352@01)
      (not
        (= ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01) $Ref.null))))
  (and
    (Set_in n$3@374@01 nodes@352@01)
    (not
      (= ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_right (as sm@375@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@351@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@375@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@351@01  $FVF<right>) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_right (as sm@375@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@343@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@375@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@343@01  $FVF<right>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@351@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@343@01  $FVF<right>) r) r))
  :pattern (($FVF.lookup_right (as sm@375@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_right (as pm@376@01  $FPM) r)
    (+
      (ite (= r b@325@01) $Perm.Write $Perm.No)
      (ite (= r a@315@01) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_right (as pm@376@01  $FPM) r))
  :qid |qp.resPrmSumDef110|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@375@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@351@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@343@01  $FVF<right>) r) r))
  :pattern (($FVF.perm_right (as pm@376@01  $FPM) r))
  :qid |qp.resTrgDef111|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$3@374@01 $Ref)) (!
  (and
    (=>
      (Set_in n$3@374@01 nodes@352@01)
      (and
        (Set_in n$3@374@01 nodes@352@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01) n$3@374@01)))
    (or (Set_in n$3@374@01 nodes@352@01) (not (Set_in n$3@374@01 nodes@352@01)))
    (=>
      (and
        (Set_in n$3@374@01 nodes@352@01)
        (not
          (=
            ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01)
            $Ref.null)))
      (and
        (Set_in n$3@374@01 nodes@352@01)
        (not
          (=
            ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01)
            $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01) n$3@374@01)))
    (or
      (not
        (and
          (Set_in n$3@374@01 nodes@352@01)
          (not
            (=
              ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01)
              $Ref.null))))
      (and
        (Set_in n$3@374@01 nodes@352@01)
        (not
          (=
            ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01)
            $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01) nodes@352@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(assert (forall ((n$3@374@01 $Ref)) (!
  (and
    (=>
      (Set_in n$3@374@01 nodes@352@01)
      (and
        (Set_in n$3@374@01 nodes@352@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01) n$3@374@01)))
    (or (Set_in n$3@374@01 nodes@352@01) (not (Set_in n$3@374@01 nodes@352@01)))
    (=>
      (and
        (Set_in n$3@374@01 nodes@352@01)
        (not
          (=
            ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01)
            $Ref.null)))
      (and
        (Set_in n$3@374@01 nodes@352@01)
        (not
          (=
            ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01)
            $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01) n$3@374@01)))
    (or
      (not
        (and
          (Set_in n$3@374@01 nodes@352@01)
          (not
            (=
              ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01)
              $Ref.null))))
      (and
        (Set_in n$3@374@01 nodes@352@01)
        (not
          (=
            ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01)
            $Ref.null)))))
  :pattern ((Set_in n$3@374@01 nodes@352@01) ($FVF.loc_right ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01) n$3@374@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38-aux|)))
(push) ; 3
(assert (not (forall ((n$3@374@01 $Ref)) (!
  (=>
    (and
      (Set_in n$3@374@01 nodes@352@01)
      (not
        (= ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01) nodes@352@01))
  :pattern ((Set_in ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01) nodes@352@01))
  :pattern ((Set_in n$3@374@01 nodes@352@01) ($FVF.loc_right ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01) n$3@374@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (forall ((n$3@374@01 $Ref)) (!
  (=>
    (and
      (Set_in n$3@374@01 nodes@352@01)
      (not
        (= ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01) nodes@352@01))
  :pattern ((Set_in ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01) nodes@352@01))
  :pattern ((Set_in n$3@374@01 nodes@352@01) ($FVF.loc_right ($FVF.lookup_right (as sm@375@01  $FVF<right>) n$3@374@01) n$3@374@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@23@28@23@38|)))
; [eval] !node.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r b@325@01)
      (=
        ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef96|))
  (forall ((r $Ref)) (!
    (=>
      (= r a@315@01)
      (=
        ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef97|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef98|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) a@315@01) a@315@01))
(push) ; 3
(assert (not (< $Perm.No (+ (ite (= a@315@01 b@325@01) $Perm.Write $Perm.No) $Perm.Write))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) a@315@01))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) a@315@01)))
(declare-const $t@377@01 $Snap)
(assert (= $t@377@01 ($Snap.combine ($Snap.first $t@377@01) ($Snap.second $t@377@01))))
(assert (= ($Snap.first $t@377@01) $Snap.unit))
; [eval] (node in nodes)
(assert (=
  ($Snap.second $t@377@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@377@01))
    ($Snap.second ($Snap.second $t@377@01)))))
(assert (= ($Snap.first ($Snap.second $t@377@01)) $Snap.unit))
; [eval] !((null in nodes))
; [eval] (null in nodes)
(assert (=
  ($Snap.second ($Snap.second $t@377@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@377@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))
(declare-const n$4@378@01 $Ref)
(push) ; 3
; [eval] (n$4 in nodes)
(assert (Set_in n$4@378@01 nodes@352@01))
(pop) ; 3
(declare-fun inv@379@01 ($Ref) $Ref)
(declare-fun img@380@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$41@378@01 $Ref) (n$42@378@01 $Ref)) (!
  (=>
    (and
      (Set_in n$41@378@01 nodes@352@01)
      (Set_in n$42@378@01 nodes@352@01)
      (= n$41@378@01 n$42@378@01))
    (= n$41@378@01 n$42@378@01))
  
  :qid |left-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$4@378@01 $Ref)) (!
  (=>
    (Set_in n$4@378@01 nodes@352@01)
    (and (= (inv@379@01 n$4@378@01) n$4@378@01) (img@380@01 n$4@378@01)))
  :pattern ((Set_in n$4@378@01 nodes@352@01))
  :pattern ((inv@379@01 n$4@378@01))
  :pattern ((img@380@01 n$4@378@01))
  :qid |quant-u-248|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@380@01 r) (Set_in (inv@379@01 r) nodes@352@01))
    (= (inv@379@01 r) r))
  :pattern ((inv@379@01 r))
  :qid |left-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$4@378@01 $Ref)) (!
  (=> (Set_in n$4@378@01 nodes@352@01) (not (= n$4@378@01 $Ref.null)))
  :pattern ((Set_in n$4@378@01 nodes@352@01))
  :pattern ((inv@379@01 n$4@378@01))
  :pattern ((img@380@01 n$4@378@01))
  :qid |left-permImpliesNonNull|)))
(declare-const sm@381@01 $FVF<left>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@380@01 r) (Set_in (inv@379@01 r) nodes@352@01))
    (=
      ($FVF.lookup_left (as sm@381@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef113|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@379@01 r) nodes@352@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) r) r))
  :pattern ((inv@379@01 r))
  :qid |quant-u-249|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@377@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))
(declare-const n$5@382@01 $Ref)
(push) ; 3
; [eval] (n$5 in nodes)
(assert (Set_in n$5@382@01 nodes@352@01))
(pop) ; 3
(declare-fun inv@383@01 ($Ref) $Ref)
(declare-fun img@384@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$51@382@01 $Ref) (n$52@382@01 $Ref)) (!
  (=>
    (and
      (Set_in n$51@382@01 nodes@352@01)
      (Set_in n$52@382@01 nodes@352@01)
      (= n$51@382@01 n$52@382@01))
    (= n$51@382@01 n$52@382@01))
  
  :qid |right-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$5@382@01 $Ref)) (!
  (=>
    (Set_in n$5@382@01 nodes@352@01)
    (and (= (inv@383@01 n$5@382@01) n$5@382@01) (img@384@01 n$5@382@01)))
  :pattern ((Set_in n$5@382@01 nodes@352@01))
  :pattern ((inv@383@01 n$5@382@01))
  :pattern ((img@384@01 n$5@382@01))
  :qid |quant-u-251|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@384@01 r) (Set_in (inv@383@01 r) nodes@352@01))
    (= (inv@383@01 r) r))
  :pattern ((inv@383@01 r))
  :qid |right-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$5@382@01 $Ref)) (!
  (=> (Set_in n$5@382@01 nodes@352@01) (not (= n$5@382@01 $Ref.null)))
  :pattern ((Set_in n$5@382@01 nodes@352@01))
  :pattern ((inv@383@01 n$5@382@01))
  :pattern ((img@384@01 n$5@382@01))
  :qid |right-permImpliesNonNull|)))
(declare-const sm@385@01 $FVF<right>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@384@01 r) (Set_in (inv@383@01 r) nodes@352@01))
    (=
      ($FVF.lookup_right (as sm@385@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef115|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@383@01 r) nodes@352@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) r) r))
  :pattern ((inv@383@01 r))
  :qid |quant-u-252|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))
(declare-const n$6@386@01 $Ref)
(push) ; 3
; [eval] (n$6 in nodes)
(assert (Set_in n$6@386@01 nodes@352@01))
(pop) ; 3
(declare-fun inv@387@01 ($Ref) $Ref)
(declare-fun img@388@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$61@386@01 $Ref) (n$62@386@01 $Ref)) (!
  (=>
    (and
      (Set_in n$61@386@01 nodes@352@01)
      (Set_in n$62@386@01 nodes@352@01)
      (= n$61@386@01 n$62@386@01))
    (= n$61@386@01 n$62@386@01))
  
  :qid |is_marked-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$6@386@01 $Ref)) (!
  (=>
    (Set_in n$6@386@01 nodes@352@01)
    (and (= (inv@387@01 n$6@386@01) n$6@386@01) (img@388@01 n$6@386@01)))
  :pattern ((Set_in n$6@386@01 nodes@352@01))
  :pattern ((inv@387@01 n$6@386@01))
  :pattern ((img@388@01 n$6@386@01))
  :qid |quant-u-254|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (= (inv@387@01 r) r))
  :pattern ((inv@387@01 r))
  :qid |is_marked-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$6@386@01 $Ref)) (!
  (=> (Set_in n$6@386@01 nodes@352@01) (not (= n$6@386@01 $Ref.null)))
  :pattern ((Set_in n$6@386@01 nodes@352@01))
  :pattern ((inv@387@01 n$6@386@01))
  :pattern ((img@388@01 n$6@386@01))
  :qid |is_marked-permImpliesNonNull|)))
(declare-const sm@389@01 $FVF<is_marked>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (=
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef117|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@387@01 r) nodes@352@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r) r))
  :pattern ((inv@387@01 r))
  :qid |quant-u-255|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))
  $Snap.unit))
; [eval] (forall n$7: Ref :: { (n$7.left in nodes) } { (n$7 in nodes), n$7.left } (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes))
(declare-const n$7@390@01 $Ref)
(push) ; 3
; [eval] (n$7 in nodes) && n$7.left != null ==> (n$7.left in nodes)
; [eval] (n$7 in nodes) && n$7.left != null
; [eval] (n$7 in nodes)
(push) ; 4
; [then-branch: 183 | !(n$7@390@01 in nodes@352@01) | live]
; [else-branch: 183 | n$7@390@01 in nodes@352@01 | live]
(push) ; 5
; [then-branch: 183 | !(n$7@390@01 in nodes@352@01)]
(assert (not (Set_in n$7@390@01 nodes@352@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 183 | n$7@390@01 in nodes@352@01]
(assert (Set_in n$7@390@01 nodes@352@01))
; [eval] n$7.left != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@380@01 r) (Set_in (inv@379@01 r) nodes@352@01))
      (=
        ($FVF.lookup_left (as sm@381@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r))
    :qid |qp.fvfValDef112|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef113|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) n$7@390@01))
(push) ; 6
(assert (not (and (img@380@01 n$7@390@01) (Set_in (inv@379@01 n$7@390@01) nodes@352@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@380@01 r) (Set_in (inv@379@01 r) nodes@352@01))
    (=
      ($FVF.lookup_left (as sm@381@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef113|)))
(assert (=>
  (Set_in n$7@390@01 nodes@352@01)
  (and
    (Set_in n$7@390@01 nodes@352@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) n$7@390@01))))
(assert (or (Set_in n$7@390@01 nodes@352@01) (not (Set_in n$7@390@01 nodes@352@01))))
(push) ; 4
; [then-branch: 184 | n$7@390@01 in nodes@352@01 && Lookup(left, sm@381@01, n$7@390@01) != Null | live]
; [else-branch: 184 | !(n$7@390@01 in nodes@352@01 && Lookup(left, sm@381@01, n$7@390@01) != Null) | live]
(push) ; 5
; [then-branch: 184 | n$7@390@01 in nodes@352@01 && Lookup(left, sm@381@01, n$7@390@01) != Null]
(assert (and
  (Set_in n$7@390@01 nodes@352@01)
  (not (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) $Ref.null))))
; [eval] (n$7.left in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@380@01 r) (Set_in (inv@379@01 r) nodes@352@01))
      (=
        ($FVF.lookup_left (as sm@381@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r))
    :qid |qp.fvfValDef112|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef113|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) n$7@390@01))
(push) ; 6
(assert (not (and (img@380@01 n$7@390@01) (Set_in (inv@379@01 n$7@390@01) nodes@352@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 184 | !(n$7@390@01 in nodes@352@01 && Lookup(left, sm@381@01, n$7@390@01) != Null)]
(assert (not
  (and
    (Set_in n$7@390@01 nodes@352@01)
    (not (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@380@01 r) (Set_in (inv@379@01 r) nodes@352@01))
    (=
      ($FVF.lookup_left (as sm@381@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef113|)))
(assert (=>
  (and
    (Set_in n$7@390@01 nodes@352@01)
    (not (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) $Ref.null)))
  (and
    (Set_in n$7@390@01 nodes@352@01)
    (not (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) $Ref.null))
    ($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) n$7@390@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$7@390@01 nodes@352@01)
      (not
        (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) $Ref.null))))
  (and
    (Set_in n$7@390@01 nodes@352@01)
    (not (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@380@01 r) (Set_in (inv@379@01 r) nodes@352@01))
    (=
      ($FVF.lookup_left (as sm@381@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef113|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$7@390@01 $Ref)) (!
  (and
    (=>
      (Set_in n$7@390@01 nodes@352@01)
      (and
        (Set_in n$7@390@01 nodes@352@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) n$7@390@01)))
    (or (Set_in n$7@390@01 nodes@352@01) (not (Set_in n$7@390@01 nodes@352@01)))
    (=>
      (and
        (Set_in n$7@390@01 nodes@352@01)
        (not
          (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) $Ref.null)))
      (and
        (Set_in n$7@390@01 nodes@352@01)
        (not
          (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) n$7@390@01)))
    (or
      (not
        (and
          (Set_in n$7@390@01 nodes@352@01)
          (not
            (=
              ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01)
              $Ref.null))))
      (and
        (Set_in n$7@390@01 nodes@352@01)
        (not
          (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) nodes@352@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@390@01 $Ref)) (!
  (and
    (=>
      (Set_in n$7@390@01 nodes@352@01)
      (and
        (Set_in n$7@390@01 nodes@352@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) n$7@390@01)))
    (or (Set_in n$7@390@01 nodes@352@01) (not (Set_in n$7@390@01 nodes@352@01)))
    (=>
      (and
        (Set_in n$7@390@01 nodes@352@01)
        (not
          (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) $Ref.null)))
      (and
        (Set_in n$7@390@01 nodes@352@01)
        (not
          (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) $Ref.null))
        ($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) n$7@390@01)))
    (or
      (not
        (and
          (Set_in n$7@390@01 nodes@352@01)
          (not
            (=
              ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01)
              $Ref.null))))
      (and
        (Set_in n$7@390@01 nodes@352@01)
        (not
          (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) $Ref.null)))))
  :pattern ((Set_in n$7@390@01 nodes@352@01) ($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) n$7@390@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$7@390@01 $Ref)) (!
  (=>
    (and
      (Set_in n$7@390@01 nodes@352@01)
      (not
        (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) $Ref.null)))
    (Set_in ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) nodes@352@01))
  :pattern ((Set_in ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) nodes@352@01))
  :pattern ((Set_in n$7@390@01 nodes@352@01) ($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) n$7@390@01) n$7@390@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))
  $Snap.unit))
; [eval] (forall n$8: Ref :: { (n$8.right in nodes) } { (n$8 in nodes), n$8.right } (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes))
(declare-const n$8@391@01 $Ref)
(push) ; 3
; [eval] (n$8 in nodes) && n$8.right != null ==> (n$8.right in nodes)
; [eval] (n$8 in nodes) && n$8.right != null
; [eval] (n$8 in nodes)
(push) ; 4
; [then-branch: 185 | !(n$8@391@01 in nodes@352@01) | live]
; [else-branch: 185 | n$8@391@01 in nodes@352@01 | live]
(push) ; 5
; [then-branch: 185 | !(n$8@391@01 in nodes@352@01)]
(assert (not (Set_in n$8@391@01 nodes@352@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 185 | n$8@391@01 in nodes@352@01]
(assert (Set_in n$8@391@01 nodes@352@01))
; [eval] n$8.right != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@384@01 r) (Set_in (inv@383@01 r) nodes@352@01))
      (=
        ($FVF.lookup_right (as sm@385@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r))
    :qid |qp.fvfValDef114|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef115|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01) n$8@391@01))
(push) ; 6
(assert (not (and (img@384@01 n$8@391@01) (Set_in (inv@383@01 n$8@391@01) nodes@352@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@384@01 r) (Set_in (inv@383@01 r) nodes@352@01))
    (=
      ($FVF.lookup_right (as sm@385@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef115|)))
(assert (=>
  (Set_in n$8@391@01 nodes@352@01)
  (and
    (Set_in n$8@391@01 nodes@352@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01) n$8@391@01))))
(assert (or (Set_in n$8@391@01 nodes@352@01) (not (Set_in n$8@391@01 nodes@352@01))))
(push) ; 4
; [then-branch: 186 | n$8@391@01 in nodes@352@01 && Lookup(right, sm@385@01, n$8@391@01) != Null | live]
; [else-branch: 186 | !(n$8@391@01 in nodes@352@01 && Lookup(right, sm@385@01, n$8@391@01) != Null) | live]
(push) ; 5
; [then-branch: 186 | n$8@391@01 in nodes@352@01 && Lookup(right, sm@385@01, n$8@391@01) != Null]
(assert (and
  (Set_in n$8@391@01 nodes@352@01)
  (not (= ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01) $Ref.null))))
; [eval] (n$8.right in nodes)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@384@01 r) (Set_in (inv@383@01 r) nodes@352@01))
      (=
        ($FVF.lookup_right (as sm@385@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r))
    :qid |qp.fvfValDef114|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef115|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01) n$8@391@01))
(push) ; 6
(assert (not (and (img@384@01 n$8@391@01) (Set_in (inv@383@01 n$8@391@01) nodes@352@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 186 | !(n$8@391@01 in nodes@352@01 && Lookup(right, sm@385@01, n$8@391@01) != Null)]
(assert (not
  (and
    (Set_in n$8@391@01 nodes@352@01)
    (not
      (= ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@384@01 r) (Set_in (inv@383@01 r) nodes@352@01))
    (=
      ($FVF.lookup_right (as sm@385@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef115|)))
(assert (=>
  (and
    (Set_in n$8@391@01 nodes@352@01)
    (not
      (= ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01) $Ref.null)))
  (and
    (Set_in n$8@391@01 nodes@352@01)
    (not
      (= ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01) $Ref.null))
    ($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01) n$8@391@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$8@391@01 nodes@352@01)
      (not
        (= ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01) $Ref.null))))
  (and
    (Set_in n$8@391@01 nodes@352@01)
    (not
      (= ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@384@01 r) (Set_in (inv@383@01 r) nodes@352@01))
    (=
      ($FVF.lookup_right (as sm@385@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef115|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$8@391@01 $Ref)) (!
  (and
    (=>
      (Set_in n$8@391@01 nodes@352@01)
      (and
        (Set_in n$8@391@01 nodes@352@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01) n$8@391@01)))
    (or (Set_in n$8@391@01 nodes@352@01) (not (Set_in n$8@391@01 nodes@352@01)))
    (=>
      (and
        (Set_in n$8@391@01 nodes@352@01)
        (not
          (=
            ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01)
            $Ref.null)))
      (and
        (Set_in n$8@391@01 nodes@352@01)
        (not
          (=
            ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01)
            $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01) n$8@391@01)))
    (or
      (not
        (and
          (Set_in n$8@391@01 nodes@352@01)
          (not
            (=
              ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01)
              $Ref.null))))
      (and
        (Set_in n$8@391@01 nodes@352@01)
        (not
          (=
            ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01)
            $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01) nodes@352@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@391@01 $Ref)) (!
  (and
    (=>
      (Set_in n$8@391@01 nodes@352@01)
      (and
        (Set_in n$8@391@01 nodes@352@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01) n$8@391@01)))
    (or (Set_in n$8@391@01 nodes@352@01) (not (Set_in n$8@391@01 nodes@352@01)))
    (=>
      (and
        (Set_in n$8@391@01 nodes@352@01)
        (not
          (=
            ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01)
            $Ref.null)))
      (and
        (Set_in n$8@391@01 nodes@352@01)
        (not
          (=
            ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01)
            $Ref.null))
        ($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01) n$8@391@01)))
    (or
      (not
        (and
          (Set_in n$8@391@01 nodes@352@01)
          (not
            (=
              ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01)
              $Ref.null))))
      (and
        (Set_in n$8@391@01 nodes@352@01)
        (not
          (=
            ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01)
            $Ref.null)))))
  :pattern ((Set_in n$8@391@01 nodes@352@01) ($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01) n$8@391@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37-aux|)))
(assert (forall ((n$8@391@01 $Ref)) (!
  (=>
    (and
      (Set_in n$8@391@01 nodes@352@01)
      (not
        (= ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01) $Ref.null)))
    (Set_in ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01) nodes@352@01))
  :pattern ((Set_in ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01) nodes@352@01))
  :pattern ((Set_in n$8@391@01 nodes@352@01) ($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) n$8@391@01) n$8@391@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@26@27@26@37|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } (n in nodes) ==> old(n.is_marked) ==> n.is_marked)
(declare-const n@392@01 $Ref)
(push) ; 3
; [eval] (n in nodes) ==> old(n.is_marked) ==> n.is_marked
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 187 | n@392@01 in nodes@352@01 | live]
; [else-branch: 187 | !(n@392@01 in nodes@352@01) | live]
(push) ; 5
; [then-branch: 187 | n@392@01 in nodes@352@01]
(assert (Set_in n@392@01 nodes@352@01))
; [eval] old(n.is_marked) ==> n.is_marked
; [eval] old(n.is_marked)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r b@325@01)
      (=
        ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef96|))
  (forall ((r $Ref)) (!
    (=>
      (= r a@315@01)
      (=
        ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef97|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef98|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@392@01) n@392@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n@392@01 b@325@01) $Perm.Write $Perm.No)
    (ite (= n@392@01 a@315@01) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 188 | Lookup(is_marked, sm@354@01, n@392@01) | live]
; [else-branch: 188 | !(Lookup(is_marked, sm@354@01, n@392@01)) | live]
(push) ; 7
; [then-branch: 188 | Lookup(is_marked, sm@354@01, n@392@01)]
(assert ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@392@01))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
      (=
        ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
    :qid |qp.fvfValDef116|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef117|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@392@01) n@392@01))
(push) ; 8
(assert (not (and (img@388@01 n@392@01) (Set_in (inv@387@01 n@392@01) nodes@352@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 188 | !(Lookup(is_marked, sm@354@01, n@392@01))]
(assert (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@392@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (=
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef117|)))
(assert (=>
  ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@392@01)
  (and
    ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@392@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@392@01) n@392@01))))
; Joined path conditions
(assert (or
  (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@392@01))
  ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@392@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 187 | !(n@392@01 in nodes@352@01)]
(assert (not (Set_in n@392@01 nodes@352@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef98|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (=
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef117|)))
(assert (=>
  (Set_in n@392@01 nodes@352@01)
  (and
    (Set_in n@392@01 nodes@352@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@392@01) n@392@01)
    (=>
      ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@392@01)
      (and
        ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@392@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@392@01) n@392@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@392@01))
      ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@392@01)))))
; Joined path conditions
(assert (or (not (Set_in n@392@01 nodes@352@01)) (Set_in n@392@01 nodes@352@01)))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef98|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (=
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef117|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@392@01 $Ref)) (!
  (and
    (=>
      (Set_in n@392@01 nodes@352@01)
      (and
        (Set_in n@392@01 nodes@352@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@392@01) n@392@01)
        (=>
          ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@392@01)
          (and
            ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@392@01)
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@392@01) n@392@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@392@01))
          ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@392@01))))
    (or (not (Set_in n@392@01 nodes@352@01)) (Set_in n@392@01 nodes@352@01)))
  :pattern ((Set_in n@392@01 nodes@352@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@392@01) n@392@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102-aux|)))
(assert (forall ((n@392@01 $Ref)) (!
  (=>
    (and
      (Set_in n@392@01 nodes@352@01)
      ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@392@01))
    ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@392@01))
  :pattern ((Set_in n@392@01 nodes@352@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@392@01) n@392@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@30@10@30@102|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))
  $Snap.unit))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
      (=
        ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
    :qid |qp.fvfValDef116|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef117|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) a@315@01) a@315@01))
(push) ; 3
(assert (not (and (img@388@01 a@315@01) (Set_in (inv@387@01 a@315@01) nodes@352@01))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) a@315@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.left } (n in nodes) ==> n.left == old(n.left))
(declare-const n@393@01 $Ref)
(push) ; 3
; [eval] (n in nodes) ==> n.left == old(n.left)
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 189 | n@393@01 in nodes@352@01 | live]
; [else-branch: 189 | !(n@393@01 in nodes@352@01) | live]
(push) ; 5
; [then-branch: 189 | n@393@01 in nodes@352@01]
(assert (Set_in n@393@01 nodes@352@01))
; [eval] n.left == old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@380@01 r) (Set_in (inv@379@01 r) nodes@352@01))
      (=
        ($FVF.lookup_left (as sm@381@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r))
    :qid |qp.fvfValDef112|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef113|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@393@01) n@393@01))
(push) ; 6
(assert (not (and (img@380@01 n@393@01) (Set_in (inv@379@01 n@393@01) nodes@352@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [eval] old(n.left)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r a@315@01)
      (=
        ($FVF.lookup_left (as sm@359@01  $FVF<left>) r)
        ($FVF.lookup_left (as sm@339@01  $FVF<left>) r)))
    :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left (as sm@339@01  $FVF<left>) r))
    :qid |qp.fvfValDef101|))
  (forall ((r $Ref)) (!
    (=>
      (= r b@325@01)
      (=
        ($FVF.lookup_left (as sm@359@01  $FVF<left>) r)
        ($FVF.lookup_left (as sm@347@01  $FVF<left>) r)))
    :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left (as sm@347@01  $FVF<left>) r))
    :qid |qp.fvfValDef102|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_left ($FVF.lookup_left (as sm@339@01  $FVF<left>) r) r)
      ($FVF.loc_left ($FVF.lookup_left (as sm@347@01  $FVF<left>) r) r))
    :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef103|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@359@01  $FVF<left>) n@393@01) n@393@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n@393@01 a@315@01) $Perm.Write $Perm.No)
    (ite (= n@393@01 b@325@01) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 189 | !(n@393@01 in nodes@352@01)]
(assert (not (Set_in n@393@01 nodes@352@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@380@01 r) (Set_in (inv@379@01 r) nodes@352@01))
    (=
      ($FVF.lookup_left (as sm@381@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef113|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_left (as sm@359@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@339@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@339@01  $FVF<left>) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_left (as sm@359@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@347@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@347@01  $FVF<left>) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_left ($FVF.lookup_left (as sm@339@01  $FVF<left>) r) r)
    ($FVF.loc_left ($FVF.lookup_left (as sm@347@01  $FVF<left>) r) r))
  :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef103|)))
(assert (=>
  (Set_in n@393@01 nodes@352@01)
  (and
    (Set_in n@393@01 nodes@352@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@393@01) n@393@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@359@01  $FVF<left>) n@393@01) n@393@01))))
; Joined path conditions
(assert (or (not (Set_in n@393@01 nodes@352@01)) (Set_in n@393@01 nodes@352@01)))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@380@01 r) (Set_in (inv@379@01 r) nodes@352@01))
    (=
      ($FVF.lookup_left (as sm@381@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef113|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_left (as sm@359@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@339@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@339@01  $FVF<left>) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_left (as sm@359@01  $FVF<left>) r)
      ($FVF.lookup_left (as sm@347@01  $FVF<left>) r)))
  :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left (as sm@347@01  $FVF<left>) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_left ($FVF.lookup_left (as sm@339@01  $FVF<left>) r) r)
    ($FVF.loc_left ($FVF.lookup_left (as sm@347@01  $FVF<left>) r) r))
  :pattern (($FVF.lookup_left (as sm@359@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef103|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@393@01 $Ref)) (!
  (and
    (=>
      (Set_in n@393@01 nodes@352@01)
      (and
        (Set_in n@393@01 nodes@352@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@393@01) n@393@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@359@01  $FVF<left>) n@393@01) n@393@01)))
    (or (not (Set_in n@393@01 nodes@352@01)) (Set_in n@393@01 nodes@352@01)))
  :pattern ((Set_in n@393@01 nodes@352@01) ($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@393@01) n@393@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86-aux|)))
(assert (forall ((n@393@01 $Ref)) (!
  (=>
    (Set_in n@393@01 nodes@352@01)
    (=
      ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@393@01)
      ($FVF.lookup_left (as sm@359@01  $FVF<left>) n@393@01)))
  :pattern ((Set_in n@393@01 nodes@352@01) ($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@393@01) n@393@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@34@10@34@86|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.right } (n in nodes) ==> n.right == old(n.right))
(declare-const n@394@01 $Ref)
(push) ; 3
; [eval] (n in nodes) ==> n.right == old(n.right)
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 190 | n@394@01 in nodes@352@01 | live]
; [else-branch: 190 | !(n@394@01 in nodes@352@01) | live]
(push) ; 5
; [then-branch: 190 | n@394@01 in nodes@352@01]
(assert (Set_in n@394@01 nodes@352@01))
; [eval] n.right == old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@384@01 r) (Set_in (inv@383@01 r) nodes@352@01))
      (=
        ($FVF.lookup_right (as sm@385@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r))
    :qid |qp.fvfValDef114|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef115|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@394@01) n@394@01))
(push) ; 6
(assert (not (and (img@384@01 n@394@01) (Set_in (inv@383@01 n@394@01) nodes@352@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
; [eval] old(n.right)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r b@325@01)
      (=
        ($FVF.lookup_right (as sm@375@01  $FVF<right>) r)
        ($FVF.lookup_right (as sm@351@01  $FVF<right>) r)))
    :pattern (($FVF.lookup_right (as sm@375@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right (as sm@351@01  $FVF<right>) r))
    :qid |qp.fvfValDef107|))
  (forall ((r $Ref)) (!
    (=>
      (= r a@315@01)
      (=
        ($FVF.lookup_right (as sm@375@01  $FVF<right>) r)
        ($FVF.lookup_right (as sm@343@01  $FVF<right>) r)))
    :pattern (($FVF.lookup_right (as sm@375@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right (as sm@343@01  $FVF<right>) r))
    :qid |qp.fvfValDef108|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_right ($FVF.lookup_right (as sm@351@01  $FVF<right>) r) r)
      ($FVF.loc_right ($FVF.lookup_right (as sm@343@01  $FVF<right>) r) r))
    :pattern (($FVF.lookup_right (as sm@375@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef109|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@375@01  $FVF<right>) n@394@01) n@394@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n@394@01 b@325@01) $Perm.Write $Perm.No)
    (ite (= n@394@01 a@315@01) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 190 | !(n@394@01 in nodes@352@01)]
(assert (not (Set_in n@394@01 nodes@352@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@384@01 r) (Set_in (inv@383@01 r) nodes@352@01))
    (=
      ($FVF.lookup_right (as sm@385@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef115|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_right (as sm@375@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@351@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@375@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@351@01  $FVF<right>) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_right (as sm@375@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@343@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@375@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@343@01  $FVF<right>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@351@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@343@01  $FVF<right>) r) r))
  :pattern (($FVF.lookup_right (as sm@375@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef109|)))
(assert (=>
  (Set_in n@394@01 nodes@352@01)
  (and
    (Set_in n@394@01 nodes@352@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@394@01) n@394@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@375@01  $FVF<right>) n@394@01) n@394@01))))
; Joined path conditions
(assert (or (not (Set_in n@394@01 nodes@352@01)) (Set_in n@394@01 nodes@352@01)))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@384@01 r) (Set_in (inv@383@01 r) nodes@352@01))
    (=
      ($FVF.lookup_right (as sm@385@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef115|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_right (as sm@375@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@351@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@375@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@351@01  $FVF<right>) r))
  :qid |qp.fvfValDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_right (as sm@375@01  $FVF<right>) r)
      ($FVF.lookup_right (as sm@343@01  $FVF<right>) r)))
  :pattern (($FVF.lookup_right (as sm@375@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right (as sm@343@01  $FVF<right>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@351@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right (as sm@343@01  $FVF<right>) r) r))
  :pattern (($FVF.lookup_right (as sm@375@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef109|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@394@01 $Ref)) (!
  (and
    (=>
      (Set_in n@394@01 nodes@352@01)
      (and
        (Set_in n@394@01 nodes@352@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@394@01) n@394@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@375@01  $FVF<right>) n@394@01) n@394@01)))
    (or (not (Set_in n@394@01 nodes@352@01)) (Set_in n@394@01 nodes@352@01)))
  :pattern ((Set_in n@394@01 nodes@352@01) ($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@394@01) n@394@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89-aux|)))
(assert (forall ((n@394@01 $Ref)) (!
  (=>
    (Set_in n@394@01 nodes@352@01)
    (=
      ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@394@01)
      ($FVF.lookup_right (as sm@375@01  $FVF<right>) n@394@01)))
  :pattern ((Set_in n@394@01 nodes@352@01) ($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@394@01) n@394@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@35@10@35@89|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.left.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked)
(declare-const n@395@01 $Ref)
(push) ; 3
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 191 | n@395@01 in nodes@352@01 | live]
; [else-branch: 191 | !(n@395@01 in nodes@352@01) | live]
(push) ; 5
; [then-branch: 191 | n@395@01 in nodes@352@01]
(assert (Set_in n@395@01 nodes@352@01))
; [eval] old(!n.is_marked) && n.is_marked ==> n.left == null || n.left.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r b@325@01)
      (=
        ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef96|))
  (forall ((r $Ref)) (!
    (=>
      (= r a@315@01)
      (=
        ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef97|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef98|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01) n@395@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n@395@01 b@325@01) $Perm.Write $Perm.No)
    (ite (= n@395@01 a@315@01) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 192 | Lookup(is_marked, sm@354@01, n@395@01) | live]
; [else-branch: 192 | !(Lookup(is_marked, sm@354@01, n@395@01)) | live]
(push) ; 7
; [then-branch: 192 | Lookup(is_marked, sm@354@01, n@395@01)]
(assert ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
(pop) ; 7
(push) ; 7
; [else-branch: 192 | !(Lookup(is_marked, sm@354@01, n@395@01))]
(assert (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
      (=
        ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
    :qid |qp.fvfValDef116|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef117|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01) n@395@01))
(push) ; 8
(assert (not (and (img@388@01 n@395@01) (Set_in (inv@387@01 n@395@01) nodes@352@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (=
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef117|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01) n@395@01))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
  ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01)))
(push) ; 6
; [then-branch: 193 | !(Lookup(is_marked, sm@354@01, n@395@01)) && Lookup(is_marked, sm@389@01, n@395@01) | live]
; [else-branch: 193 | !(!(Lookup(is_marked, sm@354@01, n@395@01)) && Lookup(is_marked, sm@389@01, n@395@01)) | live]
(push) ; 7
; [then-branch: 193 | !(Lookup(is_marked, sm@354@01, n@395@01)) && Lookup(is_marked, sm@389@01, n@395@01)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
  ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01)))
; [eval] n.left == null || n.left.is_marked
; [eval] n.left == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@380@01 r) (Set_in (inv@379@01 r) nodes@352@01))
      (=
        ($FVF.lookup_left (as sm@381@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r))
    :qid |qp.fvfValDef112|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef113|))))
(assert ($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01) n@395@01))
(push) ; 8
(assert (not (and (img@380@01 n@395@01) (Set_in (inv@379@01 n@395@01) nodes@352@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 194 | Lookup(left, sm@381@01, n@395@01) == Null | live]
; [else-branch: 194 | Lookup(left, sm@381@01, n@395@01) != Null | live]
(push) ; 9
; [then-branch: 194 | Lookup(left, sm@381@01, n@395@01) == Null]
(assert (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01) $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 194 | Lookup(left, sm@381@01, n@395@01) != Null]
(assert (not (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@380@01 r) (Set_in (inv@379@01 r) nodes@352@01))
      (=
        ($FVF.lookup_left (as sm@381@01  $FVF<left>) r)
        ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r)))
    :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
    :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r))
    :qid |qp.fvfValDef112|))
  (forall ((r $Ref)) (!
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r) r)
    :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
    :qid |qp.fvfResTrgDef113|))))
(push) ; 10
(assert (not (and (img@380@01 n@395@01) (Set_in (inv@379@01 n@395@01) nodes@352@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
      (=
        ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
    :qid |qp.fvfValDef116|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef117|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01)) ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01)))
(push) ; 10
(assert (not (and
  (img@388@01 ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01))
  (Set_in (inv@387@01 ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01)) nodes@352@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@380@01 r) (Set_in (inv@379@01 r) nodes@352@01))
    (=
      ($FVF.lookup_left (as sm@381@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef113|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (=
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef117|)))
(assert (=>
  (not (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01)) ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01)))))
(assert (or
  (not (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01) $Ref.null))
  (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01) $Ref.null)))
(pop) ; 7
(push) ; 7
; [else-branch: 193 | !(!(Lookup(is_marked, sm@354@01, n@395@01)) && Lookup(is_marked, sm@389@01, n@395@01))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
    ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@380@01 r) (Set_in (inv@379@01 r) nodes@352@01))
    (=
      ($FVF.lookup_left (as sm@381@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef113|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (=
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef117|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
    ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
    ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01)
    ($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01) n@395@01)
    (=>
      (not (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01) $Ref.null))
      (and
        (not
          (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01)) ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01))))
    (or
      (not (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01) $Ref.null))
      (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01)))
  (and
    (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
    ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 191 | !(n@395@01 in nodes@352@01)]
(assert (not (Set_in n@395@01 nodes@352@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef98|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (=
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef117|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@380@01 r) (Set_in (inv@379@01 r) nodes@352@01))
    (=
      ($FVF.lookup_left (as sm@381@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef113|)))
(assert (=>
  (Set_in n@395@01 nodes@352@01)
  (and
    (Set_in n@395@01 nodes@352@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01) n@395@01)
    (=>
      (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01) n@395@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
      ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
        ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
        ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01)
        ($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01) n@395@01)
        (=>
          (not
            (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01) $Ref.null))
          (and
            (not
              (=
                ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01)
                $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01)) ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01))))
        (or
          (not
            (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01) $Ref.null))
          (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
          ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01)))
      (and
        (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
        ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01))))))
; Joined path conditions
(assert (or (not (Set_in n@395@01 nodes@352@01)) (Set_in n@395@01 nodes@352@01)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef98|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (=
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef117|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@380@01 r) (Set_in (inv@379@01 r) nodes@352@01))
    (=
      ($FVF.lookup_left (as sm@381@01  $FVF<left>) r)
      ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r)))
  :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
  :pattern (($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r) r)
  :pattern (($FVF.lookup_left (as sm@381@01  $FVF<left>) r))
  :qid |qp.fvfResTrgDef113|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@395@01 $Ref)) (!
  (and
    (=>
      (Set_in n@395@01 nodes@352@01)
      (and
        (Set_in n@395@01 nodes@352@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01) n@395@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01) n@395@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
          ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
        (=>
          (and
            (not
              ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
            ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
            ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01)
            ($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01) n@395@01)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01)) ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01)
                  $Ref.null))
              (=
                ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
              ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01)))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
            ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01)))))
    (or (not (Set_in n@395@01 nodes@352@01)) (Set_in n@395@01 nodes@352@01)))
  :pattern ((Set_in n@395@01 nodes@352@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01) n@395@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@395@01 $Ref)) (!
  (and
    (=>
      (Set_in n@395@01 nodes@352@01)
      (and
        (Set_in n@395@01 nodes@352@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01) n@395@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01) n@395@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
          ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
        (=>
          (and
            (not
              ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
            ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
            ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01)
            ($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01) n@395@01)
            (=>
              (not
                (=
                  ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01)) ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01))))
            (or
              (not
                (=
                  ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01)
                  $Ref.null))
              (=
                ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
              ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01)))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
            ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01)))))
    (or (not (Set_in n@395@01 nodes@352@01)) (Set_in n@395@01 nodes@352@01)))
  :pattern ((Set_in n@395@01 nodes@352@01) ($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01) n@395@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01)) ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103-aux|)))
(assert (forall ((n@395@01 $Ref)) (!
  (=>
    (and
      (Set_in n@395@01 nodes@352@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@395@01))
        ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01)))
    (or
      (= ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01))))
  :pattern ((Set_in n@395@01 nodes@352@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@395@01) n@395@01))
  :pattern ((Set_in n@395@01 nodes@352@01) ($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01) n@395@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01)) ($FVF.lookup_left (as sm@381@01  $FVF<left>) n@395@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@38@10@39@103|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))))
  $Snap.unit))
; [eval] (forall n: Ref :: { (n in nodes), n.is_marked } { (n in nodes), n.right.is_marked } (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked)
(declare-const n@396@01 $Ref)
(push) ; 3
; [eval] (n in nodes) ==> old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 195 | n@396@01 in nodes@352@01 | live]
; [else-branch: 195 | !(n@396@01 in nodes@352@01) | live]
(push) ; 5
; [then-branch: 195 | n@396@01 in nodes@352@01]
(assert (Set_in n@396@01 nodes@352@01))
; [eval] old(!n.is_marked) && n.is_marked ==> n.right == null || n.right.is_marked
; [eval] old(!n.is_marked) && n.is_marked
; [eval] old(!n.is_marked)
; [eval] !n.is_marked
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r b@325@01)
      (=
        ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef96|))
  (forall ((r $Ref)) (!
    (=>
      (= r a@315@01)
      (=
        ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r)))
    :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r))
    :qid |qp.fvfValDef97|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r) r)
      ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r) r))
    :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef98|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01) n@396@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite (= n@396@01 b@325@01) $Perm.Write $Perm.No)
    (ite (= n@396@01 a@315@01) $Perm.Write $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 196 | Lookup(is_marked, sm@354@01, n@396@01) | live]
; [else-branch: 196 | !(Lookup(is_marked, sm@354@01, n@396@01)) | live]
(push) ; 7
; [then-branch: 196 | Lookup(is_marked, sm@354@01, n@396@01)]
(assert ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
(pop) ; 7
(push) ; 7
; [else-branch: 196 | !(Lookup(is_marked, sm@354@01, n@396@01))]
(assert (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
      (=
        ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
    :qid |qp.fvfValDef116|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef117|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01) n@396@01))
(push) ; 8
(assert (not (and (img@388@01 n@396@01) (Set_in (inv@387@01 n@396@01) nodes@352@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (=
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef117|)))
(assert (=>
  (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01) n@396@01))))
(assert (or
  (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
  ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01)))
(push) ; 6
; [then-branch: 197 | !(Lookup(is_marked, sm@354@01, n@396@01)) && Lookup(is_marked, sm@389@01, n@396@01) | live]
; [else-branch: 197 | !(!(Lookup(is_marked, sm@354@01, n@396@01)) && Lookup(is_marked, sm@389@01, n@396@01)) | live]
(push) ; 7
; [then-branch: 197 | !(Lookup(is_marked, sm@354@01, n@396@01)) && Lookup(is_marked, sm@389@01, n@396@01)]
(assert (and
  (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
  ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01)))
; [eval] n.right == null || n.right.is_marked
; [eval] n.right == null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@384@01 r) (Set_in (inv@383@01 r) nodes@352@01))
      (=
        ($FVF.lookup_right (as sm@385@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r))
    :qid |qp.fvfValDef114|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef115|))))
(assert ($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01) n@396@01))
(push) ; 8
(assert (not (and (img@384@01 n@396@01) (Set_in (inv@383@01 n@396@01) nodes@352@01))))
(check-sat)
; unsat
(pop) ; 8
; 0,00s
; (get-info :all-statistics)
(push) ; 8
; [then-branch: 198 | Lookup(right, sm@385@01, n@396@01) == Null | live]
; [else-branch: 198 | Lookup(right, sm@385@01, n@396@01) != Null | live]
(push) ; 9
; [then-branch: 198 | Lookup(right, sm@385@01, n@396@01) == Null]
(assert (= ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01) $Ref.null))
(pop) ; 9
(push) ; 9
; [else-branch: 198 | Lookup(right, sm@385@01, n@396@01) != Null]
(assert (not (= ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01) $Ref.null)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@384@01 r) (Set_in (inv@383@01 r) nodes@352@01))
      (=
        ($FVF.lookup_right (as sm@385@01  $FVF<right>) r)
        ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r)))
    :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
    :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r))
    :qid |qp.fvfValDef114|))
  (forall ((r $Ref)) (!
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r) r)
    :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
    :qid |qp.fvfResTrgDef115|))))
(push) ; 10
(assert (not (and (img@384@01 n@396@01) (Set_in (inv@383@01 n@396@01) nodes@352@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
      (=
        ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
    :qid |qp.fvfValDef116|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef117|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01)) ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01)))
(push) ; 10
(assert (not (and
  (img@388@01 ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01))
  (Set_in (inv@387@01 ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01)) nodes@352@01))))
(check-sat)
; unsat
(pop) ; 10
; 0,00s
; (get-info :all-statistics)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@384@01 r) (Set_in (inv@383@01 r) nodes@352@01))
    (=
      ($FVF.lookup_right (as sm@385@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef115|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (=
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef117|)))
(assert (=>
  (not (= ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01) $Ref.null))
  (and
    (not (= ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01) $Ref.null))
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01)) ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01)))))
(assert (or
  (not (= ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01) $Ref.null))
  (= ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01) $Ref.null)))
(pop) ; 7
(push) ; 7
; [else-branch: 197 | !(!(Lookup(is_marked, sm@354@01, n@396@01)) && Lookup(is_marked, sm@389@01, n@396@01))]
(assert (not
  (and
    (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
    ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@384@01 r) (Set_in (inv@383@01 r) nodes@352@01))
    (=
      ($FVF.lookup_right (as sm@385@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef115|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (=
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef117|)))
(assert (=>
  (and
    (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
    ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01))
  (and
    (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
    ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01)
    ($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01) n@396@01)
    (=>
      (not
        (= ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01) $Ref.null))
      (and
        (not
          (= ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01) $Ref.null))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01)) ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01))))
    (or
      (not
        (= ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01) $Ref.null))
      (= ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01) $Ref.null)))))
; Joined path conditions
(assert (or
  (not
    (and
      (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01)))
  (and
    (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
    ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 195 | !(n@396@01 in nodes@352@01)]
(assert (not (Set_in n@396@01 nodes@352@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef98|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (=
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef117|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@384@01 r) (Set_in (inv@383@01 r) nodes@352@01))
    (=
      ($FVF.lookup_right (as sm@385@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef115|)))
(assert (=>
  (Set_in n@396@01 nodes@352@01)
  (and
    (Set_in n@396@01 nodes@352@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01) n@396@01)
    (=>
      (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01) n@396@01)))
    (or
      (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
      ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
    (=>
      (and
        (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
        ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01))
      (and
        (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
        ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01)
        ($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01) n@396@01)
        (=>
          (not
            (=
              ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01)
              $Ref.null))
          (and
            (not
              (=
                ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01)
                $Ref.null))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01)) ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01))))
        (or
          (not
            (=
              ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01)
              $Ref.null))
          (= ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01) $Ref.null))))
    (or
      (not
        (and
          (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
          ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01)))
      (and
        (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
        ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01))))))
; Joined path conditions
(assert (or (not (Set_in n@396@01 nodes@352@01)) (Set_in n@396@01 nodes@352@01)))
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r b@325@01)
    (=
      ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r a@315@01)
    (=
      ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r)))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@335@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@324@01  $FVF<is_marked>) r) r))
  :pattern (($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef98|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (=
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef117|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@384@01 r) (Set_in (inv@383@01 r) nodes@352@01))
    (=
      ($FVF.lookup_right (as sm@385@01  $FVF<right>) r)
      ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r)))
  :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
  :pattern (($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r) r)
  :pattern (($FVF.lookup_right (as sm@385@01  $FVF<right>) r))
  :qid |qp.fvfResTrgDef115|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@396@01 $Ref)) (!
  (and
    (=>
      (Set_in n@396@01 nodes@352@01)
      (and
        (Set_in n@396@01 nodes@352@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01) n@396@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01) n@396@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
          ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
        (=>
          (and
            (not
              ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
            ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
            ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01)
            ($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01) n@396@01)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01)) ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
              ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01)))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
            ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01)))))
    (or (not (Set_in n@396@01 nodes@352@01)) (Set_in n@396@01 nodes@352@01)))
  :pattern ((Set_in n@396@01 nodes@352@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01) n@396@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@396@01 $Ref)) (!
  (and
    (=>
      (Set_in n@396@01 nodes@352@01)
      (and
        (Set_in n@396@01 nodes@352@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01) n@396@01)
        (=>
          (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
            ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01) n@396@01)))
        (or
          (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
          ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
        (=>
          (and
            (not
              ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
            ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
            ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01)
            ($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01) n@396@01)
            (=>
              (not
                (=
                  ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01)
                  $Ref.null))
              (and
                (not
                  (=
                    ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01)
                    $Ref.null))
                ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01)) ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01))))
            (or
              (not
                (=
                  ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01)
                  $Ref.null))
              (=
                ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01)
                $Ref.null))))
        (or
          (not
            (and
              (not
                ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
              ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01)))
          (and
            (not
              ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
            ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01)))))
    (or (not (Set_in n@396@01 nodes@352@01)) (Set_in n@396@01 nodes@352@01)))
  :pattern ((Set_in n@396@01 nodes@352@01) ($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01) n@396@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01)) ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104-aux|)))
(assert (forall ((n@396@01 $Ref)) (!
  (=>
    (and
      (Set_in n@396@01 nodes@352@01)
      (and
        (not ($FVF.lookup_is_marked (as sm@354@01  $FVF<is_marked>) n@396@01))
        ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01)))
    (or
      (= ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01) $Ref.null)
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01))))
  :pattern ((Set_in n@396@01 nodes@352@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@396@01) n@396@01))
  :pattern ((Set_in n@396@01 nodes@352@01) ($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01) n@396@01) ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01)) ($FVF.lookup_right (as sm@385@01  $FVF<right>) n@396@01)))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@40@10@41@104|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; assert (forall n: Ref :: { (n in nodes) } (n in nodes) ==> n.is_marked)
; [eval] (forall n: Ref :: { (n in nodes) } (n in nodes) ==> n.is_marked)
(declare-const n@397@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n in nodes) ==> n.is_marked
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 199 | n@397@01 in nodes@352@01 | live]
; [else-branch: 199 | !(n@397@01 in nodes@352@01) | live]
(push) ; 5
; [then-branch: 199 | n@397@01 in nodes@352@01]
(assert (Set_in n@397@01 nodes@352@01))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
      (=
        ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
    :qid |qp.fvfValDef116|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef117|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@397@01) n@397@01))
(push) ; 6
(assert (not (and (img@388@01 n@397@01) (Set_in (inv@387@01 n@397@01) nodes@352@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 199 | !(n@397@01 in nodes@352@01)]
(assert (not (Set_in n@397@01 nodes@352@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (=
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef117|)))
(assert (=>
  (Set_in n@397@01 nodes@352@01)
  (and
    (Set_in n@397@01 nodes@352@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@397@01) n@397@01))))
; Joined path conditions
(assert (or (not (Set_in n@397@01 nodes@352@01)) (Set_in n@397@01 nodes@352@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (=
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef117|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@397@01 $Ref)) (!
  (and
    (=>
      (Set_in n@397@01 nodes@352@01)
      (and
        (Set_in n@397@01 nodes@352@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@397@01) n@397@01)))
    (or (not (Set_in n@397@01 nodes@352@01)) (Set_in n@397@01 nodes@352@01)))
  :pattern ((Set_in n@397@01 nodes@352@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@85@9@85@52-aux|)))
(push) ; 3
(assert (not (forall ((n@397@01 $Ref)) (!
  (=>
    (Set_in n@397@01 nodes@352@01)
    ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@397@01))
  :pattern ((Set_in n@397@01 nodes@352@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@85@9@85@52|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map values
(declare-const pm@398@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_is_marked (as pm@398@01  $FPM) r)
    (ite
      (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_is_marked (as pm@398@01  $FPM) r))
  :qid |qp.resPrmSumDef118|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r))
  :pattern (($FVF.perm_is_marked (as pm@398@01  $FPM) r))
  :qid |qp.resTrgDef119|)))
; Assume upper permission bound for field is_marked
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_is_marked (as pm@398@01  $FPM) r) $Perm.Write)
  :pattern (($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r) r))
  :qid |qp-fld-prm-bnd|)))
; Definitional axioms for snapshot map values
(declare-const pm@399@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_left (as pm@399@01  $FPM) r)
    (ite
      (and (img@380@01 r) (Set_in (inv@379@01 r) nodes@352@01))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_left (as pm@399@01  $FPM) r))
  :qid |qp.resPrmSumDef120|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) r) r)
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r) r))
  :pattern (($FVF.perm_left (as pm@399@01  $FPM) r))
  :qid |qp.resTrgDef121|)))
; Assume upper permission bound for field left
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_left (as pm@399@01  $FPM) r) $Perm.Write)
  :pattern (($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) r) r))
  :qid |qp-fld-prm-bnd|)))
; Definitional axioms for snapshot map values
(declare-const pm@400@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_right (as pm@400@01  $FPM) r)
    (ite
      (and (img@384@01 r) (Set_in (inv@383@01 r) nodes@352@01))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_right (as pm@400@01  $FPM) r))
  :qid |qp.resPrmSumDef122|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r) r))
  :pattern (($FVF.perm_right (as pm@400@01  $FPM) r))
  :qid |qp.resTrgDef123|)))
; Assume upper permission bound for field right
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_right (as pm@400@01  $FPM) r) $Perm.Write)
  :pattern (($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) r) r))
  :qid |qp-fld-prm-bnd|)))
; [eval] (forall n: Ref :: { (n in nodes) } (n in nodes) ==> n.is_marked)
(declare-const n@401@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n in nodes) ==> n.is_marked
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 200 | n@401@01 in nodes@352@01 | live]
; [else-branch: 200 | !(n@401@01 in nodes@352@01) | live]
(push) ; 5
; [then-branch: 200 | n@401@01 in nodes@352@01]
(assert (Set_in n@401@01 nodes@352@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map values
; Assume upper permission bound for field is_marked
; Definitional axioms for snapshot map values
; Assume upper permission bound for field left
; Definitional axioms for snapshot map values
; Assume upper permission bound for field right
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
      (=
        ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
    :qid |qp.fvfValDef116|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef117|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@401@01) n@401@01))
(set-option :timeout 0)
(push) ; 6
(assert (not (and (img@388@01 n@401@01) (Set_in (inv@387@01 n@401@01) nodes@352@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 200 | !(n@401@01 in nodes@352@01)]
(assert (not (Set_in n@401@01 nodes@352@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (=
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef117|)))
; Assume upper permission bound for field is_marked
; Definitional axioms for snapshot map values
; Assume upper permission bound for field left
; Definitional axioms for snapshot map values
; Assume upper permission bound for field right
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (=
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef117|)))
(assert (=>
  (Set_in n@401@01 nodes@352@01)
  (and
    (Set_in n@401@01 nodes@352@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@401@01) n@401@01))))
; Joined path conditions
(assert (or (not (Set_in n@401@01 nodes@352@01)) (Set_in n@401@01 nodes@352@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (=
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef117|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@401@01 $Ref)) (!
  (and
    (=>
      (Set_in n@401@01 nodes@352@01)
      (and
        (Set_in n@401@01 nodes@352@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@401@01) n@401@01)))
    (or (not (Set_in n@401@01 nodes@352@01)) (Set_in n@401@01 nodes@352@01)))
  :pattern ((Set_in n@401@01 nodes@352@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@85@9@85@52-aux|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (forall ((n@401@01 $Ref)) (!
  (=>
    (Set_in n@401@01 nodes@352@01)
    ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@401@01))
  :pattern ((Set_in n@401@01 nodes@352@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@85@9@85@52|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map values
(declare-const pm@402@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_is_marked (as pm@402@01  $FPM) r)
    (ite
      (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_is_marked (as pm@402@01  $FPM) r))
  :qid |qp.resPrmSumDef124|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r) r)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r))
  :pattern (($FVF.perm_is_marked (as pm@402@01  $FPM) r))
  :qid |qp.resTrgDef125|)))
; Assume upper permission bound for field is_marked
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_is_marked (as pm@402@01  $FPM) r) $Perm.Write)
  :pattern (($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r) r))
  :qid |qp-fld-prm-bnd|)))
; Definitional axioms for snapshot map values
(declare-const pm@403@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_left (as pm@403@01  $FPM) r)
    (ite
      (and (img@380@01 r) (Set_in (inv@379@01 r) nodes@352@01))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_left (as pm@403@01  $FPM) r))
  :qid |qp.resPrmSumDef126|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) r) r)
    ($FVF.loc_left ($FVF.lookup_left ($SortWrappers.$SnapTo$FVF<left> ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) r) r))
  :pattern (($FVF.perm_left (as pm@403@01  $FPM) r))
  :qid |qp.resTrgDef127|)))
; Assume upper permission bound for field left
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_left (as pm@403@01  $FPM) r) $Perm.Write)
  :pattern (($FVF.loc_left ($FVF.lookup_left (as sm@381@01  $FVF<left>) r) r))
  :qid |qp-fld-prm-bnd|)))
; Definitional axioms for snapshot map values
(declare-const pm@404@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_right (as pm@404@01  $FPM) r)
    (ite
      (and (img@384@01 r) (Set_in (inv@383@01 r) nodes@352@01))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_right (as pm@404@01  $FPM) r))
  :qid |qp.resPrmSumDef128|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) r) r)
    ($FVF.loc_right ($FVF.lookup_right ($SortWrappers.$SnapTo$FVF<right> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) r) r))
  :pattern (($FVF.perm_right (as pm@404@01  $FPM) r))
  :qid |qp.resTrgDef129|)))
; Assume upper permission bound for field right
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_right (as pm@404@01  $FPM) r) $Perm.Write)
  :pattern (($FVF.loc_right ($FVF.lookup_right (as sm@385@01  $FVF<right>) r) r))
  :qid |qp-fld-prm-bnd|)))
; [eval] (forall n: Ref :: { (n in nodes) } (n in nodes) ==> n.is_marked)
(declare-const n@405@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n in nodes) ==> n.is_marked
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 201 | n@405@01 in nodes@352@01 | live]
; [else-branch: 201 | !(n@405@01 in nodes@352@01) | live]
(push) ; 5
; [then-branch: 201 | n@405@01 in nodes@352@01]
(assert (Set_in n@405@01 nodes@352@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map values
; Assume upper permission bound for field is_marked
; Definitional axioms for snapshot map values
; Assume upper permission bound for field left
; Definitional axioms for snapshot map values
; Assume upper permission bound for field right
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
      (=
        ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
    :qid |qp.fvfValDef116|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef117|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@405@01) n@405@01))
(set-option :timeout 0)
(push) ; 6
(assert (not (and (img@388@01 n@405@01) (Set_in (inv@387@01 n@405@01) nodes@352@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 201 | !(n@405@01 in nodes@352@01)]
(assert (not (Set_in n@405@01 nodes@352@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (=
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef117|)))
; Assume upper permission bound for field is_marked
; Definitional axioms for snapshot map values
; Assume upper permission bound for field left
; Definitional axioms for snapshot map values
; Assume upper permission bound for field right
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (=
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef117|)))
(assert (=>
  (Set_in n@405@01 nodes@352@01)
  (and
    (Set_in n@405@01 nodes@352@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@405@01) n@405@01))))
; Joined path conditions
(assert (or (not (Set_in n@405@01 nodes@352@01)) (Set_in n@405@01 nodes@352@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (=
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef117|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@405@01 $Ref)) (!
  (and
    (=>
      (Set_in n@405@01 nodes@352@01)
      (and
        (Set_in n@405@01 nodes@352@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@405@01) n@405@01)))
    (or (not (Set_in n@405@01 nodes@352@01)) (Set_in n@405@01 nodes@352@01)))
  :pattern ((Set_in n@405@01 nodes@352@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@85@9@85@52-aux|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (forall ((n@405@01 $Ref)) (!
  (=>
    (Set_in n@405@01 nodes@352@01)
    ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@405@01))
  :pattern ((Set_in n@405@01 nodes@352@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@85@9@85@52|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map values
; Assume upper permission bound for field is_marked
; Definitional axioms for snapshot map values
; Assume upper permission bound for field left
; Definitional axioms for snapshot map values
; Assume upper permission bound for field right
; [eval] (forall n: Ref :: { (n in nodes) } (n in nodes) ==> n.is_marked)
(declare-const n@406@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n in nodes) ==> n.is_marked
; [eval] (n in nodes)
(push) ; 4
; [then-branch: 202 | n@406@01 in nodes@352@01 | live]
; [else-branch: 202 | !(n@406@01 in nodes@352@01) | live]
(push) ; 5
; [then-branch: 202 | n@406@01 in nodes@352@01]
(assert (Set_in n@406@01 nodes@352@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map values
; Assume upper permission bound for field is_marked
; Definitional axioms for snapshot map values
; Assume upper permission bound for field left
; Definitional axioms for snapshot map values
; Assume upper permission bound for field right
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
      (=
        ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
        ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
    :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
    :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
    :qid |qp.fvfValDef116|))
  (forall ((r $Ref)) (!
    ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
    :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
    :qid |qp.fvfResTrgDef117|))))
(assert ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@406@01) n@406@01))
(set-option :timeout 0)
(push) ; 6
(assert (not (and (img@388@01 n@406@01) (Set_in (inv@387@01 n@406@01) nodes@352@01))))
(check-sat)
; unsat
(pop) ; 6
; 0,00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 202 | !(n@406@01 in nodes@352@01)]
(assert (not (Set_in n@406@01 nodes@352@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (=
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef117|)))
; Assume upper permission bound for field is_marked
; Definitional axioms for snapshot map values
; Assume upper permission bound for field left
; Definitional axioms for snapshot map values
; Assume upper permission bound for field right
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (=
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef117|)))
(assert (=>
  (Set_in n@406@01 nodes@352@01)
  (and
    (Set_in n@406@01 nodes@352@01)
    ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@406@01) n@406@01))))
; Joined path conditions
(assert (or (not (Set_in n@406@01 nodes@352@01)) (Set_in n@406@01 nodes@352@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@388@01 r) (Set_in (inv@387@01 r) nodes@352@01))
    (=
      ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r)
      ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r)))
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :pattern (($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_is_marked ($FVF.lookup_is_marked ($SortWrappers.$SnapTo$FVF<is_marked> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))) r) r)
  :pattern (($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) r))
  :qid |qp.fvfResTrgDef117|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n@406@01 $Ref)) (!
  (and
    (=>
      (Set_in n@406@01 nodes@352@01)
      (and
        (Set_in n@406@01 nodes@352@01)
        ($FVF.loc_is_marked ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@406@01) n@406@01)))
    (or (not (Set_in n@406@01 nodes@352@01)) (Set_in n@406@01 nodes@352@01)))
  :pattern ((Set_in n@406@01 nodes@352@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@85@9@85@52-aux|)))
(set-option :timeout 0)
(push) ; 3
(assert (not (forall ((n@406@01 $Ref)) (!
  (=>
    (Set_in n@406@01 nodes@352@01)
    ($FVF.lookup_is_marked (as sm@389@01  $FVF<is_marked>) n@406@01))
  :pattern ((Set_in n@406@01 nodes@352@01))
  :qid |prog./silicon/silver/src/test/resources/examples/graph-marking/graph-marking.vpr@85@9@85@52|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(pop) ; 2
(pop) ; 1
