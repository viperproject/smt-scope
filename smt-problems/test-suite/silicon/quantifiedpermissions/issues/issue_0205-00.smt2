(get-info :version)
; (:version "4.8.7")
; Started: 2024-11-17 20:18:11
; Silicon.version: 1.1-SNAPSHOT (4d756c79+)
; Input file: /silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<$Ref> 0)
(declare-sort Seq<Int> 0)
(declare-sort Set<Int> 0)
(declare-sort Set<Seq<$Ref>> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<$Snap> 0)
(declare-sort $FVF<f> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<$Ref>To$Snap (Seq<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<$Ref> ($Snap) Seq<$Ref>)
(assert (forall ((x Seq<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSeq<$Ref>($SortWrappers.Seq<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Seq<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSeq<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<$Ref>To$Snap($SortWrappers.$SnapToSeq<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSeq<$Ref> x))
    :qid |$Snap.Seq<$Ref>To$SnapToSeq<$Ref>|
    )))
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<Seq<$Ref>>To$Snap (Set<Seq<$Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<$Ref>> ($Snap) Set<Seq<$Ref>>)
(assert (forall ((x Set<Seq<$Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<$Ref>>($SortWrappers.Set<Seq<$Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<$Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<$Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<$Ref>>To$Snap($SortWrappers.$SnapToSet<Seq<$Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<$Ref>> x))
    :qid |$Snap.Set<Seq<$Ref>>To$SnapToSet<Seq<$Ref>>|
    )))
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<f>To$Snap ($FVF<f>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<f> ($Snap) $FVF<f>)
(assert (forall ((x $FVF<f>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<f>($SortWrappers.$FVF<f>To$Snap x)))
    :pattern (($SortWrappers.$FVF<f>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<f>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<f>To$Snap($SortWrappers.$SnapTo$FVF<f> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<f> x))
    :qid |$Snap.$FVF<f>To$SnapTo$FVF<f>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_skolem_diff (Set<Int> Set<Int>) Int)
(declare-fun Set_card (Set<Seq<$Ref>>) Int)
(declare-const Set_empty Set<Seq<$Ref>>)
(declare-fun Set_in (Seq<$Ref> Set<Seq<$Ref>>) Bool)
(declare-fun Set_singleton (Seq<$Ref>) Set<Seq<$Ref>>)
(declare-fun Set_unionone (Set<Seq<$Ref>> Seq<$Ref>) Set<Seq<$Ref>>)
(declare-fun Set_union (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_intersection (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_difference (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_subset (Set<Seq<$Ref>> Set<Seq<$Ref>>) Bool)
(declare-fun Set_equal (Set<Seq<$Ref>> Set<Seq<$Ref>>) Bool)
(declare-fun Set_skolem_diff (Set<Seq<$Ref>> Set<Seq<$Ref>>) Seq<$Ref>)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
(declare-fun Seq_length (Seq<$Ref>) Int)
(declare-const Seq_empty Seq<$Ref>)
(declare-fun Seq_singleton ($Ref) Seq<$Ref>)
(declare-fun Seq_append (Seq<$Ref> Seq<$Ref>) Seq<$Ref>)
(declare-fun Seq_index (Seq<$Ref> Int) $Ref)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<$Ref> Int $Ref) Seq<$Ref>)
(declare-fun Seq_take (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_drop (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_contains (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_contains_trigger (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_skolem (Seq<$Ref> $Ref) Int)
(declare-fun Seq_equal (Seq<$Ref> Seq<$Ref>) Bool)
(declare-fun Seq_skolem_diff (Seq<$Ref> Seq<$Ref>) Int)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_contains_trigger (Seq<Int> Int) Bool)
(declare-fun Seq_skolem (Seq<Int> Int) Int)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_skolem_diff (Seq<Int> Seq<Int>) Int)
(declare-fun Seq_range (Int Int) Seq<Int>)
; /field_value_functions_declarations.smt2 [f: Int]
(declare-fun $FVF.domain_f ($FVF<f>) Set<$Ref>)
(declare-fun $FVF.lookup_f ($FVF<f> $Ref) Int)
(declare-fun $FVF.after_f ($FVF<f> $FVF<f>) Bool)
(declare-fun $FVF.loc_f (Int $Ref) Bool)
(declare-fun $FVF.perm_f ($FPM $Ref) $Perm)
(declare-const $fvfTOP_f $FVF<f>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun fun03qp ($Snap $Ref Int) Int)
(declare-fun fun03qp%limited ($Snap $Ref Int) Int)
(declare-fun fun03qp%stateless ($Ref Int) Bool)
(declare-fun fun03qp%precondition ($Snap $Ref Int) Bool)
(declare-fun fun02qp ($Snap Seq<$Ref> Int) Int)
(declare-fun fun02qp%limited ($Snap Seq<$Ref> Int) Int)
(declare-fun fun02qp%stateless (Seq<$Ref> Int) Bool)
(declare-fun fun02qp%precondition ($Snap Seq<$Ref> Int) Bool)
(declare-fun fun01qp ($Snap Seq<$Ref> Int) Int)
(declare-fun fun01qp%limited ($Snap Seq<$Ref> Int) Int)
(declare-fun fun01qp%stateless (Seq<$Ref> Int) Bool)
(declare-fun fun01qp%precondition ($Snap Seq<$Ref> Int) Bool)
(declare-fun fun04qp ($Snap $Ref Int) Int)
(declare-fun fun04qp%limited ($Snap $Ref Int) Int)
(declare-fun fun04qp%stateless ($Ref Int) Bool)
(declare-fun fun04qp%precondition ($Snap $Ref Int) Bool)
(declare-fun fun01 ($Snap $Ref $Ref Bool) Int)
(declare-fun fun01%limited ($Snap $Ref $Ref Bool) Int)
(declare-fun fun01%stateless ($Ref $Ref Bool) Bool)
(declare-fun fun01%precondition ($Snap $Ref $Ref Bool) Bool)
(declare-fun fun02 ($Snap $Ref $Ref Bool) Int)
(declare-fun fun02%limited ($Snap $Ref $Ref Bool) Int)
(declare-fun fun02%stateless ($Ref $Ref Bool) Bool)
(declare-fun fun02%precondition ($Snap $Ref $Ref Bool) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Seq<$Ref>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<$Ref>)) 0))
(assert (forall ((s Seq<$Ref>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (not (= s1 (as Seq_empty  Seq<$Ref>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<$Ref>) (b Seq<$Ref>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x $Ref) (y $Ref)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (not (= s1 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (x Int)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Int>) (x Int) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Int>) (b Seq<Int>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Int) (y Int)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((min_ Int) (max Int)) (!
  (and
    (=> (< min_ max) (= (Seq_length (Seq_range min_ max)) (- max min_)))
    (=> (<= max min_) (= (Seq_length (Seq_range min_ max)) 0)))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (j Int)) (!
  (=>
    (and (<= 0 j) (< j (- max min_)))
    (= (Seq_index (Seq_range min_ max) j) (+ min_ j)))
  :pattern ((Seq_index (Seq_range min_ max) j))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (v Int)) (!
  (= (Seq_contains (Seq_range min_ max) v) (and (<= min_ v) (< v max)))
  :pattern ((Seq_contains (Seq_range min_ max) v))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Int)) (!
  (not (Set_in o (as Set_empty  Set<Int>)))
  :pattern ((Set_in o (as Set_empty  Set<Int>)))
  )))
(assert (forall ((s Set<Int>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Int))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Int)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Int) (o Int)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Int)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Int>) (x Int) (o Int)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Int>) (x Int) (y Int)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=
    (Set_subset a b)
    (forall ((o Int)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Seq<$Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Seq<$Ref>)) (!
  (not (Set_in o (as Set_empty  Set<Seq<$Ref>>)))
  :pattern ((Set_in o (as Set_empty  Set<Seq<$Ref>>)))
  )))
(assert (forall ((s Set<Seq<$Ref>>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<$Ref>>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Seq<$Ref>))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Seq<$Ref>)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Seq<$Ref>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Seq<$Ref>)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>) (y Seq<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (y Seq<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (y Seq<$Ref>)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (y Seq<$Ref>)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (=
    (Set_subset a b)
    (forall ((o Seq<$Ref>)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
; /field_value_functions_axioms.smt2 [f: Int]
(assert (forall ((vs $FVF<f>) (ws $FVF<f>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_f vs) ($FVF.domain_f ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_f vs))
            (= ($FVF.lookup_f vs x) ($FVF.lookup_f ws x)))
          :pattern (($FVF.lookup_f vs x) ($FVF.lookup_f ws x))
          :qid |qp.$FVF<f>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<f>To$Snap vs)
              ($SortWrappers.$FVF<f>To$Snap ws)
              )
    :qid |qp.$FVF<f>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_f pm r))
    :pattern (($FVF.perm_f pm r)))))
(assert (forall ((r $Ref) (f Int)) (!
    (= ($FVF.loc_f f r) true)
    :pattern (($FVF.loc_f f r)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun inv@21@00 ($Snap $Ref Int $Ref) Int)
(declare-fun img@22@00 ($Snap $Ref Int $Ref) Bool)
(declare-fun inv@24@00 ($Snap Seq<$Ref> Int $Ref) Int)
(declare-fun img@25@00 ($Snap Seq<$Ref> Int $Ref) Bool)
(declare-fun inv@27@00 ($Snap Seq<$Ref> Int $Ref) Int)
(declare-fun img@28@00 ($Snap Seq<$Ref> Int $Ref) Bool)
(declare-fun inv@30@00 ($Snap $Ref Int $Ref) Int)
(declare-fun img@31@00 ($Snap $Ref Int $Ref) Bool)
(assert (forall ((s@$ $Snap) (x@0@00 $Ref) (i@1@00 Int)) (!
  (= (fun03qp%limited s@$ x@0@00 i@1@00) (fun03qp s@$ x@0@00 i@1@00))
  :pattern ((fun03qp s@$ x@0@00 i@1@00))
  :qid |quant-u-0|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Ref) (i@1@00 Int)) (!
  (fun03qp%stateless x@0@00 i@1@00)
  :pattern ((fun03qp%limited s@$ x@0@00 i@1@00))
  :qid |quant-u-1|)))
(assert (forall ((s@$ $Snap) (xs@3@00 Seq<$Ref>) (i@4@00 Int)) (!
  (= (fun02qp%limited s@$ xs@3@00 i@4@00) (fun02qp s@$ xs@3@00 i@4@00))
  :pattern ((fun02qp s@$ xs@3@00 i@4@00))
  :qid |quant-u-2|)))
(assert (forall ((s@$ $Snap) (xs@3@00 Seq<$Ref>) (i@4@00 Int)) (!
  (fun02qp%stateless xs@3@00 i@4@00)
  :pattern ((fun02qp%limited s@$ xs@3@00 i@4@00))
  :qid |quant-u-3|)))
(assert (forall ((s@$ $Snap) (xs@6@00 Seq<$Ref>) (i@7@00 Int)) (!
  (= (fun01qp%limited s@$ xs@6@00 i@7@00) (fun01qp s@$ xs@6@00 i@7@00))
  :pattern ((fun01qp s@$ xs@6@00 i@7@00))
  :qid |quant-u-4|)))
(assert (forall ((s@$ $Snap) (xs@6@00 Seq<$Ref>) (i@7@00 Int)) (!
  (fun01qp%stateless xs@6@00 i@7@00)
  :pattern ((fun01qp%limited s@$ xs@6@00 i@7@00))
  :qid |quant-u-5|)))
(assert (forall ((s@$ $Snap) (x@9@00 $Ref) (i@10@00 Int)) (!
  (= (fun04qp%limited s@$ x@9@00 i@10@00) (fun04qp s@$ x@9@00 i@10@00))
  :pattern ((fun04qp s@$ x@9@00 i@10@00))
  :qid |quant-u-6|)))
(assert (forall ((s@$ $Snap) (x@9@00 $Ref) (i@10@00 Int)) (!
  (fun04qp%stateless x@9@00 i@10@00)
  :pattern ((fun04qp%limited s@$ x@9@00 i@10@00))
  :qid |quant-u-7|)))
(assert (forall ((s@$ $Snap) (x@12@00 $Ref) (y@13@00 $Ref) (b@14@00 Bool)) (!
  (=
    (fun01%limited s@$ x@12@00 y@13@00 b@14@00)
    (fun01 s@$ x@12@00 y@13@00 b@14@00))
  :pattern ((fun01 s@$ x@12@00 y@13@00 b@14@00))
  :qid |quant-u-8|)))
(assert (forall ((s@$ $Snap) (x@12@00 $Ref) (y@13@00 $Ref) (b@14@00 Bool)) (!
  (fun01%stateless x@12@00 y@13@00 b@14@00)
  :pattern ((fun01%limited s@$ x@12@00 y@13@00 b@14@00))
  :qid |quant-u-9|)))
(assert (forall ((s@$ $Snap) (x@16@00 $Ref) (y@17@00 $Ref) (b@18@00 Bool)) (!
  (=
    (fun02%limited s@$ x@16@00 y@17@00 b@18@00)
    (fun02 s@$ x@16@00 y@17@00 b@18@00))
  :pattern ((fun02 s@$ x@16@00 y@17@00 b@18@00))
  :qid |quant-u-10|)))
(assert (forall ((s@$ $Snap) (x@16@00 $Ref) (y@17@00 $Ref) (b@18@00 Bool)) (!
  (fun02%stateless x@16@00 y@17@00 b@18@00)
  :pattern ((fun02%limited s@$ x@16@00 y@17@00 b@18@00))
  :qid |quant-u-11|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- test01 ----------
(declare-const x@0@01 $Ref)
(declare-const y@1@01 $Ref)
(declare-const b@2@01 Bool)
(declare-const x@3@01 $Ref)
(declare-const y@4@01 $Ref)
(declare-const b@5@01 Bool)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@6@01 $Snap)
(assert (= $t@6@01 ($Snap.combine ($Snap.first $t@6@01) ($Snap.second $t@6@01))))
(assert (not (= x@3@01 $Ref.null)))
(push) ; 2
(set-option :timeout 10)
(assert (not (= x@3@01 y@4@01)))
(check-sat)
; unknown
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
(assert (not (= y@4@01 $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; y.f := 0
(push) ; 3
(set-option :timeout 10)
(assert (not (= x@3@01 y@4@01)))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [exec]
; assert fun01(x, y, true) == old(fun01(x, y, true))
; [eval] fun01(x, y, true) == old(fun01(x, y, true))
; [eval] fun01(x, y, true)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 0 | True | live]
; [else-branch: 0 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 0 | True]
(assert (fun01%precondition ($Snap.first $t@6@01) x@3@01 y@4@01 true))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (fun01%precondition ($Snap.first $t@6@01) x@3@01 y@4@01 true))
; [eval] old(fun01(x, y, true))
; [eval] fun01(x, y, true)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; [then-branch: 1 | True | live]
; [else-branch: 1 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1 | True]
(pop) ; 4
(pop) ; 3
; Joined path conditions
; [exec]
; assert fun02(x, y, true) == old(fun02(x, y, true))
; [eval] fun02(x, y, true) == old(fun02(x, y, true))
; [eval] fun02(x, y, true)
(push) ; 3
; [eval] (b ? write : none)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 2 | True | live]
; [else-branch: 2 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 2 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] (!b ? write : none)
; [eval] !b
(push) ; 4
; [then-branch: 3 | False | dead]
; [else-branch: 3 | True | live]
(push) ; 5
; [else-branch: 3 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (fun02%precondition ($Snap.combine ($Snap.first $t@6@01) $Snap.unit) x@3@01 y@4@01 true))
(pop) ; 3
; Joined path conditions
(assert (fun02%precondition ($Snap.combine ($Snap.first $t@6@01) $Snap.unit) x@3@01 y@4@01 true))
; [eval] old(fun02(x, y, true))
; [eval] fun02(x, y, true)
(set-option :timeout 0)
(push) ; 3
; [eval] (b ? write : none)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [then-branch: 4 | True | live]
; [else-branch: 4 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 4 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
; [eval] (!b ? write : none)
; [eval] !b
(push) ; 4
; [then-branch: 5 | False | dead]
; [else-branch: 5 | True | live]
(push) ; 5
; [else-branch: 5 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(pop) ; 2
(pop) ; 1
; ---------- test02 ----------
(declare-const xs@7@01 Seq<$Ref>)
(declare-const i1@8@01 Int)
(declare-const i2@9@01 Int)
(declare-const x@10@01 $Ref)
(declare-const xs@11@01 Seq<$Ref>)
(declare-const i1@12@01 Int)
(declare-const i2@13@01 Int)
(declare-const x@14@01 $Ref)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@15@01 $Snap)
(assert (= $t@15@01 ($Snap.combine ($Snap.first $t@15@01) ($Snap.second $t@15@01))))
(assert (= ($Snap.first $t@15@01) $Snap.unit))
; [eval] 0 <= i1
(assert (<= 0 i1@12@01))
(assert (=
  ($Snap.second $t@15@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@15@01))
    ($Snap.second ($Snap.second $t@15@01)))))
(assert (= ($Snap.first ($Snap.second $t@15@01)) $Snap.unit))
; [eval] i1 < |xs|
; [eval] |xs|
(assert (< i1@12@01 (Seq_length xs@11@01)))
(assert (=
  ($Snap.second ($Snap.second $t@15@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@15@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@15@01))) $Snap.unit))
; [eval] 0 <= i2
(assert (<= 0 i2@13@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@15@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@15@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@15@01))))
  $Snap.unit))
; [eval] i2 < |xs|
; [eval] |xs|
(assert (< i2@13@01 (Seq_length xs@11@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))
  $Snap.unit))
; [eval] i1 != i2
(assert (not (= i1@12@01 i2@13@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))
  $Snap.unit))
; [eval] (forall j1: Int, j2: Int :: { (j1 in [0..|xs|)), (j2 in [0..|xs|)) } { (j1 in [0..|xs|)), xs[j2] } { (j2 in [0..|xs|)), xs[j1] } { xs[j1], xs[j2] } (j1 in [0..|xs|)) && ((j2 in [0..|xs|)) && j1 != j2) ==> xs[j1] != xs[j2])
(declare-const j1@16@01 Int)
(declare-const j2@17@01 Int)
(push) ; 2
; [eval] (j1 in [0..|xs|)) && ((j2 in [0..|xs|)) && j1 != j2) ==> xs[j1] != xs[j2]
; [eval] (j1 in [0..|xs|)) && ((j2 in [0..|xs|)) && j1 != j2)
; [eval] (j1 in [0..|xs|))
; [eval] [0..|xs|)
; [eval] |xs|
(push) ; 3
; [then-branch: 6 | !(j1@16@01 in [0..|xs@11@01|]) | live]
; [else-branch: 6 | j1@16@01 in [0..|xs@11@01|] | live]
(push) ; 4
; [then-branch: 6 | !(j1@16@01 in [0..|xs@11@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 6 | j1@16@01 in [0..|xs@11@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01))
; [eval] (j2 in [0..|xs|))
; [eval] [0..|xs|)
; [eval] |xs|
(push) ; 5
; [then-branch: 7 | !(j2@17@01 in [0..|xs@11@01|]) | live]
; [else-branch: 7 | j2@17@01 in [0..|xs@11@01|] | live]
(push) ; 6
; [then-branch: 7 | !(j2@17@01 in [0..|xs@11@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 7 | j2@17@01 in [0..|xs@11@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01))
; [eval] j1 != j2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
  (not (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01))))))
(assert (or
  (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
  (not (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01))))
(push) ; 3
; [then-branch: 8 | j1@16@01 in [0..|xs@11@01|] && j2@17@01 in [0..|xs@11@01|] && j1@16@01 != j2@17@01 | live]
; [else-branch: 8 | !(j1@16@01 in [0..|xs@11@01|] && j2@17@01 in [0..|xs@11@01|] && j1@16@01 != j2@17@01) | live]
(push) ; 4
; [then-branch: 8 | j1@16@01 in [0..|xs@11@01|] && j2@17@01 in [0..|xs@11@01|] && j1@16@01 != j2@17@01]
(assert (and
  (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
    (not (= j1@16@01 j2@17@01)))))
; [eval] xs[j1] != xs[j2]
; [eval] xs[j1]
(push) ; 5
(assert (not (>= j1@16@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< j1@16@01 (Seq_length xs@11@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] xs[j2]
(push) ; 5
(assert (not (>= j2@17@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< j2@17@01 (Seq_length xs@11@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 8 | !(j1@16@01 in [0..|xs@11@01|] && j2@17@01 in [0..|xs@11@01|] && j1@16@01 != j2@17@01)]
(assert (not
  (and
    (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
    (and
      (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
      (not (= j1@16@01 j2@17@01))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
    (and
      (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
      (not (= j1@16@01 j2@17@01))))
  (and
    (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
    (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
    (not (= j1@16@01 j2@17@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
        (not (= j1@16@01 j2@17@01)))))
  (and
    (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
    (and
      (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
      (not (= j1@16@01 j2@17@01))))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j1@16@01 Int) (j2@17@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
          (not (= j1@16@01 j2@17@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
        (not (= j1@16@01 j2@17@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
            (not (= j1@16@01 j2@17@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
          (not (= j1@16@01 j2@17@01))))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01) (Seq_contains
    (Seq_range 0 (Seq_length xs@11@01))
    j2@17@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@11@01)) j1@16@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length xs@11@01))
    j2@17@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@51@12@51@106-aux|)))
(assert (forall ((j1@16@01 Int) (j2@17@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
          (not (= j1@16@01 j2@17@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
        (not (= j1@16@01 j2@17@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
            (not (= j1@16@01 j2@17@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
          (not (= j1@16@01 j2@17@01))))))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@11@01)) j1@16@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length xs@11@01))
    j2@17@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@51@12@51@106-aux|)))
(assert (forall ((j1@16@01 Int) (j2@17@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
          (not (= j1@16@01 j2@17@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
        (not (= j1@16@01 j2@17@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
            (not (= j1@16@01 j2@17@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
          (not (= j1@16@01 j2@17@01))))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01) (Seq_index
    xs@11@01
    j2@17@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@11@01)) j1@16@01) (Seq_index
    xs@11@01
    j2@17@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@51@12@51@106-aux|)))
(assert (forall ((j1@16@01 Int) (j2@17@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
          (not (= j1@16@01 j2@17@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
        (not (= j1@16@01 j2@17@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
            (not (= j1@16@01 j2@17@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
          (not (= j1@16@01 j2@17@01))))))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@11@01)) j1@16@01) (Seq_index
    xs@11@01
    j2@17@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@51@12@51@106-aux|)))
(assert (forall ((j1@16@01 Int) (j2@17@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
          (not (= j1@16@01 j2@17@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
        (not (= j1@16@01 j2@17@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
            (not (= j1@16@01 j2@17@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
          (not (= j1@16@01 j2@17@01))))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01) (Seq_index
    xs@11@01
    j1@16@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@11@01)) j2@17@01) (Seq_index
    xs@11@01
    j1@16@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@51@12@51@106-aux|)))
(assert (forall ((j1@16@01 Int) (j2@17@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
          (not (= j1@16@01 j2@17@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
        (not (= j1@16@01 j2@17@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
            (not (= j1@16@01 j2@17@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
          (not (= j1@16@01 j2@17@01))))))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@11@01)) j2@17@01) (Seq_index
    xs@11@01
    j1@16@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@51@12@51@106-aux|)))
(assert (forall ((j1@16@01 Int) (j2@17@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
          (not (= j1@16@01 j2@17@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
        (not (= j1@16@01 j2@17@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
            (not (= j1@16@01 j2@17@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
          (not (= j1@16@01 j2@17@01))))))
  :pattern ((Seq_index xs@11@01 j1@16@01) (Seq_index xs@11@01 j2@17@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@51@12@51@106-aux|)))
(assert (forall ((j1@16@01 Int) (j2@17@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01)
        (not (= j1@16@01 j2@17@01))))
    (not (= (Seq_index xs@11@01 j1@16@01) (Seq_index xs@11@01 j2@17@01))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01) (Seq_contains
    (Seq_range 0 (Seq_length xs@11@01))
    j2@17@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@11@01)) j1@16@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length xs@11@01))
    j2@17@01))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j1@16@01) (Seq_index
    xs@11@01
    j2@17@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@11@01)) j1@16@01) (Seq_index
    xs@11@01
    j2@17@01))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length xs@11@01)) j2@17@01) (Seq_index
    xs@11@01
    j1@16@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@11@01)) j2@17@01) (Seq_index
    xs@11@01
    j1@16@01))
  :pattern ((Seq_index xs@11@01 j1@16@01) (Seq_index xs@11@01 j2@17@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@51@12@51@106|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))
(declare-const j@18@01 Int)
(push) ; 2
; [eval] 0 <= j && j < |xs|
; [eval] 0 <= j
(push) ; 3
; [then-branch: 9 | !(0 <= j@18@01) | live]
; [else-branch: 9 | 0 <= j@18@01 | live]
(push) ; 4
; [then-branch: 9 | !(0 <= j@18@01)]
(assert (not (<= 0 j@18@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 9 | 0 <= j@18@01]
(assert (<= 0 j@18@01))
; [eval] j < |xs|
; [eval] |xs|
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@18@01) (not (<= 0 j@18@01))))
(assert (and (<= 0 j@18@01) (< j@18@01 (Seq_length xs@11@01))))
; [eval] xs[j]
(push) ; 3
(assert (not (>= j@18@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(pop) ; 2
(declare-fun inv@19@01 ($Ref) Int)
(declare-fun img@20@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@18@01 Int)) (!
  (=>
    (and (<= 0 j@18@01) (< j@18@01 (Seq_length xs@11@01)))
    (or (<= 0 j@18@01) (not (<= 0 j@18@01))))
  :pattern ((Seq_index xs@11@01 j@18@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((j1@18@01 Int) (j2@18@01 Int)) (!
  (=>
    (and
      (and (<= 0 j1@18@01) (< j1@18@01 (Seq_length xs@11@01)))
      (and (<= 0 j2@18@01) (< j2@18@01 (Seq_length xs@11@01)))
      (= (Seq_index xs@11@01 j1@18@01) (Seq_index xs@11@01 j2@18@01)))
    (= j1@18@01 j2@18@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@18@01 Int)) (!
  (=>
    (and (<= 0 j@18@01) (< j@18@01 (Seq_length xs@11@01)))
    (and
      (= (inv@19@01 (Seq_index xs@11@01 j@18@01)) j@18@01)
      (img@20@01 (Seq_index xs@11@01 j@18@01))))
  :pattern ((Seq_index xs@11@01 j@18@01))
  :qid |quant-u-21|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@20@01 r)
      (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
    (= (Seq_index xs@11@01 (inv@19@01 r)) r))
  :pattern ((inv@19@01 r))
  :qid |f-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((j@18@01 Int)) (!
  (=>
    (and (<= 0 j@18@01) (< j@18@01 (Seq_length xs@11@01)))
    (not (= (Seq_index xs@11@01 j@18@01) $Ref.null)))
  :pattern ((Seq_index xs@11@01 j@18@01))
  :qid |f-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
(assert (not (= x@14@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))
  $Snap.unit))
; [eval] x.elems == xs
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
  xs@11@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; xs[i1].f := 0
; [eval] xs[i1]
(push) ; 3
(assert (not (>= i1@12@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@21@01 ((r $Ref)) $Perm
  (ite
    (= r (Seq_index xs@11@01 i1@12@01))
    ($Perm.min
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@21@01 r))
    $Perm.No)
  
  :qid |quant-u-23|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@21@01 r) $Perm.No)
  
  :qid |quant-u-24|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (= (- $Perm.Write (pTaken@21@01 r)) $Perm.No))
  
  :qid |quant-u-25|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@22@01 $FVF<f>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01)) 0))
; [exec]
; assert fun01qp(xs, i2) == old(fun01qp(xs, i2))
; [eval] fun01qp(xs, i2) == old(fun01qp(xs, i2))
; [eval] fun01qp(xs, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |xs|
; [eval] |xs|
(declare-const j@23@01 Int)
(push) ; 4
; [eval] 0 <= j && (j < |xs| && j == i)
; [eval] 0 <= j
(push) ; 5
; [then-branch: 10 | !(0 <= j@23@01) | live]
; [else-branch: 10 | 0 <= j@23@01 | live]
(push) ; 6
; [then-branch: 10 | !(0 <= j@23@01)]
(assert (not (<= 0 j@23@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 10 | 0 <= j@23@01]
(assert (<= 0 j@23@01))
; [eval] j < |xs|
; [eval] |xs|
(push) ; 7
; [then-branch: 11 | !(j@23@01 < |xs@11@01|) | live]
; [else-branch: 11 | j@23@01 < |xs@11@01| | live]
(push) ; 8
; [then-branch: 11 | !(j@23@01 < |xs@11@01|)]
(assert (not (< j@23@01 (Seq_length xs@11@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 11 | j@23@01 < |xs@11@01|]
(assert (< j@23@01 (Seq_length xs@11@01)))
; [eval] j == i
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (< j@23@01 (Seq_length xs@11@01)) (not (< j@23@01 (Seq_length xs@11@01)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 j@23@01)
  (and
    (<= 0 j@23@01)
    (or
      (< j@23@01 (Seq_length xs@11@01))
      (not (< j@23@01 (Seq_length xs@11@01)))))))
(assert (or (<= 0 j@23@01) (not (<= 0 j@23@01))))
(assert (and (<= 0 j@23@01) (and (< j@23@01 (Seq_length xs@11@01)) (= j@23@01 i2@13@01))))
; [eval] xs[j]
(push) ; 5
(assert (not (>= j@23@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@24@01 ($Ref) Int)
(declare-fun img@25@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@23@01 Int)) (!
  (=>
    (and
      (<= 0 j@23@01)
      (and (< j@23@01 (Seq_length xs@11@01)) (= j@23@01 i2@13@01)))
    (and
      (=>
        (<= 0 j@23@01)
        (and
          (<= 0 j@23@01)
          (or
            (< j@23@01 (Seq_length xs@11@01))
            (not (< j@23@01 (Seq_length xs@11@01))))))
      (or (<= 0 j@23@01) (not (<= 0 j@23@01)))))
  :pattern ((Seq_index xs@11@01 j@23@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@23@01 Int) (j2@23@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j1@23@01)
        (and (< j1@23@01 (Seq_length xs@11@01)) (= j1@23@01 i2@13@01)))
      (and
        (<= 0 j2@23@01)
        (and (< j2@23@01 (Seq_length xs@11@01)) (= j2@23@01 i2@13@01)))
      (= (Seq_index xs@11@01 j1@23@01) (Seq_index xs@11@01 j2@23@01)))
    (= j1@23@01 j2@23@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@23@01 Int)) (!
  (=>
    (and
      (<= 0 j@23@01)
      (and (< j@23@01 (Seq_length xs@11@01)) (= j@23@01 i2@13@01)))
    (and
      (= (inv@24@01 (Seq_index xs@11@01 j@23@01)) j@23@01)
      (img@25@01 (Seq_index xs@11@01 j@23@01))))
  :pattern ((Seq_index xs@11@01 j@23@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@25@01 r)
      (and
        (<= 0 (inv@24@01 r))
        (and (< (inv@24@01 r) (Seq_length xs@11@01)) (= (inv@24@01 r) i2@13@01))))
    (= (Seq_index xs@11@01 (inv@24@01 r)) r))
  :pattern ((inv@24@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@26@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@24@01 r))
        (and (< (inv@24@01 r) (Seq_length xs@11@01)) (= (inv@24@01 r) i2@13@01)))
      (img@25@01 r)
      (= r (Seq_index xs@11@01 (inv@24@01 r))))
    ($Perm.min
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (- $Perm.Write (pTaken@21@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@27@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@24@01 r))
        (and (< (inv@24@01 r) (Seq_length xs@11@01)) (= (inv@24@01 r) i2@13@01)))
      (img@25@01 r)
      (= r (Seq_index xs@11@01 (inv@24@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@26@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (- $Perm.Write (pTaken@21@01 r))
        $Perm.No)
      (pTaken@26@01 r))
    $Perm.No)
  
  :qid |quant-u-28|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@26@01 r) $Perm.No)
  
  :qid |quant-u-29|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@24@01 r))
        (and (< (inv@24@01 r) (Seq_length xs@11@01)) (= (inv@24@01 r) i2@13@01)))
      (img@25@01 r)
      (= r (Seq_index xs@11@01 (inv@24@01 r))))
    (= (- $Perm.Write (pTaken@26@01 r)) $Perm.No))
  
  :qid |quant-u-30|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@28@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@28@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@24@01 r))
          (and
            (< (inv@24@01 r) (Seq_length xs@11@01))
            (= (inv@24@01 r) i2@13@01)))
        (img@25@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@24@01 r))
          (and
            (< (inv@24@01 r) (Seq_length xs@11@01))
            (= (inv@24@01 r) i2@13@01)))
        (img@25@01 r))
      (Set_in r ($FVF.domain_f (as sm@28@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@28@01  $FVF<f>))))
  :qid |qp.fvfDomDef2|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@24@01 r))
          (and
            (< (inv@24@01 r) (Seq_length xs@11@01))
            (= (inv@24@01 r) i2@13@01)))
        (img@25@01 r))
      (= r (Seq_index xs@11@01 i1@12@01)))
    (=
      ($FVF.lookup_f (as sm@28@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@28@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@24@01 r))
          (and
            (< (inv@24@01 r) (Seq_length xs@11@01))
            (= (inv@24@01 r) i2@13@01)))
        (img@25@01 r))
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (< $Perm.No (- $Perm.Write (pTaken@21@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@28@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@28@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef1|)))
(assert (fun01qp%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($SortWrappers.$FVF<f>To$Snap (as sm@28@01  $FVF<f>)))) xs@11@01 i2@13@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@23@01 Int)) (!
  (=>
    (and
      (<= 0 j@23@01)
      (and (< j@23@01 (Seq_length xs@11@01)) (= j@23@01 i2@13@01)))
    (and
      (= (inv@24@01 (Seq_index xs@11@01 j@23@01)) j@23@01)
      (img@25@01 (Seq_index xs@11@01 j@23@01))))
  :pattern ((Seq_index xs@11@01 j@23@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@25@01 r)
      (and
        (<= 0 (inv@24@01 r))
        (and (< (inv@24@01 r) (Seq_length xs@11@01)) (= (inv@24@01 r) i2@13@01))))
    (= (Seq_index xs@11@01 (inv@24@01 r)) r))
  :pattern ((inv@24@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@28@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@24@01 r))
          (and
            (< (inv@24@01 r) (Seq_length xs@11@01))
            (= (inv@24@01 r) i2@13@01)))
        (img@25@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@24@01 r))
          (and
            (< (inv@24@01 r) (Seq_length xs@11@01))
            (= (inv@24@01 r) i2@13@01)))
        (img@25@01 r))
      (Set_in r ($FVF.domain_f (as sm@28@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@28@01  $FVF<f>))))
  :qid |qp.fvfDomDef2|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@24@01 r))
          (and
            (< (inv@24@01 r) (Seq_length xs@11@01))
            (= (inv@24@01 r) i2@13@01)))
        (img@25@01 r))
      (= r (Seq_index xs@11@01 i1@12@01)))
    (=
      ($FVF.lookup_f (as sm@28@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@28@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@24@01 r))
          (and
            (< (inv@24@01 r) (Seq_length xs@11@01))
            (= (inv@24@01 r) i2@13@01)))
        (img@25@01 r))
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (< $Perm.No (- $Perm.Write (pTaken@21@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@28@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@28@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef1|)))
(assert (and
  (forall ((j@23@01 Int)) (!
    (=>
      (and
        (<= 0 j@23@01)
        (and (< j@23@01 (Seq_length xs@11@01)) (= j@23@01 i2@13@01)))
      (and
        (=>
          (<= 0 j@23@01)
          (and
            (<= 0 j@23@01)
            (or
              (< j@23@01 (Seq_length xs@11@01))
              (not (< j@23@01 (Seq_length xs@11@01))))))
        (or (<= 0 j@23@01) (not (<= 0 j@23@01)))))
    :pattern ((Seq_index xs@11@01 j@23@01))
    :qid |f-aux|))
  (fun01qp%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@28@01  $FVF<f>)))) xs@11@01 i2@13@01)))
; [eval] old(fun01qp(xs, i2))
; [eval] fun01qp(xs, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |xs|
; [eval] |xs|
(declare-const j@29@01 Int)
(push) ; 4
; [eval] 0 <= j && (j < |xs| && j == i)
; [eval] 0 <= j
(push) ; 5
; [then-branch: 12 | !(0 <= j@29@01) | live]
; [else-branch: 12 | 0 <= j@29@01 | live]
(push) ; 6
; [then-branch: 12 | !(0 <= j@29@01)]
(assert (not (<= 0 j@29@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 12 | 0 <= j@29@01]
(assert (<= 0 j@29@01))
; [eval] j < |xs|
; [eval] |xs|
(push) ; 7
; [then-branch: 13 | !(j@29@01 < |xs@11@01|) | live]
; [else-branch: 13 | j@29@01 < |xs@11@01| | live]
(push) ; 8
; [then-branch: 13 | !(j@29@01 < |xs@11@01|)]
(assert (not (< j@29@01 (Seq_length xs@11@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 13 | j@29@01 < |xs@11@01|]
(assert (< j@29@01 (Seq_length xs@11@01)))
; [eval] j == i
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (< j@29@01 (Seq_length xs@11@01)) (not (< j@29@01 (Seq_length xs@11@01)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 j@29@01)
  (and
    (<= 0 j@29@01)
    (or
      (< j@29@01 (Seq_length xs@11@01))
      (not (< j@29@01 (Seq_length xs@11@01)))))))
(assert (or (<= 0 j@29@01) (not (<= 0 j@29@01))))
(assert (and (<= 0 j@29@01) (and (< j@29@01 (Seq_length xs@11@01)) (= j@29@01 i2@13@01))))
; [eval] xs[j]
(push) ; 5
(assert (not (>= j@29@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@30@01 ($Ref) Int)
(declare-fun img@31@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@29@01 Int)) (!
  (=>
    (and
      (<= 0 j@29@01)
      (and (< j@29@01 (Seq_length xs@11@01)) (= j@29@01 i2@13@01)))
    (and
      (=>
        (<= 0 j@29@01)
        (and
          (<= 0 j@29@01)
          (or
            (< j@29@01 (Seq_length xs@11@01))
            (not (< j@29@01 (Seq_length xs@11@01))))))
      (or (<= 0 j@29@01) (not (<= 0 j@29@01)))))
  :pattern ((Seq_index xs@11@01 j@29@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@29@01 Int) (j2@29@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j1@29@01)
        (and (< j1@29@01 (Seq_length xs@11@01)) (= j1@29@01 i2@13@01)))
      (and
        (<= 0 j2@29@01)
        (and (< j2@29@01 (Seq_length xs@11@01)) (= j2@29@01 i2@13@01)))
      (= (Seq_index xs@11@01 j1@29@01) (Seq_index xs@11@01 j2@29@01)))
    (= j1@29@01 j2@29@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@29@01 Int)) (!
  (=>
    (and
      (<= 0 j@29@01)
      (and (< j@29@01 (Seq_length xs@11@01)) (= j@29@01 i2@13@01)))
    (and
      (= (inv@30@01 (Seq_index xs@11@01 j@29@01)) j@29@01)
      (img@31@01 (Seq_index xs@11@01 j@29@01))))
  :pattern ((Seq_index xs@11@01 j@29@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@31@01 r)
      (and
        (<= 0 (inv@30@01 r))
        (and (< (inv@30@01 r) (Seq_length xs@11@01)) (= (inv@30@01 r) i2@13@01))))
    (= (Seq_index xs@11@01 (inv@30@01 r)) r))
  :pattern ((inv@30@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@32@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@30@01 r))
        (and (< (inv@30@01 r) (Seq_length xs@11@01)) (= (inv@30@01 r) i2@13@01)))
      (img@31@01 r)
      (= r (Seq_index xs@11@01 (inv@30@01 r))))
    ($Perm.min
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@32@01 r))
    $Perm.No)
  
  :qid |quant-u-33|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@32@01 r) $Perm.No)
  
  :qid |quant-u-34|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@30@01 r))
        (and (< (inv@30@01 r) (Seq_length xs@11@01)) (= (inv@30@01 r) i2@13@01)))
      (img@31@01 r)
      (= r (Seq_index xs@11@01 (inv@30@01 r))))
    (= (- $Perm.Write (pTaken@32@01 r)) $Perm.No))
  
  :qid |quant-u-35|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@33@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@33@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@30@01 r))
          (and
            (< (inv@30@01 r) (Seq_length xs@11@01))
            (= (inv@30@01 r) i2@13@01)))
        (img@31@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@30@01 r))
          (and
            (< (inv@30@01 r) (Seq_length xs@11@01))
            (= (inv@30@01 r) i2@13@01)))
        (img@31@01 r))
      (Set_in r ($FVF.domain_f (as sm@33@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@33@01  $FVF<f>))))
  :qid |qp.fvfDomDef4|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@30@01 r))
          (and
            (< (inv@30@01 r) (Seq_length xs@11@01))
            (= (inv@30@01 r) i2@13@01)))
        (img@31@01 r))
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01)))))
    (=
      ($FVF.lookup_f (as sm@33@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@33@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef3|)))
(assert (fun01qp%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($SortWrappers.$FVF<f>To$Snap (as sm@33@01  $FVF<f>)))) xs@11@01 i2@13@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@29@01 Int)) (!
  (=>
    (and
      (<= 0 j@29@01)
      (and (< j@29@01 (Seq_length xs@11@01)) (= j@29@01 i2@13@01)))
    (and
      (= (inv@30@01 (Seq_index xs@11@01 j@29@01)) j@29@01)
      (img@31@01 (Seq_index xs@11@01 j@29@01))))
  :pattern ((Seq_index xs@11@01 j@29@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@31@01 r)
      (and
        (<= 0 (inv@30@01 r))
        (and (< (inv@30@01 r) (Seq_length xs@11@01)) (= (inv@30@01 r) i2@13@01))))
    (= (Seq_index xs@11@01 (inv@30@01 r)) r))
  :pattern ((inv@30@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@33@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@30@01 r))
          (and
            (< (inv@30@01 r) (Seq_length xs@11@01))
            (= (inv@30@01 r) i2@13@01)))
        (img@31@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@30@01 r))
          (and
            (< (inv@30@01 r) (Seq_length xs@11@01))
            (= (inv@30@01 r) i2@13@01)))
        (img@31@01 r))
      (Set_in r ($FVF.domain_f (as sm@33@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@33@01  $FVF<f>))))
  :qid |qp.fvfDomDef4|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@30@01 r))
          (and
            (< (inv@30@01 r) (Seq_length xs@11@01))
            (= (inv@30@01 r) i2@13@01)))
        (img@31@01 r))
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01)))))
    (=
      ($FVF.lookup_f (as sm@33@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@33@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef3|)))
(assert (and
  (forall ((j@29@01 Int)) (!
    (=>
      (and
        (<= 0 j@29@01)
        (and (< j@29@01 (Seq_length xs@11@01)) (= j@29@01 i2@13@01)))
      (and
        (=>
          (<= 0 j@29@01)
          (and
            (<= 0 j@29@01)
            (or
              (< j@29@01 (Seq_length xs@11@01))
              (not (< j@29@01 (Seq_length xs@11@01))))))
        (or (<= 0 j@29@01) (not (<= 0 j@29@01)))))
    :pattern ((Seq_index xs@11@01 j@29@01))
    :qid |f-aux|))
  (fun01qp%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@33@01  $FVF<f>)))) xs@11@01 i2@13@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (=
  (fun01qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@28@01  $FVF<f>)))) xs@11@01 i2@13@01)
  (fun01qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@33@01  $FVF<f>)))) xs@11@01 i2@13@01))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (=
  (fun01qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@28@01  $FVF<f>)))) xs@11@01 i2@13@01)
  (fun01qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@33@01  $FVF<f>)))) xs@11@01 i2@13@01)))
; [exec]
; assert fun02qp(xs, i2) == old(fun02qp(xs, i2))
; [eval] fun02qp(xs, i2) == old(fun02qp(xs, i2))
; [eval] fun02qp(xs, i2)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |xs|
; [eval] |xs|
(declare-const j@34@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |xs|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 14 | !(0 <= j@34@01) | live]
; [else-branch: 14 | 0 <= j@34@01 | live]
(push) ; 6
; [then-branch: 14 | !(0 <= j@34@01)]
(assert (not (<= 0 j@34@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 14 | 0 <= j@34@01]
(assert (<= 0 j@34@01))
; [eval] j < |xs|
; [eval] |xs|
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@34@01) (not (<= 0 j@34@01))))
(assert (and (<= 0 j@34@01) (< j@34@01 (Seq_length xs@11@01))))
; [eval] (j == i ? write : none)
; [eval] j == i
(push) ; 5
; [then-branch: 15 | j@34@01 == i2@13@01 | live]
; [else-branch: 15 | j@34@01 != i2@13@01 | live]
(push) ; 6
; [then-branch: 15 | j@34@01 == i2@13@01]
(assert (= j@34@01 i2@13@01))
(pop) ; 6
(push) ; 6
; [else-branch: 15 | j@34@01 != i2@13@01]
(assert (not (= j@34@01 i2@13@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (= j@34@01 i2@13@01)) (= j@34@01 i2@13@01)))
; [eval] xs[j]
(push) ; 5
(assert (not (>= j@34@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@35@01 ($Ref) Int)
(declare-fun img@36@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@34@01 Int)) (!
  (=>
    (and (<= 0 j@34@01) (< j@34@01 (Seq_length xs@11@01)))
    (and
      (or (<= 0 j@34@01) (not (<= 0 j@34@01)))
      (or (not (= j@34@01 i2@13@01)) (= j@34@01 i2@13@01))))
  :pattern ((Seq_index xs@11@01 j@34@01))
  :qid |f-aux|)))
(push) ; 4
(assert (not (forall ((j@34@01 Int)) (!
  (=>
    (and (<= 0 j@34@01) (< j@34@01 (Seq_length xs@11@01)))
    (or
      (= (ite (= j@34@01 i2@13@01) $Perm.Write $Perm.No) $Perm.No)
      (= j@34@01 i2@13@01)))
  
  :qid |quant-u-36|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@34@01 Int) (j2@34@01 Int)) (!
  (=>
    (and
      (and
        (and (<= 0 j1@34@01) (< j1@34@01 (Seq_length xs@11@01)))
        (= j1@34@01 i2@13@01))
      (and
        (and (<= 0 j2@34@01) (< j2@34@01 (Seq_length xs@11@01)))
        (= j2@34@01 i2@13@01))
      (= (Seq_index xs@11@01 j1@34@01) (Seq_index xs@11@01 j2@34@01)))
    (= j1@34@01 j2@34@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@34@01 Int)) (!
  (=>
    (and
      (and (<= 0 j@34@01) (< j@34@01 (Seq_length xs@11@01)))
      (= j@34@01 i2@13@01))
    (and
      (= (inv@35@01 (Seq_index xs@11@01 j@34@01)) j@34@01)
      (img@36@01 (Seq_index xs@11@01 j@34@01))))
  :pattern ((Seq_index xs@11@01 j@34@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@36@01 r)
      (and
        (and (<= 0 (inv@35@01 r)) (< (inv@35@01 r) (Seq_length xs@11@01)))
        (= (inv@35@01 r) i2@13@01)))
    (= (Seq_index xs@11@01 (inv@35@01 r)) r))
  :pattern ((inv@35@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@37@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@35@01 r)) (< (inv@35@01 r) (Seq_length xs@11@01)))
      (img@36@01 r)
      (= r (Seq_index xs@11@01 (inv@35@01 r))))
    ($Perm.min
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (- $Perm.Write (pTaken@21@01 r))
        $Perm.No)
      (ite (= (inv@35@01 r) i2@13@01) $Perm.Write $Perm.No))
    $Perm.No))
(define-fun pTaken@38@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@35@01 r)) (< (inv@35@01 r) (Seq_length xs@11@01)))
      (img@36@01 r)
      (= r (Seq_index xs@11@01 (inv@35@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No)
      (- (ite (= (inv@35@01 r) i2@13@01) $Perm.Write $Perm.No) (pTaken@37@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (- $Perm.Write (pTaken@21@01 r))
        $Perm.No)
      (pTaken@37@01 r))
    $Perm.No)
  
  :qid |quant-u-38|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@37@01 r) $Perm.No)
  
  :qid |quant-u-39|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@35@01 r)) (< (inv@35@01 r) (Seq_length xs@11@01)))
      (img@36@01 r)
      (= r (Seq_index xs@11@01 (inv@35@01 r))))
    (=
      (- (ite (= (inv@35@01 r) i2@13@01) $Perm.Write $Perm.No) (pTaken@37@01 r))
      $Perm.No))
  
  :qid |quant-u-40|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@39@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@39@01  $FVF<f>)))
      (and
        (and (<= 0 (inv@35@01 r)) (< (inv@35@01 r) (Seq_length xs@11@01)))
        (= (inv@35@01 r) i2@13@01)
        (img@36@01 r)))
    (=>
      (and
        (and (<= 0 (inv@35@01 r)) (< (inv@35@01 r) (Seq_length xs@11@01)))
        (= (inv@35@01 r) i2@13@01)
        (img@36@01 r))
      (Set_in r ($FVF.domain_f (as sm@39@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@39@01  $FVF<f>))))
  :qid |qp.fvfDomDef7|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@35@01 r)) (< (inv@35@01 r) (Seq_length xs@11@01)))
        (= (inv@35@01 r) i2@13@01)
        (img@36@01 r))
      (= r (Seq_index xs@11@01 i1@12@01)))
    (=
      ($FVF.lookup_f (as sm@39@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@39@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@35@01 r)) (< (inv@35@01 r) (Seq_length xs@11@01)))
        (= (inv@35@01 r) i2@13@01)
        (img@36@01 r))
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (< $Perm.No (- $Perm.Write (pTaken@21@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@39@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@39@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef6|)))
(assert (fun02qp%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($SortWrappers.$FVF<f>To$Snap (as sm@39@01  $FVF<f>)))) xs@11@01 i2@13@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@34@01 Int)) (!
  (=>
    (and
      (and (<= 0 j@34@01) (< j@34@01 (Seq_length xs@11@01)))
      (= j@34@01 i2@13@01))
    (and
      (= (inv@35@01 (Seq_index xs@11@01 j@34@01)) j@34@01)
      (img@36@01 (Seq_index xs@11@01 j@34@01))))
  :pattern ((Seq_index xs@11@01 j@34@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@36@01 r)
      (and
        (and (<= 0 (inv@35@01 r)) (< (inv@35@01 r) (Seq_length xs@11@01)))
        (= (inv@35@01 r) i2@13@01)))
    (= (Seq_index xs@11@01 (inv@35@01 r)) r))
  :pattern ((inv@35@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@39@01  $FVF<f>)))
      (and
        (and (<= 0 (inv@35@01 r)) (< (inv@35@01 r) (Seq_length xs@11@01)))
        (= (inv@35@01 r) i2@13@01)
        (img@36@01 r)))
    (=>
      (and
        (and (<= 0 (inv@35@01 r)) (< (inv@35@01 r) (Seq_length xs@11@01)))
        (= (inv@35@01 r) i2@13@01)
        (img@36@01 r))
      (Set_in r ($FVF.domain_f (as sm@39@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@39@01  $FVF<f>))))
  :qid |qp.fvfDomDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@35@01 r)) (< (inv@35@01 r) (Seq_length xs@11@01)))
        (= (inv@35@01 r) i2@13@01)
        (img@36@01 r))
      (= r (Seq_index xs@11@01 i1@12@01)))
    (=
      ($FVF.lookup_f (as sm@39@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@39@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@35@01 r)) (< (inv@35@01 r) (Seq_length xs@11@01)))
        (= (inv@35@01 r) i2@13@01)
        (img@36@01 r))
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (< $Perm.No (- $Perm.Write (pTaken@21@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@39@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@39@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef6|)))
(assert (and
  (forall ((j@34@01 Int)) (!
    (=>
      (and (<= 0 j@34@01) (< j@34@01 (Seq_length xs@11@01)))
      (and
        (or (<= 0 j@34@01) (not (<= 0 j@34@01)))
        (or (not (= j@34@01 i2@13@01)) (= j@34@01 i2@13@01))))
    :pattern ((Seq_index xs@11@01 j@34@01))
    :qid |f-aux|))
  (fun02qp%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@39@01  $FVF<f>)))) xs@11@01 i2@13@01)))
; [eval] old(fun02qp(xs, i2))
; [eval] fun02qp(xs, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |xs|
; [eval] |xs|
(declare-const j@40@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |xs|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 16 | !(0 <= j@40@01) | live]
; [else-branch: 16 | 0 <= j@40@01 | live]
(push) ; 6
; [then-branch: 16 | !(0 <= j@40@01)]
(assert (not (<= 0 j@40@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 16 | 0 <= j@40@01]
(assert (<= 0 j@40@01))
; [eval] j < |xs|
; [eval] |xs|
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@40@01) (not (<= 0 j@40@01))))
(assert (and (<= 0 j@40@01) (< j@40@01 (Seq_length xs@11@01))))
; [eval] (j == i ? write : none)
; [eval] j == i
(push) ; 5
; [then-branch: 17 | j@40@01 == i2@13@01 | live]
; [else-branch: 17 | j@40@01 != i2@13@01 | live]
(push) ; 6
; [then-branch: 17 | j@40@01 == i2@13@01]
(assert (= j@40@01 i2@13@01))
(pop) ; 6
(push) ; 6
; [else-branch: 17 | j@40@01 != i2@13@01]
(assert (not (= j@40@01 i2@13@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (= j@40@01 i2@13@01)) (= j@40@01 i2@13@01)))
; [eval] xs[j]
(push) ; 5
(assert (not (>= j@40@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@41@01 ($Ref) Int)
(declare-fun img@42@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@40@01 Int)) (!
  (=>
    (and (<= 0 j@40@01) (< j@40@01 (Seq_length xs@11@01)))
    (and
      (or (<= 0 j@40@01) (not (<= 0 j@40@01)))
      (or (not (= j@40@01 i2@13@01)) (= j@40@01 i2@13@01))))
  :pattern ((Seq_index xs@11@01 j@40@01))
  :qid |f-aux|)))
(push) ; 4
(assert (not (forall ((j@40@01 Int)) (!
  (=>
    (and (<= 0 j@40@01) (< j@40@01 (Seq_length xs@11@01)))
    (or
      (= (ite (= j@40@01 i2@13@01) $Perm.Write $Perm.No) $Perm.No)
      (= j@40@01 i2@13@01)))
  
  :qid |quant-u-41|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@40@01 Int) (j2@40@01 Int)) (!
  (=>
    (and
      (and
        (and (<= 0 j1@40@01) (< j1@40@01 (Seq_length xs@11@01)))
        (= j1@40@01 i2@13@01))
      (and
        (and (<= 0 j2@40@01) (< j2@40@01 (Seq_length xs@11@01)))
        (= j2@40@01 i2@13@01))
      (= (Seq_index xs@11@01 j1@40@01) (Seq_index xs@11@01 j2@40@01)))
    (= j1@40@01 j2@40@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@40@01 Int)) (!
  (=>
    (and
      (and (<= 0 j@40@01) (< j@40@01 (Seq_length xs@11@01)))
      (= j@40@01 i2@13@01))
    (and
      (= (inv@41@01 (Seq_index xs@11@01 j@40@01)) j@40@01)
      (img@42@01 (Seq_index xs@11@01 j@40@01))))
  :pattern ((Seq_index xs@11@01 j@40@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@42@01 r)
      (and
        (and (<= 0 (inv@41@01 r)) (< (inv@41@01 r) (Seq_length xs@11@01)))
        (= (inv@41@01 r) i2@13@01)))
    (= (Seq_index xs@11@01 (inv@41@01 r)) r))
  :pattern ((inv@41@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@43@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@41@01 r)) (< (inv@41@01 r) (Seq_length xs@11@01)))
      (img@42@01 r)
      (= r (Seq_index xs@11@01 (inv@41@01 r))))
    ($Perm.min
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        $Perm.Write
        $Perm.No)
      (ite (= (inv@41@01 r) i2@13@01) $Perm.Write $Perm.No))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@43@01 r))
    $Perm.No)
  
  :qid |quant-u-43|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@43@01 r) $Perm.No)
  
  :qid |quant-u-44|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@41@01 r)) (< (inv@41@01 r) (Seq_length xs@11@01)))
      (img@42@01 r)
      (= r (Seq_index xs@11@01 (inv@41@01 r))))
    (=
      (- (ite (= (inv@41@01 r) i2@13@01) $Perm.Write $Perm.No) (pTaken@43@01 r))
      $Perm.No))
  
  :qid |quant-u-45|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@44@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@44@01  $FVF<f>)))
      (and
        (and (<= 0 (inv@41@01 r)) (< (inv@41@01 r) (Seq_length xs@11@01)))
        (= (inv@41@01 r) i2@13@01)
        (img@42@01 r)))
    (=>
      (and
        (and (<= 0 (inv@41@01 r)) (< (inv@41@01 r) (Seq_length xs@11@01)))
        (= (inv@41@01 r) i2@13@01)
        (img@42@01 r))
      (Set_in r ($FVF.domain_f (as sm@44@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@44@01  $FVF<f>))))
  :qid |qp.fvfDomDef9|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@41@01 r)) (< (inv@41@01 r) (Seq_length xs@11@01)))
        (= (inv@41@01 r) i2@13@01)
        (img@42@01 r))
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01)))))
    (=
      ($FVF.lookup_f (as sm@44@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@44@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef8|)))
(assert (fun02qp%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($SortWrappers.$FVF<f>To$Snap (as sm@44@01  $FVF<f>)))) xs@11@01 i2@13@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@40@01 Int)) (!
  (=>
    (and
      (and (<= 0 j@40@01) (< j@40@01 (Seq_length xs@11@01)))
      (= j@40@01 i2@13@01))
    (and
      (= (inv@41@01 (Seq_index xs@11@01 j@40@01)) j@40@01)
      (img@42@01 (Seq_index xs@11@01 j@40@01))))
  :pattern ((Seq_index xs@11@01 j@40@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@42@01 r)
      (and
        (and (<= 0 (inv@41@01 r)) (< (inv@41@01 r) (Seq_length xs@11@01)))
        (= (inv@41@01 r) i2@13@01)))
    (= (Seq_index xs@11@01 (inv@41@01 r)) r))
  :pattern ((inv@41@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@44@01  $FVF<f>)))
      (and
        (and (<= 0 (inv@41@01 r)) (< (inv@41@01 r) (Seq_length xs@11@01)))
        (= (inv@41@01 r) i2@13@01)
        (img@42@01 r)))
    (=>
      (and
        (and (<= 0 (inv@41@01 r)) (< (inv@41@01 r) (Seq_length xs@11@01)))
        (= (inv@41@01 r) i2@13@01)
        (img@42@01 r))
      (Set_in r ($FVF.domain_f (as sm@44@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@44@01  $FVF<f>))))
  :qid |qp.fvfDomDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@41@01 r)) (< (inv@41@01 r) (Seq_length xs@11@01)))
        (= (inv@41@01 r) i2@13@01)
        (img@42@01 r))
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01)))))
    (=
      ($FVF.lookup_f (as sm@44@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@44@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef8|)))
(assert (and
  (forall ((j@40@01 Int)) (!
    (=>
      (and (<= 0 j@40@01) (< j@40@01 (Seq_length xs@11@01)))
      (and
        (or (<= 0 j@40@01) (not (<= 0 j@40@01)))
        (or (not (= j@40@01 i2@13@01)) (= j@40@01 i2@13@01))))
    :pattern ((Seq_index xs@11@01 j@40@01))
    :qid |f-aux|))
  (fun02qp%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@44@01  $FVF<f>)))) xs@11@01 i2@13@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (=
  (fun02qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@39@01  $FVF<f>)))) xs@11@01 i2@13@01)
  (fun02qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@44@01  $FVF<f>)))) xs@11@01 i2@13@01))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (=
  (fun02qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@39@01  $FVF<f>)))) xs@11@01 i2@13@01)
  (fun02qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@44@01  $FVF<f>)))) xs@11@01 i2@13@01)))
; [exec]
; assert fun03qp(x, i2) == old(fun03qp(x, i2))
; [eval] fun03qp(x, i2) == old(fun03qp(x, i2))
; [eval] fun03qp(x, i2)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |x.elems|
; [eval] |x.elems|
(push) ; 4
(assert (not (<
  i2@13@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (<
  i2@13@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
(declare-const j@45@01 Int)
(push) ; 4
; [eval] 0 <= j && (j < |x.elems| && j == i)
; [eval] 0 <= j
(push) ; 5
; [then-branch: 18 | !(0 <= j@45@01) | live]
; [else-branch: 18 | 0 <= j@45@01 | live]
(push) ; 6
; [then-branch: 18 | !(0 <= j@45@01)]
(assert (not (<= 0 j@45@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 18 | 0 <= j@45@01]
(assert (<= 0 j@45@01))
; [eval] j < |x.elems|
; [eval] |x.elems|
(push) ; 7
; [then-branch: 19 | !(j@45@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@15@01))))))))|) | live]
; [else-branch: 19 | j@45@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@15@01))))))))| | live]
(push) ; 8
; [then-branch: 19 | !(j@45@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@15@01))))))))|)]
(assert (not
  (<
    j@45@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))))
(pop) ; 8
(push) ; 8
; [else-branch: 19 | j@45@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@15@01))))))))|]
(assert (<
  j@45@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
; [eval] j == i
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    j@45@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
  (not
    (<
      j@45@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 j@45@01)
  (and
    (<= 0 j@45@01)
    (or
      (<
        j@45@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
      (not
        (<
          j@45@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))))))
(assert (or (<= 0 j@45@01) (not (<= 0 j@45@01))))
(assert (and
  (<= 0 j@45@01)
  (and
    (<
      j@45@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
    (= j@45@01 i2@13@01))))
; [eval] x.elems[j]
(push) ; 5
(assert (not (>= j@45@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@46@01 ($Ref) Int)
(declare-fun img@47@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@45@01 Int)) (!
  (=>
    (and
      (<= 0 j@45@01)
      (and
        (<
          j@45@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
        (= j@45@01 i2@13@01)))
    (and
      (=>
        (<= 0 j@45@01)
        (and
          (<= 0 j@45@01)
          (or
            (<
              j@45@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
            (not
              (<
                j@45@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))))))
      (or (<= 0 j@45@01) (not (<= 0 j@45@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
    j@45@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@45@01 Int) (j2@45@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j1@45@01)
        (and
          (<
            j1@45@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
          (= j1@45@01 i2@13@01)))
      (and
        (<= 0 j2@45@01)
        (and
          (<
            j2@45@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
          (= j2@45@01 i2@13@01)))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          j1@45@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          j2@45@01)))
    (= j1@45@01 j2@45@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@45@01 Int)) (!
  (=>
    (and
      (<= 0 j@45@01)
      (and
        (<
          j@45@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
        (= j@45@01 i2@13@01)))
    (and
      (=
        (inv@46@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          j@45@01))
        j@45@01)
      (img@47@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
        j@45@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
    j@45@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@47@01 r)
      (and
        (<= 0 (inv@46@01 r))
        (and
          (<
            (inv@46@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
          (= (inv@46@01 r) i2@13@01))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
        (inv@46@01 r))
      r))
  :pattern ((inv@46@01 r))
  :qid |f-fctOfInv|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((j@45@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
      j@45@01)
    (Seq_index xs@11@01 j@45@01))
  
  :qid |quant-u-47|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@48@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@46@01 r))
        (and
          (<
            (inv@46@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
          (= (inv@46@01 r) i2@13@01)))
      (img@47@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          (inv@46@01 r))))
    ($Perm.min
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (- $Perm.Write (pTaken@21@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@49@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@46@01 r))
        (and
          (<
            (inv@46@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
          (= (inv@46@01 r) i2@13@01)))
      (img@47@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          (inv@46@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@48@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (- $Perm.Write (pTaken@21@01 r))
        $Perm.No)
      (pTaken@48@01 r))
    $Perm.No)
  
  :qid |quant-u-49|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@48@01 r) $Perm.No)
  
  :qid |quant-u-50|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@46@01 r))
        (and
          (<
            (inv@46@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
          (= (inv@46@01 r) i2@13@01)))
      (img@47@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          (inv@46@01 r))))
    (= (- $Perm.Write (pTaken@48@01 r)) $Perm.No))
  
  :qid |quant-u-51|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@50@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@50@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@46@01 r))
          (and
            (<
              (inv@46@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
            (= (inv@46@01 r) i2@13@01)))
        (img@47@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@46@01 r))
          (and
            (<
              (inv@46@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
            (= (inv@46@01 r) i2@13@01)))
        (img@47@01 r))
      (Set_in r ($FVF.domain_f (as sm@50@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@50@01  $FVF<f>))))
  :qid |qp.fvfDomDef12|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@46@01 r))
          (and
            (<
              (inv@46@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
            (= (inv@46@01 r) i2@13@01)))
        (img@47@01 r))
      (= r (Seq_index xs@11@01 i1@12@01)))
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@46@01 r))
          (and
            (<
              (inv@46@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
            (= (inv@46@01 r) i2@13@01)))
        (img@47@01 r))
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (< $Perm.No (- $Perm.Write (pTaken@21@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef11|)))
(assert (fun03qp%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@50@01  $FVF<f>))))) x@14@01 i2@13@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@45@01 Int)) (!
  (=>
    (and
      (<= 0 j@45@01)
      (and
        (<
          j@45@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
        (= j@45@01 i2@13@01)))
    (and
      (=
        (inv@46@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          j@45@01))
        j@45@01)
      (img@47@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
        j@45@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
    j@45@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@47@01 r)
      (and
        (<= 0 (inv@46@01 r))
        (and
          (<
            (inv@46@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
          (= (inv@46@01 r) i2@13@01))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
        (inv@46@01 r))
      r))
  :pattern ((inv@46@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@50@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@46@01 r))
          (and
            (<
              (inv@46@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
            (= (inv@46@01 r) i2@13@01)))
        (img@47@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@46@01 r))
          (and
            (<
              (inv@46@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
            (= (inv@46@01 r) i2@13@01)))
        (img@47@01 r))
      (Set_in r ($FVF.domain_f (as sm@50@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@50@01  $FVF<f>))))
  :qid |qp.fvfDomDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@46@01 r))
          (and
            (<
              (inv@46@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
            (= (inv@46@01 r) i2@13@01)))
        (img@47@01 r))
      (= r (Seq_index xs@11@01 i1@12@01)))
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@46@01 r))
          (and
            (<
              (inv@46@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
            (= (inv@46@01 r) i2@13@01)))
        (img@47@01 r))
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (< $Perm.No (- $Perm.Write (pTaken@21@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@50@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@50@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef11|)))
(assert (and
  (<
    i2@13@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
  (forall ((j@45@01 Int)) (!
    (=>
      (and
        (<= 0 j@45@01)
        (and
          (<
            j@45@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
          (= j@45@01 i2@13@01)))
      (and
        (=>
          (<= 0 j@45@01)
          (and
            (<= 0 j@45@01)
            (or
              (<
                j@45@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
              (not
                (<
                  j@45@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))))))
        (or (<= 0 j@45@01) (not (<= 0 j@45@01)))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
      j@45@01))
    :qid |f-aux|))
  (fun03qp%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@50@01  $FVF<f>))))) x@14@01 i2@13@01)))
; [eval] old(fun03qp(x, i2))
; [eval] fun03qp(x, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |x.elems|
; [eval] |x.elems|
(declare-const j@51@01 Int)
(push) ; 4
; [eval] 0 <= j && (j < |x.elems| && j == i)
; [eval] 0 <= j
(push) ; 5
; [then-branch: 20 | !(0 <= j@51@01) | live]
; [else-branch: 20 | 0 <= j@51@01 | live]
(push) ; 6
; [then-branch: 20 | !(0 <= j@51@01)]
(assert (not (<= 0 j@51@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 20 | 0 <= j@51@01]
(assert (<= 0 j@51@01))
; [eval] j < |x.elems|
; [eval] |x.elems|
(push) ; 7
; [then-branch: 21 | !(j@51@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@15@01))))))))|) | live]
; [else-branch: 21 | j@51@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@15@01))))))))| | live]
(push) ; 8
; [then-branch: 21 | !(j@51@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@15@01))))))))|)]
(assert (not
  (<
    j@51@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))))
(pop) ; 8
(push) ; 8
; [else-branch: 21 | j@51@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@15@01))))))))|]
(assert (<
  j@51@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
; [eval] j == i
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    j@51@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
  (not
    (<
      j@51@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 j@51@01)
  (and
    (<= 0 j@51@01)
    (or
      (<
        j@51@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
      (not
        (<
          j@51@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))))))
(assert (or (<= 0 j@51@01) (not (<= 0 j@51@01))))
(assert (and
  (<= 0 j@51@01)
  (and
    (<
      j@51@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
    (= j@51@01 i2@13@01))))
; [eval] x.elems[j]
(push) ; 5
(assert (not (>= j@51@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@52@01 ($Ref) Int)
(declare-fun img@53@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@51@01 Int)) (!
  (=>
    (and
      (<= 0 j@51@01)
      (and
        (<
          j@51@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
        (= j@51@01 i2@13@01)))
    (and
      (=>
        (<= 0 j@51@01)
        (and
          (<= 0 j@51@01)
          (or
            (<
              j@51@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
            (not
              (<
                j@51@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))))))
      (or (<= 0 j@51@01) (not (<= 0 j@51@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
    j@51@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@51@01 Int) (j2@51@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j1@51@01)
        (and
          (<
            j1@51@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
          (= j1@51@01 i2@13@01)))
      (and
        (<= 0 j2@51@01)
        (and
          (<
            j2@51@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
          (= j2@51@01 i2@13@01)))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          j1@51@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          j2@51@01)))
    (= j1@51@01 j2@51@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@51@01 Int)) (!
  (=>
    (and
      (<= 0 j@51@01)
      (and
        (<
          j@51@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
        (= j@51@01 i2@13@01)))
    (and
      (=
        (inv@52@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          j@51@01))
        j@51@01)
      (img@53@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
        j@51@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
    j@51@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@53@01 r)
      (and
        (<= 0 (inv@52@01 r))
        (and
          (<
            (inv@52@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
          (= (inv@52@01 r) i2@13@01))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
        (inv@52@01 r))
      r))
  :pattern ((inv@52@01 r))
  :qid |f-fctOfInv|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((j@51@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
      j@51@01)
    (Seq_index xs@11@01 j@51@01))
  
  :qid |quant-u-53|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@54@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@52@01 r))
        (and
          (<
            (inv@52@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
          (= (inv@52@01 r) i2@13@01)))
      (img@53@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          (inv@52@01 r))))
    ($Perm.min
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@54@01 r))
    $Perm.No)
  
  :qid |quant-u-55|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@54@01 r) $Perm.No)
  
  :qid |quant-u-56|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@52@01 r))
        (and
          (<
            (inv@52@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
          (= (inv@52@01 r) i2@13@01)))
      (img@53@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          (inv@52@01 r))))
    (= (- $Perm.Write (pTaken@54@01 r)) $Perm.No))
  
  :qid |quant-u-57|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@55@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@55@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@52@01 r))
          (and
            (<
              (inv@52@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
            (= (inv@52@01 r) i2@13@01)))
        (img@53@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@52@01 r))
          (and
            (<
              (inv@52@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
            (= (inv@52@01 r) i2@13@01)))
        (img@53@01 r))
      (Set_in r ($FVF.domain_f (as sm@55@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@55@01  $FVF<f>))))
  :qid |qp.fvfDomDef14|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@52@01 r))
          (and
            (<
              (inv@52@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
            (= (inv@52@01 r) i2@13@01)))
        (img@53@01 r))
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01)))))
    (=
      ($FVF.lookup_f (as sm@55@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@55@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef13|)))
(assert (fun03qp%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@55@01  $FVF<f>))))) x@14@01 i2@13@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@51@01 Int)) (!
  (=>
    (and
      (<= 0 j@51@01)
      (and
        (<
          j@51@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
        (= j@51@01 i2@13@01)))
    (and
      (=
        (inv@52@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          j@51@01))
        j@51@01)
      (img@53@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
        j@51@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
    j@51@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@53@01 r)
      (and
        (<= 0 (inv@52@01 r))
        (and
          (<
            (inv@52@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
          (= (inv@52@01 r) i2@13@01))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
        (inv@52@01 r))
      r))
  :pattern ((inv@52@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@55@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@52@01 r))
          (and
            (<
              (inv@52@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
            (= (inv@52@01 r) i2@13@01)))
        (img@53@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@52@01 r))
          (and
            (<
              (inv@52@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
            (= (inv@52@01 r) i2@13@01)))
        (img@53@01 r))
      (Set_in r ($FVF.domain_f (as sm@55@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@55@01  $FVF<f>))))
  :qid |qp.fvfDomDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@52@01 r))
          (and
            (<
              (inv@52@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
            (= (inv@52@01 r) i2@13@01)))
        (img@53@01 r))
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01)))))
    (=
      ($FVF.lookup_f (as sm@55@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@55@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef13|)))
(assert (and
  (forall ((j@51@01 Int)) (!
    (=>
      (and
        (<= 0 j@51@01)
        (and
          (<
            j@51@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
          (= j@51@01 i2@13@01)))
      (and
        (=>
          (<= 0 j@51@01)
          (and
            (<= 0 j@51@01)
            (or
              (<
                j@51@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))
              (not
                (<
                  j@51@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))))))
        (or (<= 0 j@51@01) (not (<= 0 j@51@01)))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
      j@51@01))
    :qid |f-aux|))
  (fun03qp%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@55@01  $FVF<f>))))) x@14@01 i2@13@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (=
  (fun03qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@50@01  $FVF<f>))))) x@14@01 i2@13@01)
  (fun03qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@55@01  $FVF<f>))))) x@14@01 i2@13@01))))
(check-sat)
; unsat
(pop) ; 3
; 0,01s
; (get-info :all-statistics)
(assert (=
  (fun03qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@50@01  $FVF<f>))))) x@14@01 i2@13@01)
  (fun03qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@55@01  $FVF<f>))))) x@14@01 i2@13@01)))
; [exec]
; assert fun04qp(x, i2) == old(fun04qp(x, i2))
; [eval] fun04qp(x, i2) == old(fun04qp(x, i2))
; [eval] fun04qp(x, i2)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |x.elems|
; [eval] |x.elems|
(declare-const j@56@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |x.elems|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 22 | !(0 <= j@56@01) | live]
; [else-branch: 22 | 0 <= j@56@01 | live]
(push) ; 6
; [then-branch: 22 | !(0 <= j@56@01)]
(assert (not (<= 0 j@56@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 22 | 0 <= j@56@01]
(assert (<= 0 j@56@01))
; [eval] j < |x.elems|
; [eval] |x.elems|
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@56@01) (not (<= 0 j@56@01))))
(assert (and
  (<= 0 j@56@01)
  (<
    j@56@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))))
; [eval] (j == i ? write : none)
; [eval] j == i
(push) ; 5
; [then-branch: 23 | j@56@01 == i2@13@01 | live]
; [else-branch: 23 | j@56@01 != i2@13@01 | live]
(push) ; 6
; [then-branch: 23 | j@56@01 == i2@13@01]
(assert (= j@56@01 i2@13@01))
(pop) ; 6
(push) ; 6
; [else-branch: 23 | j@56@01 != i2@13@01]
(assert (not (= j@56@01 i2@13@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (= j@56@01 i2@13@01)) (= j@56@01 i2@13@01)))
; [eval] x.elems[j]
(push) ; 5
(assert (not (>= j@56@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@57@01 ($Ref) Int)
(declare-fun img@58@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@56@01 Int)) (!
  (=>
    (and
      (<= 0 j@56@01)
      (<
        j@56@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
    (and
      (or (<= 0 j@56@01) (not (<= 0 j@56@01)))
      (or (not (= j@56@01 i2@13@01)) (= j@56@01 i2@13@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
    j@56@01))
  :qid |f-aux|)))
(push) ; 4
(assert (not (forall ((j@56@01 Int)) (!
  (=>
    (and
      (<= 0 j@56@01)
      (<
        j@56@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
    (or
      (= (ite (= j@56@01 i2@13@01) $Perm.Write $Perm.No) $Perm.No)
      (= j@56@01 i2@13@01)))
  
  :qid |quant-u-58|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@56@01 Int) (j2@56@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 j1@56@01)
          (<
            j1@56@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
        (= j1@56@01 i2@13@01))
      (and
        (and
          (<= 0 j2@56@01)
          (<
            j2@56@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
        (= j2@56@01 i2@13@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          j1@56@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          j2@56@01)))
    (= j1@56@01 j2@56@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@56@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@56@01)
        (<
          j@56@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
      (= j@56@01 i2@13@01))
    (and
      (=
        (inv@57@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          j@56@01))
        j@56@01)
      (img@58@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
        j@56@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
    j@56@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@58@01 r)
      (and
        (and
          (<= 0 (inv@57@01 r))
          (<
            (inv@57@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
        (= (inv@57@01 r) i2@13@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
        (inv@57@01 r))
      r))
  :pattern ((inv@57@01 r))
  :qid |f-fctOfInv|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((j@56@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
      j@56@01)
    (Seq_index xs@11@01 j@56@01))
  
  :qid |quant-u-59|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@59@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@57@01 r))
        (<
          (inv@57@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
      (img@58@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          (inv@57@01 r))))
    ($Perm.min
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (- $Perm.Write (pTaken@21@01 r))
        $Perm.No)
      (ite (= (inv@57@01 r) i2@13@01) $Perm.Write $Perm.No))
    $Perm.No))
(define-fun pTaken@60@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@57@01 r))
        (<
          (inv@57@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
      (img@58@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          (inv@57@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No)
      (- (ite (= (inv@57@01 r) i2@13@01) $Perm.Write $Perm.No) (pTaken@59@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (- $Perm.Write (pTaken@21@01 r))
        $Perm.No)
      (pTaken@59@01 r))
    $Perm.No)
  
  :qid |quant-u-61|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@59@01 r) $Perm.No)
  
  :qid |quant-u-62|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@57@01 r))
        (<
          (inv@57@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
      (img@58@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          (inv@57@01 r))))
    (=
      (- (ite (= (inv@57@01 r) i2@13@01) $Perm.Write $Perm.No) (pTaken@59@01 r))
      $Perm.No))
  
  :qid |quant-u-63|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@61@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@61@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@57@01 r))
          (<
            (inv@57@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
        (= (inv@57@01 r) i2@13@01)
        (img@58@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@57@01 r))
          (<
            (inv@57@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
        (= (inv@57@01 r) i2@13@01)
        (img@58@01 r))
      (Set_in r ($FVF.domain_f (as sm@61@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@61@01  $FVF<f>))))
  :qid |qp.fvfDomDef17|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@57@01 r))
          (<
            (inv@57@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
        (= (inv@57@01 r) i2@13@01)
        (img@58@01 r))
      (= r (Seq_index xs@11@01 i1@12@01)))
    (=
      ($FVF.lookup_f (as sm@61@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@61@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@57@01 r))
          (<
            (inv@57@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
        (= (inv@57@01 r) i2@13@01)
        (img@58@01 r))
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (< $Perm.No (- $Perm.Write (pTaken@21@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@61@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@61@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef16|)))
(assert (fun04qp%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@61@01  $FVF<f>))))) x@14@01 i2@13@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@56@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@56@01)
        (<
          j@56@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
      (= j@56@01 i2@13@01))
    (and
      (=
        (inv@57@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          j@56@01))
        j@56@01)
      (img@58@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
        j@56@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
    j@56@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@58@01 r)
      (and
        (and
          (<= 0 (inv@57@01 r))
          (<
            (inv@57@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
        (= (inv@57@01 r) i2@13@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
        (inv@57@01 r))
      r))
  :pattern ((inv@57@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@61@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@57@01 r))
          (<
            (inv@57@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
        (= (inv@57@01 r) i2@13@01)
        (img@58@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@57@01 r))
          (<
            (inv@57@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
        (= (inv@57@01 r) i2@13@01)
        (img@58@01 r))
      (Set_in r ($FVF.domain_f (as sm@61@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@61@01  $FVF<f>))))
  :qid |qp.fvfDomDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@57@01 r))
          (<
            (inv@57@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
        (= (inv@57@01 r) i2@13@01)
        (img@58@01 r))
      (= r (Seq_index xs@11@01 i1@12@01)))
    (=
      ($FVF.lookup_f (as sm@61@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@61@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@57@01 r))
          (<
            (inv@57@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
        (= (inv@57@01 r) i2@13@01)
        (img@58@01 r))
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (< $Perm.No (- $Perm.Write (pTaken@21@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@61@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@61@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef16|)))
(assert (and
  (forall ((j@56@01 Int)) (!
    (=>
      (and
        (<= 0 j@56@01)
        (<
          j@56@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
      (and
        (or (<= 0 j@56@01) (not (<= 0 j@56@01)))
        (or (not (= j@56@01 i2@13@01)) (= j@56@01 i2@13@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
      j@56@01))
    :qid |f-aux|))
  (fun04qp%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@61@01  $FVF<f>))))) x@14@01 i2@13@01)))
; [eval] old(fun04qp(x, i2))
; [eval] fun04qp(x, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |x.elems|
; [eval] |x.elems|
(declare-const j@62@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |x.elems|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 24 | !(0 <= j@62@01) | live]
; [else-branch: 24 | 0 <= j@62@01 | live]
(push) ; 6
; [then-branch: 24 | !(0 <= j@62@01)]
(assert (not (<= 0 j@62@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 24 | 0 <= j@62@01]
(assert (<= 0 j@62@01))
; [eval] j < |x.elems|
; [eval] |x.elems|
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@62@01) (not (<= 0 j@62@01))))
(assert (and
  (<= 0 j@62@01)
  (<
    j@62@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))))))
; [eval] (j == i ? write : none)
; [eval] j == i
(push) ; 5
; [then-branch: 25 | j@62@01 == i2@13@01 | live]
; [else-branch: 25 | j@62@01 != i2@13@01 | live]
(push) ; 6
; [then-branch: 25 | j@62@01 == i2@13@01]
(assert (= j@62@01 i2@13@01))
(pop) ; 6
(push) ; 6
; [else-branch: 25 | j@62@01 != i2@13@01]
(assert (not (= j@62@01 i2@13@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (= j@62@01 i2@13@01)) (= j@62@01 i2@13@01)))
; [eval] x.elems[j]
(push) ; 5
(assert (not (>= j@62@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@63@01 ($Ref) Int)
(declare-fun img@64@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@62@01 Int)) (!
  (=>
    (and
      (<= 0 j@62@01)
      (<
        j@62@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
    (and
      (or (<= 0 j@62@01) (not (<= 0 j@62@01)))
      (or (not (= j@62@01 i2@13@01)) (= j@62@01 i2@13@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
    j@62@01))
  :qid |f-aux|)))
(push) ; 4
(assert (not (forall ((j@62@01 Int)) (!
  (=>
    (and
      (<= 0 j@62@01)
      (<
        j@62@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
    (or
      (= (ite (= j@62@01 i2@13@01) $Perm.Write $Perm.No) $Perm.No)
      (= j@62@01 i2@13@01)))
  
  :qid |quant-u-64|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@62@01 Int) (j2@62@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 j1@62@01)
          (<
            j1@62@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
        (= j1@62@01 i2@13@01))
      (and
        (and
          (<= 0 j2@62@01)
          (<
            j2@62@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
        (= j2@62@01 i2@13@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          j1@62@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          j2@62@01)))
    (= j1@62@01 j2@62@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@62@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@62@01)
        (<
          j@62@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
      (= j@62@01 i2@13@01))
    (and
      (=
        (inv@63@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          j@62@01))
        j@62@01)
      (img@64@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
        j@62@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
    j@62@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@64@01 r)
      (and
        (and
          (<= 0 (inv@63@01 r))
          (<
            (inv@63@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
        (= (inv@63@01 r) i2@13@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
        (inv@63@01 r))
      r))
  :pattern ((inv@63@01 r))
  :qid |f-fctOfInv|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((j@62@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
      j@62@01)
    (Seq_index xs@11@01 j@62@01))
  
  :qid |quant-u-65|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@65@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@63@01 r))
        (<
          (inv@63@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
      (img@64@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          (inv@63@01 r))))
    ($Perm.min
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        $Perm.Write
        $Perm.No)
      (ite (= (inv@63@01 r) i2@13@01) $Perm.Write $Perm.No))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@65@01 r))
    $Perm.No)
  
  :qid |quant-u-67|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@65@01 r) $Perm.No)
  
  :qid |quant-u-68|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@63@01 r))
        (<
          (inv@63@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
      (img@64@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          (inv@63@01 r))))
    (=
      (- (ite (= (inv@63@01 r) i2@13@01) $Perm.Write $Perm.No) (pTaken@65@01 r))
      $Perm.No))
  
  :qid |quant-u-69|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@66@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@66@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@63@01 r))
          (<
            (inv@63@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
        (= (inv@63@01 r) i2@13@01)
        (img@64@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@63@01 r))
          (<
            (inv@63@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
        (= (inv@63@01 r) i2@13@01)
        (img@64@01 r))
      (Set_in r ($FVF.domain_f (as sm@66@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@66@01  $FVF<f>))))
  :qid |qp.fvfDomDef19|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@63@01 r))
          (<
            (inv@63@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
        (= (inv@63@01 r) i2@13@01)
        (img@64@01 r))
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01)))))
    (=
      ($FVF.lookup_f (as sm@66@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@66@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef18|)))
(assert (fun04qp%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@66@01  $FVF<f>))))) x@14@01 i2@13@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@62@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@62@01)
        (<
          j@62@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
      (= j@62@01 i2@13@01))
    (and
      (=
        (inv@63@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
          j@62@01))
        j@62@01)
      (img@64@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
        j@62@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
    j@62@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@64@01 r)
      (and
        (and
          (<= 0 (inv@63@01 r))
          (<
            (inv@63@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
        (= (inv@63@01 r) i2@13@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
        (inv@63@01 r))
      r))
  :pattern ((inv@63@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@66@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@63@01 r))
          (<
            (inv@63@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
        (= (inv@63@01 r) i2@13@01)
        (img@64@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@63@01 r))
          (<
            (inv@63@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
        (= (inv@63@01 r) i2@13@01)
        (img@64@01 r))
      (Set_in r ($FVF.domain_f (as sm@66@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@66@01  $FVF<f>))))
  :qid |qp.fvfDomDef19|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@63@01 r))
          (<
            (inv@63@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
        (= (inv@63@01 r) i2@13@01)
        (img@64@01 r))
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01)))))
    (=
      ($FVF.lookup_f (as sm@66@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@66@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef18|)))
(assert (and
  (forall ((j@62@01 Int)) (!
    (=>
      (and
        (<= 0 j@62@01)
        (<
          j@62@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))))))
      (and
        (or (<= 0 j@62@01) (not (<= 0 j@62@01)))
        (or (not (= j@62@01 i2@13@01)) (= j@62@01 i2@13@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))))
      j@62@01))
    :qid |f-aux|))
  (fun04qp%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@66@01  $FVF<f>))))) x@14@01 i2@13@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (=
  (fun04qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@61@01  $FVF<f>))))) x@14@01 i2@13@01)
  (fun04qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@66@01  $FVF<f>))))) x@14@01 i2@13@01))))
(check-sat)
; unsat
(pop) ; 3
; 0,01s
; (get-info :all-statistics)
(assert (=
  (fun04qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@61@01  $FVF<f>))))) x@14@01 i2@13@01)
  (fun04qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@66@01  $FVF<f>))))) x@14@01 i2@13@01)))
; [exec]
; xs[i2].f := 0
; [eval] xs[i2]
(push) ; 3
(assert (not (>= i2@13@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,01s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@67@01 ((r $Ref)) $Perm
  (ite
    (= r (Seq_index xs@11@01 i2@13@01))
    ($Perm.min
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (- $Perm.Write (pTaken@21@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@68@01 ((r $Ref)) $Perm
  (ite
    (= r (Seq_index xs@11@01 i2@13@01))
    ($Perm.min
      (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@67@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (- $Perm.Write (pTaken@21@01 r))
        $Perm.No)
      (pTaken@67@01 r))
    $Perm.No)
  
  :qid |quant-u-71|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@67@01 r) $Perm.No)
  
  :qid |quant-u-72|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (= (- $Perm.Write (pTaken@67@01 r)) $Perm.No))
  
  :qid |quant-u-73|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@69@01 $FVF<f>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01)) 0))
; [exec]
; assert fun01qp(xs, i2) == old(fun01qp(xs, i2))
; [eval] fun01qp(xs, i2) == old(fun01qp(xs, i2))
; [eval] fun01qp(xs, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |xs|
; [eval] |xs|
(declare-const j@70@01 Int)
(push) ; 4
; [eval] 0 <= j && (j < |xs| && j == i)
; [eval] 0 <= j
(push) ; 5
; [then-branch: 26 | !(0 <= j@70@01) | live]
; [else-branch: 26 | 0 <= j@70@01 | live]
(push) ; 6
; [then-branch: 26 | !(0 <= j@70@01)]
(assert (not (<= 0 j@70@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 26 | 0 <= j@70@01]
(assert (<= 0 j@70@01))
; [eval] j < |xs|
; [eval] |xs|
(push) ; 7
; [then-branch: 27 | !(j@70@01 < |xs@11@01|) | live]
; [else-branch: 27 | j@70@01 < |xs@11@01| | live]
(push) ; 8
; [then-branch: 27 | !(j@70@01 < |xs@11@01|)]
(assert (not (< j@70@01 (Seq_length xs@11@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 27 | j@70@01 < |xs@11@01|]
(assert (< j@70@01 (Seq_length xs@11@01)))
; [eval] j == i
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (< j@70@01 (Seq_length xs@11@01)) (not (< j@70@01 (Seq_length xs@11@01)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 j@70@01)
  (and
    (<= 0 j@70@01)
    (or
      (< j@70@01 (Seq_length xs@11@01))
      (not (< j@70@01 (Seq_length xs@11@01)))))))
(assert (or (<= 0 j@70@01) (not (<= 0 j@70@01))))
(assert (and (<= 0 j@70@01) (and (< j@70@01 (Seq_length xs@11@01)) (= j@70@01 i2@13@01))))
; [eval] xs[j]
(push) ; 5
(assert (not (>= j@70@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@71@01 ($Ref) Int)
(declare-fun img@72@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@70@01 Int)) (!
  (=>
    (and
      (<= 0 j@70@01)
      (and (< j@70@01 (Seq_length xs@11@01)) (= j@70@01 i2@13@01)))
    (and
      (=>
        (<= 0 j@70@01)
        (and
          (<= 0 j@70@01)
          (or
            (< j@70@01 (Seq_length xs@11@01))
            (not (< j@70@01 (Seq_length xs@11@01))))))
      (or (<= 0 j@70@01) (not (<= 0 j@70@01)))))
  :pattern ((Seq_index xs@11@01 j@70@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@70@01 Int) (j2@70@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j1@70@01)
        (and (< j1@70@01 (Seq_length xs@11@01)) (= j1@70@01 i2@13@01)))
      (and
        (<= 0 j2@70@01)
        (and (< j2@70@01 (Seq_length xs@11@01)) (= j2@70@01 i2@13@01)))
      (= (Seq_index xs@11@01 j1@70@01) (Seq_index xs@11@01 j2@70@01)))
    (= j1@70@01 j2@70@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@70@01 Int)) (!
  (=>
    (and
      (<= 0 j@70@01)
      (and (< j@70@01 (Seq_length xs@11@01)) (= j@70@01 i2@13@01)))
    (and
      (= (inv@71@01 (Seq_index xs@11@01 j@70@01)) j@70@01)
      (img@72@01 (Seq_index xs@11@01 j@70@01))))
  :pattern ((Seq_index xs@11@01 j@70@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@72@01 r)
      (and
        (<= 0 (inv@71@01 r))
        (and (< (inv@71@01 r) (Seq_length xs@11@01)) (= (inv@71@01 r) i2@13@01))))
    (= (Seq_index xs@11@01 (inv@71@01 r)) r))
  :pattern ((inv@71@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@73@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@71@01 r))
        (and (< (inv@71@01 r) (Seq_length xs@11@01)) (= (inv@71@01 r) i2@13@01)))
      (img@72@01 r)
      (= r (Seq_index xs@11@01 (inv@71@01 r))))
    ($Perm.min
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@74@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@71@01 r))
        (and (< (inv@71@01 r) (Seq_length xs@11@01)) (= (inv@71@01 r) i2@13@01)))
      (img@72@01 r)
      (= r (Seq_index xs@11@01 (inv@71@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@73@01 r)))
    $Perm.No))
(define-fun pTaken@75@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@71@01 r))
        (and (< (inv@71@01 r) (Seq_length xs@11@01)) (= (inv@71@01 r) i2@13@01)))
      (img@72@01 r)
      (= r (Seq_index xs@11@01 (inv@71@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@73@01 r)) (pTaken@74@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
        $Perm.No)
      (pTaken@73@01 r))
    $Perm.No)
  
  :qid |quant-u-76|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@73@01 r) $Perm.No)
  
  :qid |quant-u-77|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@71@01 r))
        (and (< (inv@71@01 r) (Seq_length xs@11@01)) (= (inv@71@01 r) i2@13@01)))
      (img@72@01 r)
      (= r (Seq_index xs@11@01 (inv@71@01 r))))
    (= (- $Perm.Write (pTaken@73@01 r)) $Perm.No))
  
  :qid |quant-u-78|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)
    (pTaken@74@01 (Seq_index xs@11@01 i2@13@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@71@01 r))
        (and (< (inv@71@01 r) (Seq_length xs@11@01)) (= (inv@71@01 r) i2@13@01)))
      (img@72@01 r)
      (= r (Seq_index xs@11@01 (inv@71@01 r))))
    (= (- (- $Perm.Write (pTaken@73@01 r)) (pTaken@74@01 r)) $Perm.No))
  
  :qid |quant-u-80|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@76@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@76@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@71@01 r))
          (and
            (< (inv@71@01 r) (Seq_length xs@11@01))
            (= (inv@71@01 r) i2@13@01)))
        (img@72@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@71@01 r))
          (and
            (< (inv@71@01 r) (Seq_length xs@11@01))
            (= (inv@71@01 r) i2@13@01)))
        (img@72@01 r))
      (Set_in r ($FVF.domain_f (as sm@76@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@76@01  $FVF<f>))))
  :qid |qp.fvfDomDef23|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@71@01 r))
          (and
            (< (inv@71@01 r) (Seq_length xs@11@01))
            (= (inv@71@01 r) i2@13@01)))
        (img@72@01 r))
      (= r (Seq_index xs@11@01 i2@13@01)))
    (=
      ($FVF.lookup_f (as sm@76@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@76@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@71@01 r))
          (and
            (< (inv@71@01 r) (Seq_length xs@11@01))
            (= (inv@71@01 r) i2@13@01)))
        (img@72@01 r))
      (= r (Seq_index xs@11@01 i1@12@01)))
    (=
      ($FVF.lookup_f (as sm@76@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@76@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@71@01 r))
          (and
            (< (inv@71@01 r) (Seq_length xs@11@01))
            (= (inv@71@01 r) i2@13@01)))
        (img@72@01 r))
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@76@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@76@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef22|)))
(assert (fun01qp%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($SortWrappers.$FVF<f>To$Snap (as sm@76@01  $FVF<f>)))) xs@11@01 i2@13@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@70@01 Int)) (!
  (=>
    (and
      (<= 0 j@70@01)
      (and (< j@70@01 (Seq_length xs@11@01)) (= j@70@01 i2@13@01)))
    (and
      (= (inv@71@01 (Seq_index xs@11@01 j@70@01)) j@70@01)
      (img@72@01 (Seq_index xs@11@01 j@70@01))))
  :pattern ((Seq_index xs@11@01 j@70@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@72@01 r)
      (and
        (<= 0 (inv@71@01 r))
        (and (< (inv@71@01 r) (Seq_length xs@11@01)) (= (inv@71@01 r) i2@13@01))))
    (= (Seq_index xs@11@01 (inv@71@01 r)) r))
  :pattern ((inv@71@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@76@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@71@01 r))
          (and
            (< (inv@71@01 r) (Seq_length xs@11@01))
            (= (inv@71@01 r) i2@13@01)))
        (img@72@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@71@01 r))
          (and
            (< (inv@71@01 r) (Seq_length xs@11@01))
            (= (inv@71@01 r) i2@13@01)))
        (img@72@01 r))
      (Set_in r ($FVF.domain_f (as sm@76@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@76@01  $FVF<f>))))
  :qid |qp.fvfDomDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@71@01 r))
          (and
            (< (inv@71@01 r) (Seq_length xs@11@01))
            (= (inv@71@01 r) i2@13@01)))
        (img@72@01 r))
      (= r (Seq_index xs@11@01 i2@13@01)))
    (=
      ($FVF.lookup_f (as sm@76@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@76@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@71@01 r))
          (and
            (< (inv@71@01 r) (Seq_length xs@11@01))
            (= (inv@71@01 r) i2@13@01)))
        (img@72@01 r))
      (= r (Seq_index xs@11@01 i1@12@01)))
    (=
      ($FVF.lookup_f (as sm@76@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@76@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@71@01 r))
          (and
            (< (inv@71@01 r) (Seq_length xs@11@01))
            (= (inv@71@01 r) i2@13@01)))
        (img@72@01 r))
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@76@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@76@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef22|)))
(assert (and
  (forall ((j@70@01 Int)) (!
    (=>
      (and
        (<= 0 j@70@01)
        (and (< j@70@01 (Seq_length xs@11@01)) (= j@70@01 i2@13@01)))
      (and
        (=>
          (<= 0 j@70@01)
          (and
            (<= 0 j@70@01)
            (or
              (< j@70@01 (Seq_length xs@11@01))
              (not (< j@70@01 (Seq_length xs@11@01))))))
        (or (<= 0 j@70@01) (not (<= 0 j@70@01)))))
    :pattern ((Seq_index xs@11@01 j@70@01))
    :qid |f-aux|))
  (fun01qp%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@76@01  $FVF<f>)))) xs@11@01 i2@13@01)))
; [eval] old(fun01qp(xs, i2))
; [eval] fun01qp(xs, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |xs|
; [eval] |xs|
(declare-const j@77@01 Int)
(push) ; 4
; [eval] 0 <= j && (j < |xs| && j == i)
; [eval] 0 <= j
(push) ; 5
; [then-branch: 28 | !(0 <= j@77@01) | live]
; [else-branch: 28 | 0 <= j@77@01 | live]
(push) ; 6
; [then-branch: 28 | !(0 <= j@77@01)]
(assert (not (<= 0 j@77@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 28 | 0 <= j@77@01]
(assert (<= 0 j@77@01))
; [eval] j < |xs|
; [eval] |xs|
(push) ; 7
; [then-branch: 29 | !(j@77@01 < |xs@11@01|) | live]
; [else-branch: 29 | j@77@01 < |xs@11@01| | live]
(push) ; 8
; [then-branch: 29 | !(j@77@01 < |xs@11@01|)]
(assert (not (< j@77@01 (Seq_length xs@11@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 29 | j@77@01 < |xs@11@01|]
(assert (< j@77@01 (Seq_length xs@11@01)))
; [eval] j == i
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (< j@77@01 (Seq_length xs@11@01)) (not (< j@77@01 (Seq_length xs@11@01)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 j@77@01)
  (and
    (<= 0 j@77@01)
    (or
      (< j@77@01 (Seq_length xs@11@01))
      (not (< j@77@01 (Seq_length xs@11@01)))))))
(assert (or (<= 0 j@77@01) (not (<= 0 j@77@01))))
(assert (and (<= 0 j@77@01) (and (< j@77@01 (Seq_length xs@11@01)) (= j@77@01 i2@13@01))))
; [eval] xs[j]
(push) ; 5
(assert (not (>= j@77@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@78@01 ($Ref) Int)
(declare-fun img@79@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@77@01 Int)) (!
  (=>
    (and
      (<= 0 j@77@01)
      (and (< j@77@01 (Seq_length xs@11@01)) (= j@77@01 i2@13@01)))
    (and
      (=>
        (<= 0 j@77@01)
        (and
          (<= 0 j@77@01)
          (or
            (< j@77@01 (Seq_length xs@11@01))
            (not (< j@77@01 (Seq_length xs@11@01))))))
      (or (<= 0 j@77@01) (not (<= 0 j@77@01)))))
  :pattern ((Seq_index xs@11@01 j@77@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@77@01 Int) (j2@77@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j1@77@01)
        (and (< j1@77@01 (Seq_length xs@11@01)) (= j1@77@01 i2@13@01)))
      (and
        (<= 0 j2@77@01)
        (and (< j2@77@01 (Seq_length xs@11@01)) (= j2@77@01 i2@13@01)))
      (= (Seq_index xs@11@01 j1@77@01) (Seq_index xs@11@01 j2@77@01)))
    (= j1@77@01 j2@77@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@77@01 Int)) (!
  (=>
    (and
      (<= 0 j@77@01)
      (and (< j@77@01 (Seq_length xs@11@01)) (= j@77@01 i2@13@01)))
    (and
      (= (inv@78@01 (Seq_index xs@11@01 j@77@01)) j@77@01)
      (img@79@01 (Seq_index xs@11@01 j@77@01))))
  :pattern ((Seq_index xs@11@01 j@77@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@79@01 r)
      (and
        (<= 0 (inv@78@01 r))
        (and (< (inv@78@01 r) (Seq_length xs@11@01)) (= (inv@78@01 r) i2@13@01))))
    (= (Seq_index xs@11@01 (inv@78@01 r)) r))
  :pattern ((inv@78@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@80@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@78@01 r))
        (and (< (inv@78@01 r) (Seq_length xs@11@01)) (= (inv@78@01 r) i2@13@01)))
      (img@79@01 r)
      (= r (Seq_index xs@11@01 (inv@78@01 r))))
    ($Perm.min
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@80@01 r))
    $Perm.No)
  
  :qid |quant-u-83|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@80@01 r) $Perm.No)
  
  :qid |quant-u-84|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@78@01 r))
        (and (< (inv@78@01 r) (Seq_length xs@11@01)) (= (inv@78@01 r) i2@13@01)))
      (img@79@01 r)
      (= r (Seq_index xs@11@01 (inv@78@01 r))))
    (= (- $Perm.Write (pTaken@80@01 r)) $Perm.No))
  
  :qid |quant-u-85|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@81@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@81@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@78@01 r))
          (and
            (< (inv@78@01 r) (Seq_length xs@11@01))
            (= (inv@78@01 r) i2@13@01)))
        (img@79@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@78@01 r))
          (and
            (< (inv@78@01 r) (Seq_length xs@11@01))
            (= (inv@78@01 r) i2@13@01)))
        (img@79@01 r))
      (Set_in r ($FVF.domain_f (as sm@81@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@81@01  $FVF<f>))))
  :qid |qp.fvfDomDef25|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@78@01 r))
          (and
            (< (inv@78@01 r) (Seq_length xs@11@01))
            (= (inv@78@01 r) i2@13@01)))
        (img@79@01 r))
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01)))))
    (=
      ($FVF.lookup_f (as sm@81@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@81@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef24|)))
(assert (fun01qp%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($SortWrappers.$FVF<f>To$Snap (as sm@81@01  $FVF<f>)))) xs@11@01 i2@13@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@77@01 Int)) (!
  (=>
    (and
      (<= 0 j@77@01)
      (and (< j@77@01 (Seq_length xs@11@01)) (= j@77@01 i2@13@01)))
    (and
      (= (inv@78@01 (Seq_index xs@11@01 j@77@01)) j@77@01)
      (img@79@01 (Seq_index xs@11@01 j@77@01))))
  :pattern ((Seq_index xs@11@01 j@77@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@79@01 r)
      (and
        (<= 0 (inv@78@01 r))
        (and (< (inv@78@01 r) (Seq_length xs@11@01)) (= (inv@78@01 r) i2@13@01))))
    (= (Seq_index xs@11@01 (inv@78@01 r)) r))
  :pattern ((inv@78@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@81@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@78@01 r))
          (and
            (< (inv@78@01 r) (Seq_length xs@11@01))
            (= (inv@78@01 r) i2@13@01)))
        (img@79@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@78@01 r))
          (and
            (< (inv@78@01 r) (Seq_length xs@11@01))
            (= (inv@78@01 r) i2@13@01)))
        (img@79@01 r))
      (Set_in r ($FVF.domain_f (as sm@81@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@81@01  $FVF<f>))))
  :qid |qp.fvfDomDef25|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@78@01 r))
          (and
            (< (inv@78@01 r) (Seq_length xs@11@01))
            (= (inv@78@01 r) i2@13@01)))
        (img@79@01 r))
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01)))))
    (=
      ($FVF.lookup_f (as sm@81@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@81@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef24|)))
(assert (and
  (forall ((j@77@01 Int)) (!
    (=>
      (and
        (<= 0 j@77@01)
        (and (< j@77@01 (Seq_length xs@11@01)) (= j@77@01 i2@13@01)))
      (and
        (=>
          (<= 0 j@77@01)
          (and
            (<= 0 j@77@01)
            (or
              (< j@77@01 (Seq_length xs@11@01))
              (not (< j@77@01 (Seq_length xs@11@01))))))
        (or (<= 0 j@77@01) (not (<= 0 j@77@01)))))
    :pattern ((Seq_index xs@11@01 j@77@01))
    :qid |f-aux|))
  (fun01qp%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@81@01  $FVF<f>)))) xs@11@01 i2@13@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (=
  (fun01qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@76@01  $FVF<f>)))) xs@11@01 i2@13@01)
  (fun01qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@81@01  $FVF<f>)))) xs@11@01 i2@13@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01))
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01))
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
  (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))))
(declare-const sm@82@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@82@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@82@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef26|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@82@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@82@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@82@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@82@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef28|)))
(declare-const pm@83@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@83@01  $FPM) r)
    (+
      (+
        (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@83@01  $FPM) r))
  :qid |qp.resPrmSumDef29|)))
(assert (<= ($FVF.perm_f (as pm@83@01  $FPM) (Seq_index xs@11@01 i2@13@01)) $Perm.Write))
(assert (<= ($FVF.perm_f (as pm@83@01  $FPM) (Seq_index xs@11@01 i1@12@01)) $Perm.Write))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@83@01  $FPM) r) $Perm.Write)
  :pattern ((inv@19@01 r))
  :qid |qp-fld-prm-bnd|)))
; [eval] fun01qp(xs, i2) == old(fun01qp(xs, i2))
; [eval] fun01qp(xs, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |xs|
; [eval] |xs|
(declare-const j@84@01 Int)
(push) ; 4
; [eval] 0 <= j && (j < |xs| && j == i)
; [eval] 0 <= j
(push) ; 5
; [then-branch: 30 | !(0 <= j@84@01) | live]
; [else-branch: 30 | 0 <= j@84@01 | live]
(push) ; 6
; [then-branch: 30 | !(0 <= j@84@01)]
(assert (not (<= 0 j@84@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01))
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01))
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
  (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))))
(declare-const sm@85@01 $FVF<f>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@85@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@85@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@85@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@85@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@85@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@85@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef32|)))
(declare-const pm@86@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@86@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@86@01  $FPM) r))
  :qid |qp.resPrmSumDef33|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@86@01  $FPM) r) $Perm.Write)
  :pattern ((inv@19@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<= ($FVF.perm_f (as pm@86@01  $FPM) (Seq_index xs@11@01 i1@12@01)) $Perm.Write))
(assert (<= ($FVF.perm_f (as pm@86@01  $FPM) (Seq_index xs@11@01 i2@13@01)) $Perm.Write))
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 30 | 0 <= j@84@01]
(assert (<= 0 j@84@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01))
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01))
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
  (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))))
(declare-const sm@87@01 $FVF<f>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@87@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@87@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@87@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@87@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@87@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@87@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef36|)))
(declare-const pm@88@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@88@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@88@01  $FPM) r))
  :qid |qp.resPrmSumDef37|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@88@01  $FPM) r) $Perm.Write)
  :pattern ((inv@19@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<= ($FVF.perm_f (as pm@88@01  $FPM) (Seq_index xs@11@01 i1@12@01)) $Perm.Write))
(assert (<= ($FVF.perm_f (as pm@88@01  $FPM) (Seq_index xs@11@01 i2@13@01)) $Perm.Write))
; [eval] j < |xs|
; [eval] |xs|
(set-option :timeout 0)
(push) ; 7
; [then-branch: 31 | !(j@84@01 < |xs@11@01|) | live]
; [else-branch: 31 | j@84@01 < |xs@11@01| | live]
(push) ; 8
; [then-branch: 31 | !(j@84@01 < |xs@11@01|)]
(assert (not (< j@84@01 (Seq_length xs@11@01))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01))
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01)))))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01))
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01)))))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
  (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 31 | j@84@01 < |xs@11@01|]
(assert (< j@84@01 (Seq_length xs@11@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01))
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01)))))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01))
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01)))))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
  (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j == i
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (not (< j@84@01 (Seq_length xs@11@01)))
  (and
    (not (< j@84@01 (Seq_length xs@11@01)))
    (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
    (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01))))))
; Joined path conditions
(assert (=>
  (< j@84@01 (Seq_length xs@11@01))
  (and
    (< j@84@01 (Seq_length xs@11@01))
    (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
    (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01))))))
(assert (or (< j@84@01 (Seq_length xs@11@01)) (not (< j@84@01 (Seq_length xs@11@01)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@85@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@85@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@85@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@85@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@85@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@85@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@86@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@86@01  $FPM) r))
  :qid |qp.resPrmSumDef33|)))
(assert (=>
  (not (<= 0 j@84@01))
  (and
    (not (<= 0 j@84@01))
    (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
    (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@86@01  $FPM) r) $Perm.Write)
      :pattern ((inv@19@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@86@01  $FPM) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@86@01  $FPM) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write))))
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@87@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@87@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@87@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@87@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@87@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@87@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@88@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@88@01  $FPM) r))
  :qid |qp.resPrmSumDef37|)))
(assert (=>
  (<= 0 j@84@01)
  (and
    (<= 0 j@84@01)
    (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
    (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@88@01  $FPM) r) $Perm.Write)
      :pattern ((inv@19@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@88@01  $FPM) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@88@01  $FPM) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write)
    (=>
      (not (< j@84@01 (Seq_length xs@11@01)))
      (and
        (not (< j@84@01 (Seq_length xs@11@01)))
        (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
        (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))))
    (=>
      (< j@84@01 (Seq_length xs@11@01))
      (and
        (< j@84@01 (Seq_length xs@11@01))
        (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
        (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))))
    (or
      (< j@84@01 (Seq_length xs@11@01))
      (not (< j@84@01 (Seq_length xs@11@01)))))))
(assert (or (<= 0 j@84@01) (not (<= 0 j@84@01))))
(assert (and (<= 0 j@84@01) (and (< j@84@01 (Seq_length xs@11@01)) (= j@84@01 i2@13@01))))
; [eval] xs[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@84@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@89@01 ($Ref) Int)
(declare-fun img@90@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@85@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@85@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@85@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@85@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@85@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@85@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@86@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@86@01  $FPM) r))
  :qid |qp.resPrmSumDef33|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@87@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@87@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@87@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@87@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@87@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@87@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@88@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@88@01  $FPM) r))
  :qid |qp.resPrmSumDef37|)))
; Nested auxiliary terms: non-globals
(assert (forall ((j@84@01 Int)) (!
  (=>
    (and
      (<= 0 j@84@01)
      (and (< j@84@01 (Seq_length xs@11@01)) (= j@84@01 i2@13@01)))
    (and
      (=>
        (not (<= 0 j@84@01))
        (and
          (not (<= 0 j@84@01))
          (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
          (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
          (forall ((r $Ref)) (!
            (<= ($FVF.perm_f (as pm@86@01  $FPM) r) $Perm.Write)
            :pattern ((inv@19@01 r))
            :qid |qp-fld-prm-bnd|))
          (<=
            ($FVF.perm_f (as pm@86@01  $FPM) (Seq_index xs@11@01 i1@12@01))
            $Perm.Write)
          (<=
            ($FVF.perm_f (as pm@86@01  $FPM) (Seq_index xs@11@01 i2@13@01))
            $Perm.Write)))
      (=>
        (<= 0 j@84@01)
        (and
          (<= 0 j@84@01)
          (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
          (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
          (forall ((r $Ref)) (!
            (<= ($FVF.perm_f (as pm@88@01  $FPM) r) $Perm.Write)
            :pattern ((inv@19@01 r))
            :qid |qp-fld-prm-bnd|))
          (<=
            ($FVF.perm_f (as pm@88@01  $FPM) (Seq_index xs@11@01 i1@12@01))
            $Perm.Write)
          (<=
            ($FVF.perm_f (as pm@88@01  $FPM) (Seq_index xs@11@01 i2@13@01))
            $Perm.Write)
          (=>
            (not (< j@84@01 (Seq_length xs@11@01)))
            (and
              (not (< j@84@01 (Seq_length xs@11@01)))
              (not
                (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
              (not
                (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))))
          (=>
            (< j@84@01 (Seq_length xs@11@01))
            (and
              (< j@84@01 (Seq_length xs@11@01))
              (not
                (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
              (not
                (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))))
          (or
            (< j@84@01 (Seq_length xs@11@01))
            (not (< j@84@01 (Seq_length xs@11@01))))))
      (or (<= 0 j@84@01) (not (<= 0 j@84@01)))))
  :pattern ((Seq_index xs@11@01 j@84@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@84@01 Int) (j2@84@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j1@84@01)
        (and (< j1@84@01 (Seq_length xs@11@01)) (= j1@84@01 i2@13@01)))
      (and
        (<= 0 j2@84@01)
        (and (< j2@84@01 (Seq_length xs@11@01)) (= j2@84@01 i2@13@01)))
      (= (Seq_index xs@11@01 j1@84@01) (Seq_index xs@11@01 j2@84@01)))
    (= j1@84@01 j2@84@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@84@01 Int)) (!
  (=>
    (and
      (<= 0 j@84@01)
      (and (< j@84@01 (Seq_length xs@11@01)) (= j@84@01 i2@13@01)))
    (and
      (= (inv@89@01 (Seq_index xs@11@01 j@84@01)) j@84@01)
      (img@90@01 (Seq_index xs@11@01 j@84@01))))
  :pattern ((Seq_index xs@11@01 j@84@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@90@01 r)
      (and
        (<= 0 (inv@89@01 r))
        (and (< (inv@89@01 r) (Seq_length xs@11@01)) (= (inv@89@01 r) i2@13@01))))
    (= (Seq_index xs@11@01 (inv@89@01 r)) r))
  :pattern ((inv@89@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@91@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@89@01 r))
        (and (< (inv@89@01 r) (Seq_length xs@11@01)) (= (inv@89@01 r) i2@13@01)))
      (img@90@01 r)
      (= r (Seq_index xs@11@01 (inv@89@01 r))))
    ($Perm.min
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@92@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@89@01 r))
        (and (< (inv@89@01 r) (Seq_length xs@11@01)) (= (inv@89@01 r) i2@13@01)))
      (img@90@01 r)
      (= r (Seq_index xs@11@01 (inv@89@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@91@01 r)))
    $Perm.No))
(define-fun pTaken@93@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@89@01 r))
        (and (< (inv@89@01 r) (Seq_length xs@11@01)) (= (inv@89@01 r) i2@13@01)))
      (img@90@01 r)
      (= r (Seq_index xs@11@01 (inv@89@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@91@01 r)) (pTaken@92@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
        $Perm.No)
      (pTaken@91@01 r))
    $Perm.No)
  
  :qid |quant-u-88|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@91@01 r) $Perm.No)
  
  :qid |quant-u-89|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@89@01 r))
        (and (< (inv@89@01 r) (Seq_length xs@11@01)) (= (inv@89@01 r) i2@13@01)))
      (img@90@01 r)
      (= r (Seq_index xs@11@01 (inv@89@01 r))))
    (= (- $Perm.Write (pTaken@91@01 r)) $Perm.No))
  
  :qid |quant-u-90|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)
    (pTaken@92@01 (Seq_index xs@11@01 i1@12@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0,09s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@92@01 r) $Perm.No)
  
  :qid |quant-u-92|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@89@01 r))
        (and (< (inv@89@01 r) (Seq_length xs@11@01)) (= (inv@89@01 r) i2@13@01)))
      (img@90@01 r)
      (= r (Seq_index xs@11@01 (inv@89@01 r))))
    (= (- (- $Perm.Write (pTaken@91@01 r)) (pTaken@92@01 r)) $Perm.No))
  
  :qid |quant-u-93|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)
    (pTaken@93@01 (Seq_index xs@11@01 i2@13@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@89@01 r))
        (and (< (inv@89@01 r) (Seq_length xs@11@01)) (= (inv@89@01 r) i2@13@01)))
      (img@90@01 r)
      (= r (Seq_index xs@11@01 (inv@89@01 r))))
    (=
      (- (- (- $Perm.Write (pTaken@91@01 r)) (pTaken@92@01 r)) (pTaken@93@01 r))
      $Perm.No))
  
  :qid |quant-u-95|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@94@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@94@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@89@01 r))
          (and
            (< (inv@89@01 r) (Seq_length xs@11@01))
            (= (inv@89@01 r) i2@13@01)))
        (img@90@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@89@01 r))
          (and
            (< (inv@89@01 r) (Seq_length xs@11@01))
            (= (inv@89@01 r) i2@13@01)))
        (img@90@01 r))
      (Set_in r ($FVF.domain_f (as sm@94@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@94@01  $FVF<f>))))
  :qid |qp.fvfDomDef41|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@89@01 r))
          (and
            (< (inv@89@01 r) (Seq_length xs@11@01))
            (= (inv@89@01 r) i2@13@01)))
        (img@90@01 r))
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@94@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@94@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@89@01 r))
          (and
            (< (inv@89@01 r) (Seq_length xs@11@01))
            (= (inv@89@01 r) i2@13@01)))
        (img@90@01 r))
      (= r (Seq_index xs@11@01 i1@12@01)))
    (=
      ($FVF.lookup_f (as sm@94@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@94@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@89@01 r))
          (and
            (< (inv@89@01 r) (Seq_length xs@11@01))
            (= (inv@89@01 r) i2@13@01)))
        (img@90@01 r))
      (= r (Seq_index xs@11@01 i2@13@01)))
    (=
      ($FVF.lookup_f (as sm@94@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@94@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef40|)))
(assert (fun01qp%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($SortWrappers.$FVF<f>To$Snap (as sm@94@01  $FVF<f>)))) xs@11@01 i2@13@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@85@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@85@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@85@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@85@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@85@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@85@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@86@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@86@01  $FPM) r))
  :qid |qp.resPrmSumDef33|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@87@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@87@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@87@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@87@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@87@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@87@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@88@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@88@01  $FPM) r))
  :qid |qp.resPrmSumDef37|)))
(assert (forall ((j@84@01 Int)) (!
  (=>
    (and
      (<= 0 j@84@01)
      (and (< j@84@01 (Seq_length xs@11@01)) (= j@84@01 i2@13@01)))
    (and
      (= (inv@89@01 (Seq_index xs@11@01 j@84@01)) j@84@01)
      (img@90@01 (Seq_index xs@11@01 j@84@01))))
  :pattern ((Seq_index xs@11@01 j@84@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@90@01 r)
      (and
        (<= 0 (inv@89@01 r))
        (and (< (inv@89@01 r) (Seq_length xs@11@01)) (= (inv@89@01 r) i2@13@01))))
    (= (Seq_index xs@11@01 (inv@89@01 r)) r))
  :pattern ((inv@89@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@94@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@89@01 r))
          (and
            (< (inv@89@01 r) (Seq_length xs@11@01))
            (= (inv@89@01 r) i2@13@01)))
        (img@90@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@89@01 r))
          (and
            (< (inv@89@01 r) (Seq_length xs@11@01))
            (= (inv@89@01 r) i2@13@01)))
        (img@90@01 r))
      (Set_in r ($FVF.domain_f (as sm@94@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@94@01  $FVF<f>))))
  :qid |qp.fvfDomDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@89@01 r))
          (and
            (< (inv@89@01 r) (Seq_length xs@11@01))
            (= (inv@89@01 r) i2@13@01)))
        (img@90@01 r))
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@94@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@94@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@89@01 r))
          (and
            (< (inv@89@01 r) (Seq_length xs@11@01))
            (= (inv@89@01 r) i2@13@01)))
        (img@90@01 r))
      (= r (Seq_index xs@11@01 i1@12@01)))
    (=
      ($FVF.lookup_f (as sm@94@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@94@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@89@01 r))
          (and
            (< (inv@89@01 r) (Seq_length xs@11@01))
            (= (inv@89@01 r) i2@13@01)))
        (img@90@01 r))
      (= r (Seq_index xs@11@01 i2@13@01)))
    (=
      ($FVF.lookup_f (as sm@94@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@94@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef40|)))
(assert (and
  (forall ((j@84@01 Int)) (!
    (=>
      (and
        (<= 0 j@84@01)
        (and (< j@84@01 (Seq_length xs@11@01)) (= j@84@01 i2@13@01)))
      (and
        (=>
          (not (<= 0 j@84@01))
          (and
            (not (<= 0 j@84@01))
            (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
            (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@86@01  $FPM) r) $Perm.Write)
              :pattern ((inv@19@01 r))
              :qid |qp-fld-prm-bnd|))
            (<=
              ($FVF.perm_f (as pm@86@01  $FPM) (Seq_index xs@11@01 i1@12@01))
              $Perm.Write)
            (<=
              ($FVF.perm_f (as pm@86@01  $FPM) (Seq_index xs@11@01 i2@13@01))
              $Perm.Write)))
        (=>
          (<= 0 j@84@01)
          (and
            (<= 0 j@84@01)
            (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
            (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@88@01  $FPM) r) $Perm.Write)
              :pattern ((inv@19@01 r))
              :qid |qp-fld-prm-bnd|))
            (<=
              ($FVF.perm_f (as pm@88@01  $FPM) (Seq_index xs@11@01 i1@12@01))
              $Perm.Write)
            (<=
              ($FVF.perm_f (as pm@88@01  $FPM) (Seq_index xs@11@01 i2@13@01))
              $Perm.Write)
            (=>
              (not (< j@84@01 (Seq_length xs@11@01)))
              (and
                (not (< j@84@01 (Seq_length xs@11@01)))
                (not
                  (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
                (not
                  (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))))
            (=>
              (< j@84@01 (Seq_length xs@11@01))
              (and
                (< j@84@01 (Seq_length xs@11@01))
                (not
                  (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
                (not
                  (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))))
            (or
              (< j@84@01 (Seq_length xs@11@01))
              (not (< j@84@01 (Seq_length xs@11@01))))))
        (or (<= 0 j@84@01) (not (<= 0 j@84@01)))))
    :pattern ((Seq_index xs@11@01 j@84@01))
    :qid |f-aux|))
  (fun01qp%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@94@01  $FVF<f>)))) xs@11@01 i2@13@01)))
; [eval] old(fun01qp(xs, i2))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(declare-const sm@95@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@20@01 r)
      (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
    (=
      ($FVF.lookup_f (as sm@95@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@95@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef42|)))
(declare-const pm@96@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@96@01  $FPM) r)
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_f (as pm@96@01  $FPM) r))
  :qid |qp.resPrmSumDef43|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@96@01  $FPM) r) $Perm.Write)
  :pattern ((inv@19@01 r))
  :qid |qp-fld-prm-bnd|)))
; [eval] fun01qp(xs, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |xs|
; [eval] |xs|
(declare-const j@97@01 Int)
(push) ; 4
; [eval] 0 <= j && (j < |xs| && j == i)
; [eval] 0 <= j
(push) ; 5
; [then-branch: 32 | !(0 <= j@97@01) | live]
; [else-branch: 32 | 0 <= j@97@01 | live]
(push) ; 6
; [then-branch: 32 | !(0 <= j@97@01)]
(assert (not (<= 0 j@97@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 32 | 0 <= j@97@01]
(assert (<= 0 j@97@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j < |xs|
; [eval] |xs|
(set-option :timeout 0)
(push) ; 7
; [then-branch: 33 | !(j@97@01 < |xs@11@01|) | live]
; [else-branch: 33 | j@97@01 < |xs@11@01| | live]
(push) ; 8
; [then-branch: 33 | !(j@97@01 < |xs@11@01|)]
(assert (not (< j@97@01 (Seq_length xs@11@01))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 33 | j@97@01 < |xs@11@01|]
(assert (< j@97@01 (Seq_length xs@11@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j == i
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (< j@97@01 (Seq_length xs@11@01)) (not (< j@97@01 (Seq_length xs@11@01)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 j@97@01)
  (and
    (<= 0 j@97@01)
    (or
      (< j@97@01 (Seq_length xs@11@01))
      (not (< j@97@01 (Seq_length xs@11@01)))))))
(assert (or (<= 0 j@97@01) (not (<= 0 j@97@01))))
(assert (and (<= 0 j@97@01) (and (< j@97@01 (Seq_length xs@11@01)) (= j@97@01 i2@13@01))))
; [eval] xs[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@97@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@98@01 ($Ref) Int)
(declare-fun img@99@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@97@01 Int)) (!
  (=>
    (and
      (<= 0 j@97@01)
      (and (< j@97@01 (Seq_length xs@11@01)) (= j@97@01 i2@13@01)))
    (and
      (=>
        (<= 0 j@97@01)
        (and
          (<= 0 j@97@01)
          (or
            (< j@97@01 (Seq_length xs@11@01))
            (not (< j@97@01 (Seq_length xs@11@01))))))
      (or (<= 0 j@97@01) (not (<= 0 j@97@01)))))
  :pattern ((Seq_index xs@11@01 j@97@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@97@01 Int) (j2@97@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j1@97@01)
        (and (< j1@97@01 (Seq_length xs@11@01)) (= j1@97@01 i2@13@01)))
      (and
        (<= 0 j2@97@01)
        (and (< j2@97@01 (Seq_length xs@11@01)) (= j2@97@01 i2@13@01)))
      (= (Seq_index xs@11@01 j1@97@01) (Seq_index xs@11@01 j2@97@01)))
    (= j1@97@01 j2@97@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@97@01 Int)) (!
  (=>
    (and
      (<= 0 j@97@01)
      (and (< j@97@01 (Seq_length xs@11@01)) (= j@97@01 i2@13@01)))
    (and
      (= (inv@98@01 (Seq_index xs@11@01 j@97@01)) j@97@01)
      (img@99@01 (Seq_index xs@11@01 j@97@01))))
  :pattern ((Seq_index xs@11@01 j@97@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@99@01 r)
      (and
        (<= 0 (inv@98@01 r))
        (and (< (inv@98@01 r) (Seq_length xs@11@01)) (= (inv@98@01 r) i2@13@01))))
    (= (Seq_index xs@11@01 (inv@98@01 r)) r))
  :pattern ((inv@98@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@100@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@98@01 r))
        (and (< (inv@98@01 r) (Seq_length xs@11@01)) (= (inv@98@01 r) i2@13@01)))
      (img@99@01 r)
      (= r (Seq_index xs@11@01 (inv@98@01 r))))
    ($Perm.min
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@100@01 r))
    $Perm.No)
  
  :qid |quant-u-98|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@100@01 r) $Perm.No)
  
  :qid |quant-u-99|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@98@01 r))
        (and (< (inv@98@01 r) (Seq_length xs@11@01)) (= (inv@98@01 r) i2@13@01)))
      (img@99@01 r)
      (= r (Seq_index xs@11@01 (inv@98@01 r))))
    (= (- $Perm.Write (pTaken@100@01 r)) $Perm.No))
  
  :qid |quant-u-100|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@101@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@101@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@98@01 r))
          (and
            (< (inv@98@01 r) (Seq_length xs@11@01))
            (= (inv@98@01 r) i2@13@01)))
        (img@99@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@98@01 r))
          (and
            (< (inv@98@01 r) (Seq_length xs@11@01))
            (= (inv@98@01 r) i2@13@01)))
        (img@99@01 r))
      (Set_in r ($FVF.domain_f (as sm@101@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@101@01  $FVF<f>))))
  :qid |qp.fvfDomDef45|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@98@01 r))
          (and
            (< (inv@98@01 r) (Seq_length xs@11@01))
            (= (inv@98@01 r) i2@13@01)))
        (img@99@01 r))
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01)))))
    (=
      ($FVF.lookup_f (as sm@101@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@101@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef44|)))
(assert (fun01qp%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($SortWrappers.$FVF<f>To$Snap (as sm@101@01  $FVF<f>)))) xs@11@01 i2@13@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@97@01 Int)) (!
  (=>
    (and
      (<= 0 j@97@01)
      (and (< j@97@01 (Seq_length xs@11@01)) (= j@97@01 i2@13@01)))
    (and
      (= (inv@98@01 (Seq_index xs@11@01 j@97@01)) j@97@01)
      (img@99@01 (Seq_index xs@11@01 j@97@01))))
  :pattern ((Seq_index xs@11@01 j@97@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@99@01 r)
      (and
        (<= 0 (inv@98@01 r))
        (and (< (inv@98@01 r) (Seq_length xs@11@01)) (= (inv@98@01 r) i2@13@01))))
    (= (Seq_index xs@11@01 (inv@98@01 r)) r))
  :pattern ((inv@98@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@101@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@98@01 r))
          (and
            (< (inv@98@01 r) (Seq_length xs@11@01))
            (= (inv@98@01 r) i2@13@01)))
        (img@99@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@98@01 r))
          (and
            (< (inv@98@01 r) (Seq_length xs@11@01))
            (= (inv@98@01 r) i2@13@01)))
        (img@99@01 r))
      (Set_in r ($FVF.domain_f (as sm@101@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@101@01  $FVF<f>))))
  :qid |qp.fvfDomDef45|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@98@01 r))
          (and
            (< (inv@98@01 r) (Seq_length xs@11@01))
            (= (inv@98@01 r) i2@13@01)))
        (img@99@01 r))
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01)))))
    (=
      ($FVF.lookup_f (as sm@101@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@101@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef44|)))
(assert (and
  (forall ((j@97@01 Int)) (!
    (=>
      (and
        (<= 0 j@97@01)
        (and (< j@97@01 (Seq_length xs@11@01)) (= j@97@01 i2@13@01)))
      (and
        (=>
          (<= 0 j@97@01)
          (and
            (<= 0 j@97@01)
            (or
              (< j@97@01 (Seq_length xs@11@01))
              (not (< j@97@01 (Seq_length xs@11@01))))))
        (or (<= 0 j@97@01) (not (<= 0 j@97@01)))))
    :pattern ((Seq_index xs@11@01 j@97@01))
    :qid |f-aux|))
  (fun01qp%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@101@01  $FVF<f>)))) xs@11@01 i2@13@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (=
  (fun01qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@94@01  $FVF<f>)))) xs@11@01 i2@13@01)
  (fun01qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@101@01  $FVF<f>)))) xs@11@01 i2@13@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01))
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01))
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
  (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))))
(declare-const sm@102@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@102@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@102@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@102@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@102@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@102@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@102@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef48|)))
(declare-const pm@103@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@103@01  $FPM) r)
    (+
      (+
        (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@103@01  $FPM) r))
  :qid |qp.resPrmSumDef49|)))
(assert (<= ($FVF.perm_f (as pm@103@01  $FPM) (Seq_index xs@11@01 i2@13@01)) $Perm.Write))
(assert (<= ($FVF.perm_f (as pm@103@01  $FPM) (Seq_index xs@11@01 i1@12@01)) $Perm.Write))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@103@01  $FPM) r) $Perm.Write)
  :pattern ((inv@19@01 r))
  :qid |qp-fld-prm-bnd|)))
; [eval] fun01qp(xs, i2) == old(fun01qp(xs, i2))
; [eval] fun01qp(xs, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |xs|
; [eval] |xs|
(declare-const j@104@01 Int)
(push) ; 4
; [eval] 0 <= j && (j < |xs| && j == i)
; [eval] 0 <= j
(push) ; 5
; [then-branch: 34 | !(0 <= j@104@01) | live]
; [else-branch: 34 | 0 <= j@104@01 | live]
(push) ; 6
; [then-branch: 34 | !(0 <= j@104@01)]
(assert (not (<= 0 j@104@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01))
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01))
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
  (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 34 | 0 <= j@104@01]
(assert (<= 0 j@104@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01))
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01))
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
  (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j < |xs|
; [eval] |xs|
(set-option :timeout 0)
(push) ; 7
; [then-branch: 35 | !(j@104@01 < |xs@11@01|) | live]
; [else-branch: 35 | j@104@01 < |xs@11@01| | live]
(push) ; 8
; [then-branch: 35 | !(j@104@01 < |xs@11@01|)]
(assert (not (< j@104@01 (Seq_length xs@11@01))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01))
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01)))))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01))
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01)))))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
  (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))))
(declare-const sm@105@01 $FVF<f>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@105@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@105@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@105@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@105@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef51|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@105@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@105@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef52|)))
(declare-const pm@106@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@106@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@106@01  $FPM) r))
  :qid |qp.resPrmSumDef53|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@106@01  $FPM) r) $Perm.Write)
  :pattern ((inv@19@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<= ($FVF.perm_f (as pm@106@01  $FPM) (Seq_index xs@11@01 i1@12@01)) $Perm.Write))
(assert (<= ($FVF.perm_f (as pm@106@01  $FPM) (Seq_index xs@11@01 i2@13@01)) $Perm.Write))
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 35 | j@104@01 < |xs@11@01|]
(assert (< j@104@01 (Seq_length xs@11@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01))
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01)))))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01))
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01)))))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
  (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))))
(declare-const sm@107@01 $FVF<f>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@107@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@107@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@107@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@107@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@107@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@107@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef56|)))
(declare-const pm@108@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@108@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@108@01  $FPM) r))
  :qid |qp.resPrmSumDef57|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@108@01  $FPM) r) $Perm.Write)
  :pattern ((inv@19@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<= ($FVF.perm_f (as pm@108@01  $FPM) (Seq_index xs@11@01 i1@12@01)) $Perm.Write))
(assert (<= ($FVF.perm_f (as pm@108@01  $FPM) (Seq_index xs@11@01 i2@13@01)) $Perm.Write))
; [eval] j == i
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@105@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@105@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@105@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@105@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef51|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@105@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@105@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@106@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@106@01  $FPM) r))
  :qid |qp.resPrmSumDef53|)))
(assert (=>
  (not (< j@104@01 (Seq_length xs@11@01)))
  (and
    (not (< j@104@01 (Seq_length xs@11@01)))
    (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
    (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@106@01  $FPM) r) $Perm.Write)
      :pattern ((inv@19@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@106@01  $FPM) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@106@01  $FPM) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write))))
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@107@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@107@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@107@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@107@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@107@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@107@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@108@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@108@01  $FPM) r))
  :qid |qp.resPrmSumDef57|)))
(assert (=>
  (< j@104@01 (Seq_length xs@11@01))
  (and
    (< j@104@01 (Seq_length xs@11@01))
    (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
    (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@108@01  $FPM) r) $Perm.Write)
      :pattern ((inv@19@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@108@01  $FPM) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@108@01  $FPM) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write))))
(assert (or (< j@104@01 (Seq_length xs@11@01)) (not (< j@104@01 (Seq_length xs@11@01)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (not (<= 0 j@104@01))
  (and
    (not (<= 0 j@104@01))
    (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
    (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01))))))
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@105@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@105@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@105@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@105@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef51|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@105@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@105@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@106@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@106@01  $FPM) r))
  :qid |qp.resPrmSumDef53|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@107@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@107@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@107@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@107@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@107@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@107@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@108@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@108@01  $FPM) r))
  :qid |qp.resPrmSumDef57|)))
(assert (=>
  (<= 0 j@104@01)
  (and
    (<= 0 j@104@01)
    (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
    (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
    (=>
      (not (< j@104@01 (Seq_length xs@11@01)))
      (and
        (not (< j@104@01 (Seq_length xs@11@01)))
        (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
        (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
        (forall ((r $Ref)) (!
          (<= ($FVF.perm_f (as pm@106@01  $FPM) r) $Perm.Write)
          :pattern ((inv@19@01 r))
          :qid |qp-fld-prm-bnd|))
        (<=
          ($FVF.perm_f (as pm@106@01  $FPM) (Seq_index xs@11@01 i1@12@01))
          $Perm.Write)
        (<=
          ($FVF.perm_f (as pm@106@01  $FPM) (Seq_index xs@11@01 i2@13@01))
          $Perm.Write)))
    (=>
      (< j@104@01 (Seq_length xs@11@01))
      (and
        (< j@104@01 (Seq_length xs@11@01))
        (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
        (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
        (forall ((r $Ref)) (!
          (<= ($FVF.perm_f (as pm@108@01  $FPM) r) $Perm.Write)
          :pattern ((inv@19@01 r))
          :qid |qp-fld-prm-bnd|))
        (<=
          ($FVF.perm_f (as pm@108@01  $FPM) (Seq_index xs@11@01 i1@12@01))
          $Perm.Write)
        (<=
          ($FVF.perm_f (as pm@108@01  $FPM) (Seq_index xs@11@01 i2@13@01))
          $Perm.Write)))
    (or
      (< j@104@01 (Seq_length xs@11@01))
      (not (< j@104@01 (Seq_length xs@11@01)))))))
(assert (or (<= 0 j@104@01) (not (<= 0 j@104@01))))
(assert (and
  (<= 0 j@104@01)
  (and (< j@104@01 (Seq_length xs@11@01)) (= j@104@01 i2@13@01))))
; [eval] xs[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@104@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@109@01 ($Ref) Int)
(declare-fun img@110@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@105@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@105@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@105@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@105@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef51|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@105@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@105@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@106@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@106@01  $FPM) r))
  :qid |qp.resPrmSumDef53|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@107@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@107@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@107@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@107@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@107@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@107@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@108@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@108@01  $FPM) r))
  :qid |qp.resPrmSumDef57|)))
; Nested auxiliary terms: non-globals
(assert (forall ((j@104@01 Int)) (!
  (=>
    (and
      (<= 0 j@104@01)
      (and (< j@104@01 (Seq_length xs@11@01)) (= j@104@01 i2@13@01)))
    (and
      (=>
        (not (<= 0 j@104@01))
        (and
          (not (<= 0 j@104@01))
          (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
          (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))))
      (=>
        (<= 0 j@104@01)
        (and
          (<= 0 j@104@01)
          (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
          (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
          (=>
            (not (< j@104@01 (Seq_length xs@11@01)))
            (and
              (not (< j@104@01 (Seq_length xs@11@01)))
              (not
                (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
              (not
                (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
              (forall ((r $Ref)) (!
                (<= ($FVF.perm_f (as pm@106@01  $FPM) r) $Perm.Write)
                :pattern ((inv@19@01 r))
                :qid |qp-fld-prm-bnd|))
              (<=
                ($FVF.perm_f (as pm@106@01  $FPM) (Seq_index xs@11@01 i1@12@01))
                $Perm.Write)
              (<=
                ($FVF.perm_f (as pm@106@01  $FPM) (Seq_index xs@11@01 i2@13@01))
                $Perm.Write)))
          (=>
            (< j@104@01 (Seq_length xs@11@01))
            (and
              (< j@104@01 (Seq_length xs@11@01))
              (not
                (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
              (not
                (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
              (forall ((r $Ref)) (!
                (<= ($FVF.perm_f (as pm@108@01  $FPM) r) $Perm.Write)
                :pattern ((inv@19@01 r))
                :qid |qp-fld-prm-bnd|))
              (<=
                ($FVF.perm_f (as pm@108@01  $FPM) (Seq_index xs@11@01 i1@12@01))
                $Perm.Write)
              (<=
                ($FVF.perm_f (as pm@108@01  $FPM) (Seq_index xs@11@01 i2@13@01))
                $Perm.Write)))
          (or
            (< j@104@01 (Seq_length xs@11@01))
            (not (< j@104@01 (Seq_length xs@11@01))))))
      (or (<= 0 j@104@01) (not (<= 0 j@104@01)))))
  :pattern ((Seq_index xs@11@01 j@104@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@104@01 Int) (j2@104@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j1@104@01)
        (and (< j1@104@01 (Seq_length xs@11@01)) (= j1@104@01 i2@13@01)))
      (and
        (<= 0 j2@104@01)
        (and (< j2@104@01 (Seq_length xs@11@01)) (= j2@104@01 i2@13@01)))
      (= (Seq_index xs@11@01 j1@104@01) (Seq_index xs@11@01 j2@104@01)))
    (= j1@104@01 j2@104@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@104@01 Int)) (!
  (=>
    (and
      (<= 0 j@104@01)
      (and (< j@104@01 (Seq_length xs@11@01)) (= j@104@01 i2@13@01)))
    (and
      (= (inv@109@01 (Seq_index xs@11@01 j@104@01)) j@104@01)
      (img@110@01 (Seq_index xs@11@01 j@104@01))))
  :pattern ((Seq_index xs@11@01 j@104@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@110@01 r)
      (and
        (<= 0 (inv@109@01 r))
        (and
          (< (inv@109@01 r) (Seq_length xs@11@01))
          (= (inv@109@01 r) i2@13@01))))
    (= (Seq_index xs@11@01 (inv@109@01 r)) r))
  :pattern ((inv@109@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@111@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@109@01 r))
        (and
          (< (inv@109@01 r) (Seq_length xs@11@01))
          (= (inv@109@01 r) i2@13@01)))
      (img@110@01 r)
      (= r (Seq_index xs@11@01 (inv@109@01 r))))
    ($Perm.min
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@112@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@109@01 r))
        (and
          (< (inv@109@01 r) (Seq_length xs@11@01))
          (= (inv@109@01 r) i2@13@01)))
      (img@110@01 r)
      (= r (Seq_index xs@11@01 (inv@109@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@111@01 r)))
    $Perm.No))
(define-fun pTaken@113@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@109@01 r))
        (and
          (< (inv@109@01 r) (Seq_length xs@11@01))
          (= (inv@109@01 r) i2@13@01)))
      (img@110@01 r)
      (= r (Seq_index xs@11@01 (inv@109@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@111@01 r)) (pTaken@112@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
        $Perm.No)
      (pTaken@111@01 r))
    $Perm.No)
  
  :qid |quant-u-103|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@111@01 r) $Perm.No)
  
  :qid |quant-u-104|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@109@01 r))
        (and
          (< (inv@109@01 r) (Seq_length xs@11@01))
          (= (inv@109@01 r) i2@13@01)))
      (img@110@01 r)
      (= r (Seq_index xs@11@01 (inv@109@01 r))))
    (= (- $Perm.Write (pTaken@111@01 r)) $Perm.No))
  
  :qid |quant-u-105|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)
    (pTaken@112@01 (Seq_index xs@11@01 i2@13@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@109@01 r))
        (and
          (< (inv@109@01 r) (Seq_length xs@11@01))
          (= (inv@109@01 r) i2@13@01)))
      (img@110@01 r)
      (= r (Seq_index xs@11@01 (inv@109@01 r))))
    (= (- (- $Perm.Write (pTaken@111@01 r)) (pTaken@112@01 r)) $Perm.No))
  
  :qid |quant-u-107|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@114@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@114@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@109@01 r))
          (and
            (< (inv@109@01 r) (Seq_length xs@11@01))
            (= (inv@109@01 r) i2@13@01)))
        (img@110@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@109@01 r))
          (and
            (< (inv@109@01 r) (Seq_length xs@11@01))
            (= (inv@109@01 r) i2@13@01)))
        (img@110@01 r))
      (Set_in r ($FVF.domain_f (as sm@114@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@114@01  $FVF<f>))))
  :qid |qp.fvfDomDef61|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@109@01 r))
          (and
            (< (inv@109@01 r) (Seq_length xs@11@01))
            (= (inv@109@01 r) i2@13@01)))
        (img@110@01 r))
      (= r (Seq_index xs@11@01 i2@13@01)))
    (=
      ($FVF.lookup_f (as sm@114@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@114@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@109@01 r))
          (and
            (< (inv@109@01 r) (Seq_length xs@11@01))
            (= (inv@109@01 r) i2@13@01)))
        (img@110@01 r))
      (= r (Seq_index xs@11@01 i1@12@01)))
    (=
      ($FVF.lookup_f (as sm@114@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@114@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef59|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@109@01 r))
          (and
            (< (inv@109@01 r) (Seq_length xs@11@01))
            (= (inv@109@01 r) i2@13@01)))
        (img@110@01 r))
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@114@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@114@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef60|)))
(assert (fun01qp%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($SortWrappers.$FVF<f>To$Snap (as sm@114@01  $FVF<f>)))) xs@11@01 i2@13@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@105@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@105@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@105@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@105@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef51|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@105@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@105@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@106@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@106@01  $FPM) r))
  :qid |qp.resPrmSumDef53|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@107@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@107@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@107@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@107@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@107@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@107@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@108@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@108@01  $FPM) r))
  :qid |qp.resPrmSumDef57|)))
(assert (forall ((j@104@01 Int)) (!
  (=>
    (and
      (<= 0 j@104@01)
      (and (< j@104@01 (Seq_length xs@11@01)) (= j@104@01 i2@13@01)))
    (and
      (= (inv@109@01 (Seq_index xs@11@01 j@104@01)) j@104@01)
      (img@110@01 (Seq_index xs@11@01 j@104@01))))
  :pattern ((Seq_index xs@11@01 j@104@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@110@01 r)
      (and
        (<= 0 (inv@109@01 r))
        (and
          (< (inv@109@01 r) (Seq_length xs@11@01))
          (= (inv@109@01 r) i2@13@01))))
    (= (Seq_index xs@11@01 (inv@109@01 r)) r))
  :pattern ((inv@109@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@114@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@109@01 r))
          (and
            (< (inv@109@01 r) (Seq_length xs@11@01))
            (= (inv@109@01 r) i2@13@01)))
        (img@110@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@109@01 r))
          (and
            (< (inv@109@01 r) (Seq_length xs@11@01))
            (= (inv@109@01 r) i2@13@01)))
        (img@110@01 r))
      (Set_in r ($FVF.domain_f (as sm@114@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@114@01  $FVF<f>))))
  :qid |qp.fvfDomDef61|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@109@01 r))
          (and
            (< (inv@109@01 r) (Seq_length xs@11@01))
            (= (inv@109@01 r) i2@13@01)))
        (img@110@01 r))
      (= r (Seq_index xs@11@01 i2@13@01)))
    (=
      ($FVF.lookup_f (as sm@114@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@114@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@109@01 r))
          (and
            (< (inv@109@01 r) (Seq_length xs@11@01))
            (= (inv@109@01 r) i2@13@01)))
        (img@110@01 r))
      (= r (Seq_index xs@11@01 i1@12@01)))
    (=
      ($FVF.lookup_f (as sm@114@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@114@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef59|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@109@01 r))
          (and
            (< (inv@109@01 r) (Seq_length xs@11@01))
            (= (inv@109@01 r) i2@13@01)))
        (img@110@01 r))
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@114@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@114@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef60|)))
(assert (and
  (forall ((j@104@01 Int)) (!
    (=>
      (and
        (<= 0 j@104@01)
        (and (< j@104@01 (Seq_length xs@11@01)) (= j@104@01 i2@13@01)))
      (and
        (=>
          (not (<= 0 j@104@01))
          (and
            (not (<= 0 j@104@01))
            (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
            (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))))
        (=>
          (<= 0 j@104@01)
          (and
            (<= 0 j@104@01)
            (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
            (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
            (=>
              (not (< j@104@01 (Seq_length xs@11@01)))
              (and
                (not (< j@104@01 (Seq_length xs@11@01)))
                (not
                  (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
                (not
                  (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
                (forall ((r $Ref)) (!
                  (<= ($FVF.perm_f (as pm@106@01  $FPM) r) $Perm.Write)
                  :pattern ((inv@19@01 r))
                  :qid |qp-fld-prm-bnd|))
                (<=
                  ($FVF.perm_f (as pm@106@01  $FPM) (Seq_index xs@11@01 i1@12@01))
                  $Perm.Write)
                (<=
                  ($FVF.perm_f (as pm@106@01  $FPM) (Seq_index xs@11@01 i2@13@01))
                  $Perm.Write)))
            (=>
              (< j@104@01 (Seq_length xs@11@01))
              (and
                (< j@104@01 (Seq_length xs@11@01))
                (not
                  (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
                (not
                  (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
                (forall ((r $Ref)) (!
                  (<= ($FVF.perm_f (as pm@108@01  $FPM) r) $Perm.Write)
                  :pattern ((inv@19@01 r))
                  :qid |qp-fld-prm-bnd|))
                (<=
                  ($FVF.perm_f (as pm@108@01  $FPM) (Seq_index xs@11@01 i1@12@01))
                  $Perm.Write)
                (<=
                  ($FVF.perm_f (as pm@108@01  $FPM) (Seq_index xs@11@01 i2@13@01))
                  $Perm.Write)))
            (or
              (< j@104@01 (Seq_length xs@11@01))
              (not (< j@104@01 (Seq_length xs@11@01))))))
        (or (<= 0 j@104@01) (not (<= 0 j@104@01)))))
    :pattern ((Seq_index xs@11@01 j@104@01))
    :qid |f-aux|))
  (fun01qp%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@114@01  $FVF<f>)))) xs@11@01 i2@13@01)))
; [eval] old(fun01qp(xs, i2))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(declare-const sm@115@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@20@01 r)
      (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
    (=
      ($FVF.lookup_f (as sm@115@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@115@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef62|)))
(declare-const pm@116@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@116@01  $FPM) r)
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_f (as pm@116@01  $FPM) r))
  :qid |qp.resPrmSumDef63|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@116@01  $FPM) r) $Perm.Write)
  :pattern ((inv@19@01 r))
  :qid |qp-fld-prm-bnd|)))
; [eval] fun01qp(xs, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |xs|
; [eval] |xs|
(declare-const j@117@01 Int)
(push) ; 4
; [eval] 0 <= j && (j < |xs| && j == i)
; [eval] 0 <= j
(push) ; 5
; [then-branch: 36 | !(0 <= j@117@01) | live]
; [else-branch: 36 | 0 <= j@117@01 | live]
(push) ; 6
; [then-branch: 36 | !(0 <= j@117@01)]
(assert (not (<= 0 j@117@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 36 | 0 <= j@117@01]
(assert (<= 0 j@117@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j < |xs|
; [eval] |xs|
(set-option :timeout 0)
(push) ; 7
; [then-branch: 37 | !(j@117@01 < |xs@11@01|) | live]
; [else-branch: 37 | j@117@01 < |xs@11@01| | live]
(push) ; 8
; [then-branch: 37 | !(j@117@01 < |xs@11@01|)]
(assert (not (< j@117@01 (Seq_length xs@11@01))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 37 | j@117@01 < |xs@11@01|]
(assert (< j@117@01 (Seq_length xs@11@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j == i
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (< j@117@01 (Seq_length xs@11@01)) (not (< j@117@01 (Seq_length xs@11@01)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 j@117@01)
  (and
    (<= 0 j@117@01)
    (or
      (< j@117@01 (Seq_length xs@11@01))
      (not (< j@117@01 (Seq_length xs@11@01)))))))
(assert (or (<= 0 j@117@01) (not (<= 0 j@117@01))))
(assert (and
  (<= 0 j@117@01)
  (and (< j@117@01 (Seq_length xs@11@01)) (= j@117@01 i2@13@01))))
; [eval] xs[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@117@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@118@01 ($Ref) Int)
(declare-fun img@119@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@117@01 Int)) (!
  (=>
    (and
      (<= 0 j@117@01)
      (and (< j@117@01 (Seq_length xs@11@01)) (= j@117@01 i2@13@01)))
    (and
      (=>
        (<= 0 j@117@01)
        (and
          (<= 0 j@117@01)
          (or
            (< j@117@01 (Seq_length xs@11@01))
            (not (< j@117@01 (Seq_length xs@11@01))))))
      (or (<= 0 j@117@01) (not (<= 0 j@117@01)))))
  :pattern ((Seq_index xs@11@01 j@117@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@117@01 Int) (j2@117@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j1@117@01)
        (and (< j1@117@01 (Seq_length xs@11@01)) (= j1@117@01 i2@13@01)))
      (and
        (<= 0 j2@117@01)
        (and (< j2@117@01 (Seq_length xs@11@01)) (= j2@117@01 i2@13@01)))
      (= (Seq_index xs@11@01 j1@117@01) (Seq_index xs@11@01 j2@117@01)))
    (= j1@117@01 j2@117@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@117@01 Int)) (!
  (=>
    (and
      (<= 0 j@117@01)
      (and (< j@117@01 (Seq_length xs@11@01)) (= j@117@01 i2@13@01)))
    (and
      (= (inv@118@01 (Seq_index xs@11@01 j@117@01)) j@117@01)
      (img@119@01 (Seq_index xs@11@01 j@117@01))))
  :pattern ((Seq_index xs@11@01 j@117@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@119@01 r)
      (and
        (<= 0 (inv@118@01 r))
        (and
          (< (inv@118@01 r) (Seq_length xs@11@01))
          (= (inv@118@01 r) i2@13@01))))
    (= (Seq_index xs@11@01 (inv@118@01 r)) r))
  :pattern ((inv@118@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@120@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@118@01 r))
        (and
          (< (inv@118@01 r) (Seq_length xs@11@01))
          (= (inv@118@01 r) i2@13@01)))
      (img@119@01 r)
      (= r (Seq_index xs@11@01 (inv@118@01 r))))
    ($Perm.min
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@120@01 r))
    $Perm.No)
  
  :qid |quant-u-110|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@120@01 r) $Perm.No)
  
  :qid |quant-u-111|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@118@01 r))
        (and
          (< (inv@118@01 r) (Seq_length xs@11@01))
          (= (inv@118@01 r) i2@13@01)))
      (img@119@01 r)
      (= r (Seq_index xs@11@01 (inv@118@01 r))))
    (= (- $Perm.Write (pTaken@120@01 r)) $Perm.No))
  
  :qid |quant-u-112|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@121@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@121@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@118@01 r))
          (and
            (< (inv@118@01 r) (Seq_length xs@11@01))
            (= (inv@118@01 r) i2@13@01)))
        (img@119@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@118@01 r))
          (and
            (< (inv@118@01 r) (Seq_length xs@11@01))
            (= (inv@118@01 r) i2@13@01)))
        (img@119@01 r))
      (Set_in r ($FVF.domain_f (as sm@121@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@121@01  $FVF<f>))))
  :qid |qp.fvfDomDef65|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@118@01 r))
          (and
            (< (inv@118@01 r) (Seq_length xs@11@01))
            (= (inv@118@01 r) i2@13@01)))
        (img@119@01 r))
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01)))))
    (=
      ($FVF.lookup_f (as sm@121@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@121@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef64|)))
(assert (fun01qp%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($SortWrappers.$FVF<f>To$Snap (as sm@121@01  $FVF<f>)))) xs@11@01 i2@13@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@117@01 Int)) (!
  (=>
    (and
      (<= 0 j@117@01)
      (and (< j@117@01 (Seq_length xs@11@01)) (= j@117@01 i2@13@01)))
    (and
      (= (inv@118@01 (Seq_index xs@11@01 j@117@01)) j@117@01)
      (img@119@01 (Seq_index xs@11@01 j@117@01))))
  :pattern ((Seq_index xs@11@01 j@117@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@119@01 r)
      (and
        (<= 0 (inv@118@01 r))
        (and
          (< (inv@118@01 r) (Seq_length xs@11@01))
          (= (inv@118@01 r) i2@13@01))))
    (= (Seq_index xs@11@01 (inv@118@01 r)) r))
  :pattern ((inv@118@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@121@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@118@01 r))
          (and
            (< (inv@118@01 r) (Seq_length xs@11@01))
            (= (inv@118@01 r) i2@13@01)))
        (img@119@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@118@01 r))
          (and
            (< (inv@118@01 r) (Seq_length xs@11@01))
            (= (inv@118@01 r) i2@13@01)))
        (img@119@01 r))
      (Set_in r ($FVF.domain_f (as sm@121@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@121@01  $FVF<f>))))
  :qid |qp.fvfDomDef65|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@118@01 r))
          (and
            (< (inv@118@01 r) (Seq_length xs@11@01))
            (= (inv@118@01 r) i2@13@01)))
        (img@119@01 r))
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01)))))
    (=
      ($FVF.lookup_f (as sm@121@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@121@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef64|)))
(assert (and
  (forall ((j@117@01 Int)) (!
    (=>
      (and
        (<= 0 j@117@01)
        (and (< j@117@01 (Seq_length xs@11@01)) (= j@117@01 i2@13@01)))
      (and
        (=>
          (<= 0 j@117@01)
          (and
            (<= 0 j@117@01)
            (or
              (< j@117@01 (Seq_length xs@11@01))
              (not (< j@117@01 (Seq_length xs@11@01))))))
        (or (<= 0 j@117@01) (not (<= 0 j@117@01)))))
    :pattern ((Seq_index xs@11@01 j@117@01))
    :qid |f-aux|))
  (fun01qp%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@121@01  $FVF<f>)))) xs@11@01 i2@13@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (=
  (fun01qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@114@01  $FVF<f>)))) xs@11@01 i2@13@01)
  (fun01qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@121@01  $FVF<f>)))) xs@11@01 i2@13@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,01s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01))
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01))
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
  (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))))
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] fun01qp(xs, i2) == old(fun01qp(xs, i2))
; [eval] fun01qp(xs, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |xs|
; [eval] |xs|
(declare-const j@122@01 Int)
(push) ; 4
; [eval] 0 <= j && (j < |xs| && j == i)
; [eval] 0 <= j
(push) ; 5
; [then-branch: 38 | !(0 <= j@122@01) | live]
; [else-branch: 38 | 0 <= j@122@01 | live]
(push) ; 6
; [then-branch: 38 | !(0 <= j@122@01)]
(assert (not (<= 0 j@122@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01))
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01))
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
  (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))))
(declare-const sm@123@01 $FVF<f>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@123@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@123@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@123@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@123@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef67|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@123@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@123@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef68|)))
(declare-const pm@124@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@124@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@124@01  $FPM) r))
  :qid |qp.resPrmSumDef69|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@124@01  $FPM) r) $Perm.Write)
  :pattern ((inv@19@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<= ($FVF.perm_f (as pm@124@01  $FPM) (Seq_index xs@11@01 i1@12@01)) $Perm.Write))
(assert (<= ($FVF.perm_f (as pm@124@01  $FPM) (Seq_index xs@11@01 i2@13@01)) $Perm.Write))
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 38 | 0 <= j@122@01]
(assert (<= 0 j@122@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01))
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01))
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
  (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))))
(declare-const sm@125@01 $FVF<f>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@125@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@125@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@125@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@125@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@125@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@125@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef72|)))
(declare-const pm@126@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@126@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@126@01  $FPM) r))
  :qid |qp.resPrmSumDef73|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@126@01  $FPM) r) $Perm.Write)
  :pattern ((inv@19@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<= ($FVF.perm_f (as pm@126@01  $FPM) (Seq_index xs@11@01 i1@12@01)) $Perm.Write))
(assert (<= ($FVF.perm_f (as pm@126@01  $FPM) (Seq_index xs@11@01 i2@13@01)) $Perm.Write))
; [eval] j < |xs|
; [eval] |xs|
(set-option :timeout 0)
(push) ; 7
; [then-branch: 39 | !(j@122@01 < |xs@11@01|) | live]
; [else-branch: 39 | j@122@01 < |xs@11@01| | live]
(push) ; 8
; [then-branch: 39 | !(j@122@01 < |xs@11@01|)]
(assert (not (< j@122@01 (Seq_length xs@11@01))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01))))
(check-sat)
; unknown
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01))
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01)))))))
(check-sat)
; unknown
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01))
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01)))))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
  (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 39 | j@122@01 < |xs@11@01|]
(assert (< j@122@01 (Seq_length xs@11@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01))))
(check-sat)
; unknown
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01))
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01)))))))
(check-sat)
; unknown
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
    (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) (Seq_index xs@11@01 i1@12@01))
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) (Seq_index xs@11@01 i2@13@01)))))))
(check-sat)
; unknown
(pop) ; 9
; 0,01s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
  (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j == i
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (not (< j@122@01 (Seq_length xs@11@01)))
  (and
    (not (< j@122@01 (Seq_length xs@11@01)))
    (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
    (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01))))))
; Joined path conditions
(assert (=>
  (< j@122@01 (Seq_length xs@11@01))
  (and
    (< j@122@01 (Seq_length xs@11@01))
    (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
    (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01))))))
(assert (or (< j@122@01 (Seq_length xs@11@01)) (not (< j@122@01 (Seq_length xs@11@01)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@123@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@123@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@123@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@123@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef67|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@123@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@123@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@124@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@124@01  $FPM) r))
  :qid |qp.resPrmSumDef69|)))
(assert (=>
  (not (<= 0 j@122@01))
  (and
    (not (<= 0 j@122@01))
    (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
    (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@124@01  $FPM) r) $Perm.Write)
      :pattern ((inv@19@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@124@01  $FPM) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@124@01  $FPM) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write))))
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@125@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@125@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@125@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@125@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@125@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@125@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@126@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@126@01  $FPM) r))
  :qid |qp.resPrmSumDef73|)))
(assert (=>
  (<= 0 j@122@01)
  (and
    (<= 0 j@122@01)
    (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
    (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@126@01  $FPM) r) $Perm.Write)
      :pattern ((inv@19@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@126@01  $FPM) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@126@01  $FPM) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write)
    (=>
      (not (< j@122@01 (Seq_length xs@11@01)))
      (and
        (not (< j@122@01 (Seq_length xs@11@01)))
        (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
        (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))))
    (=>
      (< j@122@01 (Seq_length xs@11@01))
      (and
        (< j@122@01 (Seq_length xs@11@01))
        (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
        (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))))
    (or
      (< j@122@01 (Seq_length xs@11@01))
      (not (< j@122@01 (Seq_length xs@11@01)))))))
(assert (or (<= 0 j@122@01) (not (<= 0 j@122@01))))
(assert (and
  (<= 0 j@122@01)
  (and (< j@122@01 (Seq_length xs@11@01)) (= j@122@01 i2@13@01))))
; [eval] xs[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@122@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@127@01 ($Ref) Int)
(declare-fun img@128@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@123@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@123@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@123@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@123@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef67|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@123@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@123@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@124@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@124@01  $FPM) r))
  :qid |qp.resPrmSumDef69|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@125@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@125@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@125@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@125@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@125@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@125@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@126@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@126@01  $FPM) r))
  :qid |qp.resPrmSumDef73|)))
; Nested auxiliary terms: non-globals
(assert (forall ((j@122@01 Int)) (!
  (=>
    (and
      (<= 0 j@122@01)
      (and (< j@122@01 (Seq_length xs@11@01)) (= j@122@01 i2@13@01)))
    (and
      (=>
        (not (<= 0 j@122@01))
        (and
          (not (<= 0 j@122@01))
          (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
          (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
          (forall ((r $Ref)) (!
            (<= ($FVF.perm_f (as pm@124@01  $FPM) r) $Perm.Write)
            :pattern ((inv@19@01 r))
            :qid |qp-fld-prm-bnd|))
          (<=
            ($FVF.perm_f (as pm@124@01  $FPM) (Seq_index xs@11@01 i1@12@01))
            $Perm.Write)
          (<=
            ($FVF.perm_f (as pm@124@01  $FPM) (Seq_index xs@11@01 i2@13@01))
            $Perm.Write)))
      (=>
        (<= 0 j@122@01)
        (and
          (<= 0 j@122@01)
          (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
          (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
          (forall ((r $Ref)) (!
            (<= ($FVF.perm_f (as pm@126@01  $FPM) r) $Perm.Write)
            :pattern ((inv@19@01 r))
            :qid |qp-fld-prm-bnd|))
          (<=
            ($FVF.perm_f (as pm@126@01  $FPM) (Seq_index xs@11@01 i1@12@01))
            $Perm.Write)
          (<=
            ($FVF.perm_f (as pm@126@01  $FPM) (Seq_index xs@11@01 i2@13@01))
            $Perm.Write)
          (=>
            (not (< j@122@01 (Seq_length xs@11@01)))
            (and
              (not (< j@122@01 (Seq_length xs@11@01)))
              (not
                (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
              (not
                (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))))
          (=>
            (< j@122@01 (Seq_length xs@11@01))
            (and
              (< j@122@01 (Seq_length xs@11@01))
              (not
                (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
              (not
                (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))))
          (or
            (< j@122@01 (Seq_length xs@11@01))
            (not (< j@122@01 (Seq_length xs@11@01))))))
      (or (<= 0 j@122@01) (not (<= 0 j@122@01)))))
  :pattern ((Seq_index xs@11@01 j@122@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@122@01 Int) (j2@122@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j1@122@01)
        (and (< j1@122@01 (Seq_length xs@11@01)) (= j1@122@01 i2@13@01)))
      (and
        (<= 0 j2@122@01)
        (and (< j2@122@01 (Seq_length xs@11@01)) (= j2@122@01 i2@13@01)))
      (= (Seq_index xs@11@01 j1@122@01) (Seq_index xs@11@01 j2@122@01)))
    (= j1@122@01 j2@122@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@122@01 Int)) (!
  (=>
    (and
      (<= 0 j@122@01)
      (and (< j@122@01 (Seq_length xs@11@01)) (= j@122@01 i2@13@01)))
    (and
      (= (inv@127@01 (Seq_index xs@11@01 j@122@01)) j@122@01)
      (img@128@01 (Seq_index xs@11@01 j@122@01))))
  :pattern ((Seq_index xs@11@01 j@122@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@128@01 r)
      (and
        (<= 0 (inv@127@01 r))
        (and
          (< (inv@127@01 r) (Seq_length xs@11@01))
          (= (inv@127@01 r) i2@13@01))))
    (= (Seq_index xs@11@01 (inv@127@01 r)) r))
  :pattern ((inv@127@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@129@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@127@01 r))
        (and
          (< (inv@127@01 r) (Seq_length xs@11@01))
          (= (inv@127@01 r) i2@13@01)))
      (img@128@01 r)
      (= r (Seq_index xs@11@01 (inv@127@01 r))))
    ($Perm.min
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@130@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@127@01 r))
        (and
          (< (inv@127@01 r) (Seq_length xs@11@01))
          (= (inv@127@01 r) i2@13@01)))
      (img@128@01 r)
      (= r (Seq_index xs@11@01 (inv@127@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@129@01 r)))
    $Perm.No))
(define-fun pTaken@131@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@127@01 r))
        (and
          (< (inv@127@01 r) (Seq_length xs@11@01))
          (= (inv@127@01 r) i2@13@01)))
      (img@128@01 r)
      (= r (Seq_index xs@11@01 (inv@127@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@129@01 r)) (pTaken@130@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
        $Perm.No)
      (pTaken@129@01 r))
    $Perm.No)
  
  :qid |quant-u-115|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@129@01 r) $Perm.No)
  
  :qid |quant-u-116|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@127@01 r))
        (and
          (< (inv@127@01 r) (Seq_length xs@11@01))
          (= (inv@127@01 r) i2@13@01)))
      (img@128@01 r)
      (= r (Seq_index xs@11@01 (inv@127@01 r))))
    (= (- $Perm.Write (pTaken@129@01 r)) $Perm.No))
  
  :qid |quant-u-117|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i1@12@01))
      $Perm.Write
      $Perm.No)
    (pTaken@130@01 (Seq_index xs@11@01 i1@12@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@130@01 r) $Perm.No)
  
  :qid |quant-u-119|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@127@01 r))
        (and
          (< (inv@127@01 r) (Seq_length xs@11@01))
          (= (inv@127@01 r) i2@13@01)))
      (img@128@01 r)
      (= r (Seq_index xs@11@01 (inv@127@01 r))))
    (= (- (- $Perm.Write (pTaken@129@01 r)) (pTaken@130@01 r)) $Perm.No))
  
  :qid |quant-u-120|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i2@13@01))
      $Perm.Write
      $Perm.No)
    (pTaken@131@01 (Seq_index xs@11@01 i2@13@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@127@01 r))
        (and
          (< (inv@127@01 r) (Seq_length xs@11@01))
          (= (inv@127@01 r) i2@13@01)))
      (img@128@01 r)
      (= r (Seq_index xs@11@01 (inv@127@01 r))))
    (=
      (-
        (- (- $Perm.Write (pTaken@129@01 r)) (pTaken@130@01 r))
        (pTaken@131@01 r))
      $Perm.No))
  
  :qid |quant-u-122|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@132@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@132@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@127@01 r))
          (and
            (< (inv@127@01 r) (Seq_length xs@11@01))
            (= (inv@127@01 r) i2@13@01)))
        (img@128@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@127@01 r))
          (and
            (< (inv@127@01 r) (Seq_length xs@11@01))
            (= (inv@127@01 r) i2@13@01)))
        (img@128@01 r))
      (Set_in r ($FVF.domain_f (as sm@132@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@132@01  $FVF<f>))))
  :qid |qp.fvfDomDef77|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@127@01 r))
          (and
            (< (inv@127@01 r) (Seq_length xs@11@01))
            (= (inv@127@01 r) i2@13@01)))
        (img@128@01 r))
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@132@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@132@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@127@01 r))
          (and
            (< (inv@127@01 r) (Seq_length xs@11@01))
            (= (inv@127@01 r) i2@13@01)))
        (img@128@01 r))
      (= r (Seq_index xs@11@01 i1@12@01)))
    (=
      ($FVF.lookup_f (as sm@132@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@132@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@127@01 r))
          (and
            (< (inv@127@01 r) (Seq_length xs@11@01))
            (= (inv@127@01 r) i2@13@01)))
        (img@128@01 r))
      (= r (Seq_index xs@11@01 i2@13@01)))
    (=
      ($FVF.lookup_f (as sm@132@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@132@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef76|)))
(assert (fun01qp%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($SortWrappers.$FVF<f>To$Snap (as sm@132@01  $FVF<f>)))) xs@11@01 i2@13@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@123@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@123@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@123@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@123@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef67|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@123@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@123@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@124@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@124@01  $FPM) r))
  :qid |qp.resPrmSumDef69|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@125@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@125@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i1@12@01))
    (=
      ($FVF.lookup_f (as sm@125@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@125@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@11@01 i2@13@01))
    (=
      ($FVF.lookup_f (as sm@125@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@125@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@126@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@20@01 r)
            (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@11@01 i1@12@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@11@01 i2@13@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@126@01  $FPM) r))
  :qid |qp.resPrmSumDef73|)))
(assert (forall ((j@122@01 Int)) (!
  (=>
    (and
      (<= 0 j@122@01)
      (and (< j@122@01 (Seq_length xs@11@01)) (= j@122@01 i2@13@01)))
    (and
      (= (inv@127@01 (Seq_index xs@11@01 j@122@01)) j@122@01)
      (img@128@01 (Seq_index xs@11@01 j@122@01))))
  :pattern ((Seq_index xs@11@01 j@122@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@128@01 r)
      (and
        (<= 0 (inv@127@01 r))
        (and
          (< (inv@127@01 r) (Seq_length xs@11@01))
          (= (inv@127@01 r) i2@13@01))))
    (= (Seq_index xs@11@01 (inv@127@01 r)) r))
  :pattern ((inv@127@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@132@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@127@01 r))
          (and
            (< (inv@127@01 r) (Seq_length xs@11@01))
            (= (inv@127@01 r) i2@13@01)))
        (img@128@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@127@01 r))
          (and
            (< (inv@127@01 r) (Seq_length xs@11@01))
            (= (inv@127@01 r) i2@13@01)))
        (img@128@01 r))
      (Set_in r ($FVF.domain_f (as sm@132@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@132@01  $FVF<f>))))
  :qid |qp.fvfDomDef77|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@127@01 r))
          (and
            (< (inv@127@01 r) (Seq_length xs@11@01))
            (= (inv@127@01 r) i2@13@01)))
        (img@128@01 r))
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@67@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@132@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@132@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@127@01 r))
          (and
            (< (inv@127@01 r) (Seq_length xs@11@01))
            (= (inv@127@01 r) i2@13@01)))
        (img@128@01 r))
      (= r (Seq_index xs@11@01 i1@12@01)))
    (=
      ($FVF.lookup_f (as sm@132@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@22@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@132@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@22@01  $FVF<f>) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@127@01 r))
          (and
            (< (inv@127@01 r) (Seq_length xs@11@01))
            (= (inv@127@01 r) i2@13@01)))
        (img@128@01 r))
      (= r (Seq_index xs@11@01 i2@13@01)))
    (=
      ($FVF.lookup_f (as sm@132@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@69@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@132@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@69@01  $FVF<f>) r))
  :qid |qp.fvfValDef76|)))
(assert (and
  (forall ((j@122@01 Int)) (!
    (=>
      (and
        (<= 0 j@122@01)
        (and (< j@122@01 (Seq_length xs@11@01)) (= j@122@01 i2@13@01)))
      (and
        (=>
          (not (<= 0 j@122@01))
          (and
            (not (<= 0 j@122@01))
            (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
            (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@124@01  $FPM) r) $Perm.Write)
              :pattern ((inv@19@01 r))
              :qid |qp-fld-prm-bnd|))
            (<=
              ($FVF.perm_f (as pm@124@01  $FPM) (Seq_index xs@11@01 i1@12@01))
              $Perm.Write)
            (<=
              ($FVF.perm_f (as pm@124@01  $FPM) (Seq_index xs@11@01 i2@13@01))
              $Perm.Write)))
        (=>
          (<= 0 j@122@01)
          (and
            (<= 0 j@122@01)
            (not (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))
            (not (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@126@01  $FPM) r) $Perm.Write)
              :pattern ((inv@19@01 r))
              :qid |qp-fld-prm-bnd|))
            (<=
              ($FVF.perm_f (as pm@126@01  $FPM) (Seq_index xs@11@01 i1@12@01))
              $Perm.Write)
            (<=
              ($FVF.perm_f (as pm@126@01  $FPM) (Seq_index xs@11@01 i2@13@01))
              $Perm.Write)
            (=>
              (not (< j@122@01 (Seq_length xs@11@01)))
              (and
                (not (< j@122@01 (Seq_length xs@11@01)))
                (not
                  (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
                (not
                  (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))))
            (=>
              (< j@122@01 (Seq_length xs@11@01))
              (and
                (< j@122@01 (Seq_length xs@11@01))
                (not
                  (= (Seq_index xs@11@01 i2@13@01) (Seq_index xs@11@01 i1@12@01)))
                (not
                  (= (Seq_index xs@11@01 i1@12@01) (Seq_index xs@11@01 i2@13@01)))))
            (or
              (< j@122@01 (Seq_length xs@11@01))
              (not (< j@122@01 (Seq_length xs@11@01))))))
        (or (<= 0 j@122@01) (not (<= 0 j@122@01)))))
    :pattern ((Seq_index xs@11@01 j@122@01))
    :qid |f-aux|))
  (fun01qp%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@132@01  $FVF<f>)))) xs@11@01 i2@13@01)))
; [eval] old(fun01qp(xs, i2))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(declare-const sm@133@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@20@01 r)
      (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
    (=
      ($FVF.lookup_f (as sm@133@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@133@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef78|)))
(declare-const pm@134@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@134@01  $FPM) r)
    (ite
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_f (as pm@134@01  $FPM) r))
  :qid |qp.resPrmSumDef79|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@134@01  $FPM) r) $Perm.Write)
  :pattern ((inv@19@01 r))
  :qid |qp-fld-prm-bnd|)))
; [eval] fun01qp(xs, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |xs|
; [eval] |xs|
(declare-const j@135@01 Int)
(push) ; 4
; [eval] 0 <= j && (j < |xs| && j == i)
; [eval] 0 <= j
(push) ; 5
; [then-branch: 40 | !(0 <= j@135@01) | live]
; [else-branch: 40 | 0 <= j@135@01 | live]
(push) ; 6
; [then-branch: 40 | !(0 <= j@135@01)]
(assert (not (<= 0 j@135@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 40 | 0 <= j@135@01]
(assert (<= 0 j@135@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j < |xs|
; [eval] |xs|
(set-option :timeout 0)
(push) ; 7
; [then-branch: 41 | !(j@135@01 < |xs@11@01|) | live]
; [else-branch: 41 | j@135@01 < |xs@11@01| | live]
(push) ; 8
; [then-branch: 41 | !(j@135@01 < |xs@11@01|)]
(assert (not (< j@135@01 (Seq_length xs@11@01))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 41 | j@135@01 < |xs@11@01|]
(assert (< j@135@01 (Seq_length xs@11@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j == i
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (< j@135@01 (Seq_length xs@11@01)) (not (< j@135@01 (Seq_length xs@11@01)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 j@135@01)
  (and
    (<= 0 j@135@01)
    (or
      (< j@135@01 (Seq_length xs@11@01))
      (not (< j@135@01 (Seq_length xs@11@01)))))))
(assert (or (<= 0 j@135@01) (not (<= 0 j@135@01))))
(assert (and
  (<= 0 j@135@01)
  (and (< j@135@01 (Seq_length xs@11@01)) (= j@135@01 i2@13@01))))
; [eval] xs[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@135@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@136@01 ($Ref) Int)
(declare-fun img@137@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@135@01 Int)) (!
  (=>
    (and
      (<= 0 j@135@01)
      (and (< j@135@01 (Seq_length xs@11@01)) (= j@135@01 i2@13@01)))
    (and
      (=>
        (<= 0 j@135@01)
        (and
          (<= 0 j@135@01)
          (or
            (< j@135@01 (Seq_length xs@11@01))
            (not (< j@135@01 (Seq_length xs@11@01))))))
      (or (<= 0 j@135@01) (not (<= 0 j@135@01)))))
  :pattern ((Seq_index xs@11@01 j@135@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@135@01 Int) (j2@135@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j1@135@01)
        (and (< j1@135@01 (Seq_length xs@11@01)) (= j1@135@01 i2@13@01)))
      (and
        (<= 0 j2@135@01)
        (and (< j2@135@01 (Seq_length xs@11@01)) (= j2@135@01 i2@13@01)))
      (= (Seq_index xs@11@01 j1@135@01) (Seq_index xs@11@01 j2@135@01)))
    (= j1@135@01 j2@135@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@135@01 Int)) (!
  (=>
    (and
      (<= 0 j@135@01)
      (and (< j@135@01 (Seq_length xs@11@01)) (= j@135@01 i2@13@01)))
    (and
      (= (inv@136@01 (Seq_index xs@11@01 j@135@01)) j@135@01)
      (img@137@01 (Seq_index xs@11@01 j@135@01))))
  :pattern ((Seq_index xs@11@01 j@135@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@137@01 r)
      (and
        (<= 0 (inv@136@01 r))
        (and
          (< (inv@136@01 r) (Seq_length xs@11@01))
          (= (inv@136@01 r) i2@13@01))))
    (= (Seq_index xs@11@01 (inv@136@01 r)) r))
  :pattern ((inv@136@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@138@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@136@01 r))
        (and
          (< (inv@136@01 r) (Seq_length xs@11@01))
          (= (inv@136@01 r) i2@13@01)))
      (img@137@01 r)
      (= r (Seq_index xs@11@01 (inv@136@01 r))))
    ($Perm.min
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@20@01 r)
          (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@138@01 r))
    $Perm.No)
  
  :qid |quant-u-125|))))
(check-sat)
; unknown
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@138@01 r) $Perm.No)
  
  :qid |quant-u-126|))))
(check-sat)
; unknown
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@136@01 r))
        (and
          (< (inv@136@01 r) (Seq_length xs@11@01))
          (= (inv@136@01 r) i2@13@01)))
      (img@137@01 r)
      (= r (Seq_index xs@11@01 (inv@136@01 r))))
    (= (- $Perm.Write (pTaken@138@01 r)) $Perm.No))
  
  :qid |quant-u-127|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@139@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@139@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@136@01 r))
          (and
            (< (inv@136@01 r) (Seq_length xs@11@01))
            (= (inv@136@01 r) i2@13@01)))
        (img@137@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@136@01 r))
          (and
            (< (inv@136@01 r) (Seq_length xs@11@01))
            (= (inv@136@01 r) i2@13@01)))
        (img@137@01 r))
      (Set_in r ($FVF.domain_f (as sm@139@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@139@01  $FVF<f>))))
  :qid |qp.fvfDomDef81|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@136@01 r))
          (and
            (< (inv@136@01 r) (Seq_length xs@11@01))
            (= (inv@136@01 r) i2@13@01)))
        (img@137@01 r))
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01)))))
    (=
      ($FVF.lookup_f (as sm@139@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@139@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef80|)))
(assert (fun01qp%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($SortWrappers.$FVF<f>To$Snap (as sm@139@01  $FVF<f>)))) xs@11@01 i2@13@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@135@01 Int)) (!
  (=>
    (and
      (<= 0 j@135@01)
      (and (< j@135@01 (Seq_length xs@11@01)) (= j@135@01 i2@13@01)))
    (and
      (= (inv@136@01 (Seq_index xs@11@01 j@135@01)) j@135@01)
      (img@137@01 (Seq_index xs@11@01 j@135@01))))
  :pattern ((Seq_index xs@11@01 j@135@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@137@01 r)
      (and
        (<= 0 (inv@136@01 r))
        (and
          (< (inv@136@01 r) (Seq_length xs@11@01))
          (= (inv@136@01 r) i2@13@01))))
    (= (Seq_index xs@11@01 (inv@136@01 r)) r))
  :pattern ((inv@136@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@139@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@136@01 r))
          (and
            (< (inv@136@01 r) (Seq_length xs@11@01))
            (= (inv@136@01 r) i2@13@01)))
        (img@137@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@136@01 r))
          (and
            (< (inv@136@01 r) (Seq_length xs@11@01))
            (= (inv@136@01 r) i2@13@01)))
        (img@137@01 r))
      (Set_in r ($FVF.domain_f (as sm@139@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@139@01  $FVF<f>))))
  :qid |qp.fvfDomDef81|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@136@01 r))
          (and
            (< (inv@136@01 r) (Seq_length xs@11@01))
            (= (inv@136@01 r) i2@13@01)))
        (img@137@01 r))
      (and
        (img@20@01 r)
        (and (<= 0 (inv@19@01 r)) (< (inv@19@01 r) (Seq_length xs@11@01)))))
    (=
      ($FVF.lookup_f (as sm@139@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@139@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@15@01)))))))) r))
  :qid |qp.fvfValDef80|)))
(assert (and
  (forall ((j@135@01 Int)) (!
    (=>
      (and
        (<= 0 j@135@01)
        (and (< j@135@01 (Seq_length xs@11@01)) (= j@135@01 i2@13@01)))
      (and
        (=>
          (<= 0 j@135@01)
          (and
            (<= 0 j@135@01)
            (or
              (< j@135@01 (Seq_length xs@11@01))
              (not (< j@135@01 (Seq_length xs@11@01))))))
        (or (<= 0 j@135@01) (not (<= 0 j@135@01)))))
    :pattern ((Seq_index xs@11@01 j@135@01))
    :qid |f-aux|))
  (fun01qp%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@139@01  $FVF<f>)))) xs@11@01 i2@13@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (=
  (fun01qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@132@01  $FVF<f>)))) xs@11@01 i2@13@01)
  (fun01qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@139@01  $FVF<f>)))) xs@11@01 i2@13@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,01s
; (get-info :all-statistics)
(pop) ; 2
(pop) ; 1
; ---------- test03 ----------
(declare-const xs@140@01 Seq<$Ref>)
(declare-const i1@141@01 Int)
(declare-const i2@142@01 Int)
(declare-const x@143@01 $Ref)
(declare-const xs@144@01 Seq<$Ref>)
(declare-const i1@145@01 Int)
(declare-const i2@146@01 Int)
(declare-const x@147@01 $Ref)
(push) ; 1
(declare-const $t@148@01 $Snap)
(assert (= $t@148@01 ($Snap.combine ($Snap.first $t@148@01) ($Snap.second $t@148@01))))
(assert (= ($Snap.first $t@148@01) $Snap.unit))
; [eval] 0 <= i1
(assert (<= 0 i1@145@01))
(assert (=
  ($Snap.second $t@148@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@148@01))
    ($Snap.second ($Snap.second $t@148@01)))))
(assert (= ($Snap.first ($Snap.second $t@148@01)) $Snap.unit))
; [eval] i1 < |xs|
; [eval] |xs|
(assert (< i1@145@01 (Seq_length xs@144@01)))
(assert (=
  ($Snap.second ($Snap.second $t@148@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@148@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@148@01))) $Snap.unit))
; [eval] 0 <= i2
(assert (<= 0 i2@146@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@148@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
  $Snap.unit))
; [eval] i2 < |xs|
; [eval] |xs|
(assert (< i2@146@01 (Seq_length xs@144@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))
  $Snap.unit))
; [eval] i1 != i2
(assert (not (= i1@145@01 i2@146@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))
  $Snap.unit))
; [eval] (forall j1: Int, j2: Int :: { (j1 in [0..|xs|)), (j2 in [0..|xs|)) } { (j1 in [0..|xs|)), xs[j2] } { (j2 in [0..|xs|)), xs[j1] } { xs[j1], xs[j2] } (j1 in [0..|xs|)) && ((j2 in [0..|xs|)) && j1 != j2) ==> xs[j1] != xs[j2])
(declare-const j1@149@01 Int)
(declare-const j2@150@01 Int)
(push) ; 2
; [eval] (j1 in [0..|xs|)) && ((j2 in [0..|xs|)) && j1 != j2) ==> xs[j1] != xs[j2]
; [eval] (j1 in [0..|xs|)) && ((j2 in [0..|xs|)) && j1 != j2)
; [eval] (j1 in [0..|xs|))
; [eval] [0..|xs|)
; [eval] |xs|
(push) ; 3
; [then-branch: 42 | !(j1@149@01 in [0..|xs@144@01|]) | live]
; [else-branch: 42 | j1@149@01 in [0..|xs@144@01|] | live]
(push) ; 4
; [then-branch: 42 | !(j1@149@01 in [0..|xs@144@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 42 | j1@149@01 in [0..|xs@144@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01))
; [eval] (j2 in [0..|xs|))
; [eval] [0..|xs|)
; [eval] |xs|
(push) ; 5
; [then-branch: 43 | !(j2@150@01 in [0..|xs@144@01|]) | live]
; [else-branch: 43 | j2@150@01 in [0..|xs@144@01|] | live]
(push) ; 6
; [then-branch: 43 | !(j2@150@01 in [0..|xs@144@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 43 | j2@150@01 in [0..|xs@144@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01))
; [eval] j1 != j2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
  (not (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01))))))
(assert (or
  (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
  (not (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01))))
(push) ; 3
; [then-branch: 44 | j1@149@01 in [0..|xs@144@01|] && j2@150@01 in [0..|xs@144@01|] && j1@149@01 != j2@150@01 | live]
; [else-branch: 44 | !(j1@149@01 in [0..|xs@144@01|] && j2@150@01 in [0..|xs@144@01|] && j1@149@01 != j2@150@01) | live]
(push) ; 4
; [then-branch: 44 | j1@149@01 in [0..|xs@144@01|] && j2@150@01 in [0..|xs@144@01|] && j1@149@01 != j2@150@01]
(assert (and
  (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
    (not (= j1@149@01 j2@150@01)))))
; [eval] xs[j1] != xs[j2]
; [eval] xs[j1]
(push) ; 5
(assert (not (>= j1@149@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< j1@149@01 (Seq_length xs@144@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] xs[j2]
(push) ; 5
(assert (not (>= j2@150@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< j2@150@01 (Seq_length xs@144@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 44 | !(j1@149@01 in [0..|xs@144@01|] && j2@150@01 in [0..|xs@144@01|] && j1@149@01 != j2@150@01)]
(assert (not
  (and
    (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
    (and
      (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
      (not (= j1@149@01 j2@150@01))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
    (and
      (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
      (not (= j1@149@01 j2@150@01))))
  (and
    (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
    (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
    (not (= j1@149@01 j2@150@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
        (not (= j1@149@01 j2@150@01)))))
  (and
    (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
    (and
      (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
      (not (= j1@149@01 j2@150@01))))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j1@149@01 Int) (j2@150@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
          (not (= j1@149@01 j2@150@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
        (not (= j1@149@01 j2@150@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
            (not (= j1@149@01 j2@150@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
          (not (= j1@149@01 j2@150@01))))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01) (Seq_contains
    (Seq_range 0 (Seq_length xs@144@01))
    j2@150@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@144@01)) j1@149@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length xs@144@01))
    j2@150@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@75@12@75@106-aux|)))
(assert (forall ((j1@149@01 Int) (j2@150@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
          (not (= j1@149@01 j2@150@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
        (not (= j1@149@01 j2@150@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
            (not (= j1@149@01 j2@150@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
          (not (= j1@149@01 j2@150@01))))))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@144@01)) j1@149@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length xs@144@01))
    j2@150@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@75@12@75@106-aux|)))
(assert (forall ((j1@149@01 Int) (j2@150@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
          (not (= j1@149@01 j2@150@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
        (not (= j1@149@01 j2@150@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
            (not (= j1@149@01 j2@150@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
          (not (= j1@149@01 j2@150@01))))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01) (Seq_index
    xs@144@01
    j2@150@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@144@01)) j1@149@01) (Seq_index
    xs@144@01
    j2@150@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@75@12@75@106-aux|)))
(assert (forall ((j1@149@01 Int) (j2@150@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
          (not (= j1@149@01 j2@150@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
        (not (= j1@149@01 j2@150@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
            (not (= j1@149@01 j2@150@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
          (not (= j1@149@01 j2@150@01))))))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@144@01)) j1@149@01) (Seq_index
    xs@144@01
    j2@150@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@75@12@75@106-aux|)))
(assert (forall ((j1@149@01 Int) (j2@150@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
          (not (= j1@149@01 j2@150@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
        (not (= j1@149@01 j2@150@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
            (not (= j1@149@01 j2@150@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
          (not (= j1@149@01 j2@150@01))))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01) (Seq_index
    xs@144@01
    j1@149@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@144@01)) j2@150@01) (Seq_index
    xs@144@01
    j1@149@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@75@12@75@106-aux|)))
(assert (forall ((j1@149@01 Int) (j2@150@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
          (not (= j1@149@01 j2@150@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
        (not (= j1@149@01 j2@150@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
            (not (= j1@149@01 j2@150@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
          (not (= j1@149@01 j2@150@01))))))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@144@01)) j2@150@01) (Seq_index
    xs@144@01
    j1@149@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@75@12@75@106-aux|)))
(assert (forall ((j1@149@01 Int) (j2@150@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
          (not (= j1@149@01 j2@150@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
        (not (= j1@149@01 j2@150@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
            (not (= j1@149@01 j2@150@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
          (not (= j1@149@01 j2@150@01))))))
  :pattern ((Seq_index xs@144@01 j1@149@01) (Seq_index xs@144@01 j2@150@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@75@12@75@106-aux|)))
(assert (forall ((j1@149@01 Int) (j2@150@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01)
        (not (= j1@149@01 j2@150@01))))
    (not (= (Seq_index xs@144@01 j1@149@01) (Seq_index xs@144@01 j2@150@01))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01) (Seq_contains
    (Seq_range 0 (Seq_length xs@144@01))
    j2@150@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@144@01)) j1@149@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length xs@144@01))
    j2@150@01))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j1@149@01) (Seq_index
    xs@144@01
    j2@150@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@144@01)) j1@149@01) (Seq_index
    xs@144@01
    j2@150@01))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length xs@144@01)) j2@150@01) (Seq_index
    xs@144@01
    j1@149@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@144@01)) j2@150@01) (Seq_index
    xs@144@01
    j1@149@01))
  :pattern ((Seq_index xs@144@01 j1@149@01) (Seq_index xs@144@01 j2@150@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@75@12@75@106|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))))))
(declare-const j@151@01 Int)
(push) ; 2
; [eval] 0 <= j && j < |xs|
; [eval] 0 <= j
(push) ; 3
; [then-branch: 45 | !(0 <= j@151@01) | live]
; [else-branch: 45 | 0 <= j@151@01 | live]
(push) ; 4
; [then-branch: 45 | !(0 <= j@151@01)]
(assert (not (<= 0 j@151@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 45 | 0 <= j@151@01]
(assert (<= 0 j@151@01))
; [eval] j < |xs|
; [eval] |xs|
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@151@01) (not (<= 0 j@151@01))))
(assert (and (<= 0 j@151@01) (< j@151@01 (Seq_length xs@144@01))))
; [eval] xs[j]
(push) ; 3
(assert (not (>= j@151@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(pop) ; 2
(declare-fun inv@152@01 ($Ref) Int)
(declare-fun img@153@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@151@01 Int)) (!
  (=>
    (and (<= 0 j@151@01) (< j@151@01 (Seq_length xs@144@01)))
    (or (<= 0 j@151@01) (not (<= 0 j@151@01))))
  :pattern ((Seq_index xs@144@01 j@151@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((j1@151@01 Int) (j2@151@01 Int)) (!
  (=>
    (and
      (and (<= 0 j1@151@01) (< j1@151@01 (Seq_length xs@144@01)))
      (and (<= 0 j2@151@01) (< j2@151@01 (Seq_length xs@144@01)))
      (= (Seq_index xs@144@01 j1@151@01) (Seq_index xs@144@01 j2@151@01)))
    (= j1@151@01 j2@151@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@151@01 Int)) (!
  (=>
    (and (<= 0 j@151@01) (< j@151@01 (Seq_length xs@144@01)))
    (and
      (= (inv@152@01 (Seq_index xs@144@01 j@151@01)) j@151@01)
      (img@153@01 (Seq_index xs@144@01 j@151@01))))
  :pattern ((Seq_index xs@144@01 j@151@01))
  :qid |quant-u-129|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@153@01 r)
      (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
    (= (Seq_index xs@144@01 (inv@152@01 r)) r))
  :pattern ((inv@152@01 r))
  :qid |f-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((j@151@01 Int)) (!
  (=>
    (and (<= 0 j@151@01) (< j@151@01 (Seq_length xs@144@01)))
    (not (= (Seq_index xs@144@01 j@151@01) $Ref.null)))
  :pattern ((Seq_index xs@144@01 j@151@01))
  :qid |f-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))))))
(assert (not (= x@147@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01))))))))
  $Snap.unit))
; [eval] x.elems == xs
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))))
  xs@144@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; xs[i1].f := 0
; [eval] xs[i1]
(push) ; 3
(assert (not (>= i1@145@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@154@01 ((r $Ref)) $Perm
  (ite
    (= r (Seq_index xs@144@01 i1@145@01))
    ($Perm.min
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@154@01 r))
    $Perm.No)
  
  :qid |quant-u-131|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@154@01 r) $Perm.No)
  
  :qid |quant-u-132|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i1@145@01))
    (= (- $Perm.Write (pTaken@154@01 r)) $Perm.No))
  
  :qid |quant-u-133|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@155@01 $FVF<f>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01)) 0))
; [exec]
; assert fun02qp(xs, i2) == old(fun02qp(xs, i2))
; [eval] fun02qp(xs, i2) == old(fun02qp(xs, i2))
; [eval] fun02qp(xs, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |xs|
; [eval] |xs|
(declare-const j@156@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |xs|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 46 | !(0 <= j@156@01) | live]
; [else-branch: 46 | 0 <= j@156@01 | live]
(push) ; 6
; [then-branch: 46 | !(0 <= j@156@01)]
(assert (not (<= 0 j@156@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 46 | 0 <= j@156@01]
(assert (<= 0 j@156@01))
; [eval] j < |xs|
; [eval] |xs|
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@156@01) (not (<= 0 j@156@01))))
(assert (and (<= 0 j@156@01) (< j@156@01 (Seq_length xs@144@01))))
; [eval] (j == i ? write : none)
; [eval] j == i
(push) ; 5
; [then-branch: 47 | j@156@01 == i2@146@01 | live]
; [else-branch: 47 | j@156@01 != i2@146@01 | live]
(push) ; 6
; [then-branch: 47 | j@156@01 == i2@146@01]
(assert (= j@156@01 i2@146@01))
(pop) ; 6
(push) ; 6
; [else-branch: 47 | j@156@01 != i2@146@01]
(assert (not (= j@156@01 i2@146@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (= j@156@01 i2@146@01)) (= j@156@01 i2@146@01)))
; [eval] xs[j]
(push) ; 5
(assert (not (>= j@156@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@157@01 ($Ref) Int)
(declare-fun img@158@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@156@01 Int)) (!
  (=>
    (and (<= 0 j@156@01) (< j@156@01 (Seq_length xs@144@01)))
    (and
      (or (<= 0 j@156@01) (not (<= 0 j@156@01)))
      (or (not (= j@156@01 i2@146@01)) (= j@156@01 i2@146@01))))
  :pattern ((Seq_index xs@144@01 j@156@01))
  :qid |f-aux|)))
(push) ; 4
(assert (not (forall ((j@156@01 Int)) (!
  (=>
    (and (<= 0 j@156@01) (< j@156@01 (Seq_length xs@144@01)))
    (or
      (= (ite (= j@156@01 i2@146@01) $Perm.Write $Perm.No) $Perm.No)
      (= j@156@01 i2@146@01)))
  
  :qid |quant-u-134|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@156@01 Int) (j2@156@01 Int)) (!
  (=>
    (and
      (and
        (and (<= 0 j1@156@01) (< j1@156@01 (Seq_length xs@144@01)))
        (= j1@156@01 i2@146@01))
      (and
        (and (<= 0 j2@156@01) (< j2@156@01 (Seq_length xs@144@01)))
        (= j2@156@01 i2@146@01))
      (= (Seq_index xs@144@01 j1@156@01) (Seq_index xs@144@01 j2@156@01)))
    (= j1@156@01 j2@156@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@156@01 Int)) (!
  (=>
    (and
      (and (<= 0 j@156@01) (< j@156@01 (Seq_length xs@144@01)))
      (= j@156@01 i2@146@01))
    (and
      (= (inv@157@01 (Seq_index xs@144@01 j@156@01)) j@156@01)
      (img@158@01 (Seq_index xs@144@01 j@156@01))))
  :pattern ((Seq_index xs@144@01 j@156@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@158@01 r)
      (and
        (and (<= 0 (inv@157@01 r)) (< (inv@157@01 r) (Seq_length xs@144@01)))
        (= (inv@157@01 r) i2@146@01)))
    (= (Seq_index xs@144@01 (inv@157@01 r)) r))
  :pattern ((inv@157@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@159@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@157@01 r)) (< (inv@157@01 r) (Seq_length xs@144@01)))
      (img@158@01 r)
      (= r (Seq_index xs@144@01 (inv@157@01 r))))
    ($Perm.min
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        (- $Perm.Write (pTaken@154@01 r))
        $Perm.No)
      (ite (= (inv@157@01 r) i2@146@01) $Perm.Write $Perm.No))
    $Perm.No))
(define-fun pTaken@160@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@157@01 r)) (< (inv@157@01 r) (Seq_length xs@144@01)))
      (img@158@01 r)
      (= r (Seq_index xs@144@01 (inv@157@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@144@01 i1@145@01)) $Perm.Write $Perm.No)
      (-
        (ite (= (inv@157@01 r) i2@146@01) $Perm.Write $Perm.No)
        (pTaken@159@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        (- $Perm.Write (pTaken@154@01 r))
        $Perm.No)
      (pTaken@159@01 r))
    $Perm.No)
  
  :qid |quant-u-136|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@159@01 r) $Perm.No)
  
  :qid |quant-u-137|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@157@01 r)) (< (inv@157@01 r) (Seq_length xs@144@01)))
      (img@158@01 r)
      (= r (Seq_index xs@144@01 (inv@157@01 r))))
    (=
      (-
        (ite (= (inv@157@01 r) i2@146@01) $Perm.Write $Perm.No)
        (pTaken@159@01 r))
      $Perm.No))
  
  :qid |quant-u-138|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@161@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@161@01  $FVF<f>)))
      (and
        (and (<= 0 (inv@157@01 r)) (< (inv@157@01 r) (Seq_length xs@144@01)))
        (= (inv@157@01 r) i2@146@01)
        (img@158@01 r)))
    (=>
      (and
        (and (<= 0 (inv@157@01 r)) (< (inv@157@01 r) (Seq_length xs@144@01)))
        (= (inv@157@01 r) i2@146@01)
        (img@158@01 r))
      (Set_in r ($FVF.domain_f (as sm@161@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@161@01  $FVF<f>))))
  :qid |qp.fvfDomDef84|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@157@01 r)) (< (inv@157@01 r) (Seq_length xs@144@01)))
        (= (inv@157@01 r) i2@146@01)
        (img@158@01 r))
      (= r (Seq_index xs@144@01 i1@145@01)))
    (=
      ($FVF.lookup_f (as sm@161@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@161@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef82|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@157@01 r)) (< (inv@157@01 r) (Seq_length xs@144@01)))
        (= (inv@157@01 r) i2@146@01)
        (img@158@01 r))
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        (< $Perm.No (- $Perm.Write (pTaken@154@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@161@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@161@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef83|)))
(assert (fun02qp%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($SortWrappers.$FVF<f>To$Snap (as sm@161@01  $FVF<f>)))) xs@144@01 i2@146@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@156@01 Int)) (!
  (=>
    (and
      (and (<= 0 j@156@01) (< j@156@01 (Seq_length xs@144@01)))
      (= j@156@01 i2@146@01))
    (and
      (= (inv@157@01 (Seq_index xs@144@01 j@156@01)) j@156@01)
      (img@158@01 (Seq_index xs@144@01 j@156@01))))
  :pattern ((Seq_index xs@144@01 j@156@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@158@01 r)
      (and
        (and (<= 0 (inv@157@01 r)) (< (inv@157@01 r) (Seq_length xs@144@01)))
        (= (inv@157@01 r) i2@146@01)))
    (= (Seq_index xs@144@01 (inv@157@01 r)) r))
  :pattern ((inv@157@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@161@01  $FVF<f>)))
      (and
        (and (<= 0 (inv@157@01 r)) (< (inv@157@01 r) (Seq_length xs@144@01)))
        (= (inv@157@01 r) i2@146@01)
        (img@158@01 r)))
    (=>
      (and
        (and (<= 0 (inv@157@01 r)) (< (inv@157@01 r) (Seq_length xs@144@01)))
        (= (inv@157@01 r) i2@146@01)
        (img@158@01 r))
      (Set_in r ($FVF.domain_f (as sm@161@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@161@01  $FVF<f>))))
  :qid |qp.fvfDomDef84|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@157@01 r)) (< (inv@157@01 r) (Seq_length xs@144@01)))
        (= (inv@157@01 r) i2@146@01)
        (img@158@01 r))
      (= r (Seq_index xs@144@01 i1@145@01)))
    (=
      ($FVF.lookup_f (as sm@161@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@161@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef82|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@157@01 r)) (< (inv@157@01 r) (Seq_length xs@144@01)))
        (= (inv@157@01 r) i2@146@01)
        (img@158@01 r))
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        (< $Perm.No (- $Perm.Write (pTaken@154@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@161@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@161@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef83|)))
(assert (and
  (forall ((j@156@01 Int)) (!
    (=>
      (and (<= 0 j@156@01) (< j@156@01 (Seq_length xs@144@01)))
      (and
        (or (<= 0 j@156@01) (not (<= 0 j@156@01)))
        (or (not (= j@156@01 i2@146@01)) (= j@156@01 i2@146@01))))
    :pattern ((Seq_index xs@144@01 j@156@01))
    :qid |f-aux|))
  (fun02qp%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@161@01  $FVF<f>)))) xs@144@01 i2@146@01)))
; [eval] old(fun02qp(xs, i2))
; [eval] fun02qp(xs, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |xs|
; [eval] |xs|
(declare-const j@162@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |xs|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 48 | !(0 <= j@162@01) | live]
; [else-branch: 48 | 0 <= j@162@01 | live]
(push) ; 6
; [then-branch: 48 | !(0 <= j@162@01)]
(assert (not (<= 0 j@162@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 48 | 0 <= j@162@01]
(assert (<= 0 j@162@01))
; [eval] j < |xs|
; [eval] |xs|
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@162@01) (not (<= 0 j@162@01))))
(assert (and (<= 0 j@162@01) (< j@162@01 (Seq_length xs@144@01))))
; [eval] (j == i ? write : none)
; [eval] j == i
(push) ; 5
; [then-branch: 49 | j@162@01 == i2@146@01 | live]
; [else-branch: 49 | j@162@01 != i2@146@01 | live]
(push) ; 6
; [then-branch: 49 | j@162@01 == i2@146@01]
(assert (= j@162@01 i2@146@01))
(pop) ; 6
(push) ; 6
; [else-branch: 49 | j@162@01 != i2@146@01]
(assert (not (= j@162@01 i2@146@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (= j@162@01 i2@146@01)) (= j@162@01 i2@146@01)))
; [eval] xs[j]
(push) ; 5
(assert (not (>= j@162@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@163@01 ($Ref) Int)
(declare-fun img@164@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@162@01 Int)) (!
  (=>
    (and (<= 0 j@162@01) (< j@162@01 (Seq_length xs@144@01)))
    (and
      (or (<= 0 j@162@01) (not (<= 0 j@162@01)))
      (or (not (= j@162@01 i2@146@01)) (= j@162@01 i2@146@01))))
  :pattern ((Seq_index xs@144@01 j@162@01))
  :qid |f-aux|)))
(push) ; 4
(assert (not (forall ((j@162@01 Int)) (!
  (=>
    (and (<= 0 j@162@01) (< j@162@01 (Seq_length xs@144@01)))
    (or
      (= (ite (= j@162@01 i2@146@01) $Perm.Write $Perm.No) $Perm.No)
      (= j@162@01 i2@146@01)))
  
  :qid |quant-u-139|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@162@01 Int) (j2@162@01 Int)) (!
  (=>
    (and
      (and
        (and (<= 0 j1@162@01) (< j1@162@01 (Seq_length xs@144@01)))
        (= j1@162@01 i2@146@01))
      (and
        (and (<= 0 j2@162@01) (< j2@162@01 (Seq_length xs@144@01)))
        (= j2@162@01 i2@146@01))
      (= (Seq_index xs@144@01 j1@162@01) (Seq_index xs@144@01 j2@162@01)))
    (= j1@162@01 j2@162@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@162@01 Int)) (!
  (=>
    (and
      (and (<= 0 j@162@01) (< j@162@01 (Seq_length xs@144@01)))
      (= j@162@01 i2@146@01))
    (and
      (= (inv@163@01 (Seq_index xs@144@01 j@162@01)) j@162@01)
      (img@164@01 (Seq_index xs@144@01 j@162@01))))
  :pattern ((Seq_index xs@144@01 j@162@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@164@01 r)
      (and
        (and (<= 0 (inv@163@01 r)) (< (inv@163@01 r) (Seq_length xs@144@01)))
        (= (inv@163@01 r) i2@146@01)))
    (= (Seq_index xs@144@01 (inv@163@01 r)) r))
  :pattern ((inv@163@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@165@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@163@01 r)) (< (inv@163@01 r) (Seq_length xs@144@01)))
      (img@164@01 r)
      (= r (Seq_index xs@144@01 (inv@163@01 r))))
    ($Perm.min
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        $Perm.Write
        $Perm.No)
      (ite (= (inv@163@01 r) i2@146@01) $Perm.Write $Perm.No))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@165@01 r))
    $Perm.No)
  
  :qid |quant-u-141|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@165@01 r) $Perm.No)
  
  :qid |quant-u-142|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@163@01 r)) (< (inv@163@01 r) (Seq_length xs@144@01)))
      (img@164@01 r)
      (= r (Seq_index xs@144@01 (inv@163@01 r))))
    (=
      (-
        (ite (= (inv@163@01 r) i2@146@01) $Perm.Write $Perm.No)
        (pTaken@165@01 r))
      $Perm.No))
  
  :qid |quant-u-143|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@166@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@166@01  $FVF<f>)))
      (and
        (and (<= 0 (inv@163@01 r)) (< (inv@163@01 r) (Seq_length xs@144@01)))
        (= (inv@163@01 r) i2@146@01)
        (img@164@01 r)))
    (=>
      (and
        (and (<= 0 (inv@163@01 r)) (< (inv@163@01 r) (Seq_length xs@144@01)))
        (= (inv@163@01 r) i2@146@01)
        (img@164@01 r))
      (Set_in r ($FVF.domain_f (as sm@166@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@166@01  $FVF<f>))))
  :qid |qp.fvfDomDef86|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@163@01 r)) (< (inv@163@01 r) (Seq_length xs@144@01)))
        (= (inv@163@01 r) i2@146@01)
        (img@164@01 r))
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01)))))
    (=
      ($FVF.lookup_f (as sm@166@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@166@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef85|)))
(assert (fun02qp%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($SortWrappers.$FVF<f>To$Snap (as sm@166@01  $FVF<f>)))) xs@144@01 i2@146@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@162@01 Int)) (!
  (=>
    (and
      (and (<= 0 j@162@01) (< j@162@01 (Seq_length xs@144@01)))
      (= j@162@01 i2@146@01))
    (and
      (= (inv@163@01 (Seq_index xs@144@01 j@162@01)) j@162@01)
      (img@164@01 (Seq_index xs@144@01 j@162@01))))
  :pattern ((Seq_index xs@144@01 j@162@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@164@01 r)
      (and
        (and (<= 0 (inv@163@01 r)) (< (inv@163@01 r) (Seq_length xs@144@01)))
        (= (inv@163@01 r) i2@146@01)))
    (= (Seq_index xs@144@01 (inv@163@01 r)) r))
  :pattern ((inv@163@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@166@01  $FVF<f>)))
      (and
        (and (<= 0 (inv@163@01 r)) (< (inv@163@01 r) (Seq_length xs@144@01)))
        (= (inv@163@01 r) i2@146@01)
        (img@164@01 r)))
    (=>
      (and
        (and (<= 0 (inv@163@01 r)) (< (inv@163@01 r) (Seq_length xs@144@01)))
        (= (inv@163@01 r) i2@146@01)
        (img@164@01 r))
      (Set_in r ($FVF.domain_f (as sm@166@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@166@01  $FVF<f>))))
  :qid |qp.fvfDomDef86|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@163@01 r)) (< (inv@163@01 r) (Seq_length xs@144@01)))
        (= (inv@163@01 r) i2@146@01)
        (img@164@01 r))
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01)))))
    (=
      ($FVF.lookup_f (as sm@166@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@166@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef85|)))
(assert (and
  (forall ((j@162@01 Int)) (!
    (=>
      (and (<= 0 j@162@01) (< j@162@01 (Seq_length xs@144@01)))
      (and
        (or (<= 0 j@162@01) (not (<= 0 j@162@01)))
        (or (not (= j@162@01 i2@146@01)) (= j@162@01 i2@146@01))))
    :pattern ((Seq_index xs@144@01 j@162@01))
    :qid |f-aux|))
  (fun02qp%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@166@01  $FVF<f>)))) xs@144@01 i2@146@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (=
  (fun02qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@161@01  $FVF<f>)))) xs@144@01 i2@146@01)
  (fun02qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@166@01  $FVF<f>)))) xs@144@01 i2@146@01))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (=
  (fun02qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@161@01  $FVF<f>)))) xs@144@01 i2@146@01)
  (fun02qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@166@01  $FVF<f>)))) xs@144@01 i2@146@01)))
; [exec]
; xs[i2].f := 0
; [eval] xs[i2]
(push) ; 3
(assert (not (>= i2@146@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@167@01 ((r $Ref)) $Perm
  (ite
    (= r (Seq_index xs@144@01 i2@146@01))
    ($Perm.min
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        (- $Perm.Write (pTaken@154@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@168@01 ((r $Ref)) $Perm
  (ite
    (= r (Seq_index xs@144@01 i2@146@01))
    ($Perm.min
      (ite (= r (Seq_index xs@144@01 i1@145@01)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@167@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        (- $Perm.Write (pTaken@154@01 r))
        $Perm.No)
      (pTaken@167@01 r))
    $Perm.No)
  
  :qid |quant-u-145|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@167@01 r) $Perm.No)
  
  :qid |quant-u-146|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i2@146@01))
    (= (- $Perm.Write (pTaken@167@01 r)) $Perm.No))
  
  :qid |quant-u-147|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@169@01 $FVF<f>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01)) 0))
; [exec]
; assert fun02qp(xs, i2) == old(fun02qp(xs, i2))
; [eval] fun02qp(xs, i2) == old(fun02qp(xs, i2))
; [eval] fun02qp(xs, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |xs|
; [eval] |xs|
(declare-const j@170@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |xs|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 50 | !(0 <= j@170@01) | live]
; [else-branch: 50 | 0 <= j@170@01 | live]
(push) ; 6
; [then-branch: 50 | !(0 <= j@170@01)]
(assert (not (<= 0 j@170@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 50 | 0 <= j@170@01]
(assert (<= 0 j@170@01))
; [eval] j < |xs|
; [eval] |xs|
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@170@01) (not (<= 0 j@170@01))))
(assert (and (<= 0 j@170@01) (< j@170@01 (Seq_length xs@144@01))))
; [eval] (j == i ? write : none)
; [eval] j == i
(push) ; 5
; [then-branch: 51 | j@170@01 == i2@146@01 | live]
; [else-branch: 51 | j@170@01 != i2@146@01 | live]
(push) ; 6
; [then-branch: 51 | j@170@01 == i2@146@01]
(assert (= j@170@01 i2@146@01))
(pop) ; 6
(push) ; 6
; [else-branch: 51 | j@170@01 != i2@146@01]
(assert (not (= j@170@01 i2@146@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (= j@170@01 i2@146@01)) (= j@170@01 i2@146@01)))
; [eval] xs[j]
(push) ; 5
(assert (not (>= j@170@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@171@01 ($Ref) Int)
(declare-fun img@172@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@170@01 Int)) (!
  (=>
    (and (<= 0 j@170@01) (< j@170@01 (Seq_length xs@144@01)))
    (and
      (or (<= 0 j@170@01) (not (<= 0 j@170@01)))
      (or (not (= j@170@01 i2@146@01)) (= j@170@01 i2@146@01))))
  :pattern ((Seq_index xs@144@01 j@170@01))
  :qid |f-aux|)))
(push) ; 4
(assert (not (forall ((j@170@01 Int)) (!
  (=>
    (and (<= 0 j@170@01) (< j@170@01 (Seq_length xs@144@01)))
    (or
      (= (ite (= j@170@01 i2@146@01) $Perm.Write $Perm.No) $Perm.No)
      (= j@170@01 i2@146@01)))
  
  :qid |quant-u-148|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@170@01 Int) (j2@170@01 Int)) (!
  (=>
    (and
      (and
        (and (<= 0 j1@170@01) (< j1@170@01 (Seq_length xs@144@01)))
        (= j1@170@01 i2@146@01))
      (and
        (and (<= 0 j2@170@01) (< j2@170@01 (Seq_length xs@144@01)))
        (= j2@170@01 i2@146@01))
      (= (Seq_index xs@144@01 j1@170@01) (Seq_index xs@144@01 j2@170@01)))
    (= j1@170@01 j2@170@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@170@01 Int)) (!
  (=>
    (and
      (and (<= 0 j@170@01) (< j@170@01 (Seq_length xs@144@01)))
      (= j@170@01 i2@146@01))
    (and
      (= (inv@171@01 (Seq_index xs@144@01 j@170@01)) j@170@01)
      (img@172@01 (Seq_index xs@144@01 j@170@01))))
  :pattern ((Seq_index xs@144@01 j@170@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@172@01 r)
      (and
        (and (<= 0 (inv@171@01 r)) (< (inv@171@01 r) (Seq_length xs@144@01)))
        (= (inv@171@01 r) i2@146@01)))
    (= (Seq_index xs@144@01 (inv@171@01 r)) r))
  :pattern ((inv@171@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@173@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@171@01 r)) (< (inv@171@01 r) (Seq_length xs@144@01)))
      (img@172@01 r)
      (= r (Seq_index xs@144@01 (inv@171@01 r))))
    ($Perm.min
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
        $Perm.No)
      (ite (= (inv@171@01 r) i2@146@01) $Perm.Write $Perm.No))
    $Perm.No))
(define-fun pTaken@174@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@171@01 r)) (< (inv@171@01 r) (Seq_length xs@144@01)))
      (img@172@01 r)
      (= r (Seq_index xs@144@01 (inv@171@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@144@01 i2@146@01)) $Perm.Write $Perm.No)
      (-
        (ite (= (inv@171@01 r) i2@146@01) $Perm.Write $Perm.No)
        (pTaken@173@01 r)))
    $Perm.No))
(define-fun pTaken@175@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@171@01 r)) (< (inv@171@01 r) (Seq_length xs@144@01)))
      (img@172@01 r)
      (= r (Seq_index xs@144@01 (inv@171@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@144@01 i1@145@01)) $Perm.Write $Perm.No)
      (-
        (-
          (ite (= (inv@171@01 r) i2@146@01) $Perm.Write $Perm.No)
          (pTaken@173@01 r))
        (pTaken@174@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
        $Perm.No)
      (pTaken@173@01 r))
    $Perm.No)
  
  :qid |quant-u-150|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@173@01 r) $Perm.No)
  
  :qid |quant-u-151|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@171@01 r)) (< (inv@171@01 r) (Seq_length xs@144@01)))
      (img@172@01 r)
      (= r (Seq_index xs@144@01 (inv@171@01 r))))
    (=
      (-
        (ite (= (inv@171@01 r) i2@146@01) $Perm.Write $Perm.No)
        (pTaken@173@01 r))
      $Perm.No))
  
  :qid |quant-u-152|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)
    (pTaken@174@01 (Seq_index xs@144@01 i2@146@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@171@01 r)) (< (inv@171@01 r) (Seq_length xs@144@01)))
      (img@172@01 r)
      (= r (Seq_index xs@144@01 (inv@171@01 r))))
    (=
      (-
        (-
          (ite (= (inv@171@01 r) i2@146@01) $Perm.Write $Perm.No)
          (pTaken@173@01 r))
        (pTaken@174@01 r))
      $Perm.No))
  
  :qid |quant-u-154|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@176@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@176@01  $FVF<f>)))
      (and
        (and (<= 0 (inv@171@01 r)) (< (inv@171@01 r) (Seq_length xs@144@01)))
        (= (inv@171@01 r) i2@146@01)
        (img@172@01 r)))
    (=>
      (and
        (and (<= 0 (inv@171@01 r)) (< (inv@171@01 r) (Seq_length xs@144@01)))
        (= (inv@171@01 r) i2@146@01)
        (img@172@01 r))
      (Set_in r ($FVF.domain_f (as sm@176@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@176@01  $FVF<f>))))
  :qid |qp.fvfDomDef90|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@171@01 r)) (< (inv@171@01 r) (Seq_length xs@144@01)))
        (= (inv@171@01 r) i2@146@01)
        (img@172@01 r))
      (= r (Seq_index xs@144@01 i2@146@01)))
    (=
      ($FVF.lookup_f (as sm@176@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@176@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@171@01 r)) (< (inv@171@01 r) (Seq_length xs@144@01)))
        (= (inv@171@01 r) i2@146@01)
        (img@172@01 r))
      (= r (Seq_index xs@144@01 i1@145@01)))
    (=
      ($FVF.lookup_f (as sm@176@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@176@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@171@01 r)) (< (inv@171@01 r) (Seq_length xs@144@01)))
        (= (inv@171@01 r) i2@146@01)
        (img@172@01 r))
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@176@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@176@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef89|)))
(assert (fun02qp%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($SortWrappers.$FVF<f>To$Snap (as sm@176@01  $FVF<f>)))) xs@144@01 i2@146@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@170@01 Int)) (!
  (=>
    (and
      (and (<= 0 j@170@01) (< j@170@01 (Seq_length xs@144@01)))
      (= j@170@01 i2@146@01))
    (and
      (= (inv@171@01 (Seq_index xs@144@01 j@170@01)) j@170@01)
      (img@172@01 (Seq_index xs@144@01 j@170@01))))
  :pattern ((Seq_index xs@144@01 j@170@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@172@01 r)
      (and
        (and (<= 0 (inv@171@01 r)) (< (inv@171@01 r) (Seq_length xs@144@01)))
        (= (inv@171@01 r) i2@146@01)))
    (= (Seq_index xs@144@01 (inv@171@01 r)) r))
  :pattern ((inv@171@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@176@01  $FVF<f>)))
      (and
        (and (<= 0 (inv@171@01 r)) (< (inv@171@01 r) (Seq_length xs@144@01)))
        (= (inv@171@01 r) i2@146@01)
        (img@172@01 r)))
    (=>
      (and
        (and (<= 0 (inv@171@01 r)) (< (inv@171@01 r) (Seq_length xs@144@01)))
        (= (inv@171@01 r) i2@146@01)
        (img@172@01 r))
      (Set_in r ($FVF.domain_f (as sm@176@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@176@01  $FVF<f>))))
  :qid |qp.fvfDomDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@171@01 r)) (< (inv@171@01 r) (Seq_length xs@144@01)))
        (= (inv@171@01 r) i2@146@01)
        (img@172@01 r))
      (= r (Seq_index xs@144@01 i2@146@01)))
    (=
      ($FVF.lookup_f (as sm@176@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@176@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef87|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@171@01 r)) (< (inv@171@01 r) (Seq_length xs@144@01)))
        (= (inv@171@01 r) i2@146@01)
        (img@172@01 r))
      (= r (Seq_index xs@144@01 i1@145@01)))
    (=
      ($FVF.lookup_f (as sm@176@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@176@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@171@01 r)) (< (inv@171@01 r) (Seq_length xs@144@01)))
        (= (inv@171@01 r) i2@146@01)
        (img@172@01 r))
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@176@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@176@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef89|)))
(assert (and
  (forall ((j@170@01 Int)) (!
    (=>
      (and (<= 0 j@170@01) (< j@170@01 (Seq_length xs@144@01)))
      (and
        (or (<= 0 j@170@01) (not (<= 0 j@170@01)))
        (or (not (= j@170@01 i2@146@01)) (= j@170@01 i2@146@01))))
    :pattern ((Seq_index xs@144@01 j@170@01))
    :qid |f-aux|))
  (fun02qp%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@176@01  $FVF<f>)))) xs@144@01 i2@146@01)))
; [eval] old(fun02qp(xs, i2))
; [eval] fun02qp(xs, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |xs|
; [eval] |xs|
(declare-const j@177@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |xs|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 52 | !(0 <= j@177@01) | live]
; [else-branch: 52 | 0 <= j@177@01 | live]
(push) ; 6
; [then-branch: 52 | !(0 <= j@177@01)]
(assert (not (<= 0 j@177@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 52 | 0 <= j@177@01]
(assert (<= 0 j@177@01))
; [eval] j < |xs|
; [eval] |xs|
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@177@01) (not (<= 0 j@177@01))))
(assert (and (<= 0 j@177@01) (< j@177@01 (Seq_length xs@144@01))))
; [eval] (j == i ? write : none)
; [eval] j == i
(push) ; 5
; [then-branch: 53 | j@177@01 == i2@146@01 | live]
; [else-branch: 53 | j@177@01 != i2@146@01 | live]
(push) ; 6
; [then-branch: 53 | j@177@01 == i2@146@01]
(assert (= j@177@01 i2@146@01))
(pop) ; 6
(push) ; 6
; [else-branch: 53 | j@177@01 != i2@146@01]
(assert (not (= j@177@01 i2@146@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (= j@177@01 i2@146@01)) (= j@177@01 i2@146@01)))
; [eval] xs[j]
(push) ; 5
(assert (not (>= j@177@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@178@01 ($Ref) Int)
(declare-fun img@179@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@177@01 Int)) (!
  (=>
    (and (<= 0 j@177@01) (< j@177@01 (Seq_length xs@144@01)))
    (and
      (or (<= 0 j@177@01) (not (<= 0 j@177@01)))
      (or (not (= j@177@01 i2@146@01)) (= j@177@01 i2@146@01))))
  :pattern ((Seq_index xs@144@01 j@177@01))
  :qid |f-aux|)))
(push) ; 4
(assert (not (forall ((j@177@01 Int)) (!
  (=>
    (and (<= 0 j@177@01) (< j@177@01 (Seq_length xs@144@01)))
    (or
      (= (ite (= j@177@01 i2@146@01) $Perm.Write $Perm.No) $Perm.No)
      (= j@177@01 i2@146@01)))
  
  :qid |quant-u-155|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@177@01 Int) (j2@177@01 Int)) (!
  (=>
    (and
      (and
        (and (<= 0 j1@177@01) (< j1@177@01 (Seq_length xs@144@01)))
        (= j1@177@01 i2@146@01))
      (and
        (and (<= 0 j2@177@01) (< j2@177@01 (Seq_length xs@144@01)))
        (= j2@177@01 i2@146@01))
      (= (Seq_index xs@144@01 j1@177@01) (Seq_index xs@144@01 j2@177@01)))
    (= j1@177@01 j2@177@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@177@01 Int)) (!
  (=>
    (and
      (and (<= 0 j@177@01) (< j@177@01 (Seq_length xs@144@01)))
      (= j@177@01 i2@146@01))
    (and
      (= (inv@178@01 (Seq_index xs@144@01 j@177@01)) j@177@01)
      (img@179@01 (Seq_index xs@144@01 j@177@01))))
  :pattern ((Seq_index xs@144@01 j@177@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@179@01 r)
      (and
        (and (<= 0 (inv@178@01 r)) (< (inv@178@01 r) (Seq_length xs@144@01)))
        (= (inv@178@01 r) i2@146@01)))
    (= (Seq_index xs@144@01 (inv@178@01 r)) r))
  :pattern ((inv@178@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@180@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@178@01 r)) (< (inv@178@01 r) (Seq_length xs@144@01)))
      (img@179@01 r)
      (= r (Seq_index xs@144@01 (inv@178@01 r))))
    ($Perm.min
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        $Perm.Write
        $Perm.No)
      (ite (= (inv@178@01 r) i2@146@01) $Perm.Write $Perm.No))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@180@01 r))
    $Perm.No)
  
  :qid |quant-u-157|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@180@01 r) $Perm.No)
  
  :qid |quant-u-158|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@178@01 r)) (< (inv@178@01 r) (Seq_length xs@144@01)))
      (img@179@01 r)
      (= r (Seq_index xs@144@01 (inv@178@01 r))))
    (=
      (-
        (ite (= (inv@178@01 r) i2@146@01) $Perm.Write $Perm.No)
        (pTaken@180@01 r))
      $Perm.No))
  
  :qid |quant-u-159|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@181@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@181@01  $FVF<f>)))
      (and
        (and (<= 0 (inv@178@01 r)) (< (inv@178@01 r) (Seq_length xs@144@01)))
        (= (inv@178@01 r) i2@146@01)
        (img@179@01 r)))
    (=>
      (and
        (and (<= 0 (inv@178@01 r)) (< (inv@178@01 r) (Seq_length xs@144@01)))
        (= (inv@178@01 r) i2@146@01)
        (img@179@01 r))
      (Set_in r ($FVF.domain_f (as sm@181@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@181@01  $FVF<f>))))
  :qid |qp.fvfDomDef92|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@178@01 r)) (< (inv@178@01 r) (Seq_length xs@144@01)))
        (= (inv@178@01 r) i2@146@01)
        (img@179@01 r))
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01)))))
    (=
      ($FVF.lookup_f (as sm@181@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@181@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef91|)))
(assert (fun02qp%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($SortWrappers.$FVF<f>To$Snap (as sm@181@01  $FVF<f>)))) xs@144@01 i2@146@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@177@01 Int)) (!
  (=>
    (and
      (and (<= 0 j@177@01) (< j@177@01 (Seq_length xs@144@01)))
      (= j@177@01 i2@146@01))
    (and
      (= (inv@178@01 (Seq_index xs@144@01 j@177@01)) j@177@01)
      (img@179@01 (Seq_index xs@144@01 j@177@01))))
  :pattern ((Seq_index xs@144@01 j@177@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@179@01 r)
      (and
        (and (<= 0 (inv@178@01 r)) (< (inv@178@01 r) (Seq_length xs@144@01)))
        (= (inv@178@01 r) i2@146@01)))
    (= (Seq_index xs@144@01 (inv@178@01 r)) r))
  :pattern ((inv@178@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@181@01  $FVF<f>)))
      (and
        (and (<= 0 (inv@178@01 r)) (< (inv@178@01 r) (Seq_length xs@144@01)))
        (= (inv@178@01 r) i2@146@01)
        (img@179@01 r)))
    (=>
      (and
        (and (<= 0 (inv@178@01 r)) (< (inv@178@01 r) (Seq_length xs@144@01)))
        (= (inv@178@01 r) i2@146@01)
        (img@179@01 r))
      (Set_in r ($FVF.domain_f (as sm@181@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@181@01  $FVF<f>))))
  :qid |qp.fvfDomDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@178@01 r)) (< (inv@178@01 r) (Seq_length xs@144@01)))
        (= (inv@178@01 r) i2@146@01)
        (img@179@01 r))
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01)))))
    (=
      ($FVF.lookup_f (as sm@181@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@181@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef91|)))
(assert (and
  (forall ((j@177@01 Int)) (!
    (=>
      (and (<= 0 j@177@01) (< j@177@01 (Seq_length xs@144@01)))
      (and
        (or (<= 0 j@177@01) (not (<= 0 j@177@01)))
        (or (not (= j@177@01 i2@146@01)) (= j@177@01 i2@146@01))))
    :pattern ((Seq_index xs@144@01 j@177@01))
    :qid |f-aux|))
  (fun02qp%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@181@01  $FVF<f>)))) xs@144@01 i2@146@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (=
  (fun02qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@176@01  $FVF<f>)))) xs@144@01 i2@146@01)
  (fun02qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@181@01  $FVF<f>)))) xs@144@01 i2@146@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01))
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01))
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
  (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))))
(declare-const sm@182@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i2@146@01))
    (=
      ($FVF.lookup_f (as sm@182@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@182@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i1@145@01))
    (=
      ($FVF.lookup_f (as sm@182@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@182@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@182@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@182@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef95|)))
(declare-const pm@183@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@183@01  $FPM) r)
    (+
      (+
        (ite (= r (Seq_index xs@144@01 i2@146@01)) $Perm.Write $Perm.No)
        (ite (= r (Seq_index xs@144@01 i1@145@01)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@183@01  $FPM) r))
  :qid |qp.resPrmSumDef96|)))
(assert (<=
  ($FVF.perm_f (as pm@183@01  $FPM) (Seq_index xs@144@01 i2@146@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@183@01  $FPM) (Seq_index xs@144@01 i1@145@01))
  $Perm.Write))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@183@01  $FPM) r) $Perm.Write)
  :pattern ((inv@152@01 r))
  :qid |qp-fld-prm-bnd|)))
; [eval] fun02qp(xs, i2) == old(fun02qp(xs, i2))
; [eval] fun02qp(xs, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |xs|
; [eval] |xs|
(declare-const j@184@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |xs|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 54 | !(0 <= j@184@01) | live]
; [else-branch: 54 | 0 <= j@184@01 | live]
(push) ; 6
; [then-branch: 54 | !(0 <= j@184@01)]
(assert (not (<= 0 j@184@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01))
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01))
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
  (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))))
(declare-const sm@185@01 $FVF<f>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@185@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@185@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i1@145@01))
    (=
      ($FVF.lookup_f (as sm@185@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@185@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i2@146@01))
    (=
      ($FVF.lookup_f (as sm@185@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@185@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef99|)))
(declare-const pm@186@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@186@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@153@01 r)
            (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
          (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@144@01 i1@145@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@144@01 i2@146@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@186@01  $FPM) r))
  :qid |qp.resPrmSumDef100|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@186@01  $FPM) r) $Perm.Write)
  :pattern ((inv@152@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<=
  ($FVF.perm_f (as pm@186@01  $FPM) (Seq_index xs@144@01 i1@145@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@186@01  $FPM) (Seq_index xs@144@01 i2@146@01))
  $Perm.Write))
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 54 | 0 <= j@184@01]
(assert (<= 0 j@184@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01))
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01))
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
  (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))))
(declare-const sm@187@01 $FVF<f>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@187@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@187@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i1@145@01))
    (=
      ($FVF.lookup_f (as sm@187@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@187@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i2@146@01))
    (=
      ($FVF.lookup_f (as sm@187@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@187@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef103|)))
(declare-const pm@188@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@188@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@153@01 r)
            (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
          (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@144@01 i1@145@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@144@01 i2@146@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@188@01  $FPM) r))
  :qid |qp.resPrmSumDef104|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@188@01  $FPM) r) $Perm.Write)
  :pattern ((inv@152@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<=
  ($FVF.perm_f (as pm@188@01  $FPM) (Seq_index xs@144@01 i1@145@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@188@01  $FPM) (Seq_index xs@144@01 i2@146@01))
  $Perm.Write))
; [eval] j < |xs|
; [eval] |xs|
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@185@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@185@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i1@145@01))
    (=
      ($FVF.lookup_f (as sm@185@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@185@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i2@146@01))
    (=
      ($FVF.lookup_f (as sm@185@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@185@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef99|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@186@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@153@01 r)
            (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
          (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@144@01 i1@145@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@144@01 i2@146@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@186@01  $FPM) r))
  :qid |qp.resPrmSumDef100|)))
(assert (=>
  (not (<= 0 j@184@01))
  (and
    (not (<= 0 j@184@01))
    (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
    (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@186@01  $FPM) r) $Perm.Write)
      :pattern ((inv@152@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@186@01  $FPM) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@186@01  $FPM) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write))))
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@187@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@187@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i1@145@01))
    (=
      ($FVF.lookup_f (as sm@187@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@187@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i2@146@01))
    (=
      ($FVF.lookup_f (as sm@187@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@187@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@188@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@153@01 r)
            (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
          (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@144@01 i1@145@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@144@01 i2@146@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@188@01  $FPM) r))
  :qid |qp.resPrmSumDef104|)))
(assert (=>
  (<= 0 j@184@01)
  (and
    (<= 0 j@184@01)
    (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
    (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@188@01  $FPM) r) $Perm.Write)
      :pattern ((inv@152@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@188@01  $FPM) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@188@01  $FPM) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write))))
(assert (or (<= 0 j@184@01) (not (<= 0 j@184@01))))
(assert (and (<= 0 j@184@01) (< j@184@01 (Seq_length xs@144@01))))
; [eval] (j == i ? write : none)
; [eval] j == i
(set-option :timeout 0)
(push) ; 5
; [then-branch: 55 | j@184@01 == i2@146@01 | live]
; [else-branch: 55 | j@184@01 != i2@146@01 | live]
(push) ; 6
; [then-branch: 55 | j@184@01 == i2@146@01]
(assert (= j@184@01 i2@146@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01))
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01))
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
  (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@188@01  $FPM) r) $Perm.Write)
  :pattern ((inv@152@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<=
  ($FVF.perm_f (as pm@188@01  $FPM) (Seq_index xs@144@01 i1@145@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@188@01  $FPM) (Seq_index xs@144@01 i2@146@01))
  $Perm.Write))
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 55 | j@184@01 != i2@146@01]
(assert (not (= j@184@01 i2@146@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01))
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01))
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
  (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@188@01  $FPM) r) $Perm.Write)
  :pattern ((inv@152@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<=
  ($FVF.perm_f (as pm@188@01  $FPM) (Seq_index xs@144@01 i1@145@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@188@01  $FPM) (Seq_index xs@144@01 i2@146@01))
  $Perm.Write))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (= j@184@01 i2@146@01)
  (and
    (= j@184@01 i2@146@01)
    (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
    (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@188@01  $FPM) r) $Perm.Write)
      :pattern ((inv@152@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@188@01  $FPM) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@188@01  $FPM) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write))))
; Joined path conditions
(assert (=>
  (not (= j@184@01 i2@146@01))
  (and
    (not (= j@184@01 i2@146@01))
    (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
    (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@188@01  $FPM) r) $Perm.Write)
      :pattern ((inv@152@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@188@01  $FPM) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@188@01  $FPM) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write))))
(assert (or (not (= j@184@01 i2@146@01)) (= j@184@01 i2@146@01)))
; [eval] xs[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@184@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@189@01 ($Ref) Int)
(declare-fun img@190@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@185@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@185@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i1@145@01))
    (=
      ($FVF.lookup_f (as sm@185@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@185@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i2@146@01))
    (=
      ($FVF.lookup_f (as sm@185@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@185@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef99|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@186@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@153@01 r)
            (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
          (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@144@01 i1@145@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@144@01 i2@146@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@186@01  $FPM) r))
  :qid |qp.resPrmSumDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@187@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@187@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i1@145@01))
    (=
      ($FVF.lookup_f (as sm@187@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@187@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i2@146@01))
    (=
      ($FVF.lookup_f (as sm@187@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@187@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@188@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@153@01 r)
            (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
          (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@144@01 i1@145@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@144@01 i2@146@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@188@01  $FPM) r))
  :qid |qp.resPrmSumDef104|)))
; Nested auxiliary terms: non-globals
(assert (forall ((j@184@01 Int)) (!
  (=>
    (and (<= 0 j@184@01) (< j@184@01 (Seq_length xs@144@01)))
    (and
      (=>
        (not (<= 0 j@184@01))
        (and
          (not (<= 0 j@184@01))
          (not
            (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
          (not
            (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
          (forall ((r $Ref)) (!
            (<= ($FVF.perm_f (as pm@186@01  $FPM) r) $Perm.Write)
            :pattern ((inv@152@01 r))
            :qid |qp-fld-prm-bnd|))
          (<=
            ($FVF.perm_f (as pm@186@01  $FPM) (Seq_index xs@144@01 i1@145@01))
            $Perm.Write)
          (<=
            ($FVF.perm_f (as pm@186@01  $FPM) (Seq_index xs@144@01 i2@146@01))
            $Perm.Write)))
      (=>
        (<= 0 j@184@01)
        (and
          (<= 0 j@184@01)
          (not
            (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
          (not
            (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
          (forall ((r $Ref)) (!
            (<= ($FVF.perm_f (as pm@188@01  $FPM) r) $Perm.Write)
            :pattern ((inv@152@01 r))
            :qid |qp-fld-prm-bnd|))
          (<=
            ($FVF.perm_f (as pm@188@01  $FPM) (Seq_index xs@144@01 i1@145@01))
            $Perm.Write)
          (<=
            ($FVF.perm_f (as pm@188@01  $FPM) (Seq_index xs@144@01 i2@146@01))
            $Perm.Write)))
      (or (<= 0 j@184@01) (not (<= 0 j@184@01)))
      (=>
        (= j@184@01 i2@146@01)
        (and
          (= j@184@01 i2@146@01)
          (not
            (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
          (not
            (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
          (forall ((r $Ref)) (!
            (<= ($FVF.perm_f (as pm@188@01  $FPM) r) $Perm.Write)
            :pattern ((inv@152@01 r))
            :qid |qp-fld-prm-bnd|))
          (<=
            ($FVF.perm_f (as pm@188@01  $FPM) (Seq_index xs@144@01 i1@145@01))
            $Perm.Write)
          (<=
            ($FVF.perm_f (as pm@188@01  $FPM) (Seq_index xs@144@01 i2@146@01))
            $Perm.Write)))
      (=>
        (not (= j@184@01 i2@146@01))
        (and
          (not (= j@184@01 i2@146@01))
          (not
            (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
          (not
            (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
          (forall ((r $Ref)) (!
            (<= ($FVF.perm_f (as pm@188@01  $FPM) r) $Perm.Write)
            :pattern ((inv@152@01 r))
            :qid |qp-fld-prm-bnd|))
          (<=
            ($FVF.perm_f (as pm@188@01  $FPM) (Seq_index xs@144@01 i1@145@01))
            $Perm.Write)
          (<=
            ($FVF.perm_f (as pm@188@01  $FPM) (Seq_index xs@144@01 i2@146@01))
            $Perm.Write)))
      (or (not (= j@184@01 i2@146@01)) (= j@184@01 i2@146@01))))
  :pattern ((Seq_index xs@144@01 j@184@01))
  :qid |f-aux|)))
(push) ; 4
(assert (not (forall ((j@184@01 Int)) (!
  (=>
    (and (<= 0 j@184@01) (< j@184@01 (Seq_length xs@144@01)))
    (or
      (= (ite (= j@184@01 i2@146@01) $Perm.Write $Perm.No) $Perm.No)
      (= j@184@01 i2@146@01)))
  
  :qid |quant-u-160|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@184@01 Int) (j2@184@01 Int)) (!
  (=>
    (and
      (and
        (and (<= 0 j1@184@01) (< j1@184@01 (Seq_length xs@144@01)))
        (= j1@184@01 i2@146@01))
      (and
        (and (<= 0 j2@184@01) (< j2@184@01 (Seq_length xs@144@01)))
        (= j2@184@01 i2@146@01))
      (= (Seq_index xs@144@01 j1@184@01) (Seq_index xs@144@01 j2@184@01)))
    (= j1@184@01 j2@184@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@184@01 Int)) (!
  (=>
    (and
      (and (<= 0 j@184@01) (< j@184@01 (Seq_length xs@144@01)))
      (= j@184@01 i2@146@01))
    (and
      (= (inv@189@01 (Seq_index xs@144@01 j@184@01)) j@184@01)
      (img@190@01 (Seq_index xs@144@01 j@184@01))))
  :pattern ((Seq_index xs@144@01 j@184@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@190@01 r)
      (and
        (and (<= 0 (inv@189@01 r)) (< (inv@189@01 r) (Seq_length xs@144@01)))
        (= (inv@189@01 r) i2@146@01)))
    (= (Seq_index xs@144@01 (inv@189@01 r)) r))
  :pattern ((inv@189@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@191@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@189@01 r)) (< (inv@189@01 r) (Seq_length xs@144@01)))
      (img@190@01 r)
      (= r (Seq_index xs@144@01 (inv@189@01 r))))
    ($Perm.min
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
        $Perm.No)
      (ite (= (inv@189@01 r) i2@146@01) $Perm.Write $Perm.No))
    $Perm.No))
(define-fun pTaken@192@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@189@01 r)) (< (inv@189@01 r) (Seq_length xs@144@01)))
      (img@190@01 r)
      (= r (Seq_index xs@144@01 (inv@189@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@144@01 i1@145@01)) $Perm.Write $Perm.No)
      (-
        (ite (= (inv@189@01 r) i2@146@01) $Perm.Write $Perm.No)
        (pTaken@191@01 r)))
    $Perm.No))
(define-fun pTaken@193@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@189@01 r)) (< (inv@189@01 r) (Seq_length xs@144@01)))
      (img@190@01 r)
      (= r (Seq_index xs@144@01 (inv@189@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@144@01 i2@146@01)) $Perm.Write $Perm.No)
      (-
        (-
          (ite (= (inv@189@01 r) i2@146@01) $Perm.Write $Perm.No)
          (pTaken@191@01 r))
        (pTaken@192@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
        $Perm.No)
      (pTaken@191@01 r))
    $Perm.No)
  
  :qid |quant-u-162|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@191@01 r) $Perm.No)
  
  :qid |quant-u-163|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@189@01 r)) (< (inv@189@01 r) (Seq_length xs@144@01)))
      (img@190@01 r)
      (= r (Seq_index xs@144@01 (inv@189@01 r))))
    (=
      (-
        (ite (= (inv@189@01 r) i2@146@01) $Perm.Write $Perm.No)
        (pTaken@191@01 r))
      $Perm.No))
  
  :qid |quant-u-164|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)
    (pTaken@192@01 (Seq_index xs@144@01 i1@145@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@192@01 r) $Perm.No)
  
  :qid |quant-u-166|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@189@01 r)) (< (inv@189@01 r) (Seq_length xs@144@01)))
      (img@190@01 r)
      (= r (Seq_index xs@144@01 (inv@189@01 r))))
    (=
      (-
        (-
          (ite (= (inv@189@01 r) i2@146@01) $Perm.Write $Perm.No)
          (pTaken@191@01 r))
        (pTaken@192@01 r))
      $Perm.No))
  
  :qid |quant-u-167|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)
    (pTaken@193@01 (Seq_index xs@144@01 i2@146@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@189@01 r)) (< (inv@189@01 r) (Seq_length xs@144@01)))
      (img@190@01 r)
      (= r (Seq_index xs@144@01 (inv@189@01 r))))
    (=
      (-
        (-
          (-
            (ite (= (inv@189@01 r) i2@146@01) $Perm.Write $Perm.No)
            (pTaken@191@01 r))
          (pTaken@192@01 r))
        (pTaken@193@01 r))
      $Perm.No))
  
  :qid |quant-u-169|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@194@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@194@01  $FVF<f>)))
      (and
        (and (<= 0 (inv@189@01 r)) (< (inv@189@01 r) (Seq_length xs@144@01)))
        (= (inv@189@01 r) i2@146@01)
        (img@190@01 r)))
    (=>
      (and
        (and (<= 0 (inv@189@01 r)) (< (inv@189@01 r) (Seq_length xs@144@01)))
        (= (inv@189@01 r) i2@146@01)
        (img@190@01 r))
      (Set_in r ($FVF.domain_f (as sm@194@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@194@01  $FVF<f>))))
  :qid |qp.fvfDomDef108|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@189@01 r)) (< (inv@189@01 r) (Seq_length xs@144@01)))
        (= (inv@189@01 r) i2@146@01)
        (img@190@01 r))
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@194@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@194@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@189@01 r)) (< (inv@189@01 r) (Seq_length xs@144@01)))
        (= (inv@189@01 r) i2@146@01)
        (img@190@01 r))
      (= r (Seq_index xs@144@01 i1@145@01)))
    (=
      ($FVF.lookup_f (as sm@194@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@194@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef106|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@189@01 r)) (< (inv@189@01 r) (Seq_length xs@144@01)))
        (= (inv@189@01 r) i2@146@01)
        (img@190@01 r))
      (= r (Seq_index xs@144@01 i2@146@01)))
    (=
      ($FVF.lookup_f (as sm@194@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@194@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef107|)))
(assert (fun02qp%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($SortWrappers.$FVF<f>To$Snap (as sm@194@01  $FVF<f>)))) xs@144@01 i2@146@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@185@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@185@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i1@145@01))
    (=
      ($FVF.lookup_f (as sm@185@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@185@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i2@146@01))
    (=
      ($FVF.lookup_f (as sm@185@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@185@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef99|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@186@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@153@01 r)
            (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
          (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@144@01 i1@145@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@144@01 i2@146@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@186@01  $FPM) r))
  :qid |qp.resPrmSumDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@187@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@187@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i1@145@01))
    (=
      ($FVF.lookup_f (as sm@187@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@187@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i2@146@01))
    (=
      ($FVF.lookup_f (as sm@187@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@187@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef103|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@188@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@153@01 r)
            (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
          (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@144@01 i1@145@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@144@01 i2@146@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@188@01  $FPM) r))
  :qid |qp.resPrmSumDef104|)))
(assert (forall ((j@184@01 Int)) (!
  (=>
    (and
      (and (<= 0 j@184@01) (< j@184@01 (Seq_length xs@144@01)))
      (= j@184@01 i2@146@01))
    (and
      (= (inv@189@01 (Seq_index xs@144@01 j@184@01)) j@184@01)
      (img@190@01 (Seq_index xs@144@01 j@184@01))))
  :pattern ((Seq_index xs@144@01 j@184@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@190@01 r)
      (and
        (and (<= 0 (inv@189@01 r)) (< (inv@189@01 r) (Seq_length xs@144@01)))
        (= (inv@189@01 r) i2@146@01)))
    (= (Seq_index xs@144@01 (inv@189@01 r)) r))
  :pattern ((inv@189@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@194@01  $FVF<f>)))
      (and
        (and (<= 0 (inv@189@01 r)) (< (inv@189@01 r) (Seq_length xs@144@01)))
        (= (inv@189@01 r) i2@146@01)
        (img@190@01 r)))
    (=>
      (and
        (and (<= 0 (inv@189@01 r)) (< (inv@189@01 r) (Seq_length xs@144@01)))
        (= (inv@189@01 r) i2@146@01)
        (img@190@01 r))
      (Set_in r ($FVF.domain_f (as sm@194@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@194@01  $FVF<f>))))
  :qid |qp.fvfDomDef108|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@189@01 r)) (< (inv@189@01 r) (Seq_length xs@144@01)))
        (= (inv@189@01 r) i2@146@01)
        (img@190@01 r))
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@194@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@194@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@189@01 r)) (< (inv@189@01 r) (Seq_length xs@144@01)))
        (= (inv@189@01 r) i2@146@01)
        (img@190@01 r))
      (= r (Seq_index xs@144@01 i1@145@01)))
    (=
      ($FVF.lookup_f (as sm@194@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@194@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef106|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@189@01 r)) (< (inv@189@01 r) (Seq_length xs@144@01)))
        (= (inv@189@01 r) i2@146@01)
        (img@190@01 r))
      (= r (Seq_index xs@144@01 i2@146@01)))
    (=
      ($FVF.lookup_f (as sm@194@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@194@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef107|)))
(assert (and
  (forall ((j@184@01 Int)) (!
    (=>
      (and (<= 0 j@184@01) (< j@184@01 (Seq_length xs@144@01)))
      (and
        (=>
          (not (<= 0 j@184@01))
          (and
            (not (<= 0 j@184@01))
            (not
              (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
            (not
              (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@186@01  $FPM) r) $Perm.Write)
              :pattern ((inv@152@01 r))
              :qid |qp-fld-prm-bnd|))
            (<=
              ($FVF.perm_f (as pm@186@01  $FPM) (Seq_index xs@144@01 i1@145@01))
              $Perm.Write)
            (<=
              ($FVF.perm_f (as pm@186@01  $FPM) (Seq_index xs@144@01 i2@146@01))
              $Perm.Write)))
        (=>
          (<= 0 j@184@01)
          (and
            (<= 0 j@184@01)
            (not
              (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
            (not
              (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@188@01  $FPM) r) $Perm.Write)
              :pattern ((inv@152@01 r))
              :qid |qp-fld-prm-bnd|))
            (<=
              ($FVF.perm_f (as pm@188@01  $FPM) (Seq_index xs@144@01 i1@145@01))
              $Perm.Write)
            (<=
              ($FVF.perm_f (as pm@188@01  $FPM) (Seq_index xs@144@01 i2@146@01))
              $Perm.Write)))
        (or (<= 0 j@184@01) (not (<= 0 j@184@01)))
        (=>
          (= j@184@01 i2@146@01)
          (and
            (= j@184@01 i2@146@01)
            (not
              (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
            (not
              (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@188@01  $FPM) r) $Perm.Write)
              :pattern ((inv@152@01 r))
              :qid |qp-fld-prm-bnd|))
            (<=
              ($FVF.perm_f (as pm@188@01  $FPM) (Seq_index xs@144@01 i1@145@01))
              $Perm.Write)
            (<=
              ($FVF.perm_f (as pm@188@01  $FPM) (Seq_index xs@144@01 i2@146@01))
              $Perm.Write)))
        (=>
          (not (= j@184@01 i2@146@01))
          (and
            (not (= j@184@01 i2@146@01))
            (not
              (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
            (not
              (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@188@01  $FPM) r) $Perm.Write)
              :pattern ((inv@152@01 r))
              :qid |qp-fld-prm-bnd|))
            (<=
              ($FVF.perm_f (as pm@188@01  $FPM) (Seq_index xs@144@01 i1@145@01))
              $Perm.Write)
            (<=
              ($FVF.perm_f (as pm@188@01  $FPM) (Seq_index xs@144@01 i2@146@01))
              $Perm.Write)))
        (or (not (= j@184@01 i2@146@01)) (= j@184@01 i2@146@01))))
    :pattern ((Seq_index xs@144@01 j@184@01))
    :qid |f-aux|))
  (fun02qp%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@194@01  $FVF<f>)))) xs@144@01 i2@146@01)))
; [eval] old(fun02qp(xs, i2))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(declare-const sm@195@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@153@01 r)
      (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
    (=
      ($FVF.lookup_f (as sm@195@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@195@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef109|)))
(declare-const pm@196@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@196@01  $FPM) r)
    (ite
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_f (as pm@196@01  $FPM) r))
  :qid |qp.resPrmSumDef110|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@196@01  $FPM) r) $Perm.Write)
  :pattern ((inv@152@01 r))
  :qid |qp-fld-prm-bnd|)))
; [eval] fun02qp(xs, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |xs|
; [eval] |xs|
(declare-const j@197@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |xs|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 56 | !(0 <= j@197@01) | live]
; [else-branch: 56 | 0 <= j@197@01 | live]
(push) ; 6
; [then-branch: 56 | !(0 <= j@197@01)]
(assert (not (<= 0 j@197@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 56 | 0 <= j@197@01]
(assert (<= 0 j@197@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j < |xs|
; [eval] |xs|
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@197@01) (not (<= 0 j@197@01))))
(assert (and (<= 0 j@197@01) (< j@197@01 (Seq_length xs@144@01))))
; [eval] (j == i ? write : none)
; [eval] j == i
(set-option :timeout 0)
(push) ; 5
; [then-branch: 57 | j@197@01 == i2@146@01 | live]
; [else-branch: 57 | j@197@01 != i2@146@01 | live]
(push) ; 6
; [then-branch: 57 | j@197@01 == i2@146@01]
(assert (= j@197@01 i2@146@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 57 | j@197@01 != i2@146@01]
(assert (not (= j@197@01 i2@146@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (= j@197@01 i2@146@01)) (= j@197@01 i2@146@01)))
; [eval] xs[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@197@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@198@01 ($Ref) Int)
(declare-fun img@199@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@197@01 Int)) (!
  (=>
    (and (<= 0 j@197@01) (< j@197@01 (Seq_length xs@144@01)))
    (and
      (or (<= 0 j@197@01) (not (<= 0 j@197@01)))
      (or (not (= j@197@01 i2@146@01)) (= j@197@01 i2@146@01))))
  :pattern ((Seq_index xs@144@01 j@197@01))
  :qid |f-aux|)))
(push) ; 4
(assert (not (forall ((j@197@01 Int)) (!
  (=>
    (and (<= 0 j@197@01) (< j@197@01 (Seq_length xs@144@01)))
    (or
      (= (ite (= j@197@01 i2@146@01) $Perm.Write $Perm.No) $Perm.No)
      (= j@197@01 i2@146@01)))
  
  :qid |quant-u-170|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@197@01 Int) (j2@197@01 Int)) (!
  (=>
    (and
      (and
        (and (<= 0 j1@197@01) (< j1@197@01 (Seq_length xs@144@01)))
        (= j1@197@01 i2@146@01))
      (and
        (and (<= 0 j2@197@01) (< j2@197@01 (Seq_length xs@144@01)))
        (= j2@197@01 i2@146@01))
      (= (Seq_index xs@144@01 j1@197@01) (Seq_index xs@144@01 j2@197@01)))
    (= j1@197@01 j2@197@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@197@01 Int)) (!
  (=>
    (and
      (and (<= 0 j@197@01) (< j@197@01 (Seq_length xs@144@01)))
      (= j@197@01 i2@146@01))
    (and
      (= (inv@198@01 (Seq_index xs@144@01 j@197@01)) j@197@01)
      (img@199@01 (Seq_index xs@144@01 j@197@01))))
  :pattern ((Seq_index xs@144@01 j@197@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@199@01 r)
      (and
        (and (<= 0 (inv@198@01 r)) (< (inv@198@01 r) (Seq_length xs@144@01)))
        (= (inv@198@01 r) i2@146@01)))
    (= (Seq_index xs@144@01 (inv@198@01 r)) r))
  :pattern ((inv@198@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@200@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@198@01 r)) (< (inv@198@01 r) (Seq_length xs@144@01)))
      (img@199@01 r)
      (= r (Seq_index xs@144@01 (inv@198@01 r))))
    ($Perm.min
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        $Perm.Write
        $Perm.No)
      (ite (= (inv@198@01 r) i2@146@01) $Perm.Write $Perm.No))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@200@01 r))
    $Perm.No)
  
  :qid |quant-u-172|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@200@01 r) $Perm.No)
  
  :qid |quant-u-173|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@198@01 r)) (< (inv@198@01 r) (Seq_length xs@144@01)))
      (img@199@01 r)
      (= r (Seq_index xs@144@01 (inv@198@01 r))))
    (=
      (-
        (ite (= (inv@198@01 r) i2@146@01) $Perm.Write $Perm.No)
        (pTaken@200@01 r))
      $Perm.No))
  
  :qid |quant-u-174|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@201@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@201@01  $FVF<f>)))
      (and
        (and (<= 0 (inv@198@01 r)) (< (inv@198@01 r) (Seq_length xs@144@01)))
        (= (inv@198@01 r) i2@146@01)
        (img@199@01 r)))
    (=>
      (and
        (and (<= 0 (inv@198@01 r)) (< (inv@198@01 r) (Seq_length xs@144@01)))
        (= (inv@198@01 r) i2@146@01)
        (img@199@01 r))
      (Set_in r ($FVF.domain_f (as sm@201@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@201@01  $FVF<f>))))
  :qid |qp.fvfDomDef112|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@198@01 r)) (< (inv@198@01 r) (Seq_length xs@144@01)))
        (= (inv@198@01 r) i2@146@01)
        (img@199@01 r))
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01)))))
    (=
      ($FVF.lookup_f (as sm@201@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@201@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef111|)))
(assert (fun02qp%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($SortWrappers.$FVF<f>To$Snap (as sm@201@01  $FVF<f>)))) xs@144@01 i2@146@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@197@01 Int)) (!
  (=>
    (and
      (and (<= 0 j@197@01) (< j@197@01 (Seq_length xs@144@01)))
      (= j@197@01 i2@146@01))
    (and
      (= (inv@198@01 (Seq_index xs@144@01 j@197@01)) j@197@01)
      (img@199@01 (Seq_index xs@144@01 j@197@01))))
  :pattern ((Seq_index xs@144@01 j@197@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@199@01 r)
      (and
        (and (<= 0 (inv@198@01 r)) (< (inv@198@01 r) (Seq_length xs@144@01)))
        (= (inv@198@01 r) i2@146@01)))
    (= (Seq_index xs@144@01 (inv@198@01 r)) r))
  :pattern ((inv@198@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@201@01  $FVF<f>)))
      (and
        (and (<= 0 (inv@198@01 r)) (< (inv@198@01 r) (Seq_length xs@144@01)))
        (= (inv@198@01 r) i2@146@01)
        (img@199@01 r)))
    (=>
      (and
        (and (<= 0 (inv@198@01 r)) (< (inv@198@01 r) (Seq_length xs@144@01)))
        (= (inv@198@01 r) i2@146@01)
        (img@199@01 r))
      (Set_in r ($FVF.domain_f (as sm@201@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@201@01  $FVF<f>))))
  :qid |qp.fvfDomDef112|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@198@01 r)) (< (inv@198@01 r) (Seq_length xs@144@01)))
        (= (inv@198@01 r) i2@146@01)
        (img@199@01 r))
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01)))))
    (=
      ($FVF.lookup_f (as sm@201@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@201@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef111|)))
(assert (and
  (forall ((j@197@01 Int)) (!
    (=>
      (and (<= 0 j@197@01) (< j@197@01 (Seq_length xs@144@01)))
      (and
        (or (<= 0 j@197@01) (not (<= 0 j@197@01)))
        (or (not (= j@197@01 i2@146@01)) (= j@197@01 i2@146@01))))
    :pattern ((Seq_index xs@144@01 j@197@01))
    :qid |f-aux|))
  (fun02qp%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@201@01  $FVF<f>)))) xs@144@01 i2@146@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (=
  (fun02qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@194@01  $FVF<f>)))) xs@144@01 i2@146@01)
  (fun02qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@201@01  $FVF<f>)))) xs@144@01 i2@146@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01))
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01))
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
  (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))))
(declare-const sm@202@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i2@146@01))
    (=
      ($FVF.lookup_f (as sm@202@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@202@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef113|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i1@145@01))
    (=
      ($FVF.lookup_f (as sm@202@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@202@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef114|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@202@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@202@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef115|)))
(declare-const pm@203@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@203@01  $FPM) r)
    (+
      (+
        (ite (= r (Seq_index xs@144@01 i2@146@01)) $Perm.Write $Perm.No)
        (ite (= r (Seq_index xs@144@01 i1@145@01)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@203@01  $FPM) r))
  :qid |qp.resPrmSumDef116|)))
(assert (<=
  ($FVF.perm_f (as pm@203@01  $FPM) (Seq_index xs@144@01 i2@146@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@203@01  $FPM) (Seq_index xs@144@01 i1@145@01))
  $Perm.Write))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@203@01  $FPM) r) $Perm.Write)
  :pattern ((inv@152@01 r))
  :qid |qp-fld-prm-bnd|)))
; [eval] fun02qp(xs, i2) == old(fun02qp(xs, i2))
; [eval] fun02qp(xs, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |xs|
; [eval] |xs|
(declare-const j@204@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |xs|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 58 | !(0 <= j@204@01) | live]
; [else-branch: 58 | 0 <= j@204@01 | live]
(push) ; 6
; [then-branch: 58 | !(0 <= j@204@01)]
(assert (not (<= 0 j@204@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01))
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01))
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
  (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 58 | 0 <= j@204@01]
(assert (<= 0 j@204@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01))
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01))
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
  (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j < |xs|
; [eval] |xs|
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (not (<= 0 j@204@01))
  (and
    (not (<= 0 j@204@01))
    (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
    (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01))))))
; Joined path conditions
(assert (=>
  (<= 0 j@204@01)
  (and
    (<= 0 j@204@01)
    (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
    (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01))))))
(assert (or (<= 0 j@204@01) (not (<= 0 j@204@01))))
(assert (and (<= 0 j@204@01) (< j@204@01 (Seq_length xs@144@01))))
; [eval] (j == i ? write : none)
; [eval] j == i
(set-option :timeout 0)
(push) ; 5
; [then-branch: 59 | j@204@01 == i2@146@01 | live]
; [else-branch: 59 | j@204@01 != i2@146@01 | live]
(push) ; 6
; [then-branch: 59 | j@204@01 == i2@146@01]
(assert (= j@204@01 i2@146@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01))
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01))
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
  (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 59 | j@204@01 != i2@146@01]
(assert (not (= j@204@01 i2@146@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01))
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01))
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
  (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (= j@204@01 i2@146@01)
  (and
    (= j@204@01 i2@146@01)
    (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
    (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01))))))
; Joined path conditions
(assert (=>
  (not (= j@204@01 i2@146@01))
  (and
    (not (= j@204@01 i2@146@01))
    (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
    (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01))))))
(assert (or (not (= j@204@01 i2@146@01)) (= j@204@01 i2@146@01)))
; [eval] xs[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@204@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@205@01 ($Ref) Int)
(declare-fun img@206@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@204@01 Int)) (!
  (=>
    (and (<= 0 j@204@01) (< j@204@01 (Seq_length xs@144@01)))
    (and
      (=>
        (not (<= 0 j@204@01))
        (and
          (not (<= 0 j@204@01))
          (not
            (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
          (not
            (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))))
      (=>
        (<= 0 j@204@01)
        (and
          (<= 0 j@204@01)
          (not
            (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
          (not
            (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))))
      (or (<= 0 j@204@01) (not (<= 0 j@204@01)))
      (=>
        (= j@204@01 i2@146@01)
        (and
          (= j@204@01 i2@146@01)
          (not
            (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
          (not
            (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))))
      (=>
        (not (= j@204@01 i2@146@01))
        (and
          (not (= j@204@01 i2@146@01))
          (not
            (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
          (not
            (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))))
      (or (not (= j@204@01 i2@146@01)) (= j@204@01 i2@146@01))))
  :pattern ((Seq_index xs@144@01 j@204@01))
  :qid |f-aux|)))
(push) ; 4
(assert (not (forall ((j@204@01 Int)) (!
  (=>
    (and (<= 0 j@204@01) (< j@204@01 (Seq_length xs@144@01)))
    (or
      (= (ite (= j@204@01 i2@146@01) $Perm.Write $Perm.No) $Perm.No)
      (= j@204@01 i2@146@01)))
  
  :qid |quant-u-175|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@204@01 Int) (j2@204@01 Int)) (!
  (=>
    (and
      (and
        (and (<= 0 j1@204@01) (< j1@204@01 (Seq_length xs@144@01)))
        (= j1@204@01 i2@146@01))
      (and
        (and (<= 0 j2@204@01) (< j2@204@01 (Seq_length xs@144@01)))
        (= j2@204@01 i2@146@01))
      (= (Seq_index xs@144@01 j1@204@01) (Seq_index xs@144@01 j2@204@01)))
    (= j1@204@01 j2@204@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@204@01 Int)) (!
  (=>
    (and
      (and (<= 0 j@204@01) (< j@204@01 (Seq_length xs@144@01)))
      (= j@204@01 i2@146@01))
    (and
      (= (inv@205@01 (Seq_index xs@144@01 j@204@01)) j@204@01)
      (img@206@01 (Seq_index xs@144@01 j@204@01))))
  :pattern ((Seq_index xs@144@01 j@204@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@206@01 r)
      (and
        (and (<= 0 (inv@205@01 r)) (< (inv@205@01 r) (Seq_length xs@144@01)))
        (= (inv@205@01 r) i2@146@01)))
    (= (Seq_index xs@144@01 (inv@205@01 r)) r))
  :pattern ((inv@205@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@207@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@205@01 r)) (< (inv@205@01 r) (Seq_length xs@144@01)))
      (img@206@01 r)
      (= r (Seq_index xs@144@01 (inv@205@01 r))))
    ($Perm.min
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
        $Perm.No)
      (ite (= (inv@205@01 r) i2@146@01) $Perm.Write $Perm.No))
    $Perm.No))
(define-fun pTaken@208@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@205@01 r)) (< (inv@205@01 r) (Seq_length xs@144@01)))
      (img@206@01 r)
      (= r (Seq_index xs@144@01 (inv@205@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@144@01 i2@146@01)) $Perm.Write $Perm.No)
      (-
        (ite (= (inv@205@01 r) i2@146@01) $Perm.Write $Perm.No)
        (pTaken@207@01 r)))
    $Perm.No))
(define-fun pTaken@209@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@205@01 r)) (< (inv@205@01 r) (Seq_length xs@144@01)))
      (img@206@01 r)
      (= r (Seq_index xs@144@01 (inv@205@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@144@01 i1@145@01)) $Perm.Write $Perm.No)
      (-
        (-
          (ite (= (inv@205@01 r) i2@146@01) $Perm.Write $Perm.No)
          (pTaken@207@01 r))
        (pTaken@208@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
        $Perm.No)
      (pTaken@207@01 r))
    $Perm.No)
  
  :qid |quant-u-177|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@207@01 r) $Perm.No)
  
  :qid |quant-u-178|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@205@01 r)) (< (inv@205@01 r) (Seq_length xs@144@01)))
      (img@206@01 r)
      (= r (Seq_index xs@144@01 (inv@205@01 r))))
    (=
      (-
        (ite (= (inv@205@01 r) i2@146@01) $Perm.Write $Perm.No)
        (pTaken@207@01 r))
      $Perm.No))
  
  :qid |quant-u-179|))))
(check-sat)
; unknown
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)
    (pTaken@208@01 (Seq_index xs@144@01 i2@146@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@205@01 r)) (< (inv@205@01 r) (Seq_length xs@144@01)))
      (img@206@01 r)
      (= r (Seq_index xs@144@01 (inv@205@01 r))))
    (=
      (-
        (-
          (ite (= (inv@205@01 r) i2@146@01) $Perm.Write $Perm.No)
          (pTaken@207@01 r))
        (pTaken@208@01 r))
      $Perm.No))
  
  :qid |quant-u-181|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@210@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@210@01  $FVF<f>)))
      (and
        (and (<= 0 (inv@205@01 r)) (< (inv@205@01 r) (Seq_length xs@144@01)))
        (= (inv@205@01 r) i2@146@01)
        (img@206@01 r)))
    (=>
      (and
        (and (<= 0 (inv@205@01 r)) (< (inv@205@01 r) (Seq_length xs@144@01)))
        (= (inv@205@01 r) i2@146@01)
        (img@206@01 r))
      (Set_in r ($FVF.domain_f (as sm@210@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@210@01  $FVF<f>))))
  :qid |qp.fvfDomDef120|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@205@01 r)) (< (inv@205@01 r) (Seq_length xs@144@01)))
        (= (inv@205@01 r) i2@146@01)
        (img@206@01 r))
      (= r (Seq_index xs@144@01 i2@146@01)))
    (=
      ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef117|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@205@01 r)) (< (inv@205@01 r) (Seq_length xs@144@01)))
        (= (inv@205@01 r) i2@146@01)
        (img@206@01 r))
      (= r (Seq_index xs@144@01 i1@145@01)))
    (=
      ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@205@01 r)) (< (inv@205@01 r) (Seq_length xs@144@01)))
        (= (inv@205@01 r) i2@146@01)
        (img@206@01 r))
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef119|)))
(assert (fun02qp%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($SortWrappers.$FVF<f>To$Snap (as sm@210@01  $FVF<f>)))) xs@144@01 i2@146@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@204@01 Int)) (!
  (=>
    (and
      (and (<= 0 j@204@01) (< j@204@01 (Seq_length xs@144@01)))
      (= j@204@01 i2@146@01))
    (and
      (= (inv@205@01 (Seq_index xs@144@01 j@204@01)) j@204@01)
      (img@206@01 (Seq_index xs@144@01 j@204@01))))
  :pattern ((Seq_index xs@144@01 j@204@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@206@01 r)
      (and
        (and (<= 0 (inv@205@01 r)) (< (inv@205@01 r) (Seq_length xs@144@01)))
        (= (inv@205@01 r) i2@146@01)))
    (= (Seq_index xs@144@01 (inv@205@01 r)) r))
  :pattern ((inv@205@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@210@01  $FVF<f>)))
      (and
        (and (<= 0 (inv@205@01 r)) (< (inv@205@01 r) (Seq_length xs@144@01)))
        (= (inv@205@01 r) i2@146@01)
        (img@206@01 r)))
    (=>
      (and
        (and (<= 0 (inv@205@01 r)) (< (inv@205@01 r) (Seq_length xs@144@01)))
        (= (inv@205@01 r) i2@146@01)
        (img@206@01 r))
      (Set_in r ($FVF.domain_f (as sm@210@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@210@01  $FVF<f>))))
  :qid |qp.fvfDomDef120|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@205@01 r)) (< (inv@205@01 r) (Seq_length xs@144@01)))
        (= (inv@205@01 r) i2@146@01)
        (img@206@01 r))
      (= r (Seq_index xs@144@01 i2@146@01)))
    (=
      ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef117|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@205@01 r)) (< (inv@205@01 r) (Seq_length xs@144@01)))
        (= (inv@205@01 r) i2@146@01)
        (img@206@01 r))
      (= r (Seq_index xs@144@01 i1@145@01)))
    (=
      ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@205@01 r)) (< (inv@205@01 r) (Seq_length xs@144@01)))
        (= (inv@205@01 r) i2@146@01)
        (img@206@01 r))
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@210@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@210@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef119|)))
(assert (and
  (forall ((j@204@01 Int)) (!
    (=>
      (and (<= 0 j@204@01) (< j@204@01 (Seq_length xs@144@01)))
      (and
        (=>
          (not (<= 0 j@204@01))
          (and
            (not (<= 0 j@204@01))
            (not
              (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
            (not
              (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))))
        (=>
          (<= 0 j@204@01)
          (and
            (<= 0 j@204@01)
            (not
              (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
            (not
              (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))))
        (or (<= 0 j@204@01) (not (<= 0 j@204@01)))
        (=>
          (= j@204@01 i2@146@01)
          (and
            (= j@204@01 i2@146@01)
            (not
              (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
            (not
              (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))))
        (=>
          (not (= j@204@01 i2@146@01))
          (and
            (not (= j@204@01 i2@146@01))
            (not
              (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
            (not
              (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))))
        (or (not (= j@204@01 i2@146@01)) (= j@204@01 i2@146@01))))
    :pattern ((Seq_index xs@144@01 j@204@01))
    :qid |f-aux|))
  (fun02qp%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@210@01  $FVF<f>)))) xs@144@01 i2@146@01)))
; [eval] old(fun02qp(xs, i2))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(declare-const sm@211@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@153@01 r)
      (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
    (=
      ($FVF.lookup_f (as sm@211@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@211@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef121|)))
(declare-const pm@212@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@212@01  $FPM) r)
    (ite
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_f (as pm@212@01  $FPM) r))
  :qid |qp.resPrmSumDef122|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@212@01  $FPM) r) $Perm.Write)
  :pattern ((inv@152@01 r))
  :qid |qp-fld-prm-bnd|)))
; [eval] fun02qp(xs, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |xs|
; [eval] |xs|
(declare-const j@213@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |xs|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 60 | !(0 <= j@213@01) | live]
; [else-branch: 60 | 0 <= j@213@01 | live]
(push) ; 6
; [then-branch: 60 | !(0 <= j@213@01)]
(assert (not (<= 0 j@213@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 60 | 0 <= j@213@01]
(assert (<= 0 j@213@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j < |xs|
; [eval] |xs|
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@213@01) (not (<= 0 j@213@01))))
(assert (and (<= 0 j@213@01) (< j@213@01 (Seq_length xs@144@01))))
; [eval] (j == i ? write : none)
; [eval] j == i
(set-option :timeout 0)
(push) ; 5
; [then-branch: 61 | j@213@01 == i2@146@01 | live]
; [else-branch: 61 | j@213@01 != i2@146@01 | live]
(push) ; 6
; [then-branch: 61 | j@213@01 == i2@146@01]
(assert (= j@213@01 i2@146@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 61 | j@213@01 != i2@146@01]
(assert (not (= j@213@01 i2@146@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (= j@213@01 i2@146@01)) (= j@213@01 i2@146@01)))
; [eval] xs[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@213@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@214@01 ($Ref) Int)
(declare-fun img@215@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@213@01 Int)) (!
  (=>
    (and (<= 0 j@213@01) (< j@213@01 (Seq_length xs@144@01)))
    (and
      (or (<= 0 j@213@01) (not (<= 0 j@213@01)))
      (or (not (= j@213@01 i2@146@01)) (= j@213@01 i2@146@01))))
  :pattern ((Seq_index xs@144@01 j@213@01))
  :qid |f-aux|)))
(push) ; 4
(assert (not (forall ((j@213@01 Int)) (!
  (=>
    (and (<= 0 j@213@01) (< j@213@01 (Seq_length xs@144@01)))
    (or
      (= (ite (= j@213@01 i2@146@01) $Perm.Write $Perm.No) $Perm.No)
      (= j@213@01 i2@146@01)))
  
  :qid |quant-u-182|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@213@01 Int) (j2@213@01 Int)) (!
  (=>
    (and
      (and
        (and (<= 0 j1@213@01) (< j1@213@01 (Seq_length xs@144@01)))
        (= j1@213@01 i2@146@01))
      (and
        (and (<= 0 j2@213@01) (< j2@213@01 (Seq_length xs@144@01)))
        (= j2@213@01 i2@146@01))
      (= (Seq_index xs@144@01 j1@213@01) (Seq_index xs@144@01 j2@213@01)))
    (= j1@213@01 j2@213@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@213@01 Int)) (!
  (=>
    (and
      (and (<= 0 j@213@01) (< j@213@01 (Seq_length xs@144@01)))
      (= j@213@01 i2@146@01))
    (and
      (= (inv@214@01 (Seq_index xs@144@01 j@213@01)) j@213@01)
      (img@215@01 (Seq_index xs@144@01 j@213@01))))
  :pattern ((Seq_index xs@144@01 j@213@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@215@01 r)
      (and
        (and (<= 0 (inv@214@01 r)) (< (inv@214@01 r) (Seq_length xs@144@01)))
        (= (inv@214@01 r) i2@146@01)))
    (= (Seq_index xs@144@01 (inv@214@01 r)) r))
  :pattern ((inv@214@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@216@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@214@01 r)) (< (inv@214@01 r) (Seq_length xs@144@01)))
      (img@215@01 r)
      (= r (Seq_index xs@144@01 (inv@214@01 r))))
    ($Perm.min
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        $Perm.Write
        $Perm.No)
      (ite (= (inv@214@01 r) i2@146@01) $Perm.Write $Perm.No))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@216@01 r))
    $Perm.No)
  
  :qid |quant-u-184|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@216@01 r) $Perm.No)
  
  :qid |quant-u-185|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@214@01 r)) (< (inv@214@01 r) (Seq_length xs@144@01)))
      (img@215@01 r)
      (= r (Seq_index xs@144@01 (inv@214@01 r))))
    (=
      (-
        (ite (= (inv@214@01 r) i2@146@01) $Perm.Write $Perm.No)
        (pTaken@216@01 r))
      $Perm.No))
  
  :qid |quant-u-186|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@217@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@217@01  $FVF<f>)))
      (and
        (and (<= 0 (inv@214@01 r)) (< (inv@214@01 r) (Seq_length xs@144@01)))
        (= (inv@214@01 r) i2@146@01)
        (img@215@01 r)))
    (=>
      (and
        (and (<= 0 (inv@214@01 r)) (< (inv@214@01 r) (Seq_length xs@144@01)))
        (= (inv@214@01 r) i2@146@01)
        (img@215@01 r))
      (Set_in r ($FVF.domain_f (as sm@217@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@217@01  $FVF<f>))))
  :qid |qp.fvfDomDef124|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@214@01 r)) (< (inv@214@01 r) (Seq_length xs@144@01)))
        (= (inv@214@01 r) i2@146@01)
        (img@215@01 r))
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01)))))
    (=
      ($FVF.lookup_f (as sm@217@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@217@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef123|)))
(assert (fun02qp%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($SortWrappers.$FVF<f>To$Snap (as sm@217@01  $FVF<f>)))) xs@144@01 i2@146@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@213@01 Int)) (!
  (=>
    (and
      (and (<= 0 j@213@01) (< j@213@01 (Seq_length xs@144@01)))
      (= j@213@01 i2@146@01))
    (and
      (= (inv@214@01 (Seq_index xs@144@01 j@213@01)) j@213@01)
      (img@215@01 (Seq_index xs@144@01 j@213@01))))
  :pattern ((Seq_index xs@144@01 j@213@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@215@01 r)
      (and
        (and (<= 0 (inv@214@01 r)) (< (inv@214@01 r) (Seq_length xs@144@01)))
        (= (inv@214@01 r) i2@146@01)))
    (= (Seq_index xs@144@01 (inv@214@01 r)) r))
  :pattern ((inv@214@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@217@01  $FVF<f>)))
      (and
        (and (<= 0 (inv@214@01 r)) (< (inv@214@01 r) (Seq_length xs@144@01)))
        (= (inv@214@01 r) i2@146@01)
        (img@215@01 r)))
    (=>
      (and
        (and (<= 0 (inv@214@01 r)) (< (inv@214@01 r) (Seq_length xs@144@01)))
        (= (inv@214@01 r) i2@146@01)
        (img@215@01 r))
      (Set_in r ($FVF.domain_f (as sm@217@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@217@01  $FVF<f>))))
  :qid |qp.fvfDomDef124|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@214@01 r)) (< (inv@214@01 r) (Seq_length xs@144@01)))
        (= (inv@214@01 r) i2@146@01)
        (img@215@01 r))
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01)))))
    (=
      ($FVF.lookup_f (as sm@217@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@217@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef123|)))
(assert (and
  (forall ((j@213@01 Int)) (!
    (=>
      (and (<= 0 j@213@01) (< j@213@01 (Seq_length xs@144@01)))
      (and
        (or (<= 0 j@213@01) (not (<= 0 j@213@01)))
        (or (not (= j@213@01 i2@146@01)) (= j@213@01 i2@146@01))))
    :pattern ((Seq_index xs@144@01 j@213@01))
    :qid |f-aux|))
  (fun02qp%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@217@01  $FVF<f>)))) xs@144@01 i2@146@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (=
  (fun02qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@210@01  $FVF<f>)))) xs@144@01 i2@146@01)
  (fun02qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@217@01  $FVF<f>)))) xs@144@01 i2@146@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01))
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01))
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
  (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))))
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] fun02qp(xs, i2) == old(fun02qp(xs, i2))
; [eval] fun02qp(xs, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |xs|
; [eval] |xs|
(declare-const j@218@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |xs|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 62 | !(0 <= j@218@01) | live]
; [else-branch: 62 | 0 <= j@218@01 | live]
(push) ; 6
; [then-branch: 62 | !(0 <= j@218@01)]
(assert (not (<= 0 j@218@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01))
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01))
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
  (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))))
(declare-const sm@219@01 $FVF<f>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@219@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@219@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef125|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i1@145@01))
    (=
      ($FVF.lookup_f (as sm@219@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@219@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i2@146@01))
    (=
      ($FVF.lookup_f (as sm@219@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@219@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef127|)))
(declare-const pm@220@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@220@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@153@01 r)
            (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
          (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@144@01 i1@145@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@144@01 i2@146@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@220@01  $FPM) r))
  :qid |qp.resPrmSumDef128|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@220@01  $FPM) r) $Perm.Write)
  :pattern ((inv@152@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<=
  ($FVF.perm_f (as pm@220@01  $FPM) (Seq_index xs@144@01 i1@145@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@220@01  $FPM) (Seq_index xs@144@01 i2@146@01))
  $Perm.Write))
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 62 | 0 <= j@218@01]
(assert (<= 0 j@218@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01))
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01))
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
  (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))))
(declare-const sm@221@01 $FVF<f>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@221@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@221@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i1@145@01))
    (=
      ($FVF.lookup_f (as sm@221@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@221@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef130|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i2@146@01))
    (=
      ($FVF.lookup_f (as sm@221@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@221@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef131|)))
(declare-const pm@222@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@222@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@153@01 r)
            (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
          (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@144@01 i1@145@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@144@01 i2@146@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@222@01  $FPM) r))
  :qid |qp.resPrmSumDef132|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@222@01  $FPM) r) $Perm.Write)
  :pattern ((inv@152@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<=
  ($FVF.perm_f (as pm@222@01  $FPM) (Seq_index xs@144@01 i1@145@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@222@01  $FPM) (Seq_index xs@144@01 i2@146@01))
  $Perm.Write))
; [eval] j < |xs|
; [eval] |xs|
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@219@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@219@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef125|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i1@145@01))
    (=
      ($FVF.lookup_f (as sm@219@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@219@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i2@146@01))
    (=
      ($FVF.lookup_f (as sm@219@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@219@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef127|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@220@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@153@01 r)
            (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
          (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@144@01 i1@145@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@144@01 i2@146@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@220@01  $FPM) r))
  :qid |qp.resPrmSumDef128|)))
(assert (=>
  (not (<= 0 j@218@01))
  (and
    (not (<= 0 j@218@01))
    (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
    (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@220@01  $FPM) r) $Perm.Write)
      :pattern ((inv@152@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@220@01  $FPM) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@220@01  $FPM) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write))))
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@221@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@221@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i1@145@01))
    (=
      ($FVF.lookup_f (as sm@221@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@221@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef130|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i2@146@01))
    (=
      ($FVF.lookup_f (as sm@221@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@221@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef131|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@222@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@153@01 r)
            (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
          (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@144@01 i1@145@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@144@01 i2@146@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@222@01  $FPM) r))
  :qid |qp.resPrmSumDef132|)))
(assert (=>
  (<= 0 j@218@01)
  (and
    (<= 0 j@218@01)
    (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
    (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@222@01  $FPM) r) $Perm.Write)
      :pattern ((inv@152@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@222@01  $FPM) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@222@01  $FPM) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write))))
(assert (or (<= 0 j@218@01) (not (<= 0 j@218@01))))
(assert (and (<= 0 j@218@01) (< j@218@01 (Seq_length xs@144@01))))
; [eval] (j == i ? write : none)
; [eval] j == i
(set-option :timeout 0)
(push) ; 5
; [then-branch: 63 | j@218@01 == i2@146@01 | live]
; [else-branch: 63 | j@218@01 != i2@146@01 | live]
(push) ; 6
; [then-branch: 63 | j@218@01 == i2@146@01]
(assert (= j@218@01 i2@146@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01))
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01))
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
  (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@222@01  $FPM) r) $Perm.Write)
  :pattern ((inv@152@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<=
  ($FVF.perm_f (as pm@222@01  $FPM) (Seq_index xs@144@01 i1@145@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@222@01  $FPM) (Seq_index xs@144@01 i2@146@01))
  $Perm.Write))
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 63 | j@218@01 != i2@146@01]
(assert (not (= j@218@01 i2@146@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01))
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
    (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) (Seq_index xs@144@01 i2@146@01))
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) (Seq_index xs@144@01 i1@145@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
  (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@222@01  $FPM) r) $Perm.Write)
  :pattern ((inv@152@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<=
  ($FVF.perm_f (as pm@222@01  $FPM) (Seq_index xs@144@01 i1@145@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@222@01  $FPM) (Seq_index xs@144@01 i2@146@01))
  $Perm.Write))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (= j@218@01 i2@146@01)
  (and
    (= j@218@01 i2@146@01)
    (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
    (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@222@01  $FPM) r) $Perm.Write)
      :pattern ((inv@152@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@222@01  $FPM) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@222@01  $FPM) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write))))
; Joined path conditions
(assert (=>
  (not (= j@218@01 i2@146@01))
  (and
    (not (= j@218@01 i2@146@01))
    (not (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
    (not (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@222@01  $FPM) r) $Perm.Write)
      :pattern ((inv@152@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@222@01  $FPM) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@222@01  $FPM) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write))))
(assert (or (not (= j@218@01 i2@146@01)) (= j@218@01 i2@146@01)))
; [eval] xs[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@218@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@223@01 ($Ref) Int)
(declare-fun img@224@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@219@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@219@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef125|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i1@145@01))
    (=
      ($FVF.lookup_f (as sm@219@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@219@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i2@146@01))
    (=
      ($FVF.lookup_f (as sm@219@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@219@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef127|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@220@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@153@01 r)
            (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
          (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@144@01 i1@145@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@144@01 i2@146@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@220@01  $FPM) r))
  :qid |qp.resPrmSumDef128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@221@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@221@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i1@145@01))
    (=
      ($FVF.lookup_f (as sm@221@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@221@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef130|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i2@146@01))
    (=
      ($FVF.lookup_f (as sm@221@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@221@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef131|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@222@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@153@01 r)
            (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
          (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@144@01 i1@145@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@144@01 i2@146@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@222@01  $FPM) r))
  :qid |qp.resPrmSumDef132|)))
; Nested auxiliary terms: non-globals
(assert (forall ((j@218@01 Int)) (!
  (=>
    (and (<= 0 j@218@01) (< j@218@01 (Seq_length xs@144@01)))
    (and
      (=>
        (not (<= 0 j@218@01))
        (and
          (not (<= 0 j@218@01))
          (not
            (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
          (not
            (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
          (forall ((r $Ref)) (!
            (<= ($FVF.perm_f (as pm@220@01  $FPM) r) $Perm.Write)
            :pattern ((inv@152@01 r))
            :qid |qp-fld-prm-bnd|))
          (<=
            ($FVF.perm_f (as pm@220@01  $FPM) (Seq_index xs@144@01 i1@145@01))
            $Perm.Write)
          (<=
            ($FVF.perm_f (as pm@220@01  $FPM) (Seq_index xs@144@01 i2@146@01))
            $Perm.Write)))
      (=>
        (<= 0 j@218@01)
        (and
          (<= 0 j@218@01)
          (not
            (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
          (not
            (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
          (forall ((r $Ref)) (!
            (<= ($FVF.perm_f (as pm@222@01  $FPM) r) $Perm.Write)
            :pattern ((inv@152@01 r))
            :qid |qp-fld-prm-bnd|))
          (<=
            ($FVF.perm_f (as pm@222@01  $FPM) (Seq_index xs@144@01 i1@145@01))
            $Perm.Write)
          (<=
            ($FVF.perm_f (as pm@222@01  $FPM) (Seq_index xs@144@01 i2@146@01))
            $Perm.Write)))
      (or (<= 0 j@218@01) (not (<= 0 j@218@01)))
      (=>
        (= j@218@01 i2@146@01)
        (and
          (= j@218@01 i2@146@01)
          (not
            (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
          (not
            (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
          (forall ((r $Ref)) (!
            (<= ($FVF.perm_f (as pm@222@01  $FPM) r) $Perm.Write)
            :pattern ((inv@152@01 r))
            :qid |qp-fld-prm-bnd|))
          (<=
            ($FVF.perm_f (as pm@222@01  $FPM) (Seq_index xs@144@01 i1@145@01))
            $Perm.Write)
          (<=
            ($FVF.perm_f (as pm@222@01  $FPM) (Seq_index xs@144@01 i2@146@01))
            $Perm.Write)))
      (=>
        (not (= j@218@01 i2@146@01))
        (and
          (not (= j@218@01 i2@146@01))
          (not
            (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
          (not
            (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
          (forall ((r $Ref)) (!
            (<= ($FVF.perm_f (as pm@222@01  $FPM) r) $Perm.Write)
            :pattern ((inv@152@01 r))
            :qid |qp-fld-prm-bnd|))
          (<=
            ($FVF.perm_f (as pm@222@01  $FPM) (Seq_index xs@144@01 i1@145@01))
            $Perm.Write)
          (<=
            ($FVF.perm_f (as pm@222@01  $FPM) (Seq_index xs@144@01 i2@146@01))
            $Perm.Write)))
      (or (not (= j@218@01 i2@146@01)) (= j@218@01 i2@146@01))))
  :pattern ((Seq_index xs@144@01 j@218@01))
  :qid |f-aux|)))
(push) ; 4
(assert (not (forall ((j@218@01 Int)) (!
  (=>
    (and (<= 0 j@218@01) (< j@218@01 (Seq_length xs@144@01)))
    (or
      (= (ite (= j@218@01 i2@146@01) $Perm.Write $Perm.No) $Perm.No)
      (= j@218@01 i2@146@01)))
  
  :qid |quant-u-187|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@218@01 Int) (j2@218@01 Int)) (!
  (=>
    (and
      (and
        (and (<= 0 j1@218@01) (< j1@218@01 (Seq_length xs@144@01)))
        (= j1@218@01 i2@146@01))
      (and
        (and (<= 0 j2@218@01) (< j2@218@01 (Seq_length xs@144@01)))
        (= j2@218@01 i2@146@01))
      (= (Seq_index xs@144@01 j1@218@01) (Seq_index xs@144@01 j2@218@01)))
    (= j1@218@01 j2@218@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@218@01 Int)) (!
  (=>
    (and
      (and (<= 0 j@218@01) (< j@218@01 (Seq_length xs@144@01)))
      (= j@218@01 i2@146@01))
    (and
      (= (inv@223@01 (Seq_index xs@144@01 j@218@01)) j@218@01)
      (img@224@01 (Seq_index xs@144@01 j@218@01))))
  :pattern ((Seq_index xs@144@01 j@218@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@224@01 r)
      (and
        (and (<= 0 (inv@223@01 r)) (< (inv@223@01 r) (Seq_length xs@144@01)))
        (= (inv@223@01 r) i2@146@01)))
    (= (Seq_index xs@144@01 (inv@223@01 r)) r))
  :pattern ((inv@223@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@225@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@223@01 r)) (< (inv@223@01 r) (Seq_length xs@144@01)))
      (img@224@01 r)
      (= r (Seq_index xs@144@01 (inv@223@01 r))))
    ($Perm.min
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
        $Perm.No)
      (ite (= (inv@223@01 r) i2@146@01) $Perm.Write $Perm.No))
    $Perm.No))
(define-fun pTaken@226@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@223@01 r)) (< (inv@223@01 r) (Seq_length xs@144@01)))
      (img@224@01 r)
      (= r (Seq_index xs@144@01 (inv@223@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@144@01 i1@145@01)) $Perm.Write $Perm.No)
      (-
        (ite (= (inv@223@01 r) i2@146@01) $Perm.Write $Perm.No)
        (pTaken@225@01 r)))
    $Perm.No))
(define-fun pTaken@227@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@223@01 r)) (< (inv@223@01 r) (Seq_length xs@144@01)))
      (img@224@01 r)
      (= r (Seq_index xs@144@01 (inv@223@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@144@01 i2@146@01)) $Perm.Write $Perm.No)
      (-
        (-
          (ite (= (inv@223@01 r) i2@146@01) $Perm.Write $Perm.No)
          (pTaken@225@01 r))
        (pTaken@226@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
        $Perm.No)
      (pTaken@225@01 r))
    $Perm.No)
  
  :qid |quant-u-189|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@225@01 r) $Perm.No)
  
  :qid |quant-u-190|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@223@01 r)) (< (inv@223@01 r) (Seq_length xs@144@01)))
      (img@224@01 r)
      (= r (Seq_index xs@144@01 (inv@223@01 r))))
    (=
      (-
        (ite (= (inv@223@01 r) i2@146@01) $Perm.Write $Perm.No)
        (pTaken@225@01 r))
      $Perm.No))
  
  :qid |quant-u-191|))))
(check-sat)
; unknown
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i1@145@01))
      $Perm.Write
      $Perm.No)
    (pTaken@226@01 (Seq_index xs@144@01 i1@145@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@226@01 r) $Perm.No)
  
  :qid |quant-u-193|))))
(check-sat)
; unsat
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@223@01 r)) (< (inv@223@01 r) (Seq_length xs@144@01)))
      (img@224@01 r)
      (= r (Seq_index xs@144@01 (inv@223@01 r))))
    (=
      (-
        (-
          (ite (= (inv@223@01 r) i2@146@01) $Perm.Write $Perm.No)
          (pTaken@225@01 r))
        (pTaken@226@01 r))
      $Perm.No))
  
  :qid |quant-u-194|))))
(check-sat)
; unknown
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i2@146@01))
      $Perm.Write
      $Perm.No)
    (pTaken@227@01 (Seq_index xs@144@01 i2@146@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@223@01 r)) (< (inv@223@01 r) (Seq_length xs@144@01)))
      (img@224@01 r)
      (= r (Seq_index xs@144@01 (inv@223@01 r))))
    (=
      (-
        (-
          (-
            (ite (= (inv@223@01 r) i2@146@01) $Perm.Write $Perm.No)
            (pTaken@225@01 r))
          (pTaken@226@01 r))
        (pTaken@227@01 r))
      $Perm.No))
  
  :qid |quant-u-196|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@228@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@228@01  $FVF<f>)))
      (and
        (and (<= 0 (inv@223@01 r)) (< (inv@223@01 r) (Seq_length xs@144@01)))
        (= (inv@223@01 r) i2@146@01)
        (img@224@01 r)))
    (=>
      (and
        (and (<= 0 (inv@223@01 r)) (< (inv@223@01 r) (Seq_length xs@144@01)))
        (= (inv@223@01 r) i2@146@01)
        (img@224@01 r))
      (Set_in r ($FVF.domain_f (as sm@228@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@228@01  $FVF<f>))))
  :qid |qp.fvfDomDef136|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@223@01 r)) (< (inv@223@01 r) (Seq_length xs@144@01)))
        (= (inv@223@01 r) i2@146@01)
        (img@224@01 r))
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@228@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@228@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@223@01 r)) (< (inv@223@01 r) (Seq_length xs@144@01)))
        (= (inv@223@01 r) i2@146@01)
        (img@224@01 r))
      (= r (Seq_index xs@144@01 i1@145@01)))
    (=
      ($FVF.lookup_f (as sm@228@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@228@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef134|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@223@01 r)) (< (inv@223@01 r) (Seq_length xs@144@01)))
        (= (inv@223@01 r) i2@146@01)
        (img@224@01 r))
      (= r (Seq_index xs@144@01 i2@146@01)))
    (=
      ($FVF.lookup_f (as sm@228@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@228@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef135|)))
(assert (fun02qp%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($SortWrappers.$FVF<f>To$Snap (as sm@228@01  $FVF<f>)))) xs@144@01 i2@146@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@219@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@219@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef125|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i1@145@01))
    (=
      ($FVF.lookup_f (as sm@219@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@219@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i2@146@01))
    (=
      ($FVF.lookup_f (as sm@219@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@219@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef127|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@220@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@153@01 r)
            (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
          (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@144@01 i1@145@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@144@01 i2@146@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@220@01  $FPM) r))
  :qid |qp.resPrmSumDef128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@221@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@221@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i1@145@01))
    (=
      ($FVF.lookup_f (as sm@221@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@221@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef130|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@144@01 i2@146@01))
    (=
      ($FVF.lookup_f (as sm@221@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@221@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef131|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@222@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@153@01 r)
            (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
          (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@144@01 i1@145@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@144@01 i2@146@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@222@01  $FPM) r))
  :qid |qp.resPrmSumDef132|)))
(assert (forall ((j@218@01 Int)) (!
  (=>
    (and
      (and (<= 0 j@218@01) (< j@218@01 (Seq_length xs@144@01)))
      (= j@218@01 i2@146@01))
    (and
      (= (inv@223@01 (Seq_index xs@144@01 j@218@01)) j@218@01)
      (img@224@01 (Seq_index xs@144@01 j@218@01))))
  :pattern ((Seq_index xs@144@01 j@218@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@224@01 r)
      (and
        (and (<= 0 (inv@223@01 r)) (< (inv@223@01 r) (Seq_length xs@144@01)))
        (= (inv@223@01 r) i2@146@01)))
    (= (Seq_index xs@144@01 (inv@223@01 r)) r))
  :pattern ((inv@223@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@228@01  $FVF<f>)))
      (and
        (and (<= 0 (inv@223@01 r)) (< (inv@223@01 r) (Seq_length xs@144@01)))
        (= (inv@223@01 r) i2@146@01)
        (img@224@01 r)))
    (=>
      (and
        (and (<= 0 (inv@223@01 r)) (< (inv@223@01 r) (Seq_length xs@144@01)))
        (= (inv@223@01 r) i2@146@01)
        (img@224@01 r))
      (Set_in r ($FVF.domain_f (as sm@228@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@228@01  $FVF<f>))))
  :qid |qp.fvfDomDef136|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@223@01 r)) (< (inv@223@01 r) (Seq_length xs@144@01)))
        (= (inv@223@01 r) i2@146@01)
        (img@224@01 r))
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@154@01 r)) (pTaken@167@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@228@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@228@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@223@01 r)) (< (inv@223@01 r) (Seq_length xs@144@01)))
        (= (inv@223@01 r) i2@146@01)
        (img@224@01 r))
      (= r (Seq_index xs@144@01 i1@145@01)))
    (=
      ($FVF.lookup_f (as sm@228@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@155@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@228@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@155@01  $FVF<f>) r))
  :qid |qp.fvfValDef134|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@223@01 r)) (< (inv@223@01 r) (Seq_length xs@144@01)))
        (= (inv@223@01 r) i2@146@01)
        (img@224@01 r))
      (= r (Seq_index xs@144@01 i2@146@01)))
    (=
      ($FVF.lookup_f (as sm@228@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@169@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@228@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@169@01  $FVF<f>) r))
  :qid |qp.fvfValDef135|)))
(assert (and
  (forall ((j@218@01 Int)) (!
    (=>
      (and (<= 0 j@218@01) (< j@218@01 (Seq_length xs@144@01)))
      (and
        (=>
          (not (<= 0 j@218@01))
          (and
            (not (<= 0 j@218@01))
            (not
              (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
            (not
              (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@220@01  $FPM) r) $Perm.Write)
              :pattern ((inv@152@01 r))
              :qid |qp-fld-prm-bnd|))
            (<=
              ($FVF.perm_f (as pm@220@01  $FPM) (Seq_index xs@144@01 i1@145@01))
              $Perm.Write)
            (<=
              ($FVF.perm_f (as pm@220@01  $FPM) (Seq_index xs@144@01 i2@146@01))
              $Perm.Write)))
        (=>
          (<= 0 j@218@01)
          (and
            (<= 0 j@218@01)
            (not
              (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
            (not
              (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@222@01  $FPM) r) $Perm.Write)
              :pattern ((inv@152@01 r))
              :qid |qp-fld-prm-bnd|))
            (<=
              ($FVF.perm_f (as pm@222@01  $FPM) (Seq_index xs@144@01 i1@145@01))
              $Perm.Write)
            (<=
              ($FVF.perm_f (as pm@222@01  $FPM) (Seq_index xs@144@01 i2@146@01))
              $Perm.Write)))
        (or (<= 0 j@218@01) (not (<= 0 j@218@01)))
        (=>
          (= j@218@01 i2@146@01)
          (and
            (= j@218@01 i2@146@01)
            (not
              (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
            (not
              (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@222@01  $FPM) r) $Perm.Write)
              :pattern ((inv@152@01 r))
              :qid |qp-fld-prm-bnd|))
            (<=
              ($FVF.perm_f (as pm@222@01  $FPM) (Seq_index xs@144@01 i1@145@01))
              $Perm.Write)
            (<=
              ($FVF.perm_f (as pm@222@01  $FPM) (Seq_index xs@144@01 i2@146@01))
              $Perm.Write)))
        (=>
          (not (= j@218@01 i2@146@01))
          (and
            (not (= j@218@01 i2@146@01))
            (not
              (= (Seq_index xs@144@01 i1@145@01) (Seq_index xs@144@01 i2@146@01)))
            (not
              (= (Seq_index xs@144@01 i2@146@01) (Seq_index xs@144@01 i1@145@01)))
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@222@01  $FPM) r) $Perm.Write)
              :pattern ((inv@152@01 r))
              :qid |qp-fld-prm-bnd|))
            (<=
              ($FVF.perm_f (as pm@222@01  $FPM) (Seq_index xs@144@01 i1@145@01))
              $Perm.Write)
            (<=
              ($FVF.perm_f (as pm@222@01  $FPM) (Seq_index xs@144@01 i2@146@01))
              $Perm.Write)))
        (or (not (= j@218@01 i2@146@01)) (= j@218@01 i2@146@01))))
    :pattern ((Seq_index xs@144@01 j@218@01))
    :qid |f-aux|))
  (fun02qp%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@228@01  $FVF<f>)))) xs@144@01 i2@146@01)))
; [eval] old(fun02qp(xs, i2))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(declare-const sm@229@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@153@01 r)
      (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
    (=
      ($FVF.lookup_f (as sm@229@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@229@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef137|)))
(declare-const pm@230@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@230@01  $FPM) r)
    (ite
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_f (as pm@230@01  $FPM) r))
  :qid |qp.resPrmSumDef138|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@230@01  $FPM) r) $Perm.Write)
  :pattern ((inv@152@01 r))
  :qid |qp-fld-prm-bnd|)))
; [eval] fun02qp(xs, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |xs|
; [eval] |xs|
(declare-const j@231@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |xs|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 64 | !(0 <= j@231@01) | live]
; [else-branch: 64 | 0 <= j@231@01 | live]
(push) ; 6
; [then-branch: 64 | !(0 <= j@231@01)]
(assert (not (<= 0 j@231@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 64 | 0 <= j@231@01]
(assert (<= 0 j@231@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j < |xs|
; [eval] |xs|
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@231@01) (not (<= 0 j@231@01))))
(assert (and (<= 0 j@231@01) (< j@231@01 (Seq_length xs@144@01))))
; [eval] (j == i ? write : none)
; [eval] j == i
(set-option :timeout 0)
(push) ; 5
; [then-branch: 65 | j@231@01 == i2@146@01 | live]
; [else-branch: 65 | j@231@01 != i2@146@01 | live]
(push) ; 6
; [then-branch: 65 | j@231@01 == i2@146@01]
(assert (= j@231@01 i2@146@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 65 | j@231@01 != i2@146@01]
(assert (not (= j@231@01 i2@146@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (= j@231@01 i2@146@01)) (= j@231@01 i2@146@01)))
; [eval] xs[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@231@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@232@01 ($Ref) Int)
(declare-fun img@233@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@231@01 Int)) (!
  (=>
    (and (<= 0 j@231@01) (< j@231@01 (Seq_length xs@144@01)))
    (and
      (or (<= 0 j@231@01) (not (<= 0 j@231@01)))
      (or (not (= j@231@01 i2@146@01)) (= j@231@01 i2@146@01))))
  :pattern ((Seq_index xs@144@01 j@231@01))
  :qid |f-aux|)))
(push) ; 4
(assert (not (forall ((j@231@01 Int)) (!
  (=>
    (and (<= 0 j@231@01) (< j@231@01 (Seq_length xs@144@01)))
    (or
      (= (ite (= j@231@01 i2@146@01) $Perm.Write $Perm.No) $Perm.No)
      (= j@231@01 i2@146@01)))
  
  :qid |quant-u-197|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@231@01 Int) (j2@231@01 Int)) (!
  (=>
    (and
      (and
        (and (<= 0 j1@231@01) (< j1@231@01 (Seq_length xs@144@01)))
        (= j1@231@01 i2@146@01))
      (and
        (and (<= 0 j2@231@01) (< j2@231@01 (Seq_length xs@144@01)))
        (= j2@231@01 i2@146@01))
      (= (Seq_index xs@144@01 j1@231@01) (Seq_index xs@144@01 j2@231@01)))
    (= j1@231@01 j2@231@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@231@01 Int)) (!
  (=>
    (and
      (and (<= 0 j@231@01) (< j@231@01 (Seq_length xs@144@01)))
      (= j@231@01 i2@146@01))
    (and
      (= (inv@232@01 (Seq_index xs@144@01 j@231@01)) j@231@01)
      (img@233@01 (Seq_index xs@144@01 j@231@01))))
  :pattern ((Seq_index xs@144@01 j@231@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@233@01 r)
      (and
        (and (<= 0 (inv@232@01 r)) (< (inv@232@01 r) (Seq_length xs@144@01)))
        (= (inv@232@01 r) i2@146@01)))
    (= (Seq_index xs@144@01 (inv@232@01 r)) r))
  :pattern ((inv@232@01 r))
  :qid |f-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@234@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@232@01 r)) (< (inv@232@01 r) (Seq_length xs@144@01)))
      (img@233@01 r)
      (= r (Seq_index xs@144@01 (inv@232@01 r))))
    ($Perm.min
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        $Perm.Write
        $Perm.No)
      (ite (= (inv@232@01 r) i2@146@01) $Perm.Write $Perm.No))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@153@01 r)
          (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@234@01 r))
    $Perm.No)
  
  :qid |quant-u-199|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@234@01 r) $Perm.No)
  
  :qid |quant-u-200|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@232@01 r)) (< (inv@232@01 r) (Seq_length xs@144@01)))
      (img@233@01 r)
      (= r (Seq_index xs@144@01 (inv@232@01 r))))
    (=
      (-
        (ite (= (inv@232@01 r) i2@146@01) $Perm.Write $Perm.No)
        (pTaken@234@01 r))
      $Perm.No))
  
  :qid |quant-u-201|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@235@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@235@01  $FVF<f>)))
      (and
        (and (<= 0 (inv@232@01 r)) (< (inv@232@01 r) (Seq_length xs@144@01)))
        (= (inv@232@01 r) i2@146@01)
        (img@233@01 r)))
    (=>
      (and
        (and (<= 0 (inv@232@01 r)) (< (inv@232@01 r) (Seq_length xs@144@01)))
        (= (inv@232@01 r) i2@146@01)
        (img@233@01 r))
      (Set_in r ($FVF.domain_f (as sm@235@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@235@01  $FVF<f>))))
  :qid |qp.fvfDomDef140|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@232@01 r)) (< (inv@232@01 r) (Seq_length xs@144@01)))
        (= (inv@232@01 r) i2@146@01)
        (img@233@01 r))
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01)))))
    (=
      ($FVF.lookup_f (as sm@235@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@235@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef139|)))
(assert (fun02qp%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    $Snap.unit
    ($SortWrappers.$FVF<f>To$Snap (as sm@235@01  $FVF<f>)))) xs@144@01 i2@146@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@231@01 Int)) (!
  (=>
    (and
      (and (<= 0 j@231@01) (< j@231@01 (Seq_length xs@144@01)))
      (= j@231@01 i2@146@01))
    (and
      (= (inv@232@01 (Seq_index xs@144@01 j@231@01)) j@231@01)
      (img@233@01 (Seq_index xs@144@01 j@231@01))))
  :pattern ((Seq_index xs@144@01 j@231@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@233@01 r)
      (and
        (and (<= 0 (inv@232@01 r)) (< (inv@232@01 r) (Seq_length xs@144@01)))
        (= (inv@232@01 r) i2@146@01)))
    (= (Seq_index xs@144@01 (inv@232@01 r)) r))
  :pattern ((inv@232@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@235@01  $FVF<f>)))
      (and
        (and (<= 0 (inv@232@01 r)) (< (inv@232@01 r) (Seq_length xs@144@01)))
        (= (inv@232@01 r) i2@146@01)
        (img@233@01 r)))
    (=>
      (and
        (and (<= 0 (inv@232@01 r)) (< (inv@232@01 r) (Seq_length xs@144@01)))
        (= (inv@232@01 r) i2@146@01)
        (img@233@01 r))
      (Set_in r ($FVF.domain_f (as sm@235@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@235@01  $FVF<f>))))
  :qid |qp.fvfDomDef140|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and (<= 0 (inv@232@01 r)) (< (inv@232@01 r) (Seq_length xs@144@01)))
        (= (inv@232@01 r) i2@146@01)
        (img@233@01 r))
      (and
        (img@153@01 r)
        (and (<= 0 (inv@152@01 r)) (< (inv@152@01 r) (Seq_length xs@144@01)))))
    (=
      ($FVF.lookup_f (as sm@235@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@235@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@148@01)))))))) r))
  :qid |qp.fvfValDef139|)))
(assert (and
  (forall ((j@231@01 Int)) (!
    (=>
      (and (<= 0 j@231@01) (< j@231@01 (Seq_length xs@144@01)))
      (and
        (or (<= 0 j@231@01) (not (<= 0 j@231@01)))
        (or (not (= j@231@01 i2@146@01)) (= j@231@01 i2@146@01))))
    :pattern ((Seq_index xs@144@01 j@231@01))
    :qid |f-aux|))
  (fun02qp%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@235@01  $FVF<f>)))) xs@144@01 i2@146@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (=
  (fun02qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@228@01  $FVF<f>)))) xs@144@01 i2@146@01)
  (fun02qp ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@235@01  $FVF<f>)))) xs@144@01 i2@146@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,01s
; (get-info :all-statistics)
(pop) ; 2
(pop) ; 1
; ---------- test04 ----------
(declare-const xs@236@01 Seq<$Ref>)
(declare-const i1@237@01 Int)
(declare-const i2@238@01 Int)
(declare-const x@239@01 $Ref)
(declare-const xs@240@01 Seq<$Ref>)
(declare-const i1@241@01 Int)
(declare-const i2@242@01 Int)
(declare-const x@243@01 $Ref)
(push) ; 1
(declare-const $t@244@01 $Snap)
(assert (= $t@244@01 ($Snap.combine ($Snap.first $t@244@01) ($Snap.second $t@244@01))))
(assert (= ($Snap.first $t@244@01) $Snap.unit))
; [eval] 0 <= i1
(assert (<= 0 i1@241@01))
(assert (=
  ($Snap.second $t@244@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@244@01))
    ($Snap.second ($Snap.second $t@244@01)))))
(assert (= ($Snap.first ($Snap.second $t@244@01)) $Snap.unit))
; [eval] i1 < |xs|
; [eval] |xs|
(assert (< i1@241@01 (Seq_length xs@240@01)))
(assert (=
  ($Snap.second ($Snap.second $t@244@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@244@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@244@01))) $Snap.unit))
; [eval] 0 <= i2
(assert (<= 0 i2@242@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@244@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
  $Snap.unit))
; [eval] i2 < |xs|
; [eval] |xs|
(assert (< i2@242@01 (Seq_length xs@240@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))
  $Snap.unit))
; [eval] i1 != i2
(assert (not (= i1@241@01 i2@242@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))
  $Snap.unit))
; [eval] (forall j1: Int, j2: Int :: { (j1 in [0..|xs|)), (j2 in [0..|xs|)) } { (j1 in [0..|xs|)), xs[j2] } { (j2 in [0..|xs|)), xs[j1] } { xs[j1], xs[j2] } (j1 in [0..|xs|)) && ((j2 in [0..|xs|)) && j1 != j2) ==> xs[j1] != xs[j2])
(declare-const j1@245@01 Int)
(declare-const j2@246@01 Int)
(push) ; 2
; [eval] (j1 in [0..|xs|)) && ((j2 in [0..|xs|)) && j1 != j2) ==> xs[j1] != xs[j2]
; [eval] (j1 in [0..|xs|)) && ((j2 in [0..|xs|)) && j1 != j2)
; [eval] (j1 in [0..|xs|))
; [eval] [0..|xs|)
; [eval] |xs|
(push) ; 3
; [then-branch: 66 | !(j1@245@01 in [0..|xs@240@01|]) | live]
; [else-branch: 66 | j1@245@01 in [0..|xs@240@01|] | live]
(push) ; 4
; [then-branch: 66 | !(j1@245@01 in [0..|xs@240@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 66 | j1@245@01 in [0..|xs@240@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01))
; [eval] (j2 in [0..|xs|))
; [eval] [0..|xs|)
; [eval] |xs|
(push) ; 5
; [then-branch: 67 | !(j2@246@01 in [0..|xs@240@01|]) | live]
; [else-branch: 67 | j2@246@01 in [0..|xs@240@01|] | live]
(push) ; 6
; [then-branch: 67 | !(j2@246@01 in [0..|xs@240@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 67 | j2@246@01 in [0..|xs@240@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01))
; [eval] j1 != j2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
  (not (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01))))))
(assert (or
  (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
  (not (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01))))
(push) ; 3
; [then-branch: 68 | j1@245@01 in [0..|xs@240@01|] && j2@246@01 in [0..|xs@240@01|] && j1@245@01 != j2@246@01 | live]
; [else-branch: 68 | !(j1@245@01 in [0..|xs@240@01|] && j2@246@01 in [0..|xs@240@01|] && j1@245@01 != j2@246@01) | live]
(push) ; 4
; [then-branch: 68 | j1@245@01 in [0..|xs@240@01|] && j2@246@01 in [0..|xs@240@01|] && j1@245@01 != j2@246@01]
(assert (and
  (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
    (not (= j1@245@01 j2@246@01)))))
; [eval] xs[j1] != xs[j2]
; [eval] xs[j1]
(push) ; 5
(assert (not (>= j1@245@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< j1@245@01 (Seq_length xs@240@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] xs[j2]
(push) ; 5
(assert (not (>= j2@246@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< j2@246@01 (Seq_length xs@240@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 68 | !(j1@245@01 in [0..|xs@240@01|] && j2@246@01 in [0..|xs@240@01|] && j1@245@01 != j2@246@01)]
(assert (not
  (and
    (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
    (and
      (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
      (not (= j1@245@01 j2@246@01))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
    (and
      (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
      (not (= j1@245@01 j2@246@01))))
  (and
    (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
    (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
    (not (= j1@245@01 j2@246@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
        (not (= j1@245@01 j2@246@01)))))
  (and
    (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
    (and
      (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
      (not (= j1@245@01 j2@246@01))))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j1@245@01 Int) (j2@246@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
          (not (= j1@245@01 j2@246@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
        (not (= j1@245@01 j2@246@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
            (not (= j1@245@01 j2@246@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
          (not (= j1@245@01 j2@246@01))))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01) (Seq_contains
    (Seq_range 0 (Seq_length xs@240@01))
    j2@246@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@240@01)) j1@245@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length xs@240@01))
    j2@246@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@95@12@95@106-aux|)))
(assert (forall ((j1@245@01 Int) (j2@246@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
          (not (= j1@245@01 j2@246@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
        (not (= j1@245@01 j2@246@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
            (not (= j1@245@01 j2@246@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
          (not (= j1@245@01 j2@246@01))))))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@240@01)) j1@245@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length xs@240@01))
    j2@246@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@95@12@95@106-aux|)))
(assert (forall ((j1@245@01 Int) (j2@246@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
          (not (= j1@245@01 j2@246@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
        (not (= j1@245@01 j2@246@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
            (not (= j1@245@01 j2@246@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
          (not (= j1@245@01 j2@246@01))))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01) (Seq_index
    xs@240@01
    j2@246@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@240@01)) j1@245@01) (Seq_index
    xs@240@01
    j2@246@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@95@12@95@106-aux|)))
(assert (forall ((j1@245@01 Int) (j2@246@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
          (not (= j1@245@01 j2@246@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
        (not (= j1@245@01 j2@246@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
            (not (= j1@245@01 j2@246@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
          (not (= j1@245@01 j2@246@01))))))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@240@01)) j1@245@01) (Seq_index
    xs@240@01
    j2@246@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@95@12@95@106-aux|)))
(assert (forall ((j1@245@01 Int) (j2@246@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
          (not (= j1@245@01 j2@246@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
        (not (= j1@245@01 j2@246@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
            (not (= j1@245@01 j2@246@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
          (not (= j1@245@01 j2@246@01))))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01) (Seq_index
    xs@240@01
    j1@245@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@240@01)) j2@246@01) (Seq_index
    xs@240@01
    j1@245@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@95@12@95@106-aux|)))
(assert (forall ((j1@245@01 Int) (j2@246@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
          (not (= j1@245@01 j2@246@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
        (not (= j1@245@01 j2@246@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
            (not (= j1@245@01 j2@246@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
          (not (= j1@245@01 j2@246@01))))))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@240@01)) j2@246@01) (Seq_index
    xs@240@01
    j1@245@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@95@12@95@106-aux|)))
(assert (forall ((j1@245@01 Int) (j2@246@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
          (not (= j1@245@01 j2@246@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
        (not (= j1@245@01 j2@246@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
            (not (= j1@245@01 j2@246@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
          (not (= j1@245@01 j2@246@01))))))
  :pattern ((Seq_index xs@240@01 j1@245@01) (Seq_index xs@240@01 j2@246@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@95@12@95@106-aux|)))
(assert (forall ((j1@245@01 Int) (j2@246@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01)
        (not (= j1@245@01 j2@246@01))))
    (not (= (Seq_index xs@240@01 j1@245@01) (Seq_index xs@240@01 j2@246@01))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01) (Seq_contains
    (Seq_range 0 (Seq_length xs@240@01))
    j2@246@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@240@01)) j1@245@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length xs@240@01))
    j2@246@01))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j1@245@01) (Seq_index
    xs@240@01
    j2@246@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@240@01)) j1@245@01) (Seq_index
    xs@240@01
    j2@246@01))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length xs@240@01)) j2@246@01) (Seq_index
    xs@240@01
    j1@245@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@240@01)) j2@246@01) (Seq_index
    xs@240@01
    j1@245@01))
  :pattern ((Seq_index xs@240@01 j1@245@01) (Seq_index xs@240@01 j2@246@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@95@12@95@106|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))
(declare-const j@247@01 Int)
(push) ; 2
; [eval] 0 <= j && j < |xs|
; [eval] 0 <= j
(push) ; 3
; [then-branch: 69 | !(0 <= j@247@01) | live]
; [else-branch: 69 | 0 <= j@247@01 | live]
(push) ; 4
; [then-branch: 69 | !(0 <= j@247@01)]
(assert (not (<= 0 j@247@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 69 | 0 <= j@247@01]
(assert (<= 0 j@247@01))
; [eval] j < |xs|
; [eval] |xs|
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@247@01) (not (<= 0 j@247@01))))
(assert (and (<= 0 j@247@01) (< j@247@01 (Seq_length xs@240@01))))
; [eval] xs[j]
(push) ; 3
(assert (not (>= j@247@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(pop) ; 2
(declare-fun inv@248@01 ($Ref) Int)
(declare-fun img@249@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@247@01 Int)) (!
  (=>
    (and (<= 0 j@247@01) (< j@247@01 (Seq_length xs@240@01)))
    (or (<= 0 j@247@01) (not (<= 0 j@247@01))))
  :pattern ((Seq_index xs@240@01 j@247@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((j1@247@01 Int) (j2@247@01 Int)) (!
  (=>
    (and
      (and (<= 0 j1@247@01) (< j1@247@01 (Seq_length xs@240@01)))
      (and (<= 0 j2@247@01) (< j2@247@01 (Seq_length xs@240@01)))
      (= (Seq_index xs@240@01 j1@247@01) (Seq_index xs@240@01 j2@247@01)))
    (= j1@247@01 j2@247@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@247@01 Int)) (!
  (=>
    (and (<= 0 j@247@01) (< j@247@01 (Seq_length xs@240@01)))
    (and
      (= (inv@248@01 (Seq_index xs@240@01 j@247@01)) j@247@01)
      (img@249@01 (Seq_index xs@240@01 j@247@01))))
  :pattern ((Seq_index xs@240@01 j@247@01))
  :qid |quant-u-203|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@249@01 r)
      (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
    (= (Seq_index xs@240@01 (inv@248@01 r)) r))
  :pattern ((inv@248@01 r))
  :qid |f-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((j@247@01 Int)) (!
  (=>
    (and (<= 0 j@247@01) (< j@247@01 (Seq_length xs@240@01)))
    (not (= (Seq_index xs@240@01 j@247@01) $Ref.null)))
  :pattern ((Seq_index xs@240@01 j@247@01))
  :qid |f-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
(assert (not (= x@243@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
  $Snap.unit))
; [eval] x.elems == xs
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
  xs@240@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; xs[i1].f := 0
; [eval] xs[i1]
(push) ; 3
(assert (not (>= i1@241@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@250@01 ((r $Ref)) $Perm
  (ite
    (= r (Seq_index xs@240@01 i1@241@01))
    ($Perm.min
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@250@01 r))
    $Perm.No)
  
  :qid |quant-u-205|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@250@01 r) $Perm.No)
  
  :qid |quant-u-206|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (= (- $Perm.Write (pTaken@250@01 r)) $Perm.No))
  
  :qid |quant-u-207|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@251@01 $FVF<f>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01)) 0))
; [exec]
; assert fun03qp(x, i2) == old(fun03qp(x, i2))
; [eval] fun03qp(x, i2) == old(fun03qp(x, i2))
; [eval] fun03qp(x, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |x.elems|
; [eval] |x.elems|
(push) ; 4
(assert (not (<
  i2@242@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (<
  i2@242@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
(declare-const j@252@01 Int)
(push) ; 4
; [eval] 0 <= j && (j < |x.elems| && j == i)
; [eval] 0 <= j
(push) ; 5
; [then-branch: 70 | !(0 <= j@252@01) | live]
; [else-branch: 70 | 0 <= j@252@01 | live]
(push) ; 6
; [then-branch: 70 | !(0 <= j@252@01)]
(assert (not (<= 0 j@252@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 70 | 0 <= j@252@01]
(assert (<= 0 j@252@01))
; [eval] j < |x.elems|
; [eval] |x.elems|
(push) ; 7
; [then-branch: 71 | !(j@252@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|) | live]
; [else-branch: 71 | j@252@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))| | live]
(push) ; 8
; [then-branch: 71 | !(j@252@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|)]
(assert (not
  (<
    j@252@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
(pop) ; 8
(push) ; 8
; [else-branch: 71 | j@252@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|]
(assert (<
  j@252@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
; [eval] j == i
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    j@252@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
  (not
    (<
      j@252@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 j@252@01)
  (and
    (<= 0 j@252@01)
    (or
      (<
        j@252@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
      (not
        (<
          j@252@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
(assert (or (<= 0 j@252@01) (not (<= 0 j@252@01))))
(assert (and
  (<= 0 j@252@01)
  (and
    (<
      j@252@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
    (= j@252@01 i2@242@01))))
; [eval] x.elems[j]
(push) ; 5
(assert (not (>= j@252@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@253@01 ($Ref) Int)
(declare-fun img@254@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@252@01 Int)) (!
  (=>
    (and
      (<= 0 j@252@01)
      (and
        (<
          j@252@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@252@01 i2@242@01)))
    (and
      (=>
        (<= 0 j@252@01)
        (and
          (<= 0 j@252@01)
          (or
            (<
              j@252@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (not
              (<
                j@252@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))
      (or (<= 0 j@252@01) (not (<= 0 j@252@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@252@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@252@01 Int) (j2@252@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j1@252@01)
        (and
          (<
            j1@252@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j1@252@01 i2@242@01)))
      (and
        (<= 0 j2@252@01)
        (and
          (<
            j2@252@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j2@252@01 i2@242@01)))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j1@252@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j2@252@01)))
    (= j1@252@01 j2@252@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@252@01 Int)) (!
  (=>
    (and
      (<= 0 j@252@01)
      (and
        (<
          j@252@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@252@01 i2@242@01)))
    (and
      (=
        (inv@253@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j@252@01))
        j@252@01)
      (img@254@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        j@252@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@252@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@254@01 r)
      (and
        (<= 0 (inv@253@01 r))
        (and
          (<
            (inv@253@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@253@01 r) i2@242@01))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        (inv@253@01 r))
      r))
  :pattern ((inv@253@01 r))
  :qid |f-fctOfInv|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((j@252@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
      j@252@01)
    (Seq_index xs@240@01 j@252@01))
  
  :qid |quant-u-209|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@255@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@253@01 r))
        (and
          (<
            (inv@253@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@253@01 r) i2@242@01)))
      (img@254@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@253@01 r))))
    ($Perm.min
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        (- $Perm.Write (pTaken@250@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@256@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@253@01 r))
        (and
          (<
            (inv@253@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@253@01 r) i2@242@01)))
      (img@254@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@253@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@255@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        (- $Perm.Write (pTaken@250@01 r))
        $Perm.No)
      (pTaken@255@01 r))
    $Perm.No)
  
  :qid |quant-u-211|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@255@01 r) $Perm.No)
  
  :qid |quant-u-212|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@253@01 r))
        (and
          (<
            (inv@253@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@253@01 r) i2@242@01)))
      (img@254@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@253@01 r))))
    (= (- $Perm.Write (pTaken@255@01 r)) $Perm.No))
  
  :qid |quant-u-213|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@257@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@257@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@253@01 r))
          (and
            (<
              (inv@253@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@253@01 r) i2@242@01)))
        (img@254@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@253@01 r))
          (and
            (<
              (inv@253@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@253@01 r) i2@242@01)))
        (img@254@01 r))
      (Set_in r ($FVF.domain_f (as sm@257@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@257@01  $FVF<f>))))
  :qid |qp.fvfDomDef143|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@253@01 r))
          (and
            (<
              (inv@253@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@253@01 r) i2@242@01)))
        (img@254@01 r))
      (= r (Seq_index xs@240@01 i1@241@01)))
    (=
      ($FVF.lookup_f (as sm@257@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@257@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef141|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@253@01 r))
          (and
            (<
              (inv@253@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@253@01 r) i2@242@01)))
        (img@254@01 r))
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        (< $Perm.No (- $Perm.Write (pTaken@250@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@257@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@257@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef142|)))
(assert (fun03qp%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@257@01  $FVF<f>))))) x@243@01 i2@242@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@252@01 Int)) (!
  (=>
    (and
      (<= 0 j@252@01)
      (and
        (<
          j@252@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@252@01 i2@242@01)))
    (and
      (=
        (inv@253@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j@252@01))
        j@252@01)
      (img@254@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        j@252@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@252@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@254@01 r)
      (and
        (<= 0 (inv@253@01 r))
        (and
          (<
            (inv@253@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@253@01 r) i2@242@01))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        (inv@253@01 r))
      r))
  :pattern ((inv@253@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@257@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@253@01 r))
          (and
            (<
              (inv@253@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@253@01 r) i2@242@01)))
        (img@254@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@253@01 r))
          (and
            (<
              (inv@253@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@253@01 r) i2@242@01)))
        (img@254@01 r))
      (Set_in r ($FVF.domain_f (as sm@257@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@257@01  $FVF<f>))))
  :qid |qp.fvfDomDef143|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@253@01 r))
          (and
            (<
              (inv@253@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@253@01 r) i2@242@01)))
        (img@254@01 r))
      (= r (Seq_index xs@240@01 i1@241@01)))
    (=
      ($FVF.lookup_f (as sm@257@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@257@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef141|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@253@01 r))
          (and
            (<
              (inv@253@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@253@01 r) i2@242@01)))
        (img@254@01 r))
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        (< $Perm.No (- $Perm.Write (pTaken@250@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@257@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@257@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef142|)))
(assert (and
  (<
    i2@242@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
  (forall ((j@252@01 Int)) (!
    (=>
      (and
        (<= 0 j@252@01)
        (and
          (<
            j@252@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j@252@01 i2@242@01)))
      (and
        (=>
          (<= 0 j@252@01)
          (and
            (<= 0 j@252@01)
            (or
              (<
                j@252@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
              (not
                (<
                  j@252@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))
        (or (<= 0 j@252@01) (not (<= 0 j@252@01)))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
      j@252@01))
    :qid |f-aux|))
  (fun03qp%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@257@01  $FVF<f>))))) x@243@01 i2@242@01)))
; [eval] old(fun03qp(x, i2))
; [eval] fun03qp(x, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |x.elems|
; [eval] |x.elems|
(declare-const j@258@01 Int)
(push) ; 4
; [eval] 0 <= j && (j < |x.elems| && j == i)
; [eval] 0 <= j
(push) ; 5
; [then-branch: 72 | !(0 <= j@258@01) | live]
; [else-branch: 72 | 0 <= j@258@01 | live]
(push) ; 6
; [then-branch: 72 | !(0 <= j@258@01)]
(assert (not (<= 0 j@258@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 72 | 0 <= j@258@01]
(assert (<= 0 j@258@01))
; [eval] j < |x.elems|
; [eval] |x.elems|
(push) ; 7
; [then-branch: 73 | !(j@258@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|) | live]
; [else-branch: 73 | j@258@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))| | live]
(push) ; 8
; [then-branch: 73 | !(j@258@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|)]
(assert (not
  (<
    j@258@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
(pop) ; 8
(push) ; 8
; [else-branch: 73 | j@258@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|]
(assert (<
  j@258@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
; [eval] j == i
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    j@258@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
  (not
    (<
      j@258@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 j@258@01)
  (and
    (<= 0 j@258@01)
    (or
      (<
        j@258@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
      (not
        (<
          j@258@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
(assert (or (<= 0 j@258@01) (not (<= 0 j@258@01))))
(assert (and
  (<= 0 j@258@01)
  (and
    (<
      j@258@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
    (= j@258@01 i2@242@01))))
; [eval] x.elems[j]
(push) ; 5
(assert (not (>= j@258@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@259@01 ($Ref) Int)
(declare-fun img@260@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@258@01 Int)) (!
  (=>
    (and
      (<= 0 j@258@01)
      (and
        (<
          j@258@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@258@01 i2@242@01)))
    (and
      (=>
        (<= 0 j@258@01)
        (and
          (<= 0 j@258@01)
          (or
            (<
              j@258@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (not
              (<
                j@258@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))
      (or (<= 0 j@258@01) (not (<= 0 j@258@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@258@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@258@01 Int) (j2@258@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j1@258@01)
        (and
          (<
            j1@258@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j1@258@01 i2@242@01)))
      (and
        (<= 0 j2@258@01)
        (and
          (<
            j2@258@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j2@258@01 i2@242@01)))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j1@258@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j2@258@01)))
    (= j1@258@01 j2@258@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@258@01 Int)) (!
  (=>
    (and
      (<= 0 j@258@01)
      (and
        (<
          j@258@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@258@01 i2@242@01)))
    (and
      (=
        (inv@259@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j@258@01))
        j@258@01)
      (img@260@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        j@258@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@258@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@260@01 r)
      (and
        (<= 0 (inv@259@01 r))
        (and
          (<
            (inv@259@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@259@01 r) i2@242@01))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        (inv@259@01 r))
      r))
  :pattern ((inv@259@01 r))
  :qid |f-fctOfInv|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((j@258@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
      j@258@01)
    (Seq_index xs@240@01 j@258@01))
  
  :qid |quant-u-215|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@261@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@259@01 r))
        (and
          (<
            (inv@259@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@259@01 r) i2@242@01)))
      (img@260@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@259@01 r))))
    ($Perm.min
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@261@01 r))
    $Perm.No)
  
  :qid |quant-u-217|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@261@01 r) $Perm.No)
  
  :qid |quant-u-218|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@259@01 r))
        (and
          (<
            (inv@259@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@259@01 r) i2@242@01)))
      (img@260@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@259@01 r))))
    (= (- $Perm.Write (pTaken@261@01 r)) $Perm.No))
  
  :qid |quant-u-219|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@262@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@262@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@259@01 r))
          (and
            (<
              (inv@259@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@259@01 r) i2@242@01)))
        (img@260@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@259@01 r))
          (and
            (<
              (inv@259@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@259@01 r) i2@242@01)))
        (img@260@01 r))
      (Set_in r ($FVF.domain_f (as sm@262@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@262@01  $FVF<f>))))
  :qid |qp.fvfDomDef145|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@259@01 r))
          (and
            (<
              (inv@259@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@259@01 r) i2@242@01)))
        (img@260@01 r))
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01)))))
    (=
      ($FVF.lookup_f (as sm@262@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@262@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef144|)))
(assert (fun03qp%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@262@01  $FVF<f>))))) x@243@01 i2@242@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@258@01 Int)) (!
  (=>
    (and
      (<= 0 j@258@01)
      (and
        (<
          j@258@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@258@01 i2@242@01)))
    (and
      (=
        (inv@259@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j@258@01))
        j@258@01)
      (img@260@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        j@258@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@258@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@260@01 r)
      (and
        (<= 0 (inv@259@01 r))
        (and
          (<
            (inv@259@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@259@01 r) i2@242@01))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        (inv@259@01 r))
      r))
  :pattern ((inv@259@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@262@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@259@01 r))
          (and
            (<
              (inv@259@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@259@01 r) i2@242@01)))
        (img@260@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@259@01 r))
          (and
            (<
              (inv@259@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@259@01 r) i2@242@01)))
        (img@260@01 r))
      (Set_in r ($FVF.domain_f (as sm@262@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@262@01  $FVF<f>))))
  :qid |qp.fvfDomDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@259@01 r))
          (and
            (<
              (inv@259@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@259@01 r) i2@242@01)))
        (img@260@01 r))
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01)))))
    (=
      ($FVF.lookup_f (as sm@262@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@262@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef144|)))
(assert (and
  (forall ((j@258@01 Int)) (!
    (=>
      (and
        (<= 0 j@258@01)
        (and
          (<
            j@258@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j@258@01 i2@242@01)))
      (and
        (=>
          (<= 0 j@258@01)
          (and
            (<= 0 j@258@01)
            (or
              (<
                j@258@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
              (not
                (<
                  j@258@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))
        (or (<= 0 j@258@01) (not (<= 0 j@258@01)))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
      j@258@01))
    :qid |f-aux|))
  (fun03qp%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@262@01  $FVF<f>))))) x@243@01 i2@242@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (=
  (fun03qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@257@01  $FVF<f>))))) x@243@01 i2@242@01)
  (fun03qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@262@01  $FVF<f>))))) x@243@01 i2@242@01))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (=
  (fun03qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@257@01  $FVF<f>))))) x@243@01 i2@242@01)
  (fun03qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@262@01  $FVF<f>))))) x@243@01 i2@242@01)))
; [exec]
; xs[i2].f := 0
; [eval] xs[i2]
(push) ; 3
(assert (not (>= i2@242@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@263@01 ((r $Ref)) $Perm
  (ite
    (= r (Seq_index xs@240@01 i2@242@01))
    ($Perm.min
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        (- $Perm.Write (pTaken@250@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@264@01 ((r $Ref)) $Perm
  (ite
    (= r (Seq_index xs@240@01 i2@242@01))
    ($Perm.min
      (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@263@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        (- $Perm.Write (pTaken@250@01 r))
        $Perm.No)
      (pTaken@263@01 r))
    $Perm.No)
  
  :qid |quant-u-221|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@263@01 r) $Perm.No)
  
  :qid |quant-u-222|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (= (- $Perm.Write (pTaken@263@01 r)) $Perm.No))
  
  :qid |quant-u-223|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@265@01 $FVF<f>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01)) 0))
; [exec]
; assert fun03qp(x, i2) == old(fun03qp(x, i2))
; [eval] fun03qp(x, i2) == old(fun03qp(x, i2))
; [eval] fun03qp(x, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |x.elems|
; [eval] |x.elems|
(declare-const j@266@01 Int)
(push) ; 4
; [eval] 0 <= j && (j < |x.elems| && j == i)
; [eval] 0 <= j
(push) ; 5
; [then-branch: 74 | !(0 <= j@266@01) | live]
; [else-branch: 74 | 0 <= j@266@01 | live]
(push) ; 6
; [then-branch: 74 | !(0 <= j@266@01)]
(assert (not (<= 0 j@266@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 74 | 0 <= j@266@01]
(assert (<= 0 j@266@01))
; [eval] j < |x.elems|
; [eval] |x.elems|
(push) ; 7
; [then-branch: 75 | !(j@266@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|) | live]
; [else-branch: 75 | j@266@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))| | live]
(push) ; 8
; [then-branch: 75 | !(j@266@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|)]
(assert (not
  (<
    j@266@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
(pop) ; 8
(push) ; 8
; [else-branch: 75 | j@266@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|]
(assert (<
  j@266@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
; [eval] j == i
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    j@266@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
  (not
    (<
      j@266@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 j@266@01)
  (and
    (<= 0 j@266@01)
    (or
      (<
        j@266@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
      (not
        (<
          j@266@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
(assert (or (<= 0 j@266@01) (not (<= 0 j@266@01))))
(assert (and
  (<= 0 j@266@01)
  (and
    (<
      j@266@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
    (= j@266@01 i2@242@01))))
; [eval] x.elems[j]
(push) ; 5
(assert (not (>= j@266@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@267@01 ($Ref) Int)
(declare-fun img@268@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@266@01 Int)) (!
  (=>
    (and
      (<= 0 j@266@01)
      (and
        (<
          j@266@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@266@01 i2@242@01)))
    (and
      (=>
        (<= 0 j@266@01)
        (and
          (<= 0 j@266@01)
          (or
            (<
              j@266@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (not
              (<
                j@266@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))
      (or (<= 0 j@266@01) (not (<= 0 j@266@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@266@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@266@01 Int) (j2@266@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j1@266@01)
        (and
          (<
            j1@266@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j1@266@01 i2@242@01)))
      (and
        (<= 0 j2@266@01)
        (and
          (<
            j2@266@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j2@266@01 i2@242@01)))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j1@266@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j2@266@01)))
    (= j1@266@01 j2@266@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@266@01 Int)) (!
  (=>
    (and
      (<= 0 j@266@01)
      (and
        (<
          j@266@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@266@01 i2@242@01)))
    (and
      (=
        (inv@267@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j@266@01))
        j@266@01)
      (img@268@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        j@266@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@266@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@268@01 r)
      (and
        (<= 0 (inv@267@01 r))
        (and
          (<
            (inv@267@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@267@01 r) i2@242@01))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        (inv@267@01 r))
      r))
  :pattern ((inv@267@01 r))
  :qid |f-fctOfInv|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((j@266@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
      j@266@01)
    (Seq_index xs@240@01 j@266@01))
  
  :qid |quant-u-225|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@269@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@267@01 r))
        (and
          (<
            (inv@267@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@267@01 r) i2@242@01)))
      (img@268@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@267@01 r))))
    ($Perm.min
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@270@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@267@01 r))
        (and
          (<
            (inv@267@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@267@01 r) i2@242@01)))
      (img@268@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@267@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@269@01 r)))
    $Perm.No))
(define-fun pTaken@271@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@267@01 r))
        (and
          (<
            (inv@267@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@267@01 r) i2@242@01)))
      (img@268@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@267@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@269@01 r)) (pTaken@270@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
        $Perm.No)
      (pTaken@269@01 r))
    $Perm.No)
  
  :qid |quant-u-227|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@269@01 r) $Perm.No)
  
  :qid |quant-u-228|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@267@01 r))
        (and
          (<
            (inv@267@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@267@01 r) i2@242@01)))
      (img@268@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@267@01 r))))
    (= (- $Perm.Write (pTaken@269@01 r)) $Perm.No))
  
  :qid |quant-u-229|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)
    (pTaken@270@01 (Seq_index xs@240@01 i2@242@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@267@01 r))
        (and
          (<
            (inv@267@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@267@01 r) i2@242@01)))
      (img@268@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@267@01 r))))
    (= (- (- $Perm.Write (pTaken@269@01 r)) (pTaken@270@01 r)) $Perm.No))
  
  :qid |quant-u-231|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@272@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@272@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@267@01 r))
          (and
            (<
              (inv@267@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@267@01 r) i2@242@01)))
        (img@268@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@267@01 r))
          (and
            (<
              (inv@267@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@267@01 r) i2@242@01)))
        (img@268@01 r))
      (Set_in r ($FVF.domain_f (as sm@272@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@272@01  $FVF<f>))))
  :qid |qp.fvfDomDef149|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@267@01 r))
          (and
            (<
              (inv@267@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@267@01 r) i2@242@01)))
        (img@268@01 r))
      (= r (Seq_index xs@240@01 i2@242@01)))
    (=
      ($FVF.lookup_f (as sm@272@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@272@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@267@01 r))
          (and
            (<
              (inv@267@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@267@01 r) i2@242@01)))
        (img@268@01 r))
      (= r (Seq_index xs@240@01 i1@241@01)))
    (=
      ($FVF.lookup_f (as sm@272@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@272@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef147|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@267@01 r))
          (and
            (<
              (inv@267@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@267@01 r) i2@242@01)))
        (img@268@01 r))
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@272@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@272@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef148|)))
(assert (fun03qp%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@272@01  $FVF<f>))))) x@243@01 i2@242@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@266@01 Int)) (!
  (=>
    (and
      (<= 0 j@266@01)
      (and
        (<
          j@266@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@266@01 i2@242@01)))
    (and
      (=
        (inv@267@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j@266@01))
        j@266@01)
      (img@268@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        j@266@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@266@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@268@01 r)
      (and
        (<= 0 (inv@267@01 r))
        (and
          (<
            (inv@267@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@267@01 r) i2@242@01))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        (inv@267@01 r))
      r))
  :pattern ((inv@267@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@272@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@267@01 r))
          (and
            (<
              (inv@267@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@267@01 r) i2@242@01)))
        (img@268@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@267@01 r))
          (and
            (<
              (inv@267@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@267@01 r) i2@242@01)))
        (img@268@01 r))
      (Set_in r ($FVF.domain_f (as sm@272@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@272@01  $FVF<f>))))
  :qid |qp.fvfDomDef149|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@267@01 r))
          (and
            (<
              (inv@267@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@267@01 r) i2@242@01)))
        (img@268@01 r))
      (= r (Seq_index xs@240@01 i2@242@01)))
    (=
      ($FVF.lookup_f (as sm@272@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@272@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@267@01 r))
          (and
            (<
              (inv@267@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@267@01 r) i2@242@01)))
        (img@268@01 r))
      (= r (Seq_index xs@240@01 i1@241@01)))
    (=
      ($FVF.lookup_f (as sm@272@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@272@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef147|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@267@01 r))
          (and
            (<
              (inv@267@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@267@01 r) i2@242@01)))
        (img@268@01 r))
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@272@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@272@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef148|)))
(assert (and
  (forall ((j@266@01 Int)) (!
    (=>
      (and
        (<= 0 j@266@01)
        (and
          (<
            j@266@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j@266@01 i2@242@01)))
      (and
        (=>
          (<= 0 j@266@01)
          (and
            (<= 0 j@266@01)
            (or
              (<
                j@266@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
              (not
                (<
                  j@266@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))
        (or (<= 0 j@266@01) (not (<= 0 j@266@01)))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
      j@266@01))
    :qid |f-aux|))
  (fun03qp%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@272@01  $FVF<f>))))) x@243@01 i2@242@01)))
; [eval] old(fun03qp(x, i2))
; [eval] fun03qp(x, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |x.elems|
; [eval] |x.elems|
(declare-const j@273@01 Int)
(push) ; 4
; [eval] 0 <= j && (j < |x.elems| && j == i)
; [eval] 0 <= j
(push) ; 5
; [then-branch: 76 | !(0 <= j@273@01) | live]
; [else-branch: 76 | 0 <= j@273@01 | live]
(push) ; 6
; [then-branch: 76 | !(0 <= j@273@01)]
(assert (not (<= 0 j@273@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 76 | 0 <= j@273@01]
(assert (<= 0 j@273@01))
; [eval] j < |x.elems|
; [eval] |x.elems|
(push) ; 7
; [then-branch: 77 | !(j@273@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|) | live]
; [else-branch: 77 | j@273@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))| | live]
(push) ; 8
; [then-branch: 77 | !(j@273@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|)]
(assert (not
  (<
    j@273@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
(pop) ; 8
(push) ; 8
; [else-branch: 77 | j@273@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|]
(assert (<
  j@273@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
; [eval] j == i
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    j@273@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
  (not
    (<
      j@273@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 j@273@01)
  (and
    (<= 0 j@273@01)
    (or
      (<
        j@273@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
      (not
        (<
          j@273@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
(assert (or (<= 0 j@273@01) (not (<= 0 j@273@01))))
(assert (and
  (<= 0 j@273@01)
  (and
    (<
      j@273@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
    (= j@273@01 i2@242@01))))
; [eval] x.elems[j]
(push) ; 5
(assert (not (>= j@273@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@274@01 ($Ref) Int)
(declare-fun img@275@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@273@01 Int)) (!
  (=>
    (and
      (<= 0 j@273@01)
      (and
        (<
          j@273@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@273@01 i2@242@01)))
    (and
      (=>
        (<= 0 j@273@01)
        (and
          (<= 0 j@273@01)
          (or
            (<
              j@273@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (not
              (<
                j@273@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))
      (or (<= 0 j@273@01) (not (<= 0 j@273@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@273@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@273@01 Int) (j2@273@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j1@273@01)
        (and
          (<
            j1@273@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j1@273@01 i2@242@01)))
      (and
        (<= 0 j2@273@01)
        (and
          (<
            j2@273@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j2@273@01 i2@242@01)))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j1@273@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j2@273@01)))
    (= j1@273@01 j2@273@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@273@01 Int)) (!
  (=>
    (and
      (<= 0 j@273@01)
      (and
        (<
          j@273@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@273@01 i2@242@01)))
    (and
      (=
        (inv@274@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j@273@01))
        j@273@01)
      (img@275@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        j@273@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@273@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@275@01 r)
      (and
        (<= 0 (inv@274@01 r))
        (and
          (<
            (inv@274@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@274@01 r) i2@242@01))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        (inv@274@01 r))
      r))
  :pattern ((inv@274@01 r))
  :qid |f-fctOfInv|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((j@273@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
      j@273@01)
    (Seq_index xs@240@01 j@273@01))
  
  :qid |quant-u-233|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@276@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@274@01 r))
        (and
          (<
            (inv@274@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@274@01 r) i2@242@01)))
      (img@275@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@274@01 r))))
    ($Perm.min
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@276@01 r))
    $Perm.No)
  
  :qid |quant-u-235|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@276@01 r) $Perm.No)
  
  :qid |quant-u-236|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@274@01 r))
        (and
          (<
            (inv@274@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@274@01 r) i2@242@01)))
      (img@275@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@274@01 r))))
    (= (- $Perm.Write (pTaken@276@01 r)) $Perm.No))
  
  :qid |quant-u-237|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@277@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@277@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@274@01 r))
          (and
            (<
              (inv@274@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@274@01 r) i2@242@01)))
        (img@275@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@274@01 r))
          (and
            (<
              (inv@274@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@274@01 r) i2@242@01)))
        (img@275@01 r))
      (Set_in r ($FVF.domain_f (as sm@277@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@277@01  $FVF<f>))))
  :qid |qp.fvfDomDef151|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@274@01 r))
          (and
            (<
              (inv@274@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@274@01 r) i2@242@01)))
        (img@275@01 r))
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01)))))
    (=
      ($FVF.lookup_f (as sm@277@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@277@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef150|)))
(assert (fun03qp%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@277@01  $FVF<f>))))) x@243@01 i2@242@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@273@01 Int)) (!
  (=>
    (and
      (<= 0 j@273@01)
      (and
        (<
          j@273@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@273@01 i2@242@01)))
    (and
      (=
        (inv@274@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j@273@01))
        j@273@01)
      (img@275@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        j@273@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@273@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@275@01 r)
      (and
        (<= 0 (inv@274@01 r))
        (and
          (<
            (inv@274@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@274@01 r) i2@242@01))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        (inv@274@01 r))
      r))
  :pattern ((inv@274@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@277@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@274@01 r))
          (and
            (<
              (inv@274@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@274@01 r) i2@242@01)))
        (img@275@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@274@01 r))
          (and
            (<
              (inv@274@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@274@01 r) i2@242@01)))
        (img@275@01 r))
      (Set_in r ($FVF.domain_f (as sm@277@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@277@01  $FVF<f>))))
  :qid |qp.fvfDomDef151|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@274@01 r))
          (and
            (<
              (inv@274@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@274@01 r) i2@242@01)))
        (img@275@01 r))
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01)))))
    (=
      ($FVF.lookup_f (as sm@277@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@277@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef150|)))
(assert (and
  (forall ((j@273@01 Int)) (!
    (=>
      (and
        (<= 0 j@273@01)
        (and
          (<
            j@273@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j@273@01 i2@242@01)))
      (and
        (=>
          (<= 0 j@273@01)
          (and
            (<= 0 j@273@01)
            (or
              (<
                j@273@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
              (not
                (<
                  j@273@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))
        (or (<= 0 j@273@01) (not (<= 0 j@273@01)))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
      j@273@01))
    :qid |f-aux|))
  (fun03qp%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@277@01  $FVF<f>))))) x@243@01 i2@242@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (=
  (fun03qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@272@01  $FVF<f>))))) x@243@01 i2@242@01)
  (fun03qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@277@01  $FVF<f>))))) x@243@01 i2@242@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01))
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01))
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
  (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))))
(declare-const sm@278@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@278@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@278@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef152|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@278@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@278@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@278@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@278@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef154|)))
(declare-const pm@279@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@279@01  $FPM) r)
    (+
      (+
        (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@279@01  $FPM) r))
  :qid |qp.resPrmSumDef155|)))
(assert (<=
  ($FVF.perm_f (as pm@279@01  $FPM) (Seq_index xs@240@01 i2@242@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@279@01  $FPM) (Seq_index xs@240@01 i1@241@01))
  $Perm.Write))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@279@01  $FPM) r) $Perm.Write)
  :pattern ((inv@248@01 r))
  :qid |qp-fld-prm-bnd|)))
; [eval] fun03qp(x, i2) == old(fun03qp(x, i2))
; [eval] fun03qp(x, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |x.elems|
; [eval] |x.elems|
(declare-const j@280@01 Int)
(push) ; 4
; [eval] 0 <= j && (j < |x.elems| && j == i)
; [eval] 0 <= j
(push) ; 5
; [then-branch: 78 | !(0 <= j@280@01) | live]
; [else-branch: 78 | 0 <= j@280@01 | live]
(push) ; 6
; [then-branch: 78 | !(0 <= j@280@01)]
(assert (not (<= 0 j@280@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01))
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01))
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))
  (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))))
(declare-const sm@281@01 $FVF<f>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@281@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@281@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@281@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@281@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@281@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@281@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef158|)))
(declare-const pm@282@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@282@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@282@01  $FPM) r))
  :qid |qp.resPrmSumDef159|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@282@01  $FPM) r) $Perm.Write)
  :pattern ((inv@248@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<=
  ($FVF.perm_f (as pm@282@01  $FPM) (Seq_index xs@240@01 i1@241@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@282@01  $FPM) (Seq_index xs@240@01 i2@242@01))
  $Perm.Write))
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 78 | 0 <= j@280@01]
(assert (<= 0 j@280@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01))
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01))
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))
  (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))))
(declare-const sm@283@01 $FVF<f>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@283@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@283@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@283@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@283@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@283@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@283@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef162|)))
(declare-const pm@284@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@284@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@284@01  $FPM) r))
  :qid |qp.resPrmSumDef163|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@284@01  $FPM) r) $Perm.Write)
  :pattern ((inv@248@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<=
  ($FVF.perm_f (as pm@284@01  $FPM) (Seq_index xs@240@01 i1@241@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@284@01  $FPM) (Seq_index xs@240@01 i2@242@01))
  $Perm.Write))
; [eval] j < |x.elems|
; [eval] |x.elems|
(set-option :timeout 0)
(push) ; 7
; [then-branch: 79 | !(j@280@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|) | live]
; [else-branch: 79 | j@280@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))| | live]
(push) ; 8
; [then-branch: 79 | !(j@280@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|)]
(assert (not
  (<
    j@280@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01))
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01)))))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01))
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01)))))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
  (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 79 | j@280@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|]
(assert (<
  j@280@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01))
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01)))))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01))
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01)))))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
  (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j == i
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (not
    (<
      j@280@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
  (and
    (not
      (<
        j@280@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
    (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
    (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01))))))
; Joined path conditions
(assert (=>
  (<
    j@280@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
  (and
    (<
      j@280@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
    (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
    (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01))))))
(assert (or
  (<
    j@280@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
  (not
    (<
      j@280@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@281@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@281@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@281@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@281@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@281@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@281@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef158|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@282@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@282@01  $FPM) r))
  :qid |qp.resPrmSumDef159|)))
(assert (=>
  (not (<= 0 j@280@01))
  (and
    (not (<= 0 j@280@01))
    (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))
    (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@282@01  $FPM) r) $Perm.Write)
      :pattern ((inv@248@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@282@01  $FPM) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@282@01  $FPM) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write))))
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@283@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@283@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@283@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@283@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@283@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@283@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef162|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@284@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@284@01  $FPM) r))
  :qid |qp.resPrmSumDef163|)))
(assert (=>
  (<= 0 j@280@01)
  (and
    (<= 0 j@280@01)
    (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))
    (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@284@01  $FPM) r) $Perm.Write)
      :pattern ((inv@248@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@284@01  $FPM) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@284@01  $FPM) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write)
    (=>
      (not
        (<
          j@280@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
      (and
        (not
          (<
            j@280@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
        (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
        (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))))
    (=>
      (<
        j@280@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
      (and
        (<
          j@280@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
        (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))))
    (or
      (<
        j@280@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
      (not
        (<
          j@280@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
(assert (or (<= 0 j@280@01) (not (<= 0 j@280@01))))
(assert (and
  (<= 0 j@280@01)
  (and
    (<
      j@280@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
    (= j@280@01 i2@242@01))))
; [eval] x.elems[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@280@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@285@01 ($Ref) Int)
(declare-fun img@286@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@281@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@281@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@281@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@281@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@281@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@281@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef158|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@282@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@282@01  $FPM) r))
  :qid |qp.resPrmSumDef159|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@283@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@283@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@283@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@283@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@283@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@283@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef162|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@284@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@284@01  $FPM) r))
  :qid |qp.resPrmSumDef163|)))
; Nested auxiliary terms: non-globals
(assert (forall ((j@280@01 Int)) (!
  (=>
    (and
      (<= 0 j@280@01)
      (and
        (<
          j@280@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@280@01 i2@242@01)))
    (and
      (=>
        (not (<= 0 j@280@01))
        (and
          (not (<= 0 j@280@01))
          (not
            (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))
          (not
            (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
          (forall ((r $Ref)) (!
            (<= ($FVF.perm_f (as pm@282@01  $FPM) r) $Perm.Write)
            :pattern ((inv@248@01 r))
            :qid |qp-fld-prm-bnd|))
          (<=
            ($FVF.perm_f (as pm@282@01  $FPM) (Seq_index xs@240@01 i1@241@01))
            $Perm.Write)
          (<=
            ($FVF.perm_f (as pm@282@01  $FPM) (Seq_index xs@240@01 i2@242@01))
            $Perm.Write)))
      (=>
        (<= 0 j@280@01)
        (and
          (<= 0 j@280@01)
          (not
            (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))
          (not
            (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
          (forall ((r $Ref)) (!
            (<= ($FVF.perm_f (as pm@284@01  $FPM) r) $Perm.Write)
            :pattern ((inv@248@01 r))
            :qid |qp-fld-prm-bnd|))
          (<=
            ($FVF.perm_f (as pm@284@01  $FPM) (Seq_index xs@240@01 i1@241@01))
            $Perm.Write)
          (<=
            ($FVF.perm_f (as pm@284@01  $FPM) (Seq_index xs@240@01 i2@242@01))
            $Perm.Write)
          (=>
            (not
              (<
                j@280@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
            (and
              (not
                (<
                  j@280@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
              (not
                (=
                  (Seq_index xs@240@01 i2@242@01)
                  (Seq_index xs@240@01 i1@241@01)))
              (not
                (=
                  (Seq_index xs@240@01 i1@241@01)
                  (Seq_index xs@240@01 i2@242@01)))))
          (=>
            (<
              j@280@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (and
              (<
                j@280@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
              (not
                (=
                  (Seq_index xs@240@01 i2@242@01)
                  (Seq_index xs@240@01 i1@241@01)))
              (not
                (=
                  (Seq_index xs@240@01 i1@241@01)
                  (Seq_index xs@240@01 i2@242@01)))))
          (or
            (<
              j@280@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (not
              (<
                j@280@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))
      (or (<= 0 j@280@01) (not (<= 0 j@280@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@280@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@280@01 Int) (j2@280@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j1@280@01)
        (and
          (<
            j1@280@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j1@280@01 i2@242@01)))
      (and
        (<= 0 j2@280@01)
        (and
          (<
            j2@280@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j2@280@01 i2@242@01)))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j1@280@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j2@280@01)))
    (= j1@280@01 j2@280@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@280@01 Int)) (!
  (=>
    (and
      (<= 0 j@280@01)
      (and
        (<
          j@280@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@280@01 i2@242@01)))
    (and
      (=
        (inv@285@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j@280@01))
        j@280@01)
      (img@286@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        j@280@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@280@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@286@01 r)
      (and
        (<= 0 (inv@285@01 r))
        (and
          (<
            (inv@285@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@285@01 r) i2@242@01))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        (inv@285@01 r))
      r))
  :pattern ((inv@285@01 r))
  :qid |f-fctOfInv|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((j@280@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
      j@280@01)
    (Seq_index xs@240@01 j@280@01))
  
  :qid |quant-u-239|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@287@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@285@01 r))
        (and
          (<
            (inv@285@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@285@01 r) i2@242@01)))
      (img@286@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@285@01 r))))
    ($Perm.min
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@288@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@285@01 r))
        (and
          (<
            (inv@285@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@285@01 r) i2@242@01)))
      (img@286@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@285@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@287@01 r)))
    $Perm.No))
(define-fun pTaken@289@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@285@01 r))
        (and
          (<
            (inv@285@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@285@01 r) i2@242@01)))
      (img@286@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@285@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@287@01 r)) (pTaken@288@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
        $Perm.No)
      (pTaken@287@01 r))
    $Perm.No)
  
  :qid |quant-u-241|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@287@01 r) $Perm.No)
  
  :qid |quant-u-242|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@285@01 r))
        (and
          (<
            (inv@285@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@285@01 r) i2@242@01)))
      (img@286@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@285@01 r))))
    (= (- $Perm.Write (pTaken@287@01 r)) $Perm.No))
  
  :qid |quant-u-243|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)
    (pTaken@288@01 (Seq_index xs@240@01 i1@241@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@288@01 r) $Perm.No)
  
  :qid |quant-u-245|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@285@01 r))
        (and
          (<
            (inv@285@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@285@01 r) i2@242@01)))
      (img@286@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@285@01 r))))
    (= (- (- $Perm.Write (pTaken@287@01 r)) (pTaken@288@01 r)) $Perm.No))
  
  :qid |quant-u-246|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)
    (pTaken@289@01 (Seq_index xs@240@01 i2@242@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@285@01 r))
        (and
          (<
            (inv@285@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@285@01 r) i2@242@01)))
      (img@286@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@285@01 r))))
    (=
      (-
        (- (- $Perm.Write (pTaken@287@01 r)) (pTaken@288@01 r))
        (pTaken@289@01 r))
      $Perm.No))
  
  :qid |quant-u-248|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@290@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@290@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@285@01 r))
          (and
            (<
              (inv@285@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@285@01 r) i2@242@01)))
        (img@286@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@285@01 r))
          (and
            (<
              (inv@285@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@285@01 r) i2@242@01)))
        (img@286@01 r))
      (Set_in r ($FVF.domain_f (as sm@290@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@290@01  $FVF<f>))))
  :qid |qp.fvfDomDef167|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@285@01 r))
          (and
            (<
              (inv@285@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@285@01 r) i2@242@01)))
        (img@286@01 r))
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@290@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@290@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef164|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@285@01 r))
          (and
            (<
              (inv@285@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@285@01 r) i2@242@01)))
        (img@286@01 r))
      (= r (Seq_index xs@240@01 i1@241@01)))
    (=
      ($FVF.lookup_f (as sm@290@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@290@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef165|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@285@01 r))
          (and
            (<
              (inv@285@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@285@01 r) i2@242@01)))
        (img@286@01 r))
      (= r (Seq_index xs@240@01 i2@242@01)))
    (=
      ($FVF.lookup_f (as sm@290@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@290@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef166|)))
(assert (fun03qp%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@290@01  $FVF<f>))))) x@243@01 i2@242@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@281@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@281@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@281@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@281@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef157|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@281@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@281@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef158|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@282@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@282@01  $FPM) r))
  :qid |qp.resPrmSumDef159|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@283@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@283@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@283@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@283@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@283@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@283@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef162|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@284@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@284@01  $FPM) r))
  :qid |qp.resPrmSumDef163|)))
(assert (forall ((j@280@01 Int)) (!
  (=>
    (and
      (<= 0 j@280@01)
      (and
        (<
          j@280@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@280@01 i2@242@01)))
    (and
      (=
        (inv@285@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j@280@01))
        j@280@01)
      (img@286@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        j@280@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@280@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@286@01 r)
      (and
        (<= 0 (inv@285@01 r))
        (and
          (<
            (inv@285@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@285@01 r) i2@242@01))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        (inv@285@01 r))
      r))
  :pattern ((inv@285@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@290@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@285@01 r))
          (and
            (<
              (inv@285@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@285@01 r) i2@242@01)))
        (img@286@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@285@01 r))
          (and
            (<
              (inv@285@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@285@01 r) i2@242@01)))
        (img@286@01 r))
      (Set_in r ($FVF.domain_f (as sm@290@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@290@01  $FVF<f>))))
  :qid |qp.fvfDomDef167|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@285@01 r))
          (and
            (<
              (inv@285@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@285@01 r) i2@242@01)))
        (img@286@01 r))
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@290@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@290@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef164|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@285@01 r))
          (and
            (<
              (inv@285@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@285@01 r) i2@242@01)))
        (img@286@01 r))
      (= r (Seq_index xs@240@01 i1@241@01)))
    (=
      ($FVF.lookup_f (as sm@290@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@290@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef165|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@285@01 r))
          (and
            (<
              (inv@285@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@285@01 r) i2@242@01)))
        (img@286@01 r))
      (= r (Seq_index xs@240@01 i2@242@01)))
    (=
      ($FVF.lookup_f (as sm@290@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@290@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef166|)))
(assert (and
  (forall ((j@280@01 Int)) (!
    (=>
      (and
        (<= 0 j@280@01)
        (and
          (<
            j@280@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j@280@01 i2@242@01)))
      (and
        (=>
          (not (<= 0 j@280@01))
          (and
            (not (<= 0 j@280@01))
            (not
              (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))
            (not
              (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@282@01  $FPM) r) $Perm.Write)
              :pattern ((inv@248@01 r))
              :qid |qp-fld-prm-bnd|))
            (<=
              ($FVF.perm_f (as pm@282@01  $FPM) (Seq_index xs@240@01 i1@241@01))
              $Perm.Write)
            (<=
              ($FVF.perm_f (as pm@282@01  $FPM) (Seq_index xs@240@01 i2@242@01))
              $Perm.Write)))
        (=>
          (<= 0 j@280@01)
          (and
            (<= 0 j@280@01)
            (not
              (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))
            (not
              (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@284@01  $FPM) r) $Perm.Write)
              :pattern ((inv@248@01 r))
              :qid |qp-fld-prm-bnd|))
            (<=
              ($FVF.perm_f (as pm@284@01  $FPM) (Seq_index xs@240@01 i1@241@01))
              $Perm.Write)
            (<=
              ($FVF.perm_f (as pm@284@01  $FPM) (Seq_index xs@240@01 i2@242@01))
              $Perm.Write)
            (=>
              (not
                (<
                  j@280@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
              (and
                (not
                  (<
                    j@280@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
                (not
                  (=
                    (Seq_index xs@240@01 i2@242@01)
                    (Seq_index xs@240@01 i1@241@01)))
                (not
                  (=
                    (Seq_index xs@240@01 i1@241@01)
                    (Seq_index xs@240@01 i2@242@01)))))
            (=>
              (<
                j@280@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
              (and
                (<
                  j@280@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
                (not
                  (=
                    (Seq_index xs@240@01 i2@242@01)
                    (Seq_index xs@240@01 i1@241@01)))
                (not
                  (=
                    (Seq_index xs@240@01 i1@241@01)
                    (Seq_index xs@240@01 i2@242@01)))))
            (or
              (<
                j@280@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
              (not
                (<
                  j@280@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))
        (or (<= 0 j@280@01) (not (<= 0 j@280@01)))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
      j@280@01))
    :qid |f-aux|))
  (fun03qp%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@290@01  $FVF<f>))))) x@243@01 i2@242@01)))
; [eval] old(fun03qp(x, i2))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(declare-const sm@291@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@249@01 r)
      (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
    (=
      ($FVF.lookup_f (as sm@291@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@291@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef168|)))
(declare-const pm@292@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@292@01  $FPM) r)
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_f (as pm@292@01  $FPM) r))
  :qid |qp.resPrmSumDef169|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@292@01  $FPM) r) $Perm.Write)
  :pattern ((inv@248@01 r))
  :qid |qp-fld-prm-bnd|)))
; [eval] fun03qp(x, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |x.elems|
; [eval] |x.elems|
(declare-const j@293@01 Int)
(push) ; 4
; [eval] 0 <= j && (j < |x.elems| && j == i)
; [eval] 0 <= j
(push) ; 5
; [then-branch: 80 | !(0 <= j@293@01) | live]
; [else-branch: 80 | 0 <= j@293@01 | live]
(push) ; 6
; [then-branch: 80 | !(0 <= j@293@01)]
(assert (not (<= 0 j@293@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 80 | 0 <= j@293@01]
(assert (<= 0 j@293@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j < |x.elems|
; [eval] |x.elems|
(set-option :timeout 0)
(push) ; 7
; [then-branch: 81 | !(j@293@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|) | live]
; [else-branch: 81 | j@293@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))| | live]
(push) ; 8
; [then-branch: 81 | !(j@293@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|)]
(assert (not
  (<
    j@293@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 81 | j@293@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|]
(assert (<
  j@293@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j == i
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    j@293@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
  (not
    (<
      j@293@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 j@293@01)
  (and
    (<= 0 j@293@01)
    (or
      (<
        j@293@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
      (not
        (<
          j@293@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
(assert (or (<= 0 j@293@01) (not (<= 0 j@293@01))))
(assert (and
  (<= 0 j@293@01)
  (and
    (<
      j@293@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
    (= j@293@01 i2@242@01))))
; [eval] x.elems[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@293@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@294@01 ($Ref) Int)
(declare-fun img@295@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@293@01 Int)) (!
  (=>
    (and
      (<= 0 j@293@01)
      (and
        (<
          j@293@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@293@01 i2@242@01)))
    (and
      (=>
        (<= 0 j@293@01)
        (and
          (<= 0 j@293@01)
          (or
            (<
              j@293@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (not
              (<
                j@293@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))
      (or (<= 0 j@293@01) (not (<= 0 j@293@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@293@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@293@01 Int) (j2@293@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j1@293@01)
        (and
          (<
            j1@293@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j1@293@01 i2@242@01)))
      (and
        (<= 0 j2@293@01)
        (and
          (<
            j2@293@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j2@293@01 i2@242@01)))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j1@293@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j2@293@01)))
    (= j1@293@01 j2@293@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@293@01 Int)) (!
  (=>
    (and
      (<= 0 j@293@01)
      (and
        (<
          j@293@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@293@01 i2@242@01)))
    (and
      (=
        (inv@294@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j@293@01))
        j@293@01)
      (img@295@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        j@293@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@293@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@295@01 r)
      (and
        (<= 0 (inv@294@01 r))
        (and
          (<
            (inv@294@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@294@01 r) i2@242@01))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        (inv@294@01 r))
      r))
  :pattern ((inv@294@01 r))
  :qid |f-fctOfInv|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((j@293@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
      j@293@01)
    (Seq_index xs@240@01 j@293@01))
  
  :qid |quant-u-250|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@296@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@294@01 r))
        (and
          (<
            (inv@294@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@294@01 r) i2@242@01)))
      (img@295@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@294@01 r))))
    ($Perm.min
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@296@01 r))
    $Perm.No)
  
  :qid |quant-u-252|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@296@01 r) $Perm.No)
  
  :qid |quant-u-253|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@294@01 r))
        (and
          (<
            (inv@294@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@294@01 r) i2@242@01)))
      (img@295@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@294@01 r))))
    (= (- $Perm.Write (pTaken@296@01 r)) $Perm.No))
  
  :qid |quant-u-254|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@297@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@297@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@294@01 r))
          (and
            (<
              (inv@294@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@294@01 r) i2@242@01)))
        (img@295@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@294@01 r))
          (and
            (<
              (inv@294@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@294@01 r) i2@242@01)))
        (img@295@01 r))
      (Set_in r ($FVF.domain_f (as sm@297@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@297@01  $FVF<f>))))
  :qid |qp.fvfDomDef171|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@294@01 r))
          (and
            (<
              (inv@294@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@294@01 r) i2@242@01)))
        (img@295@01 r))
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01)))))
    (=
      ($FVF.lookup_f (as sm@297@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@297@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef170|)))
(assert (fun03qp%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@297@01  $FVF<f>))))) x@243@01 i2@242@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@293@01 Int)) (!
  (=>
    (and
      (<= 0 j@293@01)
      (and
        (<
          j@293@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@293@01 i2@242@01)))
    (and
      (=
        (inv@294@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j@293@01))
        j@293@01)
      (img@295@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        j@293@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@293@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@295@01 r)
      (and
        (<= 0 (inv@294@01 r))
        (and
          (<
            (inv@294@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@294@01 r) i2@242@01))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        (inv@294@01 r))
      r))
  :pattern ((inv@294@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@297@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@294@01 r))
          (and
            (<
              (inv@294@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@294@01 r) i2@242@01)))
        (img@295@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@294@01 r))
          (and
            (<
              (inv@294@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@294@01 r) i2@242@01)))
        (img@295@01 r))
      (Set_in r ($FVF.domain_f (as sm@297@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@297@01  $FVF<f>))))
  :qid |qp.fvfDomDef171|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@294@01 r))
          (and
            (<
              (inv@294@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@294@01 r) i2@242@01)))
        (img@295@01 r))
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01)))))
    (=
      ($FVF.lookup_f (as sm@297@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@297@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef170|)))
(assert (and
  (forall ((j@293@01 Int)) (!
    (=>
      (and
        (<= 0 j@293@01)
        (and
          (<
            j@293@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j@293@01 i2@242@01)))
      (and
        (=>
          (<= 0 j@293@01)
          (and
            (<= 0 j@293@01)
            (or
              (<
                j@293@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
              (not
                (<
                  j@293@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))
        (or (<= 0 j@293@01) (not (<= 0 j@293@01)))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
      j@293@01))
    :qid |f-aux|))
  (fun03qp%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@297@01  $FVF<f>))))) x@243@01 i2@242@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (=
  (fun03qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@290@01  $FVF<f>))))) x@243@01 i2@242@01)
  (fun03qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@297@01  $FVF<f>))))) x@243@01 i2@242@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01))
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01))
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
  (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))))
(declare-const sm@298@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@298@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@298@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef172|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@298@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@298@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef173|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@298@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@298@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef174|)))
(declare-const pm@299@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@299@01  $FPM) r)
    (+
      (+
        (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@299@01  $FPM) r))
  :qid |qp.resPrmSumDef175|)))
(assert (<=
  ($FVF.perm_f (as pm@299@01  $FPM) (Seq_index xs@240@01 i2@242@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@299@01  $FPM) (Seq_index xs@240@01 i1@241@01))
  $Perm.Write))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@299@01  $FPM) r) $Perm.Write)
  :pattern ((inv@248@01 r))
  :qid |qp-fld-prm-bnd|)))
; [eval] fun03qp(x, i2) == old(fun03qp(x, i2))
; [eval] fun03qp(x, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |x.elems|
; [eval] |x.elems|
(declare-const j@300@01 Int)
(push) ; 4
; [eval] 0 <= j && (j < |x.elems| && j == i)
; [eval] 0 <= j
(push) ; 5
; [then-branch: 82 | !(0 <= j@300@01) | live]
; [else-branch: 82 | 0 <= j@300@01 | live]
(push) ; 6
; [then-branch: 82 | !(0 <= j@300@01)]
(assert (not (<= 0 j@300@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01))
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01))
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
  (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 82 | 0 <= j@300@01]
(assert (<= 0 j@300@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01))
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01))
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
  (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j < |x.elems|
; [eval] |x.elems|
(set-option :timeout 0)
(push) ; 7
; [then-branch: 83 | !(j@300@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|) | live]
; [else-branch: 83 | j@300@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))| | live]
(push) ; 8
; [then-branch: 83 | !(j@300@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|)]
(assert (not
  (<
    j@300@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01))
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01)))))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01))
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01)))))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))
  (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))))
(declare-const sm@301@01 $FVF<f>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@301@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@301@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef176|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@301@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@301@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef177|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@301@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@301@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef178|)))
(declare-const pm@302@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@302@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@302@01  $FPM) r))
  :qid |qp.resPrmSumDef179|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@302@01  $FPM) r) $Perm.Write)
  :pattern ((inv@248@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<=
  ($FVF.perm_f (as pm@302@01  $FPM) (Seq_index xs@240@01 i1@241@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@302@01  $FPM) (Seq_index xs@240@01 i2@242@01))
  $Perm.Write))
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 83 | j@300@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|]
(assert (<
  j@300@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01))
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01)))))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01))
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01)))))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))
  (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))))
(declare-const sm@303@01 $FVF<f>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@303@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@303@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@303@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@303@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef181|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@303@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@303@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef182|)))
(declare-const pm@304@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@304@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@304@01  $FPM) r))
  :qid |qp.resPrmSumDef183|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@304@01  $FPM) r) $Perm.Write)
  :pattern ((inv@248@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<=
  ($FVF.perm_f (as pm@304@01  $FPM) (Seq_index xs@240@01 i1@241@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@304@01  $FPM) (Seq_index xs@240@01 i2@242@01))
  $Perm.Write))
; [eval] j == i
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@301@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@301@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef176|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@301@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@301@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef177|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@301@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@301@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@302@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@302@01  $FPM) r))
  :qid |qp.resPrmSumDef179|)))
(assert (=>
  (not
    (<
      j@300@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
  (and
    (not
      (<
        j@300@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
    (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))
    (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@302@01  $FPM) r) $Perm.Write)
      :pattern ((inv@248@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@302@01  $FPM) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@302@01  $FPM) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write))))
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@303@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@303@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@303@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@303@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef181|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@303@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@303@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef182|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@304@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@304@01  $FPM) r))
  :qid |qp.resPrmSumDef183|)))
(assert (=>
  (<
    j@300@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
  (and
    (<
      j@300@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
    (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))
    (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@304@01  $FPM) r) $Perm.Write)
      :pattern ((inv@248@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@304@01  $FPM) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@304@01  $FPM) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write))))
(assert (or
  (<
    j@300@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
  (not
    (<
      j@300@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (not (<= 0 j@300@01))
  (and
    (not (<= 0 j@300@01))
    (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
    (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01))))))
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@301@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@301@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef176|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@301@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@301@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef177|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@301@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@301@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@302@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@302@01  $FPM) r))
  :qid |qp.resPrmSumDef179|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@303@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@303@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@303@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@303@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef181|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@303@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@303@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef182|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@304@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@304@01  $FPM) r))
  :qid |qp.resPrmSumDef183|)))
(assert (=>
  (<= 0 j@300@01)
  (and
    (<= 0 j@300@01)
    (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
    (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))
    (=>
      (not
        (<
          j@300@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
      (and
        (not
          (<
            j@300@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
        (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))
        (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
        (forall ((r $Ref)) (!
          (<= ($FVF.perm_f (as pm@302@01  $FPM) r) $Perm.Write)
          :pattern ((inv@248@01 r))
          :qid |qp-fld-prm-bnd|))
        (<=
          ($FVF.perm_f (as pm@302@01  $FPM) (Seq_index xs@240@01 i1@241@01))
          $Perm.Write)
        (<=
          ($FVF.perm_f (as pm@302@01  $FPM) (Seq_index xs@240@01 i2@242@01))
          $Perm.Write)))
    (=>
      (<
        j@300@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
      (and
        (<
          j@300@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))
        (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
        (forall ((r $Ref)) (!
          (<= ($FVF.perm_f (as pm@304@01  $FPM) r) $Perm.Write)
          :pattern ((inv@248@01 r))
          :qid |qp-fld-prm-bnd|))
        (<=
          ($FVF.perm_f (as pm@304@01  $FPM) (Seq_index xs@240@01 i1@241@01))
          $Perm.Write)
        (<=
          ($FVF.perm_f (as pm@304@01  $FPM) (Seq_index xs@240@01 i2@242@01))
          $Perm.Write)))
    (or
      (<
        j@300@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
      (not
        (<
          j@300@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
(assert (or (<= 0 j@300@01) (not (<= 0 j@300@01))))
(assert (and
  (<= 0 j@300@01)
  (and
    (<
      j@300@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
    (= j@300@01 i2@242@01))))
; [eval] x.elems[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@300@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@305@01 ($Ref) Int)
(declare-fun img@306@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@301@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@301@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef176|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@301@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@301@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef177|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@301@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@301@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@302@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@302@01  $FPM) r))
  :qid |qp.resPrmSumDef179|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@303@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@303@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@303@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@303@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef181|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@303@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@303@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef182|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@304@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@304@01  $FPM) r))
  :qid |qp.resPrmSumDef183|)))
; Nested auxiliary terms: non-globals
(assert (forall ((j@300@01 Int)) (!
  (=>
    (and
      (<= 0 j@300@01)
      (and
        (<
          j@300@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@300@01 i2@242@01)))
    (and
      (=>
        (not (<= 0 j@300@01))
        (and
          (not (<= 0 j@300@01))
          (not
            (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
          (not
            (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))))
      (=>
        (<= 0 j@300@01)
        (and
          (<= 0 j@300@01)
          (not
            (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
          (not
            (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))
          (=>
            (not
              (<
                j@300@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
            (and
              (not
                (<
                  j@300@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
              (not
                (=
                  (Seq_index xs@240@01 i1@241@01)
                  (Seq_index xs@240@01 i2@242@01)))
              (not
                (=
                  (Seq_index xs@240@01 i2@242@01)
                  (Seq_index xs@240@01 i1@241@01)))
              (forall ((r $Ref)) (!
                (<= ($FVF.perm_f (as pm@302@01  $FPM) r) $Perm.Write)
                :pattern ((inv@248@01 r))
                :qid |qp-fld-prm-bnd|))
              (<=
                ($FVF.perm_f (as pm@302@01  $FPM) (Seq_index xs@240@01 i1@241@01))
                $Perm.Write)
              (<=
                ($FVF.perm_f (as pm@302@01  $FPM) (Seq_index xs@240@01 i2@242@01))
                $Perm.Write)))
          (=>
            (<
              j@300@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (and
              (<
                j@300@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
              (not
                (=
                  (Seq_index xs@240@01 i1@241@01)
                  (Seq_index xs@240@01 i2@242@01)))
              (not
                (=
                  (Seq_index xs@240@01 i2@242@01)
                  (Seq_index xs@240@01 i1@241@01)))
              (forall ((r $Ref)) (!
                (<= ($FVF.perm_f (as pm@304@01  $FPM) r) $Perm.Write)
                :pattern ((inv@248@01 r))
                :qid |qp-fld-prm-bnd|))
              (<=
                ($FVF.perm_f (as pm@304@01  $FPM) (Seq_index xs@240@01 i1@241@01))
                $Perm.Write)
              (<=
                ($FVF.perm_f (as pm@304@01  $FPM) (Seq_index xs@240@01 i2@242@01))
                $Perm.Write)))
          (or
            (<
              j@300@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (not
              (<
                j@300@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))
      (or (<= 0 j@300@01) (not (<= 0 j@300@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@300@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@300@01 Int) (j2@300@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j1@300@01)
        (and
          (<
            j1@300@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j1@300@01 i2@242@01)))
      (and
        (<= 0 j2@300@01)
        (and
          (<
            j2@300@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j2@300@01 i2@242@01)))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j1@300@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j2@300@01)))
    (= j1@300@01 j2@300@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@300@01 Int)) (!
  (=>
    (and
      (<= 0 j@300@01)
      (and
        (<
          j@300@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@300@01 i2@242@01)))
    (and
      (=
        (inv@305@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j@300@01))
        j@300@01)
      (img@306@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        j@300@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@300@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@306@01 r)
      (and
        (<= 0 (inv@305@01 r))
        (and
          (<
            (inv@305@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@305@01 r) i2@242@01))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        (inv@305@01 r))
      r))
  :pattern ((inv@305@01 r))
  :qid |f-fctOfInv|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((j@300@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
      j@300@01)
    (Seq_index xs@240@01 j@300@01))
  
  :qid |quant-u-256|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@307@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@305@01 r))
        (and
          (<
            (inv@305@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@305@01 r) i2@242@01)))
      (img@306@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@305@01 r))))
    ($Perm.min
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@308@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@305@01 r))
        (and
          (<
            (inv@305@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@305@01 r) i2@242@01)))
      (img@306@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@305@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@307@01 r)))
    $Perm.No))
(define-fun pTaken@309@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@305@01 r))
        (and
          (<
            (inv@305@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@305@01 r) i2@242@01)))
      (img@306@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@305@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@307@01 r)) (pTaken@308@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
        $Perm.No)
      (pTaken@307@01 r))
    $Perm.No)
  
  :qid |quant-u-258|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@307@01 r) $Perm.No)
  
  :qid |quant-u-259|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@305@01 r))
        (and
          (<
            (inv@305@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@305@01 r) i2@242@01)))
      (img@306@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@305@01 r))))
    (= (- $Perm.Write (pTaken@307@01 r)) $Perm.No))
  
  :qid |quant-u-260|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)
    (pTaken@308@01 (Seq_index xs@240@01 i2@242@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@305@01 r))
        (and
          (<
            (inv@305@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@305@01 r) i2@242@01)))
      (img@306@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@305@01 r))))
    (= (- (- $Perm.Write (pTaken@307@01 r)) (pTaken@308@01 r)) $Perm.No))
  
  :qid |quant-u-262|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@310@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@310@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@305@01 r))
          (and
            (<
              (inv@305@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@305@01 r) i2@242@01)))
        (img@306@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@305@01 r))
          (and
            (<
              (inv@305@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@305@01 r) i2@242@01)))
        (img@306@01 r))
      (Set_in r ($FVF.domain_f (as sm@310@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@310@01  $FVF<f>))))
  :qid |qp.fvfDomDef187|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@305@01 r))
          (and
            (<
              (inv@305@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@305@01 r) i2@242@01)))
        (img@306@01 r))
      (= r (Seq_index xs@240@01 i2@242@01)))
    (=
      ($FVF.lookup_f (as sm@310@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@310@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef184|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@305@01 r))
          (and
            (<
              (inv@305@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@305@01 r) i2@242@01)))
        (img@306@01 r))
      (= r (Seq_index xs@240@01 i1@241@01)))
    (=
      ($FVF.lookup_f (as sm@310@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@310@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@305@01 r))
          (and
            (<
              (inv@305@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@305@01 r) i2@242@01)))
        (img@306@01 r))
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@310@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@310@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef186|)))
(assert (fun03qp%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@310@01  $FVF<f>))))) x@243@01 i2@242@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@301@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@301@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef176|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@301@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@301@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef177|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@301@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@301@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef178|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@302@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@302@01  $FPM) r))
  :qid |qp.resPrmSumDef179|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@303@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@303@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@303@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@303@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef181|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@303@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@303@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef182|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@304@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@304@01  $FPM) r))
  :qid |qp.resPrmSumDef183|)))
(assert (forall ((j@300@01 Int)) (!
  (=>
    (and
      (<= 0 j@300@01)
      (and
        (<
          j@300@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@300@01 i2@242@01)))
    (and
      (=
        (inv@305@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j@300@01))
        j@300@01)
      (img@306@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        j@300@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@300@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@306@01 r)
      (and
        (<= 0 (inv@305@01 r))
        (and
          (<
            (inv@305@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@305@01 r) i2@242@01))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        (inv@305@01 r))
      r))
  :pattern ((inv@305@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@310@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@305@01 r))
          (and
            (<
              (inv@305@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@305@01 r) i2@242@01)))
        (img@306@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@305@01 r))
          (and
            (<
              (inv@305@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@305@01 r) i2@242@01)))
        (img@306@01 r))
      (Set_in r ($FVF.domain_f (as sm@310@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@310@01  $FVF<f>))))
  :qid |qp.fvfDomDef187|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@305@01 r))
          (and
            (<
              (inv@305@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@305@01 r) i2@242@01)))
        (img@306@01 r))
      (= r (Seq_index xs@240@01 i2@242@01)))
    (=
      ($FVF.lookup_f (as sm@310@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@310@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef184|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@305@01 r))
          (and
            (<
              (inv@305@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@305@01 r) i2@242@01)))
        (img@306@01 r))
      (= r (Seq_index xs@240@01 i1@241@01)))
    (=
      ($FVF.lookup_f (as sm@310@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@310@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef185|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@305@01 r))
          (and
            (<
              (inv@305@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@305@01 r) i2@242@01)))
        (img@306@01 r))
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@310@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@310@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef186|)))
(assert (and
  (forall ((j@300@01 Int)) (!
    (=>
      (and
        (<= 0 j@300@01)
        (and
          (<
            j@300@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j@300@01 i2@242@01)))
      (and
        (=>
          (not (<= 0 j@300@01))
          (and
            (not (<= 0 j@300@01))
            (not
              (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
            (not
              (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))))
        (=>
          (<= 0 j@300@01)
          (and
            (<= 0 j@300@01)
            (not
              (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
            (not
              (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))
            (=>
              (not
                (<
                  j@300@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
              (and
                (not
                  (<
                    j@300@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
                (not
                  (=
                    (Seq_index xs@240@01 i1@241@01)
                    (Seq_index xs@240@01 i2@242@01)))
                (not
                  (=
                    (Seq_index xs@240@01 i2@242@01)
                    (Seq_index xs@240@01 i1@241@01)))
                (forall ((r $Ref)) (!
                  (<= ($FVF.perm_f (as pm@302@01  $FPM) r) $Perm.Write)
                  :pattern ((inv@248@01 r))
                  :qid |qp-fld-prm-bnd|))
                (<=
                  ($FVF.perm_f (as pm@302@01  $FPM) (Seq_index
                    xs@240@01
                    i1@241@01))
                  $Perm.Write)
                (<=
                  ($FVF.perm_f (as pm@302@01  $FPM) (Seq_index
                    xs@240@01
                    i2@242@01))
                  $Perm.Write)))
            (=>
              (<
                j@300@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
              (and
                (<
                  j@300@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
                (not
                  (=
                    (Seq_index xs@240@01 i1@241@01)
                    (Seq_index xs@240@01 i2@242@01)))
                (not
                  (=
                    (Seq_index xs@240@01 i2@242@01)
                    (Seq_index xs@240@01 i1@241@01)))
                (forall ((r $Ref)) (!
                  (<= ($FVF.perm_f (as pm@304@01  $FPM) r) $Perm.Write)
                  :pattern ((inv@248@01 r))
                  :qid |qp-fld-prm-bnd|))
                (<=
                  ($FVF.perm_f (as pm@304@01  $FPM) (Seq_index
                    xs@240@01
                    i1@241@01))
                  $Perm.Write)
                (<=
                  ($FVF.perm_f (as pm@304@01  $FPM) (Seq_index
                    xs@240@01
                    i2@242@01))
                  $Perm.Write)))
            (or
              (<
                j@300@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
              (not
                (<
                  j@300@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))
        (or (<= 0 j@300@01) (not (<= 0 j@300@01)))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
      j@300@01))
    :qid |f-aux|))
  (fun03qp%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@310@01  $FVF<f>))))) x@243@01 i2@242@01)))
; [eval] old(fun03qp(x, i2))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(declare-const sm@311@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@249@01 r)
      (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
    (=
      ($FVF.lookup_f (as sm@311@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@311@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef188|)))
(declare-const pm@312@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@312@01  $FPM) r)
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_f (as pm@312@01  $FPM) r))
  :qid |qp.resPrmSumDef189|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@312@01  $FPM) r) $Perm.Write)
  :pattern ((inv@248@01 r))
  :qid |qp-fld-prm-bnd|)))
; [eval] fun03qp(x, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |x.elems|
; [eval] |x.elems|
(declare-const j@313@01 Int)
(push) ; 4
; [eval] 0 <= j && (j < |x.elems| && j == i)
; [eval] 0 <= j
(push) ; 5
; [then-branch: 84 | !(0 <= j@313@01) | live]
; [else-branch: 84 | 0 <= j@313@01 | live]
(push) ; 6
; [then-branch: 84 | !(0 <= j@313@01)]
(assert (not (<= 0 j@313@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 84 | 0 <= j@313@01]
(assert (<= 0 j@313@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j < |x.elems|
; [eval] |x.elems|
(set-option :timeout 0)
(push) ; 7
; [then-branch: 85 | !(j@313@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|) | live]
; [else-branch: 85 | j@313@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))| | live]
(push) ; 8
; [then-branch: 85 | !(j@313@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|)]
(assert (not
  (<
    j@313@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 85 | j@313@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|]
(assert (<
  j@313@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j == i
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    j@313@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
  (not
    (<
      j@313@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 j@313@01)
  (and
    (<= 0 j@313@01)
    (or
      (<
        j@313@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
      (not
        (<
          j@313@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
(assert (or (<= 0 j@313@01) (not (<= 0 j@313@01))))
(assert (and
  (<= 0 j@313@01)
  (and
    (<
      j@313@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
    (= j@313@01 i2@242@01))))
; [eval] x.elems[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@313@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@314@01 ($Ref) Int)
(declare-fun img@315@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@313@01 Int)) (!
  (=>
    (and
      (<= 0 j@313@01)
      (and
        (<
          j@313@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@313@01 i2@242@01)))
    (and
      (=>
        (<= 0 j@313@01)
        (and
          (<= 0 j@313@01)
          (or
            (<
              j@313@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (not
              (<
                j@313@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))
      (or (<= 0 j@313@01) (not (<= 0 j@313@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@313@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@313@01 Int) (j2@313@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j1@313@01)
        (and
          (<
            j1@313@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j1@313@01 i2@242@01)))
      (and
        (<= 0 j2@313@01)
        (and
          (<
            j2@313@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j2@313@01 i2@242@01)))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j1@313@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j2@313@01)))
    (= j1@313@01 j2@313@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@313@01 Int)) (!
  (=>
    (and
      (<= 0 j@313@01)
      (and
        (<
          j@313@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@313@01 i2@242@01)))
    (and
      (=
        (inv@314@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j@313@01))
        j@313@01)
      (img@315@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        j@313@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@313@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@315@01 r)
      (and
        (<= 0 (inv@314@01 r))
        (and
          (<
            (inv@314@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@314@01 r) i2@242@01))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        (inv@314@01 r))
      r))
  :pattern ((inv@314@01 r))
  :qid |f-fctOfInv|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((j@313@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
      j@313@01)
    (Seq_index xs@240@01 j@313@01))
  
  :qid |quant-u-264|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@316@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@314@01 r))
        (and
          (<
            (inv@314@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@314@01 r) i2@242@01)))
      (img@315@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@314@01 r))))
    ($Perm.min
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@316@01 r))
    $Perm.No)
  
  :qid |quant-u-266|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@316@01 r) $Perm.No)
  
  :qid |quant-u-267|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@314@01 r))
        (and
          (<
            (inv@314@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@314@01 r) i2@242@01)))
      (img@315@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@314@01 r))))
    (= (- $Perm.Write (pTaken@316@01 r)) $Perm.No))
  
  :qid |quant-u-268|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@317@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@317@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@314@01 r))
          (and
            (<
              (inv@314@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@314@01 r) i2@242@01)))
        (img@315@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@314@01 r))
          (and
            (<
              (inv@314@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@314@01 r) i2@242@01)))
        (img@315@01 r))
      (Set_in r ($FVF.domain_f (as sm@317@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@317@01  $FVF<f>))))
  :qid |qp.fvfDomDef191|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@314@01 r))
          (and
            (<
              (inv@314@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@314@01 r) i2@242@01)))
        (img@315@01 r))
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01)))))
    (=
      ($FVF.lookup_f (as sm@317@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@317@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef190|)))
(assert (fun03qp%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@317@01  $FVF<f>))))) x@243@01 i2@242@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@313@01 Int)) (!
  (=>
    (and
      (<= 0 j@313@01)
      (and
        (<
          j@313@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@313@01 i2@242@01)))
    (and
      (=
        (inv@314@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j@313@01))
        j@313@01)
      (img@315@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        j@313@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@313@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@315@01 r)
      (and
        (<= 0 (inv@314@01 r))
        (and
          (<
            (inv@314@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@314@01 r) i2@242@01))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        (inv@314@01 r))
      r))
  :pattern ((inv@314@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@317@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@314@01 r))
          (and
            (<
              (inv@314@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@314@01 r) i2@242@01)))
        (img@315@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@314@01 r))
          (and
            (<
              (inv@314@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@314@01 r) i2@242@01)))
        (img@315@01 r))
      (Set_in r ($FVF.domain_f (as sm@317@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@317@01  $FVF<f>))))
  :qid |qp.fvfDomDef191|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@314@01 r))
          (and
            (<
              (inv@314@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@314@01 r) i2@242@01)))
        (img@315@01 r))
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01)))))
    (=
      ($FVF.lookup_f (as sm@317@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@317@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef190|)))
(assert (and
  (forall ((j@313@01 Int)) (!
    (=>
      (and
        (<= 0 j@313@01)
        (and
          (<
            j@313@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j@313@01 i2@242@01)))
      (and
        (=>
          (<= 0 j@313@01)
          (and
            (<= 0 j@313@01)
            (or
              (<
                j@313@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
              (not
                (<
                  j@313@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))
        (or (<= 0 j@313@01) (not (<= 0 j@313@01)))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
      j@313@01))
    :qid |f-aux|))
  (fun03qp%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@317@01  $FVF<f>))))) x@243@01 i2@242@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (=
  (fun03qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@310@01  $FVF<f>))))) x@243@01 i2@242@01)
  (fun03qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@317@01  $FVF<f>))))) x@243@01 i2@242@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01))
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01))
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
  (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))))
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] fun03qp(x, i2) == old(fun03qp(x, i2))
; [eval] fun03qp(x, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |x.elems|
; [eval] |x.elems|
(declare-const j@318@01 Int)
(push) ; 4
; [eval] 0 <= j && (j < |x.elems| && j == i)
; [eval] 0 <= j
(push) ; 5
; [then-branch: 86 | !(0 <= j@318@01) | live]
; [else-branch: 86 | 0 <= j@318@01 | live]
(push) ; 6
; [then-branch: 86 | !(0 <= j@318@01)]
(assert (not (<= 0 j@318@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01))
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01))
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))
  (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))))
(declare-const sm@319@01 $FVF<f>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@319@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@319@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef192|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@319@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@319@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@319@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@319@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef194|)))
(declare-const pm@320@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@320@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@320@01  $FPM) r))
  :qid |qp.resPrmSumDef195|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@320@01  $FPM) r) $Perm.Write)
  :pattern ((inv@248@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<=
  ($FVF.perm_f (as pm@320@01  $FPM) (Seq_index xs@240@01 i1@241@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@320@01  $FPM) (Seq_index xs@240@01 i2@242@01))
  $Perm.Write))
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 86 | 0 <= j@318@01]
(assert (<= 0 j@318@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01))
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01))
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))
  (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))))
(declare-const sm@321@01 $FVF<f>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@321@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@321@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef196|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@321@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@321@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef197|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@321@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@321@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef198|)))
(declare-const pm@322@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@322@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@322@01  $FPM) r))
  :qid |qp.resPrmSumDef199|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@322@01  $FPM) r) $Perm.Write)
  :pattern ((inv@248@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<=
  ($FVF.perm_f (as pm@322@01  $FPM) (Seq_index xs@240@01 i1@241@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@322@01  $FPM) (Seq_index xs@240@01 i2@242@01))
  $Perm.Write))
; [eval] j < |x.elems|
; [eval] |x.elems|
(set-option :timeout 0)
(push) ; 7
; [then-branch: 87 | !(j@318@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|) | live]
; [else-branch: 87 | j@318@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))| | live]
(push) ; 8
; [then-branch: 87 | !(j@318@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|)]
(assert (not
  (<
    j@318@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01))
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01)))))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01))
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01)))))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
  (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 87 | j@318@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|]
(assert (<
  j@318@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01))
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01)))))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
    (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) (Seq_index xs@240@01 i1@241@01))
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) (Seq_index xs@240@01 i2@242@01)))))))
(check-sat)
; unknown
(pop) ; 9
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
  (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j == i
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (not
    (<
      j@318@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
  (and
    (not
      (<
        j@318@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
    (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
    (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01))))))
; Joined path conditions
(assert (=>
  (<
    j@318@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
  (and
    (<
      j@318@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
    (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
    (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01))))))
(assert (or
  (<
    j@318@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
  (not
    (<
      j@318@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@319@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@319@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef192|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@319@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@319@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@319@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@319@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef194|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@320@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@320@01  $FPM) r))
  :qid |qp.resPrmSumDef195|)))
(assert (=>
  (not (<= 0 j@318@01))
  (and
    (not (<= 0 j@318@01))
    (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))
    (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@320@01  $FPM) r) $Perm.Write)
      :pattern ((inv@248@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@320@01  $FPM) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@320@01  $FPM) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write))))
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@321@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@321@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef196|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@321@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@321@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef197|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@321@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@321@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef198|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@322@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@322@01  $FPM) r))
  :qid |qp.resPrmSumDef199|)))
(assert (=>
  (<= 0 j@318@01)
  (and
    (<= 0 j@318@01)
    (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))
    (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@322@01  $FPM) r) $Perm.Write)
      :pattern ((inv@248@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@322@01  $FPM) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@322@01  $FPM) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write)
    (=>
      (not
        (<
          j@318@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
      (and
        (not
          (<
            j@318@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
        (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
        (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))))
    (=>
      (<
        j@318@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
      (and
        (<
          j@318@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (not (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
        (not (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))))
    (or
      (<
        j@318@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
      (not
        (<
          j@318@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
(assert (or (<= 0 j@318@01) (not (<= 0 j@318@01))))
(assert (and
  (<= 0 j@318@01)
  (and
    (<
      j@318@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
    (= j@318@01 i2@242@01))))
; [eval] x.elems[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@318@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@323@01 ($Ref) Int)
(declare-fun img@324@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@319@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@319@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef192|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@319@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@319@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@319@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@319@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef194|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@320@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@320@01  $FPM) r))
  :qid |qp.resPrmSumDef195|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@321@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@321@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef196|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@321@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@321@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef197|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@321@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@321@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef198|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@322@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@322@01  $FPM) r))
  :qid |qp.resPrmSumDef199|)))
; Nested auxiliary terms: non-globals
(assert (forall ((j@318@01 Int)) (!
  (=>
    (and
      (<= 0 j@318@01)
      (and
        (<
          j@318@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@318@01 i2@242@01)))
    (and
      (=>
        (not (<= 0 j@318@01))
        (and
          (not (<= 0 j@318@01))
          (not
            (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))
          (not
            (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
          (forall ((r $Ref)) (!
            (<= ($FVF.perm_f (as pm@320@01  $FPM) r) $Perm.Write)
            :pattern ((inv@248@01 r))
            :qid |qp-fld-prm-bnd|))
          (<=
            ($FVF.perm_f (as pm@320@01  $FPM) (Seq_index xs@240@01 i1@241@01))
            $Perm.Write)
          (<=
            ($FVF.perm_f (as pm@320@01  $FPM) (Seq_index xs@240@01 i2@242@01))
            $Perm.Write)))
      (=>
        (<= 0 j@318@01)
        (and
          (<= 0 j@318@01)
          (not
            (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))
          (not
            (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
          (forall ((r $Ref)) (!
            (<= ($FVF.perm_f (as pm@322@01  $FPM) r) $Perm.Write)
            :pattern ((inv@248@01 r))
            :qid |qp-fld-prm-bnd|))
          (<=
            ($FVF.perm_f (as pm@322@01  $FPM) (Seq_index xs@240@01 i1@241@01))
            $Perm.Write)
          (<=
            ($FVF.perm_f (as pm@322@01  $FPM) (Seq_index xs@240@01 i2@242@01))
            $Perm.Write)
          (=>
            (not
              (<
                j@318@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
            (and
              (not
                (<
                  j@318@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
              (not
                (=
                  (Seq_index xs@240@01 i2@242@01)
                  (Seq_index xs@240@01 i1@241@01)))
              (not
                (=
                  (Seq_index xs@240@01 i1@241@01)
                  (Seq_index xs@240@01 i2@242@01)))))
          (=>
            (<
              j@318@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (and
              (<
                j@318@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
              (not
                (=
                  (Seq_index xs@240@01 i2@242@01)
                  (Seq_index xs@240@01 i1@241@01)))
              (not
                (=
                  (Seq_index xs@240@01 i1@241@01)
                  (Seq_index xs@240@01 i2@242@01)))))
          (or
            (<
              j@318@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (not
              (<
                j@318@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))
      (or (<= 0 j@318@01) (not (<= 0 j@318@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@318@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@318@01 Int) (j2@318@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j1@318@01)
        (and
          (<
            j1@318@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j1@318@01 i2@242@01)))
      (and
        (<= 0 j2@318@01)
        (and
          (<
            j2@318@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j2@318@01 i2@242@01)))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j1@318@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j2@318@01)))
    (= j1@318@01 j2@318@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@318@01 Int)) (!
  (=>
    (and
      (<= 0 j@318@01)
      (and
        (<
          j@318@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@318@01 i2@242@01)))
    (and
      (=
        (inv@323@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j@318@01))
        j@318@01)
      (img@324@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        j@318@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@318@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@324@01 r)
      (and
        (<= 0 (inv@323@01 r))
        (and
          (<
            (inv@323@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@323@01 r) i2@242@01))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        (inv@323@01 r))
      r))
  :pattern ((inv@323@01 r))
  :qid |f-fctOfInv|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((j@318@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
      j@318@01)
    (Seq_index xs@240@01 j@318@01))
  
  :qid |quant-u-270|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@325@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@323@01 r))
        (and
          (<
            (inv@323@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@323@01 r) i2@242@01)))
      (img@324@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@323@01 r))))
    ($Perm.min
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@326@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@323@01 r))
        (and
          (<
            (inv@323@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@323@01 r) i2@242@01)))
      (img@324@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@323@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@325@01 r)))
    $Perm.No))
(define-fun pTaken@327@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@323@01 r))
        (and
          (<
            (inv@323@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@323@01 r) i2@242@01)))
      (img@324@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@323@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@325@01 r)) (pTaken@326@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
        $Perm.No)
      (pTaken@325@01 r))
    $Perm.No)
  
  :qid |quant-u-272|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@325@01 r) $Perm.No)
  
  :qid |quant-u-273|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@323@01 r))
        (and
          (<
            (inv@323@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@323@01 r) i2@242@01)))
      (img@324@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@323@01 r))))
    (= (- $Perm.Write (pTaken@325@01 r)) $Perm.No))
  
  :qid |quant-u-274|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i1@241@01))
      $Perm.Write
      $Perm.No)
    (pTaken@326@01 (Seq_index xs@240@01 i1@241@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@326@01 r) $Perm.No)
  
  :qid |quant-u-276|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@323@01 r))
        (and
          (<
            (inv@323@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@323@01 r) i2@242@01)))
      (img@324@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@323@01 r))))
    (= (- (- $Perm.Write (pTaken@325@01 r)) (pTaken@326@01 r)) $Perm.No))
  
  :qid |quant-u-277|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i2@242@01))
      $Perm.Write
      $Perm.No)
    (pTaken@327@01 (Seq_index xs@240@01 i2@242@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@323@01 r))
        (and
          (<
            (inv@323@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@323@01 r) i2@242@01)))
      (img@324@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@323@01 r))))
    (=
      (-
        (- (- $Perm.Write (pTaken@325@01 r)) (pTaken@326@01 r))
        (pTaken@327@01 r))
      $Perm.No))
  
  :qid |quant-u-279|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@328@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@328@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@323@01 r))
          (and
            (<
              (inv@323@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@323@01 r) i2@242@01)))
        (img@324@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@323@01 r))
          (and
            (<
              (inv@323@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@323@01 r) i2@242@01)))
        (img@324@01 r))
      (Set_in r ($FVF.domain_f (as sm@328@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@328@01  $FVF<f>))))
  :qid |qp.fvfDomDef203|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@323@01 r))
          (and
            (<
              (inv@323@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@323@01 r) i2@242@01)))
        (img@324@01 r))
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@328@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@328@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@323@01 r))
          (and
            (<
              (inv@323@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@323@01 r) i2@242@01)))
        (img@324@01 r))
      (= r (Seq_index xs@240@01 i1@241@01)))
    (=
      ($FVF.lookup_f (as sm@328@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@328@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef201|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@323@01 r))
          (and
            (<
              (inv@323@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@323@01 r) i2@242@01)))
        (img@324@01 r))
      (= r (Seq_index xs@240@01 i2@242@01)))
    (=
      ($FVF.lookup_f (as sm@328@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@328@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef202|)))
(assert (fun03qp%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@328@01  $FVF<f>))))) x@243@01 i2@242@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@319@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@319@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef192|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@319@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@319@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef193|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@319@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@319@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef194|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@320@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@320@01  $FPM) r))
  :qid |qp.resPrmSumDef195|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@321@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@321@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef196|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i1@241@01))
    (=
      ($FVF.lookup_f (as sm@321@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@321@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef197|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@240@01 i2@242@01))
    (=
      ($FVF.lookup_f (as sm@321@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@321@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef198|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@322@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@249@01 r)
            (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
          (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@240@01 i1@241@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@240@01 i2@242@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@322@01  $FPM) r))
  :qid |qp.resPrmSumDef199|)))
(assert (forall ((j@318@01 Int)) (!
  (=>
    (and
      (<= 0 j@318@01)
      (and
        (<
          j@318@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@318@01 i2@242@01)))
    (and
      (=
        (inv@323@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j@318@01))
        j@318@01)
      (img@324@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        j@318@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@318@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@324@01 r)
      (and
        (<= 0 (inv@323@01 r))
        (and
          (<
            (inv@323@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@323@01 r) i2@242@01))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        (inv@323@01 r))
      r))
  :pattern ((inv@323@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@328@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@323@01 r))
          (and
            (<
              (inv@323@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@323@01 r) i2@242@01)))
        (img@324@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@323@01 r))
          (and
            (<
              (inv@323@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@323@01 r) i2@242@01)))
        (img@324@01 r))
      (Set_in r ($FVF.domain_f (as sm@328@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@328@01  $FVF<f>))))
  :qid |qp.fvfDomDef203|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@323@01 r))
          (and
            (<
              (inv@323@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@323@01 r) i2@242@01)))
        (img@324@01 r))
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@250@01 r)) (pTaken@263@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@328@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@328@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef200|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@323@01 r))
          (and
            (<
              (inv@323@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@323@01 r) i2@242@01)))
        (img@324@01 r))
      (= r (Seq_index xs@240@01 i1@241@01)))
    (=
      ($FVF.lookup_f (as sm@328@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@251@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@328@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@251@01  $FVF<f>) r))
  :qid |qp.fvfValDef201|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@323@01 r))
          (and
            (<
              (inv@323@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@323@01 r) i2@242@01)))
        (img@324@01 r))
      (= r (Seq_index xs@240@01 i2@242@01)))
    (=
      ($FVF.lookup_f (as sm@328@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@265@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@328@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@265@01  $FVF<f>) r))
  :qid |qp.fvfValDef202|)))
(assert (and
  (forall ((j@318@01 Int)) (!
    (=>
      (and
        (<= 0 j@318@01)
        (and
          (<
            j@318@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j@318@01 i2@242@01)))
      (and
        (=>
          (not (<= 0 j@318@01))
          (and
            (not (<= 0 j@318@01))
            (not
              (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))
            (not
              (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@320@01  $FPM) r) $Perm.Write)
              :pattern ((inv@248@01 r))
              :qid |qp-fld-prm-bnd|))
            (<=
              ($FVF.perm_f (as pm@320@01  $FPM) (Seq_index xs@240@01 i1@241@01))
              $Perm.Write)
            (<=
              ($FVF.perm_f (as pm@320@01  $FPM) (Seq_index xs@240@01 i2@242@01))
              $Perm.Write)))
        (=>
          (<= 0 j@318@01)
          (and
            (<= 0 j@318@01)
            (not
              (= (Seq_index xs@240@01 i1@241@01) (Seq_index xs@240@01 i2@242@01)))
            (not
              (= (Seq_index xs@240@01 i2@242@01) (Seq_index xs@240@01 i1@241@01)))
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@322@01  $FPM) r) $Perm.Write)
              :pattern ((inv@248@01 r))
              :qid |qp-fld-prm-bnd|))
            (<=
              ($FVF.perm_f (as pm@322@01  $FPM) (Seq_index xs@240@01 i1@241@01))
              $Perm.Write)
            (<=
              ($FVF.perm_f (as pm@322@01  $FPM) (Seq_index xs@240@01 i2@242@01))
              $Perm.Write)
            (=>
              (not
                (<
                  j@318@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
              (and
                (not
                  (<
                    j@318@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
                (not
                  (=
                    (Seq_index xs@240@01 i2@242@01)
                    (Seq_index xs@240@01 i1@241@01)))
                (not
                  (=
                    (Seq_index xs@240@01 i1@241@01)
                    (Seq_index xs@240@01 i2@242@01)))))
            (=>
              (<
                j@318@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
              (and
                (<
                  j@318@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
                (not
                  (=
                    (Seq_index xs@240@01 i2@242@01)
                    (Seq_index xs@240@01 i1@241@01)))
                (not
                  (=
                    (Seq_index xs@240@01 i1@241@01)
                    (Seq_index xs@240@01 i2@242@01)))))
            (or
              (<
                j@318@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
              (not
                (<
                  j@318@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))
        (or (<= 0 j@318@01) (not (<= 0 j@318@01)))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
      j@318@01))
    :qid |f-aux|))
  (fun03qp%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@328@01  $FVF<f>))))) x@243@01 i2@242@01)))
; [eval] old(fun03qp(x, i2))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(declare-const sm@329@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@249@01 r)
      (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
    (=
      ($FVF.lookup_f (as sm@329@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@329@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef204|)))
(declare-const pm@330@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@330@01  $FPM) r)
    (ite
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_f (as pm@330@01  $FPM) r))
  :qid |qp.resPrmSumDef205|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@330@01  $FPM) r) $Perm.Write)
  :pattern ((inv@248@01 r))
  :qid |qp-fld-prm-bnd|)))
; [eval] fun03qp(x, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |x.elems|
; [eval] |x.elems|
(declare-const j@331@01 Int)
(push) ; 4
; [eval] 0 <= j && (j < |x.elems| && j == i)
; [eval] 0 <= j
(push) ; 5
; [then-branch: 88 | !(0 <= j@331@01) | live]
; [else-branch: 88 | 0 <= j@331@01 | live]
(push) ; 6
; [then-branch: 88 | !(0 <= j@331@01)]
(assert (not (<= 0 j@331@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 88 | 0 <= j@331@01]
(assert (<= 0 j@331@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j < |x.elems|
; [eval] |x.elems|
(set-option :timeout 0)
(push) ; 7
; [then-branch: 89 | !(j@331@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|) | live]
; [else-branch: 89 | j@331@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))| | live]
(push) ; 8
; [then-branch: 89 | !(j@331@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|)]
(assert (not
  (<
    j@331@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 89 | j@331@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@244@01))))))))|]
(assert (<
  j@331@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j == i
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    j@331@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
  (not
    (<
      j@331@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 j@331@01)
  (and
    (<= 0 j@331@01)
    (or
      (<
        j@331@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
      (not
        (<
          j@331@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))))))))))
(assert (or (<= 0 j@331@01) (not (<= 0 j@331@01))))
(assert (and
  (<= 0 j@331@01)
  (and
    (<
      j@331@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
    (= j@331@01 i2@242@01))))
; [eval] x.elems[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@331@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@332@01 ($Ref) Int)
(declare-fun img@333@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@331@01 Int)) (!
  (=>
    (and
      (<= 0 j@331@01)
      (and
        (<
          j@331@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@331@01 i2@242@01)))
    (and
      (=>
        (<= 0 j@331@01)
        (and
          (<= 0 j@331@01)
          (or
            (<
              j@331@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (not
              (<
                j@331@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))
      (or (<= 0 j@331@01) (not (<= 0 j@331@01)))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@331@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@331@01 Int) (j2@331@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j1@331@01)
        (and
          (<
            j1@331@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j1@331@01 i2@242@01)))
      (and
        (<= 0 j2@331@01)
        (and
          (<
            j2@331@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j2@331@01 i2@242@01)))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j1@331@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j2@331@01)))
    (= j1@331@01 j2@331@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@331@01 Int)) (!
  (=>
    (and
      (<= 0 j@331@01)
      (and
        (<
          j@331@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@331@01 i2@242@01)))
    (and
      (=
        (inv@332@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j@331@01))
        j@331@01)
      (img@333@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        j@331@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@331@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@333@01 r)
      (and
        (<= 0 (inv@332@01 r))
        (and
          (<
            (inv@332@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@332@01 r) i2@242@01))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        (inv@332@01 r))
      r))
  :pattern ((inv@332@01 r))
  :qid |f-fctOfInv|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((j@331@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
      j@331@01)
    (Seq_index xs@240@01 j@331@01))
  
  :qid |quant-u-281|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@334@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@332@01 r))
        (and
          (<
            (inv@332@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@332@01 r) i2@242@01)))
      (img@333@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@332@01 r))))
    ($Perm.min
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@249@01 r)
          (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@334@01 r))
    $Perm.No)
  
  :qid |quant-u-283|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@334@01 r) $Perm.No)
  
  :qid |quant-u-284|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@332@01 r))
        (and
          (<
            (inv@332@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@332@01 r) i2@242@01)))
      (img@333@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          (inv@332@01 r))))
    (= (- $Perm.Write (pTaken@334@01 r)) $Perm.No))
  
  :qid |quant-u-285|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@335@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@335@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@332@01 r))
          (and
            (<
              (inv@332@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@332@01 r) i2@242@01)))
        (img@333@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@332@01 r))
          (and
            (<
              (inv@332@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@332@01 r) i2@242@01)))
        (img@333@01 r))
      (Set_in r ($FVF.domain_f (as sm@335@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@335@01  $FVF<f>))))
  :qid |qp.fvfDomDef207|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@332@01 r))
          (and
            (<
              (inv@332@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@332@01 r) i2@242@01)))
        (img@333@01 r))
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01)))))
    (=
      ($FVF.lookup_f (as sm@335@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@335@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef206|)))
(assert (fun03qp%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@335@01  $FVF<f>))))) x@243@01 i2@242@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@331@01 Int)) (!
  (=>
    (and
      (<= 0 j@331@01)
      (and
        (<
          j@331@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
        (= j@331@01 i2@242@01)))
    (and
      (=
        (inv@332@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
          j@331@01))
        j@331@01)
      (img@333@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        j@331@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
    j@331@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@333@01 r)
      (and
        (<= 0 (inv@332@01 r))
        (and
          (<
            (inv@332@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= (inv@332@01 r) i2@242@01))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
        (inv@332@01 r))
      r))
  :pattern ((inv@332@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@335@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@332@01 r))
          (and
            (<
              (inv@332@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@332@01 r) i2@242@01)))
        (img@333@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@332@01 r))
          (and
            (<
              (inv@332@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@332@01 r) i2@242@01)))
        (img@333@01 r))
      (Set_in r ($FVF.domain_f (as sm@335@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@335@01  $FVF<f>))))
  :qid |qp.fvfDomDef207|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@332@01 r))
          (and
            (<
              (inv@332@01 r)
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
            (= (inv@332@01 r) i2@242@01)))
        (img@333@01 r))
      (and
        (img@249@01 r)
        (and (<= 0 (inv@248@01 r)) (< (inv@248@01 r) (Seq_length xs@240@01)))))
    (=
      ($FVF.lookup_f (as sm@335@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@335@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))) r))
  :qid |qp.fvfValDef206|)))
(assert (and
  (forall ((j@331@01 Int)) (!
    (=>
      (and
        (<= 0 j@331@01)
        (and
          (<
            j@331@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
          (= j@331@01 i2@242@01)))
      (and
        (=>
          (<= 0 j@331@01)
          (and
            (<= 0 j@331@01)
            (or
              (<
                j@331@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))
              (not
                (<
                  j@331@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))))))))
        (or (<= 0 j@331@01) (not (<= 0 j@331@01)))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01)))))))))
      j@331@01))
    :qid |f-aux|))
  (fun03qp%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@335@01  $FVF<f>))))) x@243@01 i2@242@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (=
  (fun03qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@328@01  $FVF<f>))))) x@243@01 i2@242@01)
  (fun03qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@244@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@335@01  $FVF<f>))))) x@243@01 i2@242@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(pop) ; 2
(pop) ; 1
; ---------- test05 ----------
(declare-const xs@336@01 Seq<$Ref>)
(declare-const i1@337@01 Int)
(declare-const i2@338@01 Int)
(declare-const x@339@01 $Ref)
(declare-const xs@340@01 Seq<$Ref>)
(declare-const i1@341@01 Int)
(declare-const i2@342@01 Int)
(declare-const x@343@01 $Ref)
(push) ; 1
(declare-const $t@344@01 $Snap)
(assert (= $t@344@01 ($Snap.combine ($Snap.first $t@344@01) ($Snap.second $t@344@01))))
(assert (= ($Snap.first $t@344@01) $Snap.unit))
; [eval] 0 <= i1
(assert (<= 0 i1@341@01))
(assert (=
  ($Snap.second $t@344@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@344@01))
    ($Snap.second ($Snap.second $t@344@01)))))
(assert (= ($Snap.first ($Snap.second $t@344@01)) $Snap.unit))
; [eval] i1 < |xs|
; [eval] |xs|
(assert (< i1@341@01 (Seq_length xs@340@01)))
(assert (=
  ($Snap.second ($Snap.second $t@344@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@344@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@344@01))) $Snap.unit))
; [eval] 0 <= i2
(assert (<= 0 i2@342@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@344@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@344@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@344@01))))
  $Snap.unit))
; [eval] i2 < |xs|
; [eval] |xs|
(assert (< i2@342@01 (Seq_length xs@340@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))
  $Snap.unit))
; [eval] i1 != i2
(assert (not (= i1@341@01 i2@342@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))
  $Snap.unit))
; [eval] (forall j1: Int, j2: Int :: { (j1 in [0..|xs|)), (j2 in [0..|xs|)) } { (j1 in [0..|xs|)), xs[j2] } { (j2 in [0..|xs|)), xs[j1] } { xs[j1], xs[j2] } (j1 in [0..|xs|)) && ((j2 in [0..|xs|)) && j1 != j2) ==> xs[j1] != xs[j2])
(declare-const j1@345@01 Int)
(declare-const j2@346@01 Int)
(push) ; 2
; [eval] (j1 in [0..|xs|)) && ((j2 in [0..|xs|)) && j1 != j2) ==> xs[j1] != xs[j2]
; [eval] (j1 in [0..|xs|)) && ((j2 in [0..|xs|)) && j1 != j2)
; [eval] (j1 in [0..|xs|))
; [eval] [0..|xs|)
; [eval] |xs|
(push) ; 3
; [then-branch: 90 | !(j1@345@01 in [0..|xs@340@01|]) | live]
; [else-branch: 90 | j1@345@01 in [0..|xs@340@01|] | live]
(push) ; 4
; [then-branch: 90 | !(j1@345@01 in [0..|xs@340@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 90 | j1@345@01 in [0..|xs@340@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01))
; [eval] (j2 in [0..|xs|))
; [eval] [0..|xs|)
; [eval] |xs|
(push) ; 5
; [then-branch: 91 | !(j2@346@01 in [0..|xs@340@01|]) | live]
; [else-branch: 91 | j2@346@01 in [0..|xs@340@01|] | live]
(push) ; 6
; [then-branch: 91 | !(j2@346@01 in [0..|xs@340@01|])]
(assert (not (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 91 | j2@346@01 in [0..|xs@340@01|]]
(assert (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01))
; [eval] j1 != j2
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
  (not (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01))))))
(assert (or
  (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
  (not (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01))))
(push) ; 3
; [then-branch: 92 | j1@345@01 in [0..|xs@340@01|] && j2@346@01 in [0..|xs@340@01|] && j1@345@01 != j2@346@01 | live]
; [else-branch: 92 | !(j1@345@01 in [0..|xs@340@01|] && j2@346@01 in [0..|xs@340@01|] && j1@345@01 != j2@346@01) | live]
(push) ; 4
; [then-branch: 92 | j1@345@01 in [0..|xs@340@01|] && j2@346@01 in [0..|xs@340@01|] && j1@345@01 != j2@346@01]
(assert (and
  (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
  (and
    (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
    (not (= j1@345@01 j2@346@01)))))
; [eval] xs[j1] != xs[j2]
; [eval] xs[j1]
(push) ; 5
(assert (not (>= j1@345@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< j1@345@01 (Seq_length xs@340@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
; [eval] xs[j2]
(push) ; 5
(assert (not (>= j2@346@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< j2@346@01 (Seq_length xs@340@01))))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 92 | !(j1@345@01 in [0..|xs@340@01|] && j2@346@01 in [0..|xs@340@01|] && j1@345@01 != j2@346@01)]
(assert (not
  (and
    (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
    (and
      (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
      (not (= j1@345@01 j2@346@01))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
    (and
      (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
      (not (= j1@345@01 j2@346@01))))
  (and
    (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
    (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
    (not (= j1@345@01 j2@346@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
        (not (= j1@345@01 j2@346@01)))))
  (and
    (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
    (and
      (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
      (not (= j1@345@01 j2@346@01))))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j1@345@01 Int) (j2@346@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
          (not (= j1@345@01 j2@346@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
        (not (= j1@345@01 j2@346@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
            (not (= j1@345@01 j2@346@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
          (not (= j1@345@01 j2@346@01))))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01) (Seq_contains
    (Seq_range 0 (Seq_length xs@340@01))
    j2@346@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@340@01)) j1@345@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length xs@340@01))
    j2@346@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@115@12@115@106-aux|)))
(assert (forall ((j1@345@01 Int) (j2@346@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
          (not (= j1@345@01 j2@346@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
        (not (= j1@345@01 j2@346@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
            (not (= j1@345@01 j2@346@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
          (not (= j1@345@01 j2@346@01))))))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@340@01)) j1@345@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length xs@340@01))
    j2@346@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@115@12@115@106-aux|)))
(assert (forall ((j1@345@01 Int) (j2@346@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
          (not (= j1@345@01 j2@346@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
        (not (= j1@345@01 j2@346@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
            (not (= j1@345@01 j2@346@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
          (not (= j1@345@01 j2@346@01))))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01) (Seq_index
    xs@340@01
    j2@346@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@340@01)) j1@345@01) (Seq_index
    xs@340@01
    j2@346@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@115@12@115@106-aux|)))
(assert (forall ((j1@345@01 Int) (j2@346@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
          (not (= j1@345@01 j2@346@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
        (not (= j1@345@01 j2@346@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
            (not (= j1@345@01 j2@346@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
          (not (= j1@345@01 j2@346@01))))))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@340@01)) j1@345@01) (Seq_index
    xs@340@01
    j2@346@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@115@12@115@106-aux|)))
(assert (forall ((j1@345@01 Int) (j2@346@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
          (not (= j1@345@01 j2@346@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
        (not (= j1@345@01 j2@346@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
            (not (= j1@345@01 j2@346@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
          (not (= j1@345@01 j2@346@01))))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01) (Seq_index
    xs@340@01
    j1@345@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@340@01)) j2@346@01) (Seq_index
    xs@340@01
    j1@345@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@115@12@115@106-aux|)))
(assert (forall ((j1@345@01 Int) (j2@346@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
          (not (= j1@345@01 j2@346@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
        (not (= j1@345@01 j2@346@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
            (not (= j1@345@01 j2@346@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
          (not (= j1@345@01 j2@346@01))))))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@340@01)) j2@346@01) (Seq_index
    xs@340@01
    j1@345@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@115@12@115@106-aux|)))
(assert (forall ((j1@345@01 Int) (j2@346@01 Int)) (!
  (and
    (=>
      (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (or
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
          (not (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)))))
    (or
      (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
      (not (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)))
    (=>
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
          (not (= j1@345@01 j2@346@01))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
        (not (= j1@345@01 j2@346@01))))
    (or
      (not
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
          (and
            (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
            (not (= j1@345@01 j2@346@01)))))
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
        (and
          (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
          (not (= j1@345@01 j2@346@01))))))
  :pattern ((Seq_index xs@340@01 j1@345@01) (Seq_index xs@340@01 j2@346@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@115@12@115@106-aux|)))
(assert (forall ((j1@345@01 Int) (j2@346@01 Int)) (!
  (=>
    (and
      (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01)
      (and
        (Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01)
        (not (= j1@345@01 j2@346@01))))
    (not (= (Seq_index xs@340@01 j1@345@01) (Seq_index xs@340@01 j2@346@01))))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01) (Seq_contains
    (Seq_range 0 (Seq_length xs@340@01))
    j2@346@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@340@01)) j1@345@01) (Seq_contains_trigger
    (Seq_range 0 (Seq_length xs@340@01))
    j2@346@01))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j1@345@01) (Seq_index
    xs@340@01
    j2@346@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@340@01)) j1@345@01) (Seq_index
    xs@340@01
    j2@346@01))
  :pattern ((Seq_contains (Seq_range 0 (Seq_length xs@340@01)) j2@346@01) (Seq_index
    xs@340@01
    j1@345@01))
  :pattern ((Seq_contains_trigger (Seq_range 0 (Seq_length xs@340@01)) j2@346@01) (Seq_index
    xs@340@01
    j1@345@01))
  :pattern ((Seq_index xs@340@01 j1@345@01) (Seq_index xs@340@01 j2@346@01))
  :qid |prog./silicon/silver/src/test/resources/quantifiedpermissions/issues/issue_0205.vpr@115@12@115@106|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))
(declare-const j@347@01 Int)
(push) ; 2
; [eval] 0 <= j && j < |xs|
; [eval] 0 <= j
(push) ; 3
; [then-branch: 93 | !(0 <= j@347@01) | live]
; [else-branch: 93 | 0 <= j@347@01 | live]
(push) ; 4
; [then-branch: 93 | !(0 <= j@347@01)]
(assert (not (<= 0 j@347@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 93 | 0 <= j@347@01]
(assert (<= 0 j@347@01))
; [eval] j < |xs|
; [eval] |xs|
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@347@01) (not (<= 0 j@347@01))))
(assert (and (<= 0 j@347@01) (< j@347@01 (Seq_length xs@340@01))))
; [eval] xs[j]
(push) ; 3
(assert (not (>= j@347@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(pop) ; 2
(declare-fun inv@348@01 ($Ref) Int)
(declare-fun img@349@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@347@01 Int)) (!
  (=>
    (and (<= 0 j@347@01) (< j@347@01 (Seq_length xs@340@01)))
    (or (<= 0 j@347@01) (not (<= 0 j@347@01))))
  :pattern ((Seq_index xs@340@01 j@347@01))
  :qid |f-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((j1@347@01 Int) (j2@347@01 Int)) (!
  (=>
    (and
      (and (<= 0 j1@347@01) (< j1@347@01 (Seq_length xs@340@01)))
      (and (<= 0 j2@347@01) (< j2@347@01 (Seq_length xs@340@01)))
      (= (Seq_index xs@340@01 j1@347@01) (Seq_index xs@340@01 j2@347@01)))
    (= j1@347@01 j2@347@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@347@01 Int)) (!
  (=>
    (and (<= 0 j@347@01) (< j@347@01 (Seq_length xs@340@01)))
    (and
      (= (inv@348@01 (Seq_index xs@340@01 j@347@01)) j@347@01)
      (img@349@01 (Seq_index xs@340@01 j@347@01))))
  :pattern ((Seq_index xs@340@01 j@347@01))
  :qid |quant-u-287|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@349@01 r)
      (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
    (= (Seq_index xs@340@01 (inv@348@01 r)) r))
  :pattern ((inv@348@01 r))
  :qid |f-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((j@347@01 Int)) (!
  (=>
    (and (<= 0 j@347@01) (< j@347@01 (Seq_length xs@340@01)))
    (not (= (Seq_index xs@340@01 j@347@01) $Ref.null)))
  :pattern ((Seq_index xs@340@01 j@347@01))
  :qid |f-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))))
(assert (not (= x@343@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
  $Snap.unit))
; [eval] x.elems == xs
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
  xs@340@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; xs[i1].f := 0
; [eval] xs[i1]
(push) ; 3
(assert (not (>= i1@341@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@350@01 ((r $Ref)) $Perm
  (ite
    (= r (Seq_index xs@340@01 i1@341@01))
    ($Perm.min
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@350@01 r))
    $Perm.No)
  
  :qid |quant-u-289|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@350@01 r) $Perm.No)
  
  :qid |quant-u-290|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i1@341@01))
    (= (- $Perm.Write (pTaken@350@01 r)) $Perm.No))
  
  :qid |quant-u-291|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@351@01 $FVF<f>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01)) 0))
; [exec]
; assert fun04qp(x, i2) == old(fun04qp(x, i2))
; [eval] fun04qp(x, i2) == old(fun04qp(x, i2))
; [eval] fun04qp(x, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |x.elems|
; [eval] |x.elems|
(push) ; 4
(assert (not (<
  i2@342@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(assert (<
  i2@342@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
(declare-const j@352@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |x.elems|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 94 | !(0 <= j@352@01) | live]
; [else-branch: 94 | 0 <= j@352@01 | live]
(push) ; 6
; [then-branch: 94 | !(0 <= j@352@01)]
(assert (not (<= 0 j@352@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 94 | 0 <= j@352@01]
(assert (<= 0 j@352@01))
; [eval] j < |x.elems|
; [eval] |x.elems|
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@352@01) (not (<= 0 j@352@01))))
(assert (and
  (<= 0 j@352@01)
  (<
    j@352@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))))))
; [eval] (j == i ? write : none)
; [eval] j == i
(push) ; 5
; [then-branch: 95 | j@352@01 == i2@342@01 | live]
; [else-branch: 95 | j@352@01 != i2@342@01 | live]
(push) ; 6
; [then-branch: 95 | j@352@01 == i2@342@01]
(assert (= j@352@01 i2@342@01))
(pop) ; 6
(push) ; 6
; [else-branch: 95 | j@352@01 != i2@342@01]
(assert (not (= j@352@01 i2@342@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (= j@352@01 i2@342@01)) (= j@352@01 i2@342@01)))
; [eval] x.elems[j]
(push) ; 5
(assert (not (>= j@352@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@353@01 ($Ref) Int)
(declare-fun img@354@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@352@01 Int)) (!
  (=>
    (and
      (<= 0 j@352@01)
      (<
        j@352@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
    (and
      (or (<= 0 j@352@01) (not (<= 0 j@352@01)))
      (or (not (= j@352@01 i2@342@01)) (= j@352@01 i2@342@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@352@01))
  :qid |f-aux|)))
(push) ; 4
(assert (not (forall ((j@352@01 Int)) (!
  (=>
    (and
      (<= 0 j@352@01)
      (<
        j@352@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
    (or
      (= (ite (= j@352@01 i2@342@01) $Perm.Write $Perm.No) $Perm.No)
      (= j@352@01 i2@342@01)))
  
  :qid |quant-u-292|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@352@01 Int) (j2@352@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 j1@352@01)
          (<
            j1@352@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= j1@352@01 i2@342@01))
      (and
        (and
          (<= 0 j2@352@01)
          (<
            j2@352@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= j2@352@01 i2@342@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j1@352@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j2@352@01)))
    (= j1@352@01 j2@352@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@352@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@352@01)
        (<
          j@352@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (= j@352@01 i2@342@01))
    (and
      (=
        (inv@353@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j@352@01))
        j@352@01)
      (img@354@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        j@352@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@352@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@354@01 r)
      (and
        (and
          (<= 0 (inv@353@01 r))
          (<
            (inv@353@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@353@01 r) i2@342@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        (inv@353@01 r))
      r))
  :pattern ((inv@353@01 r))
  :qid |f-fctOfInv|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((j@352@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
      j@352@01)
    (Seq_index xs@340@01 j@352@01))
  
  :qid |quant-u-293|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@355@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@353@01 r))
        (<
          (inv@353@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@354@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@353@01 r))))
    ($Perm.min
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        (- $Perm.Write (pTaken@350@01 r))
        $Perm.No)
      (ite (= (inv@353@01 r) i2@342@01) $Perm.Write $Perm.No))
    $Perm.No))
(define-fun pTaken@356@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@353@01 r))
        (<
          (inv@353@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@354@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@353@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@340@01 i1@341@01)) $Perm.Write $Perm.No)
      (-
        (ite (= (inv@353@01 r) i2@342@01) $Perm.Write $Perm.No)
        (pTaken@355@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        (- $Perm.Write (pTaken@350@01 r))
        $Perm.No)
      (pTaken@355@01 r))
    $Perm.No)
  
  :qid |quant-u-295|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@355@01 r) $Perm.No)
  
  :qid |quant-u-296|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@353@01 r))
        (<
          (inv@353@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@354@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@353@01 r))))
    (=
      (-
        (ite (= (inv@353@01 r) i2@342@01) $Perm.Write $Perm.No)
        (pTaken@355@01 r))
      $Perm.No))
  
  :qid |quant-u-297|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@357@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@357@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@353@01 r))
          (<
            (inv@353@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@353@01 r) i2@342@01)
        (img@354@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@353@01 r))
          (<
            (inv@353@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@353@01 r) i2@342@01)
        (img@354@01 r))
      (Set_in r ($FVF.domain_f (as sm@357@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@357@01  $FVF<f>))))
  :qid |qp.fvfDomDef210|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@353@01 r))
          (<
            (inv@353@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@353@01 r) i2@342@01)
        (img@354@01 r))
      (= r (Seq_index xs@340@01 i1@341@01)))
    (=
      ($FVF.lookup_f (as sm@357@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@357@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@353@01 r))
          (<
            (inv@353@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@353@01 r) i2@342@01)
        (img@354@01 r))
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        (< $Perm.No (- $Perm.Write (pTaken@350@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@357@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@357@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef209|)))
(assert (fun04qp%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@357@01  $FVF<f>))))) x@343@01 i2@342@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@352@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@352@01)
        (<
          j@352@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (= j@352@01 i2@342@01))
    (and
      (=
        (inv@353@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j@352@01))
        j@352@01)
      (img@354@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        j@352@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@352@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@354@01 r)
      (and
        (and
          (<= 0 (inv@353@01 r))
          (<
            (inv@353@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@353@01 r) i2@342@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        (inv@353@01 r))
      r))
  :pattern ((inv@353@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@357@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@353@01 r))
          (<
            (inv@353@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@353@01 r) i2@342@01)
        (img@354@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@353@01 r))
          (<
            (inv@353@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@353@01 r) i2@342@01)
        (img@354@01 r))
      (Set_in r ($FVF.domain_f (as sm@357@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@357@01  $FVF<f>))))
  :qid |qp.fvfDomDef210|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@353@01 r))
          (<
            (inv@353@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@353@01 r) i2@342@01)
        (img@354@01 r))
      (= r (Seq_index xs@340@01 i1@341@01)))
    (=
      ($FVF.lookup_f (as sm@357@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@357@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef208|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@353@01 r))
          (<
            (inv@353@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@353@01 r) i2@342@01)
        (img@354@01 r))
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        (< $Perm.No (- $Perm.Write (pTaken@350@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@357@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@357@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef209|)))
(assert (and
  (<
    i2@342@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))))
  (forall ((j@352@01 Int)) (!
    (=>
      (and
        (<= 0 j@352@01)
        (<
          j@352@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (and
        (or (<= 0 j@352@01) (not (<= 0 j@352@01)))
        (or (not (= j@352@01 i2@342@01)) (= j@352@01 i2@342@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
      j@352@01))
    :qid |f-aux|))
  (fun04qp%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@357@01  $FVF<f>))))) x@343@01 i2@342@01)))
; [eval] old(fun04qp(x, i2))
; [eval] fun04qp(x, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |x.elems|
; [eval] |x.elems|
(declare-const j@358@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |x.elems|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 96 | !(0 <= j@358@01) | live]
; [else-branch: 96 | 0 <= j@358@01 | live]
(push) ; 6
; [then-branch: 96 | !(0 <= j@358@01)]
(assert (not (<= 0 j@358@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 96 | 0 <= j@358@01]
(assert (<= 0 j@358@01))
; [eval] j < |x.elems|
; [eval] |x.elems|
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@358@01) (not (<= 0 j@358@01))))
(assert (and
  (<= 0 j@358@01)
  (<
    j@358@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))))))
; [eval] (j == i ? write : none)
; [eval] j == i
(push) ; 5
; [then-branch: 97 | j@358@01 == i2@342@01 | live]
; [else-branch: 97 | j@358@01 != i2@342@01 | live]
(push) ; 6
; [then-branch: 97 | j@358@01 == i2@342@01]
(assert (= j@358@01 i2@342@01))
(pop) ; 6
(push) ; 6
; [else-branch: 97 | j@358@01 != i2@342@01]
(assert (not (= j@358@01 i2@342@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (= j@358@01 i2@342@01)) (= j@358@01 i2@342@01)))
; [eval] x.elems[j]
(push) ; 5
(assert (not (>= j@358@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@359@01 ($Ref) Int)
(declare-fun img@360@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@358@01 Int)) (!
  (=>
    (and
      (<= 0 j@358@01)
      (<
        j@358@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
    (and
      (or (<= 0 j@358@01) (not (<= 0 j@358@01)))
      (or (not (= j@358@01 i2@342@01)) (= j@358@01 i2@342@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@358@01))
  :qid |f-aux|)))
(push) ; 4
(assert (not (forall ((j@358@01 Int)) (!
  (=>
    (and
      (<= 0 j@358@01)
      (<
        j@358@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
    (or
      (= (ite (= j@358@01 i2@342@01) $Perm.Write $Perm.No) $Perm.No)
      (= j@358@01 i2@342@01)))
  
  :qid |quant-u-298|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@358@01 Int) (j2@358@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 j1@358@01)
          (<
            j1@358@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= j1@358@01 i2@342@01))
      (and
        (and
          (<= 0 j2@358@01)
          (<
            j2@358@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= j2@358@01 i2@342@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j1@358@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j2@358@01)))
    (= j1@358@01 j2@358@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@358@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@358@01)
        (<
          j@358@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (= j@358@01 i2@342@01))
    (and
      (=
        (inv@359@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j@358@01))
        j@358@01)
      (img@360@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        j@358@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@358@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@360@01 r)
      (and
        (and
          (<= 0 (inv@359@01 r))
          (<
            (inv@359@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@359@01 r) i2@342@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        (inv@359@01 r))
      r))
  :pattern ((inv@359@01 r))
  :qid |f-fctOfInv|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((j@358@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
      j@358@01)
    (Seq_index xs@340@01 j@358@01))
  
  :qid |quant-u-299|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@361@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@359@01 r))
        (<
          (inv@359@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@360@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@359@01 r))))
    ($Perm.min
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        $Perm.Write
        $Perm.No)
      (ite (= (inv@359@01 r) i2@342@01) $Perm.Write $Perm.No))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@361@01 r))
    $Perm.No)
  
  :qid |quant-u-301|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@361@01 r) $Perm.No)
  
  :qid |quant-u-302|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@359@01 r))
        (<
          (inv@359@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@360@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@359@01 r))))
    (=
      (-
        (ite (= (inv@359@01 r) i2@342@01) $Perm.Write $Perm.No)
        (pTaken@361@01 r))
      $Perm.No))
  
  :qid |quant-u-303|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@362@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@362@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@359@01 r))
          (<
            (inv@359@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@359@01 r) i2@342@01)
        (img@360@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@359@01 r))
          (<
            (inv@359@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@359@01 r) i2@342@01)
        (img@360@01 r))
      (Set_in r ($FVF.domain_f (as sm@362@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@362@01  $FVF<f>))))
  :qid |qp.fvfDomDef212|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@359@01 r))
          (<
            (inv@359@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@359@01 r) i2@342@01)
        (img@360@01 r))
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01)))))
    (=
      ($FVF.lookup_f (as sm@362@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@362@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef211|)))
(assert (fun04qp%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@362@01  $FVF<f>))))) x@343@01 i2@342@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@358@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@358@01)
        (<
          j@358@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (= j@358@01 i2@342@01))
    (and
      (=
        (inv@359@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j@358@01))
        j@358@01)
      (img@360@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        j@358@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@358@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@360@01 r)
      (and
        (and
          (<= 0 (inv@359@01 r))
          (<
            (inv@359@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@359@01 r) i2@342@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        (inv@359@01 r))
      r))
  :pattern ((inv@359@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@362@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@359@01 r))
          (<
            (inv@359@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@359@01 r) i2@342@01)
        (img@360@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@359@01 r))
          (<
            (inv@359@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@359@01 r) i2@342@01)
        (img@360@01 r))
      (Set_in r ($FVF.domain_f (as sm@362@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@362@01  $FVF<f>))))
  :qid |qp.fvfDomDef212|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@359@01 r))
          (<
            (inv@359@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@359@01 r) i2@342@01)
        (img@360@01 r))
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01)))))
    (=
      ($FVF.lookup_f (as sm@362@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@362@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef211|)))
(assert (and
  (forall ((j@358@01 Int)) (!
    (=>
      (and
        (<= 0 j@358@01)
        (<
          j@358@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (and
        (or (<= 0 j@358@01) (not (<= 0 j@358@01)))
        (or (not (= j@358@01 i2@342@01)) (= j@358@01 i2@342@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
      j@358@01))
    :qid |f-aux|))
  (fun04qp%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@362@01  $FVF<f>))))) x@343@01 i2@342@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (=
  (fun04qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@357@01  $FVF<f>))))) x@343@01 i2@342@01)
  (fun04qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@362@01  $FVF<f>))))) x@343@01 i2@342@01))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (=
  (fun04qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@357@01  $FVF<f>))))) x@343@01 i2@342@01)
  (fun04qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@362@01  $FVF<f>))))) x@343@01 i2@342@01)))
; [exec]
; xs[i2].f := 0
; [eval] xs[i2]
(push) ; 3
(assert (not (>= i2@342@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@363@01 ((r $Ref)) $Perm
  (ite
    (= r (Seq_index xs@340@01 i2@342@01))
    ($Perm.min
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        (- $Perm.Write (pTaken@350@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@364@01 ((r $Ref)) $Perm
  (ite
    (= r (Seq_index xs@340@01 i2@342@01))
    ($Perm.min
      (ite (= r (Seq_index xs@340@01 i1@341@01)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@363@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        (- $Perm.Write (pTaken@350@01 r))
        $Perm.No)
      (pTaken@363@01 r))
    $Perm.No)
  
  :qid |quant-u-305|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@363@01 r) $Perm.No)
  
  :qid |quant-u-306|))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i2@342@01))
    (= (- $Perm.Write (pTaken@363@01 r)) $Perm.No))
  
  :qid |quant-u-307|))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@365@01 $FVF<f>)
; Definitional axioms for singleton-FVF's value
(assert (= ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01)) 0))
; [exec]
; assert fun04qp(x, i2) == old(fun04qp(x, i2))
; [eval] fun04qp(x, i2) == old(fun04qp(x, i2))
; [eval] fun04qp(x, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |x.elems|
; [eval] |x.elems|
(declare-const j@366@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |x.elems|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 98 | !(0 <= j@366@01) | live]
; [else-branch: 98 | 0 <= j@366@01 | live]
(push) ; 6
; [then-branch: 98 | !(0 <= j@366@01)]
(assert (not (<= 0 j@366@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 98 | 0 <= j@366@01]
(assert (<= 0 j@366@01))
; [eval] j < |x.elems|
; [eval] |x.elems|
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@366@01) (not (<= 0 j@366@01))))
(assert (and
  (<= 0 j@366@01)
  (<
    j@366@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))))))
; [eval] (j == i ? write : none)
; [eval] j == i
(push) ; 5
; [then-branch: 99 | j@366@01 == i2@342@01 | live]
; [else-branch: 99 | j@366@01 != i2@342@01 | live]
(push) ; 6
; [then-branch: 99 | j@366@01 == i2@342@01]
(assert (= j@366@01 i2@342@01))
(pop) ; 6
(push) ; 6
; [else-branch: 99 | j@366@01 != i2@342@01]
(assert (not (= j@366@01 i2@342@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (= j@366@01 i2@342@01)) (= j@366@01 i2@342@01)))
; [eval] x.elems[j]
(push) ; 5
(assert (not (>= j@366@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@367@01 ($Ref) Int)
(declare-fun img@368@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@366@01 Int)) (!
  (=>
    (and
      (<= 0 j@366@01)
      (<
        j@366@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
    (and
      (or (<= 0 j@366@01) (not (<= 0 j@366@01)))
      (or (not (= j@366@01 i2@342@01)) (= j@366@01 i2@342@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@366@01))
  :qid |f-aux|)))
(push) ; 4
(assert (not (forall ((j@366@01 Int)) (!
  (=>
    (and
      (<= 0 j@366@01)
      (<
        j@366@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
    (or
      (= (ite (= j@366@01 i2@342@01) $Perm.Write $Perm.No) $Perm.No)
      (= j@366@01 i2@342@01)))
  
  :qid |quant-u-308|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@366@01 Int) (j2@366@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 j1@366@01)
          (<
            j1@366@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= j1@366@01 i2@342@01))
      (and
        (and
          (<= 0 j2@366@01)
          (<
            j2@366@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= j2@366@01 i2@342@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j1@366@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j2@366@01)))
    (= j1@366@01 j2@366@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@366@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@366@01)
        (<
          j@366@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (= j@366@01 i2@342@01))
    (and
      (=
        (inv@367@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j@366@01))
        j@366@01)
      (img@368@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        j@366@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@366@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@368@01 r)
      (and
        (and
          (<= 0 (inv@367@01 r))
          (<
            (inv@367@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@367@01 r) i2@342@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        (inv@367@01 r))
      r))
  :pattern ((inv@367@01 r))
  :qid |f-fctOfInv|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((j@366@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
      j@366@01)
    (Seq_index xs@340@01 j@366@01))
  
  :qid |quant-u-309|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@369@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@367@01 r))
        (<
          (inv@367@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@368@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@367@01 r))))
    ($Perm.min
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
        $Perm.No)
      (ite (= (inv@367@01 r) i2@342@01) $Perm.Write $Perm.No))
    $Perm.No))
(define-fun pTaken@370@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@367@01 r))
        (<
          (inv@367@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@368@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@367@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@340@01 i2@342@01)) $Perm.Write $Perm.No)
      (-
        (ite (= (inv@367@01 r) i2@342@01) $Perm.Write $Perm.No)
        (pTaken@369@01 r)))
    $Perm.No))
(define-fun pTaken@371@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@367@01 r))
        (<
          (inv@367@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@368@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@367@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@340@01 i1@341@01)) $Perm.Write $Perm.No)
      (-
        (-
          (ite (= (inv@367@01 r) i2@342@01) $Perm.Write $Perm.No)
          (pTaken@369@01 r))
        (pTaken@370@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
        $Perm.No)
      (pTaken@369@01 r))
    $Perm.No)
  
  :qid |quant-u-311|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@369@01 r) $Perm.No)
  
  :qid |quant-u-312|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@367@01 r))
        (<
          (inv@367@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@368@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@367@01 r))))
    (=
      (-
        (ite (= (inv@367@01 r) i2@342@01) $Perm.Write $Perm.No)
        (pTaken@369@01 r))
      $Perm.No))
  
  :qid |quant-u-313|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)
    (pTaken@370@01 (Seq_index xs@340@01 i2@342@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@367@01 r))
        (<
          (inv@367@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@368@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@367@01 r))))
    (=
      (-
        (-
          (ite (= (inv@367@01 r) i2@342@01) $Perm.Write $Perm.No)
          (pTaken@369@01 r))
        (pTaken@370@01 r))
      $Perm.No))
  
  :qid |quant-u-315|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@372@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@372@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@367@01 r))
          (<
            (inv@367@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@367@01 r) i2@342@01)
        (img@368@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@367@01 r))
          (<
            (inv@367@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@367@01 r) i2@342@01)
        (img@368@01 r))
      (Set_in r ($FVF.domain_f (as sm@372@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@372@01  $FVF<f>))))
  :qid |qp.fvfDomDef216|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@367@01 r))
          (<
            (inv@367@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@367@01 r) i2@342@01)
        (img@368@01 r))
      (= r (Seq_index xs@340@01 i2@342@01)))
    (=
      ($FVF.lookup_f (as sm@372@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@372@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef213|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@367@01 r))
          (<
            (inv@367@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@367@01 r) i2@342@01)
        (img@368@01 r))
      (= r (Seq_index xs@340@01 i1@341@01)))
    (=
      ($FVF.lookup_f (as sm@372@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@372@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@367@01 r))
          (<
            (inv@367@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@367@01 r) i2@342@01)
        (img@368@01 r))
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@372@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@372@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef215|)))
(assert (fun04qp%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@372@01  $FVF<f>))))) x@343@01 i2@342@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@366@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@366@01)
        (<
          j@366@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (= j@366@01 i2@342@01))
    (and
      (=
        (inv@367@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j@366@01))
        j@366@01)
      (img@368@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        j@366@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@366@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@368@01 r)
      (and
        (and
          (<= 0 (inv@367@01 r))
          (<
            (inv@367@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@367@01 r) i2@342@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        (inv@367@01 r))
      r))
  :pattern ((inv@367@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@372@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@367@01 r))
          (<
            (inv@367@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@367@01 r) i2@342@01)
        (img@368@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@367@01 r))
          (<
            (inv@367@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@367@01 r) i2@342@01)
        (img@368@01 r))
      (Set_in r ($FVF.domain_f (as sm@372@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@372@01  $FVF<f>))))
  :qid |qp.fvfDomDef216|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@367@01 r))
          (<
            (inv@367@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@367@01 r) i2@342@01)
        (img@368@01 r))
      (= r (Seq_index xs@340@01 i2@342@01)))
    (=
      ($FVF.lookup_f (as sm@372@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@372@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef213|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@367@01 r))
          (<
            (inv@367@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@367@01 r) i2@342@01)
        (img@368@01 r))
      (= r (Seq_index xs@340@01 i1@341@01)))
    (=
      ($FVF.lookup_f (as sm@372@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@372@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@367@01 r))
          (<
            (inv@367@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@367@01 r) i2@342@01)
        (img@368@01 r))
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@372@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@372@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef215|)))
(assert (and
  (forall ((j@366@01 Int)) (!
    (=>
      (and
        (<= 0 j@366@01)
        (<
          j@366@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (and
        (or (<= 0 j@366@01) (not (<= 0 j@366@01)))
        (or (not (= j@366@01 i2@342@01)) (= j@366@01 i2@342@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
      j@366@01))
    :qid |f-aux|))
  (fun04qp%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@372@01  $FVF<f>))))) x@343@01 i2@342@01)))
; [eval] old(fun04qp(x, i2))
; [eval] fun04qp(x, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |x.elems|
; [eval] |x.elems|
(declare-const j@373@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |x.elems|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 100 | !(0 <= j@373@01) | live]
; [else-branch: 100 | 0 <= j@373@01 | live]
(push) ; 6
; [then-branch: 100 | !(0 <= j@373@01)]
(assert (not (<= 0 j@373@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 100 | 0 <= j@373@01]
(assert (<= 0 j@373@01))
; [eval] j < |x.elems|
; [eval] |x.elems|
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@373@01) (not (<= 0 j@373@01))))
(assert (and
  (<= 0 j@373@01)
  (<
    j@373@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))))))
; [eval] (j == i ? write : none)
; [eval] j == i
(push) ; 5
; [then-branch: 101 | j@373@01 == i2@342@01 | live]
; [else-branch: 101 | j@373@01 != i2@342@01 | live]
(push) ; 6
; [then-branch: 101 | j@373@01 == i2@342@01]
(assert (= j@373@01 i2@342@01))
(pop) ; 6
(push) ; 6
; [else-branch: 101 | j@373@01 != i2@342@01]
(assert (not (= j@373@01 i2@342@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (= j@373@01 i2@342@01)) (= j@373@01 i2@342@01)))
; [eval] x.elems[j]
(push) ; 5
(assert (not (>= j@373@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@374@01 ($Ref) Int)
(declare-fun img@375@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@373@01 Int)) (!
  (=>
    (and
      (<= 0 j@373@01)
      (<
        j@373@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
    (and
      (or (<= 0 j@373@01) (not (<= 0 j@373@01)))
      (or (not (= j@373@01 i2@342@01)) (= j@373@01 i2@342@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@373@01))
  :qid |f-aux|)))
(push) ; 4
(assert (not (forall ((j@373@01 Int)) (!
  (=>
    (and
      (<= 0 j@373@01)
      (<
        j@373@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
    (or
      (= (ite (= j@373@01 i2@342@01) $Perm.Write $Perm.No) $Perm.No)
      (= j@373@01 i2@342@01)))
  
  :qid |quant-u-316|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@373@01 Int) (j2@373@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 j1@373@01)
          (<
            j1@373@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= j1@373@01 i2@342@01))
      (and
        (and
          (<= 0 j2@373@01)
          (<
            j2@373@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= j2@373@01 i2@342@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j1@373@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j2@373@01)))
    (= j1@373@01 j2@373@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@373@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@373@01)
        (<
          j@373@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (= j@373@01 i2@342@01))
    (and
      (=
        (inv@374@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j@373@01))
        j@373@01)
      (img@375@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        j@373@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@373@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@375@01 r)
      (and
        (and
          (<= 0 (inv@374@01 r))
          (<
            (inv@374@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@374@01 r) i2@342@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        (inv@374@01 r))
      r))
  :pattern ((inv@374@01 r))
  :qid |f-fctOfInv|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((j@373@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
      j@373@01)
    (Seq_index xs@340@01 j@373@01))
  
  :qid |quant-u-317|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@376@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@374@01 r))
        (<
          (inv@374@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@375@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@374@01 r))))
    ($Perm.min
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        $Perm.Write
        $Perm.No)
      (ite (= (inv@374@01 r) i2@342@01) $Perm.Write $Perm.No))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@376@01 r))
    $Perm.No)
  
  :qid |quant-u-319|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@376@01 r) $Perm.No)
  
  :qid |quant-u-320|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@374@01 r))
        (<
          (inv@374@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@375@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@374@01 r))))
    (=
      (-
        (ite (= (inv@374@01 r) i2@342@01) $Perm.Write $Perm.No)
        (pTaken@376@01 r))
      $Perm.No))
  
  :qid |quant-u-321|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@377@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@377@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@374@01 r))
          (<
            (inv@374@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@374@01 r) i2@342@01)
        (img@375@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@374@01 r))
          (<
            (inv@374@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@374@01 r) i2@342@01)
        (img@375@01 r))
      (Set_in r ($FVF.domain_f (as sm@377@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@377@01  $FVF<f>))))
  :qid |qp.fvfDomDef218|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@374@01 r))
          (<
            (inv@374@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@374@01 r) i2@342@01)
        (img@375@01 r))
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01)))))
    (=
      ($FVF.lookup_f (as sm@377@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@377@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef217|)))
(assert (fun04qp%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@377@01  $FVF<f>))))) x@343@01 i2@342@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@373@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@373@01)
        (<
          j@373@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (= j@373@01 i2@342@01))
    (and
      (=
        (inv@374@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j@373@01))
        j@373@01)
      (img@375@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        j@373@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@373@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@375@01 r)
      (and
        (and
          (<= 0 (inv@374@01 r))
          (<
            (inv@374@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@374@01 r) i2@342@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        (inv@374@01 r))
      r))
  :pattern ((inv@374@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@377@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@374@01 r))
          (<
            (inv@374@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@374@01 r) i2@342@01)
        (img@375@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@374@01 r))
          (<
            (inv@374@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@374@01 r) i2@342@01)
        (img@375@01 r))
      (Set_in r ($FVF.domain_f (as sm@377@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@377@01  $FVF<f>))))
  :qid |qp.fvfDomDef218|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@374@01 r))
          (<
            (inv@374@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@374@01 r) i2@342@01)
        (img@375@01 r))
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01)))))
    (=
      ($FVF.lookup_f (as sm@377@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@377@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef217|)))
(assert (and
  (forall ((j@373@01 Int)) (!
    (=>
      (and
        (<= 0 j@373@01)
        (<
          j@373@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (and
        (or (<= 0 j@373@01) (not (<= 0 j@373@01)))
        (or (not (= j@373@01 i2@342@01)) (= j@373@01 i2@342@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
      j@373@01))
    :qid |f-aux|))
  (fun04qp%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@377@01  $FVF<f>))))) x@343@01 i2@342@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (=
  (fun04qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@372@01  $FVF<f>))))) x@343@01 i2@342@01)
  (fun04qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@377@01  $FVF<f>))))) x@343@01 i2@342@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01))
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01))
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
  (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))))
(declare-const sm@378@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i2@342@01))
    (=
      ($FVF.lookup_f (as sm@378@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@378@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef219|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i1@341@01))
    (=
      ($FVF.lookup_f (as sm@378@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@378@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef220|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@378@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@378@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef221|)))
(declare-const pm@379@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@379@01  $FPM) r)
    (+
      (+
        (ite (= r (Seq_index xs@340@01 i2@342@01)) $Perm.Write $Perm.No)
        (ite (= r (Seq_index xs@340@01 i1@341@01)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@379@01  $FPM) r))
  :qid |qp.resPrmSumDef222|)))
(assert (<=
  ($FVF.perm_f (as pm@379@01  $FPM) (Seq_index xs@340@01 i2@342@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@379@01  $FPM) (Seq_index xs@340@01 i1@341@01))
  $Perm.Write))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@379@01  $FPM) r) $Perm.Write)
  :pattern ((inv@348@01 r))
  :qid |qp-fld-prm-bnd|)))
; [eval] fun04qp(x, i2) == old(fun04qp(x, i2))
; [eval] fun04qp(x, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |x.elems|
; [eval] |x.elems|
(declare-const j@380@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |x.elems|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 102 | !(0 <= j@380@01) | live]
; [else-branch: 102 | 0 <= j@380@01 | live]
(push) ; 6
; [then-branch: 102 | !(0 <= j@380@01)]
(assert (not (<= 0 j@380@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01))
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01))
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
  (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))))
(declare-const sm@381@01 $FVF<f>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@381@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@381@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef223|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i1@341@01))
    (=
      ($FVF.lookup_f (as sm@381@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@381@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef224|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i2@342@01))
    (=
      ($FVF.lookup_f (as sm@381@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@381@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef225|)))
(declare-const pm@382@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@382@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@349@01 r)
            (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
          (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@340@01 i1@341@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@340@01 i2@342@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@382@01  $FPM) r))
  :qid |qp.resPrmSumDef226|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@382@01  $FPM) r) $Perm.Write)
  :pattern ((inv@348@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<=
  ($FVF.perm_f (as pm@382@01  $FPM) (Seq_index xs@340@01 i1@341@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@382@01  $FPM) (Seq_index xs@340@01 i2@342@01))
  $Perm.Write))
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 102 | 0 <= j@380@01]
(assert (<= 0 j@380@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01))
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01))
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
  (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))))
(declare-const sm@383@01 $FVF<f>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@383@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@383@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef227|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i1@341@01))
    (=
      ($FVF.lookup_f (as sm@383@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@383@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef228|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i2@342@01))
    (=
      ($FVF.lookup_f (as sm@383@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@383@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef229|)))
(declare-const pm@384@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@384@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@349@01 r)
            (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
          (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@340@01 i1@341@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@340@01 i2@342@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@384@01  $FPM) r))
  :qid |qp.resPrmSumDef230|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@384@01  $FPM) r) $Perm.Write)
  :pattern ((inv@348@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<=
  ($FVF.perm_f (as pm@384@01  $FPM) (Seq_index xs@340@01 i1@341@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@384@01  $FPM) (Seq_index xs@340@01 i2@342@01))
  $Perm.Write))
; [eval] j < |x.elems|
; [eval] |x.elems|
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@381@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@381@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef223|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i1@341@01))
    (=
      ($FVF.lookup_f (as sm@381@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@381@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef224|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i2@342@01))
    (=
      ($FVF.lookup_f (as sm@381@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@381@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef225|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@382@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@349@01 r)
            (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
          (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@340@01 i1@341@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@340@01 i2@342@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@382@01  $FPM) r))
  :qid |qp.resPrmSumDef226|)))
(assert (=>
  (not (<= 0 j@380@01))
  (and
    (not (<= 0 j@380@01))
    (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
    (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@382@01  $FPM) r) $Perm.Write)
      :pattern ((inv@348@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@382@01  $FPM) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@382@01  $FPM) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write))))
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@383@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@383@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef227|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i1@341@01))
    (=
      ($FVF.lookup_f (as sm@383@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@383@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef228|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i2@342@01))
    (=
      ($FVF.lookup_f (as sm@383@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@383@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef229|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@384@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@349@01 r)
            (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
          (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@340@01 i1@341@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@340@01 i2@342@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@384@01  $FPM) r))
  :qid |qp.resPrmSumDef230|)))
(assert (=>
  (<= 0 j@380@01)
  (and
    (<= 0 j@380@01)
    (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
    (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@384@01  $FPM) r) $Perm.Write)
      :pattern ((inv@348@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@384@01  $FPM) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@384@01  $FPM) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write))))
(assert (or (<= 0 j@380@01) (not (<= 0 j@380@01))))
(assert (and
  (<= 0 j@380@01)
  (<
    j@380@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))))))
; [eval] (j == i ? write : none)
; [eval] j == i
(set-option :timeout 0)
(push) ; 5
; [then-branch: 103 | j@380@01 == i2@342@01 | live]
; [else-branch: 103 | j@380@01 != i2@342@01 | live]
(push) ; 6
; [then-branch: 103 | j@380@01 == i2@342@01]
(assert (= j@380@01 i2@342@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01))
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01))
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
  (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@384@01  $FPM) r) $Perm.Write)
  :pattern ((inv@348@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<=
  ($FVF.perm_f (as pm@384@01  $FPM) (Seq_index xs@340@01 i1@341@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@384@01  $FPM) (Seq_index xs@340@01 i2@342@01))
  $Perm.Write))
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 103 | j@380@01 != i2@342@01]
(assert (not (= j@380@01 i2@342@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01))
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01))
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
  (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@384@01  $FPM) r) $Perm.Write)
  :pattern ((inv@348@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<=
  ($FVF.perm_f (as pm@384@01  $FPM) (Seq_index xs@340@01 i1@341@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@384@01  $FPM) (Seq_index xs@340@01 i2@342@01))
  $Perm.Write))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (= j@380@01 i2@342@01)
  (and
    (= j@380@01 i2@342@01)
    (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
    (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@384@01  $FPM) r) $Perm.Write)
      :pattern ((inv@348@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@384@01  $FPM) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@384@01  $FPM) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write))))
; Joined path conditions
(assert (=>
  (not (= j@380@01 i2@342@01))
  (and
    (not (= j@380@01 i2@342@01))
    (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
    (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@384@01  $FPM) r) $Perm.Write)
      :pattern ((inv@348@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@384@01  $FPM) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@384@01  $FPM) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write))))
(assert (or (not (= j@380@01 i2@342@01)) (= j@380@01 i2@342@01)))
; [eval] x.elems[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@380@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@385@01 ($Ref) Int)
(declare-fun img@386@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@381@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@381@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef223|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i1@341@01))
    (=
      ($FVF.lookup_f (as sm@381@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@381@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef224|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i2@342@01))
    (=
      ($FVF.lookup_f (as sm@381@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@381@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef225|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@382@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@349@01 r)
            (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
          (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@340@01 i1@341@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@340@01 i2@342@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@382@01  $FPM) r))
  :qid |qp.resPrmSumDef226|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@383@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@383@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef227|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i1@341@01))
    (=
      ($FVF.lookup_f (as sm@383@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@383@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef228|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i2@342@01))
    (=
      ($FVF.lookup_f (as sm@383@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@383@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef229|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@384@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@349@01 r)
            (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
          (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@340@01 i1@341@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@340@01 i2@342@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@384@01  $FPM) r))
  :qid |qp.resPrmSumDef230|)))
; Nested auxiliary terms: non-globals
(assert (forall ((j@380@01 Int)) (!
  (=>
    (and
      (<= 0 j@380@01)
      (<
        j@380@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
    (and
      (=>
        (not (<= 0 j@380@01))
        (and
          (not (<= 0 j@380@01))
          (not
            (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
          (not
            (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
          (forall ((r $Ref)) (!
            (<= ($FVF.perm_f (as pm@382@01  $FPM) r) $Perm.Write)
            :pattern ((inv@348@01 r))
            :qid |qp-fld-prm-bnd|))
          (<=
            ($FVF.perm_f (as pm@382@01  $FPM) (Seq_index xs@340@01 i1@341@01))
            $Perm.Write)
          (<=
            ($FVF.perm_f (as pm@382@01  $FPM) (Seq_index xs@340@01 i2@342@01))
            $Perm.Write)))
      (=>
        (<= 0 j@380@01)
        (and
          (<= 0 j@380@01)
          (not
            (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
          (not
            (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
          (forall ((r $Ref)) (!
            (<= ($FVF.perm_f (as pm@384@01  $FPM) r) $Perm.Write)
            :pattern ((inv@348@01 r))
            :qid |qp-fld-prm-bnd|))
          (<=
            ($FVF.perm_f (as pm@384@01  $FPM) (Seq_index xs@340@01 i1@341@01))
            $Perm.Write)
          (<=
            ($FVF.perm_f (as pm@384@01  $FPM) (Seq_index xs@340@01 i2@342@01))
            $Perm.Write)))
      (or (<= 0 j@380@01) (not (<= 0 j@380@01)))
      (=>
        (= j@380@01 i2@342@01)
        (and
          (= j@380@01 i2@342@01)
          (not
            (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
          (not
            (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
          (forall ((r $Ref)) (!
            (<= ($FVF.perm_f (as pm@384@01  $FPM) r) $Perm.Write)
            :pattern ((inv@348@01 r))
            :qid |qp-fld-prm-bnd|))
          (<=
            ($FVF.perm_f (as pm@384@01  $FPM) (Seq_index xs@340@01 i1@341@01))
            $Perm.Write)
          (<=
            ($FVF.perm_f (as pm@384@01  $FPM) (Seq_index xs@340@01 i2@342@01))
            $Perm.Write)))
      (=>
        (not (= j@380@01 i2@342@01))
        (and
          (not (= j@380@01 i2@342@01))
          (not
            (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
          (not
            (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
          (forall ((r $Ref)) (!
            (<= ($FVF.perm_f (as pm@384@01  $FPM) r) $Perm.Write)
            :pattern ((inv@348@01 r))
            :qid |qp-fld-prm-bnd|))
          (<=
            ($FVF.perm_f (as pm@384@01  $FPM) (Seq_index xs@340@01 i1@341@01))
            $Perm.Write)
          (<=
            ($FVF.perm_f (as pm@384@01  $FPM) (Seq_index xs@340@01 i2@342@01))
            $Perm.Write)))
      (or (not (= j@380@01 i2@342@01)) (= j@380@01 i2@342@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@380@01))
  :qid |f-aux|)))
(push) ; 4
(assert (not (forall ((j@380@01 Int)) (!
  (=>
    (and
      (<= 0 j@380@01)
      (<
        j@380@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
    (or
      (= (ite (= j@380@01 i2@342@01) $Perm.Write $Perm.No) $Perm.No)
      (= j@380@01 i2@342@01)))
  
  :qid |quant-u-322|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@380@01 Int) (j2@380@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 j1@380@01)
          (<
            j1@380@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= j1@380@01 i2@342@01))
      (and
        (and
          (<= 0 j2@380@01)
          (<
            j2@380@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= j2@380@01 i2@342@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j1@380@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j2@380@01)))
    (= j1@380@01 j2@380@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@380@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@380@01)
        (<
          j@380@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (= j@380@01 i2@342@01))
    (and
      (=
        (inv@385@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j@380@01))
        j@380@01)
      (img@386@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        j@380@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@380@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@386@01 r)
      (and
        (and
          (<= 0 (inv@385@01 r))
          (<
            (inv@385@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@385@01 r) i2@342@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        (inv@385@01 r))
      r))
  :pattern ((inv@385@01 r))
  :qid |f-fctOfInv|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((j@380@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
      j@380@01)
    (Seq_index xs@340@01 j@380@01))
  
  :qid |quant-u-323|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@387@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@385@01 r))
        (<
          (inv@385@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@386@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@385@01 r))))
    ($Perm.min
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
        $Perm.No)
      (ite (= (inv@385@01 r) i2@342@01) $Perm.Write $Perm.No))
    $Perm.No))
(define-fun pTaken@388@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@385@01 r))
        (<
          (inv@385@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@386@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@385@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@340@01 i1@341@01)) $Perm.Write $Perm.No)
      (-
        (ite (= (inv@385@01 r) i2@342@01) $Perm.Write $Perm.No)
        (pTaken@387@01 r)))
    $Perm.No))
(define-fun pTaken@389@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@385@01 r))
        (<
          (inv@385@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@386@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@385@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@340@01 i2@342@01)) $Perm.Write $Perm.No)
      (-
        (-
          (ite (= (inv@385@01 r) i2@342@01) $Perm.Write $Perm.No)
          (pTaken@387@01 r))
        (pTaken@388@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
        $Perm.No)
      (pTaken@387@01 r))
    $Perm.No)
  
  :qid |quant-u-325|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@387@01 r) $Perm.No)
  
  :qid |quant-u-326|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@385@01 r))
        (<
          (inv@385@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@386@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@385@01 r))))
    (=
      (-
        (ite (= (inv@385@01 r) i2@342@01) $Perm.Write $Perm.No)
        (pTaken@387@01 r))
      $Perm.No))
  
  :qid |quant-u-327|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)
    (pTaken@388@01 (Seq_index xs@340@01 i1@341@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@388@01 r) $Perm.No)
  
  :qid |quant-u-329|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@385@01 r))
        (<
          (inv@385@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@386@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@385@01 r))))
    (=
      (-
        (-
          (ite (= (inv@385@01 r) i2@342@01) $Perm.Write $Perm.No)
          (pTaken@387@01 r))
        (pTaken@388@01 r))
      $Perm.No))
  
  :qid |quant-u-330|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)
    (pTaken@389@01 (Seq_index xs@340@01 i2@342@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@385@01 r))
        (<
          (inv@385@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@386@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@385@01 r))))
    (=
      (-
        (-
          (-
            (ite (= (inv@385@01 r) i2@342@01) $Perm.Write $Perm.No)
            (pTaken@387@01 r))
          (pTaken@388@01 r))
        (pTaken@389@01 r))
      $Perm.No))
  
  :qid |quant-u-332|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@390@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@390@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@385@01 r))
          (<
            (inv@385@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@385@01 r) i2@342@01)
        (img@386@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@385@01 r))
          (<
            (inv@385@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@385@01 r) i2@342@01)
        (img@386@01 r))
      (Set_in r ($FVF.domain_f (as sm@390@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@390@01  $FVF<f>))))
  :qid |qp.fvfDomDef234|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@385@01 r))
          (<
            (inv@385@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@385@01 r) i2@342@01)
        (img@386@01 r))
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@390@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@390@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef231|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@385@01 r))
          (<
            (inv@385@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@385@01 r) i2@342@01)
        (img@386@01 r))
      (= r (Seq_index xs@340@01 i1@341@01)))
    (=
      ($FVF.lookup_f (as sm@390@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@390@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef232|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@385@01 r))
          (<
            (inv@385@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@385@01 r) i2@342@01)
        (img@386@01 r))
      (= r (Seq_index xs@340@01 i2@342@01)))
    (=
      ($FVF.lookup_f (as sm@390@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@390@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef233|)))
(assert (fun04qp%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@390@01  $FVF<f>))))) x@343@01 i2@342@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@381@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@381@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef223|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i1@341@01))
    (=
      ($FVF.lookup_f (as sm@381@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@381@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef224|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i2@342@01))
    (=
      ($FVF.lookup_f (as sm@381@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@381@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef225|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@382@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@349@01 r)
            (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
          (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@340@01 i1@341@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@340@01 i2@342@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@382@01  $FPM) r))
  :qid |qp.resPrmSumDef226|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@383@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@383@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef227|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i1@341@01))
    (=
      ($FVF.lookup_f (as sm@383@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@383@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef228|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i2@342@01))
    (=
      ($FVF.lookup_f (as sm@383@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@383@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef229|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@384@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@349@01 r)
            (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
          (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@340@01 i1@341@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@340@01 i2@342@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@384@01  $FPM) r))
  :qid |qp.resPrmSumDef230|)))
(assert (forall ((j@380@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@380@01)
        (<
          j@380@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (= j@380@01 i2@342@01))
    (and
      (=
        (inv@385@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j@380@01))
        j@380@01)
      (img@386@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        j@380@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@380@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@386@01 r)
      (and
        (and
          (<= 0 (inv@385@01 r))
          (<
            (inv@385@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@385@01 r) i2@342@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        (inv@385@01 r))
      r))
  :pattern ((inv@385@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@390@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@385@01 r))
          (<
            (inv@385@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@385@01 r) i2@342@01)
        (img@386@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@385@01 r))
          (<
            (inv@385@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@385@01 r) i2@342@01)
        (img@386@01 r))
      (Set_in r ($FVF.domain_f (as sm@390@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@390@01  $FVF<f>))))
  :qid |qp.fvfDomDef234|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@385@01 r))
          (<
            (inv@385@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@385@01 r) i2@342@01)
        (img@386@01 r))
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@390@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@390@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef231|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@385@01 r))
          (<
            (inv@385@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@385@01 r) i2@342@01)
        (img@386@01 r))
      (= r (Seq_index xs@340@01 i1@341@01)))
    (=
      ($FVF.lookup_f (as sm@390@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@390@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef232|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@385@01 r))
          (<
            (inv@385@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@385@01 r) i2@342@01)
        (img@386@01 r))
      (= r (Seq_index xs@340@01 i2@342@01)))
    (=
      ($FVF.lookup_f (as sm@390@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@390@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef233|)))
(assert (and
  (forall ((j@380@01 Int)) (!
    (=>
      (and
        (<= 0 j@380@01)
        (<
          j@380@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (and
        (=>
          (not (<= 0 j@380@01))
          (and
            (not (<= 0 j@380@01))
            (not
              (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
            (not
              (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@382@01  $FPM) r) $Perm.Write)
              :pattern ((inv@348@01 r))
              :qid |qp-fld-prm-bnd|))
            (<=
              ($FVF.perm_f (as pm@382@01  $FPM) (Seq_index xs@340@01 i1@341@01))
              $Perm.Write)
            (<=
              ($FVF.perm_f (as pm@382@01  $FPM) (Seq_index xs@340@01 i2@342@01))
              $Perm.Write)))
        (=>
          (<= 0 j@380@01)
          (and
            (<= 0 j@380@01)
            (not
              (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
            (not
              (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@384@01  $FPM) r) $Perm.Write)
              :pattern ((inv@348@01 r))
              :qid |qp-fld-prm-bnd|))
            (<=
              ($FVF.perm_f (as pm@384@01  $FPM) (Seq_index xs@340@01 i1@341@01))
              $Perm.Write)
            (<=
              ($FVF.perm_f (as pm@384@01  $FPM) (Seq_index xs@340@01 i2@342@01))
              $Perm.Write)))
        (or (<= 0 j@380@01) (not (<= 0 j@380@01)))
        (=>
          (= j@380@01 i2@342@01)
          (and
            (= j@380@01 i2@342@01)
            (not
              (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
            (not
              (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@384@01  $FPM) r) $Perm.Write)
              :pattern ((inv@348@01 r))
              :qid |qp-fld-prm-bnd|))
            (<=
              ($FVF.perm_f (as pm@384@01  $FPM) (Seq_index xs@340@01 i1@341@01))
              $Perm.Write)
            (<=
              ($FVF.perm_f (as pm@384@01  $FPM) (Seq_index xs@340@01 i2@342@01))
              $Perm.Write)))
        (=>
          (not (= j@380@01 i2@342@01))
          (and
            (not (= j@380@01 i2@342@01))
            (not
              (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
            (not
              (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@384@01  $FPM) r) $Perm.Write)
              :pattern ((inv@348@01 r))
              :qid |qp-fld-prm-bnd|))
            (<=
              ($FVF.perm_f (as pm@384@01  $FPM) (Seq_index xs@340@01 i1@341@01))
              $Perm.Write)
            (<=
              ($FVF.perm_f (as pm@384@01  $FPM) (Seq_index xs@340@01 i2@342@01))
              $Perm.Write)))
        (or (not (= j@380@01 i2@342@01)) (= j@380@01 i2@342@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
      j@380@01))
    :qid |f-aux|))
  (fun04qp%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@390@01  $FVF<f>))))) x@343@01 i2@342@01)))
; [eval] old(fun04qp(x, i2))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(declare-const sm@391@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@349@01 r)
      (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
    (=
      ($FVF.lookup_f (as sm@391@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@391@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef235|)))
(declare-const pm@392@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@392@01  $FPM) r)
    (ite
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_f (as pm@392@01  $FPM) r))
  :qid |qp.resPrmSumDef236|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@392@01  $FPM) r) $Perm.Write)
  :pattern ((inv@348@01 r))
  :qid |qp-fld-prm-bnd|)))
; [eval] fun04qp(x, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |x.elems|
; [eval] |x.elems|
(declare-const j@393@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |x.elems|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 104 | !(0 <= j@393@01) | live]
; [else-branch: 104 | 0 <= j@393@01 | live]
(push) ; 6
; [then-branch: 104 | !(0 <= j@393@01)]
(assert (not (<= 0 j@393@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 104 | 0 <= j@393@01]
(assert (<= 0 j@393@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j < |x.elems|
; [eval] |x.elems|
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@393@01) (not (<= 0 j@393@01))))
(assert (and
  (<= 0 j@393@01)
  (<
    j@393@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))))))
; [eval] (j == i ? write : none)
; [eval] j == i
(set-option :timeout 0)
(push) ; 5
; [then-branch: 105 | j@393@01 == i2@342@01 | live]
; [else-branch: 105 | j@393@01 != i2@342@01 | live]
(push) ; 6
; [then-branch: 105 | j@393@01 == i2@342@01]
(assert (= j@393@01 i2@342@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 105 | j@393@01 != i2@342@01]
(assert (not (= j@393@01 i2@342@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (= j@393@01 i2@342@01)) (= j@393@01 i2@342@01)))
; [eval] x.elems[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@393@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@394@01 ($Ref) Int)
(declare-fun img@395@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@393@01 Int)) (!
  (=>
    (and
      (<= 0 j@393@01)
      (<
        j@393@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
    (and
      (or (<= 0 j@393@01) (not (<= 0 j@393@01)))
      (or (not (= j@393@01 i2@342@01)) (= j@393@01 i2@342@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@393@01))
  :qid |f-aux|)))
(push) ; 4
(assert (not (forall ((j@393@01 Int)) (!
  (=>
    (and
      (<= 0 j@393@01)
      (<
        j@393@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
    (or
      (= (ite (= j@393@01 i2@342@01) $Perm.Write $Perm.No) $Perm.No)
      (= j@393@01 i2@342@01)))
  
  :qid |quant-u-333|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@393@01 Int) (j2@393@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 j1@393@01)
          (<
            j1@393@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= j1@393@01 i2@342@01))
      (and
        (and
          (<= 0 j2@393@01)
          (<
            j2@393@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= j2@393@01 i2@342@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j1@393@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j2@393@01)))
    (= j1@393@01 j2@393@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@393@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@393@01)
        (<
          j@393@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (= j@393@01 i2@342@01))
    (and
      (=
        (inv@394@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j@393@01))
        j@393@01)
      (img@395@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        j@393@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@393@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@395@01 r)
      (and
        (and
          (<= 0 (inv@394@01 r))
          (<
            (inv@394@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@394@01 r) i2@342@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        (inv@394@01 r))
      r))
  :pattern ((inv@394@01 r))
  :qid |f-fctOfInv|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((j@393@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
      j@393@01)
    (Seq_index xs@340@01 j@393@01))
  
  :qid |quant-u-334|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@396@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@394@01 r))
        (<
          (inv@394@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@395@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@394@01 r))))
    ($Perm.min
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        $Perm.Write
        $Perm.No)
      (ite (= (inv@394@01 r) i2@342@01) $Perm.Write $Perm.No))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@396@01 r))
    $Perm.No)
  
  :qid |quant-u-336|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@396@01 r) $Perm.No)
  
  :qid |quant-u-337|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@394@01 r))
        (<
          (inv@394@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@395@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@394@01 r))))
    (=
      (-
        (ite (= (inv@394@01 r) i2@342@01) $Perm.Write $Perm.No)
        (pTaken@396@01 r))
      $Perm.No))
  
  :qid |quant-u-338|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@397@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@397@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@394@01 r))
          (<
            (inv@394@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@394@01 r) i2@342@01)
        (img@395@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@394@01 r))
          (<
            (inv@394@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@394@01 r) i2@342@01)
        (img@395@01 r))
      (Set_in r ($FVF.domain_f (as sm@397@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@397@01  $FVF<f>))))
  :qid |qp.fvfDomDef238|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@394@01 r))
          (<
            (inv@394@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@394@01 r) i2@342@01)
        (img@395@01 r))
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01)))))
    (=
      ($FVF.lookup_f (as sm@397@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@397@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef237|)))
(assert (fun04qp%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@397@01  $FVF<f>))))) x@343@01 i2@342@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@393@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@393@01)
        (<
          j@393@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (= j@393@01 i2@342@01))
    (and
      (=
        (inv@394@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j@393@01))
        j@393@01)
      (img@395@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        j@393@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@393@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@395@01 r)
      (and
        (and
          (<= 0 (inv@394@01 r))
          (<
            (inv@394@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@394@01 r) i2@342@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        (inv@394@01 r))
      r))
  :pattern ((inv@394@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@397@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@394@01 r))
          (<
            (inv@394@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@394@01 r) i2@342@01)
        (img@395@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@394@01 r))
          (<
            (inv@394@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@394@01 r) i2@342@01)
        (img@395@01 r))
      (Set_in r ($FVF.domain_f (as sm@397@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@397@01  $FVF<f>))))
  :qid |qp.fvfDomDef238|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@394@01 r))
          (<
            (inv@394@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@394@01 r) i2@342@01)
        (img@395@01 r))
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01)))))
    (=
      ($FVF.lookup_f (as sm@397@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@397@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef237|)))
(assert (and
  (forall ((j@393@01 Int)) (!
    (=>
      (and
        (<= 0 j@393@01)
        (<
          j@393@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (and
        (or (<= 0 j@393@01) (not (<= 0 j@393@01)))
        (or (not (= j@393@01 i2@342@01)) (= j@393@01 i2@342@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
      j@393@01))
    :qid |f-aux|))
  (fun04qp%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@397@01  $FVF<f>))))) x@343@01 i2@342@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (=
  (fun04qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@390@01  $FVF<f>))))) x@343@01 i2@342@01)
  (fun04qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@397@01  $FVF<f>))))) x@343@01 i2@342@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01))
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01))
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
  (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))))
(declare-const sm@398@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i2@342@01))
    (=
      ($FVF.lookup_f (as sm@398@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@398@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef239|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i1@341@01))
    (=
      ($FVF.lookup_f (as sm@398@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@398@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef240|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@398@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@398@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef241|)))
(declare-const pm@399@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@399@01  $FPM) r)
    (+
      (+
        (ite (= r (Seq_index xs@340@01 i2@342@01)) $Perm.Write $Perm.No)
        (ite (= r (Seq_index xs@340@01 i1@341@01)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_f (as pm@399@01  $FPM) r))
  :qid |qp.resPrmSumDef242|)))
(assert (<=
  ($FVF.perm_f (as pm@399@01  $FPM) (Seq_index xs@340@01 i2@342@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@399@01  $FPM) (Seq_index xs@340@01 i1@341@01))
  $Perm.Write))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@399@01  $FPM) r) $Perm.Write)
  :pattern ((inv@348@01 r))
  :qid |qp-fld-prm-bnd|)))
; [eval] fun04qp(x, i2) == old(fun04qp(x, i2))
; [eval] fun04qp(x, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |x.elems|
; [eval] |x.elems|
(declare-const j@400@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |x.elems|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 106 | !(0 <= j@400@01) | live]
; [else-branch: 106 | 0 <= j@400@01 | live]
(push) ; 6
; [then-branch: 106 | !(0 <= j@400@01)]
(assert (not (<= 0 j@400@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01))
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01))
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
  (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 106 | 0 <= j@400@01]
(assert (<= 0 j@400@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01))
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01))
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
  (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j < |x.elems|
; [eval] |x.elems|
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (not (<= 0 j@400@01))
  (and
    (not (<= 0 j@400@01))
    (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
    (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01))))))
; Joined path conditions
(assert (=>
  (<= 0 j@400@01)
  (and
    (<= 0 j@400@01)
    (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
    (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01))))))
(assert (or (<= 0 j@400@01) (not (<= 0 j@400@01))))
(assert (and
  (<= 0 j@400@01)
  (<
    j@400@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))))))
; [eval] (j == i ? write : none)
; [eval] j == i
(set-option :timeout 0)
(push) ; 5
; [then-branch: 107 | j@400@01 == i2@342@01 | live]
; [else-branch: 107 | j@400@01 != i2@342@01 | live]
(push) ; 6
; [then-branch: 107 | j@400@01 == i2@342@01]
(assert (= j@400@01 i2@342@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01))
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01))
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
  (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 107 | j@400@01 != i2@342@01]
(assert (not (= j@400@01 i2@342@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01))
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01))
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
  (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (= j@400@01 i2@342@01)
  (and
    (= j@400@01 i2@342@01)
    (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
    (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01))))))
; Joined path conditions
(assert (=>
  (not (= j@400@01 i2@342@01))
  (and
    (not (= j@400@01 i2@342@01))
    (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
    (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01))))))
(assert (or (not (= j@400@01 i2@342@01)) (= j@400@01 i2@342@01)))
; [eval] x.elems[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@400@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@401@01 ($Ref) Int)
(declare-fun img@402@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@400@01 Int)) (!
  (=>
    (and
      (<= 0 j@400@01)
      (<
        j@400@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
    (and
      (=>
        (not (<= 0 j@400@01))
        (and
          (not (<= 0 j@400@01))
          (not
            (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
          (not
            (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))))
      (=>
        (<= 0 j@400@01)
        (and
          (<= 0 j@400@01)
          (not
            (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
          (not
            (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))))
      (or (<= 0 j@400@01) (not (<= 0 j@400@01)))
      (=>
        (= j@400@01 i2@342@01)
        (and
          (= j@400@01 i2@342@01)
          (not
            (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
          (not
            (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))))
      (=>
        (not (= j@400@01 i2@342@01))
        (and
          (not (= j@400@01 i2@342@01))
          (not
            (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
          (not
            (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))))
      (or (not (= j@400@01 i2@342@01)) (= j@400@01 i2@342@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@400@01))
  :qid |f-aux|)))
(push) ; 4
(assert (not (forall ((j@400@01 Int)) (!
  (=>
    (and
      (<= 0 j@400@01)
      (<
        j@400@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
    (or
      (= (ite (= j@400@01 i2@342@01) $Perm.Write $Perm.No) $Perm.No)
      (= j@400@01 i2@342@01)))
  
  :qid |quant-u-339|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@400@01 Int) (j2@400@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 j1@400@01)
          (<
            j1@400@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= j1@400@01 i2@342@01))
      (and
        (and
          (<= 0 j2@400@01)
          (<
            j2@400@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= j2@400@01 i2@342@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j1@400@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j2@400@01)))
    (= j1@400@01 j2@400@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@400@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@400@01)
        (<
          j@400@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (= j@400@01 i2@342@01))
    (and
      (=
        (inv@401@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j@400@01))
        j@400@01)
      (img@402@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        j@400@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@400@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@402@01 r)
      (and
        (and
          (<= 0 (inv@401@01 r))
          (<
            (inv@401@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@401@01 r) i2@342@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        (inv@401@01 r))
      r))
  :pattern ((inv@401@01 r))
  :qid |f-fctOfInv|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((j@400@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
      j@400@01)
    (Seq_index xs@340@01 j@400@01))
  
  :qid |quant-u-340|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@403@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@401@01 r))
        (<
          (inv@401@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@402@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@401@01 r))))
    ($Perm.min
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
        $Perm.No)
      (ite (= (inv@401@01 r) i2@342@01) $Perm.Write $Perm.No))
    $Perm.No))
(define-fun pTaken@404@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@401@01 r))
        (<
          (inv@401@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@402@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@401@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@340@01 i2@342@01)) $Perm.Write $Perm.No)
      (-
        (ite (= (inv@401@01 r) i2@342@01) $Perm.Write $Perm.No)
        (pTaken@403@01 r)))
    $Perm.No))
(define-fun pTaken@405@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@401@01 r))
        (<
          (inv@401@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@402@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@401@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@340@01 i1@341@01)) $Perm.Write $Perm.No)
      (-
        (-
          (ite (= (inv@401@01 r) i2@342@01) $Perm.Write $Perm.No)
          (pTaken@403@01 r))
        (pTaken@404@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
        $Perm.No)
      (pTaken@403@01 r))
    $Perm.No)
  
  :qid |quant-u-342|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@403@01 r) $Perm.No)
  
  :qid |quant-u-343|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@401@01 r))
        (<
          (inv@401@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@402@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@401@01 r))))
    (=
      (-
        (ite (= (inv@401@01 r) i2@342@01) $Perm.Write $Perm.No)
        (pTaken@403@01 r))
      $Perm.No))
  
  :qid |quant-u-344|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)
    (pTaken@404@01 (Seq_index xs@340@01 i2@342@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@401@01 r))
        (<
          (inv@401@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@402@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@401@01 r))))
    (=
      (-
        (-
          (ite (= (inv@401@01 r) i2@342@01) $Perm.Write $Perm.No)
          (pTaken@403@01 r))
        (pTaken@404@01 r))
      $Perm.No))
  
  :qid |quant-u-346|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@406@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@406@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@401@01 r))
          (<
            (inv@401@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@401@01 r) i2@342@01)
        (img@402@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@401@01 r))
          (<
            (inv@401@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@401@01 r) i2@342@01)
        (img@402@01 r))
      (Set_in r ($FVF.domain_f (as sm@406@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@406@01  $FVF<f>))))
  :qid |qp.fvfDomDef246|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@401@01 r))
          (<
            (inv@401@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@401@01 r) i2@342@01)
        (img@402@01 r))
      (= r (Seq_index xs@340@01 i2@342@01)))
    (=
      ($FVF.lookup_f (as sm@406@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@406@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef243|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@401@01 r))
          (<
            (inv@401@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@401@01 r) i2@342@01)
        (img@402@01 r))
      (= r (Seq_index xs@340@01 i1@341@01)))
    (=
      ($FVF.lookup_f (as sm@406@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@406@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef244|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@401@01 r))
          (<
            (inv@401@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@401@01 r) i2@342@01)
        (img@402@01 r))
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@406@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@406@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef245|)))
(assert (fun04qp%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@406@01  $FVF<f>))))) x@343@01 i2@342@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@400@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@400@01)
        (<
          j@400@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (= j@400@01 i2@342@01))
    (and
      (=
        (inv@401@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j@400@01))
        j@400@01)
      (img@402@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        j@400@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@400@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@402@01 r)
      (and
        (and
          (<= 0 (inv@401@01 r))
          (<
            (inv@401@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@401@01 r) i2@342@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        (inv@401@01 r))
      r))
  :pattern ((inv@401@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@406@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@401@01 r))
          (<
            (inv@401@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@401@01 r) i2@342@01)
        (img@402@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@401@01 r))
          (<
            (inv@401@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@401@01 r) i2@342@01)
        (img@402@01 r))
      (Set_in r ($FVF.domain_f (as sm@406@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@406@01  $FVF<f>))))
  :qid |qp.fvfDomDef246|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@401@01 r))
          (<
            (inv@401@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@401@01 r) i2@342@01)
        (img@402@01 r))
      (= r (Seq_index xs@340@01 i2@342@01)))
    (=
      ($FVF.lookup_f (as sm@406@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@406@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef243|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@401@01 r))
          (<
            (inv@401@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@401@01 r) i2@342@01)
        (img@402@01 r))
      (= r (Seq_index xs@340@01 i1@341@01)))
    (=
      ($FVF.lookup_f (as sm@406@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@406@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef244|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@401@01 r))
          (<
            (inv@401@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@401@01 r) i2@342@01)
        (img@402@01 r))
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@406@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@406@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef245|)))
(assert (and
  (forall ((j@400@01 Int)) (!
    (=>
      (and
        (<= 0 j@400@01)
        (<
          j@400@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (and
        (=>
          (not (<= 0 j@400@01))
          (and
            (not (<= 0 j@400@01))
            (not
              (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
            (not
              (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))))
        (=>
          (<= 0 j@400@01)
          (and
            (<= 0 j@400@01)
            (not
              (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
            (not
              (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))))
        (or (<= 0 j@400@01) (not (<= 0 j@400@01)))
        (=>
          (= j@400@01 i2@342@01)
          (and
            (= j@400@01 i2@342@01)
            (not
              (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
            (not
              (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))))
        (=>
          (not (= j@400@01 i2@342@01))
          (and
            (not (= j@400@01 i2@342@01))
            (not
              (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
            (not
              (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))))
        (or (not (= j@400@01 i2@342@01)) (= j@400@01 i2@342@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
      j@400@01))
    :qid |f-aux|))
  (fun04qp%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@406@01  $FVF<f>))))) x@343@01 i2@342@01)))
; [eval] old(fun04qp(x, i2))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(declare-const sm@407@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@349@01 r)
      (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
    (=
      ($FVF.lookup_f (as sm@407@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@407@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef247|)))
(declare-const pm@408@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@408@01  $FPM) r)
    (ite
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_f (as pm@408@01  $FPM) r))
  :qid |qp.resPrmSumDef248|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@408@01  $FPM) r) $Perm.Write)
  :pattern ((inv@348@01 r))
  :qid |qp-fld-prm-bnd|)))
; [eval] fun04qp(x, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |x.elems|
; [eval] |x.elems|
(declare-const j@409@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |x.elems|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 108 | !(0 <= j@409@01) | live]
; [else-branch: 108 | 0 <= j@409@01 | live]
(push) ; 6
; [then-branch: 108 | !(0 <= j@409@01)]
(assert (not (<= 0 j@409@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 108 | 0 <= j@409@01]
(assert (<= 0 j@409@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j < |x.elems|
; [eval] |x.elems|
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@409@01) (not (<= 0 j@409@01))))
(assert (and
  (<= 0 j@409@01)
  (<
    j@409@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))))))
; [eval] (j == i ? write : none)
; [eval] j == i
(set-option :timeout 0)
(push) ; 5
; [then-branch: 109 | j@409@01 == i2@342@01 | live]
; [else-branch: 109 | j@409@01 != i2@342@01 | live]
(push) ; 6
; [then-branch: 109 | j@409@01 == i2@342@01]
(assert (= j@409@01 i2@342@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 109 | j@409@01 != i2@342@01]
(assert (not (= j@409@01 i2@342@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (= j@409@01 i2@342@01)) (= j@409@01 i2@342@01)))
; [eval] x.elems[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@409@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@410@01 ($Ref) Int)
(declare-fun img@411@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@409@01 Int)) (!
  (=>
    (and
      (<= 0 j@409@01)
      (<
        j@409@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
    (and
      (or (<= 0 j@409@01) (not (<= 0 j@409@01)))
      (or (not (= j@409@01 i2@342@01)) (= j@409@01 i2@342@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@409@01))
  :qid |f-aux|)))
(push) ; 4
(assert (not (forall ((j@409@01 Int)) (!
  (=>
    (and
      (<= 0 j@409@01)
      (<
        j@409@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
    (or
      (= (ite (= j@409@01 i2@342@01) $Perm.Write $Perm.No) $Perm.No)
      (= j@409@01 i2@342@01)))
  
  :qid |quant-u-347|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@409@01 Int) (j2@409@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 j1@409@01)
          (<
            j1@409@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= j1@409@01 i2@342@01))
      (and
        (and
          (<= 0 j2@409@01)
          (<
            j2@409@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= j2@409@01 i2@342@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j1@409@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j2@409@01)))
    (= j1@409@01 j2@409@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@409@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@409@01)
        (<
          j@409@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (= j@409@01 i2@342@01))
    (and
      (=
        (inv@410@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j@409@01))
        j@409@01)
      (img@411@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        j@409@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@409@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@411@01 r)
      (and
        (and
          (<= 0 (inv@410@01 r))
          (<
            (inv@410@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@410@01 r) i2@342@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        (inv@410@01 r))
      r))
  :pattern ((inv@410@01 r))
  :qid |f-fctOfInv|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((j@409@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
      j@409@01)
    (Seq_index xs@340@01 j@409@01))
  
  :qid |quant-u-348|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@412@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@410@01 r))
        (<
          (inv@410@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@411@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@410@01 r))))
    ($Perm.min
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        $Perm.Write
        $Perm.No)
      (ite (= (inv@410@01 r) i2@342@01) $Perm.Write $Perm.No))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@412@01 r))
    $Perm.No)
  
  :qid |quant-u-350|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@412@01 r) $Perm.No)
  
  :qid |quant-u-351|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@410@01 r))
        (<
          (inv@410@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@411@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@410@01 r))))
    (=
      (-
        (ite (= (inv@410@01 r) i2@342@01) $Perm.Write $Perm.No)
        (pTaken@412@01 r))
      $Perm.No))
  
  :qid |quant-u-352|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@413@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@413@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@410@01 r))
          (<
            (inv@410@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@410@01 r) i2@342@01)
        (img@411@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@410@01 r))
          (<
            (inv@410@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@410@01 r) i2@342@01)
        (img@411@01 r))
      (Set_in r ($FVF.domain_f (as sm@413@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@413@01  $FVF<f>))))
  :qid |qp.fvfDomDef250|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@410@01 r))
          (<
            (inv@410@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@410@01 r) i2@342@01)
        (img@411@01 r))
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01)))))
    (=
      ($FVF.lookup_f (as sm@413@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@413@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef249|)))
(assert (fun04qp%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@413@01  $FVF<f>))))) x@343@01 i2@342@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@409@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@409@01)
        (<
          j@409@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (= j@409@01 i2@342@01))
    (and
      (=
        (inv@410@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j@409@01))
        j@409@01)
      (img@411@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        j@409@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@409@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@411@01 r)
      (and
        (and
          (<= 0 (inv@410@01 r))
          (<
            (inv@410@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@410@01 r) i2@342@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        (inv@410@01 r))
      r))
  :pattern ((inv@410@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@413@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@410@01 r))
          (<
            (inv@410@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@410@01 r) i2@342@01)
        (img@411@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@410@01 r))
          (<
            (inv@410@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@410@01 r) i2@342@01)
        (img@411@01 r))
      (Set_in r ($FVF.domain_f (as sm@413@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@413@01  $FVF<f>))))
  :qid |qp.fvfDomDef250|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@410@01 r))
          (<
            (inv@410@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@410@01 r) i2@342@01)
        (img@411@01 r))
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01)))))
    (=
      ($FVF.lookup_f (as sm@413@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@413@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef249|)))
(assert (and
  (forall ((j@409@01 Int)) (!
    (=>
      (and
        (<= 0 j@409@01)
        (<
          j@409@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (and
        (or (<= 0 j@409@01) (not (<= 0 j@409@01)))
        (or (not (= j@409@01 i2@342@01)) (= j@409@01 i2@342@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
      j@409@01))
    :qid |f-aux|))
  (fun04qp%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@413@01  $FVF<f>))))) x@343@01 i2@342@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (=
  (fun04qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@406@01  $FVF<f>))))) x@343@01 i2@342@01)
  (fun04qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@413@01  $FVF<f>))))) x@343@01 i2@342@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,01s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01))
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01))
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01)))))))
(check-sat)
; unknown
(pop) ; 3
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
  (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))))
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] fun04qp(x, i2) == old(fun04qp(x, i2))
; [eval] fun04qp(x, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |x.elems|
; [eval] |x.elems|
(declare-const j@414@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |x.elems|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 110 | !(0 <= j@414@01) | live]
; [else-branch: 110 | 0 <= j@414@01 | live]
(push) ; 6
; [then-branch: 110 | !(0 <= j@414@01)]
(assert (not (<= 0 j@414@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01))
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01))
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
  (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))))
(declare-const sm@415@01 $FVF<f>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@415@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@415@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef251|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i1@341@01))
    (=
      ($FVF.lookup_f (as sm@415@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@415@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef252|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i2@342@01))
    (=
      ($FVF.lookup_f (as sm@415@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@415@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef253|)))
(declare-const pm@416@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@416@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@349@01 r)
            (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
          (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@340@01 i1@341@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@340@01 i2@342@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@416@01  $FPM) r))
  :qid |qp.resPrmSumDef254|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@416@01  $FPM) r) $Perm.Write)
  :pattern ((inv@348@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<=
  ($FVF.perm_f (as pm@416@01  $FPM) (Seq_index xs@340@01 i1@341@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@416@01  $FPM) (Seq_index xs@340@01 i2@342@01))
  $Perm.Write))
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 110 | 0 <= j@414@01]
(assert (<= 0 j@414@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01))
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01))
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
  (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))))
(declare-const sm@417@01 $FVF<f>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@417@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@417@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef255|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i1@341@01))
    (=
      ($FVF.lookup_f (as sm@417@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@417@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef256|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i2@342@01))
    (=
      ($FVF.lookup_f (as sm@417@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@417@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef257|)))
(declare-const pm@418@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@418@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@349@01 r)
            (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
          (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@340@01 i1@341@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@340@01 i2@342@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@418@01  $FPM) r))
  :qid |qp.resPrmSumDef258|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@418@01  $FPM) r) $Perm.Write)
  :pattern ((inv@348@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<=
  ($FVF.perm_f (as pm@418@01  $FPM) (Seq_index xs@340@01 i1@341@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@418@01  $FPM) (Seq_index xs@340@01 i2@342@01))
  $Perm.Write))
; [eval] j < |x.elems|
; [eval] |x.elems|
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@415@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@415@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef251|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i1@341@01))
    (=
      ($FVF.lookup_f (as sm@415@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@415@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef252|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i2@342@01))
    (=
      ($FVF.lookup_f (as sm@415@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@415@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef253|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@416@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@349@01 r)
            (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
          (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@340@01 i1@341@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@340@01 i2@342@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@416@01  $FPM) r))
  :qid |qp.resPrmSumDef254|)))
(assert (=>
  (not (<= 0 j@414@01))
  (and
    (not (<= 0 j@414@01))
    (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
    (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@416@01  $FPM) r) $Perm.Write)
      :pattern ((inv@348@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@416@01  $FPM) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@416@01  $FPM) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write))))
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@417@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@417@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef255|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i1@341@01))
    (=
      ($FVF.lookup_f (as sm@417@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@417@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef256|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i2@342@01))
    (=
      ($FVF.lookup_f (as sm@417@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@417@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef257|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@418@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@349@01 r)
            (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
          (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@340@01 i1@341@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@340@01 i2@342@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@418@01  $FPM) r))
  :qid |qp.resPrmSumDef258|)))
(assert (=>
  (<= 0 j@414@01)
  (and
    (<= 0 j@414@01)
    (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
    (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@418@01  $FPM) r) $Perm.Write)
      :pattern ((inv@348@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@418@01  $FPM) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@418@01  $FPM) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write))))
(assert (or (<= 0 j@414@01) (not (<= 0 j@414@01))))
(assert (and
  (<= 0 j@414@01)
  (<
    j@414@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))))))
; [eval] (j == i ? write : none)
; [eval] j == i
(set-option :timeout 0)
(push) ; 5
; [then-branch: 111 | j@414@01 == i2@342@01 | live]
; [else-branch: 111 | j@414@01 != i2@342@01 | live]
(push) ; 6
; [then-branch: 111 | j@414@01 == i2@342@01]
(assert (= j@414@01 i2@342@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01))
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01))
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
  (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@418@01  $FPM) r) $Perm.Write)
  :pattern ((inv@348@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<=
  ($FVF.perm_f (as pm@418@01  $FPM) (Seq_index xs@340@01 i1@341@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@418@01  $FPM) (Seq_index xs@340@01 i2@342@01))
  $Perm.Write))
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 111 | j@414@01 != i2@342@01]
(assert (not (= j@414@01 i2@342@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  $Perm.Write
  (+
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01))
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
    (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01)))
  (not
    (=
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) (Seq_index xs@340@01 i2@342@01))
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) (Seq_index xs@340@01 i1@341@01)))))))
(check-sat)
; unknown
(pop) ; 7
; 0,00s
; (get-info :all-statistics)
(assert (and
  (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
  (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))))
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@418@01  $FPM) r) $Perm.Write)
  :pattern ((inv@348@01 r))
  :qid |qp-fld-prm-bnd|)))
(assert (<=
  ($FVF.perm_f (as pm@418@01  $FPM) (Seq_index xs@340@01 i1@341@01))
  $Perm.Write))
(assert (<=
  ($FVF.perm_f (as pm@418@01  $FPM) (Seq_index xs@340@01 i2@342@01))
  $Perm.Write))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (= j@414@01 i2@342@01)
  (and
    (= j@414@01 i2@342@01)
    (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
    (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@418@01  $FPM) r) $Perm.Write)
      :pattern ((inv@348@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@418@01  $FPM) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@418@01  $FPM) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write))))
; Joined path conditions
(assert (=>
  (not (= j@414@01 i2@342@01))
  (and
    (not (= j@414@01 i2@342@01))
    (not (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
    (not (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
    (forall ((r $Ref)) (!
      (<= ($FVF.perm_f (as pm@418@01  $FPM) r) $Perm.Write)
      :pattern ((inv@348@01 r))
      :qid |qp-fld-prm-bnd|))
    (<=
      ($FVF.perm_f (as pm@418@01  $FPM) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write)
    (<=
      ($FVF.perm_f (as pm@418@01  $FPM) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write))))
(assert (or (not (= j@414@01 i2@342@01)) (= j@414@01 i2@342@01)))
; [eval] x.elems[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@414@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@419@01 ($Ref) Int)
(declare-fun img@420@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@415@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@415@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef251|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i1@341@01))
    (=
      ($FVF.lookup_f (as sm@415@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@415@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef252|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i2@342@01))
    (=
      ($FVF.lookup_f (as sm@415@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@415@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef253|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@416@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@349@01 r)
            (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
          (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@340@01 i1@341@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@340@01 i2@342@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@416@01  $FPM) r))
  :qid |qp.resPrmSumDef254|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@417@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@417@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef255|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i1@341@01))
    (=
      ($FVF.lookup_f (as sm@417@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@417@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef256|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i2@342@01))
    (=
      ($FVF.lookup_f (as sm@417@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@417@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef257|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@418@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@349@01 r)
            (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
          (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@340@01 i1@341@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@340@01 i2@342@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@418@01  $FPM) r))
  :qid |qp.resPrmSumDef258|)))
; Nested auxiliary terms: non-globals
(assert (forall ((j@414@01 Int)) (!
  (=>
    (and
      (<= 0 j@414@01)
      (<
        j@414@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
    (and
      (=>
        (not (<= 0 j@414@01))
        (and
          (not (<= 0 j@414@01))
          (not
            (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
          (not
            (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
          (forall ((r $Ref)) (!
            (<= ($FVF.perm_f (as pm@416@01  $FPM) r) $Perm.Write)
            :pattern ((inv@348@01 r))
            :qid |qp-fld-prm-bnd|))
          (<=
            ($FVF.perm_f (as pm@416@01  $FPM) (Seq_index xs@340@01 i1@341@01))
            $Perm.Write)
          (<=
            ($FVF.perm_f (as pm@416@01  $FPM) (Seq_index xs@340@01 i2@342@01))
            $Perm.Write)))
      (=>
        (<= 0 j@414@01)
        (and
          (<= 0 j@414@01)
          (not
            (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
          (not
            (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
          (forall ((r $Ref)) (!
            (<= ($FVF.perm_f (as pm@418@01  $FPM) r) $Perm.Write)
            :pattern ((inv@348@01 r))
            :qid |qp-fld-prm-bnd|))
          (<=
            ($FVF.perm_f (as pm@418@01  $FPM) (Seq_index xs@340@01 i1@341@01))
            $Perm.Write)
          (<=
            ($FVF.perm_f (as pm@418@01  $FPM) (Seq_index xs@340@01 i2@342@01))
            $Perm.Write)))
      (or (<= 0 j@414@01) (not (<= 0 j@414@01)))
      (=>
        (= j@414@01 i2@342@01)
        (and
          (= j@414@01 i2@342@01)
          (not
            (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
          (not
            (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
          (forall ((r $Ref)) (!
            (<= ($FVF.perm_f (as pm@418@01  $FPM) r) $Perm.Write)
            :pattern ((inv@348@01 r))
            :qid |qp-fld-prm-bnd|))
          (<=
            ($FVF.perm_f (as pm@418@01  $FPM) (Seq_index xs@340@01 i1@341@01))
            $Perm.Write)
          (<=
            ($FVF.perm_f (as pm@418@01  $FPM) (Seq_index xs@340@01 i2@342@01))
            $Perm.Write)))
      (=>
        (not (= j@414@01 i2@342@01))
        (and
          (not (= j@414@01 i2@342@01))
          (not
            (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
          (not
            (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
          (forall ((r $Ref)) (!
            (<= ($FVF.perm_f (as pm@418@01  $FPM) r) $Perm.Write)
            :pattern ((inv@348@01 r))
            :qid |qp-fld-prm-bnd|))
          (<=
            ($FVF.perm_f (as pm@418@01  $FPM) (Seq_index xs@340@01 i1@341@01))
            $Perm.Write)
          (<=
            ($FVF.perm_f (as pm@418@01  $FPM) (Seq_index xs@340@01 i2@342@01))
            $Perm.Write)))
      (or (not (= j@414@01 i2@342@01)) (= j@414@01 i2@342@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@414@01))
  :qid |f-aux|)))
(push) ; 4
(assert (not (forall ((j@414@01 Int)) (!
  (=>
    (and
      (<= 0 j@414@01)
      (<
        j@414@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
    (or
      (= (ite (= j@414@01 i2@342@01) $Perm.Write $Perm.No) $Perm.No)
      (= j@414@01 i2@342@01)))
  
  :qid |quant-u-353|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@414@01 Int) (j2@414@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 j1@414@01)
          (<
            j1@414@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= j1@414@01 i2@342@01))
      (and
        (and
          (<= 0 j2@414@01)
          (<
            j2@414@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= j2@414@01 i2@342@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j1@414@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j2@414@01)))
    (= j1@414@01 j2@414@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@414@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@414@01)
        (<
          j@414@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (= j@414@01 i2@342@01))
    (and
      (=
        (inv@419@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j@414@01))
        j@414@01)
      (img@420@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        j@414@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@414@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@420@01 r)
      (and
        (and
          (<= 0 (inv@419@01 r))
          (<
            (inv@419@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@419@01 r) i2@342@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        (inv@419@01 r))
      r))
  :pattern ((inv@419@01 r))
  :qid |f-fctOfInv|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((j@414@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
      j@414@01)
    (Seq_index xs@340@01 j@414@01))
  
  :qid |quant-u-354|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@421@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@419@01 r))
        (<
          (inv@419@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@420@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@419@01 r))))
    ($Perm.min
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
        $Perm.No)
      (ite (= (inv@419@01 r) i2@342@01) $Perm.Write $Perm.No))
    $Perm.No))
(define-fun pTaken@422@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@419@01 r))
        (<
          (inv@419@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@420@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@419@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@340@01 i1@341@01)) $Perm.Write $Perm.No)
      (-
        (ite (= (inv@419@01 r) i2@342@01) $Perm.Write $Perm.No)
        (pTaken@421@01 r)))
    $Perm.No))
(define-fun pTaken@423@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@419@01 r))
        (<
          (inv@419@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@420@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@419@01 r))))
    ($Perm.min
      (ite (= r (Seq_index xs@340@01 i2@342@01)) $Perm.Write $Perm.No)
      (-
        (-
          (ite (= (inv@419@01 r) i2@342@01) $Perm.Write $Perm.No)
          (pTaken@421@01 r))
        (pTaken@422@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
        $Perm.No)
      (pTaken@421@01 r))
    $Perm.No)
  
  :qid |quant-u-356|))))
(check-sat)
; unknown
(pop) ; 4
; 0,01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@421@01 r) $Perm.No)
  
  :qid |quant-u-357|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@419@01 r))
        (<
          (inv@419@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@420@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@419@01 r))))
    (=
      (-
        (ite (= (inv@419@01 r) i2@342@01) $Perm.Write $Perm.No)
        (pTaken@421@01 r))
      $Perm.No))
  
  :qid |quant-u-358|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i1@341@01))
      $Perm.Write
      $Perm.No)
    (pTaken@422@01 (Seq_index xs@340@01 i1@341@01)))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@422@01 r) $Perm.No)
  
  :qid |quant-u-360|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@419@01 r))
        (<
          (inv@419@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@420@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@419@01 r))))
    (=
      (-
        (-
          (ite (= (inv@419@01 r) i2@342@01) $Perm.Write $Perm.No)
          (pTaken@421@01 r))
        (pTaken@422@01 r))
      $Perm.No))
  
  :qid |quant-u-361|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i2@342@01))
      $Perm.Write
      $Perm.No)
    (pTaken@423@01 (Seq_index xs@340@01 i2@342@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@419@01 r))
        (<
          (inv@419@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@420@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@419@01 r))))
    (=
      (-
        (-
          (-
            (ite (= (inv@419@01 r) i2@342@01) $Perm.Write $Perm.No)
            (pTaken@421@01 r))
          (pTaken@422@01 r))
        (pTaken@423@01 r))
      $Perm.No))
  
  :qid |quant-u-363|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@424@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@424@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@419@01 r))
          (<
            (inv@419@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@419@01 r) i2@342@01)
        (img@420@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@419@01 r))
          (<
            (inv@419@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@419@01 r) i2@342@01)
        (img@420@01 r))
      (Set_in r ($FVF.domain_f (as sm@424@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@424@01  $FVF<f>))))
  :qid |qp.fvfDomDef262|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@419@01 r))
          (<
            (inv@419@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@419@01 r) i2@342@01)
        (img@420@01 r))
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@424@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@424@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@419@01 r))
          (<
            (inv@419@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@419@01 r) i2@342@01)
        (img@420@01 r))
      (= r (Seq_index xs@340@01 i1@341@01)))
    (=
      ($FVF.lookup_f (as sm@424@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@424@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@419@01 r))
          (<
            (inv@419@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@419@01 r) i2@342@01)
        (img@420@01 r))
      (= r (Seq_index xs@340@01 i2@342@01)))
    (=
      ($FVF.lookup_f (as sm@424@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@424@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef261|)))
(assert (fun04qp%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@424@01  $FVF<f>))))) x@343@01 i2@342@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@415@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@415@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef251|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i1@341@01))
    (=
      ($FVF.lookup_f (as sm@415@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@415@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef252|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i2@342@01))
    (=
      ($FVF.lookup_f (as sm@415@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@415@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef253|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@416@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@349@01 r)
            (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
          (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@340@01 i1@341@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@340@01 i2@342@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@416@01  $FPM) r))
  :qid |qp.resPrmSumDef254|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
      false)
    (=
      ($FVF.lookup_f (as sm@417@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@417@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef255|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i1@341@01))
    (=
      ($FVF.lookup_f (as sm@417@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@417@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef256|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (Seq_index xs@340@01 i2@342@01))
    (=
      ($FVF.lookup_f (as sm@417@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@417@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef257|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@418@01  $FPM) r)
    (+
      (+
        (ite
          (and
            (img@349@01 r)
            (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
          (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r))
          $Perm.No)
        (ite (= r (Seq_index xs@340@01 i1@341@01)) $Perm.Write $Perm.No))
      (ite (= r (Seq_index xs@340@01 i2@342@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_f (as pm@418@01  $FPM) r))
  :qid |qp.resPrmSumDef258|)))
(assert (forall ((j@414@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@414@01)
        (<
          j@414@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (= j@414@01 i2@342@01))
    (and
      (=
        (inv@419@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j@414@01))
        j@414@01)
      (img@420@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        j@414@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@414@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@420@01 r)
      (and
        (and
          (<= 0 (inv@419@01 r))
          (<
            (inv@419@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@419@01 r) i2@342@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        (inv@419@01 r))
      r))
  :pattern ((inv@419@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@424@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@419@01 r))
          (<
            (inv@419@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@419@01 r) i2@342@01)
        (img@420@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@419@01 r))
          (<
            (inv@419@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@419@01 r) i2@342@01)
        (img@420@01 r))
      (Set_in r ($FVF.domain_f (as sm@424@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@424@01  $FVF<f>))))
  :qid |qp.fvfDomDef262|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@419@01 r))
          (<
            (inv@419@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@419@01 r) i2@342@01)
        (img@420@01 r))
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@350@01 r)) (pTaken@363@01 r)))
        false))
    (=
      ($FVF.lookup_f (as sm@424@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@424@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef259|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@419@01 r))
          (<
            (inv@419@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@419@01 r) i2@342@01)
        (img@420@01 r))
      (= r (Seq_index xs@340@01 i1@341@01)))
    (=
      ($FVF.lookup_f (as sm@424@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@351@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@424@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@351@01  $FVF<f>) r))
  :qid |qp.fvfValDef260|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@419@01 r))
          (<
            (inv@419@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@419@01 r) i2@342@01)
        (img@420@01 r))
      (= r (Seq_index xs@340@01 i2@342@01)))
    (=
      ($FVF.lookup_f (as sm@424@01  $FVF<f>) r)
      ($FVF.lookup_f (as sm@365@01  $FVF<f>) r)))
  :pattern (($FVF.lookup_f (as sm@424@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f (as sm@365@01  $FVF<f>) r))
  :qid |qp.fvfValDef261|)))
(assert (and
  (forall ((j@414@01 Int)) (!
    (=>
      (and
        (<= 0 j@414@01)
        (<
          j@414@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (and
        (=>
          (not (<= 0 j@414@01))
          (and
            (not (<= 0 j@414@01))
            (not
              (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
            (not
              (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@416@01  $FPM) r) $Perm.Write)
              :pattern ((inv@348@01 r))
              :qid |qp-fld-prm-bnd|))
            (<=
              ($FVF.perm_f (as pm@416@01  $FPM) (Seq_index xs@340@01 i1@341@01))
              $Perm.Write)
            (<=
              ($FVF.perm_f (as pm@416@01  $FPM) (Seq_index xs@340@01 i2@342@01))
              $Perm.Write)))
        (=>
          (<= 0 j@414@01)
          (and
            (<= 0 j@414@01)
            (not
              (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
            (not
              (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@418@01  $FPM) r) $Perm.Write)
              :pattern ((inv@348@01 r))
              :qid |qp-fld-prm-bnd|))
            (<=
              ($FVF.perm_f (as pm@418@01  $FPM) (Seq_index xs@340@01 i1@341@01))
              $Perm.Write)
            (<=
              ($FVF.perm_f (as pm@418@01  $FPM) (Seq_index xs@340@01 i2@342@01))
              $Perm.Write)))
        (or (<= 0 j@414@01) (not (<= 0 j@414@01)))
        (=>
          (= j@414@01 i2@342@01)
          (and
            (= j@414@01 i2@342@01)
            (not
              (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
            (not
              (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@418@01  $FPM) r) $Perm.Write)
              :pattern ((inv@348@01 r))
              :qid |qp-fld-prm-bnd|))
            (<=
              ($FVF.perm_f (as pm@418@01  $FPM) (Seq_index xs@340@01 i1@341@01))
              $Perm.Write)
            (<=
              ($FVF.perm_f (as pm@418@01  $FPM) (Seq_index xs@340@01 i2@342@01))
              $Perm.Write)))
        (=>
          (not (= j@414@01 i2@342@01))
          (and
            (not (= j@414@01 i2@342@01))
            (not
              (= (Seq_index xs@340@01 i1@341@01) (Seq_index xs@340@01 i2@342@01)))
            (not
              (= (Seq_index xs@340@01 i2@342@01) (Seq_index xs@340@01 i1@341@01)))
            (forall ((r $Ref)) (!
              (<= ($FVF.perm_f (as pm@418@01  $FPM) r) $Perm.Write)
              :pattern ((inv@348@01 r))
              :qid |qp-fld-prm-bnd|))
            (<=
              ($FVF.perm_f (as pm@418@01  $FPM) (Seq_index xs@340@01 i1@341@01))
              $Perm.Write)
            (<=
              ($FVF.perm_f (as pm@418@01  $FPM) (Seq_index xs@340@01 i2@342@01))
              $Perm.Write)))
        (or (not (= j@414@01 i2@342@01)) (= j@414@01 i2@342@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
      j@414@01))
    :qid |f-aux|))
  (fun04qp%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@424@01  $FVF<f>))))) x@343@01 i2@342@01)))
; [eval] old(fun04qp(x, i2))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(declare-const sm@425@01 $FVF<f>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@349@01 r)
      (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
    (=
      ($FVF.lookup_f (as sm@425@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@425@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef263|)))
(declare-const pm@426@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_f (as pm@426@01  $FPM) r)
    (ite
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
      $Perm.Write
      $Perm.No))
  :pattern (($FVF.perm_f (as pm@426@01  $FPM) r))
  :qid |qp.resPrmSumDef264|)))
; Assume upper permission bound for field f
(assert (forall ((r $Ref)) (!
  (<= ($FVF.perm_f (as pm@426@01  $FPM) r) $Perm.Write)
  :pattern ((inv@348@01 r))
  :qid |qp-fld-prm-bnd|)))
; [eval] fun04qp(x, i2)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= i
; [eval] i < |x.elems|
; [eval] |x.elems|
(declare-const j@427@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |x.elems|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 112 | !(0 <= j@427@01) | live]
; [else-branch: 112 | 0 <= j@427@01 | live]
(push) ; 6
; [then-branch: 112 | !(0 <= j@427@01)]
(assert (not (<= 0 j@427@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 112 | 0 <= j@427@01]
(assert (<= 0 j@427@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
; [eval] j < |x.elems|
; [eval] |x.elems|
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@427@01) (not (<= 0 j@427@01))))
(assert (and
  (<= 0 j@427@01)
  (<
    j@427@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))))))
; [eval] (j == i ? write : none)
; [eval] j == i
(set-option :timeout 0)
(push) ; 5
; [then-branch: 113 | j@427@01 == i2@342@01 | live]
; [else-branch: 113 | j@427@01 != i2@342@01 | live]
(push) ; 6
; [then-branch: 113 | j@427@01 == i2@342@01]
(assert (= j@427@01 i2@342@01))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 113 | j@427@01 != i2@342@01]
(assert (not (= j@427@01 i2@342@01)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Assume upper permission bound for field f
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (= j@427@01 i2@342@01)) (= j@427@01 i2@342@01)))
; [eval] x.elems[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@427@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0,00s
; (get-info :all-statistics)
(pop) ; 4
(declare-fun inv@428@01 ($Ref) Int)
(declare-fun img@429@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j@427@01 Int)) (!
  (=>
    (and
      (<= 0 j@427@01)
      (<
        j@427@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
    (and
      (or (<= 0 j@427@01) (not (<= 0 j@427@01)))
      (or (not (= j@427@01 i2@342@01)) (= j@427@01 i2@342@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@427@01))
  :qid |f-aux|)))
(push) ; 4
(assert (not (forall ((j@427@01 Int)) (!
  (=>
    (and
      (<= 0 j@427@01)
      (<
        j@427@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
    (or
      (= (ite (= j@427@01 i2@342@01) $Perm.Write $Perm.No) $Perm.No)
      (= j@427@01 i2@342@01)))
  
  :qid |quant-u-364|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((j1@427@01 Int) (j2@427@01 Int)) (!
  (=>
    (and
      (and
        (and
          (<= 0 j1@427@01)
          (<
            j1@427@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= j1@427@01 i2@342@01))
      (and
        (and
          (<= 0 j2@427@01)
          (<
            j2@427@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= j2@427@01 i2@342@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j1@427@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j2@427@01)))
    (= j1@427@01 j2@427@01))
  
  :qid |f-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j@427@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@427@01)
        (<
          j@427@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (= j@427@01 i2@342@01))
    (and
      (=
        (inv@428@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j@427@01))
        j@427@01)
      (img@429@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        j@427@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@427@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@429@01 r)
      (and
        (and
          (<= 0 (inv@428@01 r))
          (<
            (inv@428@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@428@01 r) i2@342@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        (inv@428@01 r))
      r))
  :pattern ((inv@428@01 r))
  :qid |f-fctOfInv|)))
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((j@427@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
      j@427@01)
    (Seq_index xs@340@01 j@427@01))
  
  :qid |quant-u-365|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@430@01 ((r $Ref)) $Perm
  (ite
    (and
      (and
        (<= 0 (inv@428@01 r))
        (<
          (inv@428@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@429@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@428@01 r))))
    ($Perm.min
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        $Perm.Write
        $Perm.No)
      (ite (= (inv@428@01 r) i2@342@01) $Perm.Write $Perm.No))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@430@01 r))
    $Perm.No)
  
  :qid |quant-u-367|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@430@01 r) $Perm.No)
  
  :qid |quant-u-368|))))
(check-sat)
; unknown
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (<= 0 (inv@428@01 r))
        (<
          (inv@428@01 r)
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (img@429@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          (inv@428@01 r))))
    (=
      (-
        (ite (= (inv@428@01 r) i2@342@01) $Perm.Write $Perm.No)
        (pTaken@430@01 r))
      $Perm.No))
  
  :qid |quant-u-369|))))
(check-sat)
; unsat
(pop) ; 4
; 0,00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@431@01 $FVF<f>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@431@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@428@01 r))
          (<
            (inv@428@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@428@01 r) i2@342@01)
        (img@429@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@428@01 r))
          (<
            (inv@428@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@428@01 r) i2@342@01)
        (img@429@01 r))
      (Set_in r ($FVF.domain_f (as sm@431@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@431@01  $FVF<f>))))
  :qid |qp.fvfDomDef266|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@428@01 r))
          (<
            (inv@428@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@428@01 r) i2@342@01)
        (img@429@01 r))
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01)))))
    (=
      ($FVF.lookup_f (as sm@431@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@431@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef265|)))
(assert (fun04qp%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
  ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($SortWrappers.$FVF<f>To$Snap (as sm@431@01  $FVF<f>))))) x@343@01 i2@342@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((j@427@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@427@01)
        (<
          j@427@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (= j@427@01 i2@342@01))
    (and
      (=
        (inv@428@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
          j@427@01))
        j@427@01)
      (img@429@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        j@427@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
    j@427@01))
  :qid |f-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@429@01 r)
      (and
        (and
          (<= 0 (inv@428@01 r))
          (<
            (inv@428@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@428@01 r) i2@342@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
        (inv@428@01 r))
      r))
  :pattern ((inv@428@01 r))
  :qid |f-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_f (as sm@431@01  $FVF<f>)))
      (and
        (and
          (<= 0 (inv@428@01 r))
          (<
            (inv@428@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@428@01 r) i2@342@01)
        (img@429@01 r)))
    (=>
      (and
        (and
          (<= 0 (inv@428@01 r))
          (<
            (inv@428@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@428@01 r) i2@342@01)
        (img@429@01 r))
      (Set_in r ($FVF.domain_f (as sm@431@01  $FVF<f>)))))
  :pattern ((Set_in r ($FVF.domain_f (as sm@431@01  $FVF<f>))))
  :qid |qp.fvfDomDef266|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (and
          (<= 0 (inv@428@01 r))
          (<
            (inv@428@01 r)
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
        (= (inv@428@01 r) i2@342@01)
        (img@429@01 r))
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) (Seq_length xs@340@01)))))
    (=
      ($FVF.lookup_f (as sm@431@01  $FVF<f>) r)
      ($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r)))
  :pattern (($FVF.lookup_f (as sm@431@01  $FVF<f>) r))
  :pattern (($FVF.lookup_f ($SortWrappers.$SnapTo$FVF<f> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))) r))
  :qid |qp.fvfValDef265|)))
(assert (and
  (forall ((j@427@01 Int)) (!
    (=>
      (and
        (<= 0 j@427@01)
        (<
          j@427@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))))))
      (and
        (or (<= 0 j@427@01) (not (<= 0 j@427@01)))
        (or (not (= j@427@01 i2@342@01)) (= j@427@01 i2@342@01))))
    :pattern ((Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01)))))))))
      j@427@01))
    :qid |f-aux|))
  (fun04qp%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@431@01  $FVF<f>))))) x@343@01 i2@342@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (=
  (fun04qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@424@01  $FVF<f>))))) x@343@01 i2@342@01)
  (fun04qp ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@344@01))))))))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($SortWrappers.$FVF<f>To$Snap (as sm@431@01  $FVF<f>))))) x@343@01 i2@342@01))))
(check-sat)
; unknown
(pop) ; 3
; 0,01s
; (get-info :all-statistics)
(pop) ; 2
(pop) ; 1
