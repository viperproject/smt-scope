(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $allocated () T@U)
(declare-fun f_7 () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun NormalFieldType () T@T)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun RefType () T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun state (T@U T@U) Bool)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun GoodMask (T@U) Bool)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun null () T@U)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun FrameTypeType () T@T)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun IsWandField (T@U) Bool)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun |wand_1#ft| (T@U Real T@U Int T@U Int) T@U)
(declare-fun |wand_1#sm| (T@U Real T@U Int T@U Int) T@U)
(declare-fun WandType_wand_1Type () T@T)
(declare-fun |wand_2#ft| (T@U Real T@U Real T@U T@U) T@U)
(declare-fun |wand_2#sm| (T@U Real T@U Real T@U T@U) T@U)
(declare-fun WandType_wand_2Type () T@T)
(declare-fun wand_3 (Bool T@U Real T@U Int) T@U)
(declare-fun getPredWandId (T@U) Int)
(declare-fun WandType_wand_3Type () T@T)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun wand (T@U Real T@U Real T@U Int T@U Int T@U Real T@U T@U) T@U)
(declare-fun WandType_wandType () T@T)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun |wand_3#ft| (Bool T@U Real T@U Int) T@U)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun wand_1 (T@U Real T@U Int T@U Int) T@U)
(declare-fun wand_2 (T@U Real T@U Real T@U T@U) T@U)
(declare-fun |wand#ft| (T@U Real T@U Real T@U Int T@U Int T@U Real T@U T@U) T@U)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun |wand_3#sm| (Bool T@U Real T@U Int) T@U)
(declare-fun FullPerm () Real)
(declare-fun |wand#sm| (T@U Real T@U Real T@U Int T@U Int T@U Real T@U T@U) T@U)
(declare-fun ZeroPMask () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (forall ((arg0@@11 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@11 arg1)) 6)
 :qid |ctor:FieldType|
)) (forall ((arg0@@12 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12 arg1@@0)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12 arg1@@0))
))) (forall ((arg0@@13 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@13 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@13 arg1@@1))
))) (= (Ctor NormalFieldType) 7)) (= (type $allocated) (FieldType NormalFieldType boolType))) (= (type f_7) (FieldType NormalFieldType intType))))
(assert (distinct $allocated f_7)
)
(assert  (and (and (and (and (and (and (forall ((arg0@@14 T@T) ) (! (= (Ctor (MapType0Type arg0@@14)) 8)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@15 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@15)) arg0@@15)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@15))
))) (forall ((arg0@@16 T@U) (arg1@@2 T@U) (arg2 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2))))
(= (type (MapType0Select arg0@@16 arg1@@2 arg2)) B))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@16 arg1@@2 arg2))
))) (forall ((arg0@@17 T@U) (arg1@@3 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@3)))
(= (type (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1))))
 (=> (= (type val) B@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))) (= (Ctor RefType) 9)))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType0Type RefType)) (= (type Heap1) (MapType0Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert  (and (and (and (and (and (and (forall ((arg0@@18 T@T) (arg1@@4 T@T) ) (! (= (Ctor (MapType1Type arg0@@18 arg1@@4)) 10)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@19 T@T) (arg1@@5 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@19 arg1@@5)) arg0@@19)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@19 arg1@@5))
))) (forall ((arg0@@20 T@T) (arg1@@6 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@20 arg1@@6)) arg1@@6)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@20 arg1@@6))
))) (forall ((arg0@@21 T@U) (arg1@@7 T@U) (arg2@@1 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@21))))
(= (type (MapType1Select arg0@@21 arg1@@7 arg2@@1)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@21 arg1@@7 arg2@@1))
))) (forall ((arg0@@22 T@U) (arg1@@8 T@U) (arg2@@2 T@U) (arg3@@0 T@U) ) (! (let ((aVar1@@0 (type arg3@@0)))
(let ((aVar0@@0 (type arg1@@8)))
(= (type (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@3) x0@@3 x1@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@4) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@5) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@6) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))))
(assert (forall ((Heap T@U) (Mask T@U) ) (!  (=> (and (and (= (type Heap) (MapType0Type RefType)) (= (type Mask) (MapType1Type RefType realType))) (state Heap Mask)) (GoodMask Mask))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap Mask))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType0Type RefType)) (= (type Heap1@@0) (MapType0Type RefType))) (= (type Heap2) (MapType0Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert  (and (and (= (Ctor FrameTypeType) 11) (= (type null) RefType)) (forall ((arg0@@23 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@23))))
(= (type (PredicateMaskField arg0@@23)) (FieldType A (MapType1Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@23))
))))
(assert (forall ((Heap@@0 T@U) (ExhaleHeap T@U) (Mask@@0 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@0) (MapType0Type RefType)) (= (type ExhaleHeap) (MapType0Type RefType))) (= (type Mask@@0) (MapType1Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0)) (and (HasDirectPerm Mask@@0 null pm_f) (IsPredicateField pm_f))) (= (MapType0Select Heap@@0 null (PredicateMaskField pm_f)) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0) (IsPredicateField pm_f) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((arg0@@24 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@24))))
(= (type (WandMaskField arg0@@24)) (FieldType A@@0 (MapType1Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@24))
)))
(assert (forall ((Heap@@1 T@U) (ExhaleHeap@@0 T@U) (Mask@@1 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@1) (MapType0Type RefType)) (= (type ExhaleHeap@@0) (MapType0Type RefType))) (= (type Mask@@1) (MapType1Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1)) (and (HasDirectPerm Mask@@1 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType0Select Heap@@1 null (WandMaskField pm_f@@0)) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1) (IsWandField pm_f@@0) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert  (and (and (= (Ctor WandType_wand_1Type) 12) (forall ((arg0@@25 T@U) (arg1@@9 Real) (arg2@@3 T@U) (arg3@@1 Int) (arg4 T@U) (arg5 Int) ) (! (= (type (|wand_1#ft| arg0@@25 arg1@@9 arg2@@3 arg3@@1 arg4 arg5)) (FieldType WandType_wand_1Type FrameTypeType))
 :qid |funType:wand_1#ft|
 :pattern ( (|wand_1#ft| arg0@@25 arg1@@9 arg2@@3 arg3@@1 arg4 arg5))
))) (forall ((arg0@@26 T@U) (arg1@@10 Real) (arg2@@4 T@U) (arg3@@2 Int) (arg4@@0 T@U) (arg5@@0 Int) ) (! (= (type (|wand_1#sm| arg0@@26 arg1@@10 arg2@@4 arg3@@2 arg4@@0 arg5@@0)) (FieldType WandType_wand_1Type (MapType1Type RefType boolType)))
 :qid |funType:wand_1#sm|
 :pattern ( (|wand_1#sm| arg0@@26 arg1@@10 arg2@@4 arg3@@2 arg4@@0 arg5@@0))
))))
(assert (forall ((arg1@@11 T@U) (arg2@@5 Real) (arg3@@3 T@U) (arg4@@1 Int) (arg5@@1 T@U) (arg6 Int) ) (!  (=> (and (and (= (type arg1@@11) RefType) (= (type arg3@@3) RefType)) (= (type arg5@@1) RefType)) (= (|wand_1#sm| arg1@@11 arg2@@5 arg3@@3 arg4@@1 arg5@@1 arg6) (WandMaskField (|wand_1#ft| arg1@@11 arg2@@5 arg3@@3 arg4@@1 arg5@@1 arg6))))
 :qid |stdinbpl.231:15|
 :skolemid |33|
 :pattern ( (WandMaskField (|wand_1#ft| arg1@@11 arg2@@5 arg3@@3 arg4@@1 arg5@@1 arg6)))
)))
(assert  (and (and (= (Ctor WandType_wand_2Type) 13) (forall ((arg0@@27 T@U) (arg1@@12 Real) (arg2@@6 T@U) (arg3@@4 Real) (arg4@@2 T@U) (arg5@@2 T@U) ) (! (= (type (|wand_2#ft| arg0@@27 arg1@@12 arg2@@6 arg3@@4 arg4@@2 arg5@@2)) (FieldType WandType_wand_2Type FrameTypeType))
 :qid |funType:wand_2#ft|
 :pattern ( (|wand_2#ft| arg0@@27 arg1@@12 arg2@@6 arg3@@4 arg4@@2 arg5@@2))
))) (forall ((arg0@@28 T@U) (arg1@@13 Real) (arg2@@7 T@U) (arg3@@5 Real) (arg4@@3 T@U) (arg5@@3 T@U) ) (! (= (type (|wand_2#sm| arg0@@28 arg1@@13 arg2@@7 arg3@@5 arg4@@3 arg5@@3)) (FieldType WandType_wand_2Type (MapType1Type RefType boolType)))
 :qid |funType:wand_2#sm|
 :pattern ( (|wand_2#sm| arg0@@28 arg1@@13 arg2@@7 arg3@@5 arg4@@3 arg5@@3))
))))
(assert (forall ((arg1@@14 T@U) (arg2@@8 Real) (arg3@@6 T@U) (arg4@@4 Real) (arg5@@4 T@U) (arg6@@0 T@U) ) (!  (=> (and (and (and (= (type arg1@@14) RefType) (= (type arg3@@6) RefType)) (= (type arg5@@4) RefType)) (= (type arg6@@0) RefType)) (= (|wand_2#sm| arg1@@14 arg2@@8 arg3@@6 arg4@@4 arg5@@4 arg6@@0) (WandMaskField (|wand_2#ft| arg1@@14 arg2@@8 arg3@@6 arg4@@4 arg5@@4 arg6@@0))))
 :qid |stdinbpl.263:15|
 :skolemid |40|
 :pattern ( (WandMaskField (|wand_2#ft| arg1@@14 arg2@@8 arg3@@6 arg4@@4 arg5@@4 arg6@@0)))
)))
(assert (forall ((Heap@@2 T@U) (ExhaleHeap@@1 T@U) (Mask@@2 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@2) (MapType0Type RefType)) (= (type ExhaleHeap@@1) (MapType0Type RefType))) (= (type Mask@@2) (MapType1Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@2 ExhaleHeap@@1 Mask@@2)) (U_2_bool (MapType0Select Heap@@2 o_1 $allocated))) (U_2_bool (MapType0Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@2 ExhaleHeap@@1 Mask@@2) (MapType0Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert  (and (= (Ctor WandType_wand_3Type) 14) (forall ((arg0@@29 Bool) (arg1@@15 T@U) (arg2@@9 Real) (arg3@@7 T@U) (arg4@@5 Int) ) (! (= (type (wand_3 arg0@@29 arg1@@15 arg2@@9 arg3@@7 arg4@@5)) (FieldType WandType_wand_3Type intType))
 :qid |funType:wand_3|
 :pattern ( (wand_3 arg0@@29 arg1@@15 arg2@@9 arg3@@7 arg4@@5))
))))
(assert (forall ((arg1@@16 Bool) (arg2@@10 T@U) (arg3@@8 Real) (arg4@@6 T@U) (arg5@@5 Int) ) (!  (=> (and (= (type arg2@@10) RefType) (= (type arg4@@6) RefType)) (= (getPredWandId (wand_3 arg1@@16 arg2@@10 arg3@@8 arg4@@6 arg5@@5)) 3))
 :qid |stdinbpl.299:15|
 :skolemid |48|
 :pattern ( (wand_3 arg1@@16 arg2@@10 arg3@@8 arg4@@6 arg5@@5))
)))
(assert (forall ((Heap@@3 T@U) (ExhaleHeap@@2 T@U) (Mask@@3 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@3) (MapType0Type RefType)) (= (type ExhaleHeap@@2) (MapType0Type RefType))) (= (type Mask@@3) (MapType1Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@3 ExhaleHeap@@2 Mask@@3)) (HasDirectPerm Mask@@3 o_1@@0 f_2)) (= (MapType0Select Heap@@3 o_1@@0 f_2) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@3 ExhaleHeap@@2 Mask@@3) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert  (and (= (type dummyHeap) (MapType0Type RefType)) (= (type ZeroMask) (MapType1Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert  (and (= (Ctor WandType_wandType) 15) (forall ((arg0@@30 T@U) (arg1@@17 Real) (arg2@@11 T@U) (arg3@@9 Real) (arg4@@7 T@U) (arg5@@6 Int) (arg6@@1 T@U) (arg7 Int) (arg8 T@U) (arg9 Real) (arg10 T@U) (arg11 T@U) ) (! (= (type (wand arg0@@30 arg1@@17 arg2@@11 arg3@@9 arg4@@7 arg5@@6 arg6@@1 arg7 arg8 arg9 arg10 arg11)) (FieldType WandType_wandType intType))
 :qid |funType:wand|
 :pattern ( (wand arg0@@30 arg1@@17 arg2@@11 arg3@@9 arg4@@7 arg5@@6 arg6@@1 arg7 arg8 arg9 arg10 arg11))
))))
(assert (forall ((arg1@@18 T@U) (arg2@@12 Real) (arg3@@10 T@U) (arg4@@8 Real) (arg5@@7 T@U) (arg6@@2 Int) (arg7@@0 T@U) (arg8@@0 Int) (arg9@@0 T@U) (arg10@@0 Real) (arg11@@0 T@U) (arg12 T@U) ) (!  (=> (and (and (and (and (and (and (= (type arg1@@18) RefType) (= (type arg3@@10) RefType)) (= (type arg5@@7) RefType)) (= (type arg7@@0) RefType)) (= (type arg9@@0) RefType)) (= (type arg11@@0) RefType)) (= (type arg12) RefType)) (= (getPredWandId (wand arg1@@18 arg2@@12 arg3@@10 arg4@@8 arg5@@7 arg6@@2 arg7@@0 arg8@@0 arg9@@0 arg10@@0 arg11@@0 arg12)) 0))
 :qid |stdinbpl.203:15|
 :skolemid |27|
 :pattern ( (wand arg1@@18 arg2@@12 arg3@@10 arg4@@8 arg5@@7 arg6@@2 arg7@@0 arg8@@0 arg9@@0 arg10@@0 arg11@@0 arg12))
)))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.170:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert (forall ((arg1@@19 Bool) (arg2@@13 T@U) (arg3@@11 Real) (arg4@@9 T@U) (arg5@@8 Int) ) (!  (=> (and (= (type arg2@@13) RefType) (= (type arg4@@9) RefType)) (IsWandField (wand_3 arg1@@19 arg2@@13 arg3@@11 arg4@@9 arg5@@8)))
 :qid |stdinbpl.279:15|
 :skolemid |43|
 :pattern ( (wand_3 arg1@@19 arg2@@13 arg3@@11 arg4@@9 arg5@@8))
)))
(assert (forall ((arg0@@31 Bool) (arg1@@20 T@U) (arg2@@14 Real) (arg3@@12 T@U) (arg4@@10 Int) ) (! (= (type (|wand_3#ft| arg0@@31 arg1@@20 arg2@@14 arg3@@12 arg4@@10)) (FieldType WandType_wand_3Type FrameTypeType))
 :qid |funType:wand_3#ft|
 :pattern ( (|wand_3#ft| arg0@@31 arg1@@20 arg2@@14 arg3@@12 arg4@@10))
)))
(assert (forall ((arg1@@21 Bool) (arg2@@15 T@U) (arg3@@13 Real) (arg4@@11 T@U) (arg5@@9 Int) ) (!  (=> (and (= (type arg2@@15) RefType) (= (type arg4@@11) RefType)) (IsWandField (|wand_3#ft| arg1@@21 arg2@@15 arg3@@13 arg4@@11 arg5@@9)))
 :qid |stdinbpl.283:15|
 :skolemid |44|
 :pattern ( (|wand_3#ft| arg1@@21 arg2@@15 arg3@@13 arg4@@11 arg5@@9))
)))
(assert  (not (IsPredicateField f_7)))
(assert  (not (IsWandField f_7)))
(assert (forall ((Heap@@4 T@U) (ExhaleHeap@@3 T@U) (Mask@@4 T@U) ) (!  (=> (and (and (and (= (type Heap@@4) (MapType0Type RefType)) (= (type ExhaleHeap@@3) (MapType0Type RefType))) (= (type Mask@@4) (MapType1Type RefType realType))) (IdenticalOnKnownLocations Heap@@4 ExhaleHeap@@3 Mask@@4)) (succHeap Heap@@4 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@4 ExhaleHeap@@3 Mask@@4))
)))
(assert (forall ((arg1@@22 Bool) (arg2@@16 T@U) (arg3@@14 Real) (arg4@@12 T@U) (arg5@@10 Int) ) (!  (=> (and (= (type arg2@@16) RefType) (= (type arg4@@12) RefType)) (not (IsPredicateField (wand_3 arg1@@22 arg2@@16 arg3@@14 arg4@@12 arg5@@10))))
 :qid |stdinbpl.287:15|
 :skolemid |45|
 :pattern ( (wand_3 arg1@@22 arg2@@16 arg3@@14 arg4@@12 arg5@@10))
)))
(assert (forall ((arg1@@23 Bool) (arg2@@17 T@U) (arg3@@15 Real) (arg4@@13 T@U) (arg5@@11 Int) ) (!  (=> (and (= (type arg2@@17) RefType) (= (type arg4@@13) RefType)) (not (IsPredicateField (|wand_3#ft| arg1@@23 arg2@@17 arg3@@15 arg4@@13 arg5@@11))))
 :qid |stdinbpl.291:15|
 :skolemid |46|
 :pattern ( (|wand_3#ft| arg1@@23 arg2@@17 arg3@@15 arg4@@13 arg5@@11))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType1Type RefType realType)) (= (type SummandMask1) (MapType1Type RefType realType))) (= (type SummandMask2) (MapType1Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType1Select ResultMask o_2 f_4)) (+ (U_2_real (MapType1Select SummandMask1 o_2 f_4)) (U_2_real (MapType1Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask2 o_2 f_4))
)))
(assert (forall ((arg0@@32 T@U) (arg1@@24 Real) (arg2@@18 T@U) (arg3@@16 Int) (arg4@@14 T@U) (arg5@@12 Int) ) (! (= (type (wand_1 arg0@@32 arg1@@24 arg2@@18 arg3@@16 arg4@@14 arg5@@12)) (FieldType WandType_wand_1Type intType))
 :qid |funType:wand_1|
 :pattern ( (wand_1 arg0@@32 arg1@@24 arg2@@18 arg3@@16 arg4@@14 arg5@@12))
)))
(assert (forall ((arg1@@25 T@U) (arg2@@19 Real) (arg3@@17 T@U) (arg4@@15 Int) (arg5@@13 T@U) (arg6@@3 Int) (arg1_2 T@U) (arg2_2 Real) (arg3_2 T@U) (arg4_2 Int) (arg5_2 T@U) (arg6_2 Int) ) (!  (=> (and (and (and (and (and (and (= (type arg1@@25) RefType) (= (type arg3@@17) RefType)) (= (type arg5@@13) RefType)) (= (type arg1_2) RefType)) (= (type arg3_2) RefType)) (= (type arg5_2) RefType)) (= (wand_1 arg1@@25 arg2@@19 arg3@@17 arg4@@15 arg5@@13 arg6@@3) (wand_1 arg1_2 arg2_2 arg3_2 arg4_2 arg5_2 arg6_2))) (and (= arg1@@25 arg1_2) (and (= arg2@@19 arg2_2) (and (= arg3@@17 arg3_2) (and (= arg4@@15 arg4_2) (and (= arg5@@13 arg5_2) (= arg6@@3 arg6_2)))))))
 :qid |stdinbpl.239:15|
 :skolemid |35|
 :pattern ( (wand_1 arg1@@25 arg2@@19 arg3@@17 arg4@@15 arg5@@13 arg6@@3) (wand_1 arg1_2 arg2_2 arg3_2 arg4_2 arg5_2 arg6_2))
)))
(assert (forall ((arg0@@33 T@U) (arg1@@26 Real) (arg2@@20 T@U) (arg3@@18 Real) (arg4@@16 T@U) (arg5@@14 T@U) ) (! (= (type (wand_2 arg0@@33 arg1@@26 arg2@@20 arg3@@18 arg4@@16 arg5@@14)) (FieldType WandType_wand_2Type intType))
 :qid |funType:wand_2|
 :pattern ( (wand_2 arg0@@33 arg1@@26 arg2@@20 arg3@@18 arg4@@16 arg5@@14))
)))
(assert (forall ((arg1@@27 T@U) (arg2@@21 Real) (arg3@@19 T@U) (arg4@@17 Real) (arg5@@15 T@U) (arg6@@4 T@U) (arg1_2@@0 T@U) (arg2_2@@0 Real) (arg3_2@@0 T@U) (arg4_2@@0 Real) (arg5_2@@0 T@U) (arg6_2@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type arg1@@27) RefType) (= (type arg3@@19) RefType)) (= (type arg5@@15) RefType)) (= (type arg6@@4) RefType)) (= (type arg1_2@@0) RefType)) (= (type arg3_2@@0) RefType)) (= (type arg5_2@@0) RefType)) (= (type arg6_2@@0) RefType)) (= (wand_2 arg1@@27 arg2@@21 arg3@@19 arg4@@17 arg5@@15 arg6@@4) (wand_2 arg1_2@@0 arg2_2@@0 arg3_2@@0 arg4_2@@0 arg5_2@@0 arg6_2@@0))) (and (= arg1@@27 arg1_2@@0) (and (= arg2@@21 arg2_2@@0) (and (= arg3@@19 arg3_2@@0) (and (= arg4@@17 arg4_2@@0) (and (= arg5@@15 arg5_2@@0) (= arg6@@4 arg6_2@@0)))))))
 :qid |stdinbpl.271:15|
 :skolemid |42|
 :pattern ( (wand_2 arg1@@27 arg2@@21 arg3@@19 arg4@@17 arg5@@15 arg6@@4) (wand_2 arg1_2@@0 arg2_2@@0 arg3_2@@0 arg4_2@@0 arg5_2@@0 arg6_2@@0))
)))
(assert (forall ((arg1@@28 T@U) (arg2@@22 Real) (arg3@@20 T@U) (arg4@@18 Real) (arg5@@16 T@U) (arg6@@5 Int) (arg7@@1 T@U) (arg8@@1 Int) (arg9@@1 T@U) (arg10@@1 Real) (arg11@@1 T@U) (arg12@@0 T@U) ) (!  (=> (and (and (and (and (and (and (= (type arg1@@28) RefType) (= (type arg3@@20) RefType)) (= (type arg5@@16) RefType)) (= (type arg7@@1) RefType)) (= (type arg9@@1) RefType)) (= (type arg11@@1) RefType)) (= (type arg12@@0) RefType)) (IsWandField (wand arg1@@28 arg2@@22 arg3@@20 arg4@@18 arg5@@16 arg6@@5 arg7@@1 arg8@@1 arg9@@1 arg10@@1 arg11@@1 arg12@@0)))
 :qid |stdinbpl.183:15|
 :skolemid |22|
 :pattern ( (wand arg1@@28 arg2@@22 arg3@@20 arg4@@18 arg5@@16 arg6@@5 arg7@@1 arg8@@1 arg9@@1 arg10@@1 arg11@@1 arg12@@0))
)))
(assert (forall ((arg0@@34 T@U) (arg1@@29 Real) (arg2@@23 T@U) (arg3@@21 Real) (arg4@@19 T@U) (arg5@@17 Int) (arg6@@6 T@U) (arg7@@2 Int) (arg8@@2 T@U) (arg9@@2 Real) (arg10@@2 T@U) (arg11@@2 T@U) ) (! (= (type (|wand#ft| arg0@@34 arg1@@29 arg2@@23 arg3@@21 arg4@@19 arg5@@17 arg6@@6 arg7@@2 arg8@@2 arg9@@2 arg10@@2 arg11@@2)) (FieldType WandType_wandType FrameTypeType))
 :qid |funType:wand#ft|
 :pattern ( (|wand#ft| arg0@@34 arg1@@29 arg2@@23 arg3@@21 arg4@@19 arg5@@17 arg6@@6 arg7@@2 arg8@@2 arg9@@2 arg10@@2 arg11@@2))
)))
(assert (forall ((arg1@@30 T@U) (arg2@@24 Real) (arg3@@22 T@U) (arg4@@20 Real) (arg5@@18 T@U) (arg6@@7 Int) (arg7@@3 T@U) (arg8@@3 Int) (arg9@@3 T@U) (arg10@@3 Real) (arg11@@3 T@U) (arg12@@1 T@U) ) (!  (=> (and (and (and (and (and (and (= (type arg1@@30) RefType) (= (type arg3@@22) RefType)) (= (type arg5@@18) RefType)) (= (type arg7@@3) RefType)) (= (type arg9@@3) RefType)) (= (type arg11@@3) RefType)) (= (type arg12@@1) RefType)) (IsWandField (|wand#ft| arg1@@30 arg2@@24 arg3@@22 arg4@@20 arg5@@18 arg6@@7 arg7@@3 arg8@@3 arg9@@3 arg10@@3 arg11@@3 arg12@@1)))
 :qid |stdinbpl.187:15|
 :skolemid |23|
 :pattern ( (|wand#ft| arg1@@30 arg2@@24 arg3@@22 arg4@@20 arg5@@18 arg6@@7 arg7@@3 arg8@@3 arg9@@3 arg10@@3 arg11@@3 arg12@@1))
)))
(assert  (and (forall ((arg0@@35 Real) (arg1@@31 T@U) ) (! (= (type (ConditionalFrame arg0@@35 arg1@@31)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@35 arg1@@31))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.158:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((arg1@@32 T@U) (arg2@@25 Real) (arg3@@23 T@U) (arg4@@21 Real) (arg5@@19 T@U) (arg6@@8 Int) (arg7@@4 T@U) (arg8@@4 Int) (arg9@@4 T@U) (arg10@@4 Real) (arg11@@4 T@U) (arg12@@2 T@U) ) (!  (=> (and (and (and (and (and (and (= (type arg1@@32) RefType) (= (type arg3@@23) RefType)) (= (type arg5@@19) RefType)) (= (type arg7@@4) RefType)) (= (type arg9@@4) RefType)) (= (type arg11@@4) RefType)) (= (type arg12@@2) RefType)) (not (IsPredicateField (wand arg1@@32 arg2@@25 arg3@@23 arg4@@21 arg5@@19 arg6@@8 arg7@@4 arg8@@4 arg9@@4 arg10@@4 arg11@@4 arg12@@2))))
 :qid |stdinbpl.191:15|
 :skolemid |24|
 :pattern ( (wand arg1@@32 arg2@@25 arg3@@23 arg4@@21 arg5@@19 arg6@@8 arg7@@4 arg8@@4 arg9@@4 arg10@@4 arg11@@4 arg12@@2))
)))
(assert (forall ((arg1@@33 T@U) (arg2@@26 Real) (arg3@@24 T@U) (arg4@@22 Real) (arg5@@20 T@U) (arg6@@9 Int) (arg7@@5 T@U) (arg8@@5 Int) (arg9@@5 T@U) (arg10@@5 Real) (arg11@@5 T@U) (arg12@@3 T@U) ) (!  (=> (and (and (and (and (and (and (= (type arg1@@33) RefType) (= (type arg3@@24) RefType)) (= (type arg5@@20) RefType)) (= (type arg7@@5) RefType)) (= (type arg9@@5) RefType)) (= (type arg11@@5) RefType)) (= (type arg12@@3) RefType)) (not (IsPredicateField (|wand#ft| arg1@@33 arg2@@26 arg3@@24 arg4@@22 arg5@@20 arg6@@9 arg7@@5 arg8@@5 arg9@@5 arg10@@5 arg11@@5 arg12@@3))))
 :qid |stdinbpl.195:15|
 :skolemid |25|
 :pattern ( (|wand#ft| arg1@@33 arg2@@26 arg3@@24 arg4@@22 arg5@@20 arg6@@9 arg7@@5 arg8@@5 arg9@@5 arg10@@5 arg11@@5 arg12@@3))
)))
(assert (forall ((Mask@@5 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@5) (MapType1Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@5 o_2@@0 f_4@@0) (> (U_2_real (MapType1Select Mask@@5 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@5 o_2@@0 f_4@@0))
)))
(assert (forall ((arg1@@34 T@U) (arg2@@27 Real) (arg3@@25 T@U) (arg4@@23 Int) (arg5@@21 T@U) (arg6@@10 Int) ) (!  (=> (and (and (= (type arg1@@34) RefType) (= (type arg3@@25) RefType)) (= (type arg5@@21) RefType)) (= (getPredWandId (wand_1 arg1@@34 arg2@@27 arg3@@25 arg4@@23 arg5@@21 arg6@@10)) 1))
 :qid |stdinbpl.235:15|
 :skolemid |34|
 :pattern ( (wand_1 arg1@@34 arg2@@27 arg3@@25 arg4@@23 arg5@@21 arg6@@10))
)))
(assert (forall ((arg1@@35 T@U) (arg2@@28 Real) (arg3@@26 T@U) (arg4@@24 Real) (arg5@@22 T@U) (arg6@@11 T@U) ) (!  (=> (and (and (and (= (type arg1@@35) RefType) (= (type arg3@@26) RefType)) (= (type arg5@@22) RefType)) (= (type arg6@@11) RefType)) (= (getPredWandId (wand_2 arg1@@35 arg2@@28 arg3@@26 arg4@@24 arg5@@22 arg6@@11)) 2))
 :qid |stdinbpl.267:15|
 :skolemid |41|
 :pattern ( (wand_2 arg1@@35 arg2@@28 arg3@@26 arg4@@24 arg5@@22 arg6@@11))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType1Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType1Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((arg1@@36 Bool) (arg2@@29 T@U) (arg3@@27 Real) (arg4@@25 T@U) (arg5@@23 Int) (arg1_2@@1 Bool) (arg2_2@@1 T@U) (arg3_2@@1 Real) (arg4_2@@1 T@U) (arg5_2@@1 Int) ) (!  (=> (and (and (and (and (= (type arg2@@29) RefType) (= (type arg4@@25) RefType)) (= (type arg2_2@@1) RefType)) (= (type arg4_2@@1) RefType)) (= (wand_3 arg1@@36 arg2@@29 arg3@@27 arg4@@25 arg5@@23) (wand_3 arg1_2@@1 arg2_2@@1 arg3_2@@1 arg4_2@@1 arg5_2@@1))) (and (= arg1@@36 arg1_2@@1) (and (= arg2@@29 arg2_2@@1) (and (= arg3@@27 arg3_2@@1) (and (= arg4@@25 arg4_2@@1) (= arg5@@23 arg5_2@@1))))))
 :qid |stdinbpl.303:15|
 :skolemid |49|
 :pattern ( (wand_3 arg1@@36 arg2@@29 arg3@@27 arg4@@25 arg5@@23) (wand_3 arg1_2@@1 arg2_2@@1 arg3_2@@1 arg4_2@@1 arg5_2@@1))
)))
(assert (forall ((arg1@@37 T@U) (arg2@@30 Real) (arg3@@28 T@U) (arg4@@26 Int) (arg5@@24 T@U) (arg6@@12 Int) ) (!  (=> (and (and (= (type arg1@@37) RefType) (= (type arg3@@28) RefType)) (= (type arg5@@24) RefType)) (IsWandField (wand_1 arg1@@37 arg2@@30 arg3@@28 arg4@@26 arg5@@24 arg6@@12)))
 :qid |stdinbpl.215:15|
 :skolemid |29|
 :pattern ( (wand_1 arg1@@37 arg2@@30 arg3@@28 arg4@@26 arg5@@24 arg6@@12))
)))
(assert (forall ((arg1@@38 T@U) (arg2@@31 Real) (arg3@@29 T@U) (arg4@@27 Int) (arg5@@25 T@U) (arg6@@13 Int) ) (!  (=> (and (and (= (type arg1@@38) RefType) (= (type arg3@@29) RefType)) (= (type arg5@@25) RefType)) (IsWandField (|wand_1#ft| arg1@@38 arg2@@31 arg3@@29 arg4@@27 arg5@@25 arg6@@13)))
 :qid |stdinbpl.219:15|
 :skolemid |30|
 :pattern ( (|wand_1#ft| arg1@@38 arg2@@31 arg3@@29 arg4@@27 arg5@@25 arg6@@13))
)))
(assert (forall ((arg1@@39 T@U) (arg2@@32 Real) (arg3@@30 T@U) (arg4@@28 Real) (arg5@@26 T@U) (arg6@@14 T@U) ) (!  (=> (and (and (and (= (type arg1@@39) RefType) (= (type arg3@@30) RefType)) (= (type arg5@@26) RefType)) (= (type arg6@@14) RefType)) (IsWandField (wand_2 arg1@@39 arg2@@32 arg3@@30 arg4@@28 arg5@@26 arg6@@14)))
 :qid |stdinbpl.247:15|
 :skolemid |36|
 :pattern ( (wand_2 arg1@@39 arg2@@32 arg3@@30 arg4@@28 arg5@@26 arg6@@14))
)))
(assert (forall ((arg1@@40 T@U) (arg2@@33 Real) (arg3@@31 T@U) (arg4@@29 Real) (arg5@@27 T@U) (arg6@@15 T@U) ) (!  (=> (and (and (and (= (type arg1@@40) RefType) (= (type arg3@@31) RefType)) (= (type arg5@@27) RefType)) (= (type arg6@@15) RefType)) (IsWandField (|wand_2#ft| arg1@@40 arg2@@33 arg3@@31 arg4@@29 arg5@@27 arg6@@15)))
 :qid |stdinbpl.251:15|
 :skolemid |37|
 :pattern ( (|wand_2#ft| arg1@@40 arg2@@33 arg3@@31 arg4@@29 arg5@@27 arg6@@15))
)))
(assert (forall ((arg1@@41 T@U) (arg2@@34 Real) (arg3@@32 T@U) (arg4@@30 Int) (arg5@@28 T@U) (arg6@@16 Int) ) (!  (=> (and (and (= (type arg1@@41) RefType) (= (type arg3@@32) RefType)) (= (type arg5@@28) RefType)) (not (IsPredicateField (wand_1 arg1@@41 arg2@@34 arg3@@32 arg4@@30 arg5@@28 arg6@@16))))
 :qid |stdinbpl.223:15|
 :skolemid |31|
 :pattern ( (wand_1 arg1@@41 arg2@@34 arg3@@32 arg4@@30 arg5@@28 arg6@@16))
)))
(assert (forall ((arg1@@42 T@U) (arg2@@35 Real) (arg3@@33 T@U) (arg4@@31 Int) (arg5@@29 T@U) (arg6@@17 Int) ) (!  (=> (and (and (= (type arg1@@42) RefType) (= (type arg3@@33) RefType)) (= (type arg5@@29) RefType)) (not (IsPredicateField (|wand_1#ft| arg1@@42 arg2@@35 arg3@@33 arg4@@31 arg5@@29 arg6@@17))))
 :qid |stdinbpl.227:15|
 :skolemid |32|
 :pattern ( (|wand_1#ft| arg1@@42 arg2@@35 arg3@@33 arg4@@31 arg5@@29 arg6@@17))
)))
(assert (forall ((arg1@@43 T@U) (arg2@@36 Real) (arg3@@34 T@U) (arg4@@32 Real) (arg5@@30 T@U) (arg6@@18 T@U) ) (!  (=> (and (and (and (= (type arg1@@43) RefType) (= (type arg3@@34) RefType)) (= (type arg5@@30) RefType)) (= (type arg6@@18) RefType)) (not (IsPredicateField (wand_2 arg1@@43 arg2@@36 arg3@@34 arg4@@32 arg5@@30 arg6@@18))))
 :qid |stdinbpl.255:15|
 :skolemid |38|
 :pattern ( (wand_2 arg1@@43 arg2@@36 arg3@@34 arg4@@32 arg5@@30 arg6@@18))
)))
(assert (forall ((arg1@@44 T@U) (arg2@@37 Real) (arg3@@35 T@U) (arg4@@33 Real) (arg5@@31 T@U) (arg6@@19 T@U) ) (!  (=> (and (and (and (= (type arg1@@44) RefType) (= (type arg3@@35) RefType)) (= (type arg5@@31) RefType)) (= (type arg6@@19) RefType)) (not (IsPredicateField (|wand_2#ft| arg1@@44 arg2@@37 arg3@@35 arg4@@33 arg5@@31 arg6@@19))))
 :qid |stdinbpl.259:15|
 :skolemid |39|
 :pattern ( (|wand_2#ft| arg1@@44 arg2@@37 arg3@@35 arg4@@33 arg5@@31 arg6@@19))
)))
(assert (forall ((arg0@@36 Bool) (arg1@@45 T@U) (arg2@@38 Real) (arg3@@36 T@U) (arg4@@34 Int) ) (! (= (type (|wand_3#sm| arg0@@36 arg1@@45 arg2@@38 arg3@@36 arg4@@34)) (FieldType WandType_wand_3Type (MapType1Type RefType boolType)))
 :qid |funType:wand_3#sm|
 :pattern ( (|wand_3#sm| arg0@@36 arg1@@45 arg2@@38 arg3@@36 arg4@@34))
)))
(assert (forall ((arg1@@46 Bool) (arg2@@39 T@U) (arg3@@37 Real) (arg4@@35 T@U) (arg5@@32 Int) ) (!  (=> (and (= (type arg2@@39) RefType) (= (type arg4@@35) RefType)) (= (|wand_3#sm| arg1@@46 arg2@@39 arg3@@37 arg4@@35 arg5@@32) (WandMaskField (|wand_3#ft| arg1@@46 arg2@@39 arg3@@37 arg4@@35 arg5@@32))))
 :qid |stdinbpl.295:15|
 :skolemid |47|
 :pattern ( (WandMaskField (|wand_3#ft| arg1@@46 arg2@@39 arg3@@37 arg4@@35 arg5@@32)))
)))
(assert (forall ((Heap@@5 T@U) (ExhaleHeap@@4 T@U) (Mask@@6 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@5) (MapType0Type RefType)) (= (type ExhaleHeap@@4) (MapType0Type RefType))) (= (type Mask@@6) (MapType1Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@4 Mask@@6)) (and (HasDirectPerm Mask@@6 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType1Select (MapType0Select Heap@@5 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType0Select Heap@@5 o2 f_2@@0) (MapType0Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType0Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@4 Mask@@6) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@6 T@U) (ExhaleHeap@@5 T@U) (Mask@@7 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@6) (MapType0Type RefType)) (= (type ExhaleHeap@@5) (MapType0Type RefType))) (= (type Mask@@7) (MapType1Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@5 Mask@@7)) (and (HasDirectPerm Mask@@7 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType1Select (MapType0Select Heap@@6 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType0Select Heap@@6 o2@@0 f_2@@1) (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@5 Mask@@7) (IsWandField pm_f@@2))
)))
(assert (forall ((Mask@@8 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@8) (MapType1Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@8)) (and (>= (U_2_real (MapType1Select Mask@@8 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@8) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType1Select Mask@@8 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@8) (MapType1Select Mask@@8 o_2@@2 f_4@@2))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@7 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@7) (MapType0Type RefType))) (U_2_bool (MapType0Select Heap@@7 o $allocated))) (U_2_bool (MapType0Select Heap@@7 (MapType0Select Heap@@7 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType0Select Heap@@7 o f))
)))
(assert (forall ((arg0@@37 T@U) (arg1@@47 Real) (arg2@@40 T@U) (arg3@@38 Real) (arg4@@36 T@U) (arg5@@33 Int) (arg6@@20 T@U) (arg7@@6 Int) (arg8@@6 T@U) (arg9@@6 Real) (arg10@@6 T@U) (arg11@@6 T@U) ) (! (= (type (|wand#sm| arg0@@37 arg1@@47 arg2@@40 arg3@@38 arg4@@36 arg5@@33 arg6@@20 arg7@@6 arg8@@6 arg9@@6 arg10@@6 arg11@@6)) (FieldType WandType_wandType (MapType1Type RefType boolType)))
 :qid |funType:wand#sm|
 :pattern ( (|wand#sm| arg0@@37 arg1@@47 arg2@@40 arg3@@38 arg4@@36 arg5@@33 arg6@@20 arg7@@6 arg8@@6 arg9@@6 arg10@@6 arg11@@6))
)))
(assert (forall ((arg1@@48 T@U) (arg2@@41 Real) (arg3@@39 T@U) (arg4@@37 Real) (arg5@@34 T@U) (arg6@@21 Int) (arg7@@7 T@U) (arg8@@7 Int) (arg9@@7 T@U) (arg10@@7 Real) (arg11@@7 T@U) (arg12@@4 T@U) ) (!  (=> (and (and (and (and (and (and (= (type arg1@@48) RefType) (= (type arg3@@39) RefType)) (= (type arg5@@34) RefType)) (= (type arg7@@7) RefType)) (= (type arg9@@7) RefType)) (= (type arg11@@7) RefType)) (= (type arg12@@4) RefType)) (= (|wand#sm| arg1@@48 arg2@@41 arg3@@39 arg4@@37 arg5@@34 arg6@@21 arg7@@7 arg8@@7 arg9@@7 arg10@@7 arg11@@7 arg12@@4) (WandMaskField (|wand#ft| arg1@@48 arg2@@41 arg3@@39 arg4@@37 arg5@@34 arg6@@21 arg7@@7 arg8@@7 arg9@@7 arg10@@7 arg11@@7 arg12@@4))))
 :qid |stdinbpl.199:15|
 :skolemid |26|
 :pattern ( (WandMaskField (|wand#ft| arg1@@48 arg2@@41 arg3@@39 arg4@@37 arg5@@34 arg6@@21 arg7@@7 arg8@@7 arg9@@7 arg10@@7 arg11@@7 arg12@@4)))
)))
(assert (forall ((Heap@@8 T@U) (o@@0 T@U) (f_3 T@U) (v T@U) ) (! (let ((B@@8 (type v)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@8) (MapType0Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@8 (MapType0Store Heap@@8 o@@0 f_3 v)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType0Store Heap@@8 o@@0 f_3 v))
)))
(assert (= (type ZeroPMask) (MapType1Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType1Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType1Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.165:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (forall ((arg1@@49 T@U) (arg2@@42 Real) (arg3@@40 T@U) (arg4@@38 Real) (arg5@@35 T@U) (arg6@@22 Int) (arg7@@8 T@U) (arg8@@8 Int) (arg9@@8 T@U) (arg10@@8 Real) (arg11@@8 T@U) (arg12@@5 T@U) (arg1_2@@2 T@U) (arg2_2@@2 Real) (arg3_2@@2 T@U) (arg4_2@@2 Real) (arg5_2@@2 T@U) (arg6_2@@1 Int) (arg7_2 T@U) (arg8_2 Int) (arg9_2 T@U) (arg10_2 Real) (arg11_2 T@U) (arg12_2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type arg1@@49) RefType) (= (type arg3@@40) RefType)) (= (type arg5@@35) RefType)) (= (type arg7@@8) RefType)) (= (type arg9@@8) RefType)) (= (type arg11@@8) RefType)) (= (type arg12@@5) RefType)) (= (type arg1_2@@2) RefType)) (= (type arg3_2@@2) RefType)) (= (type arg5_2@@2) RefType)) (= (type arg7_2) RefType)) (= (type arg9_2) RefType)) (= (type arg11_2) RefType)) (= (type arg12_2) RefType)) (= (wand arg1@@49 arg2@@42 arg3@@40 arg4@@38 arg5@@35 arg6@@22 arg7@@8 arg8@@8 arg9@@8 arg10@@8 arg11@@8 arg12@@5) (wand arg1_2@@2 arg2_2@@2 arg3_2@@2 arg4_2@@2 arg5_2@@2 arg6_2@@1 arg7_2 arg8_2 arg9_2 arg10_2 arg11_2 arg12_2))) (and (= arg1@@49 arg1_2@@2) (and (= arg2@@42 arg2_2@@2) (and (= arg3@@40 arg3_2@@2) (and (= arg4@@38 arg4_2@@2) (and (= arg5@@35 arg5_2@@2) (and (= arg6@@22 arg6_2@@1) (and (= arg7@@8 arg7_2) (and (= arg8@@8 arg8_2) (and (= arg9@@8 arg9_2) (and (= arg10@@8 arg10_2) (and (= arg11@@8 arg11_2) (= arg12@@5 arg12_2)))))))))))))
 :qid |stdinbpl.207:15|
 :skolemid |28|
 :pattern ( (wand arg1@@49 arg2@@42 arg3@@40 arg4@@38 arg5@@35 arg6@@22 arg7@@8 arg8@@8 arg9@@8 arg10@@8 arg11@@8 arg12@@5) (wand arg1_2@@2 arg2_2@@2 arg3_2@@2 arg4_2@@2 arg5_2@@2 arg6_2@@1 arg7_2 arg8_2 arg9_2 arg10_2 arg11_2 arg12_2))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun Mask@19 () T@U)
(declare-fun Mask@18 () T@U)
(declare-fun freshObj@0 () T@U)
(declare-fun Heap@16 () T@U)
(declare-fun x@@8 () T@U)
(declare-fun Mask@20 () T@U)
(declare-fun Labellhs5Heap () T@U)
(declare-fun ExhaleHeap@4 () T@U)
(declare-fun first_lblGuard@0 () Bool)
(declare-fun LabelfirstMask@0 () T@U)
(declare-fun LabelfirstHeap@0 () T@U)
(declare-fun Mask@17 () T@U)
(declare-fun b_1_1@75 () Bool)
(declare-fun b_17@6 () Bool)
(declare-fun Result_4Heap () T@U)
(declare-fun Ops_1Heap@0 () T@U)
(declare-fun Mask@16 () T@U)
(declare-fun Mask@15 () T@U)
(declare-fun Heap@14 () T@U)
(declare-fun Heap@15 () T@U)
(declare-fun Result_4Mask () T@U)
(declare-fun Ops_1Mask@4 () T@U)
(declare-fun b_1_1@74 () Bool)
(declare-fun neededTransfer@19 () Real)
(declare-fun Used_11Mask@3 () T@U)
(declare-fun initNeededTransfer@4 () Real)
(declare-fun b_18@0 () Bool)
(declare-fun b_18@1 () Bool)
(declare-fun b_18@2 () Bool)
(declare-fun Ops_1Mask@36 () T@U)
(declare-fun b_18@3 () Bool)
(declare-fun Ops_1Heap@4 () T@U)
(declare-fun Used_11Heap@0 () T@U)
(declare-fun b_18@4 () Bool)
(declare-fun takeTransfer@9 () Real)
(declare-fun neededTransfer@17 () Real)
(declare-fun Mask@13 () T@U)
(declare-fun Heap@12 () T@U)
(declare-fun b_17@3 () Bool)
(declare-fun Used_11Mask@1 () T@U)
(declare-fun neededTransfer@18 () Real)
(declare-fun Used_11Mask@2 () T@U)
(declare-fun b_17@4 () Bool)
(declare-fun b_17@5 () Bool)
(declare-fun Mask@14 () T@U)
(declare-fun Heap@13 () T@U)
(declare-fun maskTransfer@9 () Real)
(declare-fun takeTransfer@8 () Real)
(declare-fun Ops_1Mask@34 () T@U)
(declare-fun b_17@0 () Bool)
(declare-fun neededTransfer@16 () Real)
(declare-fun Used_11Mask@0 () T@U)
(declare-fun b_17@1 () Bool)
(declare-fun b_17@2 () Bool)
(declare-fun Ops_1Mask@35 () T@U)
(declare-fun maskTransfer@8 () Real)
(declare-fun b_17 () Bool)
(declare-fun b_1_1@71 () Bool)
(declare-fun b_16@0 () Bool)
(declare-fun b_1_1@72 () Bool)
(declare-fun b_1_1@73 () Bool)
(declare-fun b_16 () Bool)
(declare-fun Used_10Heap@0 () T@U)
(declare-fun Ops_1Mask@33 () T@U)
(declare-fun b_1_1@70 () Bool)
(declare-fun b_1_1@69 () Bool)
(declare-fun b_1_1@68 () Bool)
(declare-fun b_1_1@67 () Bool)
(declare-fun Ops_1Mask@32 () T@U)
(declare-fun b_1_1@64 () Bool)
(declare-fun Ops_1Mask@30 () T@U)
(declare-fun b_1_1@65 () Bool)
(declare-fun Ops_1Mask@31 () T@U)
(declare-fun b_1_1@66 () Bool)
(declare-fun b_1_1@60 () Bool)
(declare-fun b_14@6 () Bool)
(declare-fun neededTransfer@15 () Real)
(declare-fun Used_9Mask@3 () T@U)
(declare-fun initNeededTransfer@3 () Real)
(declare-fun b_15@0 () Bool)
(declare-fun b_15@1 () Bool)
(declare-fun Result_3Heap () T@U)
(declare-fun Result_3Mask () T@U)
(declare-fun b_15@2 () Bool)
(declare-fun Ops_1Mask@29 () T@U)
(declare-fun b_15@3 () Bool)
(declare-fun Ops_1Heap@3 () T@U)
(declare-fun Used_9Heap@0 () T@U)
(declare-fun b_15@4 () Bool)
(declare-fun b_1_1@61 () Bool)
(declare-fun b_1_1@62 () Bool)
(declare-fun ExhaleHeap@3 () T@U)
(declare-fun b_1_1@63 () Bool)
(declare-fun Mask@12 () T@U)
(declare-fun Heap@11 () T@U)
(declare-fun takeTransfer@7 () Real)
(declare-fun neededTransfer@13 () Real)
(declare-fun Heap@9 () T@U)
(declare-fun Mask@10 () T@U)
(declare-fun b_14@3 () Bool)
(declare-fun Used_9Mask@1 () T@U)
(declare-fun neededTransfer@14 () Real)
(declare-fun Used_9Mask@2 () T@U)
(declare-fun b_14@4 () Bool)
(declare-fun b_14@5 () Bool)
(declare-fun Mask@11 () T@U)
(declare-fun Heap@10 () T@U)
(declare-fun maskTransfer@7 () Real)
(declare-fun takeTransfer@6 () Real)
(declare-fun Ops_1Mask@27 () T@U)
(declare-fun b_14@0 () Bool)
(declare-fun neededTransfer@12 () Real)
(declare-fun Used_9Mask@0 () T@U)
(declare-fun b_14@1 () Bool)
(declare-fun b_14@2 () Bool)
(declare-fun Ops_1Mask@28 () T@U)
(declare-fun maskTransfer@6 () Real)
(declare-fun b_14 () Bool)
(declare-fun b_1_1@57 () Bool)
(declare-fun b_13@0 () Bool)
(declare-fun Heap@@9 () T@U)
(declare-fun b_1_1@58 () Bool)
(declare-fun b_1_1@59 () Bool)
(declare-fun Mask@0 () T@U)
(declare-fun b_13 () Bool)
(declare-fun Used_8Heap@0 () T@U)
(declare-fun Ops_1Mask@26 () T@U)
(declare-fun b_1_1@56 () Bool)
(declare-fun b_1_1@55 () Bool)
(declare-fun b_1_1@54 () Bool)
(declare-fun b_1_1@53 () Bool)
(declare-fun a_2@0 () Int)
(declare-fun Ops_1Mask@25 () T@U)
(declare-fun b_1_1@50 () Bool)
(declare-fun Ops_1Mask@23 () T@U)
(declare-fun b_1_1@51 () Bool)
(declare-fun Ops_1Mask@24 () T@U)
(declare-fun b_1_1@52 () Bool)
(declare-fun b_1_1@46 () Bool)
(declare-fun b_11@6 () Bool)
(declare-fun neededTransfer@11 () Real)
(declare-fun Used_7Mask@3 () T@U)
(declare-fun initNeededTransfer@2 () Real)
(declare-fun b_12@0 () Bool)
(declare-fun b_12@1 () Bool)
(declare-fun Result_2Heap () T@U)
(declare-fun Result_2Mask () T@U)
(declare-fun b_12@2 () Bool)
(declare-fun Ops_1Mask@22 () T@U)
(declare-fun b_12@3 () Bool)
(declare-fun Ops_1Heap@2 () T@U)
(declare-fun Used_7Heap@0 () T@U)
(declare-fun b_12@4 () Bool)
(declare-fun b_1_1@47 () Bool)
(declare-fun b_1_1@48 () Bool)
(declare-fun ExhaleHeap@2 () T@U)
(declare-fun b_1_1@49 () Bool)
(declare-fun Heap@8 () T@U)
(declare-fun Mask@9 () T@U)
(declare-fun takeTransfer@5 () Real)
(declare-fun neededTransfer@9 () Real)
(declare-fun Mask@7 () T@U)
(declare-fun Heap@6 () T@U)
(declare-fun b_11@3 () Bool)
(declare-fun Used_7Mask@1 () T@U)
(declare-fun neededTransfer@10 () Real)
(declare-fun Used_7Mask@2 () T@U)
(declare-fun b_11@4 () Bool)
(declare-fun b_11@5 () Bool)
(declare-fun Mask@8 () T@U)
(declare-fun Heap@7 () T@U)
(declare-fun maskTransfer@5 () Real)
(declare-fun takeTransfer@4 () Real)
(declare-fun Ops_1Mask@20 () T@U)
(declare-fun b_11@0 () Bool)
(declare-fun neededTransfer@8 () Real)
(declare-fun Used_7Mask@0 () T@U)
(declare-fun b_11@1 () Bool)
(declare-fun b_11@2 () Bool)
(declare-fun Ops_1Mask@21 () T@U)
(declare-fun maskTransfer@4 () Real)
(declare-fun b_11 () Bool)
(declare-fun b_1_1@43 () Bool)
(declare-fun b_10@0 () Bool)
(declare-fun b_1_1@44 () Bool)
(declare-fun b_1_1@45 () Bool)
(declare-fun b_10 () Bool)
(declare-fun Used_6Heap@0 () T@U)
(declare-fun b_1_1@40 () Bool)
(declare-fun b_9@0 () Bool)
(declare-fun b_1_1@41 () Bool)
(declare-fun b_1_1@42 () Bool)
(declare-fun b_9 () Bool)
(declare-fun Used_5Heap@0 () T@U)
(declare-fun b_7@7 () Bool)
(declare-fun b_1_1@36 () Bool)
(declare-fun b_8@0 () Bool)
(declare-fun Ops_3Heap@0 () T@U)
(declare-fun Ops_1Mask@19 () T@U)
(declare-fun Ops_1Mask@18 () T@U)
(declare-fun b_1_1@37 () Bool)
(declare-fun b_1_1@38 () Bool)
(declare-fun b_1_1@39 () Bool)
(declare-fun Ops_3Mask@2 () T@U)
(declare-fun b_7@6 () Bool)
(declare-fun b_7@5 () Bool)
(declare-fun b_8 () Bool)
(declare-fun Used_4Heap@0 () T@U)
(declare-fun b_7@4 () Bool)
(declare-fun b_7@3 () Bool)
(declare-fun Ops_3Mask@1 () T@U)
(declare-fun b_7@0 () Bool)
(declare-fun b_7@1 () Bool)
(declare-fun Ops_3Mask@0 () T@U)
(declare-fun b_7@2 () Bool)
(declare-fun b_7 () Bool)
(declare-fun b_6@0 () Bool)
(declare-fun b_6 () Bool)
(declare-fun Used_3Heap@0 () T@U)
(declare-fun Ops_1Mask@17 () T@U)
(declare-fun b_1_1@35 () Bool)
(declare-fun b_1_1@34 () Bool)
(declare-fun b_1_1@33 () Bool)
(declare-fun b_1_1@32 () Bool)
(declare-fun Ops_1Mask@16 () T@U)
(declare-fun b_1_1@29 () Bool)
(declare-fun Ops_1Mask@14 () T@U)
(declare-fun b_1_1@30 () Bool)
(declare-fun Ops_1Mask@15 () T@U)
(declare-fun b_1_1@31 () Bool)
(declare-fun b_1_1@25 () Bool)
(declare-fun b_4@6 () Bool)
(declare-fun neededTransfer@7 () Real)
(declare-fun Used_2Mask@3 () T@U)
(declare-fun initNeededTransfer@1 () Real)
(declare-fun b_5@0 () Bool)
(declare-fun b_5@1 () Bool)
(declare-fun Result_1Heap () T@U)
(declare-fun Result_1Mask () T@U)
(declare-fun b_5@2 () Bool)
(declare-fun Ops_1Mask@13 () T@U)
(declare-fun b_5@3 () Bool)
(declare-fun Ops_1Heap@1 () T@U)
(declare-fun Used_2Heap@0 () T@U)
(declare-fun b_5@4 () Bool)
(declare-fun b_1_1@26 () Bool)
(declare-fun b_1_1@27 () Bool)
(declare-fun ExhaleHeap@1 () T@U)
(declare-fun b_1_1@28 () Bool)
(declare-fun Mask@6 () T@U)
(declare-fun Heap@5 () T@U)
(declare-fun takeTransfer@3 () Real)
(declare-fun neededTransfer@5 () Real)
(declare-fun Heap@3 () T@U)
(declare-fun Mask@4 () T@U)
(declare-fun b_4@3 () Bool)
(declare-fun Used_2Mask@1 () T@U)
(declare-fun neededTransfer@6 () Real)
(declare-fun Used_2Mask@2 () T@U)
(declare-fun b_4@4 () Bool)
(declare-fun b_4@5 () Bool)
(declare-fun Mask@5 () T@U)
(declare-fun Heap@4 () T@U)
(declare-fun maskTransfer@3 () Real)
(declare-fun takeTransfer@2 () Real)
(declare-fun Ops_1Mask@11 () T@U)
(declare-fun b_4@0 () Bool)
(declare-fun neededTransfer@4 () Real)
(declare-fun Used_2Mask@0 () T@U)
(declare-fun b_4@1 () Bool)
(declare-fun b_4@2 () Bool)
(declare-fun Ops_1Mask@12 () T@U)
(declare-fun maskTransfer@2 () Real)
(declare-fun b_4 () Bool)
(declare-fun b_1_1@23 () Bool)
(declare-fun LabelfirstHeap () T@U)
(declare-fun LabelfirstMask () T@U)
(declare-fun b_1_1@24 () Bool)
(declare-fun Ops_1Mask@10 () T@U)
(declare-fun b_1_1@22 () Bool)
(declare-fun b_1_1@21 () Bool)
(declare-fun b_1_1@20 () Bool)
(declare-fun b_1_1@19 () Bool)
(declare-fun Ops_1Mask@9 () T@U)
(declare-fun b_1_1@16 () Bool)
(declare-fun Ops_1Mask@7 () T@U)
(declare-fun b_1_1@17 () Bool)
(declare-fun Ops_1Mask@8 () T@U)
(declare-fun b_1_1@18 () Bool)
(declare-fun b_1_1@12 () Bool)
(declare-fun b_2_1@6 () Bool)
(declare-fun neededTransfer@3 () Real)
(declare-fun Used_1Mask@3 () T@U)
(declare-fun initNeededTransfer@0 () Real)
(declare-fun b_3@0 () Bool)
(declare-fun b_3@1 () Bool)
(declare-fun ResultHeap () T@U)
(declare-fun ResultMask@@0 () T@U)
(declare-fun b_3@2 () Bool)
(declare-fun Ops_1Mask@6 () T@U)
(declare-fun b_3@3 () Bool)
(declare-fun Used_1Heap@0 () T@U)
(declare-fun b_3@4 () Bool)
(declare-fun b_1_1@13 () Bool)
(declare-fun b_1_1@14 () Bool)
(declare-fun ExhaleHeap@0 () T@U)
(declare-fun b_1_1@15 () Bool)
(declare-fun Heap@2 () T@U)
(declare-fun Mask@3 () T@U)
(declare-fun takeTransfer@1 () Real)
(declare-fun Mask@1 () T@U)
(declare-fun Heap@0 () T@U)
(declare-fun neededTransfer@1 () Real)
(declare-fun b_2_1@3 () Bool)
(declare-fun Used_1Mask@1 () T@U)
(declare-fun neededTransfer@2 () Real)
(declare-fun Used_1Mask@2 () T@U)
(declare-fun b_2_1@4 () Bool)
(declare-fun b_2_1@5 () Bool)
(declare-fun Mask@2 () T@U)
(declare-fun Heap@1 () T@U)
(declare-fun maskTransfer@1 () Real)
(declare-fun takeTransfer@0 () Real)
(declare-fun b_2_1@0 () Bool)
(declare-fun neededTransfer@0 () Real)
(declare-fun Used_1Mask@0 () T@U)
(declare-fun b_2_1@1 () Bool)
(declare-fun b_2_1@2 () Bool)
(declare-fun Ops_1Mask@5 () T@U)
(declare-fun maskTransfer@0 () Real)
(declare-fun b_2_1 () Bool)
(declare-fun b_1_1@11 () Bool)
(declare-fun b_1_1@10 () Bool)
(declare-fun b_1_1@9 () Bool)
(declare-fun b_1_1@8 () Bool)
(declare-fun Ops_1Mask@3 () T@U)
(declare-fun b_1_1@7 () Bool)
(declare-fun b_1_1@6 () Bool)
(declare-fun b_1_1@3 () Bool)
(declare-fun Ops_1Mask@1 () T@U)
(declare-fun b_1_1@4 () Bool)
(declare-fun Ops_1Mask@2 () T@U)
(declare-fun b_1_1@5 () Bool)
(declare-fun b_1_1@0 () Bool)
(declare-fun b_1_1@1 () Bool)
(declare-fun Ops_1Mask@0 () T@U)
(declare-fun b_1_1@2 () Bool)
(declare-fun y@@1 () T@U)
(declare-fun b_1_1 () Bool)
(declare-fun b_2@0 () Bool)
(declare-fun b_2 () Bool)
(declare-fun UsedHeap@0 () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type Mask@19) (MapType1Type RefType realType)) (= (type Mask@18) (MapType1Type RefType realType))) (= (type freshObj@0) RefType)) (= (type Heap@16) (MapType0Type RefType))) (= (type x@@8) RefType)) (= (type Mask@20) (MapType1Type RefType realType))) (= (type Labellhs5Heap) (MapType0Type RefType))) (= (type ExhaleHeap@4) (MapType0Type RefType))) (= (type LabelfirstMask@0) (MapType1Type RefType realType))) (= (type LabelfirstHeap@0) (MapType0Type RefType))) (= (type Mask@17) (MapType1Type RefType realType))) (= (type Result_4Heap) (MapType0Type RefType))) (= (type Ops_1Heap@0) (MapType0Type RefType))) (= (type Mask@16) (MapType1Type RefType realType))) (= (type Mask@15) (MapType1Type RefType realType))) (= (type Heap@14) (MapType0Type RefType))) (= (type Heap@15) (MapType0Type RefType))) (= (type Result_4Mask) (MapType1Type RefType realType))) (= (type Ops_1Mask@4) (MapType1Type RefType realType))) (= (type Used_11Mask@3) (MapType1Type RefType realType))) (= (type Ops_1Mask@36) (MapType1Type RefType realType))) (= (type Ops_1Heap@4) (MapType0Type RefType))) (= (type Used_11Heap@0) (MapType0Type RefType))) (= (type Mask@13) (MapType1Type RefType realType))) (= (type Heap@12) (MapType0Type RefType))) (= (type Used_11Mask@1) (MapType1Type RefType realType))) (= (type Used_11Mask@2) (MapType1Type RefType realType))) (= (type Mask@14) (MapType1Type RefType realType))) (= (type Heap@13) (MapType0Type RefType))) (= (type Ops_1Mask@34) (MapType1Type RefType realType))) (= (type Used_11Mask@0) (MapType1Type RefType realType))) (= (type Ops_1Mask@35) (MapType1Type RefType realType))) (= (type Used_10Heap@0) (MapType0Type RefType))) (= (type Ops_1Mask@30) (MapType1Type RefType realType))) (= (type Ops_1Mask@33) (MapType1Type RefType realType))) (= (type Ops_1Mask@32) (MapType1Type RefType realType))) (= (type Ops_1Mask@31) (MapType1Type RefType realType))) (= (type Mask@10) (MapType1Type RefType realType))) (= (type Ops_1Heap@3) (MapType0Type RefType))) (= (type Heap@9) (MapType0Type RefType))) (= (type Ops_1Mask@27) (MapType1Type RefType realType))) (= (type Used_9Mask@3) (MapType1Type RefType realType))) (= (type Result_3Heap) (MapType0Type RefType))) (= (type Result_3Mask) (MapType1Type RefType realType))) (= (type Ops_1Mask@29) (MapType1Type RefType realType))) (= (type Used_9Heap@0) (MapType0Type RefType))) (= (type ExhaleHeap@3) (MapType0Type RefType))) (= (type Mask@12) (MapType1Type RefType realType))) (= (type Heap@11) (MapType0Type RefType))) (= (type Used_9Mask@1) (MapType1Type RefType realType))) (= (type Used_9Mask@2) (MapType1Type RefType realType))) (= (type Mask@11) (MapType1Type RefType realType))) (= (type Heap@10) (MapType0Type RefType))) (= (type Used_9Mask@0) (MapType1Type RefType realType))) (= (type Ops_1Mask@28) (MapType1Type RefType realType))) (= (type Heap@@9) (MapType0Type RefType))) (= (type Mask@0) (MapType1Type RefType realType))) (= (type Used_8Heap@0) (MapType0Type RefType))) (= (type Ops_1Mask@23) (MapType1Type RefType realType))) (= (type Ops_1Mask@26) (MapType1Type RefType realType))) (= (type Ops_1Mask@25) (MapType1Type RefType realType))) (= (type Ops_1Mask@24) (MapType1Type RefType realType))) (= (type Heap@6) (MapType0Type RefType))) (= (type Ops_1Heap@2) (MapType0Type RefType))) (= (type Mask@7) (MapType1Type RefType realType))) (= (type Ops_1Mask@20) (MapType1Type RefType realType))) (= (type Used_7Mask@3) (MapType1Type RefType realType))) (= (type Result_2Heap) (MapType0Type RefType))) (= (type Result_2Mask) (MapType1Type RefType realType))) (= (type Ops_1Mask@22) (MapType1Type RefType realType))) (= (type Used_7Heap@0) (MapType0Type RefType))) (= (type ExhaleHeap@2) (MapType0Type RefType))) (= (type Heap@8) (MapType0Type RefType))) (= (type Mask@9) (MapType1Type RefType realType))) (= (type Used_7Mask@1) (MapType1Type RefType realType))) (= (type Used_7Mask@2) (MapType1Type RefType realType))) (= (type Mask@8) (MapType1Type RefType realType))) (= (type Heap@7) (MapType0Type RefType))) (= (type Used_7Mask@0) (MapType1Type RefType realType))) (= (type Ops_1Mask@21) (MapType1Type RefType realType))) (= (type Used_6Heap@0) (MapType0Type RefType))) (= (type Used_5Heap@0) (MapType0Type RefType))) (= (type Ops_1Mask@18) (MapType1Type RefType realType))) (= (type Ops_3Heap@0) (MapType0Type RefType))) (= (type Ops_1Mask@19) (MapType1Type RefType realType))) (= (type Ops_3Mask@2) (MapType1Type RefType realType))) (= (type Used_4Heap@0) (MapType0Type RefType))) (= (type Ops_3Mask@1) (MapType1Type RefType realType))) (= (type Ops_3Mask@0) (MapType1Type RefType realType))) (= (type Used_3Heap@0) (MapType0Type RefType))) (= (type Ops_1Mask@14) (MapType1Type RefType realType))) (= (type Ops_1Mask@17) (MapType1Type RefType realType))) (= (type Ops_1Mask@16) (MapType1Type RefType realType))) (= (type Ops_1Mask@15) (MapType1Type RefType realType))) (= (type Mask@4) (MapType1Type RefType realType))) (= (type Ops_1Heap@1) (MapType0Type RefType))) (= (type Heap@3) (MapType0Type RefType))) (= (type Ops_1Mask@11) (MapType1Type RefType realType))) (= (type Used_2Mask@3) (MapType1Type RefType realType))) (= (type Result_1Heap) (MapType0Type RefType))) (= (type Result_1Mask) (MapType1Type RefType realType))) (= (type Ops_1Mask@13) (MapType1Type RefType realType))) (= (type Used_2Heap@0) (MapType0Type RefType))) (= (type ExhaleHeap@1) (MapType0Type RefType))) (= (type Mask@6) (MapType1Type RefType realType))) (= (type Heap@5) (MapType0Type RefType))) (= (type Used_2Mask@1) (MapType1Type RefType realType))) (= (type Used_2Mask@2) (MapType1Type RefType realType))) (= (type Mask@5) (MapType1Type RefType realType))) (= (type Heap@4) (MapType0Type RefType))) (= (type Used_2Mask@0) (MapType1Type RefType realType))) (= (type Ops_1Mask@12) (MapType1Type RefType realType))) (= (type LabelfirstHeap) (MapType0Type RefType))) (= (type LabelfirstMask) (MapType1Type RefType realType))) (= (type Ops_1Mask@7) (MapType1Type RefType realType))) (= (type Ops_1Mask@10) (MapType1Type RefType realType))) (= (type Ops_1Mask@9) (MapType1Type RefType realType))) (= (type Ops_1Mask@8) (MapType1Type RefType realType))) (= (type Heap@0) (MapType0Type RefType))) (= (type Mask@1) (MapType1Type RefType realType))) (= (type Used_1Mask@3) (MapType1Type RefType realType))) (= (type ResultHeap) (MapType0Type RefType))) (= (type ResultMask@@0) (MapType1Type RefType realType))) (= (type Ops_1Mask@6) (MapType1Type RefType realType))) (= (type Used_1Heap@0) (MapType0Type RefType))) (= (type ExhaleHeap@0) (MapType0Type RefType))) (= (type Heap@2) (MapType0Type RefType))) (= (type Mask@3) (MapType1Type RefType realType))) (= (type Used_1Mask@1) (MapType1Type RefType realType))) (= (type Used_1Mask@2) (MapType1Type RefType realType))) (= (type Mask@2) (MapType1Type RefType realType))) (= (type Heap@1) (MapType0Type RefType))) (= (type Used_1Mask@0) (MapType1Type RefType realType))) (= (type Ops_1Mask@5) (MapType1Type RefType realType))) (= (type Ops_1Mask@1) (MapType1Type RefType realType))) (= (type Ops_1Mask@3) (MapType1Type RefType realType))) (= (type Ops_1Mask@2) (MapType1Type RefType realType))) (= (type Ops_1Mask@0) (MapType1Type RefType realType))) (= (type y@@1) RefType)) (= (type UsedHeap@0) (MapType0Type RefType))))
(set-info :boogie-vc-id test0)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 250) (let ((anon159_correct  (=> (= Mask@19 (MapType1Store Mask@18 freshObj@0 f_7 (real_2_U (- (U_2_real (MapType1Select Mask@18 freshObj@0 f_7)) FullPerm)))) (and (=> (= (ControlFlow 0 2) (- 0 6)) (= (U_2_int (MapType0Select Heap@16 x@@8 f_7)) 3)) (=> (= (U_2_int (MapType0Select Heap@16 x@@8 f_7)) 3) (and (=> (= (ControlFlow 0 2) (- 0 5)) (= (U_2_int (MapType0Select Heap@16 freshObj@0 f_7)) 5)) (=> (= (U_2_int (MapType0Select Heap@16 freshObj@0 f_7)) 5) (=> (state Heap@16 Mask@19) (=> (and (and (and (not (= x@@8 null)) (= Mask@20 (MapType1Store Mask@19 x@@8 f_7 (real_2_U (+ (U_2_real (MapType1Select Mask@19 x@@8 f_7)) FullPerm))))) (and (state Heap@16 Mask@20) (= (U_2_int (MapType0Select Heap@16 x@@8 f_7)) (U_2_int (MapType0Select Labellhs5Heap x@@8 f_7))))) (and (and (state Heap@16 Mask@20) (IdenticalOnKnownLocations Heap@16 ExhaleHeap@4 Mask@20)) (and (state ExhaleHeap@4 Mask@20) (state ExhaleHeap@4 Mask@20)))) (and (=> (= (ControlFlow 0 2) (- 0 4)) first_lblGuard@0) (=> first_lblGuard@0 (and (=> (= (ControlFlow 0 2) (- 0 3)) (HasDirectPerm LabelfirstMask@0 x@@8 f_7)) (=> (HasDirectPerm LabelfirstMask@0 x@@8 f_7) (=> (= (ControlFlow 0 2) (- 0 1)) (= (U_2_int (MapType0Select LabelfirstHeap@0 x@@8 f_7)) 5)))))))))))))))
(let ((anon246_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 9) 2)) anon159_correct)))
(let ((anon246_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 7) (- 0 8)) (<= FullPerm (U_2_real (MapType1Select Mask@18 freshObj@0 f_7)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@18 freshObj@0 f_7))) (=> (= (ControlFlow 0 7) 2) anon159_correct))))))
(let ((anon157_correct  (=> (= Mask@18 (MapType1Store Mask@17 x@@8 f_7 (real_2_U (- (U_2_real (MapType1Select Mask@17 x@@8 f_7)) FullPerm)))) (and (=> (= (ControlFlow 0 10) 7) anon246_Then_correct) (=> (= (ControlFlow 0 10) 9) anon246_Else_correct)))))
(let ((anon245_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 13) 10)) anon157_correct)))
(let ((anon245_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 11) (- 0 12)) (<= FullPerm (U_2_real (MapType1Select Mask@17 x@@8 f_7)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@17 x@@8 f_7))) (=> (= (ControlFlow 0 11) 10) anon157_correct))))))
(let ((anon155_correct  (and (=> (= (ControlFlow 0 14) (- 0 18)) (=> (and (and b_1_1@75 b_1_1@75) b_17@6) (= (U_2_int (MapType0Select Result_4Heap x@@8 f_7)) (U_2_int (MapType0Select Ops_1Heap@0 x@@8 f_7))))) (=> (=> (and (and b_1_1@75 b_1_1@75) b_17@6) (= (U_2_int (MapType0Select Result_4Heap x@@8 f_7)) (U_2_int (MapType0Select Ops_1Heap@0 x@@8 f_7)))) (=> (and (and (= Mask@16 (MapType1Store Mask@15 null (wand x@@8 FullPerm freshObj@0 FullPerm x@@8 3 freshObj@0 5 x@@8 FullPerm x@@8 x@@8) (real_2_U (+ (U_2_real (MapType1Select Mask@15 null (wand x@@8 FullPerm freshObj@0 FullPerm x@@8 3 freshObj@0 5 x@@8 FullPerm x@@8 x@@8))) FullPerm)))) (state Heap@14 Mask@16)) (and (state Heap@14 Mask@16) (state Heap@14 Mask@16))) (and (=> (= (ControlFlow 0 14) (- 0 17)) (= FullPerm (U_2_real (MapType1Select Mask@16 x@@8 f_7)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@16 x@@8 f_7))) (=> (and (= Heap@15 (MapType0Store Heap@14 x@@8 f_7 (int_2_U 3))) (state Heap@15 Mask@16)) (and (=> (= (ControlFlow 0 14) (- 0 16)) (= FullPerm (U_2_real (MapType1Select Mask@16 freshObj@0 f_7)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@16 freshObj@0 f_7))) (=> (and (= Heap@16 (MapType0Store Heap@15 freshObj@0 f_7 (int_2_U 5))) (state Heap@16 Mask@16)) (and (=> (= (ControlFlow 0 14) (- 0 15)) (<= FullPerm (U_2_real (MapType1Select Mask@16 null (wand x@@8 FullPerm freshObj@0 FullPerm x@@8 3 freshObj@0 5 x@@8 FullPerm x@@8 x@@8))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@16 null (wand x@@8 FullPerm freshObj@0 FullPerm x@@8 3 freshObj@0 5 x@@8 FullPerm x@@8 x@@8)))) (=> (and (= Mask@17 (MapType1Store Mask@16 null (wand x@@8 FullPerm freshObj@0 FullPerm x@@8 3 freshObj@0 5 x@@8 FullPerm x@@8 x@@8) (real_2_U (- (U_2_real (MapType1Select Mask@16 null (wand x@@8 FullPerm freshObj@0 FullPerm x@@8 3 freshObj@0 5 x@@8 FullPerm x@@8 x@@8))) FullPerm)))) (state Heap@16 Mask@17)) (and (=> (= (ControlFlow 0 14) 11) anon245_Then_correct) (=> (= (ControlFlow 0 14) 13) anon245_Else_correct))))))))))))))))
(let ((anon244_Else_correct  (=> (and (not b_1_1@75) (= (ControlFlow 0 23) 14)) anon155_correct)))
(let ((anon244_Then_correct  (=> b_1_1@75 (and (=> (= (ControlFlow 0 20) (- 0 22)) (HasDirectPerm Result_4Mask x@@8 f_7)) (=> (HasDirectPerm Result_4Mask x@@8 f_7) (and (=> (= (ControlFlow 0 20) (- 0 21)) (HasDirectPerm Ops_1Mask@4 x@@8 f_7)) (=> (HasDirectPerm Ops_1Mask@4 x@@8 f_7) (=> (= (ControlFlow 0 20) 14) anon155_correct))))))))
(let ((anon243_Then_correct  (=> (and (and b_1_1@75 b_1_1@75) b_17@6) (and (=> (= (ControlFlow 0 24) 20) anon244_Then_correct) (=> (= (ControlFlow 0 24) 23) anon244_Else_correct)))))
(let ((anon243_Else_correct  (=> (and (not (and (and b_1_1@75 b_1_1@75) b_17@6)) (= (ControlFlow 0 19) 14)) anon155_correct)))
(let ((anon152_correct  (and (=> (= (ControlFlow 0 25) (- 0 26)) (=> (and (and b_1_1@74 b_1_1@74) b_17@6) (and (= neededTransfer@19 0.0) (= (U_2_real (MapType1Select Used_11Mask@3 x@@8 f_7)) initNeededTransfer@4)))) (=> (=> (and (and b_1_1@74 b_1_1@74) b_17@6) (and (= neededTransfer@19 0.0) (= (U_2_real (MapType1Select Used_11Mask@3 x@@8 f_7)) initNeededTransfer@4))) (=> (and (= b_18@0  (and b_1_1@74 b_17@6)) (= b_18@1  (and b_18@0 (state Result_4Heap Result_4Mask)))) (=> (and (and (= b_18@2  (and b_18@1 (sumMask Result_4Mask Ops_1Mask@36 Used_11Mask@3))) (= b_18@3  (and (and b_18@2 (IdenticalOnKnownLocations Ops_1Heap@4 Result_4Heap Ops_1Mask@36)) (IdenticalOnKnownLocations Used_11Heap@0 Result_4Heap Used_11Mask@3)))) (and (= b_18@4  (and b_18@3 (state Result_4Heap Result_4Mask))) (= b_1_1@75  (and b_1_1@74 b_18@4)))) (and (=> (= (ControlFlow 0 25) 24) anon243_Then_correct) (=> (= (ControlFlow 0 25) 19) anon243_Else_correct))))))))
(let ((anon242_Else_correct  (=> (>= 0.0 takeTransfer@9) (=> (and (= neededTransfer@19 neededTransfer@17) (= Mask@15 Mask@13)) (=> (and (and (= Heap@14 Heap@12) (= b_17@6 b_17@3)) (and (= Used_11Mask@3 Used_11Mask@1) (= (ControlFlow 0 29) 25))) anon152_correct)))))
(let ((anon242_Then_correct  (=> (> takeTransfer@9 0.0) (=> (and (and (= neededTransfer@18 (- neededTransfer@17 takeTransfer@9)) (= Used_11Mask@2 (MapType1Store Used_11Mask@1 x@@8 f_7 (real_2_U (+ (U_2_real (MapType1Select Used_11Mask@1 x@@8 f_7)) takeTransfer@9))))) (and (= b_17@4  (and b_17@3 (state Used_11Heap@0 Used_11Mask@2))) (= b_17@5  (and b_17@4 (= (U_2_int (MapType0Select Heap@12 x@@8 f_7)) (U_2_int (MapType0Select Used_11Heap@0 x@@8 f_7))))))) (=> (and (and (and (= Mask@14 (MapType1Store Mask@13 x@@8 f_7 (real_2_U (- (U_2_real (MapType1Select Mask@13 x@@8 f_7)) takeTransfer@9)))) (= Heap@13 (MapType0Store Heap@12 null (|wand#sm| x@@8 FullPerm freshObj@0 FullPerm x@@8 3 freshObj@0 5 x@@8 FullPerm x@@8 x@@8) (MapType1Store (MapType0Select Heap@12 null (|wand#sm| x@@8 FullPerm freshObj@0 FullPerm x@@8 3 freshObj@0 5 x@@8 FullPerm x@@8 x@@8)) x@@8 f_7 (bool_2_U true))))) (and (= neededTransfer@19 neededTransfer@18) (= Mask@15 Mask@14))) (and (and (= Heap@14 Heap@13) (= b_17@6 b_17@5)) (and (= Used_11Mask@3 Used_11Mask@2) (= (ControlFlow 0 28) 25)))) anon152_correct)))))
(let ((anon241_Else_correct  (=> (and (< maskTransfer@9 neededTransfer@17) (= takeTransfer@9 maskTransfer@9)) (and (=> (= (ControlFlow 0 31) 28) anon242_Then_correct) (=> (= (ControlFlow 0 31) 29) anon242_Else_correct)))))
(let ((anon241_Then_correct  (=> (and (<= neededTransfer@17 maskTransfer@9) (= takeTransfer@9 neededTransfer@17)) (and (=> (= (ControlFlow 0 30) 28) anon242_Then_correct) (=> (= (ControlFlow 0 30) 29) anon242_Else_correct)))))
(let ((anon240_Then_correct  (=> (and (and (and (and (and b_1_1@74 b_1_1@74) b_17@3) true) (> neededTransfer@17 0.0)) (= maskTransfer@9 (U_2_real (MapType1Select Mask@13 x@@8 f_7)))) (and (=> (= (ControlFlow 0 32) 30) anon241_Then_correct) (=> (= (ControlFlow 0 32) 31) anon241_Else_correct)))))
(let ((anon240_Else_correct  (=> (not (and (and (and (and b_1_1@74 b_1_1@74) b_17@3) true) (> neededTransfer@17 0.0))) (=> (and (= neededTransfer@19 neededTransfer@17) (= Mask@15 Mask@13)) (=> (and (and (= Heap@14 Heap@12) (= b_17@6 b_17@3)) (and (= Used_11Mask@3 Used_11Mask@1) (= (ControlFlow 0 27) 25))) anon152_correct)))))
(let ((anon239_Else_correct  (=> (>= 0.0 takeTransfer@8) (=> (and (and (= Ops_1Mask@36 Ops_1Mask@34) (= Used_11Mask@1 ZeroMask)) (and (= b_17@3 b_17@0) (= neededTransfer@17 FullPerm))) (and (=> (= (ControlFlow 0 35) 32) anon240_Then_correct) (=> (= (ControlFlow 0 35) 27) anon240_Else_correct))))))
(let ((anon239_Then_correct  (=> (and (> takeTransfer@8 0.0) (= neededTransfer@16 (- FullPerm takeTransfer@8))) (=> (and (and (and (= Used_11Mask@0 (MapType1Store ZeroMask x@@8 f_7 (real_2_U (+ (U_2_real (MapType1Select ZeroMask x@@8 f_7)) takeTransfer@8)))) (= b_17@1  (and b_17@0 (state Used_11Heap@0 Used_11Mask@0)))) (and (= b_17@2  (and b_17@1 (= (U_2_int (MapType0Select Ops_1Heap@4 x@@8 f_7)) (U_2_int (MapType0Select Used_11Heap@0 x@@8 f_7))))) (= Ops_1Mask@35 (MapType1Store Ops_1Mask@34 x@@8 f_7 (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@34 x@@8 f_7)) takeTransfer@8)))))) (and (and (= Ops_1Mask@36 Ops_1Mask@35) (= Used_11Mask@1 Used_11Mask@0)) (and (= b_17@3 b_17@2) (= neededTransfer@17 neededTransfer@16)))) (and (=> (= (ControlFlow 0 34) 32) anon240_Then_correct) (=> (= (ControlFlow 0 34) 27) anon240_Else_correct))))))
(let ((anon238_Else_correct  (=> (and (< maskTransfer@8 FullPerm) (= takeTransfer@8 maskTransfer@8)) (and (=> (= (ControlFlow 0 37) 34) anon239_Then_correct) (=> (= (ControlFlow 0 37) 35) anon239_Else_correct)))))
(let ((anon238_Then_correct  (=> (and (<= FullPerm maskTransfer@8) (= takeTransfer@8 FullPerm)) (and (=> (= (ControlFlow 0 36) 34) anon239_Then_correct) (=> (= (ControlFlow 0 36) 35) anon239_Else_correct)))))
(let ((anon237_Then_correct  (=> (and (and (and (and (and b_1_1@74 b_1_1@74) b_17@0) true) (> FullPerm 0.0)) (= maskTransfer@8 (U_2_real (MapType1Select Ops_1Mask@34 x@@8 f_7)))) (and (=> (= (ControlFlow 0 38) 36) anon238_Then_correct) (=> (= (ControlFlow 0 38) 37) anon238_Else_correct)))))
(let ((anon237_Else_correct  (=> (not (and (and (and (and b_1_1@74 b_1_1@74) b_17@0) true) (> FullPerm 0.0))) (=> (and (and (= Ops_1Mask@36 Ops_1Mask@34) (= Used_11Mask@1 ZeroMask)) (and (= b_17@3 b_17@0) (= neededTransfer@17 FullPerm))) (and (=> (= (ControlFlow 0 33) 32) anon240_Then_correct) (=> (= (ControlFlow 0 33) 27) anon240_Else_correct))))))
(let ((anon140_correct  (=> (and (= b_17@0  (and b_17 (state Used_11Heap@0 ZeroMask))) (= initNeededTransfer@4 (+ (U_2_real (MapType1Select ZeroMask x@@8 f_7)) FullPerm))) (and (=> (= (ControlFlow 0 39) (- 0 40)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 39) 38) anon237_Then_correct) (=> (= (ControlFlow 0 39) 33) anon237_Else_correct)))))))
(let ((anon139_correct  (and (=> (= (ControlFlow 0 42) (- 0 43)) (=> (and b_1_1@71 b_16@0) (= (U_2_int (MapType0Select LabelfirstHeap@0 x@@8 f_7)) 5))) (=> (=> (and b_1_1@71 b_16@0) (= (U_2_int (MapType0Select LabelfirstHeap@0 x@@8 f_7)) 5)) (=> (and (and (= b_1_1@72  (and b_1_1@71 b_16@0)) (= b_1_1@73  (and b_1_1@72 (state Ops_1Heap@4 Ops_1Mask@34)))) (and (= b_1_1@74 b_1_1@73) (= (ControlFlow 0 42) 39))) anon140_correct)))))
(let ((anon236_Else_correct  (=> (and (not b_1_1@71) (= (ControlFlow 0 48) 42)) anon139_correct)))
(let ((anon236_Then_correct  (=> b_1_1@71 (and (=> (= (ControlFlow 0 45) (- 0 47)) first_lblGuard@0) (=> first_lblGuard@0 (and (=> (= (ControlFlow 0 45) (- 0 46)) (HasDirectPerm LabelfirstMask@0 x@@8 f_7)) (=> (HasDirectPerm LabelfirstMask@0 x@@8 f_7) (=> (= (ControlFlow 0 45) 42) anon139_correct))))))))
(let ((anon235_Then_correct  (=> (and b_1_1@71 b_16@0) (and (=> (= (ControlFlow 0 49) 45) anon236_Then_correct) (=> (= (ControlFlow 0 49) 48) anon236_Else_correct)))))
(let ((anon235_Else_correct  (=> (and (not (and b_1_1@71 b_16@0)) (= (ControlFlow 0 44) 42)) anon139_correct)))
(let ((anon234_Then_correct  (=> (and b_1_1@71 (= b_16@0  (and b_16 (state Used_10Heap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 50) 49) anon235_Then_correct) (=> (= (ControlFlow 0 50) 44) anon235_Else_correct)))))
(let ((anon234_Else_correct  (=> (not b_1_1@71) (=> (and (= b_1_1@74 b_1_1@71) (= (ControlFlow 0 41) 39)) anon140_correct))))
(let ((anon134_correct  (=> (and (and (state Ops_1Heap@4 Ops_1Mask@33) (= b_1_1@70  (and b_1_1@69 (state Ops_1Heap@4 Ops_1Mask@33)))) (and (= b_1_1@71 b_1_1@70) (= Ops_1Mask@34 Ops_1Mask@33))) (and (=> (= (ControlFlow 0 52) 50) anon234_Then_correct) (=> (= (ControlFlow 0 52) 41) anon234_Else_correct)))))
(let ((anon133_correct  (=> (and (and (= b_1_1@68  (and b_1_1@67 (= (U_2_int (MapType0Select Ops_1Heap@4 x@@8 f_7)) (U_2_int (MapType0Select Ops_1Heap@0 x@@8 f_7))))) (= b_1_1@69 b_1_1@68)) (and (= Ops_1Mask@33 Ops_1Mask@32) (= (ControlFlow 0 55) 52))) anon134_correct)))
(let ((anon233_Else_correct  (=> (and (not b_1_1@67) (= (ControlFlow 0 59) 55)) anon133_correct)))
(let ((anon233_Then_correct  (=> b_1_1@67 (and (=> (= (ControlFlow 0 56) (- 0 58)) (HasDirectPerm Ops_1Mask@32 x@@8 f_7)) (=> (HasDirectPerm Ops_1Mask@32 x@@8 f_7) (and (=> (= (ControlFlow 0 56) (- 0 57)) (HasDirectPerm Ops_1Mask@4 x@@8 f_7)) (=> (HasDirectPerm Ops_1Mask@4 x@@8 f_7) (=> (= (ControlFlow 0 56) 55) anon133_correct))))))))
(let ((anon232_Then_correct  (=> b_1_1@67 (and (=> (= (ControlFlow 0 60) 56) anon233_Then_correct) (=> (= (ControlFlow 0 60) 59) anon233_Else_correct)))))
(let ((anon232_Else_correct  (=> (and (and (not b_1_1@67) (= b_1_1@69 b_1_1@67)) (and (= Ops_1Mask@33 Ops_1Mask@32) (= (ControlFlow 0 54) 52))) anon134_correct)))
(let ((anon231_Else_correct  (=> (not b_1_1@64) (=> (and (= Ops_1Mask@32 Ops_1Mask@30) (= b_1_1@67 b_1_1@64)) (and (=> (= (ControlFlow 0 62) 60) anon232_Then_correct) (=> (= (ControlFlow 0 62) 54) anon232_Else_correct))))))
(let ((anon231_Then_correct  (=> (and b_1_1@64 (= b_1_1@65  (and b_1_1@64 (not (= x@@8 null))))) (=> (and (and (= Ops_1Mask@31 (MapType1Store Ops_1Mask@30 x@@8 f_7 (real_2_U (+ (U_2_real (MapType1Select Ops_1Mask@30 x@@8 f_7)) FullPerm)))) (= b_1_1@66  (and b_1_1@65 (state Ops_1Heap@4 Ops_1Mask@31)))) (and (= Ops_1Mask@32 Ops_1Mask@31) (= b_1_1@67 b_1_1@66))) (and (=> (= (ControlFlow 0 61) 60) anon232_Then_correct) (=> (= (ControlFlow 0 61) 54) anon232_Else_correct))))))
(let ((anon230_Then_correct  (=> b_1_1@64 (and (=> (= (ControlFlow 0 63) 61) anon231_Then_correct) (=> (= (ControlFlow 0 63) 62) anon231_Else_correct)))))
(let ((anon230_Else_correct  (=> (and (and (not b_1_1@64) (= b_1_1@69 b_1_1@64)) (and (= Ops_1Mask@33 Ops_1Mask@30) (= (ControlFlow 0 53) 52))) anon134_correct)))
(let ((anon229_Then_correct  (=> b_1_1@64 (and (=> (= (ControlFlow 0 64) 63) anon230_Then_correct) (=> (= (ControlFlow 0 64) 53) anon230_Else_correct)))))
(let ((anon229_Else_correct  (=> (not b_1_1@64) (=> (and (= b_1_1@71 b_1_1@64) (= Ops_1Mask@34 Ops_1Mask@30)) (and (=> (= (ControlFlow 0 51) 50) anon234_Then_correct) (=> (= (ControlFlow 0 51) 41) anon234_Else_correct))))))
(let ((anon125_correct  (and (=> (= (ControlFlow 0 66) (- 0 67)) (=> (and b_1_1@60 b_14@6) (and (= neededTransfer@15 0.0) (= (U_2_real (MapType1Select Used_9Mask@3 x@@8 f_7)) initNeededTransfer@3)))) (=> (=> (and b_1_1@60 b_14@6) (and (= neededTransfer@15 0.0) (= (U_2_real (MapType1Select Used_9Mask@3 x@@8 f_7)) initNeededTransfer@3))) (=> (and (= b_15@0  (and b_1_1@60 b_14@6)) (= b_15@1  (and b_15@0 (state Result_3Heap Result_3Mask)))) (=> (and (and (= b_15@2  (and b_15@1 (sumMask Result_3Mask Ops_1Mask@29 Used_9Mask@3))) (= b_15@3  (and (and b_15@2 (IdenticalOnKnownLocations Ops_1Heap@3 Result_3Heap Ops_1Mask@29)) (IdenticalOnKnownLocations Used_9Heap@0 Result_3Heap Used_9Mask@3)))) (and (= b_15@4  (and b_15@3 (state Result_3Heap Result_3Mask))) (= b_1_1@61  (and b_1_1@60 b_15@4)))) (=> (and (and (and (= b_1_1@62  (and b_1_1@61 b_14@6)) (IdenticalOnKnownLocations Ops_1Heap@3 ExhaleHeap@3 Ops_1Mask@29)) (and (= b_1_1@63  (and b_1_1@62 (state ExhaleHeap@3 Ops_1Mask@29))) (= b_1_1@64 b_1_1@63))) (and (and (= Mask@13 Mask@12) (= Ops_1Heap@4 ExhaleHeap@3)) (and (= Heap@12 Heap@11) (= Ops_1Mask@30 Ops_1Mask@29)))) (and (=> (= (ControlFlow 0 66) 64) anon229_Then_correct) (=> (= (ControlFlow 0 66) 51) anon229_Else_correct)))))))))
(let ((anon228_Else_correct  (=> (>= 0.0 takeTransfer@7) (=> (and (= neededTransfer@15 neededTransfer@13) (= Heap@11 Heap@9)) (=> (and (and (= Mask@12 Mask@10) (= b_14@6 b_14@3)) (and (= Used_9Mask@3 Used_9Mask@1) (= (ControlFlow 0 70) 66))) anon125_correct)))))
(let ((anon228_Then_correct  (=> (> takeTransfer@7 0.0) (=> (and (and (= neededTransfer@14 (- neededTransfer@13 takeTransfer@7)) (= Used_9Mask@2 (MapType1Store Used_9Mask@1 x@@8 f_7 (real_2_U (+ (U_2_real (MapType1Select Used_9Mask@1 x@@8 f_7)) takeTransfer@7))))) (and (= b_14@4  (and b_14@3 (state Used_9Heap@0 Used_9Mask@2))) (= b_14@5  (and b_14@4 (= (U_2_int (MapType0Select Heap@9 x@@8 f_7)) (U_2_int (MapType0Select Used_9Heap@0 x@@8 f_7))))))) (=> (and (and (and (= Mask@11 (MapType1Store Mask@10 x@@8 f_7 (real_2_U (- (U_2_real (MapType1Select Mask@10 x@@8 f_7)) takeTransfer@7)))) (= Heap@10 (MapType0Store Heap@9 null (|wand#sm| x@@8 FullPerm freshObj@0 FullPerm x@@8 3 freshObj@0 5 x@@8 FullPerm x@@8 x@@8) (MapType1Store (MapType0Select Heap@9 null (|wand#sm| x@@8 FullPerm freshObj@0 FullPerm x@@8 3 freshObj@0 5 x@@8 FullPerm x@@8 x@@8)) x@@8 f_7 (bool_2_U true))))) (and (= neededTransfer@15 neededTransfer@14) (= Heap@11 Heap@10))) (and (and (= Mask@12 Mask@11) (= b_14@6 b_14@5)) (and (= Used_9Mask@3 Used_9Mask@2) (= (ControlFlow 0 69) 66)))) anon125_correct)))))
(let ((anon227_Else_correct  (=> (and (< maskTransfer@7 neededTransfer@13) (= takeTransfer@7 maskTransfer@7)) (and (=> (= (ControlFlow 0 72) 69) anon228_Then_correct) (=> (= (ControlFlow 0 72) 70) anon228_Else_correct)))))
(let ((anon227_Then_correct  (=> (and (<= neededTransfer@13 maskTransfer@7) (= takeTransfer@7 neededTransfer@13)) (and (=> (= (ControlFlow 0 71) 69) anon228_Then_correct) (=> (= (ControlFlow 0 71) 70) anon228_Else_correct)))))
(let ((anon226_Then_correct  (=> (and (and (and (and b_1_1@60 b_14@3) true) (> neededTransfer@13 0.0)) (= maskTransfer@7 (U_2_real (MapType1Select Mask@10 x@@8 f_7)))) (and (=> (= (ControlFlow 0 73) 71) anon227_Then_correct) (=> (= (ControlFlow 0 73) 72) anon227_Else_correct)))))
(let ((anon226_Else_correct  (=> (not (and (and (and b_1_1@60 b_14@3) true) (> neededTransfer@13 0.0))) (=> (and (= neededTransfer@15 neededTransfer@13) (= Heap@11 Heap@9)) (=> (and (and (= Mask@12 Mask@10) (= b_14@6 b_14@3)) (and (= Used_9Mask@3 Used_9Mask@1) (= (ControlFlow 0 68) 66))) anon125_correct)))))
(let ((anon225_Else_correct  (=> (>= 0.0 takeTransfer@6) (=> (and (and (= Ops_1Mask@29 Ops_1Mask@27) (= Used_9Mask@1 ZeroMask)) (and (= b_14@3 b_14@0) (= neededTransfer@13 FullPerm))) (and (=> (= (ControlFlow 0 76) 73) anon226_Then_correct) (=> (= (ControlFlow 0 76) 68) anon226_Else_correct))))))
(let ((anon225_Then_correct  (=> (and (> takeTransfer@6 0.0) (= neededTransfer@12 (- FullPerm takeTransfer@6))) (=> (and (and (and (= Used_9Mask@0 (MapType1Store ZeroMask x@@8 f_7 (real_2_U (+ (U_2_real (MapType1Select ZeroMask x@@8 f_7)) takeTransfer@6)))) (= b_14@1  (and b_14@0 (state Used_9Heap@0 Used_9Mask@0)))) (and (= b_14@2  (and b_14@1 (= (U_2_int (MapType0Select Ops_1Heap@3 x@@8 f_7)) (U_2_int (MapType0Select Used_9Heap@0 x@@8 f_7))))) (= Ops_1Mask@28 (MapType1Store Ops_1Mask@27 x@@8 f_7 (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@27 x@@8 f_7)) takeTransfer@6)))))) (and (and (= Ops_1Mask@29 Ops_1Mask@28) (= Used_9Mask@1 Used_9Mask@0)) (and (= b_14@3 b_14@2) (= neededTransfer@13 neededTransfer@12)))) (and (=> (= (ControlFlow 0 75) 73) anon226_Then_correct) (=> (= (ControlFlow 0 75) 68) anon226_Else_correct))))))
(let ((anon224_Else_correct  (=> (and (< maskTransfer@6 FullPerm) (= takeTransfer@6 maskTransfer@6)) (and (=> (= (ControlFlow 0 78) 75) anon225_Then_correct) (=> (= (ControlFlow 0 78) 76) anon225_Else_correct)))))
(let ((anon224_Then_correct  (=> (and (<= FullPerm maskTransfer@6) (= takeTransfer@6 FullPerm)) (and (=> (= (ControlFlow 0 77) 75) anon225_Then_correct) (=> (= (ControlFlow 0 77) 76) anon225_Else_correct)))))
(let ((anon223_Then_correct  (=> (and (and (and (and b_1_1@60 b_14@0) true) (> FullPerm 0.0)) (= maskTransfer@6 (U_2_real (MapType1Select Ops_1Mask@27 x@@8 f_7)))) (and (=> (= (ControlFlow 0 79) 77) anon224_Then_correct) (=> (= (ControlFlow 0 79) 78) anon224_Else_correct)))))
(let ((anon223_Else_correct  (=> (not (and (and (and b_1_1@60 b_14@0) true) (> FullPerm 0.0))) (=> (and (and (= Ops_1Mask@29 Ops_1Mask@27) (= Used_9Mask@1 ZeroMask)) (and (= b_14@3 b_14@0) (= neededTransfer@13 FullPerm))) (and (=> (= (ControlFlow 0 74) 73) anon226_Then_correct) (=> (= (ControlFlow 0 74) 68) anon226_Else_correct))))))
(let ((anon222_Then_correct  (=> b_1_1@60 (=> (and (= b_14@0  (and b_14 (state Used_9Heap@0 ZeroMask))) (= initNeededTransfer@3 (+ (U_2_real (MapType1Select ZeroMask x@@8 f_7)) FullPerm))) (and (=> (= (ControlFlow 0 80) (- 0 81)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 80) 79) anon223_Then_correct) (=> (= (ControlFlow 0 80) 74) anon223_Else_correct))))))))
(let ((anon222_Else_correct  (=> (and (not b_1_1@60) (= b_1_1@64 b_1_1@60)) (=> (and (and (= Mask@13 Mask@10) (= Ops_1Heap@4 Ops_1Heap@3)) (and (= Heap@12 Heap@9) (= Ops_1Mask@30 Ops_1Mask@27))) (and (=> (= (ControlFlow 0 65) 64) anon229_Then_correct) (=> (= (ControlFlow 0 65) 51) anon229_Else_correct))))))
(let ((anon111_correct  (and (=> (= (ControlFlow 0 83) (- 0 84)) (=> (and b_1_1@57 b_13@0) (= (U_2_int (MapType0Select Ops_1Heap@3 x@@8 f_7)) (U_2_int (MapType0Select Heap@@9 x@@8 f_7))))) (=> (=> (and b_1_1@57 b_13@0) (= (U_2_int (MapType0Select Ops_1Heap@3 x@@8 f_7)) (U_2_int (MapType0Select Heap@@9 x@@8 f_7)))) (=> (= b_1_1@58  (and b_1_1@57 b_13@0)) (=> (and (= b_1_1@59  (and b_1_1@58 (state Ops_1Heap@3 Ops_1Mask@27))) (= b_1_1@60 b_1_1@59)) (and (=> (= (ControlFlow 0 83) 80) anon222_Then_correct) (=> (= (ControlFlow 0 83) 65) anon222_Else_correct))))))))
(let ((anon221_Else_correct  (=> (and (not b_1_1@57) (= (ControlFlow 0 89) 83)) anon111_correct)))
(let ((anon221_Then_correct  (=> b_1_1@57 (and (=> (= (ControlFlow 0 86) (- 0 88)) (HasDirectPerm Ops_1Mask@27 x@@8 f_7)) (=> (HasDirectPerm Ops_1Mask@27 x@@8 f_7) (and (=> (= (ControlFlow 0 86) (- 0 87)) (HasDirectPerm Mask@0 x@@8 f_7)) (=> (HasDirectPerm Mask@0 x@@8 f_7) (=> (= (ControlFlow 0 86) 83) anon111_correct))))))))
(let ((anon220_Then_correct  (=> (and b_1_1@57 b_13@0) (and (=> (= (ControlFlow 0 90) 86) anon221_Then_correct) (=> (= (ControlFlow 0 90) 89) anon221_Else_correct)))))
(let ((anon220_Else_correct  (=> (and (not (and b_1_1@57 b_13@0)) (= (ControlFlow 0 85) 83)) anon111_correct)))
(let ((anon219_Then_correct  (=> (and b_1_1@57 (= b_13@0  (and b_13 (state Used_8Heap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 91) 90) anon220_Then_correct) (=> (= (ControlFlow 0 91) 85) anon220_Else_correct)))))
(let ((anon219_Else_correct  (=> (and (not b_1_1@57) (= b_1_1@60 b_1_1@57)) (and (=> (= (ControlFlow 0 82) 80) anon222_Then_correct) (=> (= (ControlFlow 0 82) 65) anon222_Else_correct)))))
(let ((anon106_correct  (=> (and (and (state Ops_1Heap@3 Ops_1Mask@26) (= b_1_1@56  (and b_1_1@55 (state Ops_1Heap@3 Ops_1Mask@26)))) (and (= b_1_1@57 b_1_1@56) (= Ops_1Mask@27 Ops_1Mask@26))) (and (=> (= (ControlFlow 0 93) 91) anon219_Then_correct) (=> (= (ControlFlow 0 93) 82) anon219_Else_correct)))))
(let ((anon105_correct  (=> (and (and (= b_1_1@54  (and b_1_1@53 (= (U_2_int (MapType0Select Ops_1Heap@3 x@@8 f_7)) a_2@0))) (= b_1_1@55 b_1_1@54)) (and (= Ops_1Mask@26 Ops_1Mask@25) (= (ControlFlow 0 96) 93))) anon106_correct)))
(let ((anon218_Else_correct  (=> (and (not b_1_1@53) (= (ControlFlow 0 99) 96)) anon105_correct)))
(let ((anon218_Then_correct  (=> b_1_1@53 (and (=> (= (ControlFlow 0 97) (- 0 98)) (HasDirectPerm Ops_1Mask@25 x@@8 f_7)) (=> (HasDirectPerm Ops_1Mask@25 x@@8 f_7) (=> (= (ControlFlow 0 97) 96) anon105_correct))))))
(let ((anon217_Then_correct  (=> b_1_1@53 (and (=> (= (ControlFlow 0 100) 97) anon218_Then_correct) (=> (= (ControlFlow 0 100) 99) anon218_Else_correct)))))
(let ((anon217_Else_correct  (=> (and (and (not b_1_1@53) (= b_1_1@55 b_1_1@53)) (and (= Ops_1Mask@26 Ops_1Mask@25) (= (ControlFlow 0 95) 93))) anon106_correct)))
(let ((anon216_Else_correct  (=> (not b_1_1@50) (=> (and (= Ops_1Mask@25 Ops_1Mask@23) (= b_1_1@53 b_1_1@50)) (and (=> (= (ControlFlow 0 102) 100) anon217_Then_correct) (=> (= (ControlFlow 0 102) 95) anon217_Else_correct))))))
(let ((anon216_Then_correct  (=> (and b_1_1@50 (= b_1_1@51  (and b_1_1@50 (not (= x@@8 null))))) (=> (and (and (= Ops_1Mask@24 (MapType1Store Ops_1Mask@23 x@@8 f_7 (real_2_U (+ (U_2_real (MapType1Select Ops_1Mask@23 x@@8 f_7)) FullPerm)))) (= b_1_1@52  (and b_1_1@51 (state Ops_1Heap@3 Ops_1Mask@24)))) (and (= Ops_1Mask@25 Ops_1Mask@24) (= b_1_1@53 b_1_1@52))) (and (=> (= (ControlFlow 0 101) 100) anon217_Then_correct) (=> (= (ControlFlow 0 101) 95) anon217_Else_correct))))))
(let ((anon215_Then_correct  (=> b_1_1@50 (and (=> (= (ControlFlow 0 103) 101) anon216_Then_correct) (=> (= (ControlFlow 0 103) 102) anon216_Else_correct)))))
(let ((anon215_Else_correct  (=> (and (and (not b_1_1@50) (= b_1_1@55 b_1_1@50)) (and (= Ops_1Mask@26 Ops_1Mask@23) (= (ControlFlow 0 94) 93))) anon106_correct)))
(let ((anon214_Then_correct  (=> b_1_1@50 (and (=> (= (ControlFlow 0 104) 103) anon215_Then_correct) (=> (= (ControlFlow 0 104) 94) anon215_Else_correct)))))
(let ((anon214_Else_correct  (=> (not b_1_1@50) (=> (and (= b_1_1@57 b_1_1@50) (= Ops_1Mask@27 Ops_1Mask@23)) (and (=> (= (ControlFlow 0 92) 91) anon219_Then_correct) (=> (= (ControlFlow 0 92) 82) anon219_Else_correct))))))
(let ((anon97_correct  (and (=> (= (ControlFlow 0 106) (- 0 107)) (=> (and b_1_1@46 b_11@6) (and (= neededTransfer@11 0.0) (= (U_2_real (MapType1Select Used_7Mask@3 x@@8 f_7)) initNeededTransfer@2)))) (=> (=> (and b_1_1@46 b_11@6) (and (= neededTransfer@11 0.0) (= (U_2_real (MapType1Select Used_7Mask@3 x@@8 f_7)) initNeededTransfer@2))) (=> (and (= b_12@0  (and b_1_1@46 b_11@6)) (= b_12@1  (and b_12@0 (state Result_2Heap Result_2Mask)))) (=> (and (and (= b_12@2  (and b_12@1 (sumMask Result_2Mask Ops_1Mask@22 Used_7Mask@3))) (= b_12@3  (and (and b_12@2 (IdenticalOnKnownLocations Ops_1Heap@2 Result_2Heap Ops_1Mask@22)) (IdenticalOnKnownLocations Used_7Heap@0 Result_2Heap Used_7Mask@3)))) (and (= b_12@4  (and b_12@3 (state Result_2Heap Result_2Mask))) (= b_1_1@47  (and b_1_1@46 b_12@4)))) (=> (and (and (and (= b_1_1@48  (and b_1_1@47 b_11@6)) (IdenticalOnKnownLocations Ops_1Heap@2 ExhaleHeap@2 Ops_1Mask@22)) (and (= b_1_1@49  (and b_1_1@48 (state ExhaleHeap@2 Ops_1Mask@22))) (= b_1_1@50 b_1_1@49))) (and (and (= Heap@9 Heap@8) (= Ops_1Heap@3 ExhaleHeap@2)) (and (= Mask@10 Mask@9) (= Ops_1Mask@23 Ops_1Mask@22)))) (and (=> (= (ControlFlow 0 106) 104) anon214_Then_correct) (=> (= (ControlFlow 0 106) 92) anon214_Else_correct)))))))))
(let ((anon213_Else_correct  (=> (>= 0.0 takeTransfer@5) (=> (and (= neededTransfer@11 neededTransfer@9) (= Mask@9 Mask@7)) (=> (and (and (= Heap@8 Heap@6) (= b_11@6 b_11@3)) (and (= Used_7Mask@3 Used_7Mask@1) (= (ControlFlow 0 110) 106))) anon97_correct)))))
(let ((anon213_Then_correct  (=> (> takeTransfer@5 0.0) (=> (and (and (= neededTransfer@10 (- neededTransfer@9 takeTransfer@5)) (= Used_7Mask@2 (MapType1Store Used_7Mask@1 x@@8 f_7 (real_2_U (+ (U_2_real (MapType1Select Used_7Mask@1 x@@8 f_7)) takeTransfer@5))))) (and (= b_11@4  (and b_11@3 (state Used_7Heap@0 Used_7Mask@2))) (= b_11@5  (and b_11@4 (= (U_2_int (MapType0Select Heap@6 x@@8 f_7)) (U_2_int (MapType0Select Used_7Heap@0 x@@8 f_7))))))) (=> (and (and (and (= Mask@8 (MapType1Store Mask@7 x@@8 f_7 (real_2_U (- (U_2_real (MapType1Select Mask@7 x@@8 f_7)) takeTransfer@5)))) (= Heap@7 (MapType0Store Heap@6 null (|wand#sm| x@@8 FullPerm freshObj@0 FullPerm x@@8 3 freshObj@0 5 x@@8 FullPerm x@@8 x@@8) (MapType1Store (MapType0Select Heap@6 null (|wand#sm| x@@8 FullPerm freshObj@0 FullPerm x@@8 3 freshObj@0 5 x@@8 FullPerm x@@8 x@@8)) x@@8 f_7 (bool_2_U true))))) (and (= neededTransfer@11 neededTransfer@10) (= Mask@9 Mask@8))) (and (and (= Heap@8 Heap@7) (= b_11@6 b_11@5)) (and (= Used_7Mask@3 Used_7Mask@2) (= (ControlFlow 0 109) 106)))) anon97_correct)))))
(let ((anon212_Else_correct  (=> (and (< maskTransfer@5 neededTransfer@9) (= takeTransfer@5 maskTransfer@5)) (and (=> (= (ControlFlow 0 112) 109) anon213_Then_correct) (=> (= (ControlFlow 0 112) 110) anon213_Else_correct)))))
(let ((anon212_Then_correct  (=> (and (<= neededTransfer@9 maskTransfer@5) (= takeTransfer@5 neededTransfer@9)) (and (=> (= (ControlFlow 0 111) 109) anon213_Then_correct) (=> (= (ControlFlow 0 111) 110) anon213_Else_correct)))))
(let ((anon211_Then_correct  (=> (and (and (and (and b_1_1@46 b_11@3) true) (> neededTransfer@9 0.0)) (= maskTransfer@5 (U_2_real (MapType1Select Mask@7 x@@8 f_7)))) (and (=> (= (ControlFlow 0 113) 111) anon212_Then_correct) (=> (= (ControlFlow 0 113) 112) anon212_Else_correct)))))
(let ((anon211_Else_correct  (=> (not (and (and (and b_1_1@46 b_11@3) true) (> neededTransfer@9 0.0))) (=> (and (= neededTransfer@11 neededTransfer@9) (= Mask@9 Mask@7)) (=> (and (and (= Heap@8 Heap@6) (= b_11@6 b_11@3)) (and (= Used_7Mask@3 Used_7Mask@1) (= (ControlFlow 0 108) 106))) anon97_correct)))))
(let ((anon210_Else_correct  (=> (>= 0.0 takeTransfer@4) (=> (and (and (= Ops_1Mask@22 Ops_1Mask@20) (= Used_7Mask@1 ZeroMask)) (and (= b_11@3 b_11@0) (= neededTransfer@9 FullPerm))) (and (=> (= (ControlFlow 0 116) 113) anon211_Then_correct) (=> (= (ControlFlow 0 116) 108) anon211_Else_correct))))))
(let ((anon210_Then_correct  (=> (and (> takeTransfer@4 0.0) (= neededTransfer@8 (- FullPerm takeTransfer@4))) (=> (and (and (and (= Used_7Mask@0 (MapType1Store ZeroMask x@@8 f_7 (real_2_U (+ (U_2_real (MapType1Select ZeroMask x@@8 f_7)) takeTransfer@4)))) (= b_11@1  (and b_11@0 (state Used_7Heap@0 Used_7Mask@0)))) (and (= b_11@2  (and b_11@1 (= (U_2_int (MapType0Select Ops_1Heap@2 x@@8 f_7)) (U_2_int (MapType0Select Used_7Heap@0 x@@8 f_7))))) (= Ops_1Mask@21 (MapType1Store Ops_1Mask@20 x@@8 f_7 (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@20 x@@8 f_7)) takeTransfer@4)))))) (and (and (= Ops_1Mask@22 Ops_1Mask@21) (= Used_7Mask@1 Used_7Mask@0)) (and (= b_11@3 b_11@2) (= neededTransfer@9 neededTransfer@8)))) (and (=> (= (ControlFlow 0 115) 113) anon211_Then_correct) (=> (= (ControlFlow 0 115) 108) anon211_Else_correct))))))
(let ((anon209_Else_correct  (=> (and (< maskTransfer@4 FullPerm) (= takeTransfer@4 maskTransfer@4)) (and (=> (= (ControlFlow 0 118) 115) anon210_Then_correct) (=> (= (ControlFlow 0 118) 116) anon210_Else_correct)))))
(let ((anon209_Then_correct  (=> (and (<= FullPerm maskTransfer@4) (= takeTransfer@4 FullPerm)) (and (=> (= (ControlFlow 0 117) 115) anon210_Then_correct) (=> (= (ControlFlow 0 117) 116) anon210_Else_correct)))))
(let ((anon208_Then_correct  (=> (and (and (and (and b_1_1@46 b_11@0) true) (> FullPerm 0.0)) (= maskTransfer@4 (U_2_real (MapType1Select Ops_1Mask@20 x@@8 f_7)))) (and (=> (= (ControlFlow 0 119) 117) anon209_Then_correct) (=> (= (ControlFlow 0 119) 118) anon209_Else_correct)))))
(let ((anon208_Else_correct  (=> (not (and (and (and b_1_1@46 b_11@0) true) (> FullPerm 0.0))) (=> (and (and (= Ops_1Mask@22 Ops_1Mask@20) (= Used_7Mask@1 ZeroMask)) (and (= b_11@3 b_11@0) (= neededTransfer@9 FullPerm))) (and (=> (= (ControlFlow 0 114) 113) anon211_Then_correct) (=> (= (ControlFlow 0 114) 108) anon211_Else_correct))))))
(let ((anon207_Then_correct  (=> b_1_1@46 (=> (and (= b_11@0  (and b_11 (state Used_7Heap@0 ZeroMask))) (= initNeededTransfer@2 (+ (U_2_real (MapType1Select ZeroMask x@@8 f_7)) FullPerm))) (and (=> (= (ControlFlow 0 120) (- 0 121)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 120) 119) anon208_Then_correct) (=> (= (ControlFlow 0 120) 114) anon208_Else_correct))))))))
(let ((anon207_Else_correct  (=> (and (not b_1_1@46) (= b_1_1@50 b_1_1@46)) (=> (and (and (= Heap@9 Heap@6) (= Ops_1Heap@3 Ops_1Heap@2)) (and (= Mask@10 Mask@7) (= Ops_1Mask@23 Ops_1Mask@20))) (and (=> (= (ControlFlow 0 105) 104) anon214_Then_correct) (=> (= (ControlFlow 0 105) 92) anon214_Else_correct))))))
(let ((anon83_correct  (and (=> (= (ControlFlow 0 123) (- 0 124)) (=> (and b_1_1@43 b_10@0) (= (U_2_int (MapType0Select Ops_1Heap@2 x@@8 f_7)) (U_2_int (MapType0Select LabelfirstHeap@0 x@@8 f_7))))) (=> (=> (and b_1_1@43 b_10@0) (= (U_2_int (MapType0Select Ops_1Heap@2 x@@8 f_7)) (U_2_int (MapType0Select LabelfirstHeap@0 x@@8 f_7)))) (=> (= b_1_1@44  (and b_1_1@43 b_10@0)) (=> (and (= b_1_1@45  (and b_1_1@44 (state Ops_1Heap@2 Ops_1Mask@20))) (= b_1_1@46 b_1_1@45)) (and (=> (= (ControlFlow 0 123) 120) anon207_Then_correct) (=> (= (ControlFlow 0 123) 105) anon207_Else_correct))))))))
(let ((anon206_Else_correct  (=> (and (not b_1_1@43) (= (ControlFlow 0 130) 123)) anon83_correct)))
(let ((anon206_Then_correct  (=> b_1_1@43 (and (=> (= (ControlFlow 0 126) (- 0 129)) (HasDirectPerm Ops_1Mask@20 x@@8 f_7)) (=> (HasDirectPerm Ops_1Mask@20 x@@8 f_7) (and (=> (= (ControlFlow 0 126) (- 0 128)) first_lblGuard@0) (=> first_lblGuard@0 (and (=> (= (ControlFlow 0 126) (- 0 127)) (HasDirectPerm LabelfirstMask@0 x@@8 f_7)) (=> (HasDirectPerm LabelfirstMask@0 x@@8 f_7) (=> (= (ControlFlow 0 126) 123) anon83_correct))))))))))
(let ((anon205_Then_correct  (=> (and b_1_1@43 b_10@0) (and (=> (= (ControlFlow 0 131) 126) anon206_Then_correct) (=> (= (ControlFlow 0 131) 130) anon206_Else_correct)))))
(let ((anon205_Else_correct  (=> (and (not (and b_1_1@43 b_10@0)) (= (ControlFlow 0 125) 123)) anon83_correct)))
(let ((anon204_Then_correct  (=> (and b_1_1@43 (= b_10@0  (and b_10 (state Used_6Heap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 132) 131) anon205_Then_correct) (=> (= (ControlFlow 0 132) 125) anon205_Else_correct)))))
(let ((anon204_Else_correct  (=> (and (not b_1_1@43) (= b_1_1@46 b_1_1@43)) (and (=> (= (ControlFlow 0 122) 120) anon207_Then_correct) (=> (= (ControlFlow 0 122) 105) anon207_Else_correct)))))
(let ((anon78_correct  (and (=> (= (ControlFlow 0 134) (- 0 135)) (=> (and b_1_1@40 b_9@0) (= (U_2_int (MapType0Select Ops_1Heap@0 x@@8 f_7)) 3))) (=> (=> (and b_1_1@40 b_9@0) (= (U_2_int (MapType0Select Ops_1Heap@0 x@@8 f_7)) 3)) (=> (= b_1_1@41  (and b_1_1@40 b_9@0)) (=> (and (= b_1_1@42  (and b_1_1@41 (state Ops_1Heap@2 Ops_1Mask@20))) (= b_1_1@43 b_1_1@42)) (and (=> (= (ControlFlow 0 134) 132) anon204_Then_correct) (=> (= (ControlFlow 0 134) 122) anon204_Else_correct))))))))
(let ((anon203_Else_correct  (=> (and (not b_1_1@40) (= (ControlFlow 0 139) 134)) anon78_correct)))
(let ((anon203_Then_correct  (=> b_1_1@40 (and (=> (= (ControlFlow 0 137) (- 0 138)) (HasDirectPerm Ops_1Mask@4 x@@8 f_7)) (=> (HasDirectPerm Ops_1Mask@4 x@@8 f_7) (=> (= (ControlFlow 0 137) 134) anon78_correct))))))
(let ((anon202_Then_correct  (=> (and b_1_1@40 b_9@0) (and (=> (= (ControlFlow 0 140) 137) anon203_Then_correct) (=> (= (ControlFlow 0 140) 139) anon203_Else_correct)))))
(let ((anon202_Else_correct  (=> (and (not (and b_1_1@40 b_9@0)) (= (ControlFlow 0 136) 134)) anon78_correct)))
(let ((anon201_Then_correct  (=> (and b_1_1@40 (= b_9@0  (and b_9 (state Used_5Heap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 141) 140) anon202_Then_correct) (=> (= (ControlFlow 0 141) 136) anon202_Else_correct)))))
(let ((anon201_Else_correct  (=> (and (not b_1_1@40) (= b_1_1@43 b_1_1@40)) (and (=> (= (ControlFlow 0 133) 132) anon204_Then_correct) (=> (= (ControlFlow 0 133) 122) anon204_Else_correct)))))
(let ((anon73_correct  (and (=> (= (ControlFlow 0 143) (- 0 144)) (=> (and (and b_7@7 (and b_7@7 b_1_1@36)) b_8@0) (= (U_2_int (MapType0Select Ops_3Heap@0 x@@8 f_7)) 4))) (=> (=> (and (and b_7@7 (and b_7@7 b_1_1@36)) b_8@0) (= (U_2_int (MapType0Select Ops_3Heap@0 x@@8 f_7)) 4)) (=> (and (= Ops_1Mask@19 (MapType1Store Ops_1Mask@18 null (wand_1 x@@8 FullPerm x@@8 4 x@@8 4) (real_2_U (+ (U_2_real (MapType1Select Ops_1Mask@18 null (wand_1 x@@8 FullPerm x@@8 4 x@@8 4))) FullPerm)))) (= b_1_1@37  (and b_1_1@36 (state Ops_1Heap@2 Ops_1Mask@19)))) (=> (and (and (= b_1_1@38  (and b_1_1@37 (state Ops_1Heap@2 Ops_1Mask@19))) (= b_1_1@39  (and b_1_1@38 (state Ops_1Heap@2 Ops_1Mask@19)))) (and (= Ops_1Mask@20 Ops_1Mask@19) (= b_1_1@40 b_1_1@39))) (and (=> (= (ControlFlow 0 143) 141) anon201_Then_correct) (=> (= (ControlFlow 0 143) 133) anon201_Else_correct))))))))
(let ((anon200_Else_correct  (=> (and (not b_7@7) (= (ControlFlow 0 148) 143)) anon73_correct)))
(let ((anon200_Then_correct  (=> b_7@7 (and (=> (= (ControlFlow 0 146) (- 0 147)) (HasDirectPerm Ops_3Mask@2 x@@8 f_7)) (=> (HasDirectPerm Ops_3Mask@2 x@@8 f_7) (=> (= (ControlFlow 0 146) 143) anon73_correct))))))
(let ((anon199_Then_correct  (=> (and (and b_7@7 (and b_7@7 b_1_1@36)) b_8@0) (and (=> (= (ControlFlow 0 149) 146) anon200_Then_correct) (=> (= (ControlFlow 0 149) 148) anon200_Else_correct)))))
(let ((anon199_Else_correct  (=> (and (not (and (and b_7@7 (and b_7@7 b_1_1@36)) b_8@0)) (= (ControlFlow 0 145) 143)) anon73_correct)))
(let ((anon70_correct  (=> (= b_7@6  (and b_7@5 (state Ops_3Heap@0 Ops_3Mask@2))) (=> (and (= b_7@7  (and b_7@6 (state Ops_3Heap@0 Ops_3Mask@2))) (= b_8@0  (and b_8 (state Used_4Heap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 150) 149) anon199_Then_correct) (=> (= (ControlFlow 0 150) 145) anon199_Else_correct))))))
(let ((anon69_correct  (=> (and (and (= b_7@4  (and b_7@3 (= (U_2_int (MapType0Select Ops_3Heap@0 x@@8 f_7)) 4))) (= b_7@5 b_7@4)) (and (= Ops_3Mask@2 Ops_3Mask@1) (= (ControlFlow 0 153) 150))) anon70_correct)))
(let ((anon198_Else_correct  (=> (and (not b_7@3) (= (ControlFlow 0 156) 153)) anon69_correct)))
(let ((anon198_Then_correct  (=> b_7@3 (and (=> (= (ControlFlow 0 154) (- 0 155)) (HasDirectPerm Ops_3Mask@1 x@@8 f_7)) (=> (HasDirectPerm Ops_3Mask@1 x@@8 f_7) (=> (= (ControlFlow 0 154) 153) anon69_correct))))))
(let ((anon197_Then_correct  (=> b_7@3 (and (=> (= (ControlFlow 0 157) 154) anon198_Then_correct) (=> (= (ControlFlow 0 157) 156) anon198_Else_correct)))))
(let ((anon197_Else_correct  (=> (and (and (not b_7@3) (= b_7@5 b_7@3)) (and (= Ops_3Mask@2 Ops_3Mask@1) (= (ControlFlow 0 152) 150))) anon70_correct)))
(let ((anon196_Else_correct  (=> (not b_7@0) (=> (and (= Ops_3Mask@1 ZeroMask) (= b_7@3 b_7@0)) (and (=> (= (ControlFlow 0 159) 157) anon197_Then_correct) (=> (= (ControlFlow 0 159) 152) anon197_Else_correct))))))
(let ((anon196_Then_correct  (=> (and b_7@0 (= b_7@1  (and b_7@0 (not (= x@@8 null))))) (=> (and (and (= Ops_3Mask@0 (MapType1Store ZeroMask x@@8 f_7 (real_2_U (+ (U_2_real (MapType1Select ZeroMask x@@8 f_7)) FullPerm)))) (= b_7@2  (and b_7@1 (state Ops_3Heap@0 Ops_3Mask@0)))) (and (= Ops_3Mask@1 Ops_3Mask@0) (= b_7@3 b_7@2))) (and (=> (= (ControlFlow 0 158) 157) anon197_Then_correct) (=> (= (ControlFlow 0 158) 152) anon197_Else_correct))))))
(let ((anon195_Then_correct  (=> b_7@0 (and (=> (= (ControlFlow 0 160) 158) anon196_Then_correct) (=> (= (ControlFlow 0 160) 159) anon196_Else_correct)))))
(let ((anon195_Else_correct  (=> (and (and (not b_7@0) (= b_7@5 b_7@0)) (and (= Ops_3Mask@2 ZeroMask) (= (ControlFlow 0 151) 150))) anon70_correct)))
(let ((anon194_Then_correct  (=> b_1_1@36 (=> (and (= b_7@0  (and b_7 (state Ops_3Heap@0 ZeroMask))) (= b_6@0  (and b_6 (state Used_3Heap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 161) 160) anon195_Then_correct) (=> (= (ControlFlow 0 161) 151) anon195_Else_correct))))))
(let ((anon194_Else_correct  (=> (not b_1_1@36) (=> (and (= Ops_1Mask@20 Ops_1Mask@18) (= b_1_1@40 b_1_1@36)) (and (=> (= (ControlFlow 0 142) 141) anon201_Then_correct) (=> (= (ControlFlow 0 142) 133) anon201_Else_correct))))))
(let ((anon61_correct  (=> (and (and (state Ops_1Heap@2 Ops_1Mask@17) (= b_1_1@35  (and b_1_1@34 (state Ops_1Heap@2 Ops_1Mask@17)))) (and (= Ops_1Mask@18 Ops_1Mask@17) (= b_1_1@36 b_1_1@35))) (and (=> (= (ControlFlow 0 163) 161) anon194_Then_correct) (=> (= (ControlFlow 0 163) 142) anon194_Else_correct)))))
(let ((anon60_correct  (=> (and (and (= b_1_1@33  (and b_1_1@32 (= (U_2_int (MapType0Select Ops_1Heap@2 x@@8 f_7)) (U_2_int (MapType0Select Ops_1Heap@2 freshObj@0 f_7))))) (= Ops_1Mask@17 Ops_1Mask@16)) (and (= b_1_1@34 b_1_1@33) (= (ControlFlow 0 166) 163))) anon61_correct)))
(let ((anon193_Else_correct  (=> (and (not b_1_1@32) (= (ControlFlow 0 170) 166)) anon60_correct)))
(let ((anon193_Then_correct  (=> b_1_1@32 (and (=> (= (ControlFlow 0 167) (- 0 169)) (HasDirectPerm Ops_1Mask@16 x@@8 f_7)) (=> (HasDirectPerm Ops_1Mask@16 x@@8 f_7) (and (=> (= (ControlFlow 0 167) (- 0 168)) (HasDirectPerm Ops_1Mask@16 freshObj@0 f_7)) (=> (HasDirectPerm Ops_1Mask@16 freshObj@0 f_7) (=> (= (ControlFlow 0 167) 166) anon60_correct))))))))
(let ((anon192_Then_correct  (=> b_1_1@32 (and (=> (= (ControlFlow 0 171) 167) anon193_Then_correct) (=> (= (ControlFlow 0 171) 170) anon193_Else_correct)))))
(let ((anon192_Else_correct  (=> (and (and (not b_1_1@32) (= Ops_1Mask@17 Ops_1Mask@16)) (and (= b_1_1@34 b_1_1@32) (= (ControlFlow 0 165) 163))) anon61_correct)))
(let ((anon191_Else_correct  (=> (not b_1_1@29) (=> (and (= b_1_1@32 b_1_1@29) (= Ops_1Mask@16 Ops_1Mask@14)) (and (=> (= (ControlFlow 0 173) 171) anon192_Then_correct) (=> (= (ControlFlow 0 173) 165) anon192_Else_correct))))))
(let ((anon191_Then_correct  (=> (and b_1_1@29 (= b_1_1@30  (and b_1_1@29 (not (= x@@8 null))))) (=> (and (and (= Ops_1Mask@15 (MapType1Store Ops_1Mask@14 x@@8 f_7 (real_2_U (+ (U_2_real (MapType1Select Ops_1Mask@14 x@@8 f_7)) FullPerm)))) (= b_1_1@31  (and b_1_1@30 (state Ops_1Heap@2 Ops_1Mask@15)))) (and (= b_1_1@32 b_1_1@31) (= Ops_1Mask@16 Ops_1Mask@15))) (and (=> (= (ControlFlow 0 172) 171) anon192_Then_correct) (=> (= (ControlFlow 0 172) 165) anon192_Else_correct))))))
(let ((anon190_Then_correct  (=> b_1_1@29 (and (=> (= (ControlFlow 0 174) 172) anon191_Then_correct) (=> (= (ControlFlow 0 174) 173) anon191_Else_correct)))))
(let ((anon190_Else_correct  (=> (and (and (not b_1_1@29) (= Ops_1Mask@17 Ops_1Mask@14)) (and (= b_1_1@34 b_1_1@29) (= (ControlFlow 0 164) 163))) anon61_correct)))
(let ((anon189_Then_correct  (=> b_1_1@29 (and (=> (= (ControlFlow 0 175) 174) anon190_Then_correct) (=> (= (ControlFlow 0 175) 164) anon190_Else_correct)))))
(let ((anon189_Else_correct  (=> (not b_1_1@29) (=> (and (= Ops_1Mask@18 Ops_1Mask@14) (= b_1_1@36 b_1_1@29)) (and (=> (= (ControlFlow 0 162) 161) anon194_Then_correct) (=> (= (ControlFlow 0 162) 142) anon194_Else_correct))))))
(let ((anon52_correct  (and (=> (= (ControlFlow 0 177) (- 0 178)) (=> (and b_1_1@25 b_4@6) (and (= neededTransfer@7 0.0) (= (U_2_real (MapType1Select Used_2Mask@3 x@@8 f_7)) initNeededTransfer@1)))) (=> (=> (and b_1_1@25 b_4@6) (and (= neededTransfer@7 0.0) (= (U_2_real (MapType1Select Used_2Mask@3 x@@8 f_7)) initNeededTransfer@1))) (=> (and (= b_5@0  (and b_1_1@25 b_4@6)) (= b_5@1  (and b_5@0 (state Result_1Heap Result_1Mask)))) (=> (and (and (= b_5@2  (and b_5@1 (sumMask Result_1Mask Ops_1Mask@13 Used_2Mask@3))) (= b_5@3  (and (and b_5@2 (IdenticalOnKnownLocations Ops_1Heap@1 Result_1Heap Ops_1Mask@13)) (IdenticalOnKnownLocations Used_2Heap@0 Result_1Heap Used_2Mask@3)))) (and (= b_5@4  (and b_5@3 (state Result_1Heap Result_1Mask))) (= b_1_1@26  (and b_1_1@25 b_5@4)))) (=> (and (and (and (= b_1_1@27  (and b_1_1@26 b_4@6)) (IdenticalOnKnownLocations Ops_1Heap@1 ExhaleHeap@1 Ops_1Mask@13)) (and (= b_1_1@28  (and b_1_1@27 (state ExhaleHeap@1 Ops_1Mask@13))) (= b_1_1@29 b_1_1@28))) (and (and (= Mask@7 Mask@6) (= Ops_1Heap@2 ExhaleHeap@1)) (and (= Heap@6 Heap@5) (= Ops_1Mask@14 Ops_1Mask@13)))) (and (=> (= (ControlFlow 0 177) 175) anon189_Then_correct) (=> (= (ControlFlow 0 177) 162) anon189_Else_correct)))))))))
(let ((anon188_Else_correct  (=> (>= 0.0 takeTransfer@3) (=> (and (= neededTransfer@7 neededTransfer@5) (= Heap@5 Heap@3)) (=> (and (and (= Mask@6 Mask@4) (= b_4@6 b_4@3)) (and (= Used_2Mask@3 Used_2Mask@1) (= (ControlFlow 0 181) 177))) anon52_correct)))))
(let ((anon188_Then_correct  (=> (> takeTransfer@3 0.0) (=> (and (and (= neededTransfer@6 (- neededTransfer@5 takeTransfer@3)) (= Used_2Mask@2 (MapType1Store Used_2Mask@1 x@@8 f_7 (real_2_U (+ (U_2_real (MapType1Select Used_2Mask@1 x@@8 f_7)) takeTransfer@3))))) (and (= b_4@4  (and b_4@3 (state Used_2Heap@0 Used_2Mask@2))) (= b_4@5  (and b_4@4 (= (U_2_int (MapType0Select Heap@3 x@@8 f_7)) (U_2_int (MapType0Select Used_2Heap@0 x@@8 f_7))))))) (=> (and (and (and (= Mask@5 (MapType1Store Mask@4 x@@8 f_7 (real_2_U (- (U_2_real (MapType1Select Mask@4 x@@8 f_7)) takeTransfer@3)))) (= Heap@4 (MapType0Store Heap@3 null (|wand#sm| x@@8 FullPerm freshObj@0 FullPerm x@@8 3 freshObj@0 5 x@@8 FullPerm x@@8 x@@8) (MapType1Store (MapType0Select Heap@3 null (|wand#sm| x@@8 FullPerm freshObj@0 FullPerm x@@8 3 freshObj@0 5 x@@8 FullPerm x@@8 x@@8)) x@@8 f_7 (bool_2_U true))))) (and (= neededTransfer@7 neededTransfer@6) (= Heap@5 Heap@4))) (and (and (= Mask@6 Mask@5) (= b_4@6 b_4@5)) (and (= Used_2Mask@3 Used_2Mask@2) (= (ControlFlow 0 180) 177)))) anon52_correct)))))
(let ((anon187_Else_correct  (=> (and (< maskTransfer@3 neededTransfer@5) (= takeTransfer@3 maskTransfer@3)) (and (=> (= (ControlFlow 0 183) 180) anon188_Then_correct) (=> (= (ControlFlow 0 183) 181) anon188_Else_correct)))))
(let ((anon187_Then_correct  (=> (and (<= neededTransfer@5 maskTransfer@3) (= takeTransfer@3 neededTransfer@5)) (and (=> (= (ControlFlow 0 182) 180) anon188_Then_correct) (=> (= (ControlFlow 0 182) 181) anon188_Else_correct)))))
(let ((anon186_Then_correct  (=> (and (and (and (and b_1_1@25 b_4@3) true) (> neededTransfer@5 0.0)) (= maskTransfer@3 (U_2_real (MapType1Select Mask@4 x@@8 f_7)))) (and (=> (= (ControlFlow 0 184) 182) anon187_Then_correct) (=> (= (ControlFlow 0 184) 183) anon187_Else_correct)))))
(let ((anon186_Else_correct  (=> (not (and (and (and b_1_1@25 b_4@3) true) (> neededTransfer@5 0.0))) (=> (and (= neededTransfer@7 neededTransfer@5) (= Heap@5 Heap@3)) (=> (and (and (= Mask@6 Mask@4) (= b_4@6 b_4@3)) (and (= Used_2Mask@3 Used_2Mask@1) (= (ControlFlow 0 179) 177))) anon52_correct)))))
(let ((anon185_Else_correct  (=> (>= 0.0 takeTransfer@2) (=> (and (and (= Ops_1Mask@13 Ops_1Mask@11) (= Used_2Mask@1 ZeroMask)) (and (= b_4@3 b_4@0) (= neededTransfer@5 FullPerm))) (and (=> (= (ControlFlow 0 187) 184) anon186_Then_correct) (=> (= (ControlFlow 0 187) 179) anon186_Else_correct))))))
(let ((anon185_Then_correct  (=> (and (> takeTransfer@2 0.0) (= neededTransfer@4 (- FullPerm takeTransfer@2))) (=> (and (and (and (= Used_2Mask@0 (MapType1Store ZeroMask x@@8 f_7 (real_2_U (+ (U_2_real (MapType1Select ZeroMask x@@8 f_7)) takeTransfer@2)))) (= b_4@1  (and b_4@0 (state Used_2Heap@0 Used_2Mask@0)))) (and (= b_4@2  (and b_4@1 (= (U_2_int (MapType0Select Ops_1Heap@1 x@@8 f_7)) (U_2_int (MapType0Select Used_2Heap@0 x@@8 f_7))))) (= Ops_1Mask@12 (MapType1Store Ops_1Mask@11 x@@8 f_7 (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@11 x@@8 f_7)) takeTransfer@2)))))) (and (and (= Ops_1Mask@13 Ops_1Mask@12) (= Used_2Mask@1 Used_2Mask@0)) (and (= b_4@3 b_4@2) (= neededTransfer@5 neededTransfer@4)))) (and (=> (= (ControlFlow 0 186) 184) anon186_Then_correct) (=> (= (ControlFlow 0 186) 179) anon186_Else_correct))))))
(let ((anon184_Else_correct  (=> (and (< maskTransfer@2 FullPerm) (= takeTransfer@2 maskTransfer@2)) (and (=> (= (ControlFlow 0 189) 186) anon185_Then_correct) (=> (= (ControlFlow 0 189) 187) anon185_Else_correct)))))
(let ((anon184_Then_correct  (=> (and (<= FullPerm maskTransfer@2) (= takeTransfer@2 FullPerm)) (and (=> (= (ControlFlow 0 188) 186) anon185_Then_correct) (=> (= (ControlFlow 0 188) 187) anon185_Else_correct)))))
(let ((anon183_Then_correct  (=> (and (and (and (and b_1_1@25 b_4@0) true) (> FullPerm 0.0)) (= maskTransfer@2 (U_2_real (MapType1Select Ops_1Mask@11 x@@8 f_7)))) (and (=> (= (ControlFlow 0 190) 188) anon184_Then_correct) (=> (= (ControlFlow 0 190) 189) anon184_Else_correct)))))
(let ((anon183_Else_correct  (=> (not (and (and (and b_1_1@25 b_4@0) true) (> FullPerm 0.0))) (=> (and (and (= Ops_1Mask@13 Ops_1Mask@11) (= Used_2Mask@1 ZeroMask)) (and (= b_4@3 b_4@0) (= neededTransfer@5 FullPerm))) (and (=> (= (ControlFlow 0 185) 184) anon186_Then_correct) (=> (= (ControlFlow 0 185) 179) anon186_Else_correct))))))
(let ((anon182_Then_correct  (=> b_1_1@25 (=> (and (= b_4@0  (and b_4 (state Used_2Heap@0 ZeroMask))) (= initNeededTransfer@1 (+ (U_2_real (MapType1Select ZeroMask x@@8 f_7)) FullPerm))) (and (=> (= (ControlFlow 0 191) (- 0 192)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 191) 190) anon183_Then_correct) (=> (= (ControlFlow 0 191) 185) anon183_Else_correct))))))))
(let ((anon182_Else_correct  (=> (and (not b_1_1@25) (= b_1_1@29 b_1_1@25)) (=> (and (and (= Mask@7 Mask@4) (= Ops_1Heap@2 Ops_1Heap@1)) (and (= Heap@6 Heap@3) (= Ops_1Mask@14 Ops_1Mask@11))) (and (=> (= (ControlFlow 0 176) 175) anon189_Then_correct) (=> (= (ControlFlow 0 176) 162) anon189_Else_correct))))))
(let ((anon181_Else_correct  (=> (not b_1_1@23) (=> (and (and (= first_lblGuard@0 false) (= b_1_1@25 b_1_1@23)) (and (= LabelfirstHeap@0 LabelfirstHeap) (= LabelfirstMask@0 LabelfirstMask))) (and (=> (= (ControlFlow 0 194) 191) anon182_Then_correct) (=> (= (ControlFlow 0 194) 176) anon182_Else_correct))))))
(let ((anon181_Then_correct  (=> (and b_1_1@23 (= b_1_1@24  (and b_1_1@23 (state Ops_1Heap@1 Ops_1Mask@11)))) (=> (and (and (= first_lblGuard@0 true) (= b_1_1@25 b_1_1@24)) (and (= LabelfirstHeap@0 Ops_1Heap@1) (= LabelfirstMask@0 Ops_1Mask@11))) (and (=> (= (ControlFlow 0 193) 191) anon182_Then_correct) (=> (= (ControlFlow 0 193) 176) anon182_Else_correct))))))
(let ((anon37_correct  (=> (and (and (state Ops_1Heap@1 Ops_1Mask@10) (= b_1_1@22  (and b_1_1@21 (state Ops_1Heap@1 Ops_1Mask@10)))) (and (= Ops_1Mask@11 Ops_1Mask@10) (= b_1_1@23 b_1_1@22))) (and (=> (= (ControlFlow 0 196) 193) anon181_Then_correct) (=> (= (ControlFlow 0 196) 194) anon181_Else_correct)))))
(let ((anon36_correct  (=> (and (and (= b_1_1@20  (and b_1_1@19 (= (U_2_int (MapType0Select Ops_1Heap@1 x@@8 f_7)) 5))) (= Ops_1Mask@10 Ops_1Mask@9)) (and (= b_1_1@21 b_1_1@20) (= (ControlFlow 0 199) 196))) anon37_correct)))
(let ((anon180_Else_correct  (=> (and (not b_1_1@19) (= (ControlFlow 0 202) 199)) anon36_correct)))
(let ((anon180_Then_correct  (=> b_1_1@19 (and (=> (= (ControlFlow 0 200) (- 0 201)) (HasDirectPerm Ops_1Mask@9 x@@8 f_7)) (=> (HasDirectPerm Ops_1Mask@9 x@@8 f_7) (=> (= (ControlFlow 0 200) 199) anon36_correct))))))
(let ((anon179_Then_correct  (=> b_1_1@19 (and (=> (= (ControlFlow 0 203) 200) anon180_Then_correct) (=> (= (ControlFlow 0 203) 202) anon180_Else_correct)))))
(let ((anon179_Else_correct  (=> (and (and (not b_1_1@19) (= Ops_1Mask@10 Ops_1Mask@9)) (and (= b_1_1@21 b_1_1@19) (= (ControlFlow 0 198) 196))) anon37_correct)))
(let ((anon178_Else_correct  (=> (not b_1_1@16) (=> (and (= b_1_1@19 b_1_1@16) (= Ops_1Mask@9 Ops_1Mask@7)) (and (=> (= (ControlFlow 0 205) 203) anon179_Then_correct) (=> (= (ControlFlow 0 205) 198) anon179_Else_correct))))))
(let ((anon178_Then_correct  (=> (and b_1_1@16 (= b_1_1@17  (and b_1_1@16 (not (= x@@8 null))))) (=> (and (and (= Ops_1Mask@8 (MapType1Store Ops_1Mask@7 x@@8 f_7 (real_2_U (+ (U_2_real (MapType1Select Ops_1Mask@7 x@@8 f_7)) FullPerm)))) (= b_1_1@18  (and b_1_1@17 (state Ops_1Heap@1 Ops_1Mask@8)))) (and (= b_1_1@19 b_1_1@18) (= Ops_1Mask@9 Ops_1Mask@8))) (and (=> (= (ControlFlow 0 204) 203) anon179_Then_correct) (=> (= (ControlFlow 0 204) 198) anon179_Else_correct))))))
(let ((anon177_Then_correct  (=> b_1_1@16 (and (=> (= (ControlFlow 0 206) 204) anon178_Then_correct) (=> (= (ControlFlow 0 206) 205) anon178_Else_correct)))))
(let ((anon177_Else_correct  (=> (and (and (not b_1_1@16) (= Ops_1Mask@10 Ops_1Mask@7)) (and (= b_1_1@21 b_1_1@16) (= (ControlFlow 0 197) 196))) anon37_correct)))
(let ((anon176_Then_correct  (=> b_1_1@16 (and (=> (= (ControlFlow 0 207) 206) anon177_Then_correct) (=> (= (ControlFlow 0 207) 197) anon177_Else_correct)))))
(let ((anon176_Else_correct  (=> (not b_1_1@16) (=> (and (= Ops_1Mask@11 Ops_1Mask@7) (= b_1_1@23 b_1_1@16)) (and (=> (= (ControlFlow 0 195) 193) anon181_Then_correct) (=> (= (ControlFlow 0 195) 194) anon181_Else_correct))))))
(let ((anon28_correct  (and (=> (= (ControlFlow 0 209) (- 0 210)) (=> (and b_1_1@12 b_2_1@6) (and (= neededTransfer@3 0.0) (= (U_2_real (MapType1Select Used_1Mask@3 x@@8 f_7)) initNeededTransfer@0)))) (=> (=> (and b_1_1@12 b_2_1@6) (and (= neededTransfer@3 0.0) (= (U_2_real (MapType1Select Used_1Mask@3 x@@8 f_7)) initNeededTransfer@0))) (=> (and (= b_3@0  (and b_1_1@12 b_2_1@6)) (= b_3@1  (and b_3@0 (state ResultHeap ResultMask@@0)))) (=> (and (and (= b_3@2  (and b_3@1 (sumMask ResultMask@@0 Ops_1Mask@6 Used_1Mask@3))) (= b_3@3  (and (and b_3@2 (IdenticalOnKnownLocations Ops_1Heap@0 ResultHeap Ops_1Mask@6)) (IdenticalOnKnownLocations Used_1Heap@0 ResultHeap Used_1Mask@3)))) (and (= b_3@4  (and b_3@3 (state ResultHeap ResultMask@@0))) (= b_1_1@13  (and b_1_1@12 b_3@4)))) (=> (and (and (and (= b_1_1@14  (and b_1_1@13 b_2_1@6)) (IdenticalOnKnownLocations Ops_1Heap@0 ExhaleHeap@0 Ops_1Mask@6)) (and (= b_1_1@15  (and b_1_1@14 (state ExhaleHeap@0 Ops_1Mask@6))) (= Ops_1Heap@1 ExhaleHeap@0))) (and (and (= b_1_1@16 b_1_1@15) (= Heap@3 Heap@2)) (and (= Mask@4 Mask@3) (= Ops_1Mask@7 Ops_1Mask@6)))) (and (=> (= (ControlFlow 0 209) 207) anon176_Then_correct) (=> (= (ControlFlow 0 209) 195) anon176_Else_correct)))))))))
(let ((anon175_Else_correct  (=> (>= 0.0 takeTransfer@1) (=> (and (= Mask@3 Mask@1) (= Heap@2 Heap@0)) (=> (and (and (= neededTransfer@3 neededTransfer@1) (= b_2_1@6 b_2_1@3)) (and (= Used_1Mask@3 Used_1Mask@1) (= (ControlFlow 0 213) 209))) anon28_correct)))))
(let ((anon175_Then_correct  (=> (> takeTransfer@1 0.0) (=> (and (and (= neededTransfer@2 (- neededTransfer@1 takeTransfer@1)) (= Used_1Mask@2 (MapType1Store Used_1Mask@1 x@@8 f_7 (real_2_U (+ (U_2_real (MapType1Select Used_1Mask@1 x@@8 f_7)) takeTransfer@1))))) (and (= b_2_1@4  (and b_2_1@3 (state Used_1Heap@0 Used_1Mask@2))) (= b_2_1@5  (and b_2_1@4 (= (U_2_int (MapType0Select Heap@0 x@@8 f_7)) (U_2_int (MapType0Select Used_1Heap@0 x@@8 f_7))))))) (=> (and (and (and (= Mask@2 (MapType1Store Mask@1 x@@8 f_7 (real_2_U (- (U_2_real (MapType1Select Mask@1 x@@8 f_7)) takeTransfer@1)))) (= Heap@1 (MapType0Store Heap@0 null (|wand#sm| x@@8 FullPerm freshObj@0 FullPerm x@@8 3 freshObj@0 5 x@@8 FullPerm x@@8 x@@8) (MapType1Store (MapType0Select Heap@0 null (|wand#sm| x@@8 FullPerm freshObj@0 FullPerm x@@8 3 freshObj@0 5 x@@8 FullPerm x@@8 x@@8)) x@@8 f_7 (bool_2_U true))))) (and (= Mask@3 Mask@2) (= Heap@2 Heap@1))) (and (and (= neededTransfer@3 neededTransfer@2) (= b_2_1@6 b_2_1@5)) (and (= Used_1Mask@3 Used_1Mask@2) (= (ControlFlow 0 212) 209)))) anon28_correct)))))
(let ((anon174_Else_correct  (=> (and (< maskTransfer@1 neededTransfer@1) (= takeTransfer@1 maskTransfer@1)) (and (=> (= (ControlFlow 0 215) 212) anon175_Then_correct) (=> (= (ControlFlow 0 215) 213) anon175_Else_correct)))))
(let ((anon174_Then_correct  (=> (and (<= neededTransfer@1 maskTransfer@1) (= takeTransfer@1 neededTransfer@1)) (and (=> (= (ControlFlow 0 214) 212) anon175_Then_correct) (=> (= (ControlFlow 0 214) 213) anon175_Else_correct)))))
(let ((anon173_Then_correct  (=> (and (and (and (and b_1_1@12 b_2_1@3) true) (> neededTransfer@1 0.0)) (= maskTransfer@1 (U_2_real (MapType1Select Mask@1 x@@8 f_7)))) (and (=> (= (ControlFlow 0 216) 214) anon174_Then_correct) (=> (= (ControlFlow 0 216) 215) anon174_Else_correct)))))
(let ((anon173_Else_correct  (=> (not (and (and (and b_1_1@12 b_2_1@3) true) (> neededTransfer@1 0.0))) (=> (and (= Mask@3 Mask@1) (= Heap@2 Heap@0)) (=> (and (and (= neededTransfer@3 neededTransfer@1) (= b_2_1@6 b_2_1@3)) (and (= Used_1Mask@3 Used_1Mask@1) (= (ControlFlow 0 211) 209))) anon28_correct)))))
(let ((anon172_Else_correct  (=> (>= 0.0 takeTransfer@0) (=> (and (and (= Ops_1Mask@6 Ops_1Mask@4) (= Used_1Mask@1 ZeroMask)) (and (= b_2_1@3 b_2_1@0) (= neededTransfer@1 FullPerm))) (and (=> (= (ControlFlow 0 219) 216) anon173_Then_correct) (=> (= (ControlFlow 0 219) 211) anon173_Else_correct))))))
(let ((anon172_Then_correct  (=> (and (> takeTransfer@0 0.0) (= neededTransfer@0 (- FullPerm takeTransfer@0))) (=> (and (and (and (= Used_1Mask@0 (MapType1Store ZeroMask x@@8 f_7 (real_2_U (+ (U_2_real (MapType1Select ZeroMask x@@8 f_7)) takeTransfer@0)))) (= b_2_1@1  (and b_2_1@0 (state Used_1Heap@0 Used_1Mask@0)))) (and (= b_2_1@2  (and b_2_1@1 (= (U_2_int (MapType0Select Ops_1Heap@0 x@@8 f_7)) (U_2_int (MapType0Select Used_1Heap@0 x@@8 f_7))))) (= Ops_1Mask@5 (MapType1Store Ops_1Mask@4 x@@8 f_7 (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@4 x@@8 f_7)) takeTransfer@0)))))) (and (and (= Ops_1Mask@6 Ops_1Mask@5) (= Used_1Mask@1 Used_1Mask@0)) (and (= b_2_1@3 b_2_1@2) (= neededTransfer@1 neededTransfer@0)))) (and (=> (= (ControlFlow 0 218) 216) anon173_Then_correct) (=> (= (ControlFlow 0 218) 211) anon173_Else_correct))))))
(let ((anon171_Else_correct  (=> (and (< maskTransfer@0 FullPerm) (= takeTransfer@0 maskTransfer@0)) (and (=> (= (ControlFlow 0 221) 218) anon172_Then_correct) (=> (= (ControlFlow 0 221) 219) anon172_Else_correct)))))
(let ((anon171_Then_correct  (=> (and (<= FullPerm maskTransfer@0) (= takeTransfer@0 FullPerm)) (and (=> (= (ControlFlow 0 220) 218) anon172_Then_correct) (=> (= (ControlFlow 0 220) 219) anon172_Else_correct)))))
(let ((anon170_Then_correct  (=> (and (and (and (and b_1_1@12 b_2_1@0) true) (> FullPerm 0.0)) (= maskTransfer@0 (U_2_real (MapType1Select Ops_1Mask@4 x@@8 f_7)))) (and (=> (= (ControlFlow 0 222) 220) anon171_Then_correct) (=> (= (ControlFlow 0 222) 221) anon171_Else_correct)))))
(let ((anon170_Else_correct  (=> (not (and (and (and b_1_1@12 b_2_1@0) true) (> FullPerm 0.0))) (=> (and (and (= Ops_1Mask@6 Ops_1Mask@4) (= Used_1Mask@1 ZeroMask)) (and (= b_2_1@3 b_2_1@0) (= neededTransfer@1 FullPerm))) (and (=> (= (ControlFlow 0 217) 216) anon173_Then_correct) (=> (= (ControlFlow 0 217) 211) anon173_Else_correct))))))
(let ((anon169_Then_correct  (=> b_1_1@12 (=> (and (= b_2_1@0  (and b_2_1 (state Used_1Heap@0 ZeroMask))) (= initNeededTransfer@0 (+ (U_2_real (MapType1Select ZeroMask x@@8 f_7)) FullPerm))) (and (=> (= (ControlFlow 0 223) (- 0 224)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 223) 222) anon170_Then_correct) (=> (= (ControlFlow 0 223) 217) anon170_Else_correct))))))))
(let ((anon169_Else_correct  (=> (and (not b_1_1@12) (= Ops_1Heap@1 Ops_1Heap@0)) (=> (and (and (= b_1_1@16 b_1_1@12) (= Heap@3 Heap@0)) (and (= Mask@4 Mask@1) (= Ops_1Mask@7 Ops_1Mask@4))) (and (=> (= (ControlFlow 0 208) 207) anon176_Then_correct) (=> (= (ControlFlow 0 208) 195) anon176_Else_correct))))))
(let ((anon15_correct  (=> (and (= b_1_1@11  (and b_1_1@10 (state Ops_1Heap@0 Ops_1Mask@4))) (= b_1_1@12  (and b_1_1@11 (state Ops_1Heap@0 Ops_1Mask@4)))) (and (=> (= (ControlFlow 0 225) 223) anon169_Then_correct) (=> (= (ControlFlow 0 225) 208) anon169_Else_correct)))))
(let ((anon14_correct  (=> (and (and (= b_1_1@9  (and b_1_1@8 (= (U_2_int (MapType0Select Ops_1Heap@0 freshObj@0 f_7)) 5))) (= b_1_1@10 b_1_1@9)) (and (= Ops_1Mask@4 Ops_1Mask@3) (= (ControlFlow 0 230) 225))) anon15_correct)))
(let ((anon168_Else_correct  (=> (and (not b_1_1@8) (= (ControlFlow 0 233) 230)) anon14_correct)))
(let ((anon168_Then_correct  (=> b_1_1@8 (and (=> (= (ControlFlow 0 231) (- 0 232)) (HasDirectPerm Ops_1Mask@3 freshObj@0 f_7)) (=> (HasDirectPerm Ops_1Mask@3 freshObj@0 f_7) (=> (= (ControlFlow 0 231) 230) anon14_correct))))))
(let ((anon167_Then_correct  (=> b_1_1@8 (and (=> (= (ControlFlow 0 234) 231) anon168_Then_correct) (=> (= (ControlFlow 0 234) 233) anon168_Else_correct)))))
(let ((anon167_Else_correct  (=> (and (and (not b_1_1@8) (= b_1_1@10 b_1_1@8)) (and (= Ops_1Mask@4 Ops_1Mask@3) (= (ControlFlow 0 229) 225))) anon15_correct)))
(let ((anon10_correct  (=> (and (= b_1_1@7  (and b_1_1@6 (= (U_2_int (MapType0Select Ops_1Heap@0 x@@8 f_7)) 3))) (= b_1_1@8 b_1_1@7)) (and (=> (= (ControlFlow 0 236) 234) anon167_Then_correct) (=> (= (ControlFlow 0 236) 229) anon167_Else_correct)))))
(let ((anon166_Else_correct  (=> (and (not b_1_1@6) (= (ControlFlow 0 239) 236)) anon10_correct)))
(let ((anon166_Then_correct  (=> b_1_1@6 (and (=> (= (ControlFlow 0 237) (- 0 238)) (HasDirectPerm Ops_1Mask@3 x@@8 f_7)) (=> (HasDirectPerm Ops_1Mask@3 x@@8 f_7) (=> (= (ControlFlow 0 237) 236) anon10_correct))))))
(let ((anon165_Then_correct  (=> b_1_1@6 (and (=> (= (ControlFlow 0 240) 237) anon166_Then_correct) (=> (= (ControlFlow 0 240) 239) anon166_Else_correct)))))
(let ((anon165_Else_correct  (=> (and (not b_1_1@6) (= b_1_1@8 b_1_1@6)) (and (=> (= (ControlFlow 0 235) 234) anon167_Then_correct) (=> (= (ControlFlow 0 235) 229) anon167_Else_correct)))))
(let ((anon164_Then_correct  (=> b_1_1@6 (and (=> (= (ControlFlow 0 241) 240) anon165_Then_correct) (=> (= (ControlFlow 0 241) 235) anon165_Else_correct)))))
(let ((anon164_Else_correct  (=> (and (and (not b_1_1@6) (= b_1_1@10 b_1_1@6)) (and (= Ops_1Mask@4 Ops_1Mask@3) (= (ControlFlow 0 228) 225))) anon15_correct)))
(let ((anon163_Else_correct  (=> (not b_1_1@3) (=> (and (= b_1_1@6 b_1_1@3) (= Ops_1Mask@3 Ops_1Mask@1)) (and (=> (= (ControlFlow 0 243) 241) anon164_Then_correct) (=> (= (ControlFlow 0 243) 228) anon164_Else_correct))))))
(let ((anon163_Then_correct  (=> (and b_1_1@3 (= b_1_1@4  (and b_1_1@3 (not (= freshObj@0 null))))) (=> (and (and (= Ops_1Mask@2 (MapType1Store Ops_1Mask@1 freshObj@0 f_7 (real_2_U (+ (U_2_real (MapType1Select Ops_1Mask@1 freshObj@0 f_7)) FullPerm)))) (= b_1_1@5  (and b_1_1@4 (state Ops_1Heap@0 Ops_1Mask@2)))) (and (= b_1_1@6 b_1_1@5) (= Ops_1Mask@3 Ops_1Mask@2))) (and (=> (= (ControlFlow 0 242) 241) anon164_Then_correct) (=> (= (ControlFlow 0 242) 228) anon164_Else_correct))))))
(let ((anon162_Then_correct  (=> b_1_1@3 (and (=> (= (ControlFlow 0 244) 242) anon163_Then_correct) (=> (= (ControlFlow 0 244) 243) anon163_Else_correct)))))
(let ((anon162_Else_correct  (=> (and (and (not b_1_1@3) (= b_1_1@10 b_1_1@3)) (and (= Ops_1Mask@4 Ops_1Mask@1) (= (ControlFlow 0 227) 225))) anon15_correct)))
(let ((anon161_Else_correct  (=> (not b_1_1@0) (=> (and (= Ops_1Mask@1 ZeroMask) (= b_1_1@3 b_1_1@0)) (and (=> (= (ControlFlow 0 246) 244) anon162_Then_correct) (=> (= (ControlFlow 0 246) 227) anon162_Else_correct))))))
(let ((anon161_Then_correct  (=> (and b_1_1@0 (= b_1_1@1  (and b_1_1@0 (not (= x@@8 null))))) (=> (and (and (= Ops_1Mask@0 (MapType1Store ZeroMask x@@8 f_7 (real_2_U (+ (U_2_real (MapType1Select ZeroMask x@@8 f_7)) FullPerm)))) (= b_1_1@2  (and b_1_1@1 (state Ops_1Heap@0 Ops_1Mask@0)))) (and (= Ops_1Mask@1 Ops_1Mask@0) (= b_1_1@3 b_1_1@2))) (and (=> (= (ControlFlow 0 245) 244) anon162_Then_correct) (=> (= (ControlFlow 0 245) 227) anon162_Else_correct))))))
(let ((anon160_Then_correct  (=> b_1_1@0 (and (=> (= (ControlFlow 0 247) 245) anon161_Then_correct) (=> (= (ControlFlow 0 247) 246) anon161_Else_correct)))))
(let ((anon160_Else_correct  (=> (and (and (not b_1_1@0) (= b_1_1@10 b_1_1@0)) (and (= Ops_1Mask@4 ZeroMask) (= (ControlFlow 0 226) 225))) anon15_correct)))
(let ((anon0_correct  (=> (state Heap@@9 ZeroMask) (=> (and (U_2_bool (MapType0Select Heap@@9 x@@8 $allocated)) (not (= x@@8 null))) (=> (and (and (= Mask@0 (MapType1Store ZeroMask x@@8 f_7 (real_2_U (+ (U_2_real (MapType1Select ZeroMask x@@8 f_7)) FullPerm)))) (state Heap@@9 Mask@0)) (and (state Heap@@9 Mask@0) (U_2_bool (MapType0Select Heap@@9 y@@1 $allocated)))) (and (=> (= (ControlFlow 0 248) (- 0 249)) (HasDirectPerm Mask@0 x@@8 f_7)) (=> (HasDirectPerm Mask@0 x@@8 f_7) (=> (and (= a_2@0 (U_2_int (MapType0Select Heap@@9 x@@8 f_7))) (state Heap@@9 Mask@0)) (=> (and (and (and (not (= freshObj@0 null)) (not (U_2_bool (MapType0Select Heap@@9 freshObj@0 $allocated)))) (= Heap@0 (MapType0Store Heap@@9 freshObj@0 $allocated (bool_2_U true)))) (and (and (= Mask@1 (MapType1Store Mask@0 freshObj@0 f_7 (real_2_U (+ (U_2_real (MapType1Select Mask@0 freshObj@0 f_7)) FullPerm)))) (state Heap@0 Mask@1)) (and (= b_1_1@0  (and b_1_1 (state Ops_1Heap@0 ZeroMask))) (= b_2@0  (and b_2 (state UsedHeap@0 ZeroMask)))))) (and (=> (= (ControlFlow 0 248) 247) anon160_Then_correct) (=> (= (ControlFlow 0 248) 226) anon160_Else_correct)))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 250) 248) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 4))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
