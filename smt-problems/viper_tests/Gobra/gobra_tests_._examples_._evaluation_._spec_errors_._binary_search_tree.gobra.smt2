(get-info :version)
; (:version "4.12.1")
; Started: 2023-10-31 14:04:57
; Silicon.version: 1.1-SNAPSHOT (46944a65@dspil_symbenchmarking)
; Input file: /home/pcorrect/repos/benchmarking_general/silicon_tests/gobra_tests_._examples_._evaluation_._spec_errors_._binary_search_tree.gobra.vpr
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int> 0)
(declare-sort Tuple1<ShStruct3<Ref~_Ref~_Ref>> 0)
(declare-sort Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>> 0)
(declare-sort Equality<ShStruct1<Ref>> 0)
(declare-sort ShStruct3<Ref~_Ref~_Ref> 0)
(declare-sort Equality<ShStruct3<Ref~_Ref~_Ref>> 0)
(declare-sort Option<Int> 0)
(declare-sort ShStruct1<Ref> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Tuple1<ShStruct3<Ref~_Ref~_Ref>>To$Snap (Tuple1<ShStruct3<Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToTuple1<ShStruct3<Ref~_Ref~_Ref>> ($Snap) Tuple1<ShStruct3<Ref~_Ref~_Ref>>)
(assert (forall ((x Tuple1<ShStruct3<Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToTuple1<ShStruct3<Ref~_Ref~_Ref>>($SortWrappers.Tuple1<ShStruct3<Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Tuple1<ShStruct3<Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToTuple1<ShStruct3<Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Tuple1<ShStruct3<Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToTuple1<ShStruct3<Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToTuple1<ShStruct3<Ref~_Ref~_Ref>> x))
    :qid |$Snap.Tuple1<ShStruct3<Ref~_Ref~_Ref>>To$SnapToTuple1<ShStruct3<Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>To$Snap (Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToTuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>> ($Snap) Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>)
(assert (forall ((x Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToTuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>($SortWrappers.Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToTuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToTuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToTuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>> x))
    :qid |$Snap.Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>To$SnapToTuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct1<Ref>>To$Snap (Equality<ShStruct1<Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct1<Ref>> ($Snap) Equality<ShStruct1<Ref>>)
(assert (forall ((x Equality<ShStruct1<Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct1<Ref>>($SortWrappers.Equality<ShStruct1<Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct1<Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct1<Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct1<Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct1<Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct1<Ref>> x))
    :qid |$Snap.Equality<ShStruct1<Ref>>To$SnapToEquality<ShStruct1<Ref>>|
    )))
(declare-fun $SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap (ShStruct3<Ref~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap) ShStruct3<Ref~_Ref~_Ref>)
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref>($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct3<Ref~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> x))
    :qid |$Snap.ShStruct3<Ref~_Ref~_Ref>To$SnapToShStruct3<Ref~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct3<Ref~_Ref~_Ref>>To$Snap (Equality<ShStruct3<Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>> ($Snap) Equality<ShStruct3<Ref~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct3<Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>>($SortWrappers.Equality<ShStruct3<Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct3<Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct3<Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct3<Ref~_Ref~_Ref>>To$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Option<Int>To$Snap (Option<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToOption<Int> ($Snap) Option<Int>)
(assert (forall ((x Option<Int>)) (!
    (= x ($SortWrappers.$SnapToOption<Int>($SortWrappers.Option<Int>To$Snap x)))
    :pattern (($SortWrappers.Option<Int>To$Snap x))
    :qid |$Snap.$SnapToOption<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Option<Int>To$Snap($SortWrappers.$SnapToOption<Int> x)))
    :pattern (($SortWrappers.$SnapToOption<Int> x))
    :qid |$Snap.Option<Int>To$SnapToOption<Int>|
    )))
(declare-fun $SortWrappers.ShStruct1<Ref>To$Snap (ShStruct1<Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct1<Ref> ($Snap) ShStruct1<Ref>)
(assert (forall ((x ShStruct1<Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct1<Ref>($SortWrappers.ShStruct1<Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct1<Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct1<Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct1<Ref>To$Snap($SortWrappers.$SnapToShStruct1<Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct1<Ref> x))
    :qid |$Snap.ShStruct1<Ref>To$SnapToShStruct1<Ref>|
    )))
; ////////// Symbols
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun ShStructget0of1<Ref> (ShStruct1<Ref>) $Ref)
(declare-fun ShStructrev0of1<ShStruct1<Ref>> ($Ref) ShStruct1<Ref>)
(declare-fun ShStructget0of3<Ref> (ShStruct3<Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget1of3<Ref> (ShStruct3<Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget2of3<Ref> (ShStruct3<Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of3<ShStruct3<Ref~_Ref~_Ref>> ($Ref) ShStruct3<Ref~_Ref~_Ref>)
(declare-fun ShStructrev1of3<ShStruct3<Ref~_Ref~_Ref>> ($Ref) ShStruct3<Ref~_Ref~_Ref>)
(declare-fun ShStructrev2of3<ShStruct3<Ref~_Ref~_Ref>> ($Ref) ShStruct3<Ref~_Ref~_Ref>)
(declare-fun get0of3<Int> (Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>) Int)
(declare-fun get1of3<ShStruct3<Ref~_Ref~_Ref>> (Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>) ShStruct3<Ref~_Ref~_Ref>)
(declare-fun get2of3<ShStruct3<Ref~_Ref~_Ref>> (Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>) ShStruct3<Ref~_Ref~_Ref>)
(declare-fun tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> (Int ShStruct3<Ref~_Ref~_Ref> ShStruct3<Ref~_Ref~_Ref>) Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>)
(declare-fun eq<Bool> (ShStruct1<Ref> ShStruct1<Ref>) Bool)
(declare-fun get0of1<ShStruct3<Ref~_Ref~_Ref>> (Tuple1<ShStruct3<Ref~_Ref~_Ref>>) ShStruct3<Ref~_Ref~_Ref>)
(declare-fun tuple1<Tuple1<ShStruct3<Ref~_Ref~_Ref>>> (ShStruct3<Ref~_Ref~_Ref>) Tuple1<ShStruct3<Ref~_Ref~_Ref>>)
(declare-fun optGet<Int> (Option<Int>) Int)
(declare-fun optIsNone<Bool> (Option<Int>) Bool)
(declare-const optNone<Option<Int>> Option<Int>)
(declare-fun optSome<Option<Int>> (Int) Option<Int>)
(declare-fun eq<Bool> (ShStruct3<Ref~_Ref~_Ref> ShStruct3<Ref~_Ref~_Ref>) Bool)
; Declaring symbols related to program functions (from program analysis)
(declare-fun shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ ($Snap) ShStruct3<Ref~_Ref~_Ref>)
(declare-fun shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%limited ($Snap) ShStruct3<Ref~_Ref~_Ref>)
(declare-const shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%stateless Bool)
(declare-fun shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition ($Snap) Bool)
(declare-fun sorted_4b5075e4_PMnode ($Snap ShStruct3<Ref~_Ref~_Ref> Option<Int> Option<Int>) Bool)
(declare-fun sorted_4b5075e4_PMnode%limited ($Snap ShStruct3<Ref~_Ref~_Ref> Option<Int> Option<Int>) Bool)
(declare-fun sorted_4b5075e4_PMnode%stateless (ShStruct3<Ref~_Ref~_Ref> Option<Int> Option<Int>) Bool)
(declare-fun sorted_4b5075e4_PMnode%precondition ($Snap ShStruct3<Ref~_Ref~_Ref> Option<Int> Option<Int>) Bool)
(declare-fun sortedValues_4b5075e4_PMnode ($Snap ShStruct3<Ref~_Ref~_Ref> Option<Int> Option<Int>) Seq<Int>)
(declare-fun sortedValues_4b5075e4_PMnode%limited ($Snap ShStruct3<Ref~_Ref~_Ref> Option<Int> Option<Int>) Seq<Int>)
(declare-fun sortedValues_4b5075e4_PMnode%stateless (ShStruct3<Ref~_Ref~_Ref> Option<Int> Option<Int>) Bool)
(declare-fun sortedValues_4b5075e4_PMnode%precondition ($Snap ShStruct3<Ref~_Ref~_Ref> Option<Int> Option<Int>) Bool)
(declare-fun shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ ($Snap) ShStruct1<Ref>)
(declare-fun shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%limited ($Snap) ShStruct1<Ref>)
(declare-const shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%stateless Bool)
(declare-fun shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition ($Snap) Bool)
(declare-fun IsEmpty_4b5075e4_PMTree ($Snap ShStruct1<Ref>) Bool)
(declare-fun IsEmpty_4b5075e4_PMTree%limited ($Snap ShStruct1<Ref>) Bool)
(declare-fun IsEmpty_4b5075e4_PMTree%stateless (ShStruct1<Ref>) Bool)
(declare-fun IsEmpty_4b5075e4_PMTree%precondition ($Snap ShStruct1<Ref>) Bool)
(declare-fun sortedValues_4b5075e4_PMTree ($Snap ShStruct1<Ref>) Seq<Int>)
(declare-fun sortedValues_4b5075e4_PMTree%limited ($Snap ShStruct1<Ref>) Seq<Int>)
(declare-fun sortedValues_4b5075e4_PMTree%stateless (ShStruct1<Ref>) Bool)
(declare-fun sortedValues_4b5075e4_PMTree%precondition ($Snap ShStruct1<Ref>) Bool)
(declare-fun pureContains_4b5075e4_PMTree ($Snap ShStruct1<Ref> Int) Bool)
(declare-fun pureContains_4b5075e4_PMTree%limited ($Snap ShStruct1<Ref> Int) Bool)
(declare-fun pureContains_4b5075e4_PMTree%stateless (ShStruct1<Ref> Int) Bool)
(declare-fun pureContains_4b5075e4_PMTree%precondition ($Snap ShStruct1<Ref> Int) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun tree_4b5075e4_PMTree%trigger ($Snap ShStruct1<Ref>) Bool)
(declare-fun tree_4b5075e4_PMnode%trigger ($Snap ShStruct3<Ref~_Ref~_Ref>) Bool)
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=>
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (=>
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (=> (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (=>
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=> (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (=> (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=>
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=>
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (=>
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (=>
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (=>
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (=>
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (=>
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (=>
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (=>
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((x ShStruct1<Ref>)) (!
  (= (ShStructrev0of1<ShStruct1<Ref>> (ShStructget0of1<Ref> x)) x)
  :pattern ((ShStructget0of1<Ref> x))
  )))
(assert (forall ((x ShStruct1<Ref>) (y ShStruct1<Ref>)) (!
  (= (eq<Bool> x y) (= (ShStructget0of1<Ref> x) (ShStructget0of1<Ref> y)))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (ShStructrev0of3<ShStruct3<Ref~_Ref~_Ref>> (ShStructget0of3<Ref> x)) x)
  :pattern ((ShStructget0of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (ShStructrev1of3<ShStruct3<Ref~_Ref~_Ref>> (ShStructget1of3<Ref> x)) x)
  :pattern ((ShStructget1of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (ShStructrev2of3<ShStruct3<Ref~_Ref~_Ref>> (ShStructget2of3<Ref> x)) x)
  :pattern ((ShStructget2of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>) (y ShStruct3<Ref~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (= (ShStructget0of3<Ref> x) (ShStructget0of3<Ref> y))
      (and
        (= (ShStructget1of3<Ref> x) (ShStructget1of3<Ref> y))
        (= (ShStructget2of3<Ref> x) (ShStructget2of3<Ref> y)))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((t0 Int) (t1 ShStruct3<Ref~_Ref~_Ref>) (t2 ShStruct3<Ref~_Ref~_Ref>)) (!
  (and
    (=
      (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> t0 t1 t2))
      t0)
    (and
      (=
        (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> t0 t1 t2))
        t1)
      (=
        (get2of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> t0 t1 t2))
        t2)))
  :pattern ((tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> t0 t1 t2))
  :qid |prog.getter_over_tuple3|)))
(assert (forall ((p Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>)) (!
  (=
    (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> (get0of3<Int> p) (get1of3<ShStruct3<Ref~_Ref~_Ref>> p) (get2of3<ShStruct3<Ref~_Ref~_Ref>> p))
    p)
  :pattern ((get0of3<Int> p))
  :pattern ((get1of3<ShStruct3<Ref~_Ref~_Ref>> p))
  :pattern ((get2of3<ShStruct3<Ref~_Ref~_Ref>> p))
  :qid |prog.tuple3_over_getter|)))
(assert (forall ((l ShStruct1<Ref>) (r ShStruct1<Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((t0 ShStruct3<Ref~_Ref~_Ref>)) (!
  (=
    (get0of1<ShStruct3<Ref~_Ref~_Ref>> (tuple1<Tuple1<ShStruct3<Ref~_Ref~_Ref>>> t0))
    t0)
  :pattern ((tuple1<Tuple1<ShStruct3<Ref~_Ref~_Ref>>> t0))
  :qid |prog.getter_over_tuple1|)))
(assert (forall ((p Tuple1<ShStruct3<Ref~_Ref~_Ref>>)) (!
  (=
    (tuple1<Tuple1<ShStruct3<Ref~_Ref~_Ref>>> (get0of1<ShStruct3<Ref~_Ref~_Ref>> p))
    p)
  :pattern ((get0of1<ShStruct3<Ref~_Ref~_Ref>> p))
  :qid |prog.tuple1_over_getter|)))
(assert (forall ((e Int)) (!
  (and
    (= (optGet<Int> (optSome<Option<Int>> e)) e)
    (not (optIsNone<Bool> (optSome<Option<Int>> e))))
  :pattern ((optSome<Option<Int>> e))
  )))
(assert (forall ((o Option<Int>)) (!
  (=> (not (optIsNone<Bool> o)) (= o (optSome<Option<Int>> (optGet<Int> o))))
  :pattern ((optGet<Int> o))
  )))
(assert (forall ((o Option<Int>)) (!
  (or
    (= o (as optNone<Option<Int>>  Option<Int>))
    (exists ((e Int)) (!
      (= o (optSome<Option<Int>> e))
      :pattern ((optSome<Option<Int>> e))
      )))
  :pattern ((optIsNone<Bool> o))
  )))
(assert (optIsNone<Bool> (as optNone<Option<Int>>  Option<Int>)))
(assert (forall ((l ShStruct3<Ref~_Ref~_Ref>) (r ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun $k@18@00 () $Perm)
(declare-fun joined_unfolding@25@00 ($Snap ShStruct3<Ref~_Ref~_Ref> Option<Int> Option<Int>) Bool)
(declare-fun $k@19@00 () $Perm)
(declare-fun $k@20@00 () $Perm)
(declare-fun $k@21@00 () $Perm)
(declare-fun $k@22@00 () $Perm)
(declare-fun $k@23@00 () $Perm)
(declare-fun $k@24@00 () $Perm)
(declare-fun $k@26@00 () $Perm)
(declare-fun $k@27@00 () $Perm)
(declare-fun $k@29@00 () $Perm)
(declare-fun joined_unfolding@42@00 ($Snap ShStruct3<Ref~_Ref~_Ref> Option<Int> Option<Int>) Seq<Int>)
(declare-fun $k@32@00 () $Perm)
(declare-fun $k@33@00 () $Perm)
(declare-fun $k@34@00 () $Perm)
(declare-fun $k@35@00 () $Perm)
(declare-fun $k@36@00 () $Perm)
(declare-fun $k@37@00 () $Perm)
(declare-fun $k@38@00 () $Perm)
(declare-fun $k@39@00 () $Perm)
(declare-fun $k@40@00 () $Perm)
(declare-fun $k@41@00 () $Perm)
(declare-fun $k@43@00 () $Perm)
(declare-fun joined_unfolding@52@00 ($Snap ShStruct1<Ref>) Bool)
(declare-fun $k@47@00 () $Perm)
(declare-fun $k@49@00 () $Perm)
(declare-fun $k@50@00 () $Perm)
(declare-fun $k@51@00 () $Perm)
(declare-fun joined_unfolding@56@00 ($Snap ShStruct1<Ref>) Bool)
(declare-fun joined_unfolding@60@00 ($Snap ShStruct1<Ref>) Bool)
(declare-fun $k@53@00 () $Perm)
(declare-fun $k@54@00 () $Perm)
(declare-fun $k@55@00 () $Perm)
(declare-fun $k@57@00 () $Perm)
(declare-fun $k@58@00 () $Perm)
(declare-fun $k@59@00 () $Perm)
(declare-fun $k@61@00 () $Perm)
(declare-fun joined_unfolding@69@00 ($Snap ShStruct1<Ref>) Seq<Int>)
(declare-fun $k@64@00 () $Perm)
(declare-fun $k@65@00 () $Perm)
(declare-fun $k@66@00 () $Perm)
(declare-fun $k@67@00 () $Perm)
(declare-fun $k@68@00 () $Perm)
(declare-fun $k@71@00 () $Perm)
(declare-fun joined_unfolding@78@00 ($Snap ShStruct1<Ref> Int) Bool)
(declare-fun $k@72@00 () $Perm)
(declare-fun $k@73@00 () $Perm)
(declare-fun $k@74@00 () $Perm)
(declare-fun $k@75@00 () $Perm)
(declare-fun $k@76@00 () $Perm)
(assert (forall ((s@$ $Snap)) (!
  (=
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%limited s@$)
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ s@$))
  :pattern ((shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ s@$))
  :qid |quant-u-0|)))
(assert (forall ((s@$ $Snap)) (!
  (as shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%stateless  Bool)
  :pattern ((shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-1|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@0@00 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%limited s@$))) (=>
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition s@$)
    (and
      (= (ShStructget0of3<Ref> result@0@00) $Ref.null)
      (and
        (= (ShStructget1of3<Ref> result@0@00) $Ref.null)
        (= (ShStructget2of3<Ref> result@0@00) $Ref.null)))))
  :pattern ((shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-14|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@0@00 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%limited s@$))) true)
  :pattern ((shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-15|)))
(assert (forall ((s@$ $Snap) (n_V0@1@00 ShStruct3<Ref~_Ref~_Ref>) (lowerBound_V0@2@00 Option<Int>) (upperBound_V0@3@00 Option<Int>)) (!
  (=
    (sorted_4b5075e4_PMnode%limited s@$ n_V0@1@00 lowerBound_V0@2@00 upperBound_V0@3@00)
    (sorted_4b5075e4_PMnode s@$ n_V0@1@00 lowerBound_V0@2@00 upperBound_V0@3@00))
  :pattern ((sorted_4b5075e4_PMnode s@$ n_V0@1@00 lowerBound_V0@2@00 upperBound_V0@3@00))
  :qid |quant-u-2|)))
(assert (forall ((s@$ $Snap) (n_V0@1@00 ShStruct3<Ref~_Ref~_Ref>) (lowerBound_V0@2@00 Option<Int>) (upperBound_V0@3@00 Option<Int>)) (!
  (sorted_4b5075e4_PMnode%stateless n_V0@1@00 lowerBound_V0@2@00 upperBound_V0@3@00)
  :pattern ((sorted_4b5075e4_PMnode%limited s@$ n_V0@1@00 lowerBound_V0@2@00 upperBound_V0@3@00))
  :qid |quant-u-3|)))
(assert (forall ((s@$ $Snap) (n_V0@1@00 ShStruct3<Ref~_Ref~_Ref>) (lowerBound_V0@2@00 Option<Int>) (upperBound_V0@3@00 Option<Int>)) (!
  (and
    ($Perm.isReadVar $k@18@00)
    ($Perm.isReadVar $k@19@00)
    ($Perm.isReadVar $k@20@00)
    ($Perm.isReadVar $k@21@00)
    ($Perm.isReadVar $k@22@00)
    ($Perm.isReadVar $k@23@00)
    ($Perm.isReadVar $k@24@00)
    (=>
      (sorted_4b5075e4_PMnode%precondition s@$ n_V0@1@00 lowerBound_V0@2@00 upperBound_V0@3@00)
      (=
        (sorted_4b5075e4_PMnode s@$ n_V0@1@00 lowerBound_V0@2@00 upperBound_V0@3@00)
        (and
          (ite
            (not (= lowerBound_V0@2@00 (as optNone<Option<Int>>  Option<Int>)))
            (<
              (optGet<Int> lowerBound_V0@2@00)
              ($SortWrappers.$SnapToInt ($Snap.first s@$)))
            true)
          (and
            (ite
              (not (= upperBound_V0@3@00 (as optNone<Option<Int>>  Option<Int>)))
              (<
                ($SortWrappers.$SnapToInt ($Snap.first s@$))
                (optGet<Int> upperBound_V0@3@00))
              true)
            (and
              (ite
                (not
                  (=
                    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second s@$)))
                    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
                (sorted_4b5075e4_PMnode%limited ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second s@$))) lowerBound_V0@2@00 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first s@$))))
                true)
              (ite
                (not
                  (=
                    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))
                    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
                (sorted_4b5075e4_PMnode%limited ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first s@$))) upperBound_V0@3@00)
                true)))))))
  :pattern ((sorted_4b5075e4_PMnode s@$ n_V0@1@00 lowerBound_V0@2@00 upperBound_V0@3@00))
  :pattern ((sorted_4b5075e4_PMnode%stateless n_V0@1@00 lowerBound_V0@2@00 upperBound_V0@3@00) (tree_4b5075e4_PMnode%trigger s@$ n_V0@1@00))
  :qid |quant-u-16|)))
(assert (forall ((s@$ $Snap) (n_V0@1@00 ShStruct3<Ref~_Ref~_Ref>) (lowerBound_V0@2@00 Option<Int>) (upperBound_V0@3@00 Option<Int>)) (!
  (=>
    (and
      (sorted_4b5075e4_PMnode%precondition s@$ n_V0@1@00 lowerBound_V0@2@00 upperBound_V0@3@00)
      (and
        (ite
          (not (= lowerBound_V0@2@00 (as optNone<Option<Int>>  Option<Int>)))
          (<
            (optGet<Int> lowerBound_V0@2@00)
            ($SortWrappers.$SnapToInt ($Snap.first s@$)))
          true)
        (ite
          (not (= upperBound_V0@3@00 (as optNone<Option<Int>>  Option<Int>)))
          (<
            ($SortWrappers.$SnapToInt ($Snap.first s@$))
            (optGet<Int> upperBound_V0@3@00))
          true)))
    (and
      (and
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit)
        (ite
          (not
            (=
              ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second s@$)))
              (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
          (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second s@$))) lowerBound_V0@2@00 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first s@$))))
          true))
      (=>
        (ite
          (not
            (=
              ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second s@$)))
              (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
          (sorted_4b5075e4_PMnode%limited ($Snap.first ($Snap.second ($Snap.second ($Snap.second s@$)))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second s@$))) lowerBound_V0@2@00 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first s@$))))
          true)
        (and
          (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit)
          (ite
            (not
              (=
                ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second s@$))))
                (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
            (sorted_4b5075e4_PMnode%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second s@$)))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first s@$))) upperBound_V0@3@00)
            true)))))
  :pattern ((sorted_4b5075e4_PMnode s@$ n_V0@1@00 lowerBound_V0@2@00 upperBound_V0@3@00))
  :qid |quant-u-17|)))
(assert (forall ((s@$ $Snap) (n_V0@5@00 ShStruct3<Ref~_Ref~_Ref>) (lowerBound_V0@6@00 Option<Int>) (upperBound_V0@7@00 Option<Int>)) (!
  (Seq_equal
    (sortedValues_4b5075e4_PMnode%limited s@$ n_V0@5@00 lowerBound_V0@6@00 upperBound_V0@7@00)
    (sortedValues_4b5075e4_PMnode s@$ n_V0@5@00 lowerBound_V0@6@00 upperBound_V0@7@00))
  :pattern ((sortedValues_4b5075e4_PMnode s@$ n_V0@5@00 lowerBound_V0@6@00 upperBound_V0@7@00))
  :qid |quant-u-4|)))
(assert (forall ((s@$ $Snap) (n_V0@5@00 ShStruct3<Ref~_Ref~_Ref>) (lowerBound_V0@6@00 Option<Int>) (upperBound_V0@7@00 Option<Int>)) (!
  (sortedValues_4b5075e4_PMnode%stateless n_V0@5@00 lowerBound_V0@6@00 upperBound_V0@7@00)
  :pattern ((sortedValues_4b5075e4_PMnode%limited s@$ n_V0@5@00 lowerBound_V0@6@00 upperBound_V0@7@00))
  :qid |quant-u-5|)))
(assert (forall ((s@$ $Snap) (n_V0@5@00 ShStruct3<Ref~_Ref~_Ref>) (lowerBound_V0@6@00 Option<Int>) (upperBound_V0@7@00 Option<Int>)) (!
  (let ((result@8@00 (sortedValues_4b5075e4_PMnode%limited s@$ n_V0@5@00 lowerBound_V0@6@00 upperBound_V0@7@00))) (and
    ($Perm.isReadVar $k@26@00)
    ($Perm.isReadVar $k@27@00)
    ($Perm.isReadVar $k@29@00)
    (=>
      (sortedValues_4b5075e4_PMnode%precondition s@$ n_V0@5@00 lowerBound_V0@6@00 upperBound_V0@7@00)
      (and
        (sorted_4b5075e4_PMnode ($Snap.first s@$) n_V0@5@00 lowerBound_V0@6@00 upperBound_V0@7@00)
        (forall ((i_V1 Int)) (!
          (=>
            (and (<= 0 i_V1) (< i_V1 (Seq_length result@8@00)))
            (and
              (=>
                (not
                  (= lowerBound_V0@6@00 (as optNone<Option<Int>>  Option<Int>)))
                (> (Seq_index result@8@00 i_V1) (optGet<Int> lowerBound_V0@6@00)))
              (=>
                (not
                  (= upperBound_V0@7@00 (as optNone<Option<Int>>  Option<Int>)))
                (< (Seq_index result@8@00 i_V1) (optGet<Int> upperBound_V0@7@00)))))
          :pattern ((Seq_index result@8@00 i_V1))
          ))
        (forall ((i_V1 Int)) (!
          (=>
            (and (<= 0 i_V1) (< (+ i_V1 1) (Seq_length result@8@00)))
            (< (Seq_index result@8@00 i_V1) (Seq_index result@8@00 (+ i_V1 1))))
          :pattern ((Seq_index result@8@00 i_V1))
          ))))))
  :pattern ((sortedValues_4b5075e4_PMnode%limited s@$ n_V0@5@00 lowerBound_V0@6@00 upperBound_V0@7@00))
  :qid |quant-u-18|)))
(assert (forall ((s@$ $Snap) (n_V0@5@00 ShStruct3<Ref~_Ref~_Ref>) (lowerBound_V0@6@00 Option<Int>) (upperBound_V0@7@00 Option<Int>)) (!
  (let ((result@8@00 (sortedValues_4b5075e4_PMnode%limited s@$ n_V0@5@00 lowerBound_V0@6@00 upperBound_V0@7@00))) (=>
    (sortedValues_4b5075e4_PMnode%precondition s@$ n_V0@5@00 lowerBound_V0@6@00 upperBound_V0@7@00)
    (sorted_4b5075e4_PMnode%precondition ($Snap.first s@$) n_V0@5@00 lowerBound_V0@6@00 upperBound_V0@7@00)))
  :pattern ((sortedValues_4b5075e4_PMnode%limited s@$ n_V0@5@00 lowerBound_V0@6@00 upperBound_V0@7@00))
  :qid |quant-u-19|)))
(assert (forall ((s@$ $Snap) (n_V0@5@00 ShStruct3<Ref~_Ref~_Ref>) (lowerBound_V0@6@00 Option<Int>) (upperBound_V0@7@00 Option<Int>)) (!
  (let ((result@8@00 (sortedValues_4b5075e4_PMnode%limited s@$ n_V0@5@00 lowerBound_V0@6@00 upperBound_V0@7@00))) true)
  :pattern ((sortedValues_4b5075e4_PMnode%limited s@$ n_V0@5@00 lowerBound_V0@6@00 upperBound_V0@7@00))
  :qid |quant-u-20|)))
(assert (forall ((s@$ $Snap) (n_V0@5@00 ShStruct3<Ref~_Ref~_Ref>) (lowerBound_V0@6@00 Option<Int>) (upperBound_V0@7@00 Option<Int>)) (!
  (let ((result@8@00 (sortedValues_4b5075e4_PMnode%limited s@$ n_V0@5@00 lowerBound_V0@6@00 upperBound_V0@7@00))) true)
  :pattern ((sortedValues_4b5075e4_PMnode%limited s@$ n_V0@5@00 lowerBound_V0@6@00 upperBound_V0@7@00))
  :qid |quant-u-21|)))
(assert (forall ((s@$ $Snap) (n_V0@5@00 ShStruct3<Ref~_Ref~_Ref>) (lowerBound_V0@6@00 Option<Int>) (upperBound_V0@7@00 Option<Int>)) (!
  (and
    ($Perm.isReadVar $k@26@00)
    ($Perm.isReadVar $k@27@00)
    ($Perm.isReadVar $k@32@00)
    ($Perm.isReadVar $k@33@00)
    ($Perm.isReadVar $k@34@00)
    ($Perm.isReadVar $k@35@00)
    ($Perm.isReadVar $k@36@00)
    ($Perm.isReadVar $k@37@00)
    ($Perm.isReadVar $k@38@00)
    ($Perm.isReadVar $k@39@00)
    ($Perm.isReadVar $k@40@00)
    ($Perm.isReadVar $k@41@00)
    ($Perm.isReadVar $k@43@00)
    (=>
      (sortedValues_4b5075e4_PMnode%precondition s@$ n_V0@5@00 lowerBound_V0@6@00 upperBound_V0@7@00)
      (Seq_equal
        (sortedValues_4b5075e4_PMnode s@$ n_V0@5@00 lowerBound_V0@6@00 upperBound_V0@7@00)
        (Seq_append
          (Seq_append
            (ite
              (=
                ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first s@$))))
                (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))
              (as Seq_empty  Seq<Int>)
              (sortedValues_4b5075e4_PMnode%limited ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first s@$)))))
                $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first s@$)))) lowerBound_V0@6@00 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$))))))
            (Seq_singleton ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$)))))
          (ite
            (=
              ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first s@$)))))
              (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))
            (as Seq_empty  Seq<Int>)
            (sortedValues_4b5075e4_PMnode%limited ($Snap.combine
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first s@$)))))
              $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first s@$))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$)))) upperBound_V0@7@00))))))
  :pattern ((sortedValues_4b5075e4_PMnode s@$ n_V0@5@00 lowerBound_V0@6@00 upperBound_V0@7@00))
  :pattern ((sortedValues_4b5075e4_PMnode%stateless n_V0@5@00 lowerBound_V0@6@00 upperBound_V0@7@00) (tree_4b5075e4_PMnode%trigger ($Snap.first s@$) n_V0@5@00))
  :qid |quant-u-22|)))
(assert (forall ((s@$ $Snap) (n_V0@5@00 ShStruct3<Ref~_Ref~_Ref>) (lowerBound_V0@6@00 Option<Int>) (upperBound_V0@7@00 Option<Int>)) (!
  (=>
    (sortedValues_4b5075e4_PMnode%precondition s@$ n_V0@5@00 lowerBound_V0@6@00 upperBound_V0@7@00)
    (and
      (and
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit)
        (ite
          (=
            ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first s@$))))
            (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))
          true
          (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first s@$)))))
            $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first s@$)))) lowerBound_V0@6@00 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$)))))))
      (and
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit)
        (ite
          (=
            ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first s@$)))))
            (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))
          true
          (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first s@$)))))
            $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first s@$))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first s@$)))) upperBound_V0@7@00)))))
  :pattern ((sortedValues_4b5075e4_PMnode s@$ n_V0@5@00 lowerBound_V0@6@00 upperBound_V0@7@00))
  :qid |quant-u-23|)))
(assert (forall ((s@$ $Snap)) (!
  (=
    (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%limited s@$)
    (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ s@$))
  :pattern ((shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ s@$))
  :qid |quant-u-6|)))
(assert (forall ((s@$ $Snap)) (!
  (as shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%stateless  Bool)
  :pattern ((shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-7|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@9@00 (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%limited s@$))) (=>
    (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition s@$)
    (= (ShStructget0of1<Ref> result@9@00) $Ref.null)))
  :pattern ((shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-24|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@9@00 (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%limited s@$))) true)
  :pattern ((shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-25|)))
(assert (forall ((s@$ $Snap) (t_V0@10@00 ShStruct1<Ref>)) (!
  (=
    (IsEmpty_4b5075e4_PMTree%limited s@$ t_V0@10@00)
    (IsEmpty_4b5075e4_PMTree s@$ t_V0@10@00))
  :pattern ((IsEmpty_4b5075e4_PMTree s@$ t_V0@10@00))
  :qid |quant-u-8|)))
(assert (forall ((s@$ $Snap) (t_V0@10@00 ShStruct1<Ref>)) (!
  (IsEmpty_4b5075e4_PMTree%stateless t_V0@10@00)
  :pattern ((IsEmpty_4b5075e4_PMTree%limited s@$ t_V0@10@00))
  :qid |quant-u-9|)))
(assert (forall ((s@$ $Snap) (t_V0@10@00 ShStruct1<Ref>)) (!
  (let ((result@11@00 (IsEmpty_4b5075e4_PMTree%limited s@$ t_V0@10@00))) (and
    ($Perm.isReadVar $k@47@00)
    ($Perm.isReadVar $k@49@00)
    ($Perm.isReadVar $k@50@00)
    ($Perm.isReadVar $k@51@00)
    (=>
      (IsEmpty_4b5075e4_PMTree%precondition s@$ t_V0@10@00)
      (=
        result@11@00
        (=
          ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first s@$))
          (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
  :pattern ((IsEmpty_4b5075e4_PMTree%limited s@$ t_V0@10@00))
  :qid |quant-u-26|)))
(assert (forall ((s@$ $Snap) (t_V0@10@00 ShStruct1<Ref>)) (!
  (let ((result@11@00 (IsEmpty_4b5075e4_PMTree%limited s@$ t_V0@10@00))) (=>
    (IsEmpty_4b5075e4_PMTree%precondition s@$ t_V0@10@00)
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit)))
  :pattern ((IsEmpty_4b5075e4_PMTree%limited s@$ t_V0@10@00))
  :qid |quant-u-27|)))
(assert (forall ((s@$ $Snap) (t_V0@10@00 ShStruct1<Ref>)) (!
  (and
    ($Perm.isReadVar $k@47@00)
    ($Perm.isReadVar $k@53@00)
    ($Perm.isReadVar $k@54@00)
    ($Perm.isReadVar $k@55@00)
    ($Perm.isReadVar $k@57@00)
    ($Perm.isReadVar $k@58@00)
    ($Perm.isReadVar $k@59@00)
    (=>
      (IsEmpty_4b5075e4_PMTree%precondition s@$ t_V0@10@00)
      (=
        (IsEmpty_4b5075e4_PMTree s@$ t_V0@10@00)
        (=
          ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first s@$))
          (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
  :pattern ((IsEmpty_4b5075e4_PMTree s@$ t_V0@10@00))
  :pattern ((IsEmpty_4b5075e4_PMTree%stateless t_V0@10@00) (tree_4b5075e4_PMTree%trigger s@$ t_V0@10@00))
  :qid |quant-u-28|)))
(assert (forall ((s@$ $Snap) (t_V0@10@00 ShStruct1<Ref>)) (!
  (=>
    (IsEmpty_4b5075e4_PMTree%precondition s@$ t_V0@10@00)
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
  :pattern ((IsEmpty_4b5075e4_PMTree s@$ t_V0@10@00))
  :qid |quant-u-29|)))
(assert (forall ((s@$ $Snap) (t_V0@12@00 ShStruct1<Ref>)) (!
  (Seq_equal
    (sortedValues_4b5075e4_PMTree%limited s@$ t_V0@12@00)
    (sortedValues_4b5075e4_PMTree s@$ t_V0@12@00))
  :pattern ((sortedValues_4b5075e4_PMTree s@$ t_V0@12@00))
  :qid |quant-u-10|)))
(assert (forall ((s@$ $Snap) (t_V0@12@00 ShStruct1<Ref>)) (!
  (sortedValues_4b5075e4_PMTree%stateless t_V0@12@00)
  :pattern ((sortedValues_4b5075e4_PMTree%limited s@$ t_V0@12@00))
  :qid |quant-u-11|)))
(assert (forall ((s@$ $Snap) (t_V0@12@00 ShStruct1<Ref>)) (!
  (let ((result@13@00 (sortedValues_4b5075e4_PMTree%limited s@$ t_V0@12@00))) (and
    ($Perm.isReadVar $k@61@00)
    (=>
      (sortedValues_4b5075e4_PMTree%precondition s@$ t_V0@12@00)
      (forall ((i_V1 Int)) (!
        (=>
          (and (<= 0 i_V1) (< (+ i_V1 1) (Seq_length result@13@00)))
          (< (Seq_index result@13@00 i_V1) (Seq_index result@13@00 (+ i_V1 1))))
        :pattern ((Seq_index result@13@00 i_V1))
        )))))
  :pattern ((sortedValues_4b5075e4_PMTree%limited s@$ t_V0@12@00))
  :qid |quant-u-30|)))
(assert (forall ((s@$ $Snap) (t_V0@12@00 ShStruct1<Ref>)) (!
  (let ((result@13@00 (sortedValues_4b5075e4_PMTree%limited s@$ t_V0@12@00))) true)
  :pattern ((sortedValues_4b5075e4_PMTree%limited s@$ t_V0@12@00))
  :qid |quant-u-31|)))
(assert (forall ((s@$ $Snap) (t_V0@12@00 ShStruct1<Ref>)) (!
  (and
    ($Perm.isReadVar $k@61@00)
    ($Perm.isReadVar $k@64@00)
    ($Perm.isReadVar $k@65@00)
    ($Perm.isReadVar $k@66@00)
    ($Perm.isReadVar $k@67@00)
    ($Perm.isReadVar $k@68@00)
    (=>
      (sortedValues_4b5075e4_PMTree%precondition s@$ t_V0@12@00)
      (Seq_equal
        (sortedValues_4b5075e4_PMTree s@$ t_V0@12@00)
        (ite
          (=
            ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first s@$))
            (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))
          (as Seq_empty  Seq<Int>)
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second s@$))
            $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first s@$)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))))))
  :pattern ((sortedValues_4b5075e4_PMTree s@$ t_V0@12@00))
  :pattern ((sortedValues_4b5075e4_PMTree%stateless t_V0@12@00) (tree_4b5075e4_PMTree%trigger s@$ t_V0@12@00))
  :qid |quant-u-32|)))
(assert (forall ((s@$ $Snap) (t_V0@12@00 ShStruct1<Ref>)) (!
  (=>
    (sortedValues_4b5075e4_PMTree%precondition s@$ t_V0@12@00)
    (and
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit)
      (ite
        (=
          ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first s@$))
          (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))
        true
        (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
          ($Snap.first ($Snap.second s@$))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first s@$)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>)))))
  :pattern ((sortedValues_4b5075e4_PMTree s@$ t_V0@12@00))
  :qid |quant-u-33|)))
(assert (forall ((s@$ $Snap) (t_V0@14@00 ShStruct1<Ref>) (value_V0@15@00 Int)) (!
  (=
    (pureContains_4b5075e4_PMTree%limited s@$ t_V0@14@00 value_V0@15@00)
    (pureContains_4b5075e4_PMTree s@$ t_V0@14@00 value_V0@15@00))
  :pattern ((pureContains_4b5075e4_PMTree s@$ t_V0@14@00 value_V0@15@00))
  :qid |quant-u-12|)))
(assert (forall ((s@$ $Snap) (t_V0@14@00 ShStruct1<Ref>) (value_V0@15@00 Int)) (!
  (pureContains_4b5075e4_PMTree%stateless t_V0@14@00 value_V0@15@00)
  :pattern ((pureContains_4b5075e4_PMTree%limited s@$ t_V0@14@00 value_V0@15@00))
  :qid |quant-u-13|)))
(assert (forall ((s@$ $Snap) (t_V0@14@00 ShStruct1<Ref>) (value_V0@15@00 Int)) (!
  (and
    ($Perm.isReadVar $k@71@00)
    ($Perm.isReadVar $k@72@00)
    ($Perm.isReadVar $k@73@00)
    ($Perm.isReadVar $k@74@00)
    ($Perm.isReadVar $k@75@00)
    ($Perm.isReadVar $k@76@00)
    (=>
      (pureContains_4b5075e4_PMTree%precondition s@$ t_V0@14@00 value_V0@15@00)
      (=
        (pureContains_4b5075e4_PMTree s@$ t_V0@14@00 value_V0@15@00)
        (and
          (not
            (=
              ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first s@$))
              (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
          (Seq_contains
            (sortedValues_4b5075e4_PMnode ($Snap.combine
              ($Snap.first ($Snap.second s@$))
              $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first s@$)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
            value_V0@15@00)))))
  :pattern ((pureContains_4b5075e4_PMTree s@$ t_V0@14@00 value_V0@15@00))
  :pattern ((pureContains_4b5075e4_PMTree%stateless t_V0@14@00 value_V0@15@00) (tree_4b5075e4_PMTree%trigger s@$ t_V0@14@00))
  :qid |quant-u-34|)))
(assert (forall ((s@$ $Snap) (t_V0@14@00 ShStruct1<Ref>) (value_V0@15@00 Int)) (!
  (=>
    (pureContains_4b5075e4_PMTree%precondition s@$ t_V0@14@00 value_V0@15@00)
    (and
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit)
      (=>
        (not
          (=
            ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first s@$))
            (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
        (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
          ($Snap.first ($Snap.second s@$))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first s@$)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>)))))
  :pattern ((pureContains_4b5075e4_PMTree s@$ t_V0@14@00 value_V0@15@00))
  :qid |quant-u-35|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- $IMPORTS_4b5075e4_4b5075e4 ----------
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; label returnLabel
(pop) ; 2
(pop) ; 1
; ---------- $INIT_4b5075e4_e0719220 ----------
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; label returnLabel
(pop) ; 2
(pop) ; 1
; ---------- Contains_4b5075e4_PMTree ----------
(declare-const t_V0@0@01 ShStruct1<Ref>)
(declare-const value_V0@1@01 Int)
(declare-const dividend_V0@2@01 Int)
(declare-const res_V0@3@01 Bool)
(declare-const t_V0@4@01 ShStruct1<Ref>)
(declare-const value_V0@5@01 Int)
(declare-const dividend_V0@6@01 Int)
(declare-const res_V0@7@01 Bool)
(push) ; 1
(declare-const $t@8@01 $Snap)
(assert (= $t@8@01 ($Snap.combine ($Snap.first $t@8@01) ($Snap.second $t@8@01))))
(assert (= ($Snap.first $t@8@01) $Snap.unit))
; [eval] dividend_V0 > 0
(assert (> dividend_V0@6@01 0))
(push) ; 2
(assert (not (not (= dividend_V0@6@01 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@6@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01))))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (<= $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@9@01 $Snap)
(assert (= $t@9@01 ($Snap.combine ($Snap.first $t@9@01) ($Snap.second $t@9@01))))
(push) ; 3
(assert (not (not (= dividend_V0@6@01 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@6@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (= ($Snap.second $t@9@01) $Snap.unit))
; [eval] res_V0 == pureContains_4b5075e4_PMTree(t_V0, value_V0)
; [eval] pureContains_4b5075e4_PMTree(t_V0, value_V0)
(push) ; 3
(declare-const $k@10@01 $Perm)
(assert ($Perm.isReadVar $k@10@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@6@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (< $k@10@01 (/ (to_real 1) (to_real dividend_V0@6@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@6@01)) $k@10@01)))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@10@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (pureContains_4b5075e4_PMTree%precondition ($Snap.first $t@9@01) t_V0@4@01 value_V0@5@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@10@01))
(assert (and
  (< $k@10@01 (/ (to_real 1) (to_real dividend_V0@6@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@6@01)) $k@10@01))
  (pureContains_4b5075e4_PMTree%precondition ($Snap.first $t@9@01) t_V0@4@01 value_V0@5@01)))
(assert (=
  res_V0@7@01
  (pureContains_4b5075e4_PMTree ($Snap.first $t@9@01) t_V0@4@01 value_V0@5@01)))
(pop) ; 2
(set-option :timeout 0)
(push) ; 2
; [exec]
; var res_V0_CN3: Bool
(declare-const res_V0_CN3@11@01 Bool)
; [exec]
; var dividend_V0_CN2: Int
(declare-const dividend_V0_CN2@12@01 Int)
; [exec]
; var value_V0_CN1: Int
(declare-const value_V0_CN1@13@01 Int)
; [exec]
; var t_V0_CN0: ShStruct1[Ref]
(declare-const t_V0_CN0@14@01 ShStruct1<Ref>)
; [exec]
; inhale res_V0 == false
(declare-const $t@15@01 $Snap)
(assert (= $t@15@01 $Snap.unit))
; [eval] res_V0 == false
(assert (= res_V0@7@01 false))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale t_V0_CN0 ==
;   shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(declare-const $t@16@01 $Snap)
(assert (= $t@16@01 $Snap.unit))
; [eval] t_V0_CN0 == shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(assert (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (=
  t_V0_CN0@14@01
  (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale value_V0_CN1 == 0
(declare-const $t@17@01 $Snap)
(assert (= $t@17@01 $Snap.unit))
; [eval] value_V0_CN1 == 0
(assert (= value_V0_CN1@13@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale dividend_V0_CN2 == 0
(declare-const $t@18@01 $Snap)
(assert (= $t@18@01 $Snap.unit))
; [eval] dividend_V0_CN2 == 0
(assert (= dividend_V0_CN2@12@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale res_V0_CN3 == false
(declare-const $t@19@01 $Snap)
(assert (= $t@19@01 $Snap.unit))
; [eval] res_V0_CN3 == false
(assert (= res_V0_CN3@11@01 false))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; t_V0_CN0 := t_V0
; [exec]
; value_V0_CN1 := value_V0
; [exec]
; dividend_V0_CN2 := dividend_V0
; [exec]
; unfold acc(tree_4b5075e4_PMTree(t_V0_CN0), 1 / dividend_V0_CN2)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= dividend_V0@6@01 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second $t@8@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@8@01))
    ($Snap.second ($Snap.second $t@8@01)))))
; [eval] (ShStructget0of1(t_V0): Ref)
(assert (<= (/ (to_real 1) (to_real dividend_V0@6@01)) $Perm.Write))
(assert (=>
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01)))
  (not (= (ShStructget0of1<Ref> t_V0@4@01) $Ref.null))))
; [eval] !((ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget0of1(t_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(assert (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second $t@8@01)))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second $t@8@01)))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 0 | First:(Second:($t@8@01)) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 0 | First:(Second:($t@8@01)) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 0 | First:(Second:($t@8@01)) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second $t@8@01)))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(assert (=
  ($Snap.second ($Snap.second $t@8@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@8@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@8@01))))))
; [eval] (ShStructget0of1(t_V0): Ref)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@8@01))) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode((ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$, (optNone(): Option[Int]), (optNone(): Option[Int]))
; [eval] (ShStructget0of1(t_V0): Ref)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(set-option :timeout 0)
(push) ; 4
(declare-const $k@20@01 $Perm)
(assert ($Perm.isReadVar $k@20@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@6@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<
  (* $k@20@01 (/ (to_real 1) (to_real dividend_V0@6@01)))
  (/ (to_real 1) (to_real dividend_V0@6@01))))
(assert (<=
  $Perm.No
  (-
    (/ (to_real 1) (to_real dividend_V0@6@01))
    (* $k@20@01 (/ (to_real 1) (to_real dividend_V0@6@01))))))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@20@01 (/ (to_real 1) (to_real dividend_V0@6@01))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second $t@8@01))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second $t@8@01))) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@20@01))
(assert (and
  (<
    (* $k@20@01 (/ (to_real 1) (to_real dividend_V0@6@01)))
    (/ (to_real 1) (to_real dividend_V0@6@01)))
  (<=
    $Perm.No
    (-
      (/ (to_real 1) (to_real dividend_V0@6@01))
      (* $k@20@01 (/ (to_real 1) (to_real dividend_V0@6@01)))))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second $t@8@01))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second $t@8@01))) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))))
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second $t@8@01))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second $t@8@01))) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMTree%trigger ($Snap.second $t@8@01) t_V0@4@01))
; [eval] (ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget0of1(t_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
; [then-branch: 1 | First:(Second:($t@8@01)) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 1 | First:(Second:($t@8@01)) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 4
; [else-branch: 1 | First:(Second:($t@8@01)) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 4
; [eval] !((ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget0of1(t_V0_CN0): Ref)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second $t@8@01)))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2 | First:(Second:($t@8@01)) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 2 | First:(Second:($t@8@01)) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2 | First:(Second:($t@8@01)) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; var N5: Bool
(declare-const N5@21@01 Bool)
; [exec]
; N5 := contains_4b5075e4_PMnode((ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   value_V0_CN1, dividend_V0_CN2, (optNone(): Option[Int]), (optNone(): Option[Int]))
; [eval] (ShStructget0of1(t_V0_CN0): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
; [eval] dividend_V0 > 0
(set-option :timeout 0)
(push) ; 5
(assert (not (not (= dividend_V0@6@01 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@6@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 5
(declare-const $k@22@01 $Perm)
(assert ($Perm.isReadVar $k@22@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@6@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (< $k@22@01 (/ (to_real 1) (to_real dividend_V0@6@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@6@01)) $k@22@01)))
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@22@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@22@01))
(assert (and
  (< $k@22@01 (/ (to_real 1) (to_real dividend_V0@6@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@6@01)) $k@22@01))))
(declare-const res_V0@23@01 Bool)
(declare-const $t@24@01 $Snap)
(assert (= $t@24@01 ($Snap.combine ($Snap.first $t@24@01) ($Snap.second $t@24@01))))
(set-option :timeout 0)
(push) ; 5
(assert (not (not (= dividend_V0@6@01 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@6@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second $t@24@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@24@01))
    ($Snap.second ($Snap.second $t@24@01)))))
(assert (= ($Snap.first ($Snap.second $t@24@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 5
(declare-const $k@25@01 $Perm)
(assert ($Perm.isReadVar $k@25@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@6@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (< $k@25@01 (/ (to_real 1) (to_real dividend_V0@6@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@6@01)) $k@25@01)))
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@25@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@24@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second $t@8@01))) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@25@01))
(assert (and
  (< $k@25@01 (/ (to_real 1) (to_real dividend_V0@6@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@6@01)) $k@25@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@24@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second $t@8@01))) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@24@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second $t@8@01))) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>)))
(assert (= ($Snap.second ($Snap.second $t@24@01)) $Snap.unit))
; [eval] res_V0 == (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 5
(declare-const $k@26@01 $Perm)
(assert ($Perm.isReadVar $k@26@01))
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@6@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (< $k@26@01 (/ (to_real 1) (to_real dividend_V0@6@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@6@01)) $k@26@01)))
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@26@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@27@01 $Perm)
(assert ($Perm.isReadVar $k@27@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@6@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (< $k@27@01 (/ (to_real 1) (to_real dividend_V0@6@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@6@01)) $k@27@01)))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@27@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@27@01))
(assert (and
  (< $k@27@01 (/ (to_real 1) (to_real dividend_V0@6@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@6@01)) $k@27@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@24@01)
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second $t@8@01))) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@26@01))
(assert ($Perm.isReadVar $k@27@01))
(assert (and
  (< $k@26@01 (/ (to_real 1) (to_real dividend_V0@6@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@6@01)) $k@26@01))
  (< $k@27@01 (/ (to_real 1) (to_real dividend_V0@6@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@6@01)) $k@27@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@24@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second $t@8@01))) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))))
(assert (=
  res_V0@23@01
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@24@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second $t@8@01))) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
    value_V0@5@01)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res_V0_CN3 := N5
; [exec]
; fold acc(tree_4b5075e4_PMTree(t_V0_CN0), 1 / dividend_V0_CN2)
(set-option :timeout 0)
(push) ; 5
(assert (not (not (= dividend_V0@6@01 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget0of1(t_V0): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget0of1(t_V0): Ref)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second $t@8@01)))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; [then-branch: 3 | First:(Second:($t@8@01)) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 3 | First:(Second:($t@8@01)) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 3 | First:(Second:($t@8@01)) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget0of1(t_V0): Ref)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode((ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$, (optNone(): Option[Int]), (optNone(): Option[Int]))
; [eval] (ShStructget0of1(t_V0): Ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(set-option :timeout 0)
(push) ; 6
(declare-const $k@28@01 $Perm)
(assert ($Perm.isReadVar $k@28@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@6@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<
  (* $k@28@01 (/ (to_real 1) (to_real dividend_V0@6@01)))
  (/ (to_real 1) (to_real dividend_V0@6@01))))
(assert (<=
  $Perm.No
  (-
    (/ (to_real 1) (to_real dividend_V0@6@01))
    (* $k@28@01 (/ (to_real 1) (to_real dividend_V0@6@01))))))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (* $k@28@01 (/ (to_real 1) (to_real dividend_V0@6@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@28@01))
(assert (and
  (<
    (* $k@28@01 (/ (to_real 1) (to_real dividend_V0@6@01)))
    (/ (to_real 1) (to_real dividend_V0@6@01)))
  (<=
    $Perm.No
    (-
      (/ (to_real 1) (to_real dividend_V0@6@01))
      (* $k@28@01 (/ (to_real 1) (to_real dividend_V0@6@01)))))))
(assert (tree_4b5075e4_PMTree%trigger ($Snap.combine
  ($Snap.first ($Snap.second $t@8@01))
  ($Snap.combine ($Snap.first $t@24@01) $Snap.unit)) t_V0@4@01))
; [exec]
; res_V0_CN3 := res_V0_CN3
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN3
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= dividend_V0@6@01 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@6@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] res_V0 == pureContains_4b5075e4_PMTree(t_V0, value_V0)
; [eval] pureContains_4b5075e4_PMTree(t_V0, value_V0)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@29@01 $Perm)
(assert ($Perm.isReadVar $k@29@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@6@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (< $k@29@01 (/ (to_real 1) (to_real dividend_V0@6@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@6@01)) $k@29@01)))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@29@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (pureContains_4b5075e4_PMTree%precondition ($Snap.combine
  ($Snap.first ($Snap.second $t@8@01))
  ($Snap.combine ($Snap.first $t@24@01) $Snap.unit)) t_V0@4@01 value_V0@5@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@29@01))
(assert (and
  (< $k@29@01 (/ (to_real 1) (to_real dividend_V0@6@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@6@01)) $k@29@01))
  (pureContains_4b5075e4_PMTree%precondition ($Snap.combine
    ($Snap.first ($Snap.second $t@8@01))
    ($Snap.combine ($Snap.first $t@24@01) $Snap.unit)) t_V0@4@01 value_V0@5@01)))
(set-option :timeout 0)
(push) ; 6
(assert (not (=
  res_V0@23@01
  (pureContains_4b5075e4_PMTree ($Snap.combine
    ($Snap.first ($Snap.second $t@8@01))
    ($Snap.combine ($Snap.first $t@24@01) $Snap.unit)) t_V0@4@01 value_V0@5@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  res_V0@23@01
  (pureContains_4b5075e4_PMTree ($Snap.combine
    ($Snap.first ($Snap.second $t@8@01))
    ($Snap.combine ($Snap.first $t@24@01) $Snap.unit)) t_V0@4@01 value_V0@5@01)))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 0 | First:(Second:($t@8@01)) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second $t@8@01)))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (= ($Snap.second ($Snap.second $t@8@01)) $Snap.unit))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMTree%trigger ($Snap.second $t@8@01) t_V0@4@01))
; [eval] (ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget0of1(t_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second $t@8@01)))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4 | First:(Second:($t@8@01)) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 4 | First:(Second:($t@8@01)) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 4 | First:(Second:($t@8@01)) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; res_V0_CN3 := false
; [exec]
; fold acc(tree_4b5075e4_PMTree(t_V0_CN0), 1 / dividend_V0_CN2)
(push) ; 5
(assert (not (not (= dividend_V0@6@01 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget0of1(t_V0): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget0of1(t_V0): Ref)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
; [then-branch: 5 | First:(Second:($t@8@01)) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 5 | First:(Second:($t@8@01)) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 5
; [else-branch: 5 | First:(Second:($t@8@01)) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (tree_4b5075e4_PMTree%trigger ($Snap.combine
  ($Snap.first ($Snap.second $t@8@01))
  $Snap.unit) t_V0@4@01))
; [exec]
; res_V0_CN3 := res_V0_CN3
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN3
(push) ; 6
(assert (not (not (= dividend_V0@6@01 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@6@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] res_V0 == pureContains_4b5075e4_PMTree(t_V0, value_V0)
; [eval] pureContains_4b5075e4_PMTree(t_V0, value_V0)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@30@01 $Perm)
(assert ($Perm.isReadVar $k@30@01))
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@6@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (< $k@30@01 (/ (to_real 1) (to_real dividend_V0@6@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@6@01)) $k@30@01)))
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@30@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (pureContains_4b5075e4_PMTree%precondition ($Snap.combine
  ($Snap.first ($Snap.second $t@8@01))
  $Snap.unit) t_V0@4@01 value_V0@5@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@30@01))
(assert (and
  (< $k@30@01 (/ (to_real 1) (to_real dividend_V0@6@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@6@01)) $k@30@01))
  (pureContains_4b5075e4_PMTree%precondition ($Snap.combine
    ($Snap.first ($Snap.second $t@8@01))
    $Snap.unit) t_V0@4@01 value_V0@5@01)))
(set-option :timeout 0)
(push) ; 6
(assert (not (=
  false
  (pureContains_4b5075e4_PMTree ($Snap.combine
    ($Snap.first ($Snap.second $t@8@01))
    $Snap.unit) t_V0@4@01 value_V0@5@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  false
  (pureContains_4b5075e4_PMTree ($Snap.combine
    ($Snap.first ($Snap.second $t@8@01))
    $Snap.unit) t_V0@4@01 value_V0@5@01)))
(pop) ; 5
(pop) ; 4
; [eval] !((ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget0of1(t_V0_CN0): Ref)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@6@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
; [then-branch: 6 | First:(Second:($t@8@01)) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 6 | First:(Second:($t@8@01)) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 4
; [else-branch: 6 | First:(Second:($t@8@01)) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- Delete_4b5075e4_PMTree ----------
(declare-const t_V0@31@01 ShStruct1<Ref>)
(declare-const value_V0@32@01 Int)
(declare-const t_V0@33@01 ShStruct1<Ref>)
(declare-const value_V0@34@01 Int)
(push) ; 1
(declare-const $t@35@01 $Snap)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@36@01 $Snap)
(assert (= $t@36@01 ($Snap.combine ($Snap.first $t@36@01) ($Snap.second $t@36@01))))
(assert (= ($Snap.second $t@36@01) $Snap.unit))
; [eval] !((value_V0 in sortedValues_4b5075e4_PMTree(t_V0)))
; [eval] (value_V0 in sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(push) ; 3
(declare-const $k@37@01 $Perm)
(assert ($Perm.isReadVar $k@37@01))
(assert (< $k@37@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@37@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@37@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (sortedValues_4b5075e4_PMTree%precondition ($Snap.first $t@36@01) t_V0@33@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@37@01))
(assert (and
  (< $k@37@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@37@01))
  (sortedValues_4b5075e4_PMTree%precondition ($Snap.first $t@36@01) t_V0@33@01)))
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.first $t@36@01) t_V0@33@01)
    value_V0@34@01)))
(pop) ; 2
(set-option :timeout 0)
(push) ; 2
; [exec]
; var value_V0_CN1: Int
(declare-const value_V0_CN1@38@01 Int)
; [exec]
; var t_V0_CN0: ShStruct1[Ref]
(declare-const t_V0_CN0@39@01 ShStruct1<Ref>)
; [exec]
; inhale t_V0_CN0 ==
;   shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(declare-const $t@40@01 $Snap)
(assert (= $t@40@01 $Snap.unit))
; [eval] t_V0_CN0 == shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 3
(assert (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (=
  t_V0_CN0@39@01
  (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale value_V0_CN1 == 0
(declare-const $t@41@01 $Snap)
(assert (= $t@41@01 $Snap.unit))
; [eval] value_V0_CN1 == 0
(assert (= value_V0_CN1@38@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; t_V0_CN0 := t_V0
; [exec]
; value_V0_CN1 := value_V0
; [exec]
; unfold acc(tree_4b5075e4_PMTree(t_V0_CN0), write)
(assert (= $t@35@01 ($Snap.combine ($Snap.first $t@35@01) ($Snap.second $t@35@01))))
; [eval] (ShStructget0of1(t_V0): Ref)
(assert (not (= (ShStructget0of1<Ref> t_V0@33@01) $Ref.null)))
; [eval] !((ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget0of1(t_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(assert (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@35@01))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@35@01))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7 | First:($t@35@01) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 7 | First:($t@35@01) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 7 | First:($t@35@01) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@35@01))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(assert (=
  ($Snap.second $t@35@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@35@01))
    ($Snap.second ($Snap.second $t@35@01)))))
; [eval] (ShStructget0of1(t_V0): Ref)
(assert (= ($Snap.second ($Snap.second $t@35@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode((ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$, (optNone(): Option[Int]), (optNone(): Option[Int]))
; [eval] (ShStructget0of1(t_V0): Ref)
; [eval] (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 4
(declare-const $k@42@01 $Perm)
(assert ($Perm.isReadVar $k@42@01))
(assert (< $k@42@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@42@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@42@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second $t@35@01)) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@35@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@42@01))
(assert (and
  (< $k@42@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@42@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second $t@35@01)) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@35@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))))
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second $t@35@01)) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@35@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMTree%trigger $t@35@01 t_V0@33@01))
; [eval] !((ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget0of1(t_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@35@01))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 8 | First:($t@35@01) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 8 | First:($t@35@01) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 8 | First:($t@35@01) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; var N3: ShStruct3[Ref, Ref, Ref]
(declare-const N3@43@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; N3 := delete_4b5075e4_PMnode((ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   value_V0_CN1, (optNone(): Option[Int]), (optNone(): Option[Int]))
; [eval] (ShStructget0of1(t_V0_CN0): Ref)
; [eval] (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < value_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 5
; [then-branch: 9 | False | dead]
; [else-branch: 9 | True | live]
(push) ; 6
; [else-branch: 9 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > value_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 5
; [then-branch: 10 | False | dead]
; [else-branch: 10 | True | live]
(push) ; 6
; [else-branch: 10 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 5
(declare-const $k@44@01 $Perm)
(assert ($Perm.isReadVar $k@44@01))
(assert (< $k@44@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@44@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@44@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@44@01))
(assert (and (< $k@44@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@44@01))))
(declare-const res_V0@45@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const $t@46@01 $Snap)
(assert (= $t@46@01 ($Snap.combine ($Snap.first $t@46@01) ($Snap.second $t@46@01))))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  res_V0@45@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    res_V0@45@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 11 | res_V0@45@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 11 | res_V0@45@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 11 | res_V0@45@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    res_V0@45@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(assert (=
  ($Snap.first $t@46@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@46@01))
    ($Snap.second ($Snap.first $t@46@01)))))
(assert (= ($Snap.second ($Snap.first $t@46@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 6
(declare-const $k@47@01 $Perm)
(assert ($Perm.isReadVar $k@47@01))
(assert (< $k@47@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@47@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@47@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.first $t@46@01)) res_V0@45@01 (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@47@01))
(assert (and
  (< $k@47@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@47@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.first $t@46@01)) res_V0@45@01 (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))))
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.first $t@46@01)) res_V0@45@01 (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>)))
(assert (= ($Snap.second $t@46@01) $Snap.unit))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  res_V0@45@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 12 | res_V0@45@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 12 | res_V0@45@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 12 | res_V0@45@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 8
(declare-const $k@48@01 $Perm)
(assert ($Perm.isReadVar $k@48@01))
(assert (< $k@48@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@48@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@48@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@49@01 $Perm)
(assert ($Perm.isReadVar $k@49@01))
(assert (< $k@49@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@49@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@49@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@49@01))
(assert (and (< $k@49@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@49@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@46@01))
  $Snap.unit) res_V0@45@01 (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@48@01))
(assert ($Perm.isReadVar $k@49@01))
(assert (and
  (< $k@48@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@48@01))
  (< $k@49@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@49@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@46@01))
    $Snap.unit) res_V0@45@01 (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@48@01))
(assert ($Perm.isReadVar $k@49@01))
(assert (=>
  (not
    (=
      res_V0@45@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@48@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@48@01))
    (< $k@49@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@49@01))
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.first ($Snap.first $t@46@01))
      $Snap.unit) res_V0@45@01 (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>)))))
(assert (=>
  (not
    (=
      res_V0@45@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.first $t@46@01))
        $Snap.unit) res_V0@45@01 (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
      value_V0@34@01))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; (ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ := N3
; [eval] (ShStructget0of1(t_V0_CN0): Ref)
; [exec]
; fold acc(tree_4b5075e4_PMTree(t_V0_CN0), write)
; [eval] (ShStructget0of1(t_V0): Ref)
; [eval] !((ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget0of1(t_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  res_V0@45@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 13 | res_V0@45@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 13 | res_V0@45@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 13 | res_V0@45@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget0of1(t_V0): Ref)
; [eval] sorted_4b5075e4_PMnode((ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$, (optNone(): Option[Int]), (optNone(): Option[Int]))
; [eval] (ShStructget0of1(t_V0): Ref)
; [eval] (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 7
(declare-const $k@50@01 $Perm)
(assert ($Perm.isReadVar $k@50@01))
(assert (< $k@50@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@50@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@50@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@50@01))
(assert (and (< $k@50@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@50@01))))
(assert (tree_4b5075e4_PMTree%trigger ($Snap.combine
  ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@45@01)
  ($Snap.combine ($Snap.first ($Snap.first $t@46@01)) $Snap.unit)) t_V0@33@01))
; [exec]
; label returnLabel
; [eval] !((value_V0 in sortedValues_4b5075e4_PMTree(t_V0)))
; [eval] (value_V0 in sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@51@01 $Perm)
(assert ($Perm.isReadVar $k@51@01))
(assert (< $k@51@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@51@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@51@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sortedValues_4b5075e4_PMTree%precondition ($Snap.combine
  ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@45@01)
  ($Snap.combine ($Snap.first ($Snap.first $t@46@01)) $Snap.unit)) t_V0@33@01))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@51@01))
(assert (and
  (< $k@51@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@51@01))
  (sortedValues_4b5075e4_PMTree%precondition ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@45@01)
    ($Snap.combine ($Snap.first ($Snap.first $t@46@01)) $Snap.unit)) t_V0@33@01)))
(set-option :timeout 0)
(push) ; 7
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@45@01)
      ($Snap.combine ($Snap.first ($Snap.first $t@46@01)) $Snap.unit)) t_V0@33@01)
    value_V0@34@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@45@01)
      ($Snap.combine ($Snap.first ($Snap.first $t@46@01)) $Snap.unit)) t_V0@33@01)
    value_V0@34@01)))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 11 | res_V0@45@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  res_V0@45@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (= ($Snap.first $t@46@01) $Snap.unit))
(assert (= ($Snap.second $t@46@01) $Snap.unit))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
; [then-branch: 14 | res_V0@45@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 14 | res_V0@45@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 7
; [else-branch: 14 | res_V0@45@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; (ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ := N3
; [eval] (ShStructget0of1(t_V0_CN0): Ref)
; [exec]
; fold acc(tree_4b5075e4_PMTree(t_V0_CN0), write)
; [eval] (ShStructget0of1(t_V0): Ref)
; [eval] !((ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget0of1(t_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
; [then-branch: 15 | res_V0@45@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 15 | res_V0@45@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 6
; [else-branch: 15 | res_V0@45@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (tree_4b5075e4_PMTree%trigger ($Snap.combine
  ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@45@01)
  $Snap.unit) t_V0@33@01))
; [exec]
; label returnLabel
; [eval] !((value_V0 in sortedValues_4b5075e4_PMTree(t_V0)))
; [eval] (value_V0 in sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(push) ; 7
(declare-const $k@52@01 $Perm)
(assert ($Perm.isReadVar $k@52@01))
(assert (< $k@52@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@52@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@52@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sortedValues_4b5075e4_PMTree%precondition ($Snap.combine
  ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@45@01)
  $Snap.unit) t_V0@33@01))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@52@01))
(assert (and
  (< $k@52@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@52@01))
  (sortedValues_4b5075e4_PMTree%precondition ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@45@01)
    $Snap.unit) t_V0@33@01)))
(set-option :timeout 0)
(push) ; 7
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@45@01)
      $Snap.unit) t_V0@33@01)
    value_V0@34@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@45@01)
      $Snap.unit) t_V0@33@01)
    value_V0@34@01)))
(pop) ; 6
(pop) ; 5
(pop) ; 4
; [eval] !!((ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget0of1(t_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 4
(pop) ; 4
; Joined path conditions
; [then-branch: 16 | First:($t@35@01) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 16 | First:($t@35@01) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 4
; [else-branch: 16 | First:($t@35@01) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 7 | First:($t@35@01) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@35@01))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (= ($Snap.second $t@35@01) $Snap.unit))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMTree%trigger $t@35@01 t_V0@33@01))
; [eval] !((ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget0of1(t_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
; [then-branch: 17 | First:($t@35@01) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 17 | First:($t@35@01) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 4
; [else-branch: 17 | First:($t@35@01) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 4
; [eval] !!((ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget0of1(t_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@35@01))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 18 | First:($t@35@01) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 18 | First:($t@35@01) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 18 | First:($t@35@01) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; fold acc(tree_4b5075e4_PMTree(t_V0_CN0), write)
; [eval] (ShStructget0of1(t_V0): Ref)
; [eval] !((ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget0of1(t_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 5
(pop) ; 5
; Joined path conditions
; [then-branch: 19 | First:($t@35@01) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 19 | First:($t@35@01) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 5
; [else-branch: 19 | First:($t@35@01) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (tree_4b5075e4_PMTree%trigger ($Snap.combine ($Snap.first $t@35@01) $Snap.unit) t_V0@33@01))
; [exec]
; label returnLabel
; [eval] !((value_V0 in sortedValues_4b5075e4_PMTree(t_V0)))
; [eval] (value_V0 in sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(push) ; 6
(declare-const $k@53@01 $Perm)
(assert ($Perm.isReadVar $k@53@01))
(assert (< $k@53@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@53@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@53@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sortedValues_4b5075e4_PMTree%precondition ($Snap.combine
  ($Snap.first $t@35@01)
  $Snap.unit) t_V0@33@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@53@01))
(assert (and
  (< $k@53@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@53@01))
  (sortedValues_4b5075e4_PMTree%precondition ($Snap.combine
    ($Snap.first $t@35@01)
    $Snap.unit) t_V0@33@01)))
(set-option :timeout 0)
(push) ; 6
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.combine
      ($Snap.first $t@35@01)
      $Snap.unit) t_V0@33@01)
    value_V0@34@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.combine
      ($Snap.first $t@35@01)
      $Snap.unit) t_V0@33@01)
    value_V0@34@01)))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- Insert_4b5075e4_PMTree ----------
(declare-const t_V0@54@01 ShStruct1<Ref>)
(declare-const value_V0@55@01 Int)
(declare-const t_V0@56@01 ShStruct1<Ref>)
(declare-const value_V0@57@01 Int)
(push) ; 1
(declare-const $t@58@01 $Snap)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@59@01 $Snap)
(assert (= $t@59@01 ($Snap.combine ($Snap.first $t@59@01) ($Snap.second $t@59@01))))
(assert (=
  ($Snap.second $t@59@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@59@01))
    ($Snap.second ($Snap.second $t@59@01)))))
(assert (= ($Snap.first ($Snap.second $t@59@01)) $Snap.unit))
; [eval] |sortedValues_4b5075e4_PMTree(t_V0)| == old(|sortedValues_4b5075e4_PMTree(t_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0))) ? 0 : 1)
; [eval] |sortedValues_4b5075e4_PMTree(t_V0)|
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(push) ; 3
(declare-const $k@60@01 $Perm)
(assert ($Perm.isReadVar $k@60@01))
(assert (< $k@60@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@60@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@60@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (sortedValues_4b5075e4_PMTree%precondition ($Snap.first $t@59@01) t_V0@56@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@60@01))
(assert (and
  (< $k@60@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@60@01))
  (sortedValues_4b5075e4_PMTree%precondition ($Snap.first $t@59@01) t_V0@56@01)))
; [eval] old(|sortedValues_4b5075e4_PMTree(t_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0))) ? 0 : 1)
; [eval] old(|sortedValues_4b5075e4_PMTree(t_V0)|)
; [eval] |sortedValues_4b5075e4_PMTree(t_V0)|
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@61@01 $Perm)
(assert ($Perm.isReadVar $k@61@01))
(assert (< $k@61@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@61@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (sortedValues_4b5075e4_PMTree%precondition $t@58@01 t_V0@56@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@61@01))
(assert (and
  (< $k@61@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@61@01))
  (sortedValues_4b5075e4_PMTree%precondition $t@58@01 t_V0@56@01)))
; [eval] ((value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0))) ? 0 : 1)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0)))
; [eval] old(sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@62@01 $Perm)
(assert ($Perm.isReadVar $k@62@01))
(assert (< $k@62@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@62@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@62@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@62@01))
(assert (and (< $k@62@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@62@01))))
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    value_V0@57@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) value_V0@57@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 20 | value_V0@57@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01) | live]
; [else-branch: 20 | !(value_V0@57@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 20 | value_V0@57@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01)]
(assert (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) value_V0@57@01))
(pop) ; 4
(push) ; 4
; [else-branch: 20 | !(value_V0@57@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    value_V0@57@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
      value_V0@57@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    value_V0@57@01)))
(assert (=
  (Seq_length (sortedValues_4b5075e4_PMTree ($Snap.first $t@59@01) t_V0@56@01))
  (+
    (Seq_length (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01))
    (ite
      (Seq_contains
        (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
        value_V0@57@01)
      0
      1))))
(assert (=
  ($Snap.second ($Snap.second $t@59@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@59@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@59@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@59@01))) $Snap.unit))
; [eval] (forall i_V1: Int :: { (i_V1 in old(sortedValues_4b5075e4_PMTree(t_V0))) } { (i_V1 in sortedValues_4b5075e4_PMTree(t_V0)) } (i_V1 in old(sortedValues_4b5075e4_PMTree(t_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMTree(t_V0)))
(declare-const i_V1@63@01 Int)
(push) ; 3
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMTree(t_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMTree(t_V0))
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMTree(t_V0)))
; [eval] old(sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(push) ; 4
(declare-const $k@64@01 $Perm)
(assert ($Perm.isReadVar $k@64@01))
(assert (< $k@64@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@64@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@64@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@64@01))
(assert (and (< $k@64@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@64@01))))
(set-option :timeout 0)
(push) ; 4
; [then-branch: 21 | i_V1@63@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01) | live]
; [else-branch: 21 | !(i_V1@63@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01)) | live]
(push) ; 5
; [then-branch: 21 | i_V1@63@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01)]
(assert (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) i_V1@63@01))
; [eval] (i_V1 in sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(push) ; 6
(declare-const $k@65@01 $Perm)
(assert ($Perm.isReadVar $k@65@01))
(assert (< $k@65@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@65@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@65@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@65@01))
(assert (and (< $k@65@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@65@01))))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 21 | !(i_V1@63@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01))]
(assert (not
  (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) i_V1@63@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@65@01))
(assert (=>
  (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) i_V1@63@01)
  (and
    (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) i_V1@63@01)
    (< $k@65@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@65@01)))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) i_V1@63@01))
  (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) i_V1@63@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@64@01))
(assert ($Perm.isReadVar $k@65@01))
(assert (< $k@64@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@64@01)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@63@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
        i_V1@63@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
          i_V1@63@01)
        (< $k@65@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@65@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
          i_V1@63@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
        i_V1@63@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    i_V1@63@01))
  :qid |prog.l457-aux|)))
(assert (forall ((i_V1@63@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
        i_V1@63@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
          i_V1@63@01)
        (< $k@65@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@65@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
          i_V1@63@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
        i_V1@63@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.first $t@59@01) t_V0@56@01)
    i_V1@63@01))
  :qid |prog.l457-aux|)))
(assert (forall ((i_V1@63@01 Int)) (!
  (=>
    (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) i_V1@63@01)
    (Seq_contains
      (sortedValues_4b5075e4_PMTree ($Snap.first $t@59@01) t_V0@56@01)
      i_V1@63@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    i_V1@63@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.first $t@59@01) t_V0@56@01)
    i_V1@63@01))
  :qid |prog.l457|)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@59@01))) $Snap.unit))
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0))) ==> old(sortedValues_4b5075e4_PMTree(t_V0)) == sortedValues_4b5075e4_PMTree(t_V0)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0)))
; [eval] old(sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(push) ; 3
(declare-const $k@66@01 $Perm)
(assert ($Perm.isReadVar $k@66@01))
(assert (< $k@66@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@66@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@66@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@66@01))
(assert (and (< $k@66@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@66@01))))
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    value_V0@57@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) value_V0@57@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 22 | value_V0@57@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01) | live]
; [else-branch: 22 | !(value_V0@57@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 22 | value_V0@57@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01)]
(assert (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) value_V0@57@01))
; [eval] old(sortedValues_4b5075e4_PMTree(t_V0)) == sortedValues_4b5075e4_PMTree(t_V0)
; [eval] old(sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(push) ; 5
(declare-const $k@67@01 $Perm)
(assert ($Perm.isReadVar $k@67@01))
(assert (< $k@67@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@67@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@67@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@67@01))
(assert (and (< $k@67@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@67@01))))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(set-option :timeout 0)
(push) ; 5
(declare-const $k@68@01 $Perm)
(assert ($Perm.isReadVar $k@68@01))
(assert (< $k@68@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@68@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@68@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@68@01))
(assert (and (< $k@68@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@68@01))))
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 22 | !(value_V0@57@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    value_V0@57@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@67@01))
(assert ($Perm.isReadVar $k@68@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    value_V0@57@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
      value_V0@57@01)
    (< $k@67@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@67@01))
    (< $k@68@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@68@01)))))
; Joined path conditions
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    value_V0@57@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    (sortedValues_4b5075e4_PMTree ($Snap.first $t@59@01) t_V0@56@01))))
(pop) ; 2
(push) ; 2
; [exec]
; var value_V0_CN1: Int
(declare-const value_V0_CN1@69@01 Int)
; [exec]
; var t_V0_CN0: ShStruct1[Ref]
(declare-const t_V0_CN0@70@01 ShStruct1<Ref>)
; [exec]
; inhale t_V0_CN0 ==
;   shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(declare-const $t@71@01 $Snap)
(assert (= $t@71@01 $Snap.unit))
; [eval] t_V0_CN0 == shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 3
(assert (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (=
  t_V0_CN0@70@01
  (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale value_V0_CN1 == 0
(declare-const $t@72@01 $Snap)
(assert (= $t@72@01 $Snap.unit))
; [eval] value_V0_CN1 == 0
(assert (= value_V0_CN1@69@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; t_V0_CN0 := t_V0
; [exec]
; value_V0_CN1 := value_V0
; [exec]
; unfold acc(tree_4b5075e4_PMTree(t_V0_CN0), write)
(assert (= $t@58@01 ($Snap.combine ($Snap.first $t@58@01) ($Snap.second $t@58@01))))
; [eval] (ShStructget0of1(t_V0): Ref)
(assert (not (= (ShStructget0of1<Ref> t_V0@56@01) $Ref.null)))
; [eval] !((ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget0of1(t_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(assert (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 23 | First:($t@58@01) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 23 | First:($t@58@01) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 23 | First:($t@58@01) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(assert (=
  ($Snap.second $t@58@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@58@01))
    ($Snap.second ($Snap.second $t@58@01)))))
; [eval] (ShStructget0of1(t_V0): Ref)
(assert (= ($Snap.second ($Snap.second $t@58@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode((ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$, (optNone(): Option[Int]), (optNone(): Option[Int]))
; [eval] (ShStructget0of1(t_V0): Ref)
; [eval] (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 4
(declare-const $k@73@01 $Perm)
(assert ($Perm.isReadVar $k@73@01))
(assert (< $k@73@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@73@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@73@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second $t@58@01)) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@73@01))
(assert (and
  (< $k@73@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@73@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second $t@58@01)) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))))
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second $t@58@01)) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>)))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMTree%trigger $t@58@01 t_V0@56@01))
; [eval] (ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget0of1(t_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
; [then-branch: 24 | First:($t@58@01) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 24 | First:($t@58@01) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 4
; [else-branch: 24 | First:($t@58@01) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 4
; [eval] !((ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget0of1(t_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 25 | First:($t@58@01) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 25 | First:($t@58@01) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 25 | First:($t@58@01) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; insert_4b5075e4_PMnode((ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   value_V0_CN1, (optNone(): Option[Int]), (optNone(): Option[Int]))
; [eval] (ShStructget0of1(t_V0_CN0): Ref)
; [eval] (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < value_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 5
; [then-branch: 26 | False | dead]
; [else-branch: 26 | True | live]
(push) ; 6
; [else-branch: 26 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > value_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 5
; [then-branch: 27 | False | dead]
; [else-branch: 27 | True | live]
(push) ; 6
; [else-branch: 27 | True]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 5
(declare-const $k@74@01 $Perm)
(assert ($Perm.isReadVar $k@74@01))
(assert (< $k@74@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@74@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@74@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@74@01))
(assert (and (< $k@74@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@74@01))))
(declare-const $t@75@01 $Snap)
(assert (= $t@75@01 ($Snap.combine ($Snap.first $t@75@01) ($Snap.second $t@75@01))))
(assert (=
  ($Snap.second $t@75@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@75@01))
    ($Snap.second ($Snap.second $t@75@01)))))
(assert (= ($Snap.first ($Snap.second $t@75@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 5
(declare-const $k@76@01 $Perm)
(assert ($Perm.isReadVar $k@76@01))
(assert (< $k@76@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@76@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@76@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@75@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@76@01))
(assert (and
  (< $k@76@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@76@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@75@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@75@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>)))
(assert (=
  ($Snap.second ($Snap.second $t@75@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@75@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@75@01))) $Snap.unit))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 5
(declare-const $k@77@01 $Perm)
(assert ($Perm.isReadVar $k@77@01))
(assert (< $k@77@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@77@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@77@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@78@01 $Perm)
(assert ($Perm.isReadVar $k@78@01))
(assert (< $k@78@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@78@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@78@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@78@01))
(assert (and (< $k@78@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@78@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@75@01)
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@77@01))
(assert ($Perm.isReadVar $k@78@01))
(assert (and
  (< $k@77@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@77@01))
  (< $k@78@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@78@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@75@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))))
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine ($Snap.first $t@75@01) $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
  value_V0@57@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@75@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@75@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@75@01))))
  $Snap.unit))
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)| == old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 5
(declare-const $k@79@01 $Perm)
(assert ($Perm.isReadVar $k@79@01))
(assert (< $k@79@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@79@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@79@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@80@01 $Perm)
(assert ($Perm.isReadVar $k@80@01))
(assert (< $k@80@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@80@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@80@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@80@01))
(assert (and (< $k@80@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@80@01))))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@79@01))
(assert ($Perm.isReadVar $k@80@01))
(assert (and
  (< $k@79@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@79@01))
  (< $k@80@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@80@01))))
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 5
(declare-const $k@81@01 $Perm)
(assert ($Perm.isReadVar $k@81@01))
(assert (< $k@81@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@81@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@81@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@82@01 $Perm)
(assert ($Perm.isReadVar $k@82@01))
(assert (< $k@82@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@82@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@82@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@82@01))
(assert (and (< $k@82@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@82@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.second $t@58@01))
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@81@01))
(assert ($Perm.isReadVar $k@82@01))
(assert (and
  (< $k@81@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@81@01))
  (< $k@82@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@82@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.second $t@58@01))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))))
; [eval] ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 5
(declare-const $k@83@01 $Perm)
(assert ($Perm.isReadVar $k@83@01))
(assert (< $k@83@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@83@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@83@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@84@01 $Perm)
(assert ($Perm.isReadVar $k@84@01))
(assert (< $k@84@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@84@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@84@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@84@01))
(assert (and (< $k@84@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@84@01))))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@83@01))
(assert ($Perm.isReadVar $k@84@01))
(assert (and
  (< $k@83@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@83@01))
  (< $k@84@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@84@01))))
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second $t@58@01))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
    value_V0@57@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second $t@58@01))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
  value_V0@57@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 28 | value_V0@57@01 in sortedValues_4b5075e4_PMnode((First:(Second:($t@58@01)), _), First:($t@58@01), optNone[Option[Int]], optNone[Option[Int]]) | live]
; [else-branch: 28 | !(value_V0@57@01 in sortedValues_4b5075e4_PMnode((First:(Second:($t@58@01)), _), First:($t@58@01), optNone[Option[Int]], optNone[Option[Int]])) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 28 | value_V0@57@01 in sortedValues_4b5075e4_PMnode((First:(Second:($t@58@01)), _), First:($t@58@01), optNone[Option[Int]], optNone[Option[Int]])]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second $t@58@01))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
  value_V0@57@01))
(pop) ; 6
(push) ; 6
; [else-branch: 28 | !(value_V0@57@01 in sortedValues_4b5075e4_PMnode((First:(Second:($t@58@01)), _), First:($t@58@01), optNone[Option[Int]], optNone[Option[Int]]))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second $t@58@01))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
    value_V0@57@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second $t@58@01))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
      value_V0@57@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second $t@58@01))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
    value_V0@57@01)))
(assert (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@75@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>)))
  (+
    (Seq_length
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second $t@58@01))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>)))
    (ite
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second $t@58@01))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
        value_V0@57@01)
      0
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))
  $Snap.unit))
; [eval] (forall i_V1: Int :: { (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) } { (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) } (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
(declare-const i_V1@85@01 Int)
(push) ; 5
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 6
(declare-const $k@86@01 $Perm)
(assert ($Perm.isReadVar $k@86@01))
(assert (< $k@86@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@86@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@86@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@87@01 $Perm)
(assert ($Perm.isReadVar $k@87@01))
(assert (< $k@87@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@87@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@87@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@87@01))
(assert (and (< $k@87@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@87@01))))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@86@01))
(assert ($Perm.isReadVar $k@87@01))
(assert (and
  (< $k@86@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@86@01))
  (< $k@87@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@87@01))))
(set-option :timeout 0)
(push) ; 6
; [then-branch: 29 | i_V1@85@01 in sortedValues_4b5075e4_PMnode((First:(Second:($t@58@01)), _), First:($t@58@01), optNone[Option[Int]], optNone[Option[Int]]) | live]
; [else-branch: 29 | !(i_V1@85@01 in sortedValues_4b5075e4_PMnode((First:(Second:($t@58@01)), _), First:($t@58@01), optNone[Option[Int]], optNone[Option[Int]])) | live]
(push) ; 7
; [then-branch: 29 | i_V1@85@01 in sortedValues_4b5075e4_PMnode((First:(Second:($t@58@01)), _), First:($t@58@01), optNone[Option[Int]], optNone[Option[Int]])]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second $t@58@01))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
  i_V1@85@01))
; [eval] (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 8
(declare-const $k@88@01 $Perm)
(assert ($Perm.isReadVar $k@88@01))
(assert (< $k@88@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@88@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@88@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@89@01 $Perm)
(assert ($Perm.isReadVar $k@89@01))
(assert (< $k@89@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@89@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@89@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@89@01))
(assert (and (< $k@89@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@89@01))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@88@01))
(assert ($Perm.isReadVar $k@89@01))
(assert (and
  (< $k@88@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@88@01))
  (< $k@89@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@89@01))))
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 29 | !(i_V1@85@01 in sortedValues_4b5075e4_PMnode((First:(Second:($t@58@01)), _), First:($t@58@01), optNone[Option[Int]], optNone[Option[Int]]))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second $t@58@01))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
    i_V1@85@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@88@01))
(assert ($Perm.isReadVar $k@89@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second $t@58@01))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
    i_V1@85@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second $t@58@01))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
      i_V1@85@01)
    (< $k@88@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@88@01))
    (< $k@89@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@89@01)))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second $t@58@01))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
      i_V1@85@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second $t@58@01))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
    i_V1@85@01)))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@86@01))
(assert ($Perm.isReadVar $k@87@01))
(assert ($Perm.isReadVar $k@88@01))
(assert ($Perm.isReadVar $k@89@01))
(assert (< $k@86@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@86@01)))
(assert (< $k@87@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@87@01)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@85@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second $t@58@01))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
        i_V1@85@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second $t@58@01))
            $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
          i_V1@85@01)
        (< $k@88@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@88@01))
        (< $k@89@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@89@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second $t@58@01))
            $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
          i_V1@85@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second $t@58@01))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
        i_V1@85@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second $t@58@01))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
    i_V1@85@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@85@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second $t@58@01))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
        i_V1@85@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second $t@58@01))
            $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
          i_V1@85@01)
        (< $k@88@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@88@01))
        (< $k@89@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@89@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second $t@58@01))
            $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
          i_V1@85@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second $t@58@01))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
        i_V1@85@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@75@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
    i_V1@85@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@85@01 Int)) (!
  (=>
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second $t@58@01))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
      i_V1@85@01)
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first $t@75@01)
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
      i_V1@85@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second $t@58@01))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
    i_V1@85@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@75@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
    i_V1@85@01))
  :qid |prog.l1438|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@75@01)))))
  $Snap.unit))
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 5
(declare-const $k@90@01 $Perm)
(assert ($Perm.isReadVar $k@90@01))
(assert (< $k@90@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@90@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@90@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@91@01 $Perm)
(assert ($Perm.isReadVar $k@91@01))
(assert (< $k@91@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@91@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@91@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@91@01))
(assert (and (< $k@91@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@91@01))))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@90@01))
(assert ($Perm.isReadVar $k@91@01))
(assert (and
  (< $k@90@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@90@01))
  (< $k@91@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@91@01))))
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second $t@58@01))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
    value_V0@57@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second $t@58@01))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
  value_V0@57@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 30 | value_V0@57@01 in sortedValues_4b5075e4_PMnode((First:(Second:($t@58@01)), _), First:($t@58@01), optNone[Option[Int]], optNone[Option[Int]]) | live]
; [else-branch: 30 | !(value_V0@57@01 in sortedValues_4b5075e4_PMnode((First:(Second:($t@58@01)), _), First:($t@58@01), optNone[Option[Int]], optNone[Option[Int]])) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 30 | value_V0@57@01 in sortedValues_4b5075e4_PMnode((First:(Second:($t@58@01)), _), First:($t@58@01), optNone[Option[Int]], optNone[Option[Int]])]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second $t@58@01))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
  value_V0@57@01))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 7
(declare-const $k@92@01 $Perm)
(assert ($Perm.isReadVar $k@92@01))
(assert (< $k@92@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@92@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@92@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@93@01 $Perm)
(assert ($Perm.isReadVar $k@93@01))
(assert (< $k@93@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@93@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@93@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@93@01))
(assert (and (< $k@93@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@93@01))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@92@01))
(assert ($Perm.isReadVar $k@93@01))
(assert (and
  (< $k@92@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@92@01))
  (< $k@93@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@93@01))))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@94@01 $Perm)
(assert ($Perm.isReadVar $k@94@01))
(assert (< $k@94@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@94@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@94@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@95@01 $Perm)
(assert ($Perm.isReadVar $k@95@01))
(assert (< $k@95@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@95@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@95@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@95@01))
(assert (and (< $k@95@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@95@01))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@94@01))
(assert ($Perm.isReadVar $k@95@01))
(assert (and
  (< $k@94@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@94@01))
  (< $k@95@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@95@01))))
(pop) ; 6
(set-option :timeout 0)
(push) ; 6
; [else-branch: 30 | !(value_V0@57@01 in sortedValues_4b5075e4_PMnode((First:(Second:($t@58@01)), _), First:($t@58@01), optNone[Option[Int]], optNone[Option[Int]]))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second $t@58@01))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
    value_V0@57@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@92@01))
(assert ($Perm.isReadVar $k@93@01))
(assert ($Perm.isReadVar $k@94@01))
(assert ($Perm.isReadVar $k@95@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second $t@58@01))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
    value_V0@57@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second $t@58@01))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
      value_V0@57@01)
    (< $k@92@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@92@01))
    (< $k@93@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@93@01))
    (< $k@94@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@94@01))
    (< $k@95@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@95@01)))))
; Joined path conditions
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second $t@58@01))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
    value_V0@57@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second $t@58@01))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@75@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01)) (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>)))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; fold acc(tree_4b5075e4_PMTree(t_V0_CN0), write)
; [eval] (ShStructget0of1(t_V0): Ref)
; [eval] !((ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget0of1(t_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; [then-branch: 31 | First:($t@58@01) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 31 | First:($t@58@01) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 31 | First:($t@58@01) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget0of1(t_V0): Ref)
; [eval] sorted_4b5075e4_PMnode((ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$, (optNone(): Option[Int]), (optNone(): Option[Int]))
; [eval] (ShStructget0of1(t_V0): Ref)
; [eval] (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 6
(declare-const $k@96@01 $Perm)
(assert ($Perm.isReadVar $k@96@01))
(assert (< $k@96@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@96@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@96@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@96@01))
(assert (and (< $k@96@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@96@01))))
(assert (tree_4b5075e4_PMTree%trigger ($Snap.combine
  ($Snap.first $t@58@01)
  ($Snap.combine ($Snap.first $t@75@01) $Snap.unit)) t_V0@56@01))
; [exec]
; label returnLabel
; [eval] |sortedValues_4b5075e4_PMTree(t_V0)| == old(|sortedValues_4b5075e4_PMTree(t_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0))) ? 0 : 1)
; [eval] |sortedValues_4b5075e4_PMTree(t_V0)|
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@97@01 $Perm)
(assert ($Perm.isReadVar $k@97@01))
(assert (< $k@97@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@97@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@97@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sortedValues_4b5075e4_PMTree%precondition ($Snap.combine
  ($Snap.first $t@58@01)
  ($Snap.combine ($Snap.first $t@75@01) $Snap.unit)) t_V0@56@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@97@01))
(assert (and
  (< $k@97@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@97@01))
  (sortedValues_4b5075e4_PMTree%precondition ($Snap.combine
    ($Snap.first $t@58@01)
    ($Snap.combine ($Snap.first $t@75@01) $Snap.unit)) t_V0@56@01)))
; [eval] old(|sortedValues_4b5075e4_PMTree(t_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0))) ? 0 : 1)
; [eval] old(|sortedValues_4b5075e4_PMTree(t_V0)|)
; [eval] |sortedValues_4b5075e4_PMTree(t_V0)|
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@98@01 $Perm)
(assert ($Perm.isReadVar $k@98@01))
(assert (< $k@98@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@98@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@98@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sortedValues_4b5075e4_PMTree%precondition $t@58@01 t_V0@56@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@98@01))
(assert (and
  (< $k@98@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@98@01))
  (sortedValues_4b5075e4_PMTree%precondition $t@58@01 t_V0@56@01)))
; [eval] ((value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0))) ? 0 : 1)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0)))
; [eval] old(sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@99@01 $Perm)
(assert ($Perm.isReadVar $k@99@01))
(assert (< $k@99@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@99@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@99@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@99@01))
(assert (and (< $k@99@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@99@01))))
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    value_V0@57@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) value_V0@57@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 32 | value_V0@57@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01) | live]
; [else-branch: 32 | !(value_V0@57@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 32 | value_V0@57@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01)]
(assert (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) value_V0@57@01))
(pop) ; 7
(push) ; 7
; [else-branch: 32 | !(value_V0@57@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    value_V0@57@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
      value_V0@57@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    value_V0@57@01)))
(push) ; 6
(assert (not (=
  (Seq_length
    (sortedValues_4b5075e4_PMTree ($Snap.combine
      ($Snap.first $t@58@01)
      ($Snap.combine ($Snap.first $t@75@01) $Snap.unit)) t_V0@56@01))
  (+
    (Seq_length (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01))
    (ite
      (Seq_contains
        (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
        value_V0@57@01)
      0
      1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.05s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    (sortedValues_4b5075e4_PMTree ($Snap.combine
      ($Snap.first $t@58@01)
      ($Snap.combine ($Snap.first $t@75@01) $Snap.unit)) t_V0@56@01))
  (+
    (Seq_length (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01))
    (ite
      (Seq_contains
        (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
        value_V0@57@01)
      0
      1))))
; [eval] (forall i_V1: Int :: { (i_V1 in old(sortedValues_4b5075e4_PMTree(t_V0))) } { (i_V1 in sortedValues_4b5075e4_PMTree(t_V0)) } (i_V1 in old(sortedValues_4b5075e4_PMTree(t_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMTree(t_V0)))
(declare-const i_V1@100@01 Int)
(push) ; 6
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMTree(t_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMTree(t_V0))
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMTree(t_V0)))
; [eval] old(sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(push) ; 7
(declare-const $k@101@01 $Perm)
(assert ($Perm.isReadVar $k@101@01))
(assert (< $k@101@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@101@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@101@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@101@01))
(assert (and (< $k@101@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@101@01))))
(set-option :timeout 0)
(push) ; 7
; [then-branch: 33 | i_V1@100@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01) | live]
; [else-branch: 33 | !(i_V1@100@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01)) | live]
(push) ; 8
; [then-branch: 33 | i_V1@100@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01)]
(assert (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) i_V1@100@01))
; [eval] (i_V1 in sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(push) ; 9
(declare-const $k@102@01 $Perm)
(assert ($Perm.isReadVar $k@102@01))
(assert (< $k@102@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@102@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@102@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@102@01))
(assert (and (< $k@102@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@102@01))))
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 33 | !(i_V1@100@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01))]
(assert (not
  (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) i_V1@100@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@102@01))
(assert (=>
  (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) i_V1@100@01)
  (and
    (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) i_V1@100@01)
    (< $k@102@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@102@01)))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) i_V1@100@01))
  (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) i_V1@100@01)))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@101@01))
(assert ($Perm.isReadVar $k@102@01))
(assert (< $k@101@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@101@01)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@100@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
        i_V1@100@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
          i_V1@100@01)
        (< $k@102@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@102@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
          i_V1@100@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
        i_V1@100@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    i_V1@100@01))
  :qid |prog.l457-aux|)))
(assert (forall ((i_V1@100@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
        i_V1@100@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
          i_V1@100@01)
        (< $k@102@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@102@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
          i_V1@100@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
        i_V1@100@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.combine
      ($Snap.first $t@58@01)
      ($Snap.combine ($Snap.first $t@75@01) $Snap.unit)) t_V0@56@01)
    i_V1@100@01))
  :qid |prog.l457-aux|)))
(assert (forall ((i_V1@100@01 Int)) (!
  (and
    (sortedValues_4b5075e4_PMTree%precondition $t@58@01 t_V0@56@01)
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
        i_V1@100@01)
      (sortedValues_4b5075e4_PMTree%precondition ($Snap.combine
        ($Snap.first $t@58@01)
        ($Snap.combine ($Snap.first $t@75@01) $Snap.unit)) t_V0@56@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    i_V1@100@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.combine
      ($Snap.first $t@58@01)
      ($Snap.combine ($Snap.first $t@75@01) $Snap.unit)) t_V0@56@01)
    i_V1@100@01))
  :qid |prog.l457_precondition|)))
(push) ; 6
(assert (not (forall ((i_V1@100@01 Int)) (!
  (=>
    (and
      (and
        (sortedValues_4b5075e4_PMTree%precondition $t@58@01 t_V0@56@01)
        (=>
          (Seq_contains
            (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
            i_V1@100@01)
          (sortedValues_4b5075e4_PMTree%precondition ($Snap.combine
            ($Snap.first $t@58@01)
            ($Snap.combine ($Snap.first $t@75@01) $Snap.unit)) t_V0@56@01)))
      (Seq_contains
        (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
        i_V1@100@01))
    (Seq_contains
      (sortedValues_4b5075e4_PMTree ($Snap.combine
        ($Snap.first $t@58@01)
        ($Snap.combine ($Snap.first $t@75@01) $Snap.unit)) t_V0@56@01)
      i_V1@100@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    i_V1@100@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.combine
      ($Snap.first $t@58@01)
      ($Snap.combine ($Snap.first $t@75@01) $Snap.unit)) t_V0@56@01)
    i_V1@100@01))
  :qid |prog.l457|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i_V1@100@01 Int)) (!
  (=>
    (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) i_V1@100@01)
    (Seq_contains
      (sortedValues_4b5075e4_PMTree ($Snap.combine
        ($Snap.first $t@58@01)
        ($Snap.combine ($Snap.first $t@75@01) $Snap.unit)) t_V0@56@01)
      i_V1@100@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    i_V1@100@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.combine
      ($Snap.first $t@58@01)
      ($Snap.combine ($Snap.first $t@75@01) $Snap.unit)) t_V0@56@01)
    i_V1@100@01))
  :qid |prog.l457|)))
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0))) ==> old(sortedValues_4b5075e4_PMTree(t_V0)) == sortedValues_4b5075e4_PMTree(t_V0)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0)))
; [eval] old(sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(push) ; 6
(declare-const $k@103@01 $Perm)
(assert ($Perm.isReadVar $k@103@01))
(assert (< $k@103@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@103@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@103@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@103@01))
(assert (and (< $k@103@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@103@01))))
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    value_V0@57@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) value_V0@57@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 34 | value_V0@57@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01) | live]
; [else-branch: 34 | !(value_V0@57@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01)) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 34 | value_V0@57@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01)]
(assert (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) value_V0@57@01))
; [eval] old(sortedValues_4b5075e4_PMTree(t_V0)) == sortedValues_4b5075e4_PMTree(t_V0)
; [eval] old(sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(push) ; 8
(declare-const $k@104@01 $Perm)
(assert ($Perm.isReadVar $k@104@01))
(assert (< $k@104@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@104@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@104@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@104@01))
(assert (and (< $k@104@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@104@01))))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@105@01 $Perm)
(assert ($Perm.isReadVar $k@105@01))
(assert (< $k@105@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@105@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@105@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@105@01))
(assert (and (< $k@105@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@105@01))))
(pop) ; 7
(set-option :timeout 0)
(push) ; 7
; [else-branch: 34 | !(value_V0@57@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    value_V0@57@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@104@01))
(assert ($Perm.isReadVar $k@105@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    value_V0@57@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
      value_V0@57@01)
    (< $k@104@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@104@01))
    (< $k@105@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@105@01)))))
; Joined path conditions
(push) ; 6
(assert (not (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    value_V0@57@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    (sortedValues_4b5075e4_PMTree ($Snap.combine
      ($Snap.first $t@58@01)
      ($Snap.combine ($Snap.first $t@75@01) $Snap.unit)) t_V0@56@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    value_V0@57@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    (sortedValues_4b5075e4_PMTree ($Snap.combine
      ($Snap.first $t@58@01)
      ($Snap.combine ($Snap.first $t@75@01) $Snap.unit)) t_V0@56@01))))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 23 | First:($t@58@01) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (= ($Snap.second $t@58@01) $Snap.unit))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMTree%trigger $t@58@01 t_V0@56@01))
; [eval] (ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget0of1(t_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@58@01))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 35 | First:($t@58@01) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 35 | First:($t@58@01) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 35 | First:($t@58@01) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; var N10: ShStruct3[Ref, Ref, Ref]
(declare-const N10@106@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; var fn$$0: ShStruct3[Ref, Ref, Ref]
(declare-const fn$$0@107@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; inhale (let fn$$1 ==
;     (fn$$0) in
;     acc((ShStructget0of3(fn$$1): Ref).Intint$$$$_E_$$$, write) &&
;     (acc((ShStructget1of3(fn$$1): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$, write) &&
;     acc((ShStructget2of3(fn$$1): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$, write))) &&
;   (let fn$$2 ==
;     (fn$$0) in
;     (let fn$$3 ==
;       ((tuple3(value_V0_CN1, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(),
;       shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()): Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]])) in
;       (ShStructget0of3(fn$$2): Ref).Intint$$$$_E_$$$ ==
;       (get0of3(fn$$3): Int) &&
;       ((ShStructget1of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ ==
;       (get1of3(fn$$3): ShStruct3[Ref, Ref, Ref]) &&
;       (ShStructget2of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ ==
;       (get2of3(fn$$3): ShStruct3[Ref, Ref, Ref]))))
(declare-const $t@108@01 $Snap)
(assert (= $t@108@01 ($Snap.combine ($Snap.first $t@108@01) ($Snap.second $t@108@01))))
(assert (=
  ($Snap.first $t@108@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@108@01))
    ($Snap.second ($Snap.first $t@108@01)))))
; [eval] (ShStructget0of3(fn$$1): Ref)
(assert (not (= (ShStructget0of3<Ref> fn$$0@107@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first $t@108@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@108@01)))
    ($Snap.second ($Snap.second ($Snap.first $t@108@01))))))
; [eval] (ShStructget1of3(fn$$1): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (= (ShStructget0of1<Ref> t_V0@56@01) (ShStructget1of3<Ref> fn$$0@107@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget1of3<Ref> fn$$0@107@01) $Ref.null)))
; [eval] (ShStructget2of3(fn$$1): Ref)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= (ShStructget0of1<Ref> t_V0@56@01) (ShStructget2of3<Ref> fn$$0@107@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> fn$$0@107@01) (ShStructget2of3<Ref> fn$$0@107@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget2of3<Ref> fn$$0@107@01) $Ref.null)))
(assert (= ($Snap.second $t@108@01) $Snap.unit))
; [eval] (let fn$$2 == (fn$$0) in (let fn$$3 == ((tuple3(value_V0_CN1, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()): Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]])) in (ShStructget0of3(fn$$2): Ref).Intint$$$$_E_$$$ == (get0of3(fn$$3): Int) && ((ShStructget1of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get1of3(fn$$3): ShStruct3[Ref, Ref, Ref]) && (ShStructget2of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get2of3(fn$$3): ShStruct3[Ref, Ref, Ref]))))
(declare-const letvar@109@01 ShStruct3<Ref~_Ref~_Ref>)
(assert (= (as letvar@109@01  ShStruct3<Ref~_Ref~_Ref>) fn$$0@107@01))
; [eval] (let fn$$3 == ((tuple3(value_V0_CN1, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()): Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]])) in (ShStructget0of3(fn$$2): Ref).Intint$$$$_E_$$$ == (get0of3(fn$$3): Int) && ((ShStructget1of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get1of3(fn$$3): ShStruct3[Ref, Ref, Ref]) && (ShStructget2of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get2of3(fn$$3): ShStruct3[Ref, Ref, Ref])))
; [eval] (tuple3(value_V0_CN1, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()): Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]])
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const letvar@110@01 Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>)
(assert (=
  (as letvar@110@01  Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>)
  (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@57@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget0of3(fn$$2): Ref).Intint$$$$_E_$$$ == (get0of3(fn$$3): Int) && ((ShStructget1of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get1of3(fn$$3): ShStruct3[Ref, Ref, Ref]) && (ShStructget2of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get2of3(fn$$3): ShStruct3[Ref, Ref, Ref]))
; [eval] (ShStructget0of3(fn$$2): Ref).Intint$$$$_E_$$$ == (get0of3(fn$$3): Int)
; [eval] (ShStructget0of3(fn$$2): Ref)
; [eval] (get0of3(fn$$3): Int)
(push) ; 5
; [then-branch: 36 | First:(First:($t@108@01)) == get0of3[Int](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@57@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))) | live]
; [else-branch: 36 | First:(First:($t@108@01)) != get0of3[Int](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@57@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))) | live]
(push) ; 6
; [then-branch: 36 | First:(First:($t@108@01)) == get0of3[Int](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@57@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)))]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@108@01)))
  (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@57@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
; [eval] (ShStructget1of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get1of3(fn$$3): ShStruct3[Ref, Ref, Ref])
; [eval] (ShStructget1of3(fn$$2): Ref)
; [eval] (get1of3(fn$$3): ShStruct3[Ref, Ref, Ref])
(push) ; 7
; [then-branch: 37 | First:(Second:(First:($t@108@01))) == get1of3[ShStruct3[Ref, Ref, Ref]](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@57@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))) | live]
; [else-branch: 37 | First:(Second:(First:($t@108@01))) != get1of3[ShStruct3[Ref, Ref, Ref]](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@57@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))) | live]
(push) ; 8
; [then-branch: 37 | First:(Second:(First:($t@108@01))) == get1of3[ShStruct3[Ref, Ref, Ref]](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@57@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)))]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@108@01))))
  (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@57@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
; [eval] (ShStructget2of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get2of3(fn$$3): ShStruct3[Ref, Ref, Ref])
; [eval] (ShStructget2of3(fn$$2): Ref)
; [eval] (get2of3(fn$$3): ShStruct3[Ref, Ref, Ref])
(pop) ; 8
(push) ; 8
; [else-branch: 37 | First:(Second:(First:($t@108@01))) != get1of3[ShStruct3[Ref, Ref, Ref]](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@57@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)))]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@108@01))))
    (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@57@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@108@01))))
      (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@57@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@108@01))))
    (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@57@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(pop) ; 6
(push) ; 6
; [else-branch: 36 | First:(First:($t@108@01)) != get0of3[Int](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@57@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)))]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@108@01)))
    (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@57@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@108@01)))
    (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@57@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
  (and
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@108@01)))
      (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@57@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
    (or
      (not
        (=
          ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@108@01))))
          (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@57@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@108@01))))
        (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@57@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))))
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@108@01)))
      (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@57@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@108@01)))
    (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@57@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(assert (and
  (and
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.second ($Snap.second ($Snap.first $t@108@01))))
      (get2of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@57@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@108@01))))
      (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@57@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@108@01)))
    (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@57@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; N10 := fn$$0
; [exec]
; (ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ := N10
; [eval] (ShStructget0of1(t_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> fn$$0@107@01) (ShStructget0of1<Ref> t_V0@56@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= (ShStructget2of3<Ref> fn$$0@107@01) (ShStructget0of1<Ref> t_V0@56@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(tree_4b5075e4_PMnode((ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$), write)
; [eval] (ShStructget0of1(t_V0_CN0): Ref)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@108@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 38 | First:(Second:(First:($t@108@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 38 | First:(Second:(First:($t@108@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 38 | First:(Second:(First:($t@108@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@108@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.second ($Snap.second ($Snap.first $t@108@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 39 | Second:(Second:(First:($t@108@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 39 | Second:(Second:(First:($t@108@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 39 | Second:(Second:(First:($t@108@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.second ($Snap.second ($Snap.first $t@108@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first $t@108@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@108@01)))
    ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.first $t@108@01)))
      ($Snap.combine $Snap.unit $Snap.unit)))) fn$$0@107@01))
; [exec]
; fold acc(tree_4b5075e4_PMTree(t_V0_CN0), write)
; [eval] (ShStructget0of1(t_V0): Ref)
; [eval] !((ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget0of1(t_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  fn$$0@107@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    fn$$0@107@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 40 | fn$$0@107@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 40 | fn$$0@107@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 40 | fn$$0@107@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    fn$$0@107@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget0of1(t_V0): Ref)
; [eval] sorted_4b5075e4_PMnode((ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$, (optNone(): Option[Int]), (optNone(): Option[Int]))
; [eval] (ShStructget0of1(t_V0): Ref)
; [eval] (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 8
(declare-const $k@111@01 $Perm)
(assert ($Perm.isReadVar $k@111@01))
(assert (< $k@111@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@111@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@111@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@108@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@108@01)))
    ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.first $t@108@01)))
      ($Snap.combine $Snap.unit $Snap.unit)))) fn$$0@107@01 (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@111@01))
(assert (and
  (< $k@111@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@111@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@108@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@108@01)))
      ($Snap.combine
        ($Snap.second ($Snap.second ($Snap.first $t@108@01)))
        ($Snap.combine $Snap.unit $Snap.unit)))) fn$$0@107@01 (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))))
(set-option :timeout 0)
(push) ; 8
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@108@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@108@01)))
    ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.first $t@108@01)))
      ($Snap.combine $Snap.unit $Snap.unit)))) fn$$0@107@01 (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@108@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@108@01)))
    ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.first $t@108@01)))
      ($Snap.combine $Snap.unit $Snap.unit)))) fn$$0@107@01 (as optNone<Option<Int>>  Option<Int>) (as optNone<Option<Int>>  Option<Int>)))
(assert (tree_4b5075e4_PMTree%trigger ($Snap.combine
  ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@107@01)
  ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@108@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@108@01)))
        ($Snap.combine
          ($Snap.second ($Snap.second ($Snap.first $t@108@01)))
          ($Snap.combine $Snap.unit $Snap.unit))))
    $Snap.unit)) t_V0@56@01))
; [exec]
; label returnLabel
; [eval] |sortedValues_4b5075e4_PMTree(t_V0)| == old(|sortedValues_4b5075e4_PMTree(t_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0))) ? 0 : 1)
; [eval] |sortedValues_4b5075e4_PMTree(t_V0)|
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(push) ; 8
(declare-const $k@112@01 $Perm)
(assert ($Perm.isReadVar $k@112@01))
(assert (< $k@112@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@112@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@112@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sortedValues_4b5075e4_PMTree%precondition ($Snap.combine
  ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@107@01)
  ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@108@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@108@01)))
        ($Snap.combine
          ($Snap.second ($Snap.second ($Snap.first $t@108@01)))
          ($Snap.combine $Snap.unit $Snap.unit))))
    $Snap.unit)) t_V0@56@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@112@01))
(assert (and
  (< $k@112@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@112@01))
  (sortedValues_4b5075e4_PMTree%precondition ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@107@01)
    ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@108@01))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first $t@108@01)))
          ($Snap.combine
            ($Snap.second ($Snap.second ($Snap.first $t@108@01)))
            ($Snap.combine $Snap.unit $Snap.unit))))
      $Snap.unit)) t_V0@56@01)))
; [eval] old(|sortedValues_4b5075e4_PMTree(t_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0))) ? 0 : 1)
; [eval] old(|sortedValues_4b5075e4_PMTree(t_V0)|)
; [eval] |sortedValues_4b5075e4_PMTree(t_V0)|
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@113@01 $Perm)
(assert ($Perm.isReadVar $k@113@01))
(assert (< $k@113@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@113@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@113@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sortedValues_4b5075e4_PMTree%precondition $t@58@01 t_V0@56@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@113@01))
(assert (and
  (< $k@113@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@113@01))
  (sortedValues_4b5075e4_PMTree%precondition $t@58@01 t_V0@56@01)))
; [eval] ((value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0))) ? 0 : 1)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0)))
; [eval] old(sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@114@01 $Perm)
(assert ($Perm.isReadVar $k@114@01))
(assert (< $k@114@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@114@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@114@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@114@01))
(assert (and (< $k@114@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@114@01))))
(set-option :timeout 0)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    value_V0@57@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 41 | value_V0@57@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01) | dead]
; [else-branch: 41 | !(value_V0@57@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01)) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 41 | !(value_V0@57@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    value_V0@57@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    value_V0@57@01)))
(push) ; 8
(assert (not (=
  (Seq_length
    (sortedValues_4b5075e4_PMTree ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@107@01)
      ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@108@01))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first $t@108@01)))
            ($Snap.combine
              ($Snap.second ($Snap.second ($Snap.first $t@108@01)))
              ($Snap.combine $Snap.unit $Snap.unit))))
        $Snap.unit)) t_V0@56@01))
  (+ (Seq_length (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)) 1))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    (sortedValues_4b5075e4_PMTree ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@107@01)
      ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@108@01))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first $t@108@01)))
            ($Snap.combine
              ($Snap.second ($Snap.second ($Snap.first $t@108@01)))
              ($Snap.combine $Snap.unit $Snap.unit))))
        $Snap.unit)) t_V0@56@01))
  (+ (Seq_length (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)) 1)))
; [eval] (forall i_V1: Int :: { (i_V1 in old(sortedValues_4b5075e4_PMTree(t_V0))) } { (i_V1 in sortedValues_4b5075e4_PMTree(t_V0)) } (i_V1 in old(sortedValues_4b5075e4_PMTree(t_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMTree(t_V0)))
(declare-const i_V1@115@01 Int)
(push) ; 8
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMTree(t_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMTree(t_V0))
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMTree(t_V0)))
; [eval] old(sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(push) ; 9
(declare-const $k@116@01 $Perm)
(assert ($Perm.isReadVar $k@116@01))
(assert (< $k@116@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@116@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@116@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@116@01))
(assert (and (< $k@116@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@116@01))))
(set-option :timeout 0)
(push) ; 9
; [then-branch: 42 | i_V1@115@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01) | live]
; [else-branch: 42 | !(i_V1@115@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01)) | live]
(push) ; 10
; [then-branch: 42 | i_V1@115@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01)]
(assert (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) i_V1@115@01))
; [eval] (i_V1 in sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(push) ; 11
(declare-const $k@117@01 $Perm)
(assert ($Perm.isReadVar $k@117@01))
(assert (< $k@117@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@117@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@117@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@117@01))
(assert (and (< $k@117@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@117@01))))
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 42 | !(i_V1@115@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01))]
(assert (not
  (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) i_V1@115@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@117@01))
(assert (=>
  (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) i_V1@115@01)
  (and
    (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) i_V1@115@01)
    (< $k@117@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@117@01)))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) i_V1@115@01))
  (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) i_V1@115@01)))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@116@01))
(assert ($Perm.isReadVar $k@117@01))
(assert (< $k@116@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@116@01)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@115@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
        i_V1@115@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
          i_V1@115@01)
        (< $k@117@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@117@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
          i_V1@115@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
        i_V1@115@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    i_V1@115@01))
  :qid |prog.l457-aux|)))
(assert (forall ((i_V1@115@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
        i_V1@115@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
          i_V1@115@01)
        (< $k@117@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@117@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
          i_V1@115@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
        i_V1@115@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@107@01)
      ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@108@01))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first $t@108@01)))
            ($Snap.combine
              ($Snap.second ($Snap.second ($Snap.first $t@108@01)))
              ($Snap.combine $Snap.unit $Snap.unit))))
        $Snap.unit)) t_V0@56@01)
    i_V1@115@01))
  :qid |prog.l457-aux|)))
(assert (forall ((i_V1@115@01 Int)) (!
  (and
    (sortedValues_4b5075e4_PMTree%precondition $t@58@01 t_V0@56@01)
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
        i_V1@115@01)
      (sortedValues_4b5075e4_PMTree%precondition ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@107@01)
        ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first $t@108@01))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.first $t@108@01)))
              ($Snap.combine
                ($Snap.second ($Snap.second ($Snap.first $t@108@01)))
                ($Snap.combine $Snap.unit $Snap.unit))))
          $Snap.unit)) t_V0@56@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    i_V1@115@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@107@01)
      ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@108@01))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first $t@108@01)))
            ($Snap.combine
              ($Snap.second ($Snap.second ($Snap.first $t@108@01)))
              ($Snap.combine $Snap.unit $Snap.unit))))
        $Snap.unit)) t_V0@56@01)
    i_V1@115@01))
  :qid |prog.l457_precondition|)))
(push) ; 8
(assert (not (forall ((i_V1@115@01 Int)) (!
  (=>
    (and
      (and
        (sortedValues_4b5075e4_PMTree%precondition $t@58@01 t_V0@56@01)
        (=>
          (Seq_contains
            (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
            i_V1@115@01)
          (sortedValues_4b5075e4_PMTree%precondition ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@107@01)
            ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.first $t@108@01))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first $t@108@01)))
                  ($Snap.combine
                    ($Snap.second ($Snap.second ($Snap.first $t@108@01)))
                    ($Snap.combine $Snap.unit $Snap.unit))))
              $Snap.unit)) t_V0@56@01)))
      (Seq_contains
        (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
        i_V1@115@01))
    (Seq_contains
      (sortedValues_4b5075e4_PMTree ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@107@01)
        ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first $t@108@01))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.first $t@108@01)))
              ($Snap.combine
                ($Snap.second ($Snap.second ($Snap.first $t@108@01)))
                ($Snap.combine $Snap.unit $Snap.unit))))
          $Snap.unit)) t_V0@56@01)
      i_V1@115@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    i_V1@115@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@107@01)
      ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@108@01))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first $t@108@01)))
            ($Snap.combine
              ($Snap.second ($Snap.second ($Snap.first $t@108@01)))
              ($Snap.combine $Snap.unit $Snap.unit))))
        $Snap.unit)) t_V0@56@01)
    i_V1@115@01))
  :qid |prog.l457|))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i_V1@115@01 Int)) (!
  (=>
    (Seq_contains (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01) i_V1@115@01)
    (Seq_contains
      (sortedValues_4b5075e4_PMTree ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@107@01)
        ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first $t@108@01))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.first $t@108@01)))
              ($Snap.combine
                ($Snap.second ($Snap.second ($Snap.first $t@108@01)))
                ($Snap.combine $Snap.unit $Snap.unit))))
          $Snap.unit)) t_V0@56@01)
      i_V1@115@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree $t@58@01 t_V0@56@01)
    i_V1@115@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@107@01)
      ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@108@01))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first $t@108@01)))
            ($Snap.combine
              ($Snap.second ($Snap.second ($Snap.first $t@108@01)))
              ($Snap.combine $Snap.unit $Snap.unit))))
        $Snap.unit)) t_V0@56@01)
    i_V1@115@01))
  :qid |prog.l457|)))
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0))) ==> old(sortedValues_4b5075e4_PMTree(t_V0)) == sortedValues_4b5075e4_PMTree(t_V0)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0)))
; [eval] old(sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(push) ; 8
(declare-const $k@118@01 $Perm)
(assert ($Perm.isReadVar $k@118@01))
(assert (< $k@118@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@118@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@118@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@118@01))
(assert (and (< $k@118@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@118@01))))
(set-option :timeout 0)
(push) ; 8
; [then-branch: 43 | value_V0@57@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01) | dead]
; [else-branch: 43 | !(value_V0@57@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01)) | live]
(push) ; 9
; [else-branch: 43 | !(value_V0@57@01 in sortedValues_4b5075e4_PMTree($t@58@01, t_V0@56@01))]
(pop) ; 9
(pop) ; 8
; Joined path conditions
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
; [eval] !((ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget0of1(t_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget0of1(t_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 4
(pop) ; 4
; Joined path conditions
; [then-branch: 44 | First:($t@58@01) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 44 | First:($t@58@01) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 4
; [else-branch: 44 | First:($t@58@01) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- NewTree_4b5075e4_F ----------
(declare-const t_V0@119@01 ShStruct1<Ref>)
(declare-const t_V0@120@01 ShStruct1<Ref>)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@121@01 $Snap)
(assert (= $t@121@01 ($Snap.combine ($Snap.first $t@121@01) ($Snap.second $t@121@01))))
(assert (= ($Snap.second $t@121@01) $Snap.unit))
; [eval] IsEmpty_4b5075e4_PMTree(t_V0)
(push) ; 3
(declare-const $k@122@01 $Perm)
(assert ($Perm.isReadVar $k@122@01))
(assert (< $k@122@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@122@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@122@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (IsEmpty_4b5075e4_PMTree%precondition ($Snap.first $t@121@01) t_V0@120@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@122@01))
(assert (and
  (< $k@122@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@122@01))
  (IsEmpty_4b5075e4_PMTree%precondition ($Snap.first $t@121@01) t_V0@120@01)))
(assert (IsEmpty_4b5075e4_PMTree ($Snap.first $t@121@01) t_V0@120@01))
(pop) ; 2
(set-option :timeout 0)
(push) ; 2
; [exec]
; var t_V0_CN0: ShStruct1[Ref]
(declare-const t_V0_CN0@123@01 ShStruct1<Ref>)
; [exec]
; var N2: ShStruct1[Ref]
(declare-const N2@124@01 ShStruct1<Ref>)
; [exec]
; var fn$$0: ShStruct1[Ref]
(declare-const fn$$0@125@01 ShStruct1<Ref>)
; [exec]
; inhale t_V0 ==
;   shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(declare-const $t@126@01 $Snap)
(assert (= $t@126@01 $Snap.unit))
; [eval] t_V0 == shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 3
(assert (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (=
  t_V0@120@01
  (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale t_V0_CN0 ==
;   shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(declare-const $t@127@01 $Snap)
(assert (= $t@127@01 $Snap.unit))
; [eval] t_V0_CN0 == shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (=
  t_V0_CN0@123@01
  (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (let fn$$1 ==
;     (fn$$0) in
;     acc((ShStructget0of1(fn$$1): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$, write)) &&
;   (let fn$$2 ==
;     (fn$$0) in
;     (let fn$$3 ==
;       ((tuple1(shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()): Tuple1[ShStruct3[Ref, Ref, Ref]])) in
;       (ShStructget0of1(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ ==
;       (get0of1(fn$$3): ShStruct3[Ref, Ref, Ref])))
(declare-const $t@128@01 $Snap)
(assert (= $t@128@01 ($Snap.combine ($Snap.first $t@128@01) ($Snap.second $t@128@01))))
; [eval] (ShStructget0of1(fn$$1): Ref)
(assert (not (= (ShStructget0of1<Ref> fn$$0@125@01) $Ref.null)))
(assert (= ($Snap.second $t@128@01) $Snap.unit))
; [eval] (let fn$$2 == (fn$$0) in (let fn$$3 == ((tuple1(shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()): Tuple1[ShStruct3[Ref, Ref, Ref]])) in (ShStructget0of1(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get0of1(fn$$3): ShStruct3[Ref, Ref, Ref])))
(declare-const letvar@129@01 ShStruct1<Ref>)
(assert (= (as letvar@129@01  ShStruct1<Ref>) fn$$0@125@01))
; [eval] (let fn$$3 == ((tuple1(shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()): Tuple1[ShStruct3[Ref, Ref, Ref]])) in (ShStructget0of1(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get0of1(fn$$3): ShStruct3[Ref, Ref, Ref]))
; [eval] (tuple1(shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()): Tuple1[ShStruct3[Ref, Ref, Ref]])
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(assert (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(declare-const letvar@130@01 Tuple1<ShStruct3<Ref~_Ref~_Ref>>)
(assert (=
  (as letvar@130@01  Tuple1<ShStruct3<Ref~_Ref~_Ref>>)
  (tuple1<Tuple1<ShStruct3<Ref~_Ref~_Ref>>> (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget0of1(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get0of1(fn$$3): ShStruct3[Ref, Ref, Ref])
; [eval] (ShStructget0of1(fn$$2): Ref)
; [eval] (get0of1(fn$$3): ShStruct3[Ref, Ref, Ref])
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@128@01))
  (get0of1<ShStruct3<Ref~_Ref~_Ref>> (tuple1<Tuple1<ShStruct3<Ref~_Ref~_Ref>>> (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; N2 := fn$$0
; [exec]
; t_V0_CN0 := N2
; [exec]
; fold acc(tree_4b5075e4_PMTree(t_V0_CN0), write)
; [eval] (ShStructget0of1(t_V0): Ref)
; [eval] !((ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget0of1(t_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget0of1(t_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@128@01))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 45 | First:($t@128@01) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 45 | First:($t@128@01) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 45 | First:($t@128@01) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first $t@128@01))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (tree_4b5075e4_PMTree%trigger ($Snap.combine ($Snap.first $t@128@01) $Snap.unit) fn$$0@125@01))
; [exec]
; t_V0_CN0 := t_V0_CN0
; [exec]
; label returnLabel
; [exec]
; t_V0 := t_V0_CN0
; [eval] IsEmpty_4b5075e4_PMTree(t_V0)
(push) ; 4
(declare-const $k@131@01 $Perm)
(assert ($Perm.isReadVar $k@131@01))
(assert (< $k@131@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@131@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@131@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (IsEmpty_4b5075e4_PMTree%precondition ($Snap.combine
  ($Snap.first $t@128@01)
  $Snap.unit) fn$$0@125@01))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@131@01))
(assert (and
  (< $k@131@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@131@01))
  (IsEmpty_4b5075e4_PMTree%precondition ($Snap.combine
    ($Snap.first $t@128@01)
    $Snap.unit) fn$$0@125@01)))
(set-option :timeout 0)
(push) ; 4
(assert (not (IsEmpty_4b5075e4_PMTree ($Snap.combine ($Snap.first $t@128@01) $Snap.unit) fn$$0@125@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (IsEmpty_4b5075e4_PMTree ($Snap.combine ($Snap.first $t@128@01) $Snap.unit) fn$$0@125@01))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- client0_4b5075e4_F ----------
(declare-const value_V0@132@01 Int)
(declare-const t_V0@133@01 ShStruct1<Ref>)
(declare-const value_V0@134@01 Int)
(declare-const t_V0@135@01 ShStruct1<Ref>)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@136@01 $Snap)
(pop) ; 2
(push) ; 2
; [exec]
; var t_V0_CN1: ShStruct1[Ref]
(declare-const t_V0_CN1@137@01 ShStruct1<Ref>)
; [exec]
; var value_V0_CN0: Int
(declare-const value_V0_CN0@138@01 Int)
; [exec]
; var N2: ShStruct1[Ref]
(declare-const N2@139@01 ShStruct1<Ref>)
; [exec]
; inhale t_V0 ==
;   shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(declare-const $t@140@01 $Snap)
(assert (= $t@140@01 $Snap.unit))
; [eval] t_V0 == shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 3
(assert (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (=
  t_V0@135@01
  (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale value_V0_CN0 == 0
(declare-const $t@141@01 $Snap)
(assert (= $t@141@01 $Snap.unit))
; [eval] value_V0_CN0 == 0
(assert (= value_V0_CN0@138@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale t_V0_CN1 ==
;   shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(declare-const $t@142@01 $Snap)
(assert (= $t@142@01 $Snap.unit))
; [eval] t_V0_CN1 == shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (=
  t_V0_CN1@137@01
  (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; value_V0_CN0 := value_V0
; [exec]
; N2 := NewTree_4b5075e4_F()
(declare-const t_V0@143@01 ShStruct1<Ref>)
(declare-const $t@144@01 $Snap)
(assert (= $t@144@01 ($Snap.combine ($Snap.first $t@144@01) ($Snap.second $t@144@01))))
(assert (= ($Snap.second $t@144@01) $Snap.unit))
; [eval] IsEmpty_4b5075e4_PMTree(t_V0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@145@01 $Perm)
(assert ($Perm.isReadVar $k@145@01))
(assert (< $k@145@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@145@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@145@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (IsEmpty_4b5075e4_PMTree%precondition ($Snap.first $t@144@01) t_V0@143@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@145@01))
(assert (and
  (< $k@145@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@145@01))
  (IsEmpty_4b5075e4_PMTree%precondition ($Snap.first $t@144@01) t_V0@143@01)))
(assert (IsEmpty_4b5075e4_PMTree ($Snap.first $t@144@01) t_V0@143@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; t_V0_CN1 := N2
; [exec]
; assert !pureContains_4b5075e4_PMTree(t_V0_CN1, value_V0_CN0)
; [eval] !pureContains_4b5075e4_PMTree(t_V0_CN1, value_V0_CN0)
; [eval] pureContains_4b5075e4_PMTree(t_V0_CN1, value_V0_CN0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@146@01 $Perm)
(assert ($Perm.isReadVar $k@146@01))
(assert (< $k@146@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@146@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@146@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (pureContains_4b5075e4_PMTree%precondition ($Snap.first $t@144@01) t_V0@143@01 value_V0@134@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@146@01))
(assert (and
  (< $k@146@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@146@01))
  (pureContains_4b5075e4_PMTree%precondition ($Snap.first $t@144@01) t_V0@143@01 value_V0@134@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (not
  (pureContains_4b5075e4_PMTree ($Snap.first $t@144@01) t_V0@143@01 value_V0@134@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not
  (pureContains_4b5075e4_PMTree ($Snap.first $t@144@01) t_V0@143@01 value_V0@134@01)))
; [exec]
; Insert_4b5075e4_PMTree(t_V0_CN1, value_V0_CN0)
(declare-const $t@147@01 $Snap)
(assert (= $t@147@01 ($Snap.combine ($Snap.first $t@147@01) ($Snap.second $t@147@01))))
(assert (=
  ($Snap.second $t@147@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@147@01))
    ($Snap.second ($Snap.second $t@147@01)))))
(assert (= ($Snap.first ($Snap.second $t@147@01)) $Snap.unit))
; [eval] |sortedValues_4b5075e4_PMTree(t_V0)| == old(|sortedValues_4b5075e4_PMTree(t_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0))) ? 0 : 1)
; [eval] |sortedValues_4b5075e4_PMTree(t_V0)|
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(push) ; 3
(declare-const $k@148@01 $Perm)
(assert ($Perm.isReadVar $k@148@01))
(assert (< $k@148@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@148@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@148@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (sortedValues_4b5075e4_PMTree%precondition ($Snap.first $t@147@01) t_V0@143@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@148@01))
(assert (and
  (< $k@148@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@148@01))
  (sortedValues_4b5075e4_PMTree%precondition ($Snap.first $t@147@01) t_V0@143@01)))
; [eval] old(|sortedValues_4b5075e4_PMTree(t_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0))) ? 0 : 1)
; [eval] old(|sortedValues_4b5075e4_PMTree(t_V0)|)
; [eval] |sortedValues_4b5075e4_PMTree(t_V0)|
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@149@01 $Perm)
(assert ($Perm.isReadVar $k@149@01))
(assert (< $k@149@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@149@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@149@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (sortedValues_4b5075e4_PMTree%precondition ($Snap.first $t@144@01) t_V0@143@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@149@01))
(assert (and
  (< $k@149@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@149@01))
  (sortedValues_4b5075e4_PMTree%precondition ($Snap.first $t@144@01) t_V0@143@01)))
; [eval] ((value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0))) ? 0 : 1)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0)))
; [eval] old(sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@150@01 $Perm)
(assert ($Perm.isReadVar $k@150@01))
(assert (< $k@150@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@150@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@150@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@150@01))
(assert (and (< $k@150@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@150@01))))
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.first $t@144@01) t_V0@143@01)
    value_V0@134@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 46 | value_V0@134@01 in sortedValues_4b5075e4_PMTree(First:($t@144@01), t_V0@143@01) | dead]
; [else-branch: 46 | !(value_V0@134@01 in sortedValues_4b5075e4_PMTree(First:($t@144@01), t_V0@143@01)) | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 46 | !(value_V0@134@01 in sortedValues_4b5075e4_PMTree(First:($t@144@01), t_V0@143@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.first $t@144@01) t_V0@143@01)
    value_V0@134@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.first $t@144@01) t_V0@143@01)
    value_V0@134@01)))
(assert (=
  (Seq_length (sortedValues_4b5075e4_PMTree ($Snap.first $t@147@01) t_V0@143@01))
  (+
    (Seq_length
      (sortedValues_4b5075e4_PMTree ($Snap.first $t@144@01) t_V0@143@01))
    1)))
(assert (=
  ($Snap.second ($Snap.second $t@147@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@147@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@147@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@147@01))) $Snap.unit))
; [eval] (forall i_V1: Int :: { (i_V1 in old(sortedValues_4b5075e4_PMTree(t_V0))) } { (i_V1 in sortedValues_4b5075e4_PMTree(t_V0)) } (i_V1 in old(sortedValues_4b5075e4_PMTree(t_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMTree(t_V0)))
(declare-const i_V1@151@01 Int)
(push) ; 3
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMTree(t_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMTree(t_V0))
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMTree(t_V0)))
; [eval] old(sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(push) ; 4
(declare-const $k@152@01 $Perm)
(assert ($Perm.isReadVar $k@152@01))
(assert (< $k@152@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@152@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@152@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@152@01))
(assert (and (< $k@152@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@152@01))))
(set-option :timeout 0)
(push) ; 4
; [then-branch: 47 | i_V1@151@01 in sortedValues_4b5075e4_PMTree(First:($t@144@01), t_V0@143@01) | live]
; [else-branch: 47 | !(i_V1@151@01 in sortedValues_4b5075e4_PMTree(First:($t@144@01), t_V0@143@01)) | live]
(push) ; 5
; [then-branch: 47 | i_V1@151@01 in sortedValues_4b5075e4_PMTree(First:($t@144@01), t_V0@143@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMTree ($Snap.first $t@144@01) t_V0@143@01)
  i_V1@151@01))
; [eval] (i_V1 in sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(push) ; 6
(declare-const $k@153@01 $Perm)
(assert ($Perm.isReadVar $k@153@01))
(assert (< $k@153@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@153@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@153@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@153@01))
(assert (and (< $k@153@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@153@01))))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 47 | !(i_V1@151@01 in sortedValues_4b5075e4_PMTree(First:($t@144@01), t_V0@143@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.first $t@144@01) t_V0@143@01)
    i_V1@151@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@153@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.first $t@144@01) t_V0@143@01)
    i_V1@151@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMTree ($Snap.first $t@144@01) t_V0@143@01)
      i_V1@151@01)
    (< $k@153@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@153@01)))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMTree ($Snap.first $t@144@01) t_V0@143@01)
      i_V1@151@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.first $t@144@01) t_V0@143@01)
    i_V1@151@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@152@01))
(assert ($Perm.isReadVar $k@153@01))
(assert (< $k@152@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@152@01)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@151@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMTree ($Snap.first $t@144@01) t_V0@143@01)
        i_V1@151@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMTree ($Snap.first $t@144@01) t_V0@143@01)
          i_V1@151@01)
        (< $k@153@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@153@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMTree ($Snap.first $t@144@01) t_V0@143@01)
          i_V1@151@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMTree ($Snap.first $t@144@01) t_V0@143@01)
        i_V1@151@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.first $t@144@01) t_V0@143@01)
    i_V1@151@01))
  :qid |prog.l457-aux|)))
(assert (forall ((i_V1@151@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMTree ($Snap.first $t@144@01) t_V0@143@01)
        i_V1@151@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMTree ($Snap.first $t@144@01) t_V0@143@01)
          i_V1@151@01)
        (< $k@153@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@153@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMTree ($Snap.first $t@144@01) t_V0@143@01)
          i_V1@151@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMTree ($Snap.first $t@144@01) t_V0@143@01)
        i_V1@151@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.first $t@147@01) t_V0@143@01)
    i_V1@151@01))
  :qid |prog.l457-aux|)))
(assert (forall ((i_V1@151@01 Int)) (!
  (=>
    (Seq_contains
      (sortedValues_4b5075e4_PMTree ($Snap.first $t@144@01) t_V0@143@01)
      i_V1@151@01)
    (Seq_contains
      (sortedValues_4b5075e4_PMTree ($Snap.first $t@147@01) t_V0@143@01)
      i_V1@151@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.first $t@144@01) t_V0@143@01)
    i_V1@151@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.first $t@147@01) t_V0@143@01)
    i_V1@151@01))
  :qid |prog.l457|)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@147@01))) $Snap.unit))
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0))) ==> old(sortedValues_4b5075e4_PMTree(t_V0)) == sortedValues_4b5075e4_PMTree(t_V0)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0)))
; [eval] old(sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(push) ; 3
(declare-const $k@154@01 $Perm)
(assert ($Perm.isReadVar $k@154@01))
(assert (< $k@154@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@154@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@154@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@154@01))
(assert (and (< $k@154@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@154@01))))
(set-option :timeout 0)
(push) ; 3
; [then-branch: 48 | value_V0@134@01 in sortedValues_4b5075e4_PMTree(First:($t@144@01), t_V0@143@01) | dead]
; [else-branch: 48 | !(value_V0@134@01 in sortedValues_4b5075e4_PMTree(First:($t@144@01), t_V0@143@01)) | live]
(push) ; 4
; [else-branch: 48 | !(value_V0@134@01 in sortedValues_4b5075e4_PMTree(First:($t@144@01), t_V0@143@01))]
(pop) ; 4
(pop) ; 3
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; assert sortedValues_4b5075e4_PMTree(t_V0_CN1) == Seq(value_V0_CN0)
; [eval] sortedValues_4b5075e4_PMTree(t_V0_CN1) == Seq(value_V0_CN0)
; [eval] sortedValues_4b5075e4_PMTree(t_V0_CN1)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@155@01 $Perm)
(assert ($Perm.isReadVar $k@155@01))
(assert (< $k@155@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@155@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@155@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@155@01))
(assert (and (< $k@155@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@155@01))))
; [eval] Seq(value_V0_CN0)
(assert (= (Seq_length (Seq_singleton value_V0@134@01)) 1))
(set-option :timeout 0)
(push) ; 3
(assert (not (Seq_equal
  (sortedValues_4b5075e4_PMTree ($Snap.first $t@147@01) t_V0@143@01)
  (Seq_singleton value_V0@134@01))))
(check-sat)
; unknown
(pop) ; 3
; 0.03s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] sortedValues_4b5075e4_PMTree(t_V0_CN1) == Seq(value_V0_CN0)
; [eval] sortedValues_4b5075e4_PMTree(t_V0_CN1)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@156@01 $Perm)
(assert ($Perm.isReadVar $k@156@01))
(assert (< $k@156@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@156@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@156@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@156@01))
(assert (and (< $k@156@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@156@01))))
; [eval] Seq(value_V0_CN0)
(set-option :timeout 0)
(push) ; 3
(assert (not (Seq_equal
  (sortedValues_4b5075e4_PMTree ($Snap.first $t@147@01) t_V0@143@01)
  (Seq_singleton value_V0@134@01))))
(check-sat)
; unknown
(pop) ; 3
; 0.03s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] sortedValues_4b5075e4_PMTree(t_V0_CN1) == Seq(value_V0_CN0)
; [eval] sortedValues_4b5075e4_PMTree(t_V0_CN1)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@157@01 $Perm)
(assert ($Perm.isReadVar $k@157@01))
(assert (< $k@157@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@157@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@157@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@157@01))
(assert (and (< $k@157@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@157@01))))
; [eval] Seq(value_V0_CN0)
(set-option :timeout 0)
(push) ; 3
(assert (not (Seq_equal
  (sortedValues_4b5075e4_PMTree ($Snap.first $t@147@01) t_V0@143@01)
  (Seq_singleton value_V0@134@01))))
(check-sat)
; unknown
(pop) ; 3
; 0.03s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] sortedValues_4b5075e4_PMTree(t_V0_CN1) == Seq(value_V0_CN0)
; [eval] sortedValues_4b5075e4_PMTree(t_V0_CN1)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@158@01 $Perm)
(assert ($Perm.isReadVar $k@158@01))
(assert (< $k@158@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@158@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@158@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@158@01))
(assert (and (< $k@158@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@158@01))))
; [eval] Seq(value_V0_CN0)
(set-option :timeout 0)
(push) ; 3
(assert (not (Seq_equal
  (sortedValues_4b5075e4_PMTree ($Snap.first $t@147@01) t_V0@143@01)
  (Seq_singleton value_V0@134@01))))
(check-sat)
; unknown
(pop) ; 3
; 0.03s
; (get-info :all-statistics)
(pop) ; 2
(pop) ; 1
; ---------- client1_4b5075e4_F ----------
(declare-const t_V0@159@01 ShStruct1<Ref>)
(declare-const value_V0@160@01 Int)
(declare-const t_V0@161@01 ShStruct1<Ref>)
(declare-const value_V0@162@01 Int)
(push) ; 1
(declare-const $t@163@01 $Snap)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@164@01 $Snap)
(pop) ; 2
(push) ; 2
; [exec]
; var value_V0_CN1: Int
(declare-const value_V0_CN1@165@01 Int)
; [exec]
; var t_V0_CN0: ShStruct1[Ref]
(declare-const t_V0_CN0@166@01 ShStruct1<Ref>)
; [exec]
; var newValues_V1: Seq[Int]
(declare-const newValues_V1@167@01 Seq<Int>)
; [exec]
; var N3: Bool
(declare-const N3@168@01 Bool)
; [exec]
; var oldValues_V1: Seq[Int]
(declare-const oldValues_V1@169@01 Seq<Int>)
; [exec]
; inhale t_V0_CN0 ==
;   shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(declare-const $t@170@01 $Snap)
(assert (= $t@170@01 $Snap.unit))
; [eval] t_V0_CN0 == shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 3
(assert (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (=
  t_V0_CN0@166@01
  (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale value_V0_CN1 == 0
(declare-const $t@171@01 $Snap)
(assert (= $t@171@01 $Snap.unit))
; [eval] value_V0_CN1 == 0
(assert (= value_V0_CN1@165@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; t_V0_CN0 := t_V0
; [exec]
; value_V0_CN1 := value_V0
; [exec]
; inhale oldValues_V1 == Seq[Int]()
(declare-const $t@172@01 $Snap)
(assert (= $t@172@01 $Snap.unit))
; [eval] oldValues_V1 == Seq[Int]()
; [eval] Seq[Int]()
(assert (Seq_equal oldValues_V1@169@01 (as Seq_empty  Seq<Int>)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; oldValues_V1 := sortedValues_4b5075e4_PMTree(t_V0_CN0)
; [eval] sortedValues_4b5075e4_PMTree(t_V0_CN0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@173@01 $Perm)
(assert ($Perm.isReadVar $k@173@01))
(assert (< $k@173@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@173@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@173@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (sortedValues_4b5075e4_PMTree%precondition $t@163@01 t_V0@161@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@173@01))
(assert (and
  (< $k@173@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@173@01))
  (sortedValues_4b5075e4_PMTree%precondition $t@163@01 t_V0@161@01)))
(declare-const oldValues_V1@174@01 Seq<Int>)
(assert (Seq_equal
  oldValues_V1@174@01
  (sortedValues_4b5075e4_PMTree $t@163@01 t_V0@161@01)))
; [exec]
; N3 := Contains_4b5075e4_PMTree(t_V0_CN0, value_V0_CN1, 2)
; [eval] dividend_V0 > 0
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const res_V0@175@01 Bool)
(declare-const $t@176@01 $Snap)
(assert (= $t@176@01 ($Snap.combine ($Snap.first $t@176@01) ($Snap.second $t@176@01))))
(assert (= $t@163@01 ($Snap.first $t@176@01)))
(assert (= ($Snap.second $t@176@01) $Snap.unit))
; [eval] res_V0 == pureContains_4b5075e4_PMTree(t_V0, value_V0)
; [eval] pureContains_4b5075e4_PMTree(t_V0, value_V0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@177@01 $Perm)
(assert ($Perm.isReadVar $k@177@01))
(assert (< $k@177@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@177@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@177@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (pureContains_4b5075e4_PMTree%precondition $t@163@01 t_V0@161@01 value_V0@162@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@177@01))
(assert (and
  (< $k@177@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@177@01))
  (pureContains_4b5075e4_PMTree%precondition $t@163@01 t_V0@161@01 value_V0@162@01)))
(assert (=
  res_V0@175@01
  (pureContains_4b5075e4_PMTree $t@163@01 t_V0@161@01 value_V0@162@01)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale newValues_V1 == Seq[Int]()
(declare-const $t@178@01 $Snap)
(assert (= $t@178@01 $Snap.unit))
; [eval] newValues_V1 == Seq[Int]()
; [eval] Seq[Int]()
(assert (Seq_equal newValues_V1@167@01 (as Seq_empty  Seq<Int>)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; newValues_V1 := sortedValues_4b5075e4_PMTree(t_V0_CN0)
; [eval] sortedValues_4b5075e4_PMTree(t_V0_CN0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@179@01 $Perm)
(assert ($Perm.isReadVar $k@179@01))
(assert (< $k@179@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@179@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@179@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@179@01))
(assert (and (< $k@179@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@179@01))))
(declare-const newValues_V1@180@01 Seq<Int>)
(assert (Seq_equal
  newValues_V1@180@01
  (sortedValues_4b5075e4_PMTree $t@163@01 t_V0@161@01)))
; [exec]
; assert oldValues_V1 == newValues_V1
; [eval] oldValues_V1 == newValues_V1
(set-option :timeout 0)
(push) ; 3
(assert (not (Seq_equal oldValues_V1@174@01 newValues_V1@180@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal oldValues_V1@174@01 newValues_V1@180@01))
; [exec]
; label returnLabel
(pop) ; 2
(pop) ; 1
; ---------- client2_4b5075e4_F ----------
(declare-const t_V0@181@01 ShStruct1<Ref>)
(declare-const value_V0@182@01 Int)
(declare-const t_V0@183@01 ShStruct1<Ref>)
(declare-const value_V0@184@01 Int)
(push) ; 1
(declare-const $t@185@01 $Snap)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@186@01 $Snap)
(pop) ; 2
(push) ; 2
; [exec]
; var value_V0_CN1: Int
(declare-const value_V0_CN1@187@01 Int)
; [exec]
; var t_V0_CN0: ShStruct1[Ref]
(declare-const t_V0_CN0@188@01 ShStruct1<Ref>)
; [exec]
; var newValues_V1: Seq[Int]
(declare-const newValues_V1@189@01 Seq<Int>)
; [exec]
; var oldValues_V1: Seq[Int]
(declare-const oldValues_V1@190@01 Seq<Int>)
; [exec]
; inhale t_V0_CN0 ==
;   shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(declare-const $t@191@01 $Snap)
(assert (= $t@191@01 $Snap.unit))
; [eval] t_V0_CN0 == shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 3
(assert (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (=
  t_V0_CN0@188@01
  (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale value_V0_CN1 == 0
(declare-const $t@192@01 $Snap)
(assert (= $t@192@01 $Snap.unit))
; [eval] value_V0_CN1 == 0
(assert (= value_V0_CN1@187@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; t_V0_CN0 := t_V0
; [exec]
; value_V0_CN1 := value_V0
; [exec]
; inhale oldValues_V1 == Seq[Int]()
(declare-const $t@193@01 $Snap)
(assert (= $t@193@01 $Snap.unit))
; [eval] oldValues_V1 == Seq[Int]()
; [eval] Seq[Int]()
(assert (Seq_equal oldValues_V1@190@01 (as Seq_empty  Seq<Int>)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; oldValues_V1 := sortedValues_4b5075e4_PMTree(t_V0_CN0)
; [eval] sortedValues_4b5075e4_PMTree(t_V0_CN0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@194@01 $Perm)
(assert ($Perm.isReadVar $k@194@01))
(assert (< $k@194@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@194@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@194@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (sortedValues_4b5075e4_PMTree%precondition $t@185@01 t_V0@183@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@194@01))
(assert (and
  (< $k@194@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@194@01))
  (sortedValues_4b5075e4_PMTree%precondition $t@185@01 t_V0@183@01)))
(declare-const oldValues_V1@195@01 Seq<Int>)
(assert (Seq_equal
  oldValues_V1@195@01
  (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)))
; [exec]
; Insert_4b5075e4_PMTree(t_V0_CN0, value_V0_CN1)
(declare-const $t@196@01 $Snap)
(assert (= $t@196@01 ($Snap.combine ($Snap.first $t@196@01) ($Snap.second $t@196@01))))
(assert (=
  ($Snap.second $t@196@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@196@01))
    ($Snap.second ($Snap.second $t@196@01)))))
(assert (= ($Snap.first ($Snap.second $t@196@01)) $Snap.unit))
; [eval] |sortedValues_4b5075e4_PMTree(t_V0)| == old(|sortedValues_4b5075e4_PMTree(t_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0))) ? 0 : 1)
; [eval] |sortedValues_4b5075e4_PMTree(t_V0)|
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@197@01 $Perm)
(assert ($Perm.isReadVar $k@197@01))
(assert (< $k@197@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@197@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@197@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (sortedValues_4b5075e4_PMTree%precondition ($Snap.first $t@196@01) t_V0@183@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@197@01))
(assert (and
  (< $k@197@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@197@01))
  (sortedValues_4b5075e4_PMTree%precondition ($Snap.first $t@196@01) t_V0@183@01)))
; [eval] old(|sortedValues_4b5075e4_PMTree(t_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0))) ? 0 : 1)
; [eval] old(|sortedValues_4b5075e4_PMTree(t_V0)|)
; [eval] |sortedValues_4b5075e4_PMTree(t_V0)|
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@198@01 $Perm)
(assert ($Perm.isReadVar $k@198@01))
(assert (< $k@198@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@198@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@198@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@198@01))
(assert (and (< $k@198@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@198@01))))
; [eval] ((value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0))) ? 0 : 1)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0)))
; [eval] old(sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@199@01 $Perm)
(assert ($Perm.isReadVar $k@199@01))
(assert (< $k@199@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@199@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@199@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@199@01))
(assert (and (< $k@199@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@199@01))))
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
    value_V0@184@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
  value_V0@184@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 49 | value_V0@184@01 in sortedValues_4b5075e4_PMTree($t@185@01, t_V0@183@01) | live]
; [else-branch: 49 | !(value_V0@184@01 in sortedValues_4b5075e4_PMTree($t@185@01, t_V0@183@01)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 49 | value_V0@184@01 in sortedValues_4b5075e4_PMTree($t@185@01, t_V0@183@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
  value_V0@184@01))
(pop) ; 4
(push) ; 4
; [else-branch: 49 | !(value_V0@184@01 in sortedValues_4b5075e4_PMTree($t@185@01, t_V0@183@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
    value_V0@184@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
      value_V0@184@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
    value_V0@184@01)))
(assert (=
  (Seq_length (sortedValues_4b5075e4_PMTree ($Snap.first $t@196@01) t_V0@183@01))
  (+
    (Seq_length (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01))
    (ite
      (Seq_contains
        (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
        value_V0@184@01)
      0
      1))))
(assert (=
  ($Snap.second ($Snap.second $t@196@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@196@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@196@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@196@01))) $Snap.unit))
; [eval] (forall i_V1: Int :: { (i_V1 in old(sortedValues_4b5075e4_PMTree(t_V0))) } { (i_V1 in sortedValues_4b5075e4_PMTree(t_V0)) } (i_V1 in old(sortedValues_4b5075e4_PMTree(t_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMTree(t_V0)))
(declare-const i_V1@200@01 Int)
(push) ; 3
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMTree(t_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMTree(t_V0))
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMTree(t_V0)))
; [eval] old(sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(push) ; 4
(declare-const $k@201@01 $Perm)
(assert ($Perm.isReadVar $k@201@01))
(assert (< $k@201@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@201@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@201@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@201@01))
(assert (and (< $k@201@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@201@01))))
(set-option :timeout 0)
(push) ; 4
; [then-branch: 50 | i_V1@200@01 in sortedValues_4b5075e4_PMTree($t@185@01, t_V0@183@01) | live]
; [else-branch: 50 | !(i_V1@200@01 in sortedValues_4b5075e4_PMTree($t@185@01, t_V0@183@01)) | live]
(push) ; 5
; [then-branch: 50 | i_V1@200@01 in sortedValues_4b5075e4_PMTree($t@185@01, t_V0@183@01)]
(assert (Seq_contains (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01) i_V1@200@01))
; [eval] (i_V1 in sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(push) ; 6
(declare-const $k@202@01 $Perm)
(assert ($Perm.isReadVar $k@202@01))
(assert (< $k@202@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@202@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@202@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@202@01))
(assert (and (< $k@202@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@202@01))))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 50 | !(i_V1@200@01 in sortedValues_4b5075e4_PMTree($t@185@01, t_V0@183@01))]
(assert (not
  (Seq_contains (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01) i_V1@200@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@202@01))
(assert (=>
  (Seq_contains (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01) i_V1@200@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
      i_V1@200@01)
    (< $k@202@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@202@01)))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
      i_V1@200@01))
  (Seq_contains (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01) i_V1@200@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@201@01))
(assert ($Perm.isReadVar $k@202@01))
(assert (< $k@201@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@201@01)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@200@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
        i_V1@200@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
          i_V1@200@01)
        (< $k@202@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@202@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
          i_V1@200@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
        i_V1@200@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
    i_V1@200@01))
  :qid |prog.l457-aux|)))
(assert (forall ((i_V1@200@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
        i_V1@200@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
          i_V1@200@01)
        (< $k@202@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@202@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
          i_V1@200@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
        i_V1@200@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.first $t@196@01) t_V0@183@01)
    i_V1@200@01))
  :qid |prog.l457-aux|)))
(assert (forall ((i_V1@200@01 Int)) (!
  (=>
    (Seq_contains
      (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
      i_V1@200@01)
    (Seq_contains
      (sortedValues_4b5075e4_PMTree ($Snap.first $t@196@01) t_V0@183@01)
      i_V1@200@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
    i_V1@200@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMTree ($Snap.first $t@196@01) t_V0@183@01)
    i_V1@200@01))
  :qid |prog.l457|)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@196@01))) $Snap.unit))
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0))) ==> old(sortedValues_4b5075e4_PMTree(t_V0)) == sortedValues_4b5075e4_PMTree(t_V0)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMTree(t_V0)))
; [eval] old(sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(push) ; 3
(declare-const $k@203@01 $Perm)
(assert ($Perm.isReadVar $k@203@01))
(assert (< $k@203@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@203@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@203@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@203@01))
(assert (and (< $k@203@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@203@01))))
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
    value_V0@184@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
  value_V0@184@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 51 | value_V0@184@01 in sortedValues_4b5075e4_PMTree($t@185@01, t_V0@183@01) | live]
; [else-branch: 51 | !(value_V0@184@01 in sortedValues_4b5075e4_PMTree($t@185@01, t_V0@183@01)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 51 | value_V0@184@01 in sortedValues_4b5075e4_PMTree($t@185@01, t_V0@183@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
  value_V0@184@01))
; [eval] old(sortedValues_4b5075e4_PMTree(t_V0)) == sortedValues_4b5075e4_PMTree(t_V0)
; [eval] old(sortedValues_4b5075e4_PMTree(t_V0))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(push) ; 5
(declare-const $k@204@01 $Perm)
(assert ($Perm.isReadVar $k@204@01))
(assert (< $k@204@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@204@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@204@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@204@01))
(assert (and (< $k@204@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@204@01))))
; [eval] sortedValues_4b5075e4_PMTree(t_V0)
(set-option :timeout 0)
(push) ; 5
(declare-const $k@205@01 $Perm)
(assert ($Perm.isReadVar $k@205@01))
(assert (< $k@205@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@205@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@205@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@205@01))
(assert (and (< $k@205@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@205@01))))
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 51 | !(value_V0@184@01 in sortedValues_4b5075e4_PMTree($t@185@01, t_V0@183@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
    value_V0@184@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@204@01))
(assert ($Perm.isReadVar $k@205@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
    value_V0@184@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
      value_V0@184@01)
    (< $k@204@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@204@01))
    (< $k@205@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@205@01)))))
; Joined path conditions
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
    value_V0@184@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMTree $t@185@01 t_V0@183@01)
    (sortedValues_4b5075e4_PMTree ($Snap.first $t@196@01) t_V0@183@01))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale newValues_V1 == Seq[Int]()
(declare-const $t@206@01 $Snap)
(assert (= $t@206@01 $Snap.unit))
; [eval] newValues_V1 == Seq[Int]()
; [eval] Seq[Int]()
(assert (Seq_equal newValues_V1@189@01 (as Seq_empty  Seq<Int>)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; newValues_V1 := sortedValues_4b5075e4_PMTree(t_V0_CN0)
; [eval] sortedValues_4b5075e4_PMTree(t_V0_CN0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@207@01 $Perm)
(assert ($Perm.isReadVar $k@207@01))
(assert (< $k@207@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@207@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@207@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@207@01))
(assert (and (< $k@207@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@207@01))))
(declare-const newValues_V1@208@01 Seq<Int>)
(assert (Seq_equal
  newValues_V1@208@01
  (sortedValues_4b5075e4_PMTree ($Snap.first $t@196@01) t_V0@183@01)))
; [exec]
; assert pureContains_4b5075e4_PMTree(t_V0_CN0, value_V0_CN1)
; [eval] pureContains_4b5075e4_PMTree(t_V0_CN0, value_V0_CN1)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@209@01 $Perm)
(assert ($Perm.isReadVar $k@209@01))
(assert (< $k@209@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@209@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@209@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (pureContains_4b5075e4_PMTree%precondition ($Snap.first $t@196@01) t_V0@183@01 value_V0@184@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@209@01))
(assert (and
  (< $k@209@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@209@01))
  (pureContains_4b5075e4_PMTree%precondition ($Snap.first $t@196@01) t_V0@183@01 value_V0@184@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (pureContains_4b5075e4_PMTree ($Snap.first $t@196@01) t_V0@183@01 value_V0@184@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.03s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] pureContains_4b5075e4_PMTree(t_V0_CN0, value_V0_CN1)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@210@01 $Perm)
(assert ($Perm.isReadVar $k@210@01))
(assert (< $k@210@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@210@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@210@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@210@01))
(assert (and (< $k@210@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@210@01))))
(set-option :timeout 0)
(push) ; 3
(assert (not (pureContains_4b5075e4_PMTree ($Snap.first $t@196@01) t_V0@183@01 value_V0@184@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.04s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] pureContains_4b5075e4_PMTree(t_V0_CN0, value_V0_CN1)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@211@01 $Perm)
(assert ($Perm.isReadVar $k@211@01))
(assert (< $k@211@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@211@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@211@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@211@01))
(assert (and (< $k@211@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@211@01))))
(set-option :timeout 0)
(push) ; 3
(assert (not (pureContains_4b5075e4_PMTree ($Snap.first $t@196@01) t_V0@183@01 value_V0@184@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.03s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] pureContains_4b5075e4_PMTree(t_V0_CN0, value_V0_CN1)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@212@01 $Perm)
(assert ($Perm.isReadVar $k@212@01))
(assert (< $k@212@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@212@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@212@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@212@01))
(assert (and (< $k@212@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@212@01))))
(set-option :timeout 0)
(push) ; 3
(assert (not (pureContains_4b5075e4_PMTree ($Snap.first $t@196@01) t_V0@183@01 value_V0@184@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.03s
; (get-info :all-statistics)
(pop) ; 2
(pop) ; 1
; ---------- contains_4b5075e4_PMnode ----------
(declare-const n_V0@213@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const value_V0@214@01 Int)
(declare-const dividend_V0@215@01 Int)
(declare-const lowerBound_V0@216@01 Option<Int>)
(declare-const upperBound_V0@217@01 Option<Int>)
(declare-const res_V0@218@01 Bool)
(declare-const n_V0@219@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const value_V0@220@01 Int)
(declare-const dividend_V0@221@01 Int)
(declare-const lowerBound_V0@222@01 Option<Int>)
(declare-const upperBound_V0@223@01 Option<Int>)
(declare-const res_V0@224@01 Bool)
(push) ; 1
(declare-const $t@225@01 $Snap)
(assert (= $t@225@01 ($Snap.combine ($Snap.first $t@225@01) ($Snap.second $t@225@01))))
(assert (= ($Snap.first $t@225@01) $Snap.unit))
; [eval] dividend_V0 > 0
(assert (> dividend_V0@221@01 0))
(assert (=
  ($Snap.second $t@225@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@225@01))
    ($Snap.second ($Snap.second $t@225@01)))))
(push) ; 2
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01))))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (<= $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (= ($Snap.second ($Snap.second $t@225@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 2
(declare-const $k@226@01 $Perm)
(assert ($Perm.isReadVar $k@226@01))
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@226@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@226@01)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second $t@225@01)) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@226@01))
(assert (and
  (< $k@226@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@226@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second $t@225@01)) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second $t@225@01)) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@227@01 $Snap)
(assert (= $t@227@01 ($Snap.combine ($Snap.first $t@227@01) ($Snap.second $t@227@01))))
(push) ; 3
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second $t@227@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@227@01))
    ($Snap.second ($Snap.second $t@227@01)))))
(assert (= ($Snap.first ($Snap.second $t@227@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 3
(declare-const $k@228@01 $Perm)
(assert ($Perm.isReadVar $k@228@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (< $k@228@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@228@01)))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@228@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@227@01) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@228@01))
(assert (and
  (< $k@228@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@228@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@227@01) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@227@01) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(assert (= ($Snap.second ($Snap.second $t@227@01)) $Snap.unit))
; [eval] res_V0 == (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@229@01 $Perm)
(assert ($Perm.isReadVar $k@229@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (< $k@229@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@229@01)))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@230@01 $Perm)
(assert ($Perm.isReadVar $k@230@01))
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $k@230@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@230@01)))
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@230@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@230@01))
(assert (and
  (< $k@230@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@230@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@227@01)
  $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@229@01))
(assert ($Perm.isReadVar $k@230@01))
(assert (and
  (< $k@229@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@229@01))
  (< $k@230@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@230@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@227@01)
    $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(assert (=
  res_V0@224@01
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@227@01)
      $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)
    value_V0@220@01)))
(pop) ; 2
(set-option :timeout 0)
(push) ; 2
; [exec]
; var res_V0_CN5: Bool
(declare-const res_V0_CN5@231@01 Bool)
; [exec]
; var upperBound_V0_CN4: Option[Int]
(declare-const upperBound_V0_CN4@232@01 Option<Int>)
; [exec]
; var lowerBound_V0_CN3: Option[Int]
(declare-const lowerBound_V0_CN3@233@01 Option<Int>)
; [exec]
; var dividend_V0_CN2: Int
(declare-const dividend_V0_CN2@234@01 Int)
; [exec]
; var value_V0_CN1: Int
(declare-const value_V0_CN1@235@01 Int)
; [exec]
; var n_V0_CN0: ShStruct3[Ref, Ref, Ref]
(declare-const n_V0_CN0@236@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; inhale res_V0 == false
(declare-const $t@237@01 $Snap)
(assert (= $t@237@01 $Snap.unit))
; [eval] res_V0 == false
(assert (= res_V0@224@01 false))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale n_V0_CN0 ==
;   shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(declare-const $t@238@01 $Snap)
(assert (= $t@238@01 $Snap.unit))
; [eval] n_V0_CN0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(assert (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (=
  n_V0_CN0@236@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale value_V0_CN1 == 0
(declare-const $t@239@01 $Snap)
(assert (= $t@239@01 $Snap.unit))
; [eval] value_V0_CN1 == 0
(assert (= value_V0_CN1@235@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale dividend_V0_CN2 == 0
(declare-const $t@240@01 $Snap)
(assert (= $t@240@01 $Snap.unit))
; [eval] dividend_V0_CN2 == 0
(assert (= dividend_V0_CN2@234@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale lowerBound_V0_CN3 == (optNone(): Option[Int])
(declare-const $t@241@01 $Snap)
(assert (= $t@241@01 $Snap.unit))
; [eval] lowerBound_V0_CN3 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(assert (= lowerBound_V0_CN3@233@01 (as optNone<Option<Int>>  Option<Int>)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale upperBound_V0_CN4 == (optNone(): Option[Int])
(declare-const $t@242@01 $Snap)
(assert (= $t@242@01 $Snap.unit))
; [eval] upperBound_V0_CN4 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(assert (= upperBound_V0_CN4@232@01 (as optNone<Option<Int>>  Option<Int>)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale res_V0_CN5 == false
(declare-const $t@243@01 $Snap)
(assert (= $t@243@01 $Snap.unit))
; [eval] res_V0_CN5 == false
(assert (= res_V0_CN5@231@01 false))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; n_V0_CN0 := n_V0
; [exec]
; value_V0_CN1 := value_V0
; [exec]
; dividend_V0_CN2 := dividend_V0
; [exec]
; lowerBound_V0_CN3 := lowerBound_V0
; [exec]
; upperBound_V0_CN4 := upperBound_V0
; [exec]
; unfold acc(tree_4b5075e4_PMnode(n_V0_CN0), 1 / dividend_V0_CN2)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.first ($Snap.second $t@225@01))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
    ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
; [eval] (ShStructget0of3(n_V0): Ref)
(assert (<= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.Write))
(assert (=>
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))
  (not (= (ShStructget0of3<Ref> n_V0@219@01) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))))
; [eval] (ShStructget1of3(n_V0): Ref)
(assert (=>
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))
  (not (= (ShStructget1of3<Ref> n_V0@219@01) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))))
; [eval] (ShStructget2of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> n_V0@219@01) (ShStructget2of3<Ref> n_V0@219@01))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))
  (not (= (ShStructget2of3<Ref> n_V0@219@01) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))))))
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 52 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 52 | First:(Second:(First:(Second:($t@225@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 52 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget1of3(n_V0): Ref)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 53 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 53 | First:(Second:(Second:(First:(Second:($t@225@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 53 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget2of3(n_V0): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMnode%trigger ($Snap.first ($Snap.second $t@225@01)) n_V0@219@01))
; [eval] (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ == value_V0_CN1
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
    value_V0@220@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
  value_V0@220@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 54 | First:(First:(Second:($t@225@01))) == value_V0@220@01 | live]
; [else-branch: 54 | First:(First:(Second:($t@225@01))) != value_V0@220@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 54 | First:(First:(Second:($t@225@01))) == value_V0@220@01]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
  value_V0@220@01))
; [exec]
; res_V0_CN5 := true
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), 1 / dividend_V0_CN2)
(push) ; 6
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget0of3(n_V0): Ref)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget1of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget2of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 55 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 55 | First:(Second:(First:(Second:($t@225@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 55 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget1of3(n_V0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 56 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 56 | First:(Second:(Second:(First:(Second:($t@225@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 56 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget2of3(n_V0): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))))))) n_V0@219@01))
; [exec]
; res_V0_CN5 := res_V0_CN5
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN5
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@244@01 $Perm)
(assert ($Perm.isReadVar $k@244@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< $k@244@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@244@01)))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@244@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))))))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@244@01))
(assert (and
  (< $k@244@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@244@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))))))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(set-option :timeout 0)
(push) ; 8
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))))))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))))))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
; [eval] res_V0 == (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 8
(declare-const $k@245@01 $Perm)
(assert ($Perm.isReadVar $k@245@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< $k@245@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@245@01)))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@245@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@246@01 $Perm)
(assert ($Perm.isReadVar $k@246@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< $k@246@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@246@01)))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@246@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@246@01))
(assert (and
  (< $k@246@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@246@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))))))
  $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@245@01))
(assert ($Perm.isReadVar $k@246@01))
(assert (and
  (< $k@245@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@245@01))
  (< $k@246@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@246@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))))))
    $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(set-option :timeout 0)
(push) ; 8
(assert (not (=
  true
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))))))
      $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)
    value_V0@220@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  true
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))))))
      $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)
    value_V0@220@01)))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 54 | First:(First:(Second:($t@225@01))) != value_V0@220@01]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
    value_V0@220@01)))
(pop) ; 5
; [eval] !((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ == value_V0_CN1)
; [eval] (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ == value_V0_CN1
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
  value_V0@220@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
    value_V0@220@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 57 | First:(First:(Second:($t@225@01))) != value_V0@220@01 | live]
; [else-branch: 57 | First:(First:(Second:($t@225@01))) == value_V0@220@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 57 | First:(First:(Second:($t@225@01))) != value_V0@220@01]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
    value_V0@220@01)))
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 58 | value_V0@220@01 < First:(First:(Second:($t@225@01))) | live]
; [else-branch: 58 | !(value_V0@220@01 < First:(First:(Second:($t@225@01)))) | live]
(push) ; 7
; [then-branch: 58 | value_V0@220@01 < First:(First:(Second:($t@225@01)))]
(assert (<
  value_V0@220@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 58 | !(value_V0@220@01 < First:(First:(Second:($t@225@01))))]
(assert (not
  (<
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
  (<
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (<
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 59 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01))) | live]
; [else-branch: 59 | !(First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01)))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 59 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01)))]
(assert (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (<
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
; [exec]
; var N10: Bool
(declare-const N10@247@01 Bool)
; [exec]
; N10 := contains_4b5075e4_PMnode((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   value_V0_CN1, dividend_V0_CN2, lowerBound_V0_CN3, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]))
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] dividend_V0 > 0
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@248@01 $Perm)
(assert ($Perm.isReadVar $k@248@01))
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (< $k@248@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@248@01)))
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@248@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))) lowerBound_V0@222@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@248@01))
(assert (and
  (< $k@248@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@248@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))) lowerBound_V0@222@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(set-option :timeout 0)
(push) ; 7
(assert (not (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))) lowerBound_V0@222@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))) lowerBound_V0@222@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(declare-const res_V0@249@01 Bool)
(declare-const $t@250@01 $Snap)
(assert (= $t@250@01 ($Snap.combine ($Snap.first $t@250@01) ($Snap.second $t@250@01))))
(push) ; 7
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second $t@250@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@250@01))
    ($Snap.second ($Snap.second $t@250@01)))))
(assert (= ($Snap.first ($Snap.second $t@250@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@251@01 $Perm)
(assert ($Perm.isReadVar $k@251@01))
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (< $k@251@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@251@01)))
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@251@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@250@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))) lowerBound_V0@222@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@251@01))
(assert (and
  (< $k@251@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@251@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@250@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))) lowerBound_V0@222@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@250@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))) lowerBound_V0@222@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(assert (= ($Snap.second ($Snap.second $t@250@01)) $Snap.unit))
; [eval] res_V0 == (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@252@01 $Perm)
(assert ($Perm.isReadVar $k@252@01))
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (< $k@252@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@252@01)))
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@252@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@253@01 $Perm)
(assert ($Perm.isReadVar $k@253@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< $k@253@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@253@01)))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@253@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@253@01))
(assert (and
  (< $k@253@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@253@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@250@01)
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))) lowerBound_V0@222@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@252@01))
(assert ($Perm.isReadVar $k@253@01))
(assert (and
  (< $k@252@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@252@01))
  (< $k@253@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@253@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@250@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))) lowerBound_V0@222@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(assert (=
  res_V0@249@01
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@250@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))) lowerBound_V0@222@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
    value_V0@220@01)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res_V0_CN5 := N10
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), 1 / dividend_V0_CN2)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget0of3(n_V0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget1of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget2of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 60 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 60 | First:(Second:(First:(Second:($t@225@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 60 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget1of3(n_V0): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 61 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 61 | First:(Second:(Second:(First:(Second:($t@225@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 61 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget2of3(n_V0): Ref)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        ($Snap.first $t@250@01)
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))))))) n_V0@219@01))
; [exec]
; res_V0_CN5 := res_V0_CN5
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN5
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@254@01 $Perm)
(assert ($Perm.isReadVar $k@254@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< $k@254@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@254@01)))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@254@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        ($Snap.first $t@250@01)
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))))))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@254@01))
(assert (and
  (< $k@254@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@254@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        ($Snap.combine
          ($Snap.first $t@250@01)
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))))))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        ($Snap.first $t@250@01)
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))))))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        ($Snap.first $t@250@01)
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))))))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
; [eval] res_V0 == (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@255@01 $Perm)
(assert ($Perm.isReadVar $k@255@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< $k@255@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@255@01)))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@255@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@256@01 $Perm)
(assert ($Perm.isReadVar $k@256@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< $k@256@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@256@01)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@256@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@256@01))
(assert (and
  (< $k@256@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@256@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        ($Snap.combine
          ($Snap.first $t@250@01)
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))))))
  $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@255@01))
(assert ($Perm.isReadVar $k@256@01))
(assert (and
  (< $k@255@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@255@01))
  (< $k@256@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@256@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
          ($Snap.combine
            ($Snap.first $t@250@01)
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))))))
    $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  res_V0@249@01
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
            ($Snap.combine
              ($Snap.first $t@250@01)
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))))))
      $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)
    value_V0@220@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(assert (=
  res_V0@249@01
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
            ($Snap.combine
              ($Snap.first $t@250@01)
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))))))
      $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)
    value_V0@220@01)))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 59 | !(First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(pop) ; 6
; [eval] !(value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()))
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 62 | value_V0@220@01 < First:(First:(Second:($t@225@01))) | live]
; [else-branch: 62 | !(value_V0@220@01 < First:(First:(Second:($t@225@01)))) | live]
(push) ; 7
; [then-branch: 62 | value_V0@220@01 < First:(First:(Second:($t@225@01)))]
(assert (<
  value_V0@220@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 62 | !(value_V0@220@01 < First:(First:(Second:($t@225@01))))]
(assert (not
  (<
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (<
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 63 | !(First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01)))) | live]
; [else-branch: 63 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 63 | !(First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
; [then-branch: 64 | value_V0@220@01 > First:(First:(Second:($t@225@01))) | live]
; [else-branch: 64 | !(value_V0@220@01 > First:(First:(Second:($t@225@01)))) | live]
(push) ; 8
; [then-branch: 64 | value_V0@220@01 > First:(First:(Second:($t@225@01)))]
(assert (>
  value_V0@220@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 64 | !(value_V0@220@01 > First:(First:(Second:($t@225@01))))]
(assert (not
  (>
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
  (>
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (>
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 65 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01))) | live]
; [else-branch: 65 | !(First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01)))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 65 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01)))]
(assert (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (>
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
; [exec]
; var N9: Bool
(declare-const N9@257@01 Bool)
; [exec]
; N9 := contains_4b5075e4_PMnode((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   value_V0_CN1, dividend_V0_CN2, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]),
;   upperBound_V0_CN4)
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] dividend_V0 > 0
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@258@01 $Perm)
(assert ($Perm.isReadVar $k@258@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< $k@258@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@258@01)))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@258@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))) upperBound_V0@223@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@258@01))
(assert (and
  (< $k@258@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@258@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))) upperBound_V0@223@01)))
(set-option :timeout 0)
(push) ; 8
(assert (not (sorted_4b5075e4_PMnode ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))) upperBound_V0@223@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))) upperBound_V0@223@01))
(declare-const res_V0@259@01 Bool)
(declare-const $t@260@01 $Snap)
(assert (= $t@260@01 ($Snap.combine ($Snap.first $t@260@01) ($Snap.second $t@260@01))))
(push) ; 8
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second $t@260@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@260@01))
    ($Snap.second ($Snap.second $t@260@01)))))
(assert (= ($Snap.first ($Snap.second $t@260@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@261@01 $Perm)
(assert ($Perm.isReadVar $k@261@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< $k@261@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@261@01)))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@261@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@260@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))) upperBound_V0@223@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@261@01))
(assert (and
  (< $k@261@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@261@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@260@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))) upperBound_V0@223@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@260@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))) upperBound_V0@223@01))
(assert (= ($Snap.second ($Snap.second $t@260@01)) $Snap.unit))
; [eval] res_V0 == (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@262@01 $Perm)
(assert ($Perm.isReadVar $k@262@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< $k@262@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@262@01)))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@262@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@263@01 $Perm)
(assert ($Perm.isReadVar $k@263@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< $k@263@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@263@01)))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@263@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@263@01))
(assert (and
  (< $k@263@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@263@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@260@01)
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))) upperBound_V0@223@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@262@01))
(assert ($Perm.isReadVar $k@263@01))
(assert (and
  (< $k@262@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@262@01))
  (< $k@263@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@263@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@260@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))) upperBound_V0@223@01)))
(assert (=
  res_V0@259@01
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@260@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))) upperBound_V0@223@01)
    value_V0@220@01)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res_V0_CN5 := N9
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), 1 / dividend_V0_CN2)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget0of3(n_V0): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget1of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget2of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 66 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 66 | First:(Second:(First:(Second:($t@225@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 66 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget1of3(n_V0): Ref)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 67 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 67 | First:(Second:(Second:(First:(Second:($t@225@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 67 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget2of3(n_V0): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        ($Snap.first $t@260@01))))) n_V0@219@01))
; [exec]
; res_V0_CN5 := res_V0_CN5
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN5
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@264@01 $Perm)
(assert ($Perm.isReadVar $k@264@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< $k@264@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@264@01)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@264@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        ($Snap.first $t@260@01))))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@264@01))
(assert (and
  (< $k@264@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@264@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
          ($Snap.first $t@260@01))))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(set-option :timeout 0)
(push) ; 10
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        ($Snap.first $t@260@01))))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        ($Snap.first $t@260@01))))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
; [eval] res_V0 == (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@265@01 $Perm)
(assert ($Perm.isReadVar $k@265@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< $k@265@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@265@01)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@265@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@266@01 $Perm)
(assert ($Perm.isReadVar $k@266@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (< $k@266@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@266@01)))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@266@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@266@01))
(assert (and
  (< $k@266@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@266@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
          ($Snap.first $t@260@01)))))
  $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@265@01))
(assert ($Perm.isReadVar $k@266@01))
(assert (and
  (< $k@265@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@265@01))
  (< $k@266@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@266@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
            ($Snap.first $t@260@01)))))
    $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(set-option :timeout 0)
(push) ; 10
(assert (not (=
  res_V0@259@01
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
              ($Snap.first $t@260@01)))))
      $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)
    value_V0@220@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  res_V0@259@01
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
              ($Snap.first $t@260@01)))))
      $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)
    value_V0@220@01)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [eval] !(value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()))
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
; [then-branch: 68 | value_V0@220@01 > First:(First:(Second:($t@225@01))) | live]
; [else-branch: 68 | !(value_V0@220@01 > First:(First:(Second:($t@225@01)))) | live]
(push) ; 8
; [then-branch: 68 | value_V0@220@01 > First:(First:(Second:($t@225@01)))]
(assert (>
  value_V0@220@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 68 | !(value_V0@220@01 > First:(First:(Second:($t@225@01))))]
(assert (not
  (>
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (>
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 69 | !(First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01)))) | dead]
; [else-branch: 69 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01))) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 69 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01)))]
(assert (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (>
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 63 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01)))]
(assert (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (<
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 57 | First:(First:(Second:($t@225@01))) == value_V0@220@01]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
  value_V0@220@01))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 53 | First:(Second:(Second:(First:(Second:($t@225@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
  $Snap.unit))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMnode%trigger ($Snap.first ($Snap.second $t@225@01)) n_V0@219@01))
; [eval] (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ == value_V0_CN1
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
    value_V0@220@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
  value_V0@220@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 70 | First:(First:(Second:($t@225@01))) == value_V0@220@01 | live]
; [else-branch: 70 | First:(First:(Second:($t@225@01))) != value_V0@220@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 70 | First:(First:(Second:($t@225@01))) == value_V0@220@01]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
  value_V0@220@01))
; [exec]
; res_V0_CN5 := true
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), 1 / dividend_V0_CN2)
(push) ; 6
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget0of3(n_V0): Ref)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget1of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget2of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 71 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 71 | First:(Second:(First:(Second:($t@225@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 71 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget1of3(n_V0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
; [then-branch: 72 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 72 | First:(Second:(Second:(First:(Second:($t@225@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 7
; [else-branch: 72 | First:(Second:(Second:(First:(Second:($t@225@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        $Snap.unit)))) n_V0@219@01))
; [exec]
; res_V0_CN5 := res_V0_CN5
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN5
(push) ; 8
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@267@01 $Perm)
(assert ($Perm.isReadVar $k@267@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< $k@267@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@267@01)))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@267@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        $Snap.unit)))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@267@01))
(assert (and
  (< $k@267@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@267@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
          $Snap.unit)))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(set-option :timeout 0)
(push) ; 8
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        $Snap.unit)))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        $Snap.unit)))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
; [eval] res_V0 == (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 8
(declare-const $k@268@01 $Perm)
(assert ($Perm.isReadVar $k@268@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< $k@268@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@268@01)))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@268@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@269@01 $Perm)
(assert ($Perm.isReadVar $k@269@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< $k@269@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@269@01)))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@269@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@269@01))
(assert (and
  (< $k@269@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@269@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
          $Snap.unit))))
  $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@268@01))
(assert ($Perm.isReadVar $k@269@01))
(assert (and
  (< $k@268@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@268@01))
  (< $k@269@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@269@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
            $Snap.unit))))
    $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(set-option :timeout 0)
(push) ; 8
(assert (not (=
  true
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
              $Snap.unit))))
      $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)
    value_V0@220@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  true
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
              $Snap.unit))))
      $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)
    value_V0@220@01)))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 70 | First:(First:(Second:($t@225@01))) != value_V0@220@01]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
    value_V0@220@01)))
(pop) ; 5
; [eval] !((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ == value_V0_CN1)
; [eval] (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ == value_V0_CN1
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
  value_V0@220@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
    value_V0@220@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 73 | First:(First:(Second:($t@225@01))) != value_V0@220@01 | live]
; [else-branch: 73 | First:(First:(Second:($t@225@01))) == value_V0@220@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 73 | First:(First:(Second:($t@225@01))) != value_V0@220@01]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
    value_V0@220@01)))
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 74 | value_V0@220@01 < First:(First:(Second:($t@225@01))) | live]
; [else-branch: 74 | !(value_V0@220@01 < First:(First:(Second:($t@225@01)))) | live]
(push) ; 7
; [then-branch: 74 | value_V0@220@01 < First:(First:(Second:($t@225@01)))]
(assert (<
  value_V0@220@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 74 | !(value_V0@220@01 < First:(First:(Second:($t@225@01))))]
(assert (not
  (<
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
  (<
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (<
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 75 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01))) | live]
; [else-branch: 75 | !(First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01)))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 75 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01)))]
(assert (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (<
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
; [exec]
; var N10: Bool
(declare-const N10@270@01 Bool)
; [exec]
; N10 := contains_4b5075e4_PMnode((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   value_V0_CN1, dividend_V0_CN2, lowerBound_V0_CN3, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]))
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] dividend_V0 > 0
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@271@01 $Perm)
(assert ($Perm.isReadVar $k@271@01))
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (< $k@271@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@271@01)))
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@271@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))) lowerBound_V0@222@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@271@01))
(assert (and
  (< $k@271@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@271@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))) lowerBound_V0@222@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(set-option :timeout 0)
(push) ; 7
(assert (not (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))) lowerBound_V0@222@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))) lowerBound_V0@222@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(declare-const res_V0@272@01 Bool)
(declare-const $t@273@01 $Snap)
(assert (= $t@273@01 ($Snap.combine ($Snap.first $t@273@01) ($Snap.second $t@273@01))))
(push) ; 7
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second $t@273@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@273@01))
    ($Snap.second ($Snap.second $t@273@01)))))
(assert (= ($Snap.first ($Snap.second $t@273@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 7
(declare-const $k@274@01 $Perm)
(assert ($Perm.isReadVar $k@274@01))
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (< $k@274@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@274@01)))
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@274@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@273@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))) lowerBound_V0@222@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@274@01))
(assert (and
  (< $k@274@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@274@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@273@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))) lowerBound_V0@222@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@273@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))) lowerBound_V0@222@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(assert (= ($Snap.second ($Snap.second $t@273@01)) $Snap.unit))
; [eval] res_V0 == (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@275@01 $Perm)
(assert ($Perm.isReadVar $k@275@01))
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (< $k@275@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@275@01)))
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@275@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@276@01 $Perm)
(assert ($Perm.isReadVar $k@276@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< $k@276@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@276@01)))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@276@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@276@01))
(assert (and
  (< $k@276@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@276@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@273@01)
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))) lowerBound_V0@222@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@275@01))
(assert ($Perm.isReadVar $k@276@01))
(assert (and
  (< $k@275@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@275@01))
  (< $k@276@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@276@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@273@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))) lowerBound_V0@222@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(assert (=
  res_V0@272@01
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@273@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))) lowerBound_V0@222@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
    value_V0@220@01)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res_V0_CN5 := N10
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), 1 / dividend_V0_CN2)
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget0of3(n_V0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget1of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget2of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 76 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 76 | First:(Second:(First:(Second:($t@225@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 76 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget1of3(n_V0): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
; [then-branch: 77 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 77 | First:(Second:(Second:(First:(Second:($t@225@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 8
; [else-branch: 77 | First:(Second:(Second:(First:(Second:($t@225@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine ($Snap.first $t@273@01) $Snap.unit)))) n_V0@219@01))
; [exec]
; res_V0_CN5 := res_V0_CN5
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN5
(push) ; 9
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@277@01 $Perm)
(assert ($Perm.isReadVar $k@277@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< $k@277@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@277@01)))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@277@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine ($Snap.first $t@273@01) $Snap.unit)))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@277@01))
(assert (and
  (< $k@277@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@277@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        ($Snap.combine ($Snap.first $t@273@01) $Snap.unit)))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine ($Snap.first $t@273@01) $Snap.unit)))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine ($Snap.first $t@273@01) $Snap.unit)))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
; [eval] res_V0 == (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@278@01 $Perm)
(assert ($Perm.isReadVar $k@278@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< $k@278@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@278@01)))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@278@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@279@01 $Perm)
(assert ($Perm.isReadVar $k@279@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< $k@279@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@279@01)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@279@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@279@01))
(assert (and
  (< $k@279@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@279@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        ($Snap.combine ($Snap.first $t@273@01) $Snap.unit))))
  $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@278@01))
(assert ($Perm.isReadVar $k@279@01))
(assert (and
  (< $k@278@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@278@01))
  (< $k@279@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@279@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
          ($Snap.combine ($Snap.first $t@273@01) $Snap.unit))))
    $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  res_V0@272@01
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
            ($Snap.combine ($Snap.first $t@273@01) $Snap.unit))))
      $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)
    value_V0@220@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  res_V0@272@01
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
            ($Snap.combine ($Snap.first $t@273@01) $Snap.unit))))
      $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)
    value_V0@220@01)))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 75 | !(First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(pop) ; 6
; [eval] !(value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()))
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 78 | value_V0@220@01 < First:(First:(Second:($t@225@01))) | live]
; [else-branch: 78 | !(value_V0@220@01 < First:(First:(Second:($t@225@01)))) | live]
(push) ; 7
; [then-branch: 78 | value_V0@220@01 < First:(First:(Second:($t@225@01)))]
(assert (<
  value_V0@220@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 78 | !(value_V0@220@01 < First:(First:(Second:($t@225@01))))]
(assert (not
  (<
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (<
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 79 | !(First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01)))) | live]
; [else-branch: 79 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 79 | !(First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
; [then-branch: 80 | value_V0@220@01 > First:(First:(Second:($t@225@01))) | live]
; [else-branch: 80 | !(value_V0@220@01 > First:(First:(Second:($t@225@01)))) | live]
(push) ; 8
; [then-branch: 80 | value_V0@220@01 > First:(First:(Second:($t@225@01)))]
(assert (>
  value_V0@220@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 80 | !(value_V0@220@01 > First:(First:(Second:($t@225@01))))]
(assert (not
  (>
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
  (>
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 81 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01))) | dead]
; [else-branch: 81 | !(First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01)))) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 81 | !(First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(pop) ; 7
; [eval] !(value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()))
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
; [then-branch: 82 | value_V0@220@01 > First:(First:(Second:($t@225@01))) | live]
; [else-branch: 82 | !(value_V0@220@01 > First:(First:(Second:($t@225@01)))) | live]
(push) ; 8
; [then-branch: 82 | value_V0@220@01 > First:(First:(Second:($t@225@01)))]
(assert (>
  value_V0@220@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 82 | !(value_V0@220@01 > First:(First:(Second:($t@225@01))))]
(assert (not
  (>
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (>
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 83 | !(First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01)))) | live]
; [else-branch: 83 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 83 | !(First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
; [exec]
; res_V0_CN5 := false
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), 1 / dividend_V0_CN2)
(push) ; 8
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget0of3(n_V0): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget1of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget2of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 84 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 84 | First:(Second:(First:(Second:($t@225@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 84 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget1of3(n_V0): Ref)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
; [then-branch: 85 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 85 | First:(Second:(Second:(First:(Second:($t@225@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 9
; [else-branch: 85 | First:(Second:(Second:(First:(Second:($t@225@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        $Snap.unit)))) n_V0@219@01))
; [exec]
; res_V0_CN5 := res_V0_CN5
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN5
(push) ; 10
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@280@01 $Perm)
(assert ($Perm.isReadVar $k@280@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< $k@280@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@280@01)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@280@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        $Snap.unit)))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@280@01))
(assert (and
  (< $k@280@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@280@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
          $Snap.unit)))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(set-option :timeout 0)
(push) ; 10
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        $Snap.unit)))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        $Snap.unit)))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
; [eval] res_V0 == (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@281@01 $Perm)
(assert ($Perm.isReadVar $k@281@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< $k@281@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@281@01)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@281@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@282@01 $Perm)
(assert ($Perm.isReadVar $k@282@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (< $k@282@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@282@01)))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@282@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@282@01))
(assert (and
  (< $k@282@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@282@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
          $Snap.unit))))
  $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@281@01))
(assert ($Perm.isReadVar $k@282@01))
(assert (and
  (< $k@281@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@281@01))
  (< $k@282@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@282@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
            $Snap.unit))))
    $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(set-option :timeout 0)
(push) ; 10
(assert (not (=
  false
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
              $Snap.unit))))
      $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)
    value_V0@220@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  false
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
              $Snap.unit))))
      $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)
    value_V0@220@01)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 79 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01)))]
(assert (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (<
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 73 | First:(First:(Second:($t@225@01))) == value_V0@220@01]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
  value_V0@220@01))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 52 | First:(Second:(First:(Second:($t@225@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
  $Snap.unit))
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 86 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 86 | First:(Second:(Second:(First:(Second:($t@225@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 86 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget2of3(n_V0): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMnode%trigger ($Snap.first ($Snap.second $t@225@01)) n_V0@219@01))
; [eval] (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ == value_V0_CN1
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
    value_V0@220@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
  value_V0@220@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 87 | First:(First:(Second:($t@225@01))) == value_V0@220@01 | live]
; [else-branch: 87 | First:(First:(Second:($t@225@01))) != value_V0@220@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 87 | First:(First:(Second:($t@225@01))) == value_V0@220@01]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
  value_V0@220@01))
; [exec]
; res_V0_CN5 := true
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), 1 / dividend_V0_CN2)
(push) ; 6
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget0of3(n_V0): Ref)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget1of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget2of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
; [then-branch: 88 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 88 | First:(Second:(First:(Second:($t@225@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 6
; [else-branch: 88 | First:(Second:(First:(Second:($t@225@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 89 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 89 | First:(Second:(Second:(First:(Second:($t@225@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 89 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget2of3(n_V0): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        $Snap.unit
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))))))) n_V0@219@01))
; [exec]
; res_V0_CN5 := res_V0_CN5
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN5
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@283@01 $Perm)
(assert ($Perm.isReadVar $k@283@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< $k@283@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@283@01)))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@283@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        $Snap.unit
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))))))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@283@01))
(assert (and
  (< $k@283@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@283@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        ($Snap.combine
          $Snap.unit
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))))))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(set-option :timeout 0)
(push) ; 8
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        $Snap.unit
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))))))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        $Snap.unit
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))))))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
; [eval] res_V0 == (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 8
(declare-const $k@284@01 $Perm)
(assert ($Perm.isReadVar $k@284@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< $k@284@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@284@01)))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@284@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@285@01 $Perm)
(assert ($Perm.isReadVar $k@285@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< $k@285@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@285@01)))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@285@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@285@01))
(assert (and
  (< $k@285@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@285@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        ($Snap.combine
          $Snap.unit
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))))))
  $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@284@01))
(assert ($Perm.isReadVar $k@285@01))
(assert (and
  (< $k@284@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@284@01))
  (< $k@285@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@285@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
          ($Snap.combine
            $Snap.unit
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))))))
    $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(set-option :timeout 0)
(push) ; 8
(assert (not (=
  true
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
            ($Snap.combine
              $Snap.unit
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))))))
      $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)
    value_V0@220@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  true
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
            ($Snap.combine
              $Snap.unit
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))))))
      $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)
    value_V0@220@01)))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 87 | First:(First:(Second:($t@225@01))) != value_V0@220@01]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
    value_V0@220@01)))
(pop) ; 5
; [eval] !((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ == value_V0_CN1)
; [eval] (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ == value_V0_CN1
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
  value_V0@220@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
    value_V0@220@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 90 | First:(First:(Second:($t@225@01))) != value_V0@220@01 | live]
; [else-branch: 90 | First:(First:(Second:($t@225@01))) == value_V0@220@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 90 | First:(First:(Second:($t@225@01))) != value_V0@220@01]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
    value_V0@220@01)))
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 91 | value_V0@220@01 < First:(First:(Second:($t@225@01))) | live]
; [else-branch: 91 | !(value_V0@220@01 < First:(First:(Second:($t@225@01)))) | live]
(push) ; 7
; [then-branch: 91 | value_V0@220@01 < First:(First:(Second:($t@225@01)))]
(assert (<
  value_V0@220@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 91 | !(value_V0@220@01 < First:(First:(Second:($t@225@01))))]
(assert (not
  (<
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
  (<
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 92 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01))) | dead]
; [else-branch: 92 | !(First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01)))) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 92 | !(First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(pop) ; 6
; [eval] !(value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()))
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 93 | value_V0@220@01 < First:(First:(Second:($t@225@01))) | live]
; [else-branch: 93 | !(value_V0@220@01 < First:(First:(Second:($t@225@01)))) | live]
(push) ; 7
; [then-branch: 93 | value_V0@220@01 < First:(First:(Second:($t@225@01)))]
(assert (<
  value_V0@220@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 93 | !(value_V0@220@01 < First:(First:(Second:($t@225@01))))]
(assert (not
  (<
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (<
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 94 | !(First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01)))) | live]
; [else-branch: 94 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01))) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 94 | !(First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
; [then-branch: 95 | value_V0@220@01 > First:(First:(Second:($t@225@01))) | live]
; [else-branch: 95 | !(value_V0@220@01 > First:(First:(Second:($t@225@01)))) | live]
(push) ; 8
; [then-branch: 95 | value_V0@220@01 > First:(First:(Second:($t@225@01)))]
(assert (>
  value_V0@220@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 95 | !(value_V0@220@01 > First:(First:(Second:($t@225@01))))]
(assert (not
  (>
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
  (>
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (>
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 96 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01))) | live]
; [else-branch: 96 | !(First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01)))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 96 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01)))]
(assert (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (>
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
; [exec]
; var N9: Bool
(declare-const N9@286@01 Bool)
; [exec]
; N9 := contains_4b5075e4_PMnode((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   value_V0_CN1, dividend_V0_CN2, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]),
;   upperBound_V0_CN4)
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] dividend_V0 > 0
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@287@01 $Perm)
(assert ($Perm.isReadVar $k@287@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< $k@287@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@287@01)))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@287@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))) upperBound_V0@223@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@287@01))
(assert (and
  (< $k@287@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@287@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))) upperBound_V0@223@01)))
(set-option :timeout 0)
(push) ; 8
(assert (not (sorted_4b5075e4_PMnode ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))) upperBound_V0@223@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))) upperBound_V0@223@01))
(declare-const res_V0@288@01 Bool)
(declare-const $t@289@01 $Snap)
(assert (= $t@289@01 ($Snap.combine ($Snap.first $t@289@01) ($Snap.second $t@289@01))))
(push) ; 8
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second $t@289@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@289@01))
    ($Snap.second ($Snap.second $t@289@01)))))
(assert (= ($Snap.first ($Snap.second $t@289@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 8
(declare-const $k@290@01 $Perm)
(assert ($Perm.isReadVar $k@290@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< $k@290@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@290@01)))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@290@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@289@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))) upperBound_V0@223@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@290@01))
(assert (and
  (< $k@290@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@290@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@289@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))) upperBound_V0@223@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@289@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))) upperBound_V0@223@01))
(assert (= ($Snap.second ($Snap.second $t@289@01)) $Snap.unit))
; [eval] res_V0 == (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@291@01 $Perm)
(assert ($Perm.isReadVar $k@291@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< $k@291@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@291@01)))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@291@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@292@01 $Perm)
(assert ($Perm.isReadVar $k@292@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< $k@292@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@292@01)))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@292@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@292@01))
(assert (and
  (< $k@292@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@292@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@289@01)
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))) upperBound_V0@223@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@291@01))
(assert ($Perm.isReadVar $k@292@01))
(assert (and
  (< $k@291@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@291@01))
  (< $k@292@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@292@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@289@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))) upperBound_V0@223@01)))
(assert (=
  res_V0@288@01
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@289@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))) upperBound_V0@223@01)
    value_V0@220@01)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res_V0_CN5 := N9
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), 1 / dividend_V0_CN2)
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget0of3(n_V0): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget1of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget2of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
; [then-branch: 97 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 97 | First:(Second:(First:(Second:($t@225@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 8
; [else-branch: 97 | First:(Second:(First:(Second:($t@225@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 98 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 98 | First:(Second:(Second:(First:(Second:($t@225@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 98 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget2of3(n_V0): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine $Snap.unit ($Snap.first $t@289@01))))) n_V0@219@01))
; [exec]
; res_V0_CN5 := res_V0_CN5
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN5
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@293@01 $Perm)
(assert ($Perm.isReadVar $k@293@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< $k@293@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@293@01)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@293@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine $Snap.unit ($Snap.first $t@289@01))))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@293@01))
(assert (and
  (< $k@293@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@293@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        ($Snap.combine $Snap.unit ($Snap.first $t@289@01))))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(set-option :timeout 0)
(push) ; 10
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine $Snap.unit ($Snap.first $t@289@01))))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine $Snap.unit ($Snap.first $t@289@01))))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
; [eval] res_V0 == (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@294@01 $Perm)
(assert ($Perm.isReadVar $k@294@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< $k@294@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@294@01)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@294@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@295@01 $Perm)
(assert ($Perm.isReadVar $k@295@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (< $k@295@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@295@01)))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@295@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@295@01))
(assert (and
  (< $k@295@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@295@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        ($Snap.combine $Snap.unit ($Snap.first $t@289@01)))))
  $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@294@01))
(assert ($Perm.isReadVar $k@295@01))
(assert (and
  (< $k@294@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@294@01))
  (< $k@295@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@295@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
          ($Snap.combine $Snap.unit ($Snap.first $t@289@01)))))
    $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(set-option :timeout 0)
(push) ; 10
(assert (not (=
  res_V0@288@01
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
            ($Snap.combine $Snap.unit ($Snap.first $t@289@01)))))
      $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)
    value_V0@220@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  res_V0@288@01
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
            ($Snap.combine $Snap.unit ($Snap.first $t@289@01)))))
      $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)
    value_V0@220@01)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 96 | !(First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(pop) ; 7
; [eval] !(value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()))
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
; [then-branch: 99 | value_V0@220@01 > First:(First:(Second:($t@225@01))) | live]
; [else-branch: 99 | !(value_V0@220@01 > First:(First:(Second:($t@225@01)))) | live]
(push) ; 8
; [then-branch: 99 | value_V0@220@01 > First:(First:(Second:($t@225@01)))]
(assert (>
  value_V0@220@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 99 | !(value_V0@220@01 > First:(First:(Second:($t@225@01))))]
(assert (not
  (>
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (>
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 100 | !(First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01)))) | live]
; [else-branch: 100 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 100 | !(First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
; [exec]
; res_V0_CN5 := false
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), 1 / dividend_V0_CN2)
(push) ; 8
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget0of3(n_V0): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget1of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget2of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
; [then-branch: 101 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 101 | First:(Second:(First:(Second:($t@225@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 8
; [else-branch: 101 | First:(Second:(First:(Second:($t@225@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 102 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 102 | First:(Second:(Second:(First:(Second:($t@225@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 102 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget2of3(n_V0): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        $Snap.unit
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))))))) n_V0@219@01))
; [exec]
; res_V0_CN5 := res_V0_CN5
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN5
(set-option :timeout 0)
(push) ; 10
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@296@01 $Perm)
(assert ($Perm.isReadVar $k@296@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< $k@296@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@296@01)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@296@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        $Snap.unit
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))))))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@296@01))
(assert (and
  (< $k@296@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@296@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        ($Snap.combine
          $Snap.unit
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))))))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(set-option :timeout 0)
(push) ; 10
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        $Snap.unit
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))))))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine
        $Snap.unit
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))))))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
; [eval] res_V0 == (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@297@01 $Perm)
(assert ($Perm.isReadVar $k@297@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< $k@297@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@297@01)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@297@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@298@01 $Perm)
(assert ($Perm.isReadVar $k@298@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (< $k@298@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@298@01)))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@298@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@298@01))
(assert (and
  (< $k@298@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@298@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        ($Snap.combine
          $Snap.unit
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))))))
  $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@297@01))
(assert ($Perm.isReadVar $k@298@01))
(assert (and
  (< $k@297@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@297@01))
  (< $k@298@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@298@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
          ($Snap.combine
            $Snap.unit
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))))))
    $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(set-option :timeout 0)
(push) ; 10
(assert (not (=
  false
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
            ($Snap.combine
              $Snap.unit
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))))))
      $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)
    value_V0@220@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  false
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
            ($Snap.combine
              $Snap.unit
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))))))
      $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)
    value_V0@220@01)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 100 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01)))]
(assert (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (>
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 90 | First:(First:(Second:($t@225@01))) == value_V0@220@01]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
  value_V0@220@01))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 86 | First:(Second:(Second:(First:(Second:($t@225@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
  $Snap.unit))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMnode%trigger ($Snap.first ($Snap.second $t@225@01)) n_V0@219@01))
; [eval] (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ == value_V0_CN1
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
    value_V0@220@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
  value_V0@220@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 103 | First:(First:(Second:($t@225@01))) == value_V0@220@01 | live]
; [else-branch: 103 | First:(First:(Second:($t@225@01))) != value_V0@220@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 103 | First:(First:(Second:($t@225@01))) == value_V0@220@01]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
  value_V0@220@01))
; [exec]
; res_V0_CN5 := true
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), 1 / dividend_V0_CN2)
(push) ; 6
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget0of3(n_V0): Ref)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget1of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget2of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
; [then-branch: 104 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 104 | First:(Second:(First:(Second:($t@225@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 6
; [else-branch: 104 | First:(Second:(First:(Second:($t@225@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
; [then-branch: 105 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 105 | First:(Second:(Second:(First:(Second:($t@225@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 7
; [else-branch: 105 | First:(Second:(Second:(First:(Second:($t@225@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@219@01))
; [exec]
; res_V0_CN5 := res_V0_CN5
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN5
(push) ; 8
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@299@01 $Perm)
(assert ($Perm.isReadVar $k@299@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< $k@299@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@299@01)))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@299@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@299@01))
(assert (and
  (< $k@299@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@299@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(set-option :timeout 0)
(push) ; 8
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
; [eval] res_V0 == (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 8
(declare-const $k@300@01 $Perm)
(assert ($Perm.isReadVar $k@300@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< $k@300@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@300@01)))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@300@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@301@01 $Perm)
(assert ($Perm.isReadVar $k@301@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< $k@301@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@301@01)))
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@301@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@301@01))
(assert (and
  (< $k@301@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@301@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        ($Snap.combine $Snap.unit $Snap.unit))))
  $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@300@01))
(assert ($Perm.isReadVar $k@301@01))
(assert (and
  (< $k@300@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@300@01))
  (< $k@301@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@301@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
          ($Snap.combine $Snap.unit $Snap.unit))))
    $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(set-option :timeout 0)
(push) ; 8
(assert (not (=
  true
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
            ($Snap.combine $Snap.unit $Snap.unit))))
      $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)
    value_V0@220@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  true
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
            ($Snap.combine $Snap.unit $Snap.unit))))
      $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)
    value_V0@220@01)))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 103 | First:(First:(Second:($t@225@01))) != value_V0@220@01]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
    value_V0@220@01)))
(pop) ; 5
; [eval] !((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ == value_V0_CN1)
; [eval] (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ == value_V0_CN1
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
  value_V0@220@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
    value_V0@220@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 106 | First:(First:(Second:($t@225@01))) != value_V0@220@01 | live]
; [else-branch: 106 | First:(First:(Second:($t@225@01))) == value_V0@220@01 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 106 | First:(First:(Second:($t@225@01))) != value_V0@220@01]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
    value_V0@220@01)))
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 107 | value_V0@220@01 < First:(First:(Second:($t@225@01))) | live]
; [else-branch: 107 | !(value_V0@220@01 < First:(First:(Second:($t@225@01)))) | live]
(push) ; 7
; [then-branch: 107 | value_V0@220@01 < First:(First:(Second:($t@225@01)))]
(assert (<
  value_V0@220@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 107 | !(value_V0@220@01 < First:(First:(Second:($t@225@01))))]
(assert (not
  (<
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
  (<
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 108 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01))) | dead]
; [else-branch: 108 | !(First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01)))) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 108 | !(First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(pop) ; 6
; [eval] !(value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()))
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
; [then-branch: 109 | value_V0@220@01 < First:(First:(Second:($t@225@01))) | live]
; [else-branch: 109 | !(value_V0@220@01 < First:(First:(Second:($t@225@01)))) | live]
(push) ; 7
; [then-branch: 109 | value_V0@220@01 < First:(First:(Second:($t@225@01)))]
(assert (<
  value_V0@220@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 109 | !(value_V0@220@01 < First:(First:(Second:($t@225@01))))]
(assert (not
  (<
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (<
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 110 | !(First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01)))) | live]
; [else-branch: 110 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01))) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 110 | !(First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 < First:(First:(Second:($t@225@01))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
; [then-branch: 111 | value_V0@220@01 > First:(First:(Second:($t@225@01))) | live]
; [else-branch: 111 | !(value_V0@220@01 > First:(First:(Second:($t@225@01)))) | live]
(push) ; 8
; [then-branch: 111 | value_V0@220@01 > First:(First:(Second:($t@225@01)))]
(assert (>
  value_V0@220@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 111 | !(value_V0@220@01 > First:(First:(Second:($t@225@01))))]
(assert (not
  (>
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
  (>
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 112 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01))) | dead]
; [else-branch: 112 | !(First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01)))) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 112 | !(First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(pop) ; 7
; [eval] !(value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()))
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
; [then-branch: 113 | value_V0@220@01 > First:(First:(Second:($t@225@01))) | live]
; [else-branch: 113 | !(value_V0@220@01 > First:(First:(Second:($t@225@01)))) | live]
(push) ; 8
; [then-branch: 113 | value_V0@220@01 > First:(First:(Second:($t@225@01)))]
(assert (>
  value_V0@220@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 113 | !(value_V0@220@01 > First:(First:(Second:($t@225@01))))]
(assert (not
  (>
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (>
    value_V0@220@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 114 | !(First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01)))) | live]
; [else-branch: 114 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 114 | !(First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@220@01 > First:(First:(Second:($t@225@01))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@220@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))))))
; [exec]
; res_V0_CN5 := false
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), 1 / dividend_V0_CN2)
(push) ; 8
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget0of3(n_V0): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget1of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (ShStructget2of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
; [then-branch: 115 | First:(Second:(First:(Second:($t@225@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 115 | First:(Second:(First:(Second:($t@225@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 8
; [else-branch: 115 | First:(Second:(First:(Second:($t@225@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
; [then-branch: 116 | First:(Second:(Second:(First:(Second:($t@225@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 116 | First:(Second:(Second:(First:(Second:($t@225@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 9
; [else-branch: 116 | First:(Second:(Second:(First:(Second:($t@225@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@219@01))
; [exec]
; res_V0_CN5 := res_V0_CN5
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN5
(push) ; 10
(assert (not (not (= dividend_V0@221@01 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (or
  (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No)
  (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No (/ (to_real 1) (to_real dividend_V0@221@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@302@01 $Perm)
(assert ($Perm.isReadVar $k@302@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< $k@302@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@302@01)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@302@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@302@01))
(assert (and
  (< $k@302@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@302@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(set-option :timeout 0)
(push) ; 10
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
; [eval] res_V0 == (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@303@01 $Perm)
(assert ($Perm.isReadVar $k@303@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< $k@303@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@303@01)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@303@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@304@01 $Perm)
(assert ($Perm.isReadVar $k@304@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= (/ (to_real 1) (to_real dividend_V0@221@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (< $k@304@01 (/ (to_real 1) (to_real dividend_V0@221@01))))
(assert (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@304@01)))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@304@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@304@01))
(assert (and
  (< $k@304@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@304@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
        ($Snap.combine $Snap.unit $Snap.unit))))
  $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@303@01))
(assert ($Perm.isReadVar $k@304@01))
(assert (and
  (< $k@303@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@303@01))
  (< $k@304@01 (/ (to_real 1) (to_real dividend_V0@221@01)))
  (<= $Perm.No (- (/ (to_real 1) (to_real dividend_V0@221@01)) $k@304@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
          ($Snap.combine $Snap.unit $Snap.unit))))
    $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)))
(set-option :timeout 0)
(push) ; 10
(assert (not (=
  false
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
            ($Snap.combine $Snap.unit $Snap.unit))))
      $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)
    value_V0@220@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  false
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second $t@225@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second $t@225@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second $t@225@01)))))
            ($Snap.combine $Snap.unit $Snap.unit))))
      $Snap.unit) n_V0@219@01 lowerBound_V0@222@01 upperBound_V0@223@01)
    value_V0@220@01)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 106 | First:(First:(Second:($t@225@01))) == value_V0@220@01]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second $t@225@01))))
  value_V0@220@01))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- convert_4b5075e4_PMnode ----------
(declare-const n_V0@305@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const oldLowerBound_V0@306@01 Option<Int>)
(declare-const oldUpperBound_V0@307@01 Option<Int>)
(declare-const newLowerBound_V0@308@01 Option<Int>)
(declare-const newUpperBound_V0@309@01 Option<Int>)
(declare-const n_V0@310@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const oldLowerBound_V0@311@01 Option<Int>)
(declare-const oldUpperBound_V0@312@01 Option<Int>)
(declare-const newLowerBound_V0@313@01 Option<Int>)
(declare-const newUpperBound_V0@314@01 Option<Int>)
(push) ; 1
(declare-const $t@315@01 $Snap)
(assert (= $t@315@01 ($Snap.combine ($Snap.first $t@315@01) ($Snap.second $t@315@01))))
(assert (=
  ($Snap.second $t@315@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@315@01))
    ($Snap.second ($Snap.second $t@315@01)))))
(assert (= ($Snap.first ($Snap.second $t@315@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(push) ; 2
(declare-const $k@316@01 $Perm)
(assert ($Perm.isReadVar $k@316@01))
(assert (< $k@316@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@316@01)))
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@316@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@315@01) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01))
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@316@01))
(assert (and
  (< $k@316@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@316@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@315@01) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@315@01) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01))
(assert (=
  ($Snap.second ($Snap.second $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@315@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@315@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@315@01))) $Snap.unit))
; [eval] oldLowerBound_V0 == (optNone(): Option[Int]) ==> newLowerBound_V0 == (optNone(): Option[Int])
; [eval] oldLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(set-option :timeout 0)
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 117 | oldLowerBound_V0@311@01 == optNone[Option[Int]] | live]
; [else-branch: 117 | oldLowerBound_V0@311@01 != optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 117 | oldLowerBound_V0@311@01 == optNone[Option[Int]]]
(assert (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>)))
; [eval] newLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(pop) ; 3
(push) ; 3
; [else-branch: 117 | oldLowerBound_V0@311@01 != optNone[Option[Int]]]
(assert (not (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>)))
  (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>))))
(assert (=>
  (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>))
  (= newLowerBound_V0@313@01 (as optNone<Option<Int>>  Option<Int>))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@315@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@315@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@315@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@315@01))))
  $Snap.unit))
; [eval] oldUpperBound_V0 == (optNone(): Option[Int]) ==> newUpperBound_V0 == (optNone(): Option[Int])
; [eval] oldUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 118 | oldUpperBound_V0@312@01 == optNone[Option[Int]] | live]
; [else-branch: 118 | oldUpperBound_V0@312@01 != optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 118 | oldUpperBound_V0@312@01 == optNone[Option[Int]]]
(assert (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>)))
; [eval] newUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(pop) ; 3
(push) ; 3
; [else-branch: 118 | oldUpperBound_V0@312@01 != optNone[Option[Int]]]
(assert (not (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>))))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>)))
  (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>))))
(assert (=>
  (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>))
  (= newUpperBound_V0@314@01 (as optNone<Option<Int>>  Option<Int>))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@315@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@315@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@315@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@315@01)))))
  $Snap.unit))
; [eval] !(newLowerBound_V0 == (optNone(): Option[Int])) ==> !(oldLowerBound_V0 == (optNone(): Option[Int])) && (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] !(newLowerBound_V0 == (optNone(): Option[Int]))
; [eval] newLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (= newLowerBound_V0@313@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= newLowerBound_V0@313@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 119 | newLowerBound_V0@313@01 != optNone[Option[Int]] | live]
; [else-branch: 119 | newLowerBound_V0@313@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 119 | newLowerBound_V0@313@01 != optNone[Option[Int]]]
(assert (not (= newLowerBound_V0@313@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] !(oldLowerBound_V0 == (optNone(): Option[Int])) && (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] !(oldLowerBound_V0 == (optNone(): Option[Int]))
; [eval] oldLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 4
; [then-branch: 120 | oldLowerBound_V0@311@01 != optNone[Option[Int]] | live]
; [else-branch: 120 | oldLowerBound_V0@311@01 == optNone[Option[Int]] | live]
(push) ; 5
; [then-branch: 120 | oldLowerBound_V0@311@01 != optNone[Option[Int]]]
(assert (not (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] (optGet(oldLowerBound_V0): Int)
; [eval] (optGet(newLowerBound_V0): Int)
(pop) ; 5
(push) ; 5
; [else-branch: 120 | oldLowerBound_V0@311@01 == optNone[Option[Int]]]
(assert (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>)))))
(pop) ; 3
(push) ; 3
; [else-branch: 119 | newLowerBound_V0@313@01 == optNone[Option[Int]]]
(assert (= newLowerBound_V0@313@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert (=>
  (not (= newLowerBound_V0@313@01 (as optNone<Option<Int>>  Option<Int>)))
  (and
    (not (= newLowerBound_V0@313@01 (as optNone<Option<Int>>  Option<Int>)))
    (or
      (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>))
      (not (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>)))))))
; Joined path conditions
(assert (or
  (= newLowerBound_V0@313@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= newLowerBound_V0@313@01 (as optNone<Option<Int>>  Option<Int>)))))
(assert (=>
  (not (= newLowerBound_V0@313@01 (as optNone<Option<Int>>  Option<Int>)))
  (and
    (>=
      (optGet<Int> oldLowerBound_V0@311@01)
      (optGet<Int> newLowerBound_V0@313@01))
    (not (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@315@01)))))
  $Snap.unit))
; [eval] !(newUpperBound_V0 == (optNone(): Option[Int])) ==> !(oldUpperBound_V0 == (optNone(): Option[Int])) && (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] !(newUpperBound_V0 == (optNone(): Option[Int]))
; [eval] newUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (= newUpperBound_V0@314@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= newUpperBound_V0@314@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 121 | newUpperBound_V0@314@01 != optNone[Option[Int]] | live]
; [else-branch: 121 | newUpperBound_V0@314@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 121 | newUpperBound_V0@314@01 != optNone[Option[Int]]]
(assert (not (= newUpperBound_V0@314@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] !(oldUpperBound_V0 == (optNone(): Option[Int])) && (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] !(oldUpperBound_V0 == (optNone(): Option[Int]))
; [eval] oldUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 4
; [then-branch: 122 | oldUpperBound_V0@312@01 != optNone[Option[Int]] | live]
; [else-branch: 122 | oldUpperBound_V0@312@01 == optNone[Option[Int]] | live]
(push) ; 5
; [then-branch: 122 | oldUpperBound_V0@312@01 != optNone[Option[Int]]]
(assert (not (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] (optGet(oldUpperBound_V0): Int)
; [eval] (optGet(newUpperBound_V0): Int)
(pop) ; 5
(push) ; 5
; [else-branch: 122 | oldUpperBound_V0@312@01 == optNone[Option[Int]]]
(assert (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>)))))
(pop) ; 3
(push) ; 3
; [else-branch: 121 | newUpperBound_V0@314@01 == optNone[Option[Int]]]
(assert (= newUpperBound_V0@314@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert (=>
  (not (= newUpperBound_V0@314@01 (as optNone<Option<Int>>  Option<Int>)))
  (and
    (not (= newUpperBound_V0@314@01 (as optNone<Option<Int>>  Option<Int>)))
    (or
      (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>))
      (not (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>)))))))
; Joined path conditions
(assert (or
  (= newUpperBound_V0@314@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= newUpperBound_V0@314@01 (as optNone<Option<Int>>  Option<Int>)))))
(assert (=>
  (not (= newUpperBound_V0@314@01 (as optNone<Option<Int>>  Option<Int>)))
  (and
    (<=
      (optGet<Int> oldUpperBound_V0@312@01)
      (optGet<Int> newUpperBound_V0@314@01))
    (not (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@317@01 $Snap)
(assert (= $t@317@01 ($Snap.combine ($Snap.first $t@317@01) ($Snap.second $t@317@01))))
(assert (=
  ($Snap.second $t@317@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@317@01))
    ($Snap.second ($Snap.second $t@317@01)))))
(assert (= ($Snap.first ($Snap.second $t@317@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(push) ; 3
(declare-const $k@318@01 $Perm)
(assert ($Perm.isReadVar $k@318@01))
(assert (< $k@318@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@318@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@318@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@317@01) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@318@01))
(assert (and
  (< $k@318@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@318@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@317@01) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@317@01) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01))
(assert (=
  ($Snap.second ($Snap.second $t@317@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@317@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@317@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@317@01))) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@319@01 $Perm)
(assert ($Perm.isReadVar $k@319@01))
(assert (< $k@319@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@319@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@319@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@317@01) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@319@01))
(assert (and
  (< $k@319@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@319@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@317@01) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@317@01) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@317@01))) $Snap.unit))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0) == sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@320@01 $Perm)
(assert ($Perm.isReadVar $k@320@01))
(assert (< $k@320@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@320@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@320@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@321@01 $Perm)
(assert ($Perm.isReadVar $k@321@01))
(assert (< $k@321@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@321@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@321@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@321@01))
(assert (and (< $k@321@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@321@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@317@01)
  $Snap.unit) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@320@01))
(assert ($Perm.isReadVar $k@321@01))
(assert (and
  (< $k@320@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@320@01))
  (< $k@321@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@321@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@317@01)
    $Snap.unit) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01)))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@322@01 $Perm)
(assert ($Perm.isReadVar $k@322@01))
(assert (< $k@322@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@322@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@322@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@323@01 $Perm)
(assert ($Perm.isReadVar $k@323@01))
(assert (< $k@323@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@323@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@323@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@323@01))
(assert (and (< $k@323@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@323@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@317@01)
  $Snap.unit) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@322@01))
(assert ($Perm.isReadVar $k@323@01))
(assert (and
  (< $k@322@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@322@01))
  (< $k@323@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@323@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@317@01)
    $Snap.unit) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01)))
(assert (Seq_equal
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first $t@317@01)
    $Snap.unit) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01)
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first $t@317@01)
    $Snap.unit) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01)))
(pop) ; 2
(set-option :timeout 0)
(push) ; 2
; [exec]
; var newUpperBound_V0_CN4: Option[Int]
(declare-const newUpperBound_V0_CN4@324@01 Option<Int>)
; [exec]
; var newLowerBound_V0_CN3: Option[Int]
(declare-const newLowerBound_V0_CN3@325@01 Option<Int>)
; [exec]
; var oldUpperBound_V0_CN2: Option[Int]
(declare-const oldUpperBound_V0_CN2@326@01 Option<Int>)
; [exec]
; var oldLowerBound_V0_CN1: Option[Int]
(declare-const oldLowerBound_V0_CN1@327@01 Option<Int>)
; [exec]
; var n_V0_CN0: ShStruct3[Ref, Ref, Ref]
(declare-const n_V0_CN0@328@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; inhale n_V0_CN0 ==
;   shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(declare-const $t@329@01 $Snap)
(assert (= $t@329@01 $Snap.unit))
; [eval] n_V0_CN0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 3
(assert (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (=
  n_V0_CN0@328@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale oldLowerBound_V0_CN1 == (optNone(): Option[Int])
(declare-const $t@330@01 $Snap)
(assert (= $t@330@01 $Snap.unit))
; [eval] oldLowerBound_V0_CN1 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(assert (= oldLowerBound_V0_CN1@327@01 (as optNone<Option<Int>>  Option<Int>)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale oldUpperBound_V0_CN2 == (optNone(): Option[Int])
(declare-const $t@331@01 $Snap)
(assert (= $t@331@01 $Snap.unit))
; [eval] oldUpperBound_V0_CN2 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(assert (= oldUpperBound_V0_CN2@326@01 (as optNone<Option<Int>>  Option<Int>)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale newLowerBound_V0_CN3 == (optNone(): Option[Int])
(declare-const $t@332@01 $Snap)
(assert (= $t@332@01 $Snap.unit))
; [eval] newLowerBound_V0_CN3 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(assert (= newLowerBound_V0_CN3@325@01 (as optNone<Option<Int>>  Option<Int>)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale newUpperBound_V0_CN4 == (optNone(): Option[Int])
(declare-const $t@333@01 $Snap)
(assert (= $t@333@01 $Snap.unit))
; [eval] newUpperBound_V0_CN4 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(assert (= newUpperBound_V0_CN4@324@01 (as optNone<Option<Int>>  Option<Int>)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; n_V0_CN0 := n_V0
; [exec]
; oldLowerBound_V0_CN1 := oldLowerBound_V0
; [exec]
; oldUpperBound_V0_CN2 := oldUpperBound_V0
; [exec]
; newLowerBound_V0_CN3 := newLowerBound_V0
; [exec]
; newUpperBound_V0_CN4 := newUpperBound_V0
; [exec]
; unfold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
(assert (=
  ($Snap.first $t@315@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@315@01))
    ($Snap.second ($Snap.first $t@315@01)))))
; [eval] (ShStructget0of3(n_V0): Ref)
(assert (not (= (ShStructget0of3<Ref> n_V0@310@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.second ($Snap.second ($Snap.first $t@315@01))))))
; [eval] (ShStructget1of3(n_V0): Ref)
(assert (not (= (ShStructget1of3<Ref> n_V0@310@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first $t@315@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@315@01)))))))
; [eval] (ShStructget2of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> n_V0@310@01) (ShStructget2of3<Ref> n_V0@310@01))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget2of3<Ref> n_V0@310@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@315@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@315@01))))))))
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 123 | First:(Second:(First:($t@315@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 123 | First:(Second:(First:($t@315@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 123 | First:(Second:(First:($t@315@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01)))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 124 | First:(Second:(Second:(First:($t@315@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 124 | First:(Second:(Second:(First:($t@315@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 124 | First:(Second:(Second:(First:($t@315@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01)))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget2of3(n_V0): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01))))
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMnode%trigger ($Snap.first $t@315@01) n_V0@310@01))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 125 | First:(Second:(First:($t@315@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 125 | First:(Second:(First:($t@315@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 125 | First:(Second:(First:($t@315@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; convert_4b5075e4_PMnode((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   oldLowerBound_V0_CN1, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]),
;   newLowerBound_V0_CN3, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]))
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
; [eval] sorted_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(push) ; 6
(declare-const $k@334@01 $Perm)
(assert ($Perm.isReadVar $k@334@01))
(assert (< $k@334@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@334@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@334@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) oldLowerBound_V0@311@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@334@01))
(assert (and
  (< $k@334@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@334@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) oldLowerBound_V0@311@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))))))
(set-option :timeout 0)
(push) ; 6
(assert (not (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) oldLowerBound_V0@311@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) oldLowerBound_V0@311@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))))
; [eval] oldLowerBound_V0 == (optNone(): Option[Int]) ==> newLowerBound_V0 == (optNone(): Option[Int])
; [eval] oldLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 126 | oldLowerBound_V0@311@01 == optNone[Option[Int]] | live]
; [else-branch: 126 | oldLowerBound_V0@311@01 != optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 126 | oldLowerBound_V0@311@01 == optNone[Option[Int]]]
(assert (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>)))
; [eval] newLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(pop) ; 7
(push) ; 7
; [else-branch: 126 | oldLowerBound_V0@311@01 != optNone[Option[Int]]]
(assert (not (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [eval] oldUpperBound_V0 == (optNone(): Option[Int]) ==> newUpperBound_V0 == (optNone(): Option[Int])
; [eval] oldUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
    (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 127 | optSome[Option[Int]](First:(First:($t@315@01))) == optNone[Option[Int]] | dead]
; [else-branch: 127 | optSome[Option[Int]](First:(First:($t@315@01))) != optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 127 | optSome[Option[Int]](First:(First:($t@315@01))) != optNone[Option[Int]]]
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
    (as optNone<Option<Int>>  Option<Int>))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
    (as optNone<Option<Int>>  Option<Int>))))
; [eval] !(newLowerBound_V0 == (optNone(): Option[Int])) ==> !(oldLowerBound_V0 == (optNone(): Option[Int])) && (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] !(newLowerBound_V0 == (optNone(): Option[Int]))
; [eval] newLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= newLowerBound_V0@313@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= newLowerBound_V0@313@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 128 | newLowerBound_V0@313@01 != optNone[Option[Int]] | live]
; [else-branch: 128 | newLowerBound_V0@313@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 128 | newLowerBound_V0@313@01 != optNone[Option[Int]]]
(assert (not (= newLowerBound_V0@313@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] !(oldLowerBound_V0 == (optNone(): Option[Int])) && (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] !(oldLowerBound_V0 == (optNone(): Option[Int]))
; [eval] oldLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 8
; [then-branch: 129 | oldLowerBound_V0@311@01 != optNone[Option[Int]] | live]
; [else-branch: 129 | oldLowerBound_V0@311@01 == optNone[Option[Int]] | live]
(push) ; 9
; [then-branch: 129 | oldLowerBound_V0@311@01 != optNone[Option[Int]]]
(assert (not (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] (optGet(oldLowerBound_V0): Int)
; [eval] (optGet(newLowerBound_V0): Int)
(pop) ; 9
(push) ; 9
; [else-branch: 129 | oldLowerBound_V0@311@01 == optNone[Option[Int]]]
(assert (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>)))))
(pop) ; 7
(push) ; 7
; [else-branch: 128 | newLowerBound_V0@313@01 == optNone[Option[Int]]]
(assert (= newLowerBound_V0@313@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [eval] !(newUpperBound_V0 == (optNone(): Option[Int])) ==> !(oldUpperBound_V0 == (optNone(): Option[Int])) && (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] !(newUpperBound_V0 == (optNone(): Option[Int]))
; [eval] newUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
  (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 130 | optSome[Option[Int]](First:(First:($t@315@01))) != optNone[Option[Int]] | live]
; [else-branch: 130 | optSome[Option[Int]](First:(First:($t@315@01))) == optNone[Option[Int]] | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 130 | optSome[Option[Int]](First:(First:($t@315@01))) != optNone[Option[Int]]]
; [eval] !(oldUpperBound_V0 == (optNone(): Option[Int])) && (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] !(oldUpperBound_V0 == (optNone(): Option[Int]))
; [eval] oldUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 8
; [then-branch: 131 | optSome[Option[Int]](First:(First:($t@315@01))) != optNone[Option[Int]] | live]
; [else-branch: 131 | optSome[Option[Int]](First:(First:($t@315@01))) == optNone[Option[Int]] | live]
(push) ; 9
; [then-branch: 131 | optSome[Option[Int]](First:(First:($t@315@01))) != optNone[Option[Int]]]
; [eval] (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] (optGet(oldUpperBound_V0): Int)
; [eval] (optGet(newUpperBound_V0): Int)
(pop) ; 9
(push) ; 9
; [else-branch: 131 | optSome[Option[Int]](First:(First:($t@315@01))) == optNone[Option[Int]]]
(assert (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
  (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
    (as optNone<Option<Int>>  Option<Int>))
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
      (as optNone<Option<Int>>  Option<Int>)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
      (as optNone<Option<Int>>  Option<Int>)))
  (or
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
      (as optNone<Option<Int>>  Option<Int>))
    (not
      (=
        (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
        (as optNone<Option<Int>>  Option<Int>))))))
(declare-const $t@335@01 $Snap)
(assert (= $t@335@01 ($Snap.combine ($Snap.first $t@335@01) ($Snap.second $t@335@01))))
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01)))))
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second $t@335@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@335@01))
    ($Snap.second ($Snap.second $t@335@01)))))
(assert (= ($Snap.first ($Snap.second $t@335@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@336@01 $Perm)
(assert ($Perm.isReadVar $k@336@01))
(assert (< $k@336@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@336@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@336@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@335@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) oldLowerBound_V0@311@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@336@01))
(assert (and
  (< $k@336@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@336@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@335@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) oldLowerBound_V0@311@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))))))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@335@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) oldLowerBound_V0@311@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))))
(assert (=
  ($Snap.second ($Snap.second $t@335@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@335@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@335@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@335@01))) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@337@01 $Perm)
(assert ($Perm.isReadVar $k@337@01))
(assert (< $k@337@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@337@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@337@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@335@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) newLowerBound_V0@313@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@337@01))
(assert (and
  (< $k@337@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@337@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@335@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) newLowerBound_V0@313@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))))))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@335@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) newLowerBound_V0@313@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@335@01))) $Snap.unit))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0) == sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@338@01 $Perm)
(assert ($Perm.isReadVar $k@338@01))
(assert (< $k@338@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@338@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@338@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@339@01 $Perm)
(assert ($Perm.isReadVar $k@339@01))
(assert (< $k@339@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@339@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@339@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@339@01))
(assert (and (< $k@339@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@339@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@335@01)
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) oldLowerBound_V0@311@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@338@01))
(assert ($Perm.isReadVar $k@339@01))
(assert (and
  (< $k@338@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@338@01))
  (< $k@339@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@339@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@335@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) oldLowerBound_V0@311@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))))))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@340@01 $Perm)
(assert ($Perm.isReadVar $k@340@01))
(assert (< $k@340@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@340@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@340@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@341@01 $Perm)
(assert ($Perm.isReadVar $k@341@01))
(assert (< $k@341@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@341@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@341@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@341@01))
(assert (and (< $k@341@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@341@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@335@01)
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) newLowerBound_V0@313@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@340@01))
(assert ($Perm.isReadVar $k@341@01))
(assert (and
  (< $k@340@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@340@01))
  (< $k@341@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@341@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@335@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) newLowerBound_V0@313@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))))))
(assert (Seq_equal
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first $t@335@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) oldLowerBound_V0@311@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))))
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first $t@335@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) newLowerBound_V0@313@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 132 | First:(Second:(Second:(First:($t@315@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 132 | First:(Second:(Second:(First:($t@315@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 132 | First:(Second:(Second:(First:($t@315@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; convert_4b5075e4_PMnode((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]),
;   oldUpperBound_V0_CN2, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]),
;   newUpperBound_V0_CN4)
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
; [eval] sorted_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(push) ; 7
(declare-const $k@342@01 $Perm)
(assert ($Perm.isReadVar $k@342@01))
(assert (< $k@342@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@342@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@342@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) oldUpperBound_V0@312@01))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@342@01))
(assert (and
  (< $k@342@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@342@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) oldUpperBound_V0@312@01)))
(set-option :timeout 0)
(push) ; 7
(assert (not (sorted_4b5075e4_PMnode ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) oldUpperBound_V0@312@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) oldUpperBound_V0@312@01))
; [eval] oldLowerBound_V0 == (optNone(): Option[Int]) ==> newLowerBound_V0 == (optNone(): Option[Int])
; [eval] oldLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 7
; [then-branch: 133 | optSome[Option[Int]](First:(First:($t@315@01))) == optNone[Option[Int]] | dead]
; [else-branch: 133 | optSome[Option[Int]](First:(First:($t@315@01))) != optNone[Option[Int]] | live]
(push) ; 8
; [else-branch: 133 | optSome[Option[Int]](First:(First:($t@315@01))) != optNone[Option[Int]]]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [eval] oldUpperBound_V0 == (optNone(): Option[Int]) ==> newUpperBound_V0 == (optNone(): Option[Int])
; [eval] oldUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 134 | oldUpperBound_V0@312@01 == optNone[Option[Int]] | live]
; [else-branch: 134 | oldUpperBound_V0@312@01 != optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 134 | oldUpperBound_V0@312@01 == optNone[Option[Int]]]
(assert (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>)))
; [eval] newUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(pop) ; 8
(push) ; 8
; [else-branch: 134 | oldUpperBound_V0@312@01 != optNone[Option[Int]]]
(assert (not (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] !(newLowerBound_V0 == (optNone(): Option[Int])) ==> !(oldLowerBound_V0 == (optNone(): Option[Int])) && (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] !(newLowerBound_V0 == (optNone(): Option[Int]))
; [eval] newLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
  (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 135 | optSome[Option[Int]](First:(First:($t@315@01))) != optNone[Option[Int]] | live]
; [else-branch: 135 | optSome[Option[Int]](First:(First:($t@315@01))) == optNone[Option[Int]] | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 135 | optSome[Option[Int]](First:(First:($t@315@01))) != optNone[Option[Int]]]
; [eval] !(oldLowerBound_V0 == (optNone(): Option[Int])) && (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] !(oldLowerBound_V0 == (optNone(): Option[Int]))
; [eval] oldLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 9
; [then-branch: 136 | optSome[Option[Int]](First:(First:($t@315@01))) != optNone[Option[Int]] | live]
; [else-branch: 136 | optSome[Option[Int]](First:(First:($t@315@01))) == optNone[Option[Int]] | live]
(push) ; 10
; [then-branch: 136 | optSome[Option[Int]](First:(First:($t@315@01))) != optNone[Option[Int]]]
; [eval] (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] (optGet(oldLowerBound_V0): Int)
; [eval] (optGet(newLowerBound_V0): Int)
(pop) ; 10
(push) ; 10
; [else-branch: 136 | optSome[Option[Int]](First:(First:($t@315@01))) == optNone[Option[Int]]]
(assert (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
  (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
    (as optNone<Option<Int>>  Option<Int>))
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
      (as optNone<Option<Int>>  Option<Int>)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; [eval] !(newUpperBound_V0 == (optNone(): Option[Int])) ==> !(oldUpperBound_V0 == (optNone(): Option[Int])) && (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] !(newUpperBound_V0 == (optNone(): Option[Int]))
; [eval] newUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= newUpperBound_V0@314@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= newUpperBound_V0@314@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 137 | newUpperBound_V0@314@01 != optNone[Option[Int]] | live]
; [else-branch: 137 | newUpperBound_V0@314@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 137 | newUpperBound_V0@314@01 != optNone[Option[Int]]]
(assert (not (= newUpperBound_V0@314@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] !(oldUpperBound_V0 == (optNone(): Option[Int])) && (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] !(oldUpperBound_V0 == (optNone(): Option[Int]))
; [eval] oldUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 9
; [then-branch: 138 | oldUpperBound_V0@312@01 != optNone[Option[Int]] | live]
; [else-branch: 138 | oldUpperBound_V0@312@01 == optNone[Option[Int]] | live]
(push) ; 10
; [then-branch: 138 | oldUpperBound_V0@312@01 != optNone[Option[Int]]]
(assert (not (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] (optGet(oldUpperBound_V0): Int)
; [eval] (optGet(newUpperBound_V0): Int)
(pop) ; 10
(push) ; 10
; [else-branch: 138 | oldUpperBound_V0@312@01 == optNone[Option[Int]]]
(assert (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>)))))
(pop) ; 8
(push) ; 8
; [else-branch: 137 | newUpperBound_V0@314@01 == optNone[Option[Int]]]
(assert (= newUpperBound_V0@314@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const $t@343@01 $Snap)
(assert (= $t@343@01 ($Snap.combine ($Snap.first $t@343@01) ($Snap.second $t@343@01))))
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01))))
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(assert (=
  ($Snap.second $t@343@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@343@01))
    ($Snap.second ($Snap.second $t@343@01)))))
(assert (= ($Snap.first ($Snap.second $t@343@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@344@01 $Perm)
(assert ($Perm.isReadVar $k@344@01))
(assert (< $k@344@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@344@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@344@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@343@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) oldUpperBound_V0@312@01))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@344@01))
(assert (and
  (< $k@344@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@344@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@343@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) oldUpperBound_V0@312@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@343@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) oldUpperBound_V0@312@01))
(assert (=
  ($Snap.second ($Snap.second $t@343@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@343@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@343@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@343@01))) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@345@01 $Perm)
(assert ($Perm.isReadVar $k@345@01))
(assert (< $k@345@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@345@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@345@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@343@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) newUpperBound_V0@314@01))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@345@01))
(assert (and
  (< $k@345@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@345@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@343@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) newUpperBound_V0@314@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@343@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) newUpperBound_V0@314@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@343@01))) $Snap.unit))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0) == sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@346@01 $Perm)
(assert ($Perm.isReadVar $k@346@01))
(assert (< $k@346@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@346@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@346@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@347@01 $Perm)
(assert ($Perm.isReadVar $k@347@01))
(assert (< $k@347@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@347@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@347@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@347@01))
(assert (and (< $k@347@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@347@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@343@01)
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) oldUpperBound_V0@312@01))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@346@01))
(assert ($Perm.isReadVar $k@347@01))
(assert (and
  (< $k@346@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@346@01))
  (< $k@347@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@347@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@343@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) oldUpperBound_V0@312@01)))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@348@01 $Perm)
(assert ($Perm.isReadVar $k@348@01))
(assert (< $k@348@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@348@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@348@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@349@01 $Perm)
(assert ($Perm.isReadVar $k@349@01))
(assert (< $k@349@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@349@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@349@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@349@01))
(assert (and (< $k@349@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@349@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@343@01)
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) newUpperBound_V0@314@01))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@348@01))
(assert ($Perm.isReadVar $k@349@01))
(assert (and
  (< $k@348@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@348@01))
  (< $k@349@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@349@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@343@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) newUpperBound_V0@314@01)))
(assert (Seq_equal
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first $t@343@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) oldUpperBound_V0@312@01)
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first $t@343@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) newUpperBound_V0@314@01)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 139 | First:(Second:(First:($t@315@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 139 | First:(Second:(First:($t@315@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 139 | First:(Second:(First:($t@315@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 140 | First:(Second:(Second:(First:($t@315@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 140 | First:(Second:(Second:(First:($t@315@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 140 | First:(Second:(Second:(First:($t@315@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget2of3(n_V0): Ref)
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine ($Snap.first $t@335@01) ($Snap.first $t@343@01))))) n_V0@310@01))
; [exec]
; label returnLabel
; [eval] sorted_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(push) ; 9
(declare-const $k@350@01 $Perm)
(assert ($Perm.isReadVar $k@350@01))
(assert (< $k@350@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@350@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@350@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine ($Snap.first $t@335@01) ($Snap.first $t@343@01))))) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@350@01))
(assert (and
  (< $k@350@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@350@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@315@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
        ($Snap.combine ($Snap.first $t@335@01) ($Snap.first $t@343@01))))) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine ($Snap.first $t@335@01) ($Snap.first $t@343@01))))) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine ($Snap.first $t@335@01) ($Snap.first $t@343@01))))) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01))
; [eval] sorted_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(push) ; 9
(declare-const $k@351@01 $Perm)
(assert ($Perm.isReadVar $k@351@01))
(assert (< $k@351@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@351@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@351@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine ($Snap.first $t@335@01) ($Snap.first $t@343@01))))) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@351@01))
(assert (and
  (< $k@351@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@351@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@315@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
        ($Snap.combine ($Snap.first $t@335@01) ($Snap.first $t@343@01))))) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine ($Snap.first $t@335@01) ($Snap.first $t@343@01))))) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine ($Snap.first $t@335@01) ($Snap.first $t@343@01))))) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0) == sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(push) ; 9
(declare-const $k@352@01 $Perm)
(assert ($Perm.isReadVar $k@352@01))
(assert (< $k@352@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@352@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@352@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@353@01 $Perm)
(assert ($Perm.isReadVar $k@353@01))
(assert (< $k@353@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@353@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@353@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@353@01))
(assert (and (< $k@353@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@353@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first $t@315@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
        ($Snap.combine ($Snap.first $t@335@01) ($Snap.first $t@343@01)))))
  $Snap.unit) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@352@01))
(assert ($Perm.isReadVar $k@353@01))
(assert (and
  (< $k@352@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@352@01))
  (< $k@353@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@353@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@315@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
          ($Snap.combine ($Snap.first $t@335@01) ($Snap.first $t@343@01)))))
    $Snap.unit) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01)))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@354@01 $Perm)
(assert ($Perm.isReadVar $k@354@01))
(assert (< $k@354@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@354@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@354@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@355@01 $Perm)
(assert ($Perm.isReadVar $k@355@01))
(assert (< $k@355@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@355@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@355@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@355@01))
(assert (and (< $k@355@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@355@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first $t@315@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
        ($Snap.combine ($Snap.first $t@335@01) ($Snap.first $t@343@01)))))
  $Snap.unit) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@354@01))
(assert ($Perm.isReadVar $k@355@01))
(assert (and
  (< $k@354@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@354@01))
  (< $k@355@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@355@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@315@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
          ($Snap.combine ($Snap.first $t@335@01) ($Snap.first $t@343@01)))))
    $Snap.unit) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (Seq_equal
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@315@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
          ($Snap.combine ($Snap.first $t@335@01) ($Snap.first $t@343@01)))))
    $Snap.unit) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01)
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@315@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
          ($Snap.combine ($Snap.first $t@335@01) ($Snap.first $t@343@01)))))
    $Snap.unit) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@315@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
          ($Snap.combine ($Snap.first $t@335@01) ($Snap.first $t@343@01)))))
    $Snap.unit) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01)
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@315@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
          ($Snap.combine ($Snap.first $t@335@01) ($Snap.first $t@343@01)))))
    $Snap.unit) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01)))
(pop) ; 8
(pop) ; 7
(pop) ; 6
; [eval] !!((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
; [then-branch: 141 | First:(Second:(Second:(First:($t@315@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 141 | First:(Second:(Second:(First:($t@315@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 6
; [else-branch: 141 | First:(Second:(Second:(First:($t@315@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 6
(pop) ; 5
; [eval] !!((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 5
(pop) ; 5
; Joined path conditions
; [then-branch: 142 | First:(Second:(First:($t@315@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 142 | First:(Second:(First:($t@315@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 5
; [else-branch: 142 | First:(Second:(First:($t@315@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 124 | First:(Second:(Second:(First:($t@315@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@315@01)))))
  $Snap.unit))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMnode%trigger ($Snap.first $t@315@01) n_V0@310@01))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 143 | First:(Second:(First:($t@315@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 143 | First:(Second:(First:($t@315@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 143 | First:(Second:(First:($t@315@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; convert_4b5075e4_PMnode((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   oldLowerBound_V0_CN1, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]),
;   newLowerBound_V0_CN3, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]))
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
; [eval] sorted_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(push) ; 6
(declare-const $k@356@01 $Perm)
(assert ($Perm.isReadVar $k@356@01))
(assert (< $k@356@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@356@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@356@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) oldLowerBound_V0@311@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@356@01))
(assert (and
  (< $k@356@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@356@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) oldLowerBound_V0@311@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))))))
(set-option :timeout 0)
(push) ; 6
(assert (not (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) oldLowerBound_V0@311@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) oldLowerBound_V0@311@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))))
; [eval] oldLowerBound_V0 == (optNone(): Option[Int]) ==> newLowerBound_V0 == (optNone(): Option[Int])
; [eval] oldLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 144 | oldLowerBound_V0@311@01 == optNone[Option[Int]] | live]
; [else-branch: 144 | oldLowerBound_V0@311@01 != optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 144 | oldLowerBound_V0@311@01 == optNone[Option[Int]]]
(assert (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>)))
; [eval] newLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(pop) ; 7
(push) ; 7
; [else-branch: 144 | oldLowerBound_V0@311@01 != optNone[Option[Int]]]
(assert (not (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [eval] oldUpperBound_V0 == (optNone(): Option[Int]) ==> newUpperBound_V0 == (optNone(): Option[Int])
; [eval] oldUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
    (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 145 | optSome[Option[Int]](First:(First:($t@315@01))) == optNone[Option[Int]] | dead]
; [else-branch: 145 | optSome[Option[Int]](First:(First:($t@315@01))) != optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 145 | optSome[Option[Int]](First:(First:($t@315@01))) != optNone[Option[Int]]]
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
    (as optNone<Option<Int>>  Option<Int>))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
    (as optNone<Option<Int>>  Option<Int>))))
; [eval] !(newLowerBound_V0 == (optNone(): Option[Int])) ==> !(oldLowerBound_V0 == (optNone(): Option[Int])) && (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] !(newLowerBound_V0 == (optNone(): Option[Int]))
; [eval] newLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= newLowerBound_V0@313@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= newLowerBound_V0@313@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 146 | newLowerBound_V0@313@01 != optNone[Option[Int]] | live]
; [else-branch: 146 | newLowerBound_V0@313@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 146 | newLowerBound_V0@313@01 != optNone[Option[Int]]]
(assert (not (= newLowerBound_V0@313@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] !(oldLowerBound_V0 == (optNone(): Option[Int])) && (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] !(oldLowerBound_V0 == (optNone(): Option[Int]))
; [eval] oldLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 8
; [then-branch: 147 | oldLowerBound_V0@311@01 != optNone[Option[Int]] | live]
; [else-branch: 147 | oldLowerBound_V0@311@01 == optNone[Option[Int]] | live]
(push) ; 9
; [then-branch: 147 | oldLowerBound_V0@311@01 != optNone[Option[Int]]]
(assert (not (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] (optGet(oldLowerBound_V0): Int)
; [eval] (optGet(newLowerBound_V0): Int)
(pop) ; 9
(push) ; 9
; [else-branch: 147 | oldLowerBound_V0@311@01 == optNone[Option[Int]]]
(assert (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= oldLowerBound_V0@311@01 (as optNone<Option<Int>>  Option<Int>)))))
(pop) ; 7
(push) ; 7
; [else-branch: 146 | newLowerBound_V0@313@01 == optNone[Option[Int]]]
(assert (= newLowerBound_V0@313@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [eval] !(newUpperBound_V0 == (optNone(): Option[Int])) ==> !(oldUpperBound_V0 == (optNone(): Option[Int])) && (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] !(newUpperBound_V0 == (optNone(): Option[Int]))
; [eval] newUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
  (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 148 | optSome[Option[Int]](First:(First:($t@315@01))) != optNone[Option[Int]] | live]
; [else-branch: 148 | optSome[Option[Int]](First:(First:($t@315@01))) == optNone[Option[Int]] | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 148 | optSome[Option[Int]](First:(First:($t@315@01))) != optNone[Option[Int]]]
; [eval] !(oldUpperBound_V0 == (optNone(): Option[Int])) && (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] !(oldUpperBound_V0 == (optNone(): Option[Int]))
; [eval] oldUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 8
; [then-branch: 149 | optSome[Option[Int]](First:(First:($t@315@01))) != optNone[Option[Int]] | live]
; [else-branch: 149 | optSome[Option[Int]](First:(First:($t@315@01))) == optNone[Option[Int]] | live]
(push) ; 9
; [then-branch: 149 | optSome[Option[Int]](First:(First:($t@315@01))) != optNone[Option[Int]]]
; [eval] (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] (optGet(oldUpperBound_V0): Int)
; [eval] (optGet(newUpperBound_V0): Int)
(pop) ; 9
(push) ; 9
; [else-branch: 149 | optSome[Option[Int]](First:(First:($t@315@01))) == optNone[Option[Int]]]
(assert (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
  (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
    (as optNone<Option<Int>>  Option<Int>))
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
      (as optNone<Option<Int>>  Option<Int>)))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
      (as optNone<Option<Int>>  Option<Int>)))
  (or
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
      (as optNone<Option<Int>>  Option<Int>))
    (not
      (=
        (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
        (as optNone<Option<Int>>  Option<Int>))))))
(declare-const $t@357@01 $Snap)
(assert (= $t@357@01 ($Snap.combine ($Snap.first $t@357@01) ($Snap.second $t@357@01))))
(assert (=
  ($Snap.second $t@357@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@357@01))
    ($Snap.second ($Snap.second $t@357@01)))))
(assert (= ($Snap.first ($Snap.second $t@357@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(push) ; 6
(declare-const $k@358@01 $Perm)
(assert ($Perm.isReadVar $k@358@01))
(assert (< $k@358@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@358@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@358@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@357@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) oldLowerBound_V0@311@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@358@01))
(assert (and
  (< $k@358@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@358@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@357@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) oldLowerBound_V0@311@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))))))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@357@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) oldLowerBound_V0@311@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))))
(assert (=
  ($Snap.second ($Snap.second $t@357@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@357@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@357@01))) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@359@01 $Perm)
(assert ($Perm.isReadVar $k@359@01))
(assert (< $k@359@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@359@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@359@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@357@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) newLowerBound_V0@313@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@359@01))
(assert (and
  (< $k@359@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@359@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@357@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) newLowerBound_V0@313@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))))))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@357@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) newLowerBound_V0@313@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@357@01))) $Snap.unit))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0) == sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@360@01 $Perm)
(assert ($Perm.isReadVar $k@360@01))
(assert (< $k@360@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@360@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@360@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@361@01 $Perm)
(assert ($Perm.isReadVar $k@361@01))
(assert (< $k@361@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@361@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@361@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@361@01))
(assert (and (< $k@361@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@361@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@357@01)
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) oldLowerBound_V0@311@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@360@01))
(assert ($Perm.isReadVar $k@361@01))
(assert (and
  (< $k@360@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@360@01))
  (< $k@361@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@361@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@357@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) oldLowerBound_V0@311@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))))))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@362@01 $Perm)
(assert ($Perm.isReadVar $k@362@01))
(assert (< $k@362@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@362@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@362@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@363@01 $Perm)
(assert ($Perm.isReadVar $k@363@01))
(assert (< $k@363@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@363@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@363@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@363@01))
(assert (and (< $k@363@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@363@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@357@01)
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) newLowerBound_V0@313@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@362@01))
(assert ($Perm.isReadVar $k@363@01))
(assert (and
  (< $k@362@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@362@01))
  (< $k@363@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@363@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@357@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) newLowerBound_V0@313@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))))))
(assert (Seq_equal
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first $t@357@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) oldLowerBound_V0@311@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))))
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first $t@357@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01)))) newLowerBound_V0@313@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
; [then-branch: 150 | First:(Second:(Second:(First:($t@315@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 150 | First:(Second:(Second:(First:($t@315@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 6
; [else-branch: 150 | First:(Second:(Second:(First:($t@315@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 6
; [eval] !!((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01)))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 151 | First:(Second:(Second:(First:($t@315@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 151 | First:(Second:(Second:(First:($t@315@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 151 | First:(Second:(Second:(First:($t@315@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 152 | First:(Second:(First:($t@315@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 152 | First:(Second:(First:($t@315@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 152 | First:(Second:(First:($t@315@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
; [then-branch: 153 | First:(Second:(Second:(First:($t@315@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 153 | First:(Second:(Second:(First:($t@315@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 8
; [else-branch: 153 | First:(Second:(Second:(First:($t@315@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine ($Snap.first $t@357@01) $Snap.unit)))) n_V0@310@01))
; [exec]
; label returnLabel
; [eval] sorted_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(push) ; 9
(declare-const $k@364@01 $Perm)
(assert ($Perm.isReadVar $k@364@01))
(assert (< $k@364@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@364@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@364@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine ($Snap.first $t@357@01) $Snap.unit)))) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@364@01))
(assert (and
  (< $k@364@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@364@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@315@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
        ($Snap.combine ($Snap.first $t@357@01) $Snap.unit)))) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine ($Snap.first $t@357@01) $Snap.unit)))) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine ($Snap.first $t@357@01) $Snap.unit)))) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01))
; [eval] sorted_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(push) ; 9
(declare-const $k@365@01 $Perm)
(assert ($Perm.isReadVar $k@365@01))
(assert (< $k@365@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@365@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@365@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine ($Snap.first $t@357@01) $Snap.unit)))) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@365@01))
(assert (and
  (< $k@365@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@365@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@315@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
        ($Snap.combine ($Snap.first $t@357@01) $Snap.unit)))) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine ($Snap.first $t@357@01) $Snap.unit)))) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine ($Snap.first $t@357@01) $Snap.unit)))) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0) == sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(push) ; 9
(declare-const $k@366@01 $Perm)
(assert ($Perm.isReadVar $k@366@01))
(assert (< $k@366@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@366@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@366@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@367@01 $Perm)
(assert ($Perm.isReadVar $k@367@01))
(assert (< $k@367@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@367@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@367@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@367@01))
(assert (and (< $k@367@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@367@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first $t@315@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
        ($Snap.combine ($Snap.first $t@357@01) $Snap.unit))))
  $Snap.unit) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@366@01))
(assert ($Perm.isReadVar $k@367@01))
(assert (and
  (< $k@366@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@366@01))
  (< $k@367@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@367@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@315@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
          ($Snap.combine ($Snap.first $t@357@01) $Snap.unit))))
    $Snap.unit) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01)))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@368@01 $Perm)
(assert ($Perm.isReadVar $k@368@01))
(assert (< $k@368@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@368@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@368@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@369@01 $Perm)
(assert ($Perm.isReadVar $k@369@01))
(assert (< $k@369@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@369@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@369@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@369@01))
(assert (and (< $k@369@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@369@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first $t@315@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
        ($Snap.combine ($Snap.first $t@357@01) $Snap.unit))))
  $Snap.unit) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@368@01))
(assert ($Perm.isReadVar $k@369@01))
(assert (and
  (< $k@368@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@368@01))
  (< $k@369@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@369@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@315@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
          ($Snap.combine ($Snap.first $t@357@01) $Snap.unit))))
    $Snap.unit) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (Seq_equal
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@315@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
          ($Snap.combine ($Snap.first $t@357@01) $Snap.unit))))
    $Snap.unit) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01)
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@315@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
          ($Snap.combine ($Snap.first $t@357@01) $Snap.unit))))
    $Snap.unit) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@315@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
          ($Snap.combine ($Snap.first $t@357@01) $Snap.unit))))
    $Snap.unit) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01)
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@315@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
          ($Snap.combine ($Snap.first $t@357@01) $Snap.unit))))
    $Snap.unit) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01)))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [eval] !!((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 5
(pop) ; 5
; Joined path conditions
; [then-branch: 154 | First:(Second:(First:($t@315@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 154 | First:(Second:(First:($t@315@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 5
; [else-branch: 154 | First:(Second:(First:($t@315@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 123 | First:(Second:(First:($t@315@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@315@01)))))
  $Snap.unit))
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01)))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 155 | First:(Second:(Second:(First:($t@315@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 155 | First:(Second:(Second:(First:($t@315@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 155 | First:(Second:(Second:(First:($t@315@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01)))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget2of3(n_V0): Ref)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMnode%trigger ($Snap.first $t@315@01) n_V0@310@01))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
; [then-branch: 156 | First:(Second:(First:($t@315@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 156 | First:(Second:(First:($t@315@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 5
; [else-branch: 156 | First:(Second:(First:($t@315@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 5
; [eval] !!((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 157 | First:(Second:(First:($t@315@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 157 | First:(Second:(First:($t@315@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 157 | First:(Second:(First:($t@315@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 158 | First:(Second:(Second:(First:($t@315@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 158 | First:(Second:(Second:(First:($t@315@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 158 | First:(Second:(Second:(First:($t@315@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; convert_4b5075e4_PMnode((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]),
;   oldUpperBound_V0_CN2, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]),
;   newUpperBound_V0_CN4)
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
; [eval] sorted_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(push) ; 7
(declare-const $k@370@01 $Perm)
(assert ($Perm.isReadVar $k@370@01))
(assert (< $k@370@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@370@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@370@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) oldUpperBound_V0@312@01))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@370@01))
(assert (and
  (< $k@370@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@370@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) oldUpperBound_V0@312@01)))
(set-option :timeout 0)
(push) ; 7
(assert (not (sorted_4b5075e4_PMnode ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) oldUpperBound_V0@312@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) oldUpperBound_V0@312@01))
; [eval] oldLowerBound_V0 == (optNone(): Option[Int]) ==> newLowerBound_V0 == (optNone(): Option[Int])
; [eval] oldLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
    (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 159 | optSome[Option[Int]](First:(First:($t@315@01))) == optNone[Option[Int]] | dead]
; [else-branch: 159 | optSome[Option[Int]](First:(First:($t@315@01))) != optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 159 | optSome[Option[Int]](First:(First:($t@315@01))) != optNone[Option[Int]]]
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
    (as optNone<Option<Int>>  Option<Int>))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
    (as optNone<Option<Int>>  Option<Int>))))
; [eval] oldUpperBound_V0 == (optNone(): Option[Int]) ==> newUpperBound_V0 == (optNone(): Option[Int])
; [eval] oldUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 160 | oldUpperBound_V0@312@01 == optNone[Option[Int]] | live]
; [else-branch: 160 | oldUpperBound_V0@312@01 != optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 160 | oldUpperBound_V0@312@01 == optNone[Option[Int]]]
(assert (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>)))
; [eval] newUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(pop) ; 8
(push) ; 8
; [else-branch: 160 | oldUpperBound_V0@312@01 != optNone[Option[Int]]]
(assert (not (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] !(newLowerBound_V0 == (optNone(): Option[Int])) ==> !(oldLowerBound_V0 == (optNone(): Option[Int])) && (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] !(newLowerBound_V0 == (optNone(): Option[Int]))
; [eval] newLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
  (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 161 | optSome[Option[Int]](First:(First:($t@315@01))) != optNone[Option[Int]] | live]
; [else-branch: 161 | optSome[Option[Int]](First:(First:($t@315@01))) == optNone[Option[Int]] | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 161 | optSome[Option[Int]](First:(First:($t@315@01))) != optNone[Option[Int]]]
; [eval] !(oldLowerBound_V0 == (optNone(): Option[Int])) && (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] !(oldLowerBound_V0 == (optNone(): Option[Int]))
; [eval] oldLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 9
; [then-branch: 162 | optSome[Option[Int]](First:(First:($t@315@01))) != optNone[Option[Int]] | live]
; [else-branch: 162 | optSome[Option[Int]](First:(First:($t@315@01))) == optNone[Option[Int]] | live]
(push) ; 10
; [then-branch: 162 | optSome[Option[Int]](First:(First:($t@315@01))) != optNone[Option[Int]]]
; [eval] (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] (optGet(oldLowerBound_V0): Int)
; [eval] (optGet(newLowerBound_V0): Int)
(pop) ; 10
(push) ; 10
; [else-branch: 162 | optSome[Option[Int]](First:(First:($t@315@01))) == optNone[Option[Int]]]
(assert (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
  (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
    (as optNone<Option<Int>>  Option<Int>))
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
      (as optNone<Option<Int>>  Option<Int>)))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
      (as optNone<Option<Int>>  Option<Int>)))
  (or
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
      (as optNone<Option<Int>>  Option<Int>))
    (not
      (=
        (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01))))
        (as optNone<Option<Int>>  Option<Int>))))))
; [eval] !(newUpperBound_V0 == (optNone(): Option[Int])) ==> !(oldUpperBound_V0 == (optNone(): Option[Int])) && (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] !(newUpperBound_V0 == (optNone(): Option[Int]))
; [eval] newUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= newUpperBound_V0@314@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= newUpperBound_V0@314@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 163 | newUpperBound_V0@314@01 != optNone[Option[Int]] | live]
; [else-branch: 163 | newUpperBound_V0@314@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 163 | newUpperBound_V0@314@01 != optNone[Option[Int]]]
(assert (not (= newUpperBound_V0@314@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] !(oldUpperBound_V0 == (optNone(): Option[Int])) && (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] !(oldUpperBound_V0 == (optNone(): Option[Int]))
; [eval] oldUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 9
; [then-branch: 164 | oldUpperBound_V0@312@01 != optNone[Option[Int]] | live]
; [else-branch: 164 | oldUpperBound_V0@312@01 == optNone[Option[Int]] | live]
(push) ; 10
; [then-branch: 164 | oldUpperBound_V0@312@01 != optNone[Option[Int]]]
(assert (not (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] (optGet(oldUpperBound_V0): Int)
; [eval] (optGet(newUpperBound_V0): Int)
(pop) ; 10
(push) ; 10
; [else-branch: 164 | oldUpperBound_V0@312@01 == optNone[Option[Int]]]
(assert (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= oldUpperBound_V0@312@01 (as optNone<Option<Int>>  Option<Int>)))))
(pop) ; 8
(push) ; 8
; [else-branch: 163 | newUpperBound_V0@314@01 == optNone[Option[Int]]]
(assert (= newUpperBound_V0@314@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(declare-const $t@371@01 $Snap)
(assert (= $t@371@01 ($Snap.combine ($Snap.first $t@371@01) ($Snap.second $t@371@01))))
(assert (=
  ($Snap.second $t@371@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@371@01))
    ($Snap.second ($Snap.second $t@371@01)))))
(assert (= ($Snap.first ($Snap.second $t@371@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(push) ; 7
(declare-const $k@372@01 $Perm)
(assert ($Perm.isReadVar $k@372@01))
(assert (< $k@372@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@372@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@372@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@371@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) oldUpperBound_V0@312@01))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@372@01))
(assert (and
  (< $k@372@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@372@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@371@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) oldUpperBound_V0@312@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@371@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) oldUpperBound_V0@312@01))
(assert (=
  ($Snap.second ($Snap.second $t@371@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@371@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@371@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@371@01))) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@373@01 $Perm)
(assert ($Perm.isReadVar $k@373@01))
(assert (< $k@373@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@373@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@373@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@371@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) newUpperBound_V0@314@01))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@373@01))
(assert (and
  (< $k@373@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@373@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@371@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) newUpperBound_V0@314@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@371@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) newUpperBound_V0@314@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@371@01))) $Snap.unit))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0) == sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@374@01 $Perm)
(assert ($Perm.isReadVar $k@374@01))
(assert (< $k@374@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@374@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@374@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@375@01 $Perm)
(assert ($Perm.isReadVar $k@375@01))
(assert (< $k@375@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@375@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@375@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@375@01))
(assert (and (< $k@375@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@375@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@371@01)
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) oldUpperBound_V0@312@01))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@374@01))
(assert ($Perm.isReadVar $k@375@01))
(assert (and
  (< $k@374@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@374@01))
  (< $k@375@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@375@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@371@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) oldUpperBound_V0@312@01)))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@376@01 $Perm)
(assert ($Perm.isReadVar $k@376@01))
(assert (< $k@376@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@376@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@376@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@377@01 $Perm)
(assert ($Perm.isReadVar $k@377@01))
(assert (< $k@377@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@377@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@377@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@377@01))
(assert (and (< $k@377@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@377@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@371@01)
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) newUpperBound_V0@314@01))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@376@01))
(assert ($Perm.isReadVar $k@377@01))
(assert (and
  (< $k@376@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@376@01))
  (< $k@377@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@377@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@371@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) newUpperBound_V0@314@01)))
(assert (Seq_equal
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first $t@371@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) oldUpperBound_V0@312@01)
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first $t@371@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@315@01)))) newUpperBound_V0@314@01)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
; [then-branch: 165 | First:(Second:(First:($t@315@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 165 | First:(Second:(First:($t@315@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 7
; [else-branch: 165 | First:(Second:(First:($t@315@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 166 | First:(Second:(Second:(First:($t@315@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 166 | First:(Second:(Second:(First:($t@315@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 166 | First:(Second:(Second:(First:($t@315@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget2of3(n_V0): Ref)
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine $Snap.unit ($Snap.first $t@371@01))))) n_V0@310@01))
; [exec]
; label returnLabel
; [eval] sorted_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(push) ; 9
(declare-const $k@378@01 $Perm)
(assert ($Perm.isReadVar $k@378@01))
(assert (< $k@378@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@378@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@378@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine $Snap.unit ($Snap.first $t@371@01))))) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@378@01))
(assert (and
  (< $k@378@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@378@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@315@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
        ($Snap.combine $Snap.unit ($Snap.first $t@371@01))))) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine $Snap.unit ($Snap.first $t@371@01))))) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine $Snap.unit ($Snap.first $t@371@01))))) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01))
; [eval] sorted_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(push) ; 9
(declare-const $k@379@01 $Perm)
(assert ($Perm.isReadVar $k@379@01))
(assert (< $k@379@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@379@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@379@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine $Snap.unit ($Snap.first $t@371@01))))) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@379@01))
(assert (and
  (< $k@379@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@379@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@315@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
        ($Snap.combine $Snap.unit ($Snap.first $t@371@01))))) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine $Snap.unit ($Snap.first $t@371@01))))) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine $Snap.unit ($Snap.first $t@371@01))))) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0) == sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(push) ; 9
(declare-const $k@380@01 $Perm)
(assert ($Perm.isReadVar $k@380@01))
(assert (< $k@380@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@380@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@380@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@381@01 $Perm)
(assert ($Perm.isReadVar $k@381@01))
(assert (< $k@381@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@381@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@381@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@381@01))
(assert (and (< $k@381@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@381@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first $t@315@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
        ($Snap.combine $Snap.unit ($Snap.first $t@371@01)))))
  $Snap.unit) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@380@01))
(assert ($Perm.isReadVar $k@381@01))
(assert (and
  (< $k@380@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@380@01))
  (< $k@381@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@381@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@315@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
          ($Snap.combine $Snap.unit ($Snap.first $t@371@01)))))
    $Snap.unit) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01)))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@382@01 $Perm)
(assert ($Perm.isReadVar $k@382@01))
(assert (< $k@382@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@382@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@382@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@383@01 $Perm)
(assert ($Perm.isReadVar $k@383@01))
(assert (< $k@383@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@383@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@383@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@383@01))
(assert (and (< $k@383@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@383@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first $t@315@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
        ($Snap.combine $Snap.unit ($Snap.first $t@371@01)))))
  $Snap.unit) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@382@01))
(assert ($Perm.isReadVar $k@383@01))
(assert (and
  (< $k@382@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@382@01))
  (< $k@383@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@383@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@315@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
          ($Snap.combine $Snap.unit ($Snap.first $t@371@01)))))
    $Snap.unit) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (Seq_equal
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@315@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
          ($Snap.combine $Snap.unit ($Snap.first $t@371@01)))))
    $Snap.unit) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01)
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@315@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
          ($Snap.combine $Snap.unit ($Snap.first $t@371@01)))))
    $Snap.unit) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@315@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
          ($Snap.combine $Snap.unit ($Snap.first $t@371@01)))))
    $Snap.unit) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01)
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@315@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
          ($Snap.combine $Snap.unit ($Snap.first $t@371@01)))))
    $Snap.unit) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01)))
(pop) ; 8
(pop) ; 7
(pop) ; 6
; [eval] !!((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
; [then-branch: 167 | First:(Second:(Second:(First:($t@315@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 167 | First:(Second:(Second:(First:($t@315@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 6
; [else-branch: 167 | First:(Second:(Second:(First:($t@315@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 155 | First:(Second:(Second:(First:($t@315@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@315@01)))))
  $Snap.unit))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMnode%trigger ($Snap.first $t@315@01) n_V0@310@01))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
; [then-branch: 168 | First:(Second:(First:($t@315@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 168 | First:(Second:(First:($t@315@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 5
; [else-branch: 168 | First:(Second:(First:($t@315@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 5
; [eval] !!((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@315@01))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 169 | First:(Second:(First:($t@315@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 169 | First:(Second:(First:($t@315@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 169 | First:(Second:(First:($t@315@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
; [then-branch: 170 | First:(Second:(Second:(First:($t@315@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 170 | First:(Second:(Second:(First:($t@315@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 6
; [else-branch: 170 | First:(Second:(Second:(First:($t@315@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 6
; [eval] !!((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01)))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 171 | First:(Second:(Second:(First:($t@315@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 171 | First:(Second:(Second:(First:($t@315@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 171 | First:(Second:(Second:(First:($t@315@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
; [then-branch: 172 | First:(Second:(First:($t@315@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 172 | First:(Second:(First:($t@315@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 7
; [else-branch: 172 | First:(Second:(First:($t@315@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
; [then-branch: 173 | First:(Second:(Second:(First:($t@315@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 173 | First:(Second:(Second:(First:($t@315@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 8
; [else-branch: 173 | First:(Second:(Second:(First:($t@315@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@310@01))
; [exec]
; label returnLabel
; [eval] sorted_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(push) ; 9
(declare-const $k@384@01 $Perm)
(assert ($Perm.isReadVar $k@384@01))
(assert (< $k@384@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@384@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@384@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@384@01))
(assert (and
  (< $k@384@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@384@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@315@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
        ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01))
; [eval] sorted_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(push) ; 9
(declare-const $k@385@01 $Perm)
(assert ($Perm.isReadVar $k@385@01))
(assert (< $k@385@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@385@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@385@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@385@01))
(assert (and
  (< $k@385@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@385@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@315@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
        ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@315@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0) == sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(push) ; 9
(declare-const $k@386@01 $Perm)
(assert ($Perm.isReadVar $k@386@01))
(assert (< $k@386@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@386@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@386@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@387@01 $Perm)
(assert ($Perm.isReadVar $k@387@01))
(assert (< $k@387@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@387@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@387@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@387@01))
(assert (and (< $k@387@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@387@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first $t@315@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
        ($Snap.combine $Snap.unit $Snap.unit))))
  $Snap.unit) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@386@01))
(assert ($Perm.isReadVar $k@387@01))
(assert (and
  (< $k@386@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@386@01))
  (< $k@387@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@387@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@315@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
          ($Snap.combine $Snap.unit $Snap.unit))))
    $Snap.unit) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01)))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@388@01 $Perm)
(assert ($Perm.isReadVar $k@388@01))
(assert (< $k@388@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@388@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@388@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@389@01 $Perm)
(assert ($Perm.isReadVar $k@389@01))
(assert (< $k@389@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@389@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@389@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@389@01))
(assert (and (< $k@389@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@389@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first $t@315@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
        ($Snap.combine $Snap.unit $Snap.unit))))
  $Snap.unit) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@388@01))
(assert ($Perm.isReadVar $k@389@01))
(assert (and
  (< $k@388@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@388@01))
  (< $k@389@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@389@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@315@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
          ($Snap.combine $Snap.unit $Snap.unit))))
    $Snap.unit) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (Seq_equal
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@315@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
          ($Snap.combine $Snap.unit $Snap.unit))))
    $Snap.unit) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01)
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@315@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
          ($Snap.combine $Snap.unit $Snap.unit))))
    $Snap.unit) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@315@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
          ($Snap.combine $Snap.unit $Snap.unit))))
    $Snap.unit) n_V0@310@01 oldLowerBound_V0@311@01 oldUpperBound_V0@312@01)
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@315@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@315@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@315@01))))
          ($Snap.combine $Snap.unit $Snap.unit))))
    $Snap.unit) n_V0@310@01 newLowerBound_V0@313@01 newUpperBound_V0@314@01)))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- deleteMinimum_4b5075e4_PMnode ----------
(declare-const n_V0@390@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const lowerBound_V0@391@01 Option<Int>)
(declare-const upperBound_V0@392@01 Option<Int>)
(declare-const res_V0@393@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const minimum_V0@394@01 Int)
(declare-const n_V0@395@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const lowerBound_V0@396@01 Option<Int>)
(declare-const upperBound_V0@397@01 Option<Int>)
(declare-const res_V0@398@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const minimum_V0@399@01 Int)
(push) ; 1
(declare-const $t@400@01 $Snap)
(assert (= $t@400@01 ($Snap.combine ($Snap.first $t@400@01) ($Snap.second $t@400@01))))
(assert (= ($Snap.second $t@400@01) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 2
(declare-const $k@401@01 $Perm)
(assert ($Perm.isReadVar $k@401@01))
(assert (< $k@401@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@401@01)))
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@401@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@400@01) n_V0@395@01 lowerBound_V0@396@01 upperBound_V0@397@01))
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@401@01))
(assert (and
  (< $k@401@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@401@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@400@01) n_V0@395@01 lowerBound_V0@396@01 upperBound_V0@397@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@400@01) n_V0@395@01 lowerBound_V0@396@01 upperBound_V0@397@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@402@01 $Snap)
(assert (= $t@402@01 ($Snap.combine ($Snap.first $t@402@01) ($Snap.second $t@402@01))))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 3
(assert (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  res_V0@398@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    res_V0@398@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 174 | res_V0@398@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 174 | res_V0@398@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 174 | res_V0@398@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    res_V0@398@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(assert (=
  ($Snap.first $t@402@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@402@01))
    ($Snap.second ($Snap.first $t@402@01)))))
(assert (= ($Snap.second ($Snap.first $t@402@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)
; [eval] (optSome(minimum_V0): Option[Int])
(push) ; 4
(declare-const $k@403@01 $Perm)
(assert ($Perm.isReadVar $k@403@01))
(assert (< $k@403@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@403@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@403@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.first $t@402@01)) res_V0@398@01 (optSome<Option<Int>> minimum_V0@399@01) upperBound_V0@397@01))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@403@01))
(assert (and
  (< $k@403@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@403@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.first $t@402@01)) res_V0@398@01 (optSome<Option<Int>> minimum_V0@399@01) upperBound_V0@397@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.first $t@402@01)) res_V0@398@01 (optSome<Option<Int>> minimum_V0@399@01) upperBound_V0@397@01))
(assert (=
  ($Snap.second $t@402@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@402@01))
    ($Snap.second ($Snap.second $t@402@01)))))
(assert (= ($Snap.first ($Snap.second $t@402@01)) $Snap.unit))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  res_V0@398@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 175 | res_V0@398@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 175 | res_V0@398@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 175 | res_V0@398@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)))
; [eval] (minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)
; [eval] (optSome(minimum_V0): Option[Int])
(push) ; 6
(declare-const $k@404@01 $Perm)
(assert ($Perm.isReadVar $k@404@01))
(assert (< $k@404@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@404@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@404@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@405@01 $Perm)
(assert ($Perm.isReadVar $k@405@01))
(assert (< $k@405@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@405@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@405@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@405@01))
(assert (and (< $k@405@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@405@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@402@01))
  $Snap.unit) res_V0@398@01 (optSome<Option<Int>> minimum_V0@399@01) upperBound_V0@397@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@404@01))
(assert ($Perm.isReadVar $k@405@01))
(assert (and
  (< $k@404@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@404@01))
  (< $k@405@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@405@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@402@01))
    $Snap.unit) res_V0@398@01 (optSome<Option<Int>> minimum_V0@399@01) upperBound_V0@397@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@404@01))
(assert ($Perm.isReadVar $k@405@01))
(assert (=>
  (not
    (=
      res_V0@398@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@404@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@404@01))
    (< $k@405@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@405@01))
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.first ($Snap.first $t@402@01))
      $Snap.unit) res_V0@398@01 (optSome<Option<Int>> minimum_V0@399@01) upperBound_V0@397@01))))
(assert (=>
  (not
    (=
      res_V0@398@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.first $t@402@01))
        $Snap.unit) res_V0@398@01 (optSome<Option<Int>> minimum_V0@399@01) upperBound_V0@397@01)
      minimum_V0@399@01))))
(assert (=
  ($Snap.second ($Snap.second $t@402@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@402@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@402@01))) $Snap.unit))
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 176 | lowerBound_V0@396@01 != optNone[Option[Int]] | live]
; [else-branch: 176 | lowerBound_V0@396@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 176 | lowerBound_V0@396@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 5
(push) ; 5
; [else-branch: 176 | lowerBound_V0@396@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))))
(assert (=>
  (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))
  (< (optGet<Int> lowerBound_V0@396@01) minimum_V0@399@01)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@402@01))) $Snap.unit))
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > minimum_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 177 | upperBound_V0@397@01 != optNone[Option[Int]] | live]
; [else-branch: 177 | upperBound_V0@397@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 177 | upperBound_V0@397@01 != optNone[Option[Int]]]
(assert (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(upperBound_V0): Int) > minimum_V0
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 5
(push) ; 5
; [else-branch: 177 | upperBound_V0@397@01 == optNone[Option[Int]]]
(assert (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))))
(assert (=>
  (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))
  (> (optGet<Int> upperBound_V0@397@01) minimum_V0@399@01)))
(pop) ; 3
(push) ; 3
; [else-branch: 174 | res_V0@398@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  res_V0@398@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (= ($Snap.first $t@402@01) $Snap.unit))
(assert (=
  ($Snap.second $t@402@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@402@01))
    ($Snap.second ($Snap.second $t@402@01)))))
(assert (= ($Snap.first ($Snap.second $t@402@01)) $Snap.unit))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
; [then-branch: 178 | res_V0@398@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 178 | res_V0@398@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 5
; [else-branch: 178 | res_V0@398@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second $t@402@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@402@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@402@01))) $Snap.unit))
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 179 | lowerBound_V0@396@01 != optNone[Option[Int]] | live]
; [else-branch: 179 | lowerBound_V0@396@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 179 | lowerBound_V0@396@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 5
(push) ; 5
; [else-branch: 179 | lowerBound_V0@396@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))))
(assert (=>
  (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))
  (< (optGet<Int> lowerBound_V0@396@01) minimum_V0@399@01)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@402@01))) $Snap.unit))
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > minimum_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 180 | upperBound_V0@397@01 != optNone[Option[Int]] | live]
; [else-branch: 180 | upperBound_V0@397@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 180 | upperBound_V0@397@01 != optNone[Option[Int]]]
(assert (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(upperBound_V0): Int) > minimum_V0
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 5
(push) ; 5
; [else-branch: 180 | upperBound_V0@397@01 == optNone[Option[Int]]]
(assert (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))))
(assert (=>
  (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))
  (> (optGet<Int> upperBound_V0@397@01) minimum_V0@399@01)))
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var minimum_V0_CN4: Int
(declare-const minimum_V0_CN4@406@01 Int)
; [exec]
; var res_V0_CN3: ShStruct3[Ref, Ref, Ref]
(declare-const res_V0_CN3@407@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; var upperBound_V0_CN2: Option[Int]
(declare-const upperBound_V0_CN2@408@01 Option<Int>)
; [exec]
; var lowerBound_V0_CN1: Option[Int]
(declare-const lowerBound_V0_CN1@409@01 Option<Int>)
; [exec]
; var n_V0_CN0: ShStruct3[Ref, Ref, Ref]
(declare-const n_V0_CN0@410@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; inhale res_V0 ==
;   shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(declare-const $t@411@01 $Snap)
(assert (= $t@411@01 $Snap.unit))
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 3
(assert (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (=
  res_V0@398@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale minimum_V0 == 0
(declare-const $t@412@01 $Snap)
(assert (= $t@412@01 $Snap.unit))
; [eval] minimum_V0 == 0
(assert (= minimum_V0@399@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale n_V0_CN0 ==
;   shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(declare-const $t@413@01 $Snap)
(assert (= $t@413@01 $Snap.unit))
; [eval] n_V0_CN0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (=
  n_V0_CN0@410@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale lowerBound_V0_CN1 == (optNone(): Option[Int])
(declare-const $t@414@01 $Snap)
(assert (= $t@414@01 $Snap.unit))
; [eval] lowerBound_V0_CN1 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(assert (= lowerBound_V0_CN1@409@01 (as optNone<Option<Int>>  Option<Int>)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale upperBound_V0_CN2 == (optNone(): Option[Int])
(declare-const $t@415@01 $Snap)
(assert (= $t@415@01 $Snap.unit))
; [eval] upperBound_V0_CN2 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(assert (= upperBound_V0_CN2@408@01 (as optNone<Option<Int>>  Option<Int>)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale res_V0_CN3 ==
;   shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(declare-const $t@416@01 $Snap)
(assert (= $t@416@01 $Snap.unit))
; [eval] res_V0_CN3 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (=
  res_V0_CN3@407@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale minimum_V0_CN4 == 0
(declare-const $t@417@01 $Snap)
(assert (= $t@417@01 $Snap.unit))
; [eval] minimum_V0_CN4 == 0
(assert (= minimum_V0_CN4@406@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; n_V0_CN0 := n_V0
; [exec]
; lowerBound_V0_CN1 := lowerBound_V0
; [exec]
; upperBound_V0_CN2 := upperBound_V0
; [exec]
; unfold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
(assert (=
  ($Snap.first $t@400@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@400@01))
    ($Snap.second ($Snap.first $t@400@01)))))
; [eval] (ShStructget0of3(n_V0): Ref)
(assert (not (= (ShStructget0of3<Ref> n_V0@395@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first $t@400@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@400@01)))
    ($Snap.second ($Snap.second ($Snap.first $t@400@01))))))
; [eval] (ShStructget1of3(n_V0): Ref)
(assert (not (= (ShStructget1of3<Ref> n_V0@395@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first $t@400@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))))
; [eval] (ShStructget2of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> n_V0@395@01) (ShStructget2of3<Ref> n_V0@395@01))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget2of3<Ref> n_V0@395@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01))))))))
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@400@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@400@01))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 181 | First:(Second:(First:($t@400@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 181 | First:(Second:(First:($t@400@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 181 | First:(Second:(First:($t@400@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@400@01))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 182 | First:(Second:(Second:(First:($t@400@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 182 | First:(Second:(Second:(First:($t@400@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 182 | First:(Second:(Second:(First:($t@400@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget2of3(n_V0): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@400@01))))
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMnode%trigger ($Snap.first $t@400@01) n_V0@395@01))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@400@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 183 | First:(Second:(First:($t@400@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 183 | First:(Second:(First:($t@400@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 183 | First:(Second:(First:($t@400@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; var N13: Int
(declare-const N13@418@01 Int)
; [exec]
; var N12: ShStruct3[Ref, Ref, Ref]
(declare-const N12@419@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; N12, N13 := deleteMinimum_4b5075e4_PMnode((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   lowerBound_V0_CN1, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]))
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 6
(declare-const $k@420@01 $Perm)
(assert ($Perm.isReadVar $k@420@01))
(assert (< $k@420@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@420@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@420@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@400@01)))) lowerBound_V0@396@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@420@01))
(assert (and
  (< $k@420@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@420@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@400@01)))) lowerBound_V0@396@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01)))))))
(set-option :timeout 0)
(push) ; 6
(assert (not (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@400@01)))) lowerBound_V0@396@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@400@01)))) lowerBound_V0@396@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))))
(declare-const res_V0@421@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const minimum_V0@422@01 Int)
(declare-const $t@423@01 $Snap)
(assert (= $t@423@01 ($Snap.combine ($Snap.first $t@423@01) ($Snap.second $t@423@01))))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  res_V0@421@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    res_V0@421@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 184 | res_V0@421@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 184 | res_V0@421@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 184 | res_V0@421@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    res_V0@421@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(assert (=
  ($Snap.first $t@423@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@423@01))
    ($Snap.second ($Snap.first $t@423@01)))))
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
  res_V0@421@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (= ($Snap.second ($Snap.first $t@423@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)
; [eval] (optSome(minimum_V0): Option[Int])
(set-option :timeout 0)
(push) ; 7
(declare-const $k@424@01 $Perm)
(assert ($Perm.isReadVar $k@424@01))
(assert (< $k@424@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@424@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@424@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.first $t@423@01)) res_V0@421@01 (optSome<Option<Int>> minimum_V0@422@01) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@424@01))
(assert (and
  (< $k@424@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@424@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.first $t@423@01)) res_V0@421@01 (optSome<Option<Int>> minimum_V0@422@01) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01)))))))
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.first $t@423@01)) res_V0@421@01 (optSome<Option<Int>> minimum_V0@422@01) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))))
(assert (=
  ($Snap.second $t@423@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@423@01))
    ($Snap.second ($Snap.second $t@423@01)))))
(assert (= ($Snap.first ($Snap.second $t@423@01)) $Snap.unit))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  res_V0@421@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 185 | res_V0@421@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 185 | res_V0@421@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 185 | res_V0@421@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)))
; [eval] (minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)
; [eval] (optSome(minimum_V0): Option[Int])
(push) ; 9
(declare-const $k@425@01 $Perm)
(assert ($Perm.isReadVar $k@425@01))
(assert (< $k@425@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@425@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@425@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@426@01 $Perm)
(assert ($Perm.isReadVar $k@426@01))
(assert (< $k@426@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@426@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@426@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@426@01))
(assert (and (< $k@426@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@426@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@423@01))
  $Snap.unit) res_V0@421@01 (optSome<Option<Int>> minimum_V0@422@01) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@425@01))
(assert ($Perm.isReadVar $k@426@01))
(assert (and
  (< $k@425@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@425@01))
  (< $k@426@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@426@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@423@01))
    $Snap.unit) res_V0@421@01 (optSome<Option<Int>> minimum_V0@422@01) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01)))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@425@01))
(assert ($Perm.isReadVar $k@426@01))
(assert (=>
  (not
    (=
      res_V0@421@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@425@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@425@01))
    (< $k@426@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@426@01))
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.first ($Snap.first $t@423@01))
      $Snap.unit) res_V0@421@01 (optSome<Option<Int>> minimum_V0@422@01) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))))))
(assert (=>
  (not
    (=
      res_V0@421@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.first $t@423@01))
        $Snap.unit) res_V0@421@01 (optSome<Option<Int>> minimum_V0@422@01) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01)))))
      minimum_V0@422@01))))
(assert (=
  ($Snap.second ($Snap.second $t@423@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@423@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@423@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@423@01))) $Snap.unit))
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(set-option :timeout 0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 186 | lowerBound_V0@396@01 != optNone[Option[Int]] | live]
; [else-branch: 186 | lowerBound_V0@396@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 186 | lowerBound_V0@396@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 8
(push) ; 8
; [else-branch: 186 | lowerBound_V0@396@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))))
(assert (=>
  (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))
  (< (optGet<Int> lowerBound_V0@396@01) minimum_V0@422@01)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@423@01))) $Snap.unit))
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > minimum_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))
  (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))
    (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 187 | optSome[Option[Int]](First:(First:($t@400@01))) != optNone[Option[Int]] | live]
; [else-branch: 187 | optSome[Option[Int]](First:(First:($t@400@01))) == optNone[Option[Int]] | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 187 | optSome[Option[Int]](First:(First:($t@400@01))) != optNone[Option[Int]]]
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))
    (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(upperBound_V0): Int) > minimum_V0
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))
    (as optNone<Option<Int>>  Option<Int>))))
(assert (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))
      (as optNone<Option<Int>>  Option<Int>)))
  (>
    (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01)))))
    minimum_V0@422@01)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ := N12
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget2of3<Ref> n_V0@395@01) (ShStructget1of3<Ref> n_V0@395@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; minimum_V0_CN4 := N13
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  res_V0@421@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 188 | res_V0@421@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 188 | res_V0@421@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 188 | res_V0@421@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 189 | First:(Second:(Second:(First:($t@400@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 189 | First:(Second:(Second:(First:($t@400@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 189 | First:(Second:(Second:(First:($t@400@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget2of3(n_V0): Ref)
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first $t@400@01))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@421@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
      ($Snap.combine
        ($Snap.first ($Snap.first $t@423@01))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01))))))))) n_V0@395@01))
; [exec]
; res_V0_CN3 := n_V0_CN0
; [exec]
; res_V0_CN3 := res_V0_CN3
; [exec]
; minimum_V0_CN4 := minimum_V0_CN4
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN3
; [exec]
; minimum_V0 := minimum_V0_CN4
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  n_V0@395@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    n_V0@395@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 190 | n_V0@395@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 190 | n_V0@395@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 190 | n_V0@395@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    n_V0@395@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] sorted_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)
; [eval] (optSome(minimum_V0): Option[Int])
(push) ; 10
(declare-const $k@427@01 $Perm)
(assert ($Perm.isReadVar $k@427@01))
(assert (< $k@427@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@427@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@427@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@400@01))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@421@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
      ($Snap.combine
        ($Snap.first ($Snap.first $t@423@01))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01))))))))) n_V0@395@01 (optSome<Option<Int>> minimum_V0@422@01) upperBound_V0@397@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@427@01))
(assert (and
  (< $k@427@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@427@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@400@01))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@421@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
        ($Snap.combine
          ($Snap.first ($Snap.first $t@423@01))
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01))))))))) n_V0@395@01 (optSome<Option<Int>> minimum_V0@422@01) upperBound_V0@397@01)))
(set-option :timeout 0)
(push) ; 10
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@400@01))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@421@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
      ($Snap.combine
        ($Snap.first ($Snap.first $t@423@01))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01))))))))) n_V0@395@01 (optSome<Option<Int>> minimum_V0@422@01) upperBound_V0@397@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@400@01))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@421@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
      ($Snap.combine
        ($Snap.first ($Snap.first $t@423@01))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01))))))))) n_V0@395@01 (optSome<Option<Int>> minimum_V0@422@01) upperBound_V0@397@01))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  n_V0@395@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 191 | n_V0@395@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 191 | n_V0@395@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 191 | n_V0@395@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)))
; [eval] (minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)
; [eval] (optSome(minimum_V0): Option[Int])
(push) ; 12
(declare-const $k@428@01 $Perm)
(assert ($Perm.isReadVar $k@428@01))
(assert (< $k@428@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@428@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@428@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@429@01 $Perm)
(assert ($Perm.isReadVar $k@429@01))
(assert (< $k@429@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@429@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@429@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@429@01))
(assert (and (< $k@429@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@429@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first $t@400@01))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@421@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
        ($Snap.combine
          ($Snap.first ($Snap.first $t@423@01))
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))))))
  $Snap.unit) n_V0@395@01 (optSome<Option<Int>> minimum_V0@422@01) upperBound_V0@397@01))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@428@01))
(assert ($Perm.isReadVar $k@429@01))
(assert (and
  (< $k@428@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@428@01))
  (< $k@429@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@429@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@400@01))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@421@01)
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
          ($Snap.combine
            ($Snap.first ($Snap.first $t@423@01))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))))))
    $Snap.unit) n_V0@395@01 (optSome<Option<Int>> minimum_V0@422@01) upperBound_V0@397@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@428@01))
(assert ($Perm.isReadVar $k@429@01))
(assert (=>
  (not
    (=
      n_V0@395@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@428@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@428@01))
    (< $k@429@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@429@01))
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@400@01))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@421@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
            ($Snap.combine
              ($Snap.first ($Snap.first $t@423@01))
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))))))
      $Snap.unit) n_V0@395@01 (optSome<Option<Int>> minimum_V0@422@01) upperBound_V0@397@01))))
(set-option :timeout 0)
(push) ; 10
(assert (not (=>
  (not
    (=
      n_V0@395@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@400@01))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@421@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
              ($Snap.combine
                ($Snap.first ($Snap.first $t@423@01))
                ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))))))
        $Snap.unit) n_V0@395@01 (optSome<Option<Int>> minimum_V0@422@01) upperBound_V0@397@01)
      minimum_V0@422@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      n_V0@395@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@400@01))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@421@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
              ($Snap.combine
                ($Snap.first ($Snap.first $t@423@01))
                ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))))))
        $Snap.unit) n_V0@395@01 (optSome<Option<Int>> minimum_V0@422@01) upperBound_V0@397@01)
      minimum_V0@422@01))))
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 192 | lowerBound_V0@396@01 != optNone[Option[Int]] | live]
; [else-branch: 192 | lowerBound_V0@396@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 192 | lowerBound_V0@396@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 11
(push) ; 11
; [else-branch: 192 | lowerBound_V0@396@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > minimum_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 193 | upperBound_V0@397@01 != optNone[Option[Int]] | live]
; [else-branch: 193 | upperBound_V0@397@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 193 | upperBound_V0@397@01 != optNone[Option[Int]]]
(assert (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(upperBound_V0): Int) > minimum_V0
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 11
(push) ; 11
; [else-branch: 193 | upperBound_V0@397@01 == optNone[Option[Int]]]
(assert (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))))
(push) ; 10
(assert (not (=>
  (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))
  (> (optGet<Int> upperBound_V0@397@01) minimum_V0@422@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))
  (> (optGet<Int> upperBound_V0@397@01) minimum_V0@422@01)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 184 | res_V0@421@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  res_V0@421@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (= ($Snap.first $t@423@01) $Snap.unit))
(assert (=
  ($Snap.second $t@423@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@423@01))
    ($Snap.second ($Snap.second $t@423@01)))))
(assert (= ($Snap.first ($Snap.second $t@423@01)) $Snap.unit))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [then-branch: 194 | res_V0@421@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 194 | res_V0@421@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 8
; [else-branch: 194 | res_V0@421@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second $t@423@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@423@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@423@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@423@01))) $Snap.unit))
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 195 | lowerBound_V0@396@01 != optNone[Option[Int]] | live]
; [else-branch: 195 | lowerBound_V0@396@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 195 | lowerBound_V0@396@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 8
(push) ; 8
; [else-branch: 195 | lowerBound_V0@396@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))))
(assert (=>
  (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))
  (< (optGet<Int> lowerBound_V0@396@01) minimum_V0@422@01)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@423@01))) $Snap.unit))
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > minimum_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))
  (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))
    (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 196 | optSome[Option[Int]](First:(First:($t@400@01))) != optNone[Option[Int]] | live]
; [else-branch: 196 | optSome[Option[Int]](First:(First:($t@400@01))) == optNone[Option[Int]] | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 196 | optSome[Option[Int]](First:(First:($t@400@01))) != optNone[Option[Int]]]
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))
    (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(upperBound_V0): Int) > minimum_V0
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))
    (as optNone<Option<Int>>  Option<Int>))))
(assert (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))
      (as optNone<Option<Int>>  Option<Int>)))
  (>
    (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01)))))
    minimum_V0@422@01)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ := N12
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget2of3<Ref> n_V0@395@01) (ShStructget1of3<Ref> n_V0@395@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; minimum_V0_CN4 := N13
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
; [then-branch: 197 | res_V0@421@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 197 | res_V0@421@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 7
; [else-branch: 197 | res_V0@421@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 198 | First:(Second:(Second:(First:($t@400@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 198 | First:(Second:(Second:(First:($t@400@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 198 | First:(Second:(Second:(First:($t@400@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget2of3(n_V0): Ref)
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first $t@400@01))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@421@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01))))))))) n_V0@395@01))
; [exec]
; res_V0_CN3 := n_V0_CN0
; [exec]
; res_V0_CN3 := res_V0_CN3
; [exec]
; minimum_V0_CN4 := minimum_V0_CN4
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN3
; [exec]
; minimum_V0 := minimum_V0_CN4
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  n_V0@395@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    n_V0@395@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 199 | n_V0@395@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 199 | n_V0@395@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 199 | n_V0@395@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    n_V0@395@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] sorted_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)
; [eval] (optSome(minimum_V0): Option[Int])
(push) ; 10
(declare-const $k@430@01 $Perm)
(assert ($Perm.isReadVar $k@430@01))
(assert (< $k@430@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@430@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@430@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@400@01))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@421@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01))))))))) n_V0@395@01 (optSome<Option<Int>> minimum_V0@422@01) upperBound_V0@397@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@430@01))
(assert (and
  (< $k@430@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@430@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@400@01))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@421@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01))))))))) n_V0@395@01 (optSome<Option<Int>> minimum_V0@422@01) upperBound_V0@397@01)))
(set-option :timeout 0)
(push) ; 10
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@400@01))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@421@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01))))))))) n_V0@395@01 (optSome<Option<Int>> minimum_V0@422@01) upperBound_V0@397@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@400@01))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@421@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01))))))))) n_V0@395@01 (optSome<Option<Int>> minimum_V0@422@01) upperBound_V0@397@01))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  n_V0@395@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 200 | n_V0@395@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 200 | n_V0@395@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 200 | n_V0@395@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)))
; [eval] (minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)
; [eval] (optSome(minimum_V0): Option[Int])
(push) ; 12
(declare-const $k@431@01 $Perm)
(assert ($Perm.isReadVar $k@431@01))
(assert (< $k@431@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@431@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@431@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@432@01 $Perm)
(assert ($Perm.isReadVar $k@432@01))
(assert (< $k@432@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@432@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@432@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@432@01))
(assert (and (< $k@432@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@432@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first $t@400@01))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@421@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))))))
  $Snap.unit) n_V0@395@01 (optSome<Option<Int>> minimum_V0@422@01) upperBound_V0@397@01))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@431@01))
(assert ($Perm.isReadVar $k@432@01))
(assert (and
  (< $k@431@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@431@01))
  (< $k@432@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@432@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@400@01))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@421@01)
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))))))
    $Snap.unit) n_V0@395@01 (optSome<Option<Int>> minimum_V0@422@01) upperBound_V0@397@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@431@01))
(assert ($Perm.isReadVar $k@432@01))
(assert (=>
  (not
    (=
      n_V0@395@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@431@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@431@01))
    (< $k@432@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@432@01))
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@400@01))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@421@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
            ($Snap.combine
              $Snap.unit
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))))))
      $Snap.unit) n_V0@395@01 (optSome<Option<Int>> minimum_V0@422@01) upperBound_V0@397@01))))
(set-option :timeout 0)
(push) ; 10
(assert (not (=>
  (not
    (=
      n_V0@395@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@400@01))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@421@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
              ($Snap.combine
                $Snap.unit
                ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))))))
        $Snap.unit) n_V0@395@01 (optSome<Option<Int>> minimum_V0@422@01) upperBound_V0@397@01)
      minimum_V0@422@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      n_V0@395@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@400@01))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@421@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
              ($Snap.combine
                $Snap.unit
                ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))))))
        $Snap.unit) n_V0@395@01 (optSome<Option<Int>> minimum_V0@422@01) upperBound_V0@397@01)
      minimum_V0@422@01))))
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 201 | lowerBound_V0@396@01 != optNone[Option[Int]] | live]
; [else-branch: 201 | lowerBound_V0@396@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 201 | lowerBound_V0@396@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 11
(push) ; 11
; [else-branch: 201 | lowerBound_V0@396@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > minimum_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 202 | upperBound_V0@397@01 != optNone[Option[Int]] | live]
; [else-branch: 202 | upperBound_V0@397@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 202 | upperBound_V0@397@01 != optNone[Option[Int]]]
(assert (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(upperBound_V0): Int) > minimum_V0
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 11
(push) ; 11
; [else-branch: 202 | upperBound_V0@397@01 == optNone[Option[Int]]]
(assert (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))))
(push) ; 10
(assert (not (=>
  (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))
  (> (optGet<Int> upperBound_V0@397@01) minimum_V0@422@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))
  (> (optGet<Int> upperBound_V0@397@01) minimum_V0@422@01)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [eval] !!((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 5
(pop) ; 5
; Joined path conditions
; [then-branch: 203 | First:(Second:(First:($t@400@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 203 | First:(Second:(First:($t@400@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 5
; [else-branch: 203 | First:(Second:(First:($t@400@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 182 | First:(Second:(Second:(First:($t@400@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
  $Snap.unit))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMnode%trigger ($Snap.first $t@400@01) n_V0@395@01))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@400@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 204 | First:(Second:(First:($t@400@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 204 | First:(Second:(First:($t@400@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 204 | First:(Second:(First:($t@400@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; var N13: Int
(declare-const N13@433@01 Int)
; [exec]
; var N12: ShStruct3[Ref, Ref, Ref]
(declare-const N12@434@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; N12, N13 := deleteMinimum_4b5075e4_PMnode((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   lowerBound_V0_CN1, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]))
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 6
(declare-const $k@435@01 $Perm)
(assert ($Perm.isReadVar $k@435@01))
(assert (< $k@435@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@435@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@435@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@400@01)))) lowerBound_V0@396@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@435@01))
(assert (and
  (< $k@435@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@435@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@400@01)))) lowerBound_V0@396@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01)))))))
(set-option :timeout 0)
(push) ; 6
(assert (not (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@400@01)))) lowerBound_V0@396@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@400@01)))) lowerBound_V0@396@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))))
(declare-const res_V0@436@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const minimum_V0@437@01 Int)
(declare-const $t@438@01 $Snap)
(assert (= $t@438@01 ($Snap.combine ($Snap.first $t@438@01) ($Snap.second $t@438@01))))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  res_V0@436@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    res_V0@436@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 205 | res_V0@436@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 205 | res_V0@436@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 205 | res_V0@436@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    res_V0@436@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(assert (=
  ($Snap.first $t@438@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@438@01))
    ($Snap.second ($Snap.first $t@438@01)))))
(assert (= ($Snap.second ($Snap.first $t@438@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)
; [eval] (optSome(minimum_V0): Option[Int])
(push) ; 7
(declare-const $k@439@01 $Perm)
(assert ($Perm.isReadVar $k@439@01))
(assert (< $k@439@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@439@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@439@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.first $t@438@01)) res_V0@436@01 (optSome<Option<Int>> minimum_V0@437@01) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@439@01))
(assert (and
  (< $k@439@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@439@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.first $t@438@01)) res_V0@436@01 (optSome<Option<Int>> minimum_V0@437@01) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01)))))))
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.first $t@438@01)) res_V0@436@01 (optSome<Option<Int>> minimum_V0@437@01) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))))
(assert (=
  ($Snap.second $t@438@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@438@01))
    ($Snap.second ($Snap.second $t@438@01)))))
(assert (= ($Snap.first ($Snap.second $t@438@01)) $Snap.unit))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  res_V0@436@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 206 | res_V0@436@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 206 | res_V0@436@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 206 | res_V0@436@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)))
; [eval] (minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)
; [eval] (optSome(minimum_V0): Option[Int])
(push) ; 9
(declare-const $k@440@01 $Perm)
(assert ($Perm.isReadVar $k@440@01))
(assert (< $k@440@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@440@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@440@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@441@01 $Perm)
(assert ($Perm.isReadVar $k@441@01))
(assert (< $k@441@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@441@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@441@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@441@01))
(assert (and (< $k@441@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@441@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@438@01))
  $Snap.unit) res_V0@436@01 (optSome<Option<Int>> minimum_V0@437@01) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@440@01))
(assert ($Perm.isReadVar $k@441@01))
(assert (and
  (< $k@440@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@440@01))
  (< $k@441@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@441@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@438@01))
    $Snap.unit) res_V0@436@01 (optSome<Option<Int>> minimum_V0@437@01) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01)))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@440@01))
(assert ($Perm.isReadVar $k@441@01))
(assert (=>
  (not
    (=
      res_V0@436@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@440@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@440@01))
    (< $k@441@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@441@01))
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.first ($Snap.first $t@438@01))
      $Snap.unit) res_V0@436@01 (optSome<Option<Int>> minimum_V0@437@01) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))))))
(assert (=>
  (not
    (=
      res_V0@436@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.first $t@438@01))
        $Snap.unit) res_V0@436@01 (optSome<Option<Int>> minimum_V0@437@01) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01)))))
      minimum_V0@437@01))))
(assert (=
  ($Snap.second ($Snap.second $t@438@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@438@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@438@01))) $Snap.unit))
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(set-option :timeout 0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 207 | lowerBound_V0@396@01 != optNone[Option[Int]] | live]
; [else-branch: 207 | lowerBound_V0@396@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 207 | lowerBound_V0@396@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 8
(push) ; 8
; [else-branch: 207 | lowerBound_V0@396@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))))
(assert (=>
  (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))
  (< (optGet<Int> lowerBound_V0@396@01) minimum_V0@437@01)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@438@01))) $Snap.unit))
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > minimum_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))
  (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))
    (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 208 | optSome[Option[Int]](First:(First:($t@400@01))) != optNone[Option[Int]] | live]
; [else-branch: 208 | optSome[Option[Int]](First:(First:($t@400@01))) == optNone[Option[Int]] | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 208 | optSome[Option[Int]](First:(First:($t@400@01))) != optNone[Option[Int]]]
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))
    (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(upperBound_V0): Int) > minimum_V0
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))
    (as optNone<Option<Int>>  Option<Int>))))
(assert (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))
      (as optNone<Option<Int>>  Option<Int>)))
  (>
    (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01)))))
    minimum_V0@437@01)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ := N12
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget2of3<Ref> n_V0@395@01) (ShStructget1of3<Ref> n_V0@395@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; minimum_V0_CN4 := N13
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  res_V0@436@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 209 | res_V0@436@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 209 | res_V0@436@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 209 | res_V0@436@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
; [then-branch: 210 | First:(Second:(Second:(First:($t@400@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 210 | First:(Second:(Second:(First:($t@400@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 8
; [else-branch: 210 | First:(Second:(Second:(First:($t@400@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first $t@400@01))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@436@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
      ($Snap.combine ($Snap.first ($Snap.first $t@438@01)) $Snap.unit)))) n_V0@395@01))
; [exec]
; res_V0_CN3 := n_V0_CN0
; [exec]
; res_V0_CN3 := res_V0_CN3
; [exec]
; minimum_V0_CN4 := minimum_V0_CN4
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN3
; [exec]
; minimum_V0 := minimum_V0_CN4
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  n_V0@395@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    n_V0@395@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 211 | n_V0@395@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 211 | n_V0@395@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 211 | n_V0@395@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    n_V0@395@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] sorted_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)
; [eval] (optSome(minimum_V0): Option[Int])
(push) ; 10
(declare-const $k@442@01 $Perm)
(assert ($Perm.isReadVar $k@442@01))
(assert (< $k@442@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@442@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@442@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@400@01))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@436@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
      ($Snap.combine ($Snap.first ($Snap.first $t@438@01)) $Snap.unit)))) n_V0@395@01 (optSome<Option<Int>> minimum_V0@437@01) upperBound_V0@397@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@442@01))
(assert (and
  (< $k@442@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@442@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@400@01))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@436@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
        ($Snap.combine ($Snap.first ($Snap.first $t@438@01)) $Snap.unit)))) n_V0@395@01 (optSome<Option<Int>> minimum_V0@437@01) upperBound_V0@397@01)))
(set-option :timeout 0)
(push) ; 10
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@400@01))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@436@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
      ($Snap.combine ($Snap.first ($Snap.first $t@438@01)) $Snap.unit)))) n_V0@395@01 (optSome<Option<Int>> minimum_V0@437@01) upperBound_V0@397@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@400@01))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@436@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
      ($Snap.combine ($Snap.first ($Snap.first $t@438@01)) $Snap.unit)))) n_V0@395@01 (optSome<Option<Int>> minimum_V0@437@01) upperBound_V0@397@01))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  n_V0@395@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 212 | n_V0@395@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 212 | n_V0@395@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 212 | n_V0@395@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)))
; [eval] (minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)
; [eval] (optSome(minimum_V0): Option[Int])
(push) ; 12
(declare-const $k@443@01 $Perm)
(assert ($Perm.isReadVar $k@443@01))
(assert (< $k@443@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@443@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@443@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@444@01 $Perm)
(assert ($Perm.isReadVar $k@444@01))
(assert (< $k@444@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@444@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@444@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@444@01))
(assert (and (< $k@444@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@444@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first $t@400@01))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@436@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
        ($Snap.combine ($Snap.first ($Snap.first $t@438@01)) $Snap.unit))))
  $Snap.unit) n_V0@395@01 (optSome<Option<Int>> minimum_V0@437@01) upperBound_V0@397@01))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@443@01))
(assert ($Perm.isReadVar $k@444@01))
(assert (and
  (< $k@443@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@443@01))
  (< $k@444@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@444@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@400@01))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@436@01)
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
          ($Snap.combine ($Snap.first ($Snap.first $t@438@01)) $Snap.unit))))
    $Snap.unit) n_V0@395@01 (optSome<Option<Int>> minimum_V0@437@01) upperBound_V0@397@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@443@01))
(assert ($Perm.isReadVar $k@444@01))
(assert (=>
  (not
    (=
      n_V0@395@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@443@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@443@01))
    (< $k@444@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@444@01))
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@400@01))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@436@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
            ($Snap.combine ($Snap.first ($Snap.first $t@438@01)) $Snap.unit))))
      $Snap.unit) n_V0@395@01 (optSome<Option<Int>> minimum_V0@437@01) upperBound_V0@397@01))))
(set-option :timeout 0)
(push) ; 10
(assert (not (=>
  (not
    (=
      n_V0@395@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@400@01))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@436@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
              ($Snap.combine ($Snap.first ($Snap.first $t@438@01)) $Snap.unit))))
        $Snap.unit) n_V0@395@01 (optSome<Option<Int>> minimum_V0@437@01) upperBound_V0@397@01)
      minimum_V0@437@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      n_V0@395@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@400@01))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@436@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
              ($Snap.combine ($Snap.first ($Snap.first $t@438@01)) $Snap.unit))))
        $Snap.unit) n_V0@395@01 (optSome<Option<Int>> minimum_V0@437@01) upperBound_V0@397@01)
      minimum_V0@437@01))))
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 213 | lowerBound_V0@396@01 != optNone[Option[Int]] | live]
; [else-branch: 213 | lowerBound_V0@396@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 213 | lowerBound_V0@396@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 11
(push) ; 11
; [else-branch: 213 | lowerBound_V0@396@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > minimum_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 214 | upperBound_V0@397@01 != optNone[Option[Int]] | live]
; [else-branch: 214 | upperBound_V0@397@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 214 | upperBound_V0@397@01 != optNone[Option[Int]]]
(assert (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(upperBound_V0): Int) > minimum_V0
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 11
(push) ; 11
; [else-branch: 214 | upperBound_V0@397@01 == optNone[Option[Int]]]
(assert (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))))
(push) ; 10
(assert (not (=>
  (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))
  (> (optGet<Int> upperBound_V0@397@01) minimum_V0@437@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))
  (> (optGet<Int> upperBound_V0@397@01) minimum_V0@437@01)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 205 | res_V0@436@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  res_V0@436@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (= ($Snap.first $t@438@01) $Snap.unit))
(assert (=
  ($Snap.second $t@438@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@438@01))
    ($Snap.second ($Snap.second $t@438@01)))))
(assert (= ($Snap.first ($Snap.second $t@438@01)) $Snap.unit))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [then-branch: 215 | res_V0@436@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 215 | res_V0@436@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 8
; [else-branch: 215 | res_V0@436@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second $t@438@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@438@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@438@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@438@01))) $Snap.unit))
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 216 | lowerBound_V0@396@01 != optNone[Option[Int]] | live]
; [else-branch: 216 | lowerBound_V0@396@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 216 | lowerBound_V0@396@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 8
(push) ; 8
; [else-branch: 216 | lowerBound_V0@396@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))))
(assert (=>
  (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))
  (< (optGet<Int> lowerBound_V0@396@01) minimum_V0@437@01)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@438@01))) $Snap.unit))
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > minimum_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))
  (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))
    (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 217 | optSome[Option[Int]](First:(First:($t@400@01))) != optNone[Option[Int]] | live]
; [else-branch: 217 | optSome[Option[Int]](First:(First:($t@400@01))) == optNone[Option[Int]] | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 217 | optSome[Option[Int]](First:(First:($t@400@01))) != optNone[Option[Int]]]
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))
    (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(upperBound_V0): Int) > minimum_V0
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))
    (as optNone<Option<Int>>  Option<Int>))))
(assert (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01))))
      (as optNone<Option<Int>>  Option<Int>)))
  (>
    (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01)))))
    minimum_V0@437@01)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ := N12
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget2of3<Ref> n_V0@395@01) (ShStructget1of3<Ref> n_V0@395@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; minimum_V0_CN4 := N13
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
; [then-branch: 218 | res_V0@436@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 218 | res_V0@436@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 7
; [else-branch: 218 | res_V0@436@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
; [then-branch: 219 | First:(Second:(Second:(First:($t@400@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 219 | First:(Second:(Second:(First:($t@400@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 8
; [else-branch: 219 | First:(Second:(Second:(First:($t@400@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first $t@400@01))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@436@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@395@01))
; [exec]
; res_V0_CN3 := n_V0_CN0
; [exec]
; res_V0_CN3 := res_V0_CN3
; [exec]
; minimum_V0_CN4 := minimum_V0_CN4
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN3
; [exec]
; minimum_V0 := minimum_V0_CN4
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  n_V0@395@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    n_V0@395@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 220 | n_V0@395@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 220 | n_V0@395@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 220 | n_V0@395@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    n_V0@395@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] sorted_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)
; [eval] (optSome(minimum_V0): Option[Int])
(push) ; 10
(declare-const $k@445@01 $Perm)
(assert ($Perm.isReadVar $k@445@01))
(assert (< $k@445@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@445@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@445@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@400@01))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@436@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@395@01 (optSome<Option<Int>> minimum_V0@437@01) upperBound_V0@397@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@445@01))
(assert (and
  (< $k@445@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@445@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@400@01))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@436@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
        ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@395@01 (optSome<Option<Int>> minimum_V0@437@01) upperBound_V0@397@01)))
(set-option :timeout 0)
(push) ; 10
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@400@01))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@436@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@395@01 (optSome<Option<Int>> minimum_V0@437@01) upperBound_V0@397@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@400@01))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@436@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@395@01 (optSome<Option<Int>> minimum_V0@437@01) upperBound_V0@397@01))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  n_V0@395@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 221 | n_V0@395@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 221 | n_V0@395@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 221 | n_V0@395@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)))
; [eval] (minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)
; [eval] (optSome(minimum_V0): Option[Int])
(push) ; 12
(declare-const $k@446@01 $Perm)
(assert ($Perm.isReadVar $k@446@01))
(assert (< $k@446@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@446@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@446@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@447@01 $Perm)
(assert ($Perm.isReadVar $k@447@01))
(assert (< $k@447@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@447@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@447@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@447@01))
(assert (and (< $k@447@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@447@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first $t@400@01))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@436@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
        ($Snap.combine $Snap.unit $Snap.unit))))
  $Snap.unit) n_V0@395@01 (optSome<Option<Int>> minimum_V0@437@01) upperBound_V0@397@01))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@446@01))
(assert ($Perm.isReadVar $k@447@01))
(assert (and
  (< $k@446@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@446@01))
  (< $k@447@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@447@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@400@01))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@436@01)
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
          ($Snap.combine $Snap.unit $Snap.unit))))
    $Snap.unit) n_V0@395@01 (optSome<Option<Int>> minimum_V0@437@01) upperBound_V0@397@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@446@01))
(assert ($Perm.isReadVar $k@447@01))
(assert (=>
  (not
    (=
      n_V0@395@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@446@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@446@01))
    (< $k@447@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@447@01))
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@400@01))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@436@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
            ($Snap.combine $Snap.unit $Snap.unit))))
      $Snap.unit) n_V0@395@01 (optSome<Option<Int>> minimum_V0@437@01) upperBound_V0@397@01))))
(set-option :timeout 0)
(push) ; 10
(assert (not (=>
  (not
    (=
      n_V0@395@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@400@01))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@436@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
              ($Snap.combine $Snap.unit $Snap.unit))))
        $Snap.unit) n_V0@395@01 (optSome<Option<Int>> minimum_V0@437@01) upperBound_V0@397@01)
      minimum_V0@437@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      n_V0@395@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@400@01))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@436@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01))))
              ($Snap.combine $Snap.unit $Snap.unit))))
        $Snap.unit) n_V0@395@01 (optSome<Option<Int>> minimum_V0@437@01) upperBound_V0@397@01)
      minimum_V0@437@01))))
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 222 | lowerBound_V0@396@01 != optNone[Option[Int]] | live]
; [else-branch: 222 | lowerBound_V0@396@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 222 | lowerBound_V0@396@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 11
(push) ; 11
; [else-branch: 222 | lowerBound_V0@396@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > minimum_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 223 | upperBound_V0@397@01 != optNone[Option[Int]] | live]
; [else-branch: 223 | upperBound_V0@397@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 223 | upperBound_V0@397@01 != optNone[Option[Int]]]
(assert (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(upperBound_V0): Int) > minimum_V0
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 11
(push) ; 11
; [else-branch: 223 | upperBound_V0@397@01 == optNone[Option[Int]]]
(assert (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))))
(push) ; 10
(assert (not (=>
  (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))
  (> (optGet<Int> upperBound_V0@397@01) minimum_V0@437@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))
  (> (optGet<Int> upperBound_V0@397@01) minimum_V0@437@01)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [eval] !!((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 5
(pop) ; 5
; Joined path conditions
; [then-branch: 224 | First:(Second:(First:($t@400@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 224 | First:(Second:(First:($t@400@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 5
; [else-branch: 224 | First:(Second:(First:($t@400@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 181 | First:(Second:(First:($t@400@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@400@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
  $Snap.unit))
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 225 | First:(Second:(Second:(First:($t@400@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 225 | First:(Second:(Second:(First:($t@400@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 225 | First:(Second:(Second:(First:($t@400@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget2of3(n_V0): Ref)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMnode%trigger ($Snap.first $t@400@01) n_V0@395@01))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
; [then-branch: 226 | First:(Second:(First:($t@400@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 226 | First:(Second:(First:($t@400@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 5
; [else-branch: 226 | First:(Second:(First:($t@400@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 5
; [eval] !!((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@400@01))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 227 | First:(Second:(First:($t@400@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 227 | First:(Second:(First:($t@400@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 227 | First:(Second:(First:($t@400@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 228 | First:(Second:(Second:(First:($t@400@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 228 | First:(Second:(Second:(First:($t@400@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 228 | First:(Second:(Second:(First:($t@400@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; var N11: Int
(declare-const N11@448@01 Int)
; [exec]
; var N10: ShStruct3[Ref, Ref, Ref]
(declare-const N10@449@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; N10 := (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
(declare-const N10@450@01 ShStruct3<Ref~_Ref~_Ref>)
(assert (=
  N10@450@01
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))))
; [exec]
; N11 := (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(declare-const N11@451@01 Int)
(assert (= N11@451@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01)))))
; [exec]
; res_V0_CN3 := N10
; [exec]
; minimum_V0_CN4 := N11
; [exec]
; res_V0_CN3 := res_V0_CN3
; [exec]
; minimum_V0_CN4 := minimum_V0_CN4
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN3
; [exec]
; minimum_V0 := minimum_V0_CN4
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  N10@450@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    N10@450@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 229 | N10@450@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 229 | N10@450@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 229 | N10@450@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    N10@450@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
  N10@450@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)
; [eval] (optSome(minimum_V0): Option[Int])
(set-option :timeout 0)
(push) ; 8
(declare-const $k@452@01 $Perm)
(assert ($Perm.isReadVar $k@452@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
  N10@450@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< $k@452@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@452@01)))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@452@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01))))) N10@450@01 (optSome<Option<Int>> N11@451@01) upperBound_V0@397@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@452@01))
(assert (and
  (< $k@452@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@452@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01))))) N10@450@01 (optSome<Option<Int>> N11@451@01) upperBound_V0@397@01)))
(set-option :timeout 0)
(push) ; 8
(assert (not (sorted_4b5075e4_PMnode ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01))))) N10@450@01 (optSome<Option<Int>> N11@451@01) upperBound_V0@397@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01))))) N10@450@01 (optSome<Option<Int>> N11@451@01) upperBound_V0@397@01))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  N10@450@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 230 | N10@450@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 230 | N10@450@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 230 | N10@450@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)))
; [eval] (minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)
; [eval] (optSome(minimum_V0): Option[Int])
(push) ; 10
(declare-const $k@453@01 $Perm)
(assert ($Perm.isReadVar $k@453@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
  N10@450@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< $k@453@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@453@01)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@453@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@454@01 $Perm)
(assert ($Perm.isReadVar $k@454@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
  N10@450@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (< $k@454@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@454@01)))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@454@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@454@01))
(assert (and (< $k@454@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@454@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
  $Snap.unit) N10@450@01 (optSome<Option<Int>> N11@451@01) upperBound_V0@397@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@453@01))
(assert ($Perm.isReadVar $k@454@01))
(assert (and
  (< $k@453@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@453@01))
  (< $k@454@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@454@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
    $Snap.unit) N10@450@01 (optSome<Option<Int>> N11@451@01) upperBound_V0@397@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@453@01))
(assert ($Perm.isReadVar $k@454@01))
(assert (=>
  (not
    (=
      N10@450@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@453@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@453@01))
    (< $k@454@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@454@01))
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
      $Snap.unit) N10@450@01 (optSome<Option<Int>> N11@451@01) upperBound_V0@397@01))))
(set-option :timeout 0)
(push) ; 8
(assert (not (=>
  (not
    (=
      N10@450@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
        $Snap.unit) N10@450@01 (optSome<Option<Int>> N11@451@01) upperBound_V0@397@01)
      N11@451@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      N10@450@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
        $Snap.unit) N10@450@01 (optSome<Option<Int>> N11@451@01) upperBound_V0@397@01)
      N11@451@01))))
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 231 | lowerBound_V0@396@01 != optNone[Option[Int]] | live]
; [else-branch: 231 | lowerBound_V0@396@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 231 | lowerBound_V0@396@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 9
(push) ; 9
; [else-branch: 231 | lowerBound_V0@396@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))))
(push) ; 8
(assert (not (=>
  (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))
  (< (optGet<Int> lowerBound_V0@396@01) N11@451@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))
  (< (optGet<Int> lowerBound_V0@396@01) N11@451@01)))
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > minimum_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 232 | upperBound_V0@397@01 != optNone[Option[Int]] | live]
; [else-branch: 232 | upperBound_V0@397@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 232 | upperBound_V0@397@01 != optNone[Option[Int]]]
(assert (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(upperBound_V0): Int) > minimum_V0
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 9
(push) ; 9
; [else-branch: 232 | upperBound_V0@397@01 == optNone[Option[Int]]]
(assert (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))))
(push) ; 8
(assert (not (=>
  (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))
  (> (optGet<Int> upperBound_V0@397@01) N11@451@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))
  (> (optGet<Int> upperBound_V0@397@01) N11@451@01)))
(pop) ; 7
(pop) ; 6
; [eval] !!((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
; [then-branch: 233 | First:(Second:(Second:(First:($t@400@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 233 | First:(Second:(Second:(First:($t@400@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 6
; [else-branch: 233 | First:(Second:(Second:(First:($t@400@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 225 | First:(Second:(Second:(First:($t@400@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
  $Snap.unit))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMnode%trigger ($Snap.first $t@400@01) n_V0@395@01))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
; [then-branch: 234 | First:(Second:(First:($t@400@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 234 | First:(Second:(First:($t@400@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 5
; [else-branch: 234 | First:(Second:(First:($t@400@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 5
; [eval] !!((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@400@01))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 235 | First:(Second:(First:($t@400@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 235 | First:(Second:(First:($t@400@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 235 | First:(Second:(First:($t@400@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
; [then-branch: 236 | First:(Second:(Second:(First:($t@400@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 236 | First:(Second:(Second:(First:($t@400@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 6
; [else-branch: 236 | First:(Second:(Second:(First:($t@400@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 6
; [eval] !!((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@400@01)))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 237 | First:(Second:(Second:(First:($t@400@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 237 | First:(Second:(Second:(First:($t@400@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 237 | First:(Second:(Second:(First:($t@400@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; var N9: Int
(declare-const N9@455@01 Int)
; [exec]
; var N8: ShStruct3[Ref, Ref, Ref]
(declare-const N8@456@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; N8 := shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(declare-const N8@457@01 ShStruct3<Ref~_Ref~_Ref>)
(assert (=
  N8@457@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; [exec]
; N9 := (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(declare-const N9@458@01 Int)
(assert (= N9@458@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@400@01)))))
; [exec]
; res_V0_CN3 := N8
; [exec]
; minimum_V0_CN4 := N9
; [exec]
; res_V0_CN3 := res_V0_CN3
; [exec]
; minimum_V0_CN4 := minimum_V0_CN4
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN3
; [exec]
; minimum_V0 := minimum_V0_CN4
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
; [then-branch: 238 | N8@457@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 238 | N8@457@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 7
; [else-branch: 238 | N8@457@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 239 | N8@457@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 239 | N8@457@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 9
; [else-branch: 239 | N8@457@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 240 | lowerBound_V0@396@01 != optNone[Option[Int]] | live]
; [else-branch: 240 | lowerBound_V0@396@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 240 | lowerBound_V0@396@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 9
(push) ; 9
; [else-branch: 240 | lowerBound_V0@396@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))))
(push) ; 8
(assert (not (=>
  (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))
  (< (optGet<Int> lowerBound_V0@396@01) N9@458@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= lowerBound_V0@396@01 (as optNone<Option<Int>>  Option<Int>)))
  (< (optGet<Int> lowerBound_V0@396@01) N9@458@01)))
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > minimum_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 241 | upperBound_V0@397@01 != optNone[Option[Int]] | live]
; [else-branch: 241 | upperBound_V0@397@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 241 | upperBound_V0@397@01 != optNone[Option[Int]]]
(assert (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(upperBound_V0): Int) > minimum_V0
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 9
(push) ; 9
; [else-branch: 241 | upperBound_V0@397@01 == optNone[Option[Int]]]
(assert (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))))
(push) ; 8
(assert (not (=>
  (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))
  (> (optGet<Int> upperBound_V0@397@01) N9@458@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= upperBound_V0@397@01 (as optNone<Option<Int>>  Option<Int>)))
  (> (optGet<Int> upperBound_V0@397@01) N9@458@01)))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- delete_4b5075e4_PMnode ----------
(declare-const n_V0@459@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const value_V0@460@01 Int)
(declare-const lowerBound_V0@461@01 Option<Int>)
(declare-const upperBound_V0@462@01 Option<Int>)
(declare-const res_V0@463@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const n_V0@464@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const value_V0@465@01 Int)
(declare-const lowerBound_V0@466@01 Option<Int>)
(declare-const upperBound_V0@467@01 Option<Int>)
(declare-const res_V0@468@01 ShStruct3<Ref~_Ref~_Ref>)
(push) ; 1
(declare-const $t@469@01 $Snap)
(assert (= $t@469@01 ($Snap.combine ($Snap.first $t@469@01) ($Snap.second $t@469@01))))
(assert (= ($Snap.first $t@469@01) $Snap.unit))
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < value_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 242 | lowerBound_V0@466@01 != optNone[Option[Int]] | live]
; [else-branch: 242 | lowerBound_V0@466@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 242 | lowerBound_V0@466@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(lowerBound_V0): Int) < value_V0
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 3
(push) ; 3
; [else-branch: 242 | lowerBound_V0@466@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or
  (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))))
(assert (=>
  (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))
  (< (optGet<Int> lowerBound_V0@466@01) value_V0@465@01)))
(assert (=
  ($Snap.second $t@469@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@469@01))
    ($Snap.second ($Snap.second $t@469@01)))))
(assert (= ($Snap.first ($Snap.second $t@469@01)) $Snap.unit))
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > value_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 243 | upperBound_V0@467@01 != optNone[Option[Int]] | live]
; [else-branch: 243 | upperBound_V0@467@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 243 | upperBound_V0@467@01 != optNone[Option[Int]]]
(assert (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(upperBound_V0): Int) > value_V0
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 3
(push) ; 3
; [else-branch: 243 | upperBound_V0@467@01 == optNone[Option[Int]]]
(assert (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or
  (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))))
(assert (=>
  (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))
  (> (optGet<Int> upperBound_V0@467@01) value_V0@465@01)))
(assert (=
  ($Snap.second ($Snap.second $t@469@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@469@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@469@01))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@469@01))) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 2
(declare-const $k@470@01 $Perm)
(assert ($Perm.isReadVar $k@470@01))
(assert (< $k@470@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@470@01)))
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@470@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second $t@469@01))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@470@01))
(assert (and
  (< $k@470@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@470@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second $t@469@01))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second $t@469@01))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@471@01 $Snap)
(assert (= $t@471@01 ($Snap.combine ($Snap.first $t@471@01) ($Snap.second $t@471@01))))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 3
(assert (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  res_V0@468@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    res_V0@468@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 244 | res_V0@468@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 244 | res_V0@468@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 244 | res_V0@468@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    res_V0@468@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(assert (=
  ($Snap.first $t@471@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@471@01))
    ($Snap.second ($Snap.first $t@471@01)))))
(assert (= ($Snap.second ($Snap.first $t@471@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 4
(declare-const $k@472@01 $Perm)
(assert ($Perm.isReadVar $k@472@01))
(assert (< $k@472@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@472@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@472@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.first $t@471@01)) res_V0@468@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@472@01))
(assert (and
  (< $k@472@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@472@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.first $t@471@01)) res_V0@468@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.first $t@471@01)) res_V0@468@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(assert (= ($Snap.second $t@471@01) $Snap.unit))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  res_V0@468@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 245 | res_V0@468@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 245 | res_V0@468@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 245 | res_V0@468@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 6
(declare-const $k@473@01 $Perm)
(assert ($Perm.isReadVar $k@473@01))
(assert (< $k@473@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@473@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@473@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@474@01 $Perm)
(assert ($Perm.isReadVar $k@474@01))
(assert (< $k@474@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@474@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@474@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@474@01))
(assert (and (< $k@474@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@474@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@471@01))
  $Snap.unit) res_V0@468@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@473@01))
(assert ($Perm.isReadVar $k@474@01))
(assert (and
  (< $k@473@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@473@01))
  (< $k@474@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@474@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@471@01))
    $Snap.unit) res_V0@468@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@473@01))
(assert ($Perm.isReadVar $k@474@01))
(assert (=>
  (not
    (=
      res_V0@468@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@473@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@473@01))
    (< $k@474@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@474@01))
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.first ($Snap.first $t@471@01))
      $Snap.unit) res_V0@468@01 lowerBound_V0@466@01 upperBound_V0@467@01))))
(assert (=>
  (not
    (=
      res_V0@468@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.first $t@471@01))
        $Snap.unit) res_V0@468@01 lowerBound_V0@466@01 upperBound_V0@467@01)
      value_V0@465@01))))
(pop) ; 3
(set-option :timeout 0)
(push) ; 3
; [else-branch: 244 | res_V0@468@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  res_V0@468@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (= ($Snap.first $t@471@01) $Snap.unit))
(assert (= ($Snap.second $t@471@01) $Snap.unit))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
; [then-branch: 246 | res_V0@468@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 246 | res_V0@468@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 5
; [else-branch: 246 | res_V0@468@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var res_V0_CN4: ShStruct3[Ref, Ref, Ref]
(declare-const res_V0_CN4@475@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; var upperBound_V0_CN3: Option[Int]
(declare-const upperBound_V0_CN3@476@01 Option<Int>)
; [exec]
; var lowerBound_V0_CN2: Option[Int]
(declare-const lowerBound_V0_CN2@477@01 Option<Int>)
; [exec]
; var value_V0_CN1: Int
(declare-const value_V0_CN1@478@01 Int)
; [exec]
; var n_V0_CN0: ShStruct3[Ref, Ref, Ref]
(declare-const n_V0_CN0@479@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; inhale res_V0 ==
;   shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(declare-const $t@480@01 $Snap)
(assert (= $t@480@01 $Snap.unit))
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 3
(assert (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (=
  res_V0@468@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale n_V0_CN0 ==
;   shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(declare-const $t@481@01 $Snap)
(assert (= $t@481@01 $Snap.unit))
; [eval] n_V0_CN0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (=
  n_V0_CN0@479@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale value_V0_CN1 == 0
(declare-const $t@482@01 $Snap)
(assert (= $t@482@01 $Snap.unit))
; [eval] value_V0_CN1 == 0
(assert (= value_V0_CN1@478@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale lowerBound_V0_CN2 == (optNone(): Option[Int])
(declare-const $t@483@01 $Snap)
(assert (= $t@483@01 $Snap.unit))
; [eval] lowerBound_V0_CN2 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(assert (= lowerBound_V0_CN2@477@01 (as optNone<Option<Int>>  Option<Int>)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale upperBound_V0_CN3 == (optNone(): Option[Int])
(declare-const $t@484@01 $Snap)
(assert (= $t@484@01 $Snap.unit))
; [eval] upperBound_V0_CN3 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(assert (= upperBound_V0_CN3@476@01 (as optNone<Option<Int>>  Option<Int>)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale res_V0_CN4 ==
;   shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(declare-const $t@485@01 $Snap)
(assert (= $t@485@01 $Snap.unit))
; [eval] res_V0_CN4 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (=
  res_V0_CN4@475@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; n_V0_CN0 := n_V0
; [exec]
; value_V0_CN1 := value_V0
; [exec]
; lowerBound_V0_CN2 := lowerBound_V0
; [exec]
; upperBound_V0_CN3 := upperBound_V0
; [exec]
; unfold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
(assert (=
  ($Snap.first ($Snap.second ($Snap.second $t@469@01)))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
; [eval] (ShStructget0of3(n_V0): Ref)
(assert (not (= (ShStructget0of3<Ref> n_V0@464@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
; [eval] (ShStructget1of3(n_V0): Ref)
(assert (not (= (ShStructget1of3<Ref> n_V0@464@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
; [eval] (ShStructget2of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> n_V0@464@01) (ShStructget2of3<Ref> n_V0@464@01))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget2of3<Ref> n_V0@464@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 247 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 247 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 247 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 248 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 248 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 248 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget2of3(n_V0): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMnode%trigger ($Snap.first ($Snap.second ($Snap.second $t@469@01))) n_V0@464@01))
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 249 | value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 249 | !(value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))) | live]
(push) ; 6
; [then-branch: 249 | value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))]
(assert (<
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 249 | !(value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (<
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
  (<
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (<
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 250 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 250 | !(First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 250 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))]
(assert (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (<
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
; [exec]
; var N11: ShStruct3[Ref, Ref, Ref]
(declare-const N11@486@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; N11 := delete_4b5075e4_PMnode((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   value_V0_CN1, lowerBound_V0_CN2, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]))
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < value_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 251 | lowerBound_V0@466@01 != optNone[Option[Int]] | live]
; [else-branch: 251 | lowerBound_V0@466@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 251 | lowerBound_V0@466@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(lowerBound_V0): Int) < value_V0
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 7
(push) ; 7
; [else-branch: 251 | lowerBound_V0@466@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > value_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 252 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]] | live]
; [else-branch: 252 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) == optNone[Option[Int]] | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 252 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]]]
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(upperBound_V0): Int) > value_V0
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>))))
(push) ; 6
(assert (not (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (as optNone<Option<Int>>  Option<Int>)))
  (>
    (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
    value_V0@465@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (as optNone<Option<Int>>  Option<Int>)))
  (>
    (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
    value_V0@465@01)))
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 6
(declare-const $k@487@01 $Perm)
(assert ($Perm.isReadVar $k@487@01))
(assert (< $k@487@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@487@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@487@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@487@01))
(assert (and
  (< $k@487@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@487@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(set-option :timeout 0)
(push) ; 6
(assert (not (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(declare-const res_V0@488@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const $t@489@01 $Snap)
(assert (= $t@489@01 ($Snap.combine ($Snap.first $t@489@01) ($Snap.second $t@489@01))))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  res_V0@488@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    res_V0@488@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 253 | res_V0@488@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 253 | res_V0@488@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 253 | res_V0@488@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    res_V0@488@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(assert (=
  ($Snap.first $t@489@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@489@01))
    ($Snap.second ($Snap.first $t@489@01)))))
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
  res_V0@488@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (= ($Snap.second ($Snap.first $t@489@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@490@01 $Perm)
(assert ($Perm.isReadVar $k@490@01))
(assert (< $k@490@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@490@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@490@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.first $t@489@01)) res_V0@488@01 lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@490@01))
(assert (and
  (< $k@490@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@490@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.first $t@489@01)) res_V0@488@01 lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.first $t@489@01)) res_V0@488@01 lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(assert (= ($Snap.second $t@489@01) $Snap.unit))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  res_V0@488@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 254 | res_V0@488@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 254 | res_V0@488@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 254 | res_V0@488@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@491@01 $Perm)
(assert ($Perm.isReadVar $k@491@01))
(assert (< $k@491@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@491@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@491@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@492@01 $Perm)
(assert ($Perm.isReadVar $k@492@01))
(assert (< $k@492@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@492@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@492@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@492@01))
(assert (and (< $k@492@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@492@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@489@01))
  $Snap.unit) res_V0@488@01 lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@491@01))
(assert ($Perm.isReadVar $k@492@01))
(assert (and
  (< $k@491@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@491@01))
  (< $k@492@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@492@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@489@01))
    $Snap.unit) res_V0@488@01 lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@491@01))
(assert ($Perm.isReadVar $k@492@01))
(assert (=>
  (not
    (=
      res_V0@488@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@491@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@491@01))
    (< $k@492@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@492@01))
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.first ($Snap.first $t@489@01))
      $Snap.unit) res_V0@488@01 lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))
(assert (=>
  (not
    (=
      res_V0@488@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.first $t@489@01))
        $Snap.unit) res_V0@488@01 lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      value_V0@465@01))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ := N11
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget2of3<Ref> n_V0@464@01) (ShStructget1of3<Ref> n_V0@464@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  res_V0@488@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 255 | res_V0@488@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 255 | res_V0@488@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 255 | res_V0@488@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 256 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 256 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 256 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget2of3(n_V0): Ref)
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@488@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.first $t@489@01))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))) n_V0@464@01))
; [exec]
; res_V0_CN4 := n_V0_CN0
; [exec]
; res_V0_CN4 := res_V0_CN4
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN4
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  n_V0@464@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    n_V0@464@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 257 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 257 | n_V0@464@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 257 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    n_V0@464@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] sorted_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@493@01 $Perm)
(assert ($Perm.isReadVar $k@493@01))
(assert (< $k@493@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@493@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@493@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@488@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.first $t@489@01))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@493@01))
(assert (and
  (< $k@493@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@493@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@488@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        ($Snap.combine
          ($Snap.first ($Snap.first $t@489@01))
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(set-option :timeout 0)
(push) ; 10
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@488@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.first $t@489@01))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@488@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.first $t@489@01))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  n_V0@464@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 258 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 258 | n_V0@464@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 258 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 12
(declare-const $k@494@01 $Perm)
(assert ($Perm.isReadVar $k@494@01))
(assert (< $k@494@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@494@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@494@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@495@01 $Perm)
(assert ($Perm.isReadVar $k@495@01))
(assert (< $k@495@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@495@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@495@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@495@01))
(assert (and (< $k@495@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@495@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@488@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        ($Snap.combine
          ($Snap.first ($Snap.first $t@489@01))
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))))
  $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@494@01))
(assert ($Perm.isReadVar $k@495@01))
(assert (and
  (< $k@494@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@494@01))
  (< $k@495@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@495@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@488@01)
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.first $t@489@01))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))))
    $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@494@01))
(assert ($Perm.isReadVar $k@495@01))
(assert (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@494@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@494@01))
    (< $k@495@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@495@01))
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@488@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
            ($Snap.combine
              ($Snap.first ($Snap.first $t@489@01))
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))))
      $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))))
(set-option :timeout 0)
(push) ; 10
(assert (not (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@488@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
              ($Snap.combine
                ($Snap.first ($Snap.first $t@489@01))
                ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))))
        $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)
      value_V0@465@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@488@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
              ($Snap.combine
                ($Snap.first ($Snap.first $t@489@01))
                ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))))
        $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)
      value_V0@465@01))))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 253 | res_V0@488@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  res_V0@488@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (= ($Snap.first $t@489@01) $Snap.unit))
(assert (= ($Snap.second $t@489@01) $Snap.unit))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [then-branch: 259 | res_V0@488@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 259 | res_V0@488@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 8
; [else-branch: 259 | res_V0@488@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ := N11
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget2of3<Ref> n_V0@464@01) (ShStructget1of3<Ref> n_V0@464@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
; [then-branch: 260 | res_V0@488@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 260 | res_V0@488@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 7
; [else-branch: 260 | res_V0@488@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 261 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 261 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 261 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget2of3(n_V0): Ref)
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@488@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))) n_V0@464@01))
; [exec]
; res_V0_CN4 := n_V0_CN0
; [exec]
; res_V0_CN4 := res_V0_CN4
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN4
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  n_V0@464@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    n_V0@464@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 262 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 262 | n_V0@464@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 262 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    n_V0@464@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] sorted_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@496@01 $Perm)
(assert ($Perm.isReadVar $k@496@01))
(assert (< $k@496@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@496@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@496@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@488@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@496@01))
(assert (and
  (< $k@496@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@496@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@488@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(set-option :timeout 0)
(push) ; 10
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@488@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@488@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  n_V0@464@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 263 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 263 | n_V0@464@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 263 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 12
(declare-const $k@497@01 $Perm)
(assert ($Perm.isReadVar $k@497@01))
(assert (< $k@497@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@497@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@497@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@498@01 $Perm)
(assert ($Perm.isReadVar $k@498@01))
(assert (< $k@498@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@498@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@498@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@498@01))
(assert (and (< $k@498@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@498@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@488@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))))
  $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@497@01))
(assert ($Perm.isReadVar $k@498@01))
(assert (and
  (< $k@497@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@497@01))
  (< $k@498@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@498@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@488@01)
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))))
    $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@497@01))
(assert ($Perm.isReadVar $k@498@01))
(assert (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@497@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@497@01))
    (< $k@498@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@498@01))
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@488@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))))
      $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))))
(set-option :timeout 0)
(push) ; 10
(assert (not (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@488@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))))
        $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)
      value_V0@465@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@488@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))))
        $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)
      value_V0@465@01))))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 250 | !(First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(pop) ; 5
; [eval] !(value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()))
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 5
; [then-branch: 264 | value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 264 | !(value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))) | live]
(push) ; 6
; [then-branch: 264 | value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))]
(assert (<
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 264 | !(value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (<
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (<
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 265 | !(First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))) | live]
; [else-branch: 265 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 265 | !(First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 6
; [then-branch: 266 | value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 266 | !(value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))) | live]
(push) ; 7
; [then-branch: 266 | value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))]
(assert (>
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 266 | !(value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (>
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
  (>
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (>
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 267 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 267 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 267 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))]
(assert (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (>
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
; [exec]
; var N10: ShStruct3[Ref, Ref, Ref]
(declare-const N10@499@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; N10 := delete_4b5075e4_PMnode((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   value_V0_CN1, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]),
;   upperBound_V0_CN3)
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < value_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 268 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]] | live]
; [else-branch: 268 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) == optNone[Option[Int]] | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 268 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]]]
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(lowerBound_V0): Int) < value_V0
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>))))
(push) ; 7
(assert (not (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (as optNone<Option<Int>>  Option<Int>)))
  (<
    (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
    value_V0@465@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (as optNone<Option<Int>>  Option<Int>)))
  (<
    (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
    value_V0@465@01)))
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > value_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 269 | upperBound_V0@467@01 != optNone[Option[Int]] | live]
; [else-branch: 269 | upperBound_V0@467@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 269 | upperBound_V0@467@01 != optNone[Option[Int]]]
(assert (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(upperBound_V0): Int) > value_V0
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 8
(push) ; 8
; [else-branch: 269 | upperBound_V0@467@01 == optNone[Option[Int]]]
(assert (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 7
(declare-const $k@500@01 $Perm)
(assert ($Perm.isReadVar $k@500@01))
(assert (< $k@500@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@500@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@500@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@500@01))
(assert (and
  (< $k@500@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@500@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01)))
(set-option :timeout 0)
(push) ; 7
(assert (not (sorted_4b5075e4_PMnode ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01))
(declare-const res_V0@501@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const $t@502@01 $Snap)
(assert (= $t@502@01 ($Snap.combine ($Snap.first $t@502@01) ($Snap.second $t@502@01))))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  res_V0@501@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    res_V0@501@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 270 | res_V0@501@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 270 | res_V0@501@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 270 | res_V0@501@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    res_V0@501@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(assert (=
  ($Snap.first $t@502@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@502@01))
    ($Snap.second ($Snap.first $t@502@01)))))
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  res_V0@501@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (= ($Snap.second ($Snap.first $t@502@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@503@01 $Perm)
(assert ($Perm.isReadVar $k@503@01))
(assert (< $k@503@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@503@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@503@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.first $t@502@01)) res_V0@501@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@503@01))
(assert (and
  (< $k@503@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@503@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.first $t@502@01)) res_V0@501@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.first $t@502@01)) res_V0@501@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01))
(assert (= ($Snap.second $t@502@01) $Snap.unit))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  res_V0@501@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 271 | res_V0@501@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 271 | res_V0@501@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 271 | res_V0@501@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@504@01 $Perm)
(assert ($Perm.isReadVar $k@504@01))
(assert (< $k@504@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@504@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@504@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@505@01 $Perm)
(assert ($Perm.isReadVar $k@505@01))
(assert (< $k@505@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@505@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@505@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@505@01))
(assert (and (< $k@505@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@505@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@502@01))
  $Snap.unit) res_V0@501@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@504@01))
(assert ($Perm.isReadVar $k@505@01))
(assert (and
  (< $k@504@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@504@01))
  (< $k@505@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@505@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@502@01))
    $Snap.unit) res_V0@501@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@504@01))
(assert ($Perm.isReadVar $k@505@01))
(assert (=>
  (not
    (=
      res_V0@501@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@504@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@504@01))
    (< $k@505@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@505@01))
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.first ($Snap.first $t@502@01))
      $Snap.unit) res_V0@501@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01))))
(assert (=>
  (not
    (=
      res_V0@501@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.first $t@502@01))
        $Snap.unit) res_V0@501@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01)
      value_V0@465@01))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ := N10
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> n_V0@464@01) (ShStructget2of3<Ref> n_V0@464@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 272 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 272 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 272 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  res_V0@501@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 273 | res_V0@501@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 273 | res_V0@501@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 273 | res_V0@501@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget2of3(n_V0): Ref)
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@501@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        ($Snap.first ($Snap.first $t@502@01)))))) n_V0@464@01))
; [exec]
; res_V0_CN4 := n_V0_CN0
; [exec]
; res_V0_CN4 := res_V0_CN4
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN4
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  n_V0@464@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (=
    n_V0@464@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 274 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 274 | n_V0@464@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 274 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    n_V0@464@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] sorted_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 11
(declare-const $k@506@01 $Perm)
(assert ($Perm.isReadVar $k@506@01))
(assert (< $k@506@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@506@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@506@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@501@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        ($Snap.first ($Snap.first $t@502@01)))))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@506@01))
(assert (and
  (< $k@506@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@506@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@501@01)
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
          ($Snap.first ($Snap.first $t@502@01)))))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(set-option :timeout 0)
(push) ; 11
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@501@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        ($Snap.first ($Snap.first $t@502@01)))))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@501@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        ($Snap.first ($Snap.first $t@502@01)))))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  n_V0@464@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 275 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 275 | n_V0@464@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 275 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 13
(declare-const $k@507@01 $Perm)
(assert ($Perm.isReadVar $k@507@01))
(assert (< $k@507@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@507@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@507@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 14
(declare-const $k@508@01 $Perm)
(assert ($Perm.isReadVar $k@508@01))
(assert (< $k@508@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@508@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@508@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@508@01))
(assert (and (< $k@508@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@508@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@501@01)
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
          ($Snap.first ($Snap.first $t@502@01))))))
  $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@507@01))
(assert ($Perm.isReadVar $k@508@01))
(assert (and
  (< $k@507@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@507@01))
  (< $k@508@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@508@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@501@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
            ($Snap.first ($Snap.first $t@502@01))))))
    $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@507@01))
(assert ($Perm.isReadVar $k@508@01))
(assert (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@507@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@507@01))
    (< $k@508@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@508@01))
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@501@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
              ($Snap.first ($Snap.first $t@502@01))))))
      $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))))
(set-option :timeout 0)
(push) ; 11
(assert (not (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
            ($Snap.combine
              ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@501@01)
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
                ($Snap.first ($Snap.first $t@502@01))))))
        $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)
      value_V0@465@01)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
            ($Snap.combine
              ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@501@01)
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
                ($Snap.first ($Snap.first $t@502@01))))))
        $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)
      value_V0@465@01))))
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 270 | res_V0@501@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  res_V0@501@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (= ($Snap.first $t@502@01) $Snap.unit))
(assert (= ($Snap.second $t@502@01) $Snap.unit))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 276 | res_V0@501@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 276 | res_V0@501@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 9
; [else-branch: 276 | res_V0@501@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ := N10
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> n_V0@464@01) (ShStructget2of3<Ref> n_V0@464@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 277 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 277 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 277 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
; [then-branch: 278 | res_V0@501@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 278 | res_V0@501@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 9
; [else-branch: 278 | res_V0@501@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@501@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        $Snap.unit)))) n_V0@464@01))
; [exec]
; res_V0_CN4 := n_V0_CN0
; [exec]
; res_V0_CN4 := res_V0_CN4
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN4
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  n_V0@464@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (=
    n_V0@464@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 279 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 279 | n_V0@464@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 279 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    n_V0@464@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] sorted_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 11
(declare-const $k@509@01 $Perm)
(assert ($Perm.isReadVar $k@509@01))
(assert (< $k@509@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@509@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@509@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@501@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        $Snap.unit)))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@509@01))
(assert (and
  (< $k@509@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@509@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@501@01)
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
          $Snap.unit)))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(set-option :timeout 0)
(push) ; 11
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@501@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        $Snap.unit)))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@501@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        $Snap.unit)))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  n_V0@464@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 280 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 280 | n_V0@464@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 280 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 13
(declare-const $k@510@01 $Perm)
(assert ($Perm.isReadVar $k@510@01))
(assert (< $k@510@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@510@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@510@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 14
(declare-const $k@511@01 $Perm)
(assert ($Perm.isReadVar $k@511@01))
(assert (< $k@511@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@511@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@511@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@511@01))
(assert (and (< $k@511@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@511@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@501@01)
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
          $Snap.unit))))
  $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@510@01))
(assert ($Perm.isReadVar $k@511@01))
(assert (and
  (< $k@510@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@510@01))
  (< $k@511@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@511@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@501@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
            $Snap.unit))))
    $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@510@01))
(assert ($Perm.isReadVar $k@511@01))
(assert (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@510@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@510@01))
    (< $k@511@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@511@01))
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@501@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
              $Snap.unit))))
      $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))))
(set-option :timeout 0)
(push) ; 11
(assert (not (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
            ($Snap.combine
              ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@501@01)
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
                $Snap.unit))))
        $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)
      value_V0@465@01)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
            ($Snap.combine
              ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@501@01)
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
                $Snap.unit))))
        $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)
      value_V0@465@01))))
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 267 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(pop) ; 6
; [eval] !(value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()))
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 6
; [then-branch: 281 | value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 281 | !(value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))) | live]
(push) ; 7
; [then-branch: 281 | value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))]
(assert (>
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 281 | !(value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (>
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (>
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 282 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))) | live]
; [else-branch: 282 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 282 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
; [eval] value_V0_CN1 == (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 283 | value_V0@465@01 == First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 283 | value_V0@465@01 != First:(First:(Second:(Second:($t@469@01)))) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 283 | value_V0@465@01 == First:(First:(Second:(Second:($t@469@01))))]
(assert (=
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 284 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 284 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 9
; [then-branch: 284 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 284 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 285 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 285 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 285 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
; [exec]
; var N9: Int
(declare-const N9@512@01 Int)
; [exec]
; var N8: ShStruct3[Ref, Ref, Ref]
(declare-const N8@513@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; var minValue_V1: Int
(declare-const minValue_V1@514@01 Int)
; [exec]
; inhale minValue_V1 == 0
(declare-const $t@515@01 $Snap)
(assert (= $t@515@01 $Snap.unit))
; [eval] minValue_V1 == 0
(assert (= minValue_V1@514@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; minValue_V1 := 0
; [exec]
; N8, N9 := deleteMinimum_4b5075e4_PMnode((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]),
;   upperBound_V0_CN3)
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@516@01 $Perm)
(assert ($Perm.isReadVar $k@516@01))
(assert (< $k@516@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@516@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@516@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@516@01))
(assert (and
  (< $k@516@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@516@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (sorted_4b5075e4_PMnode ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01))
(declare-const res_V0@517@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const minimum_V0@518@01 Int)
(declare-const $t@519@01 $Snap)
(assert (= $t@519@01 ($Snap.combine ($Snap.first $t@519@01) ($Snap.second $t@519@01))))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  res_V0@517@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    res_V0@517@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 286 | res_V0@517@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 286 | res_V0@517@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 286 | res_V0@517@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    res_V0@517@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(assert (=
  ($Snap.first $t@519@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@519@01))
    ($Snap.second ($Snap.first $t@519@01)))))
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  res_V0@517@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (= ($Snap.second ($Snap.first $t@519@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)
; [eval] (optSome(minimum_V0): Option[Int])
(set-option :timeout 0)
(push) ; 10
(declare-const $k@520@01 $Perm)
(assert ($Perm.isReadVar $k@520@01))
(assert (< $k@520@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@520@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@520@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.first $t@519@01)) res_V0@517@01 (optSome<Option<Int>> minimum_V0@518@01) upperBound_V0@467@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@520@01))
(assert (and
  (< $k@520@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@520@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.first $t@519@01)) res_V0@517@01 (optSome<Option<Int>> minimum_V0@518@01) upperBound_V0@467@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.first $t@519@01)) res_V0@517@01 (optSome<Option<Int>> minimum_V0@518@01) upperBound_V0@467@01))
(assert (=
  ($Snap.second $t@519@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@519@01))
    ($Snap.second ($Snap.second $t@519@01)))))
(assert (= ($Snap.first ($Snap.second $t@519@01)) $Snap.unit))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  res_V0@517@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 287 | res_V0@517@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 287 | res_V0@517@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 287 | res_V0@517@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)))
; [eval] (minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)
; [eval] (optSome(minimum_V0): Option[Int])
(push) ; 12
(declare-const $k@521@01 $Perm)
(assert ($Perm.isReadVar $k@521@01))
(assert (< $k@521@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@521@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@521@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@522@01 $Perm)
(assert ($Perm.isReadVar $k@522@01))
(assert (< $k@522@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@522@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@522@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@522@01))
(assert (and (< $k@522@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@522@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@519@01))
  $Snap.unit) res_V0@517@01 (optSome<Option<Int>> minimum_V0@518@01) upperBound_V0@467@01))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@521@01))
(assert ($Perm.isReadVar $k@522@01))
(assert (and
  (< $k@521@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@521@01))
  (< $k@522@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@522@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@519@01))
    $Snap.unit) res_V0@517@01 (optSome<Option<Int>> minimum_V0@518@01) upperBound_V0@467@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@521@01))
(assert ($Perm.isReadVar $k@522@01))
(assert (=>
  (not
    (=
      res_V0@517@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@521@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@521@01))
    (< $k@522@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@522@01))
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.first ($Snap.first $t@519@01))
      $Snap.unit) res_V0@517@01 (optSome<Option<Int>> minimum_V0@518@01) upperBound_V0@467@01))))
(assert (=>
  (not
    (=
      res_V0@517@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.first $t@519@01))
        $Snap.unit) res_V0@517@01 (optSome<Option<Int>> minimum_V0@518@01) upperBound_V0@467@01)
      minimum_V0@518@01))))
(assert (=
  ($Snap.second ($Snap.second $t@519@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@519@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@519@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@519@01))) $Snap.unit))
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 288 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]] | live]
; [else-branch: 288 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) == optNone[Option[Int]] | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 288 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]]]
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>))))
(assert (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (as optNone<Option<Int>>  Option<Int>)))
  (<
    (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
    minimum_V0@518@01)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@519@01))) $Snap.unit))
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > minimum_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 289 | upperBound_V0@467@01 != optNone[Option[Int]] | live]
; [else-branch: 289 | upperBound_V0@467@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 289 | upperBound_V0@467@01 != optNone[Option[Int]]]
(assert (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(upperBound_V0): Int) > minimum_V0
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 11
(push) ; 11
; [else-branch: 289 | upperBound_V0@467@01 == optNone[Option[Int]]]
(assert (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))
  (> (optGet<Int> upperBound_V0@467@01) minimum_V0@518@01)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ := N8
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> n_V0@464@01) (ShStructget2of3<Ref> n_V0@464@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [exec]
; minValue_V1 := N9
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 290 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 290 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 290 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; convert_4b5075e4_PMnode((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   lowerBound_V0_CN2, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]),
;   lowerBound_V0_CN2, (optSome(minValue_V1): Option[Int]))
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
; [eval] (optSome(minValue_V1): Option[Int])
; [eval] sorted_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(push) ; 11
(declare-const $k@523@01 $Perm)
(assert ($Perm.isReadVar $k@523@01))
(assert (< $k@523@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@523@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@523@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@523@01))
(assert (and
  (< $k@523@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@523@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(set-option :timeout 0)
(push) ; 11
(assert (not (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
; [eval] oldLowerBound_V0 == (optNone(): Option[Int]) ==> newLowerBound_V0 == (optNone(): Option[Int])
; [eval] oldLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 291 | lowerBound_V0@466@01 == optNone[Option[Int]] | live]
; [else-branch: 291 | lowerBound_V0@466@01 != optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 291 | lowerBound_V0@466@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))
; [eval] newLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(pop) ; 12
(push) ; 12
; [else-branch: 291 | lowerBound_V0@466@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))
  (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] oldUpperBound_V0 == (optNone(): Option[Int]) ==> newUpperBound_V0 == (optNone(): Option[Int])
; [eval] oldUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 11
; [then-branch: 292 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) == optNone[Option[Int]] | dead]
; [else-branch: 292 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]] | live]
(push) ; 12
; [else-branch: 292 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]]]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] !(newLowerBound_V0 == (optNone(): Option[Int])) ==> !(oldLowerBound_V0 == (optNone(): Option[Int])) && (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] !(newLowerBound_V0 == (optNone(): Option[Int]))
; [eval] newLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 293 | lowerBound_V0@466@01 != optNone[Option[Int]] | live]
; [else-branch: 293 | lowerBound_V0@466@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 293 | lowerBound_V0@466@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] !(oldLowerBound_V0 == (optNone(): Option[Int])) && (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] !(oldLowerBound_V0 == (optNone(): Option[Int]))
; [eval] oldLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 13
; [then-branch: 294 | lowerBound_V0@466@01 != optNone[Option[Int]] | live]
; [else-branch: 294 | lowerBound_V0@466@01 == optNone[Option[Int]] | live]
(push) ; 14
; [then-branch: 294 | lowerBound_V0@466@01 != optNone[Option[Int]]]
; [eval] (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] (optGet(oldLowerBound_V0): Int)
; [eval] (optGet(newLowerBound_V0): Int)
(pop) ; 14
(push) ; 14
; [else-branch: 294 | lowerBound_V0@466@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 293 | lowerBound_V0@466@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [eval] !(newUpperBound_V0 == (optNone(): Option[Int])) ==> !(oldUpperBound_V0 == (optNone(): Option[Int])) && (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] !(newUpperBound_V0 == (optNone(): Option[Int]))
; [eval] newUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (optSome<Option<Int>> minimum_V0@518@01)
  (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (=
    (optSome<Option<Int>> minimum_V0@518@01)
    (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 295 | optSome[Option[Int]](minimum_V0@518@01) != optNone[Option[Int]] | live]
; [else-branch: 295 | optSome[Option[Int]](minimum_V0@518@01) == optNone[Option[Int]] | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 295 | optSome[Option[Int]](minimum_V0@518@01) != optNone[Option[Int]]]
(assert (not
  (=
    (optSome<Option<Int>> minimum_V0@518@01)
    (as optNone<Option<Int>>  Option<Int>))))
; [eval] !(oldUpperBound_V0 == (optNone(): Option[Int])) && (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] !(oldUpperBound_V0 == (optNone(): Option[Int]))
; [eval] oldUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 13
; [then-branch: 296 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]] | live]
; [else-branch: 296 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) == optNone[Option[Int]] | live]
(push) ; 14
; [then-branch: 296 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]]]
; [eval] (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] (optGet(oldUpperBound_V0): Int)
; [eval] (optGet(newUpperBound_V0): Int)
(pop) ; 14
(push) ; 14
; [else-branch: 296 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) == optNone[Option[Int]]]
(assert (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>))
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (as optNone<Option<Int>>  Option<Int>)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (not
    (=
      (optSome<Option<Int>> minimum_V0@518@01)
      (as optNone<Option<Int>>  Option<Int>)))
  (and
    (not
      (=
        (optSome<Option<Int>> minimum_V0@518@01)
        (as optNone<Option<Int>>  Option<Int>)))
    (or
      (=
        (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (as optNone<Option<Int>>  Option<Int>))
      (not
        (=
          (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
          (as optNone<Option<Int>>  Option<Int>)))))))
(assert (not
  (=
    (optSome<Option<Int>> minimum_V0@518@01)
    (as optNone<Option<Int>>  Option<Int>))))
(push) ; 11
(assert (not (=>
  (not
    (=
      (optSome<Option<Int>> minimum_V0@518@01)
      (as optNone<Option<Int>>  Option<Int>)))
  (and
    (<=
      (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      (optGet<Int> (optSome<Option<Int>> minimum_V0@518@01)))
    (not
      (=
        (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (as optNone<Option<Int>>  Option<Int>)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      (optSome<Option<Int>> minimum_V0@518@01)
      (as optNone<Option<Int>>  Option<Int>)))
  (and
    (<=
      (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      (optGet<Int> (optSome<Option<Int>> minimum_V0@518@01)))
    (not
      (=
        (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (as optNone<Option<Int>>  Option<Int>))))))
(declare-const $t@524@01 $Snap)
(assert (= $t@524@01 ($Snap.combine ($Snap.first $t@524@01) ($Snap.second $t@524@01))))
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  res_V0@517@01
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second $t@524@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@524@01))
    ($Snap.second ($Snap.second $t@524@01)))))
(assert (= ($Snap.first ($Snap.second $t@524@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@525@01 $Perm)
(assert ($Perm.isReadVar $k@525@01))
(assert (< $k@525@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@525@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@525@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@524@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@525@01))
(assert (and
  (< $k@525@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@525@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@524@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@524@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(assert (=
  ($Snap.second ($Snap.second $t@524@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@524@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@524@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@524@01))) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@526@01 $Perm)
(assert ($Perm.isReadVar $k@526@01))
(assert (< $k@526@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@526@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@526@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@524@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> minimum_V0@518@01)))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@526@01))
(assert (and
  (< $k@526@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@526@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@524@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> minimum_V0@518@01))))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@524@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> minimum_V0@518@01)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@524@01))) $Snap.unit))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0) == sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@527@01 $Perm)
(assert ($Perm.isReadVar $k@527@01))
(assert (< $k@527@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@527@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@527@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@528@01 $Perm)
(assert ($Perm.isReadVar $k@528@01))
(assert (< $k@528@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@528@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@528@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@528@01))
(assert (and (< $k@528@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@528@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@524@01)
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@527@01))
(assert ($Perm.isReadVar $k@528@01))
(assert (and
  (< $k@527@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@527@01))
  (< $k@528@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@528@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@524@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@529@01 $Perm)
(assert ($Perm.isReadVar $k@529@01))
(assert (< $k@529@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@529@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@529@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@530@01 $Perm)
(assert ($Perm.isReadVar $k@530@01))
(assert (< $k@530@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@530@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@530@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@530@01))
(assert (and (< $k@530@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@530@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@524@01)
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> minimum_V0@518@01)))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@529@01))
(assert ($Perm.isReadVar $k@530@01))
(assert (and
  (< $k@529@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@529@01))
  (< $k@530@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@530@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@524@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> minimum_V0@518@01))))
(assert (Seq_equal
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first $t@524@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first $t@524@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> minimum_V0@518@01))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ := minValue_V1
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 297 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 297 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 297 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  res_V0@517@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 298 | res_V0@517@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 298 | res_V0@517@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 298 | res_V0@517@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget2of3(n_V0): Ref)
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($SortWrappers.IntTo$Snap minimum_V0@518@01)
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@517@01)
      ($Snap.combine
        ($Snap.first $t@524@01)
        ($Snap.first ($Snap.first $t@519@01)))))) n_V0@464@01))
; [exec]
; res_V0_CN4 := n_V0_CN0
; [exec]
; res_V0_CN4 := res_V0_CN4
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN4
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  n_V0@464@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    n_V0@464@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 299 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 299 | n_V0@464@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 299 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    n_V0@464@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] sorted_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 14
(declare-const $k@531@01 $Perm)
(assert ($Perm.isReadVar $k@531@01))
(assert (< $k@531@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@531@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@531@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($SortWrappers.IntTo$Snap minimum_V0@518@01)
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@517@01)
      ($Snap.combine
        ($Snap.first $t@524@01)
        ($Snap.first ($Snap.first $t@519@01)))))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@531@01))
(assert (and
  (< $k@531@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@531@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($SortWrappers.IntTo$Snap minimum_V0@518@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@517@01)
        ($Snap.combine
          ($Snap.first $t@524@01)
          ($Snap.first ($Snap.first $t@519@01)))))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(set-option :timeout 0)
(push) ; 14
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($SortWrappers.IntTo$Snap minimum_V0@518@01)
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@517@01)
      ($Snap.combine
        ($Snap.first $t@524@01)
        ($Snap.first ($Snap.first $t@519@01)))))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($SortWrappers.IntTo$Snap minimum_V0@518@01)
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@517@01)
      ($Snap.combine
        ($Snap.first $t@524@01)
        ($Snap.first ($Snap.first $t@519@01)))))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 14
(pop) ; 14
; Joined path conditions
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  n_V0@464@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
; [then-branch: 300 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 300 | n_V0@464@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 300 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 16
(declare-const $k@532@01 $Perm)
(assert ($Perm.isReadVar $k@532@01))
(assert (< $k@532@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@532@01)))
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No $k@532@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 17
(declare-const $k@533@01 $Perm)
(assert ($Perm.isReadVar $k@533@01))
(assert (< $k@533@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@533@01)))
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No $k@533@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(pop) ; 17
; Joined path conditions
(assert ($Perm.isReadVar $k@533@01))
(assert (and (< $k@533@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@533@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap minimum_V0@518@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@517@01)
        ($Snap.combine
          ($Snap.first $t@524@01)
          ($Snap.first ($Snap.first $t@519@01))))))
  $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@532@01))
(assert ($Perm.isReadVar $k@533@01))
(assert (and
  (< $k@532@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@532@01))
  (< $k@533@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@533@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap minimum_V0@518@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@517@01)
          ($Snap.combine
            ($Snap.first $t@524@01)
            ($Snap.first ($Snap.first $t@519@01))))))
    $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@532@01))
(assert ($Perm.isReadVar $k@533@01))
(assert (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@532@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@532@01))
    (< $k@533@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@533@01))
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap minimum_V0@518@01)
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@517@01)
            ($Snap.combine
              ($Snap.first $t@524@01)
              ($Snap.first ($Snap.first $t@519@01))))))
      $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))))
(set-option :timeout 0)
(push) ; 14
(assert (not (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap minimum_V0@518@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
            ($Snap.combine
              ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@517@01)
              ($Snap.combine
                ($Snap.first $t@524@01)
                ($Snap.first ($Snap.first $t@519@01))))))
        $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)
      value_V0@465@01)))))
(check-sat)
; unsat
(pop) ; 14
; 0.09s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap minimum_V0@518@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
            ($Snap.combine
              ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@517@01)
              ($Snap.combine
                ($Snap.first $t@524@01)
                ($Snap.first ($Snap.first $t@519@01))))))
        $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)
      value_V0@465@01))))
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
; [eval] !!((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
; [then-branch: 301 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 301 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 10
; [else-branch: 301 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 286 | res_V0@517@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  res_V0@517@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (= ($Snap.first $t@519@01) $Snap.unit))
(assert (=
  ($Snap.second $t@519@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@519@01))
    ($Snap.second ($Snap.second $t@519@01)))))
(assert (= ($Snap.first ($Snap.second $t@519@01)) $Snap.unit))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((minimum_V0 in sortedValues_4b5075e4_PMnode(res_V0, (optSome(minimum_V0): Option[Int]), upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
; [then-branch: 302 | res_V0@517@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 302 | res_V0@517@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 11
; [else-branch: 302 | res_V0@517@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second $t@519@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@519@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@519@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@519@01))) $Snap.unit))
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 303 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]] | live]
; [else-branch: 303 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) == optNone[Option[Int]] | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 303 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]]]
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(lowerBound_V0): Int) < minimum_V0
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>))))
(assert (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (as optNone<Option<Int>>  Option<Int>)))
  (<
    (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
    minimum_V0@518@01)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@519@01))) $Snap.unit))
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > minimum_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 304 | upperBound_V0@467@01 != optNone[Option[Int]] | live]
; [else-branch: 304 | upperBound_V0@467@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 304 | upperBound_V0@467@01 != optNone[Option[Int]]]
(assert (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(upperBound_V0): Int) > minimum_V0
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 11
(push) ; 11
; [else-branch: 304 | upperBound_V0@467@01 == optNone[Option[Int]]]
(assert (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (=>
  (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))
  (> (optGet<Int> upperBound_V0@467@01) minimum_V0@518@01)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ := N8
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> n_V0@464@01) (ShStructget2of3<Ref> n_V0@464@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [exec]
; minValue_V1 := N9
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 305 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 305 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 305 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; convert_4b5075e4_PMnode((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   lowerBound_V0_CN2, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]),
;   lowerBound_V0_CN2, (optSome(minValue_V1): Option[Int]))
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
; [eval] (optSome(minValue_V1): Option[Int])
; [eval] sorted_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(push) ; 11
(declare-const $k@534@01 $Perm)
(assert ($Perm.isReadVar $k@534@01))
(assert (< $k@534@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@534@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@534@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@534@01))
(assert (and
  (< $k@534@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@534@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(set-option :timeout 0)
(push) ; 11
(assert (not (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
; [eval] oldLowerBound_V0 == (optNone(): Option[Int]) ==> newLowerBound_V0 == (optNone(): Option[Int])
; [eval] oldLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 306 | lowerBound_V0@466@01 == optNone[Option[Int]] | live]
; [else-branch: 306 | lowerBound_V0@466@01 != optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 306 | lowerBound_V0@466@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))
; [eval] newLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(pop) ; 12
(push) ; 12
; [else-branch: 306 | lowerBound_V0@466@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))
  (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] oldUpperBound_V0 == (optNone(): Option[Int]) ==> newUpperBound_V0 == (optNone(): Option[Int])
; [eval] oldUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 11
; [then-branch: 307 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) == optNone[Option[Int]] | dead]
; [else-branch: 307 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]] | live]
(push) ; 12
; [else-branch: 307 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]]]
(pop) ; 12
(pop) ; 11
; Joined path conditions
; [eval] !(newLowerBound_V0 == (optNone(): Option[Int])) ==> !(oldLowerBound_V0 == (optNone(): Option[Int])) && (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] !(newLowerBound_V0 == (optNone(): Option[Int]))
; [eval] newLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 308 | lowerBound_V0@466@01 != optNone[Option[Int]] | live]
; [else-branch: 308 | lowerBound_V0@466@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 308 | lowerBound_V0@466@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] !(oldLowerBound_V0 == (optNone(): Option[Int])) && (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] !(oldLowerBound_V0 == (optNone(): Option[Int]))
; [eval] oldLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 13
; [then-branch: 309 | lowerBound_V0@466@01 != optNone[Option[Int]] | live]
; [else-branch: 309 | lowerBound_V0@466@01 == optNone[Option[Int]] | live]
(push) ; 14
; [then-branch: 309 | lowerBound_V0@466@01 != optNone[Option[Int]]]
; [eval] (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] (optGet(oldLowerBound_V0): Int)
; [eval] (optGet(newLowerBound_V0): Int)
(pop) ; 14
(push) ; 14
; [else-branch: 309 | lowerBound_V0@466@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 308 | lowerBound_V0@466@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
; [eval] !(newUpperBound_V0 == (optNone(): Option[Int])) ==> !(oldUpperBound_V0 == (optNone(): Option[Int])) && (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] !(newUpperBound_V0 == (optNone(): Option[Int]))
; [eval] newUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  (optSome<Option<Int>> minimum_V0@518@01)
  (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (=
    (optSome<Option<Int>> minimum_V0@518@01)
    (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 310 | optSome[Option[Int]](minimum_V0@518@01) != optNone[Option[Int]] | live]
; [else-branch: 310 | optSome[Option[Int]](minimum_V0@518@01) == optNone[Option[Int]] | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 310 | optSome[Option[Int]](minimum_V0@518@01) != optNone[Option[Int]]]
(assert (not
  (=
    (optSome<Option<Int>> minimum_V0@518@01)
    (as optNone<Option<Int>>  Option<Int>))))
; [eval] !(oldUpperBound_V0 == (optNone(): Option[Int])) && (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] !(oldUpperBound_V0 == (optNone(): Option[Int]))
; [eval] oldUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 13
; [then-branch: 311 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]] | live]
; [else-branch: 311 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) == optNone[Option[Int]] | live]
(push) ; 14
; [then-branch: 311 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]]]
; [eval] (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] (optGet(oldUpperBound_V0): Int)
; [eval] (optGet(newUpperBound_V0): Int)
(pop) ; 14
(push) ; 14
; [else-branch: 311 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) == optNone[Option[Int]]]
(assert (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>))
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (as optNone<Option<Int>>  Option<Int>)))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (not
    (=
      (optSome<Option<Int>> minimum_V0@518@01)
      (as optNone<Option<Int>>  Option<Int>)))
  (and
    (not
      (=
        (optSome<Option<Int>> minimum_V0@518@01)
        (as optNone<Option<Int>>  Option<Int>)))
    (or
      (=
        (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (as optNone<Option<Int>>  Option<Int>))
      (not
        (=
          (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
          (as optNone<Option<Int>>  Option<Int>)))))))
(assert (not
  (=
    (optSome<Option<Int>> minimum_V0@518@01)
    (as optNone<Option<Int>>  Option<Int>))))
(push) ; 11
(assert (not (=>
  (not
    (=
      (optSome<Option<Int>> minimum_V0@518@01)
      (as optNone<Option<Int>>  Option<Int>)))
  (and
    (<=
      (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      (optGet<Int> (optSome<Option<Int>> minimum_V0@518@01)))
    (not
      (=
        (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (as optNone<Option<Int>>  Option<Int>)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      (optSome<Option<Int>> minimum_V0@518@01)
      (as optNone<Option<Int>>  Option<Int>)))
  (and
    (<=
      (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      (optGet<Int> (optSome<Option<Int>> minimum_V0@518@01)))
    (not
      (=
        (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (as optNone<Option<Int>>  Option<Int>))))))
(declare-const $t@535@01 $Snap)
(assert (= $t@535@01 ($Snap.combine ($Snap.first $t@535@01) ($Snap.second $t@535@01))))
(assert (=
  ($Snap.second $t@535@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@535@01))
    ($Snap.second ($Snap.second $t@535@01)))))
(assert (= ($Snap.first ($Snap.second $t@535@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(push) ; 11
(declare-const $k@536@01 $Perm)
(assert ($Perm.isReadVar $k@536@01))
(assert (< $k@536@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@536@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@536@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@535@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@536@01))
(assert (and
  (< $k@536@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@536@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@535@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@535@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(assert (=
  ($Snap.second ($Snap.second $t@535@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@535@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@535@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@535@01))) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@537@01 $Perm)
(assert ($Perm.isReadVar $k@537@01))
(assert (< $k@537@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@537@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@537@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@535@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> minimum_V0@518@01)))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@537@01))
(assert (and
  (< $k@537@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@537@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@535@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> minimum_V0@518@01))))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@535@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> minimum_V0@518@01)))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@535@01))) $Snap.unit))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0) == sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@538@01 $Perm)
(assert ($Perm.isReadVar $k@538@01))
(assert (< $k@538@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@538@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@538@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@539@01 $Perm)
(assert ($Perm.isReadVar $k@539@01))
(assert (< $k@539@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@539@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@539@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@539@01))
(assert (and (< $k@539@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@539@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@535@01)
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@538@01))
(assert ($Perm.isReadVar $k@539@01))
(assert (and
  (< $k@538@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@538@01))
  (< $k@539@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@539@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@535@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@540@01 $Perm)
(assert ($Perm.isReadVar $k@540@01))
(assert (< $k@540@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@540@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@540@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@541@01 $Perm)
(assert ($Perm.isReadVar $k@541@01))
(assert (< $k@541@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@541@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@541@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@541@01))
(assert (and (< $k@541@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@541@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@535@01)
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> minimum_V0@518@01)))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@540@01))
(assert ($Perm.isReadVar $k@541@01))
(assert (and
  (< $k@540@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@540@01))
  (< $k@541@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@541@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@535@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> minimum_V0@518@01))))
(assert (Seq_equal
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first $t@535@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first $t@535@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> minimum_V0@518@01))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ := minValue_V1
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 312 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 312 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 312 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 12
(pop) ; 12
; Joined path conditions
; [then-branch: 313 | res_V0@517@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 313 | res_V0@517@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 12
; [else-branch: 313 | res_V0@517@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($SortWrappers.IntTo$Snap minimum_V0@518@01)
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@517@01)
      ($Snap.combine ($Snap.first $t@535@01) $Snap.unit)))) n_V0@464@01))
; [exec]
; res_V0_CN4 := n_V0_CN0
; [exec]
; res_V0_CN4 := res_V0_CN4
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN4
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 13
(pop) ; 13
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  n_V0@464@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (=
    n_V0@464@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 314 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 314 | n_V0@464@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 314 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    n_V0@464@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] sorted_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 14
(declare-const $k@542@01 $Perm)
(assert ($Perm.isReadVar $k@542@01))
(assert (< $k@542@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@542@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@542@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($SortWrappers.IntTo$Snap minimum_V0@518@01)
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@517@01)
      ($Snap.combine ($Snap.first $t@535@01) $Snap.unit)))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@542@01))
(assert (and
  (< $k@542@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@542@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($SortWrappers.IntTo$Snap minimum_V0@518@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@517@01)
        ($Snap.combine ($Snap.first $t@535@01) $Snap.unit)))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(set-option :timeout 0)
(push) ; 14
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($SortWrappers.IntTo$Snap minimum_V0@518@01)
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@517@01)
      ($Snap.combine ($Snap.first $t@535@01) $Snap.unit)))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($SortWrappers.IntTo$Snap minimum_V0@518@01)
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@517@01)
      ($Snap.combine ($Snap.first $t@535@01) $Snap.unit)))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 14
(pop) ; 14
; Joined path conditions
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (=
  n_V0@464@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
; [then-branch: 315 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 315 | n_V0@464@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 315 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 16
(declare-const $k@543@01 $Perm)
(assert ($Perm.isReadVar $k@543@01))
(assert (< $k@543@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@543@01)))
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No $k@543@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 17
(declare-const $k@544@01 $Perm)
(assert ($Perm.isReadVar $k@544@01))
(assert (< $k@544@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@544@01)))
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No $k@544@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(pop) ; 17
; Joined path conditions
(assert ($Perm.isReadVar $k@544@01))
(assert (and (< $k@544@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@544@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($SortWrappers.IntTo$Snap minimum_V0@518@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@517@01)
        ($Snap.combine ($Snap.first $t@535@01) $Snap.unit))))
  $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@543@01))
(assert ($Perm.isReadVar $k@544@01))
(assert (and
  (< $k@543@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@543@01))
  (< $k@544@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@544@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap minimum_V0@518@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@517@01)
          ($Snap.combine ($Snap.first $t@535@01) $Snap.unit))))
    $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@543@01))
(assert ($Perm.isReadVar $k@544@01))
(assert (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@543@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@543@01))
    (< $k@544@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@544@01))
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap minimum_V0@518@01)
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@517@01)
            ($Snap.combine ($Snap.first $t@535@01) $Snap.unit))))
      $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))))
(set-option :timeout 0)
(push) ; 14
(assert (not (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap minimum_V0@518@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
            ($Snap.combine
              ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@517@01)
              ($Snap.combine ($Snap.first $t@535@01) $Snap.unit))))
        $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)
      value_V0@465@01)))))
(check-sat)
; unsat
(pop) ; 14
; 0.02s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($SortWrappers.IntTo$Snap minimum_V0@518@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
            ($Snap.combine
              ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@517@01)
              ($Snap.combine ($Snap.first $t@535@01) $Snap.unit))))
        $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)
      value_V0@465@01))))
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
; [eval] !!((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
; [then-branch: 316 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 316 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 10
; [else-branch: 316 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 10
(pop) ; 9
(pop) ; 8
; [eval] !(!((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 317 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 317 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 9
; [then-branch: 317 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 317 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 318 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)) | dead]
; [else-branch: 318 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 318 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(pop) ; 8
(pop) ; 7
; [eval] !(value_V0_CN1 == (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$)
; [eval] value_V0_CN1 == (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 319 | value_V0@465@01 != First:(First:(Second:(Second:($t@469@01)))) | dead]
; [else-branch: 319 | value_V0@465@01 == First:(First:(Second:(Second:($t@469@01)))) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 319 | value_V0@465@01 == First:(First:(Second:(Second:($t@469@01))))]
(assert (=
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 282 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))]
(assert (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (>
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 265 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))]
(assert (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (<
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 248 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
  $Snap.unit))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMnode%trigger ($Snap.first ($Snap.second ($Snap.second $t@469@01))) n_V0@464@01))
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 320 | value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 320 | !(value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))) | live]
(push) ; 6
; [then-branch: 320 | value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))]
(assert (<
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 320 | !(value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (<
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
  (<
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (<
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 321 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 321 | !(First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 321 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))]
(assert (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (<
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
; [exec]
; var N11: ShStruct3[Ref, Ref, Ref]
(declare-const N11@545@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; N11 := delete_4b5075e4_PMnode((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   value_V0_CN1, lowerBound_V0_CN2, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]))
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < value_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 322 | lowerBound_V0@466@01 != optNone[Option[Int]] | live]
; [else-branch: 322 | lowerBound_V0@466@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 322 | lowerBound_V0@466@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(lowerBound_V0): Int) < value_V0
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 7
(push) ; 7
; [else-branch: 322 | lowerBound_V0@466@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > value_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 323 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]] | live]
; [else-branch: 323 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) == optNone[Option[Int]] | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 323 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]]]
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(upperBound_V0): Int) > value_V0
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>))))
(push) ; 6
(assert (not (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (as optNone<Option<Int>>  Option<Int>)))
  (>
    (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
    value_V0@465@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (as optNone<Option<Int>>  Option<Int>)))
  (>
    (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
    value_V0@465@01)))
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 6
(declare-const $k@546@01 $Perm)
(assert ($Perm.isReadVar $k@546@01))
(assert (< $k@546@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@546@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@546@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@546@01))
(assert (and
  (< $k@546@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@546@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(set-option :timeout 0)
(push) ; 6
(assert (not (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(declare-const res_V0@547@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const $t@548@01 $Snap)
(assert (= $t@548@01 ($Snap.combine ($Snap.first $t@548@01) ($Snap.second $t@548@01))))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  res_V0@547@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    res_V0@547@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 324 | res_V0@547@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 324 | res_V0@547@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 324 | res_V0@547@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    res_V0@547@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(assert (=
  ($Snap.first $t@548@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@548@01))
    ($Snap.second ($Snap.first $t@548@01)))))
(assert (= ($Snap.second ($Snap.first $t@548@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 7
(declare-const $k@549@01 $Perm)
(assert ($Perm.isReadVar $k@549@01))
(assert (< $k@549@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@549@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@549@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.first $t@548@01)) res_V0@547@01 lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@549@01))
(assert (and
  (< $k@549@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@549@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.first $t@548@01)) res_V0@547@01 lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.first $t@548@01)) res_V0@547@01 lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(assert (= ($Snap.second $t@548@01) $Snap.unit))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  res_V0@547@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 325 | res_V0@547@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 325 | res_V0@547@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 325 | res_V0@547@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@550@01 $Perm)
(assert ($Perm.isReadVar $k@550@01))
(assert (< $k@550@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@550@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@550@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@551@01 $Perm)
(assert ($Perm.isReadVar $k@551@01))
(assert (< $k@551@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@551@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@551@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@551@01))
(assert (and (< $k@551@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@551@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@548@01))
  $Snap.unit) res_V0@547@01 lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@550@01))
(assert ($Perm.isReadVar $k@551@01))
(assert (and
  (< $k@550@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@550@01))
  (< $k@551@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@551@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@548@01))
    $Snap.unit) res_V0@547@01 lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@550@01))
(assert ($Perm.isReadVar $k@551@01))
(assert (=>
  (not
    (=
      res_V0@547@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@550@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@550@01))
    (< $k@551@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@551@01))
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.first ($Snap.first $t@548@01))
      $Snap.unit) res_V0@547@01 lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))
(assert (=>
  (not
    (=
      res_V0@547@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.first $t@548@01))
        $Snap.unit) res_V0@547@01 lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      value_V0@465@01))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ := N11
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget2of3<Ref> n_V0@464@01) (ShStructget1of3<Ref> n_V0@464@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  res_V0@547@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 326 | res_V0@547@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 326 | res_V0@547@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 326 | res_V0@547@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
; [then-branch: 327 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 327 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 8
; [else-branch: 327 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@547@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      ($Snap.combine ($Snap.first ($Snap.first $t@548@01)) $Snap.unit)))) n_V0@464@01))
; [exec]
; res_V0_CN4 := n_V0_CN0
; [exec]
; res_V0_CN4 := res_V0_CN4
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN4
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  n_V0@464@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    n_V0@464@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 328 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 328 | n_V0@464@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 328 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    n_V0@464@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] sorted_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@552@01 $Perm)
(assert ($Perm.isReadVar $k@552@01))
(assert (< $k@552@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@552@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@552@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@547@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      ($Snap.combine ($Snap.first ($Snap.first $t@548@01)) $Snap.unit)))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@552@01))
(assert (and
  (< $k@552@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@552@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@547@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        ($Snap.combine ($Snap.first ($Snap.first $t@548@01)) $Snap.unit)))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(set-option :timeout 0)
(push) ; 10
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@547@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      ($Snap.combine ($Snap.first ($Snap.first $t@548@01)) $Snap.unit)))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@547@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      ($Snap.combine ($Snap.first ($Snap.first $t@548@01)) $Snap.unit)))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  n_V0@464@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 329 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 329 | n_V0@464@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 329 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 12
(declare-const $k@553@01 $Perm)
(assert ($Perm.isReadVar $k@553@01))
(assert (< $k@553@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@553@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@553@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@554@01 $Perm)
(assert ($Perm.isReadVar $k@554@01))
(assert (< $k@554@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@554@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@554@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@554@01))
(assert (and (< $k@554@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@554@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@547@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        ($Snap.combine ($Snap.first ($Snap.first $t@548@01)) $Snap.unit))))
  $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@553@01))
(assert ($Perm.isReadVar $k@554@01))
(assert (and
  (< $k@553@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@553@01))
  (< $k@554@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@554@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@547@01)
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
          ($Snap.combine ($Snap.first ($Snap.first $t@548@01)) $Snap.unit))))
    $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@553@01))
(assert ($Perm.isReadVar $k@554@01))
(assert (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@553@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@553@01))
    (< $k@554@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@554@01))
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@547@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
            ($Snap.combine ($Snap.first ($Snap.first $t@548@01)) $Snap.unit))))
      $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))))
(set-option :timeout 0)
(push) ; 10
(assert (not (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@547@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
              ($Snap.combine ($Snap.first ($Snap.first $t@548@01)) $Snap.unit))))
        $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)
      value_V0@465@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@547@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
              ($Snap.combine ($Snap.first ($Snap.first $t@548@01)) $Snap.unit))))
        $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)
      value_V0@465@01))))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 324 | res_V0@547@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  res_V0@547@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (= ($Snap.first $t@548@01) $Snap.unit))
(assert (= ($Snap.second $t@548@01) $Snap.unit))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
; [then-branch: 330 | res_V0@547@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 330 | res_V0@547@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 8
; [else-branch: 330 | res_V0@547@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 8
(pop) ; 7
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ := N11
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget2of3<Ref> n_V0@464@01) (ShStructget1of3<Ref> n_V0@464@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
; [then-branch: 331 | res_V0@547@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 331 | res_V0@547@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 7
; [else-branch: 331 | res_V0@547@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
; [then-branch: 332 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 332 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 8
; [else-branch: 332 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@547@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@464@01))
; [exec]
; res_V0_CN4 := n_V0_CN0
; [exec]
; res_V0_CN4 := res_V0_CN4
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN4
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  n_V0@464@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    n_V0@464@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 333 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 333 | n_V0@464@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 333 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    n_V0@464@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] sorted_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@555@01 $Perm)
(assert ($Perm.isReadVar $k@555@01))
(assert (< $k@555@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@555@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@555@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@547@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@555@01))
(assert (and
  (< $k@555@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@555@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@547@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(set-option :timeout 0)
(push) ; 10
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@547@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@547@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  n_V0@464@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 334 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 334 | n_V0@464@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 334 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 12
(declare-const $k@556@01 $Perm)
(assert ($Perm.isReadVar $k@556@01))
(assert (< $k@556@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@556@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@556@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@557@01 $Perm)
(assert ($Perm.isReadVar $k@557@01))
(assert (< $k@557@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@557@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@557@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@557@01))
(assert (and (< $k@557@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@557@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@547@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        ($Snap.combine $Snap.unit $Snap.unit))))
  $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@556@01))
(assert ($Perm.isReadVar $k@557@01))
(assert (and
  (< $k@556@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@556@01))
  (< $k@557@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@557@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@547@01)
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
          ($Snap.combine $Snap.unit $Snap.unit))))
    $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@556@01))
(assert ($Perm.isReadVar $k@557@01))
(assert (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@556@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@556@01))
    (< $k@557@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@557@01))
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@547@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
            ($Snap.combine $Snap.unit $Snap.unit))))
      $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))))
(set-option :timeout 0)
(push) ; 10
(assert (not (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@547@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
              ($Snap.combine $Snap.unit $Snap.unit))))
        $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)
      value_V0@465@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@547@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
              ($Snap.combine $Snap.unit $Snap.unit))))
        $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)
      value_V0@465@01))))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 321 | !(First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(pop) ; 5
; [eval] !(value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()))
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 5
; [then-branch: 335 | value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 335 | !(value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))) | live]
(push) ; 6
; [then-branch: 335 | value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))]
(assert (<
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 335 | !(value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (<
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (<
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 336 | !(First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))) | live]
; [else-branch: 336 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 336 | !(First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 6
; [then-branch: 337 | value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 337 | !(value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))) | live]
(push) ; 7
; [then-branch: 337 | value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))]
(assert (>
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 337 | !(value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (>
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
  (>
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 338 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))) | dead]
; [else-branch: 338 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 338 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(pop) ; 6
; [eval] !(value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()))
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 6
; [then-branch: 339 | value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 339 | !(value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))) | live]
(push) ; 7
; [then-branch: 339 | value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))]
(assert (>
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 339 | !(value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (>
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (>
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 340 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))) | live]
; [else-branch: 340 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 340 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
; [eval] value_V0_CN1 == (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 341 | value_V0@465@01 == First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 341 | value_V0@465@01 != First:(First:(Second:(Second:($t@469@01)))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 341 | value_V0@465@01 == First:(First:(Second:(Second:($t@469@01))))]
(assert (=
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 342 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 342 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 9
; [then-branch: 342 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 342 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 343 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 343 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 343 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(pop) ; 8
; [eval] !(!((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 344 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 344 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 9
; [then-branch: 344 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 344 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 345 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)) | live]
; [else-branch: 345 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 345 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 346 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 346 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 346 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [exec]
; res_V0_CN4 := (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
(declare-const res_V0_CN4@558@01 ShStruct3<Ref~_Ref~_Ref>)
(assert (=
  res_V0_CN4@558@01
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
; [exec]
; convert_4b5075e4_PMnode(res_V0_CN4, lowerBound_V0_CN2, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]),
;   lowerBound_V0_CN2, upperBound_V0_CN3)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  res_V0_CN4@558@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@559@01 $Perm)
(assert ($Perm.isReadVar $k@559@01))
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  res_V0_CN4@558@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (< $k@559@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@559@01)))
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@559@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) res_V0_CN4@558@01 lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@559@01))
(assert (and
  (< $k@559@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@559@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) res_V0_CN4@558@01 lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(set-option :timeout 0)
(push) ; 10
(assert (not (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) res_V0_CN4@558@01 lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) res_V0_CN4@558@01 lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
; [eval] oldLowerBound_V0 == (optNone(): Option[Int]) ==> newLowerBound_V0 == (optNone(): Option[Int])
; [eval] oldLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 347 | lowerBound_V0@466@01 == optNone[Option[Int]] | live]
; [else-branch: 347 | lowerBound_V0@466@01 != optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 347 | lowerBound_V0@466@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))
; [eval] newLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(pop) ; 11
(push) ; 11
; [else-branch: 347 | lowerBound_V0@466@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))
  (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] oldUpperBound_V0 == (optNone(): Option[Int]) ==> newUpperBound_V0 == (optNone(): Option[Int])
; [eval] oldUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 348 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) == optNone[Option[Int]] | dead]
; [else-branch: 348 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 348 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]]]
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>))))
; [eval] !(newLowerBound_V0 == (optNone(): Option[Int])) ==> !(oldLowerBound_V0 == (optNone(): Option[Int])) && (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] !(newLowerBound_V0 == (optNone(): Option[Int]))
; [eval] newLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 349 | lowerBound_V0@466@01 != optNone[Option[Int]] | live]
; [else-branch: 349 | lowerBound_V0@466@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 349 | lowerBound_V0@466@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] !(oldLowerBound_V0 == (optNone(): Option[Int])) && (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] !(oldLowerBound_V0 == (optNone(): Option[Int]))
; [eval] oldLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 12
; [then-branch: 350 | lowerBound_V0@466@01 != optNone[Option[Int]] | live]
; [else-branch: 350 | lowerBound_V0@466@01 == optNone[Option[Int]] | live]
(push) ; 13
; [then-branch: 350 | lowerBound_V0@466@01 != optNone[Option[Int]]]
; [eval] (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] (optGet(oldLowerBound_V0): Int)
; [eval] (optGet(newLowerBound_V0): Int)
(pop) ; 13
(push) ; 13
; [else-branch: 350 | lowerBound_V0@466@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(pop) ; 11
(push) ; 11
; [else-branch: 349 | lowerBound_V0@466@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [eval] !(newUpperBound_V0 == (optNone(): Option[Int])) ==> !(oldUpperBound_V0 == (optNone(): Option[Int])) && (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] !(newUpperBound_V0 == (optNone(): Option[Int]))
; [eval] newUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 351 | upperBound_V0@467@01 != optNone[Option[Int]] | live]
; [else-branch: 351 | upperBound_V0@467@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 351 | upperBound_V0@467@01 != optNone[Option[Int]]]
(assert (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] !(oldUpperBound_V0 == (optNone(): Option[Int])) && (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] !(oldUpperBound_V0 == (optNone(): Option[Int]))
; [eval] oldUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 12
; [then-branch: 352 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]] | live]
; [else-branch: 352 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) == optNone[Option[Int]] | live]
(push) ; 13
; [then-branch: 352 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]]]
; [eval] (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] (optGet(oldUpperBound_V0): Int)
; [eval] (optGet(newUpperBound_V0): Int)
(pop) ; 13
(push) ; 13
; [else-branch: 352 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) == optNone[Option[Int]]]
(assert (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>))
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (as optNone<Option<Int>>  Option<Int>)))))
(pop) ; 11
(push) ; 11
; [else-branch: 351 | upperBound_V0@467@01 == optNone[Option[Int]]]
(assert (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))
  (and
    (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))
    (or
      (=
        (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (as optNone<Option<Int>>  Option<Int>))
      (not
        (=
          (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
          (as optNone<Option<Int>>  Option<Int>)))))))
; Joined path conditions
(push) ; 10
(assert (not (=>
  (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))
  (and
    (<=
      (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      (optGet<Int> upperBound_V0@467@01))
    (not
      (=
        (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (as optNone<Option<Int>>  Option<Int>)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))
  (and
    (<=
      (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      (optGet<Int> upperBound_V0@467@01))
    (not
      (=
        (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (as optNone<Option<Int>>  Option<Int>))))))
(declare-const $t@560@01 $Snap)
(assert (= $t@560@01 ($Snap.combine ($Snap.first $t@560@01) ($Snap.second $t@560@01))))
(assert (=
  ($Snap.second $t@560@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@560@01))
    ($Snap.second ($Snap.second $t@560@01)))))
(assert (= ($Snap.first ($Snap.second $t@560@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(push) ; 10
(declare-const $k@561@01 $Perm)
(assert ($Perm.isReadVar $k@561@01))
(assert (< $k@561@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@561@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@561@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@560@01) res_V0_CN4@558@01 lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@561@01))
(assert (and
  (< $k@561@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@561@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@560@01) res_V0_CN4@558@01 lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@560@01) res_V0_CN4@558@01 lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(assert (=
  ($Snap.second ($Snap.second $t@560@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@560@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@560@01))) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@562@01 $Perm)
(assert ($Perm.isReadVar $k@562@01))
(assert (< $k@562@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@562@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@562@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@560@01) res_V0_CN4@558@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@562@01))
(assert (and
  (< $k@562@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@562@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@560@01) res_V0_CN4@558@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@560@01) res_V0_CN4@558@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@560@01))) $Snap.unit))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0) == sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@563@01 $Perm)
(assert ($Perm.isReadVar $k@563@01))
(assert (< $k@563@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@563@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@563@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@564@01 $Perm)
(assert ($Perm.isReadVar $k@564@01))
(assert (< $k@564@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@564@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@564@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@564@01))
(assert (and (< $k@564@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@564@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@560@01)
  $Snap.unit) res_V0_CN4@558@01 lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@563@01))
(assert ($Perm.isReadVar $k@564@01))
(assert (and
  (< $k@563@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@563@01))
  (< $k@564@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@564@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@560@01)
    $Snap.unit) res_V0_CN4@558@01 lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@565@01 $Perm)
(assert ($Perm.isReadVar $k@565@01))
(assert (< $k@565@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@565@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@565@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@566@01 $Perm)
(assert ($Perm.isReadVar $k@566@01))
(assert (< $k@566@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@566@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@566@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@566@01))
(assert (and (< $k@566@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@566@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@560@01)
  $Snap.unit) res_V0_CN4@558@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@565@01))
(assert ($Perm.isReadVar $k@566@01))
(assert (and
  (< $k@565@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@565@01))
  (< $k@566@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@566@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@560@01)
    $Snap.unit) res_V0_CN4@558@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(assert (Seq_equal
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first $t@560@01)
    $Snap.unit) res_V0_CN4@558@01 lowerBound_V0@466@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first $t@560@01)
    $Snap.unit) res_V0_CN4@558@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res_V0_CN4 := res_V0_CN4
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN4
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  res_V0_CN4@558@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (=
    res_V0_CN4@558@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 353 | res_V0_CN4@558@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 353 | res_V0_CN4@558@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 353 | res_V0_CN4@558@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    res_V0_CN4@558@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] sorted_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 11
(declare-const $k@567@01 $Perm)
(assert ($Perm.isReadVar $k@567@01))
(assert (< $k@567@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@567@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@567@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@567@01))
(assert (and (< $k@567@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@567@01))))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  res_V0_CN4@558@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 354 | res_V0_CN4@558@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 354 | res_V0_CN4@558@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 354 | res_V0_CN4@558@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 13
(declare-const $k@568@01 $Perm)
(assert ($Perm.isReadVar $k@568@01))
(assert (< $k@568@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@568@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@568@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 14
(declare-const $k@569@01 $Perm)
(assert ($Perm.isReadVar $k@569@01))
(assert (< $k@569@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@569@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@569@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@569@01))
(assert (and (< $k@569@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@569@01))))
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@568@01))
(assert ($Perm.isReadVar $k@569@01))
(assert (and
  (< $k@568@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@568@01))
  (< $k@569@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@569@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@568@01))
(assert ($Perm.isReadVar $k@569@01))
(assert (=>
  (not
    (=
      res_V0_CN4@558@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@568@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@568@01))
    (< $k@569@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@569@01)))))
(set-option :timeout 0)
(push) ; 11
(assert (not (=>
  (not
    (=
      res_V0_CN4@558@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first $t@560@01)
        $Snap.unit) res_V0_CN4@558@01 lowerBound_V0@466@01 upperBound_V0@467@01)
      value_V0@465@01)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      res_V0_CN4@558@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first $t@560@01)
        $Snap.unit) res_V0_CN4@558@01 lowerBound_V0@466@01 upperBound_V0@467@01)
      value_V0@465@01))))
(pop) ; 10
(pop) ; 9
; [eval] !!((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 355 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 355 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 355 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 341 | value_V0@465@01 != First:(First:(Second:(Second:($t@469@01))))]
(assert (not
  (=
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 7
; [eval] !(value_V0_CN1 == (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$)
; [eval] value_V0_CN1 == (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 356 | value_V0@465@01 != First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 356 | value_V0@465@01 == First:(First:(Second:(Second:($t@469@01)))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 356 | value_V0@465@01 != First:(First:(Second:(Second:($t@469@01))))]
(assert (not
  (=
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
; [exec]
; res_V0_CN4 := res_V0_CN4
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN4
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
; [then-branch: 357 | res_V0_CN4@475@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 357 | res_V0_CN4@475@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 8
; [else-branch: 357 | res_V0_CN4@475@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
; [then-branch: 358 | res_V0_CN4@475@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 358 | res_V0_CN4@475@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 10
; [else-branch: 358 | res_V0_CN4@475@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 356 | value_V0@465@01 == First:(First:(Second:(Second:($t@469@01))))]
(assert (=
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 336 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))]
(assert (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (<
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 247 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
  $Snap.unit))
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 359 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 359 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 359 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget2of3(n_V0): Ref)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMnode%trigger ($Snap.first ($Snap.second ($Snap.second $t@469@01))) n_V0@464@01))
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 360 | value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 360 | !(value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))) | live]
(push) ; 6
; [then-branch: 360 | value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))]
(assert (<
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 360 | !(value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (<
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
  (<
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 361 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))) | dead]
; [else-branch: 361 | !(First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 361 | !(First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(pop) ; 5
; [eval] !(value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()))
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 5
; [then-branch: 362 | value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 362 | !(value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))) | live]
(push) ; 6
; [then-branch: 362 | value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))]
(assert (<
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 362 | !(value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (<
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (<
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 363 | !(First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))) | live]
; [else-branch: 363 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 363 | !(First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 6
; [then-branch: 364 | value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 364 | !(value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))) | live]
(push) ; 7
; [then-branch: 364 | value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))]
(assert (>
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 364 | !(value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (>
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
  (>
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (>
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 365 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 365 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 365 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))]
(assert (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (>
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
; [exec]
; var N10: ShStruct3[Ref, Ref, Ref]
(declare-const N10@570@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; N10 := delete_4b5075e4_PMnode((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   value_V0_CN1, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]),
;   upperBound_V0_CN3)
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < value_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 366 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]] | live]
; [else-branch: 366 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) == optNone[Option[Int]] | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 366 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]]]
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(lowerBound_V0): Int) < value_V0
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>))))
(push) ; 7
(assert (not (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (as optNone<Option<Int>>  Option<Int>)))
  (<
    (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
    value_V0@465@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (as optNone<Option<Int>>  Option<Int>)))
  (<
    (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
    value_V0@465@01)))
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > value_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 367 | upperBound_V0@467@01 != optNone[Option[Int]] | live]
; [else-branch: 367 | upperBound_V0@467@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 367 | upperBound_V0@467@01 != optNone[Option[Int]]]
(assert (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(upperBound_V0): Int) > value_V0
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 8
(push) ; 8
; [else-branch: 367 | upperBound_V0@467@01 == optNone[Option[Int]]]
(assert (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 7
(declare-const $k@571@01 $Perm)
(assert ($Perm.isReadVar $k@571@01))
(assert (< $k@571@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@571@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@571@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@571@01))
(assert (and
  (< $k@571@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@571@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01)))
(set-option :timeout 0)
(push) ; 7
(assert (not (sorted_4b5075e4_PMnode ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01))
(declare-const res_V0@572@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const $t@573@01 $Snap)
(assert (= $t@573@01 ($Snap.combine ($Snap.first $t@573@01) ($Snap.second $t@573@01))))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  res_V0@572@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    res_V0@572@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 368 | res_V0@572@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 368 | res_V0@572@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 368 | res_V0@572@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    res_V0@572@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(assert (=
  ($Snap.first $t@573@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@573@01))
    ($Snap.second ($Snap.first $t@573@01)))))
(assert (= ($Snap.second ($Snap.first $t@573@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 8
(declare-const $k@574@01 $Perm)
(assert ($Perm.isReadVar $k@574@01))
(assert (< $k@574@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@574@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@574@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.first $t@573@01)) res_V0@572@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@574@01))
(assert (and
  (< $k@574@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@574@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.first $t@573@01)) res_V0@572@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.first $t@573@01)) res_V0@572@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01))
(assert (= ($Snap.second $t@573@01) $Snap.unit))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  res_V0@572@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 369 | res_V0@572@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 369 | res_V0@572@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 369 | res_V0@572@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@575@01 $Perm)
(assert ($Perm.isReadVar $k@575@01))
(assert (< $k@575@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@575@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@575@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@576@01 $Perm)
(assert ($Perm.isReadVar $k@576@01))
(assert (< $k@576@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@576@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@576@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@576@01))
(assert (and (< $k@576@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@576@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@573@01))
  $Snap.unit) res_V0@572@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@575@01))
(assert ($Perm.isReadVar $k@576@01))
(assert (and
  (< $k@575@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@575@01))
  (< $k@576@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@576@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@573@01))
    $Snap.unit) res_V0@572@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@575@01))
(assert ($Perm.isReadVar $k@576@01))
(assert (=>
  (not
    (=
      res_V0@572@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@575@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@575@01))
    (< $k@576@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@576@01))
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.first ($Snap.first $t@573@01))
      $Snap.unit) res_V0@572@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01))))
(assert (=>
  (not
    (=
      res_V0@572@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.first $t@573@01))
        $Snap.unit) res_V0@572@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01)
      value_V0@465@01))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ := N10
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> n_V0@464@01) (ShStructget2of3<Ref> n_V0@464@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
; [then-branch: 370 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 370 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 8
; [else-branch: 370 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  res_V0@572@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 371 | res_V0@572@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 371 | res_V0@572@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 371 | res_V0@572@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget2of3(n_V0): Ref)
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@572@01)
      ($Snap.combine $Snap.unit ($Snap.first ($Snap.first $t@573@01)))))) n_V0@464@01))
; [exec]
; res_V0_CN4 := n_V0_CN0
; [exec]
; res_V0_CN4 := res_V0_CN4
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN4
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  n_V0@464@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (=
    n_V0@464@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 372 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 372 | n_V0@464@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 372 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    n_V0@464@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] sorted_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 11
(declare-const $k@577@01 $Perm)
(assert ($Perm.isReadVar $k@577@01))
(assert (< $k@577@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@577@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@577@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@572@01)
      ($Snap.combine $Snap.unit ($Snap.first ($Snap.first $t@573@01)))))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@577@01))
(assert (and
  (< $k@577@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@577@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@572@01)
        ($Snap.combine $Snap.unit ($Snap.first ($Snap.first $t@573@01)))))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(set-option :timeout 0)
(push) ; 11
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@572@01)
      ($Snap.combine $Snap.unit ($Snap.first ($Snap.first $t@573@01)))))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@572@01)
      ($Snap.combine $Snap.unit ($Snap.first ($Snap.first $t@573@01)))))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  n_V0@464@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 373 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 373 | n_V0@464@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 373 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 13
(declare-const $k@578@01 $Perm)
(assert ($Perm.isReadVar $k@578@01))
(assert (< $k@578@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@578@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@578@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 14
(declare-const $k@579@01 $Perm)
(assert ($Perm.isReadVar $k@579@01))
(assert (< $k@579@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@579@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@579@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@579@01))
(assert (and (< $k@579@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@579@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@572@01)
        ($Snap.combine $Snap.unit ($Snap.first ($Snap.first $t@573@01))))))
  $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@578@01))
(assert ($Perm.isReadVar $k@579@01))
(assert (and
  (< $k@578@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@578@01))
  (< $k@579@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@579@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@572@01)
          ($Snap.combine $Snap.unit ($Snap.first ($Snap.first $t@573@01))))))
    $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@578@01))
(assert ($Perm.isReadVar $k@579@01))
(assert (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@578@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@578@01))
    (< $k@579@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@579@01))
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@572@01)
            ($Snap.combine $Snap.unit ($Snap.first ($Snap.first $t@573@01))))))
      $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))))
(set-option :timeout 0)
(push) ; 11
(assert (not (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
            ($Snap.combine
              ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@572@01)
              ($Snap.combine $Snap.unit ($Snap.first ($Snap.first $t@573@01))))))
        $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)
      value_V0@465@01)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
            ($Snap.combine
              ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@572@01)
              ($Snap.combine $Snap.unit ($Snap.first ($Snap.first $t@573@01))))))
        $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)
      value_V0@465@01))))
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 368 | res_V0@572@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  res_V0@572@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (= ($Snap.first $t@573@01) $Snap.unit))
(assert (= ($Snap.second $t@573@01) $Snap.unit))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 374 | res_V0@572@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 374 | res_V0@572@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 9
; [else-branch: 374 | res_V0@572@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ := N10
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> n_V0@464@01) (ShStructget2of3<Ref> n_V0@464@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
; [then-branch: 375 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 375 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 8
; [else-branch: 375 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
; [then-branch: 376 | res_V0@572@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 376 | res_V0@572@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 9
; [else-branch: 376 | res_V0@572@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@572@01)
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@464@01))
; [exec]
; res_V0_CN4 := n_V0_CN0
; [exec]
; res_V0_CN4 := res_V0_CN4
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN4
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  n_V0@464@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (=
    n_V0@464@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 377 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 377 | n_V0@464@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 377 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    n_V0@464@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] sorted_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 11
(declare-const $k@580@01 $Perm)
(assert ($Perm.isReadVar $k@580@01))
(assert (< $k@580@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@580@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@580@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@572@01)
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@580@01))
(assert (and
  (< $k@580@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@580@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@572@01)
        ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(set-option :timeout 0)
(push) ; 11
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@572@01)
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@572@01)
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  n_V0@464@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 378 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 378 | n_V0@464@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 378 | n_V0@464@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 13
(declare-const $k@581@01 $Perm)
(assert ($Perm.isReadVar $k@581@01))
(assert (< $k@581@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@581@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@581@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 14
(declare-const $k@582@01 $Perm)
(assert ($Perm.isReadVar $k@582@01))
(assert (< $k@582@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@582@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@582@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@582@01))
(assert (and (< $k@582@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@582@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@572@01)
        ($Snap.combine $Snap.unit $Snap.unit))))
  $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@581@01))
(assert ($Perm.isReadVar $k@582@01))
(assert (and
  (< $k@581@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@581@01))
  (< $k@582@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@582@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@572@01)
          ($Snap.combine $Snap.unit $Snap.unit))))
    $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@581@01))
(assert ($Perm.isReadVar $k@582@01))
(assert (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@581@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@581@01))
    (< $k@582@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@582@01))
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@572@01)
            ($Snap.combine $Snap.unit $Snap.unit))))
      $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01))))
(set-option :timeout 0)
(push) ; 11
(assert (not (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
            ($Snap.combine
              ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@572@01)
              ($Snap.combine $Snap.unit $Snap.unit))))
        $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)
      value_V0@465@01)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      n_V0@464@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))
            ($Snap.combine
              ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap res_V0@572@01)
              ($Snap.combine $Snap.unit $Snap.unit))))
        $Snap.unit) n_V0@464@01 lowerBound_V0@466@01 upperBound_V0@467@01)
      value_V0@465@01))))
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 365 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(pop) ; 6
; [eval] !(value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()))
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 6
; [then-branch: 379 | value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 379 | !(value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))) | live]
(push) ; 7
; [then-branch: 379 | value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))]
(assert (>
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 379 | !(value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (>
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (>
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 380 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))) | live]
; [else-branch: 380 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 380 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
; [eval] value_V0_CN1 == (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 381 | value_V0@465@01 == First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 381 | value_V0@465@01 != First:(First:(Second:(Second:($t@469@01)))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 381 | value_V0@465@01 == First:(First:(Second:(Second:($t@469@01))))]
(assert (=
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 382 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 382 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 9
; [then-branch: 382 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 382 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 383 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 383 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 383 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(pop) ; 8
; [eval] !(!((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 384 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 384 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 9
; [then-branch: 384 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 384 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 385 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)) | live]
; [else-branch: 385 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 385 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
; [then-branch: 386 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 386 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 9
; [else-branch: 386 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 9
; [eval] !!((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 387 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 387 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 387 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 388 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 388 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 388 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [exec]
; res_V0_CN4 := (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
(declare-const res_V0_CN4@583@01 ShStruct3<Ref~_Ref~_Ref>)
(assert (=
  res_V0_CN4@583@01
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
; [exec]
; convert_4b5075e4_PMnode(res_V0_CN4, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]),
;   upperBound_V0_CN3, lowerBound_V0_CN2, upperBound_V0_CN3)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
  res_V0_CN4@583@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@584@01 $Perm)
(assert ($Perm.isReadVar $k@584@01))
(push) ; 12
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
  res_V0_CN4@583@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (< $k@584@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@584@01)))
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@584@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) res_V0_CN4@583@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@584@01))
(assert (and
  (< $k@584@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@584@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) res_V0_CN4@583@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01)))
(set-option :timeout 0)
(push) ; 11
(assert (not (sorted_4b5075e4_PMnode ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) res_V0_CN4@583@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))) res_V0_CN4@583@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01))
; [eval] oldLowerBound_V0 == (optNone(): Option[Int]) ==> newLowerBound_V0 == (optNone(): Option[Int])
; [eval] oldLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 389 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) == optNone[Option[Int]] | dead]
; [else-branch: 389 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 389 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]]]
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>))))
; [eval] oldUpperBound_V0 == (optNone(): Option[Int]) ==> newUpperBound_V0 == (optNone(): Option[Int])
; [eval] oldUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 390 | upperBound_V0@467@01 == optNone[Option[Int]] | live]
; [else-branch: 390 | upperBound_V0@467@01 != optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 390 | upperBound_V0@467@01 == optNone[Option[Int]]]
(assert (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))
; [eval] newUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(pop) ; 12
(push) ; 12
; [else-branch: 390 | upperBound_V0@467@01 != optNone[Option[Int]]]
(assert (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))
  (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] !(newLowerBound_V0 == (optNone(): Option[Int])) ==> !(oldLowerBound_V0 == (optNone(): Option[Int])) && (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] !(newLowerBound_V0 == (optNone(): Option[Int]))
; [eval] newLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 391 | lowerBound_V0@466@01 != optNone[Option[Int]] | live]
; [else-branch: 391 | lowerBound_V0@466@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 391 | lowerBound_V0@466@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] !(oldLowerBound_V0 == (optNone(): Option[Int])) && (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] !(oldLowerBound_V0 == (optNone(): Option[Int]))
; [eval] oldLowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 13
; [then-branch: 392 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]] | live]
; [else-branch: 392 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) == optNone[Option[Int]] | live]
(push) ; 14
; [then-branch: 392 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) != optNone[Option[Int]]]
; [eval] (optGet(oldLowerBound_V0): Int) >= (optGet(newLowerBound_V0): Int)
; [eval] (optGet(oldLowerBound_V0): Int)
; [eval] (optGet(newLowerBound_V0): Int)
(pop) ; 14
(push) ; 14
; [else-branch: 392 | optSome[Option[Int]](First:(First:(Second:(Second:($t@469@01))))) == optNone[Option[Int]]]
(assert (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
  (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (as optNone<Option<Int>>  Option<Int>))
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (as optNone<Option<Int>>  Option<Int>)))))
(pop) ; 12
(push) ; 12
; [else-branch: 391 | lowerBound_V0@466@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))
  (and
    (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))
    (or
      (=
        (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (as optNone<Option<Int>>  Option<Int>))
      (not
        (=
          (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
          (as optNone<Option<Int>>  Option<Int>)))))))
; Joined path conditions
(push) ; 11
(assert (not (=>
  (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))
  (and
    (>=
      (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      (optGet<Int> lowerBound_V0@466@01))
    (not
      (=
        (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (as optNone<Option<Int>>  Option<Int>)))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= lowerBound_V0@466@01 (as optNone<Option<Int>>  Option<Int>)))
  (and
    (>=
      (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      (optGet<Int> lowerBound_V0@466@01))
    (not
      (=
        (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (as optNone<Option<Int>>  Option<Int>))))))
; [eval] !(newUpperBound_V0 == (optNone(): Option[Int])) ==> !(oldUpperBound_V0 == (optNone(): Option[Int])) && (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] !(newUpperBound_V0 == (optNone(): Option[Int]))
; [eval] newUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 393 | upperBound_V0@467@01 != optNone[Option[Int]] | live]
; [else-branch: 393 | upperBound_V0@467@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 393 | upperBound_V0@467@01 != optNone[Option[Int]]]
(assert (not (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] !(oldUpperBound_V0 == (optNone(): Option[Int])) && (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] !(oldUpperBound_V0 == (optNone(): Option[Int]))
; [eval] oldUpperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 13
; [then-branch: 394 | upperBound_V0@467@01 != optNone[Option[Int]] | live]
; [else-branch: 394 | upperBound_V0@467@01 == optNone[Option[Int]] | live]
(push) ; 14
; [then-branch: 394 | upperBound_V0@467@01 != optNone[Option[Int]]]
; [eval] (optGet(oldUpperBound_V0): Int) <= (optGet(newUpperBound_V0): Int)
; [eval] (optGet(oldUpperBound_V0): Int)
; [eval] (optGet(newUpperBound_V0): Int)
(pop) ; 14
(push) ; 14
; [else-branch: 394 | upperBound_V0@467@01 == optNone[Option[Int]]]
(assert (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 393 | upperBound_V0@467@01 == optNone[Option[Int]]]
(assert (= upperBound_V0@467@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(declare-const $t@585@01 $Snap)
(assert (= $t@585@01 ($Snap.combine ($Snap.first $t@585@01) ($Snap.second $t@585@01))))
(assert (=
  ($Snap.second $t@585@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@585@01))
    ($Snap.second ($Snap.second $t@585@01)))))
(assert (= ($Snap.first ($Snap.second $t@585@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(push) ; 11
(declare-const $k@586@01 $Perm)
(assert ($Perm.isReadVar $k@586@01))
(assert (< $k@586@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@586@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@586@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@585@01) res_V0_CN4@583@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@586@01))
(assert (and
  (< $k@586@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@586@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@585@01) res_V0_CN4@583@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@585@01) res_V0_CN4@583@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01))
(assert (=
  ($Snap.second ($Snap.second $t@585@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@585@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@585@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@585@01))) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@587@01 $Perm)
(assert ($Perm.isReadVar $k@587@01))
(assert (< $k@587@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@587@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@587@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@585@01) res_V0_CN4@583@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@587@01))
(assert (and
  (< $k@587@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@587@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@585@01) res_V0_CN4@583@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@585@01) res_V0_CN4@583@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@585@01))) $Snap.unit))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0) == sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
; [eval] sortedValues_4b5075e4_PMnode(n_V0, oldLowerBound_V0, oldUpperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@588@01 $Perm)
(assert ($Perm.isReadVar $k@588@01))
(assert (< $k@588@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@588@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@588@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@589@01 $Perm)
(assert ($Perm.isReadVar $k@589@01))
(assert (< $k@589@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@589@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@589@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@589@01))
(assert (and (< $k@589@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@589@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@585@01)
  $Snap.unit) res_V0_CN4@583@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@588@01))
(assert ($Perm.isReadVar $k@589@01))
(assert (and
  (< $k@588@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@588@01))
  (< $k@589@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@589@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@585@01)
    $Snap.unit) res_V0_CN4@583@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01)))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, newLowerBound_V0, newUpperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@590@01 $Perm)
(assert ($Perm.isReadVar $k@590@01))
(assert (< $k@590@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@590@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@590@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@591@01 $Perm)
(assert ($Perm.isReadVar $k@591@01))
(assert (< $k@591@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@591@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@591@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@591@01))
(assert (and (< $k@591@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@591@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@585@01)
  $Snap.unit) res_V0_CN4@583@01 lowerBound_V0@466@01 upperBound_V0@467@01))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@590@01))
(assert ($Perm.isReadVar $k@591@01))
(assert (and
  (< $k@590@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@590@01))
  (< $k@591@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@591@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@585@01)
    $Snap.unit) res_V0_CN4@583@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
(assert (Seq_equal
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first $t@585@01)
    $Snap.unit) res_V0_CN4@583@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))) upperBound_V0@467@01)
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first $t@585@01)
    $Snap.unit) res_V0_CN4@583@01 lowerBound_V0@466@01 upperBound_V0@467@01)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res_V0_CN4 := res_V0_CN4
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN4
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  res_V0_CN4@583@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    res_V0_CN4@583@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 395 | res_V0_CN4@583@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 395 | res_V0_CN4@583@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 395 | res_V0_CN4@583@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    res_V0_CN4@583@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] sorted_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 12
(declare-const $k@592@01 $Perm)
(assert ($Perm.isReadVar $k@592@01))
(assert (< $k@592@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@592@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@592@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@592@01))
(assert (and (< $k@592@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@592@01))))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (=
  res_V0_CN4@583@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 396 | res_V0_CN4@583@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 396 | res_V0_CN4@583@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 396 | res_V0_CN4@583@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)
(push) ; 14
(declare-const $k@593@01 $Perm)
(assert ($Perm.isReadVar $k@593@01))
(assert (< $k@593@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@593@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@593@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 15
(declare-const $k@594@01 $Perm)
(assert ($Perm.isReadVar $k@594@01))
(assert (< $k@594@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@594@01)))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@594@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@594@01))
(assert (and (< $k@594@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@594@01))))
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@593@01))
(assert ($Perm.isReadVar $k@594@01))
(assert (and
  (< $k@593@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@593@01))
  (< $k@594@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@594@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@593@01))
(assert ($Perm.isReadVar $k@594@01))
(assert (=>
  (not
    (=
      res_V0_CN4@583@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (and
    (< $k@593@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@593@01))
    (< $k@594@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@594@01)))))
(set-option :timeout 0)
(push) ; 12
(assert (not (=>
  (not
    (=
      res_V0_CN4@583@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first $t@585@01)
        $Snap.unit) res_V0_CN4@583@01 lowerBound_V0@466@01 upperBound_V0@467@01)
      value_V0@465@01)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      res_V0_CN4@583@01
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first $t@585@01)
        $Snap.unit) res_V0_CN4@583@01 lowerBound_V0@466@01 upperBound_V0@467@01)
      value_V0@465@01))))
(pop) ; 11
(pop) ; 10
; [eval] !!((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 397 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 397 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 397 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 381 | value_V0@465@01 != First:(First:(Second:(Second:($t@469@01))))]
(assert (not
  (=
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 7
; [eval] !(value_V0_CN1 == (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$)
; [eval] value_V0_CN1 == (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 398 | value_V0@465@01 != First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 398 | value_V0@465@01 == First:(First:(Second:(Second:($t@469@01)))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 398 | value_V0@465@01 != First:(First:(Second:(Second:($t@469@01))))]
(assert (not
  (=
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
; [exec]
; res_V0_CN4 := res_V0_CN4
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN4
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
; [then-branch: 399 | res_V0_CN4@475@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 399 | res_V0_CN4@475@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 8
; [else-branch: 399 | res_V0_CN4@475@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
; [then-branch: 400 | res_V0_CN4@475@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 400 | res_V0_CN4@475@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 10
; [else-branch: 400 | res_V0_CN4@475@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 398 | value_V0@465@01 == First:(First:(Second:(Second:($t@469@01))))]
(assert (=
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 380 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))]
(assert (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (>
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 359 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
  $Snap.unit))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMnode%trigger ($Snap.first ($Snap.second ($Snap.second $t@469@01))) n_V0@464@01))
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 401 | value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 401 | !(value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))) | live]
(push) ; 6
; [then-branch: 401 | value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))]
(assert (<
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 401 | !(value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (<
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
  (<
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 402 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))) | dead]
; [else-branch: 402 | !(First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 402 | !(First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(pop) ; 5
; [eval] !(value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()))
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 5
; [then-branch: 403 | value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 403 | !(value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))) | live]
(push) ; 6
; [then-branch: 403 | value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))]
(assert (<
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 403 | !(value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (<
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (<
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 404 | !(First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01))))) | live]
; [else-branch: 404 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 404 | !(First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 < First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (<
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 6
; [then-branch: 405 | value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 405 | !(value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))) | live]
(push) ; 7
; [then-branch: 405 | value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))]
(assert (>
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 405 | !(value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (>
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
  (>
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 406 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))) | dead]
; [else-branch: 406 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 406 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(pop) ; 6
; [eval] !(value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()))
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$ && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 6
; [then-branch: 407 | value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 407 | !(value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))) | live]
(push) ; 7
; [then-branch: 407 | value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))]
(assert (>
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 407 | !(value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (>
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (>
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 408 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01))))) | live]
; [else-branch: 408 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 408 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && value_V0@465@01 > First:(First:(Second:(Second:($t@469@01)))))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (>
      value_V0@465@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
; [eval] value_V0_CN1 == (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 409 | value_V0@465@01 == First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 409 | value_V0@465@01 != First:(First:(Second:(Second:($t@469@01)))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 409 | value_V0@465@01 == First:(First:(Second:(Second:($t@469@01))))]
(assert (=
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 410 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 410 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 9
; [then-branch: 410 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 410 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 411 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 411 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 411 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(pop) ; 8
; [eval] !(!((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) && !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
; [then-branch: 412 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 412 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 9
; [then-branch: 412 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 412 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
      (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 413 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)) | live]
; [else-branch: 413 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 413 | !(First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) && First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))]
(assert (not
  (and
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
    (not
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
        (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
; [then-branch: 414 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 414 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 9
; [else-branch: 414 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 9
; [eval] !!((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 415 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 415 | First:(Second:(First:(Second:(Second:($t@469@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 415 | First:(Second:(First:(Second:(Second:($t@469@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
; [then-branch: 416 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 416 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 10
; [else-branch: 416 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 10
; [eval] !!((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 417 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 417 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 417 | First:(Second:(Second:(First:(Second:(Second:($t@469@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; res_V0_CN4 := shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(declare-const res_V0_CN4@595@01 ShStruct3<Ref~_Ref~_Ref>)
(assert (=
  res_V0_CN4@595@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; [exec]
; res_V0_CN4 := res_V0_CN4
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN4
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 11
(pop) ; 11
; Joined path conditions
; [then-branch: 418 | res_V0_CN4@595@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 418 | res_V0_CN4@595@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 11
; [else-branch: 418 | res_V0_CN4@595@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 12
(pop) ; 12
; Joined path conditions
(push) ; 12
; [then-branch: 419 | res_V0_CN4@595@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 419 | res_V0_CN4@595@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 13
; [else-branch: 419 | res_V0_CN4@595@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 409 | value_V0@465@01 != First:(First:(Second:(Second:($t@469@01))))]
(assert (not
  (=
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(pop) ; 7
; [eval] !(value_V0_CN1 == (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$)
; [eval] value_V0_CN1 == (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 420 | value_V0@465@01 != First:(First:(Second:(Second:($t@469@01)))) | live]
; [else-branch: 420 | value_V0@465@01 == First:(First:(Second:(Second:($t@469@01)))) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 420 | value_V0@465@01 != First:(First:(Second:(Second:($t@469@01))))]
(assert (not
  (=
    value_V0@465@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01))))))))
; [exec]
; res_V0_CN4 := res_V0_CN4
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN4
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
; [then-branch: 421 | res_V0_CN4@475@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 421 | res_V0_CN4@475@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 8
; [else-branch: 421 | res_V0_CN4@475@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()) ==> !((value_V0 in sortedValues_4b5075e4_PMnode(res_V0, lowerBound_V0, upperBound_V0)))
; [eval] !(res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] res_V0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
; [then-branch: 422 | res_V0_CN4@475@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 422 | res_V0_CN4@475@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 10
; [else-branch: 422 | res_V0_CN4@475@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 420 | value_V0@465@01 == First:(First:(Second:(Second:($t@469@01))))]
(assert (=
  value_V0@465@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@469@01)))))))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- getMinimum_4b5075e4_PMnode ----------
(declare-const n_V0@596@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const lowerBound_V0@597@01 Option<Int>)
(declare-const upperBound_V0@598@01 Option<Int>)
(declare-const res_V0@599@01 Int)
(declare-const n_V0@600@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const lowerBound_V0@601@01 Option<Int>)
(declare-const upperBound_V0@602@01 Option<Int>)
(declare-const res_V0@603@01 Int)
(push) ; 1
(declare-const $t@604@01 $Snap)
(assert (= $t@604@01 ($Snap.combine ($Snap.first $t@604@01) ($Snap.second $t@604@01))))
(assert (= ($Snap.second $t@604@01) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 2
(declare-const $k@605@01 $Perm)
(assert ($Perm.isReadVar $k@605@01))
(assert (< $k@605@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@605@01)))
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@605@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@604@01) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01))
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@605@01))
(assert (and
  (< $k@605@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@605@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@604@01) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@604@01) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@606@01 $Snap)
(assert (= $t@606@01 ($Snap.combine ($Snap.first $t@606@01) ($Snap.second $t@606@01))))
(assert (=
  ($Snap.second $t@606@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@606@01))
    ($Snap.second ($Snap.second $t@606@01)))))
(assert (= ($Snap.first ($Snap.second $t@606@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 3
(declare-const $k@607@01 $Perm)
(assert ($Perm.isReadVar $k@607@01))
(assert (< $k@607@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@607@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@607@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@606@01) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@607@01))
(assert (and
  (< $k@607@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@607@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@606@01) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@606@01) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01))
(assert (=
  ($Snap.second ($Snap.second $t@606@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@606@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@606@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@606@01))) $Snap.unit))
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> res_V0 > (optGet(lowerBound_V0): Int)
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 423 | lowerBound_V0@601@01 != optNone[Option[Int]] | live]
; [else-branch: 423 | lowerBound_V0@601@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 423 | lowerBound_V0@601@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] res_V0 > (optGet(lowerBound_V0): Int)
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 4
(push) ; 4
; [else-branch: 423 | lowerBound_V0@601@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))))
(assert (=>
  (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))
  (> res_V0@603@01 (optGet<Int> lowerBound_V0@601@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@606@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@606@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@606@01))))
  $Snap.unit))
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> res_V0 < (optGet(upperBound_V0): Int)
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 424 | upperBound_V0@602@01 != optNone[Option[Int]] | live]
; [else-branch: 424 | upperBound_V0@602@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 424 | upperBound_V0@602@01 != optNone[Option[Int]]]
(assert (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] res_V0 < (optGet(upperBound_V0): Int)
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 4
(push) ; 4
; [else-branch: 424 | upperBound_V0@602@01 == optNone[Option[Int]]]
(assert (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>)))))
(assert (=>
  (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>)))
  (< res_V0@603@01 (optGet<Int> upperBound_V0@602@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@606@01))))
  $Snap.unit))
; [eval] res_V0 == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)[0]
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)[0]
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 3
(declare-const $k@608@01 $Perm)
(assert ($Perm.isReadVar $k@608@01))
(assert (< $k@608@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@608@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@608@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@609@01 $Perm)
(assert ($Perm.isReadVar $k@609@01))
(assert (< $k@609@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@609@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@609@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@609@01))
(assert (and (< $k@609@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@609@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@606@01)
  $Snap.unit) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@608@01))
(assert ($Perm.isReadVar $k@609@01))
(assert (and
  (< $k@608@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@608@01))
  (< $k@609@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@609@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@606@01)
    $Snap.unit) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)))
(set-option :timeout 0)
(push) ; 3
(assert (not (<
  0
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@606@01)
      $Snap.unit) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  res_V0@603@01
  (Seq_index
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@606@01)
      $Snap.unit) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)
    0)))
(pop) ; 2
(push) ; 2
; [exec]
; var res_V0_CN3: Int
(declare-const res_V0_CN3@610@01 Int)
; [exec]
; var upperBound_V0_CN2: Option[Int]
(declare-const upperBound_V0_CN2@611@01 Option<Int>)
; [exec]
; var lowerBound_V0_CN1: Option[Int]
(declare-const lowerBound_V0_CN1@612@01 Option<Int>)
; [exec]
; var n_V0_CN0: ShStruct3[Ref, Ref, Ref]
(declare-const n_V0_CN0@613@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; inhale res_V0 == 0
(declare-const $t@614@01 $Snap)
(assert (= $t@614@01 $Snap.unit))
; [eval] res_V0 == 0
(assert (= res_V0@603@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale n_V0_CN0 ==
;   shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(declare-const $t@615@01 $Snap)
(assert (= $t@615@01 $Snap.unit))
; [eval] n_V0_CN0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(assert (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (=
  n_V0_CN0@613@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale lowerBound_V0_CN1 == (optNone(): Option[Int])
(declare-const $t@616@01 $Snap)
(assert (= $t@616@01 $Snap.unit))
; [eval] lowerBound_V0_CN1 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(assert (= lowerBound_V0_CN1@612@01 (as optNone<Option<Int>>  Option<Int>)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale upperBound_V0_CN2 == (optNone(): Option[Int])
(declare-const $t@617@01 $Snap)
(assert (= $t@617@01 $Snap.unit))
; [eval] upperBound_V0_CN2 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(assert (= upperBound_V0_CN2@611@01 (as optNone<Option<Int>>  Option<Int>)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale res_V0_CN3 == 0
(declare-const $t@618@01 $Snap)
(assert (= $t@618@01 $Snap.unit))
; [eval] res_V0_CN3 == 0
(assert (= res_V0_CN3@610@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; n_V0_CN0 := n_V0
; [exec]
; lowerBound_V0_CN1 := lowerBound_V0
; [exec]
; upperBound_V0_CN2 := upperBound_V0
; [exec]
; unfold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
(assert (=
  ($Snap.first $t@604@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@604@01))
    ($Snap.second ($Snap.first $t@604@01)))))
; [eval] (ShStructget0of3(n_V0): Ref)
(assert (not (= (ShStructget0of3<Ref> n_V0@600@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first $t@604@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
    ($Snap.second ($Snap.second ($Snap.first $t@604@01))))))
; [eval] (ShStructget1of3(n_V0): Ref)
(assert (not (= (ShStructget1of3<Ref> n_V0@600@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first $t@604@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))))
; [eval] (ShStructget2of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> n_V0@600@01) (ShStructget2of3<Ref> n_V0@600@01))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget2of3<Ref> n_V0@600@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01))))))))
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 425 | First:(Second:(First:($t@604@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 425 | First:(Second:(First:($t@604@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 425 | First:(Second:(First:($t@604@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 426 | First:(Second:(Second:(First:($t@604@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 426 | First:(Second:(Second:(First:($t@604@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 426 | First:(Second:(Second:(First:($t@604@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget2of3(n_V0): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01))))
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMnode%trigger ($Snap.first $t@604@01) n_V0@600@01))
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
; [then-branch: 427 | First:(Second:(First:($t@604@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 427 | First:(Second:(First:($t@604@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 5
; [else-branch: 427 | First:(Second:(First:($t@604@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 5
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 428 | First:(Second:(First:($t@604@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 428 | First:(Second:(First:($t@604@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 428 | First:(Second:(First:($t@604@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; var N7: Int
(declare-const N7@619@01 Int)
; [exec]
; N7 := getMinimum_4b5075e4_PMnode((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   lowerBound_V0_CN1, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]))
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 6
(declare-const $k@620@01 $Perm)
(assert ($Perm.isReadVar $k@620@01))
(assert (< $k@620@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@620@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@620@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01)))) lowerBound_V0@601@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01))))))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@620@01))
(assert (and
  (< $k@620@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@620@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01)))) lowerBound_V0@601@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01)))))))
(set-option :timeout 0)
(push) ; 6
(assert (not (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01)))) lowerBound_V0@601@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01)))) lowerBound_V0@601@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01))))))
(declare-const res_V0@621@01 Int)
(declare-const $t@622@01 $Snap)
(assert (= $t@622@01 ($Snap.combine ($Snap.first $t@622@01) ($Snap.second $t@622@01))))
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01)))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second $t@622@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@622@01))
    ($Snap.second ($Snap.second $t@622@01)))))
(assert (= ($Snap.first ($Snap.second $t@622@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@623@01 $Perm)
(assert ($Perm.isReadVar $k@623@01))
(assert (< $k@623@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@623@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@623@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@622@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01)))) lowerBound_V0@601@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01))))))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@623@01))
(assert (and
  (< $k@623@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@623@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@622@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01)))) lowerBound_V0@601@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01)))))))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@622@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01)))) lowerBound_V0@601@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01))))))
(assert (=
  ($Snap.second ($Snap.second $t@622@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@622@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@622@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@622@01))) $Snap.unit))
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> res_V0 > (optGet(lowerBound_V0): Int)
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 429 | lowerBound_V0@601@01 != optNone[Option[Int]] | live]
; [else-branch: 429 | lowerBound_V0@601@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 429 | lowerBound_V0@601@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] res_V0 > (optGet(lowerBound_V0): Int)
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 7
(push) ; 7
; [else-branch: 429 | lowerBound_V0@601@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))))
(assert (=>
  (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))
  (> res_V0@621@01 (optGet<Int> lowerBound_V0@601@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@622@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@622@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@622@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@622@01))))
  $Snap.unit))
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> res_V0 < (optGet(upperBound_V0): Int)
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01))))
  (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01))))
    (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 430 | optSome[Option[Int]](First:(First:($t@604@01))) != optNone[Option[Int]] | live]
; [else-branch: 430 | optSome[Option[Int]](First:(First:($t@604@01))) == optNone[Option[Int]] | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 430 | optSome[Option[Int]](First:(First:($t@604@01))) != optNone[Option[Int]]]
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01))))
    (as optNone<Option<Int>>  Option<Int>))))
; [eval] res_V0 < (optGet(upperBound_V0): Int)
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01))))
    (as optNone<Option<Int>>  Option<Int>))))
(assert (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01))))
      (as optNone<Option<Int>>  Option<Int>)))
  (<
    res_V0@621@01
    (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@622@01))))
  $Snap.unit))
; [eval] res_V0 == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)[0]
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)[0]
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 6
(declare-const $k@624@01 $Perm)
(assert ($Perm.isReadVar $k@624@01))
(assert (< $k@624@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@624@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@624@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@625@01 $Perm)
(assert ($Perm.isReadVar $k@625@01))
(assert (< $k@625@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@625@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@625@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@625@01))
(assert (and (< $k@625@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@625@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@622@01)
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01)))) lowerBound_V0@601@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01))))))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@624@01))
(assert ($Perm.isReadVar $k@625@01))
(assert (and
  (< $k@624@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@624@01))
  (< $k@625@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@625@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@622@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01)))) lowerBound_V0@601@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01)))))))
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  0
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@622@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01)))) lowerBound_V0@601@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(assert (=
  res_V0@621@01
  (Seq_index
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@622@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01)))) lowerBound_V0@601@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01)))))
    0)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res_V0_CN3 := N7
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 431 | First:(Second:(First:($t@604@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 431 | First:(Second:(First:($t@604@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 431 | First:(Second:(First:($t@604@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 432 | First:(Second:(Second:(First:($t@604@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 432 | First:(Second:(Second:(First:($t@604@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 432 | First:(Second:(Second:(First:($t@604@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget2of3(n_V0): Ref)
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first $t@604@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
      ($Snap.combine
        ($Snap.first $t@622@01)
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01))))))))) n_V0@600@01))
; [exec]
; res_V0_CN3 := res_V0_CN3
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN3
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 8
(declare-const $k@626@01 $Perm)
(assert ($Perm.isReadVar $k@626@01))
(assert (< $k@626@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@626@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@626@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@604@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
      ($Snap.combine
        ($Snap.first $t@622@01)
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01))))))))) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@626@01))
(assert (and
  (< $k@626@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@626@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@604@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
        ($Snap.combine
          ($Snap.first $t@622@01)
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01))))))))) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)))
(set-option :timeout 0)
(push) ; 8
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@604@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
      ($Snap.combine
        ($Snap.first $t@622@01)
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01))))))))) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@604@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
      ($Snap.combine
        ($Snap.first $t@622@01)
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01))))))))) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01))
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> res_V0 > (optGet(lowerBound_V0): Int)
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 433 | lowerBound_V0@601@01 != optNone[Option[Int]] | live]
; [else-branch: 433 | lowerBound_V0@601@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 433 | lowerBound_V0@601@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] res_V0 > (optGet(lowerBound_V0): Int)
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 9
(push) ; 9
; [else-branch: 433 | lowerBound_V0@601@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> res_V0 < (optGet(upperBound_V0): Int)
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 434 | upperBound_V0@602@01 != optNone[Option[Int]] | live]
; [else-branch: 434 | upperBound_V0@602@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 434 | upperBound_V0@602@01 != optNone[Option[Int]]]
(assert (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] res_V0 < (optGet(upperBound_V0): Int)
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 9
(push) ; 9
; [else-branch: 434 | upperBound_V0@602@01 == optNone[Option[Int]]]
(assert (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>)))))
(push) ; 8
(assert (not (=>
  (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>)))
  (< res_V0@621@01 (optGet<Int> upperBound_V0@602@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>)))
  (< res_V0@621@01 (optGet<Int> upperBound_V0@602@01))))
; [eval] res_V0 == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)[0]
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)[0]
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 8
(declare-const $k@627@01 $Perm)
(assert ($Perm.isReadVar $k@627@01))
(assert (< $k@627@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@627@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@627@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@628@01 $Perm)
(assert ($Perm.isReadVar $k@628@01))
(assert (< $k@628@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@628@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@628@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@628@01))
(assert (and (< $k@628@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@628@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first $t@604@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
        ($Snap.combine
          ($Snap.first $t@622@01)
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))))))
  $Snap.unit) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@627@01))
(assert ($Perm.isReadVar $k@628@01))
(assert (and
  (< $k@627@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@627@01))
  (< $k@628@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@628@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@604@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
          ($Snap.combine
            ($Snap.first $t@622@01)
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))))))
    $Snap.unit) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@604@01))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
            ($Snap.combine
              ($Snap.first $t@622@01)
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))))))
      $Snap.unit) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (=
  res_V0@621@01
  (Seq_index
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@604@01))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
            ($Snap.combine
              ($Snap.first $t@622@01)
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))))))
      $Snap.unit) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
(assert (=
  res_V0@621@01
  (Seq_index
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@604@01))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
            ($Snap.combine
              ($Snap.first $t@622@01)
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))))))
      $Snap.unit) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)
    0)))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 426 | First:(Second:(Second:(First:($t@604@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))
  $Snap.unit))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMnode%trigger ($Snap.first $t@604@01) n_V0@600@01))
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
; [then-branch: 435 | First:(Second:(First:($t@604@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 435 | First:(Second:(First:($t@604@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 5
; [else-branch: 435 | First:(Second:(First:($t@604@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 5
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 436 | First:(Second:(First:($t@604@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 436 | First:(Second:(First:($t@604@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 436 | First:(Second:(First:($t@604@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; var N7: Int
(declare-const N7@629@01 Int)
; [exec]
; N7 := getMinimum_4b5075e4_PMnode((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   lowerBound_V0_CN1, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]))
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 6
(declare-const $k@630@01 $Perm)
(assert ($Perm.isReadVar $k@630@01))
(assert (< $k@630@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@630@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@630@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01)))) lowerBound_V0@601@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01))))))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@630@01))
(assert (and
  (< $k@630@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@630@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01)))) lowerBound_V0@601@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01)))))))
(set-option :timeout 0)
(push) ; 6
(assert (not (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01)))) lowerBound_V0@601@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01)))) lowerBound_V0@601@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01))))))
(declare-const res_V0@631@01 Int)
(declare-const $t@632@01 $Snap)
(assert (= $t@632@01 ($Snap.combine ($Snap.first $t@632@01) ($Snap.second $t@632@01))))
(assert (=
  ($Snap.second $t@632@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@632@01))
    ($Snap.second ($Snap.second $t@632@01)))))
(assert (= ($Snap.first ($Snap.second $t@632@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 6
(declare-const $k@633@01 $Perm)
(assert ($Perm.isReadVar $k@633@01))
(assert (< $k@633@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@633@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@633@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@632@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01)))) lowerBound_V0@601@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01))))))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@633@01))
(assert (and
  (< $k@633@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@633@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@632@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01)))) lowerBound_V0@601@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01)))))))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@632@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01)))) lowerBound_V0@601@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01))))))
(assert (=
  ($Snap.second ($Snap.second $t@632@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@632@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@632@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@632@01))) $Snap.unit))
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> res_V0 > (optGet(lowerBound_V0): Int)
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(set-option :timeout 0)
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 437 | lowerBound_V0@601@01 != optNone[Option[Int]] | live]
; [else-branch: 437 | lowerBound_V0@601@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 437 | lowerBound_V0@601@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] res_V0 > (optGet(lowerBound_V0): Int)
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 7
(push) ; 7
; [else-branch: 437 | lowerBound_V0@601@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))))
(assert (=>
  (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))
  (> res_V0@631@01 (optGet<Int> lowerBound_V0@601@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@632@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@632@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@632@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@632@01))))
  $Snap.unit))
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> res_V0 < (optGet(upperBound_V0): Int)
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01))))
  (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01))))
    (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 438 | optSome[Option[Int]](First:(First:($t@604@01))) != optNone[Option[Int]] | live]
; [else-branch: 438 | optSome[Option[Int]](First:(First:($t@604@01))) == optNone[Option[Int]] | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 438 | optSome[Option[Int]](First:(First:($t@604@01))) != optNone[Option[Int]]]
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01))))
    (as optNone<Option<Int>>  Option<Int>))))
; [eval] res_V0 < (optGet(upperBound_V0): Int)
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01))))
    (as optNone<Option<Int>>  Option<Int>))))
(assert (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01))))
      (as optNone<Option<Int>>  Option<Int>)))
  (<
    res_V0@631@01
    (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@632@01))))
  $Snap.unit))
; [eval] res_V0 == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)[0]
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)[0]
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 6
(declare-const $k@634@01 $Perm)
(assert ($Perm.isReadVar $k@634@01))
(assert (< $k@634@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@634@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@634@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@635@01 $Perm)
(assert ($Perm.isReadVar $k@635@01))
(assert (< $k@635@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@635@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@635@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@635@01))
(assert (and (< $k@635@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@635@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@632@01)
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01)))) lowerBound_V0@601@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01))))))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@634@01))
(assert ($Perm.isReadVar $k@635@01))
(assert (and
  (< $k@634@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@634@01))
  (< $k@635@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@635@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@632@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01)))) lowerBound_V0@601@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01)))))))
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  0
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@632@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01)))) lowerBound_V0@601@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01)))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  res_V0@631@01
  (Seq_index
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@632@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01)))) lowerBound_V0@601@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01)))))
    0)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res_V0_CN3 := N7
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 439 | First:(Second:(First:($t@604@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 439 | First:(Second:(First:($t@604@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 439 | First:(Second:(First:($t@604@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
; [then-branch: 440 | First:(Second:(Second:(First:($t@604@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 440 | First:(Second:(Second:(First:($t@604@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 7
; [else-branch: 440 | First:(Second:(Second:(First:($t@604@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first $t@604@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
      ($Snap.combine ($Snap.first $t@632@01) $Snap.unit)))) n_V0@600@01))
; [exec]
; res_V0_CN3 := res_V0_CN3
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN3
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 8
(declare-const $k@636@01 $Perm)
(assert ($Perm.isReadVar $k@636@01))
(assert (< $k@636@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@636@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@636@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@604@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
      ($Snap.combine ($Snap.first $t@632@01) $Snap.unit)))) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@636@01))
(assert (and
  (< $k@636@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@636@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@604@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
        ($Snap.combine ($Snap.first $t@632@01) $Snap.unit)))) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)))
(set-option :timeout 0)
(push) ; 8
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@604@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
      ($Snap.combine ($Snap.first $t@632@01) $Snap.unit)))) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@604@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
      ($Snap.combine ($Snap.first $t@632@01) $Snap.unit)))) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01))
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> res_V0 > (optGet(lowerBound_V0): Int)
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 441 | lowerBound_V0@601@01 != optNone[Option[Int]] | live]
; [else-branch: 441 | lowerBound_V0@601@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 441 | lowerBound_V0@601@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] res_V0 > (optGet(lowerBound_V0): Int)
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 9
(push) ; 9
; [else-branch: 441 | lowerBound_V0@601@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> res_V0 < (optGet(upperBound_V0): Int)
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 442 | upperBound_V0@602@01 != optNone[Option[Int]] | live]
; [else-branch: 442 | upperBound_V0@602@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 442 | upperBound_V0@602@01 != optNone[Option[Int]]]
(assert (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] res_V0 < (optGet(upperBound_V0): Int)
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 9
(push) ; 9
; [else-branch: 442 | upperBound_V0@602@01 == optNone[Option[Int]]]
(assert (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>)))))
(push) ; 8
(assert (not (=>
  (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>)))
  (< res_V0@631@01 (optGet<Int> upperBound_V0@602@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>)))
  (< res_V0@631@01 (optGet<Int> upperBound_V0@602@01))))
; [eval] res_V0 == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)[0]
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)[0]
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 8
(declare-const $k@637@01 $Perm)
(assert ($Perm.isReadVar $k@637@01))
(assert (< $k@637@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@637@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@637@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@638@01 $Perm)
(assert ($Perm.isReadVar $k@638@01))
(assert (< $k@638@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@638@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@638@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@638@01))
(assert (and (< $k@638@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@638@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first $t@604@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
        ($Snap.combine ($Snap.first $t@632@01) $Snap.unit))))
  $Snap.unit) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@637@01))
(assert ($Perm.isReadVar $k@638@01))
(assert (and
  (< $k@637@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@637@01))
  (< $k@638@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@638@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@604@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
          ($Snap.combine ($Snap.first $t@632@01) $Snap.unit))))
    $Snap.unit) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@604@01))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
            ($Snap.combine ($Snap.first $t@632@01) $Snap.unit))))
      $Snap.unit) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (=
  res_V0@631@01
  (Seq_index
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@604@01))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
            ($Snap.combine ($Snap.first $t@632@01) $Snap.unit))))
      $Snap.unit) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  res_V0@631@01
  (Seq_index
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@604@01))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
            ($Snap.combine ($Snap.first $t@632@01) $Snap.unit))))
      $Snap.unit) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)
    0)))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 425 | First:(Second:(First:($t@604@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))
  $Snap.unit))
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 443 | First:(Second:(Second:(First:($t@604@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 443 | First:(Second:(Second:(First:($t@604@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 443 | First:(Second:(Second:(First:($t@604@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget2of3(n_V0): Ref)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMnode%trigger ($Snap.first $t@604@01) n_V0@600@01))
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 444 | First:(Second:(First:($t@604@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 444 | First:(Second:(First:($t@604@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 444 | First:(Second:(First:($t@604@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; res_V0_CN3 := (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(declare-const res_V0_CN3@639@01 Int)
(assert (=
  res_V0_CN3@639@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01)))))
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
; [then-branch: 445 | First:(Second:(First:($t@604@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 445 | First:(Second:(First:($t@604@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 6
; [else-branch: 445 | First:(Second:(First:($t@604@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 446 | First:(Second:(Second:(First:($t@604@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 446 | First:(Second:(Second:(First:($t@604@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 446 | First:(Second:(Second:(First:($t@604@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget2of3(n_V0): Ref)
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first $t@604@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01))))))))) n_V0@600@01))
; [exec]
; res_V0_CN3 := res_V0_CN3
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN3
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 8
(declare-const $k@640@01 $Perm)
(assert ($Perm.isReadVar $k@640@01))
(assert (< $k@640@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@640@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@640@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@604@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01))))))))) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@640@01))
(assert (and
  (< $k@640@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@640@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@604@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01))))))))) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)))
(set-option :timeout 0)
(push) ; 8
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@604@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01))))))))) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@604@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
      ($Snap.combine
        $Snap.unit
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01))))))))) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01))
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> res_V0 > (optGet(lowerBound_V0): Int)
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 447 | lowerBound_V0@601@01 != optNone[Option[Int]] | live]
; [else-branch: 447 | lowerBound_V0@601@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 447 | lowerBound_V0@601@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] res_V0 > (optGet(lowerBound_V0): Int)
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 9
(push) ; 9
; [else-branch: 447 | lowerBound_V0@601@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))))
(push) ; 8
(assert (not (=>
  (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))
  (> res_V0_CN3@639@01 (optGet<Int> lowerBound_V0@601@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))
  (> res_V0_CN3@639@01 (optGet<Int> lowerBound_V0@601@01))))
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> res_V0 < (optGet(upperBound_V0): Int)
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 448 | upperBound_V0@602@01 != optNone[Option[Int]] | live]
; [else-branch: 448 | upperBound_V0@602@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 448 | upperBound_V0@602@01 != optNone[Option[Int]]]
(assert (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] res_V0 < (optGet(upperBound_V0): Int)
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 9
(push) ; 9
; [else-branch: 448 | upperBound_V0@602@01 == optNone[Option[Int]]]
(assert (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>)))))
(push) ; 8
(assert (not (=>
  (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>)))
  (< res_V0_CN3@639@01 (optGet<Int> upperBound_V0@602@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>)))
  (< res_V0_CN3@639@01 (optGet<Int> upperBound_V0@602@01))))
; [eval] res_V0 == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)[0]
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)[0]
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 8
(declare-const $k@641@01 $Perm)
(assert ($Perm.isReadVar $k@641@01))
(assert (< $k@641@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@641@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@641@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@642@01 $Perm)
(assert ($Perm.isReadVar $k@642@01))
(assert (< $k@642@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@642@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@642@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@642@01))
(assert (and (< $k@642@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@642@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first $t@604@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))))))
  $Snap.unit) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@641@01))
(assert ($Perm.isReadVar $k@642@01))
(assert (and
  (< $k@641@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@641@01))
  (< $k@642@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@642@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@604@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
          ($Snap.combine
            $Snap.unit
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))))))
    $Snap.unit) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@604@01))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
            ($Snap.combine
              $Snap.unit
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))))))
      $Snap.unit) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (=
  res_V0_CN3@639@01
  (Seq_index
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@604@01))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
            ($Snap.combine
              $Snap.unit
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))))))
      $Snap.unit) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  res_V0_CN3@639@01
  (Seq_index
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@604@01))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
            ($Snap.combine
              $Snap.unit
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))))))
      $Snap.unit) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)
    0)))
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 5
(pop) ; 5
; Joined path conditions
; [then-branch: 449 | First:(Second:(First:($t@604@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 449 | First:(Second:(First:($t@604@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 5
; [else-branch: 449 | First:(Second:(First:($t@604@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 443 | First:(Second:(Second:(First:($t@604@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first $t@604@01)))))
  $Snap.unit))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMnode%trigger ($Snap.first $t@604@01) n_V0@600@01))
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@604@01))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 450 | First:(Second:(First:($t@604@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 450 | First:(Second:(First:($t@604@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 450 | First:(Second:(First:($t@604@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; res_V0_CN3 := (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(declare-const res_V0_CN3@643@01 Int)
(assert (=
  res_V0_CN3@643@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@604@01)))))
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
; [then-branch: 451 | First:(Second:(First:($t@604@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 451 | First:(Second:(First:($t@604@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 6
; [else-branch: 451 | First:(Second:(First:($t@604@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
; [then-branch: 452 | First:(Second:(Second:(First:($t@604@01)))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 452 | First:(Second:(Second:(First:($t@604@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 7
; [else-branch: 452 | First:(Second:(Second:(First:($t@604@01)))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first $t@604@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@600@01))
; [exec]
; res_V0_CN3 := res_V0_CN3
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN3
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 8
(declare-const $k@644@01 $Perm)
(assert ($Perm.isReadVar $k@644@01))
(assert (< $k@644@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@644@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@644@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first $t@604@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@644@01))
(assert (and
  (< $k@644@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@644@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first $t@604@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
        ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)))
(set-option :timeout 0)
(push) ; 8
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@604@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first $t@604@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01))
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> res_V0 > (optGet(lowerBound_V0): Int)
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 453 | lowerBound_V0@601@01 != optNone[Option[Int]] | live]
; [else-branch: 453 | lowerBound_V0@601@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 453 | lowerBound_V0@601@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] res_V0 > (optGet(lowerBound_V0): Int)
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 9
(push) ; 9
; [else-branch: 453 | lowerBound_V0@601@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))))
(push) ; 8
(assert (not (=>
  (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))
  (> res_V0_CN3@643@01 (optGet<Int> lowerBound_V0@601@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= lowerBound_V0@601@01 (as optNone<Option<Int>>  Option<Int>)))
  (> res_V0_CN3@643@01 (optGet<Int> lowerBound_V0@601@01))))
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> res_V0 < (optGet(upperBound_V0): Int)
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 454 | upperBound_V0@602@01 != optNone[Option[Int]] | live]
; [else-branch: 454 | upperBound_V0@602@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 454 | upperBound_V0@602@01 != optNone[Option[Int]]]
(assert (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] res_V0 < (optGet(upperBound_V0): Int)
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 9
(push) ; 9
; [else-branch: 454 | upperBound_V0@602@01 == optNone[Option[Int]]]
(assert (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>)))))
(push) ; 8
(assert (not (=>
  (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>)))
  (< res_V0_CN3@643@01 (optGet<Int> upperBound_V0@602@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not (= upperBound_V0@602@01 (as optNone<Option<Int>>  Option<Int>)))
  (< res_V0_CN3@643@01 (optGet<Int> upperBound_V0@602@01))))
; [eval] res_V0 == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)[0]
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)[0]
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 8
(declare-const $k@645@01 $Perm)
(assert ($Perm.isReadVar $k@645@01))
(assert (< $k@645@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@645@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@645@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@646@01 $Perm)
(assert ($Perm.isReadVar $k@646@01))
(assert (< $k@646@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@646@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@646@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@646@01))
(assert (and (< $k@646@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@646@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first $t@604@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
        ($Snap.combine $Snap.unit $Snap.unit))))
  $Snap.unit) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@645@01))
(assert ($Perm.isReadVar $k@646@01))
(assert (and
  (< $k@645@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@645@01))
  (< $k@646@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@646@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first $t@604@01))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
          ($Snap.combine $Snap.unit $Snap.unit))))
    $Snap.unit) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)))
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  0
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@604@01))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
            ($Snap.combine $Snap.unit $Snap.unit))))
      $Snap.unit) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (=
  res_V0_CN3@643@01
  (Seq_index
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@604@01))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
            ($Snap.combine $Snap.unit $Snap.unit))))
      $Snap.unit) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)
    0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  res_V0_CN3@643@01
  (Seq_index
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first $t@604@01))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first $t@604@01)))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first $t@604@01))))
            ($Snap.combine $Snap.unit $Snap.unit))))
      $Snap.unit) n_V0@600@01 lowerBound_V0@601@01 upperBound_V0@602@01)
    0)))
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 5
(pop) ; 5
; Joined path conditions
; [then-branch: 455 | First:(Second:(First:($t@604@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 455 | First:(Second:(First:($t@604@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 5
; [else-branch: 455 | First:(Second:(First:($t@604@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- insert_4b5075e4_PMnode ----------
(declare-const n_V0@647@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const value_V0@648@01 Int)
(declare-const lowerBound_V0@649@01 Option<Int>)
(declare-const upperBound_V0@650@01 Option<Int>)
(declare-const n_V0@651@01 ShStruct3<Ref~_Ref~_Ref>)
(declare-const value_V0@652@01 Int)
(declare-const lowerBound_V0@653@01 Option<Int>)
(declare-const upperBound_V0@654@01 Option<Int>)
(push) ; 1
(declare-const $t@655@01 $Snap)
(assert (= $t@655@01 ($Snap.combine ($Snap.first $t@655@01) ($Snap.second $t@655@01))))
(assert (= ($Snap.first $t@655@01) $Snap.unit))
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < value_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (= lowerBound_V0@653@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@653@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 456 | lowerBound_V0@653@01 != optNone[Option[Int]] | live]
; [else-branch: 456 | lowerBound_V0@653@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 456 | lowerBound_V0@653@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@653@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(lowerBound_V0): Int) < value_V0
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 3
(push) ; 3
; [else-branch: 456 | lowerBound_V0@653@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@653@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or
  (= lowerBound_V0@653@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= lowerBound_V0@653@01 (as optNone<Option<Int>>  Option<Int>)))))
(assert (=>
  (not (= lowerBound_V0@653@01 (as optNone<Option<Int>>  Option<Int>)))
  (< (optGet<Int> lowerBound_V0@653@01) value_V0@652@01)))
(assert (=
  ($Snap.second $t@655@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@655@01))
    ($Snap.second ($Snap.second $t@655@01)))))
(assert (= ($Snap.first ($Snap.second $t@655@01)) $Snap.unit))
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > value_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (= upperBound_V0@654@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= upperBound_V0@654@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 457 | upperBound_V0@654@01 != optNone[Option[Int]] | live]
; [else-branch: 457 | upperBound_V0@654@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 457 | upperBound_V0@654@01 != optNone[Option[Int]]]
(assert (not (= upperBound_V0@654@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(upperBound_V0): Int) > value_V0
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 3
(push) ; 3
; [else-branch: 457 | upperBound_V0@654@01 == optNone[Option[Int]]]
(assert (= upperBound_V0@654@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or
  (= upperBound_V0@654@01 (as optNone<Option<Int>>  Option<Int>))
  (not (= upperBound_V0@654@01 (as optNone<Option<Int>>  Option<Int>)))))
(assert (=>
  (not (= upperBound_V0@654@01 (as optNone<Option<Int>>  Option<Int>)))
  (> (optGet<Int> upperBound_V0@654@01) value_V0@652@01)))
(assert (=
  ($Snap.second ($Snap.second $t@655@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@655@01))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@655@01))) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 2
(declare-const $k@656@01 $Perm)
(assert ($Perm.isReadVar $k@656@01))
(assert (< $k@656@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@656@01)))
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@656@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second $t@655@01))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 2
; Joined path conditions
(assert ($Perm.isReadVar $k@656@01))
(assert (and
  (< $k@656@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@656@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second $t@655@01))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second $t@655@01))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@657@01 $Snap)
(assert (= $t@657@01 ($Snap.combine ($Snap.first $t@657@01) ($Snap.second $t@657@01))))
(assert (=
  ($Snap.second $t@657@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@657@01))
    ($Snap.second ($Snap.second $t@657@01)))))
(assert (= ($Snap.first ($Snap.second $t@657@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 3
(declare-const $k@658@01 $Perm)
(assert ($Perm.isReadVar $k@658@01))
(assert (< $k@658@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@658@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@658@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@657@01) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@658@01))
(assert (and
  (< $k@658@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@658@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@657@01) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@657@01) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(assert (=
  ($Snap.second ($Snap.second $t@657@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@657@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@657@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@657@01))) $Snap.unit))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@659@01 $Perm)
(assert ($Perm.isReadVar $k@659@01))
(assert (< $k@659@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@659@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@659@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@660@01 $Perm)
(assert ($Perm.isReadVar $k@660@01))
(assert (< $k@660@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@660@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@660@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@660@01))
(assert (and (< $k@660@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@660@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@657@01)
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@659@01))
(assert ($Perm.isReadVar $k@660@01))
(assert (and
  (< $k@659@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@659@01))
  (< $k@660@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@660@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@657@01)
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first $t@657@01)
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@657@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@657@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@657@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@657@01))))
  $Snap.unit))
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)| == old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@661@01 $Perm)
(assert ($Perm.isReadVar $k@661@01))
(assert (< $k@661@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@661@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@661@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@662@01 $Perm)
(assert ($Perm.isReadVar $k@662@01))
(assert (< $k@662@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@662@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@662@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@662@01))
(assert (and (< $k@662@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@662@01))))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@661@01))
(assert ($Perm.isReadVar $k@662@01))
(assert (and
  (< $k@661@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@661@01))
  (< $k@662@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@662@01))))
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@663@01 $Perm)
(assert ($Perm.isReadVar $k@663@01))
(assert (< $k@663@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@663@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@663@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@664@01 $Perm)
(assert ($Perm.isReadVar $k@664@01))
(assert (< $k@664@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@664@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@664@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@664@01))
(assert (and (< $k@664@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@664@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@663@01))
(assert ($Perm.isReadVar $k@664@01))
(assert (and
  (< $k@663@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@663@01))
  (< $k@664@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@664@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
; [eval] ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 3
(declare-const $k@665@01 $Perm)
(assert ($Perm.isReadVar $k@665@01))
(assert (< $k@665@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@665@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@665@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@666@01 $Perm)
(assert ($Perm.isReadVar $k@666@01))
(assert (< $k@666@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@666@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@666@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@666@01))
(assert (and (< $k@666@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@666@01))))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@665@01))
(assert ($Perm.isReadVar $k@666@01))
(assert (and
  (< $k@665@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@665@01))
  (< $k@666@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@666@01))))
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 458 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 458 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 458 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
(pop) ; 4
(push) ; 4
; [else-branch: 458 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      value_V0@652@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)))
(assert (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@657@01)
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
  (+
    (Seq_length
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
    (ite
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        value_V0@652@01)
      0
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@657@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@657@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@657@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@657@01)))))
  $Snap.unit))
; [eval] (forall i_V1: Int :: { (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) } { (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) } (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
(declare-const i_V1@667@01 Int)
(push) ; 3
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 4
(declare-const $k@668@01 $Perm)
(assert ($Perm.isReadVar $k@668@01))
(assert (< $k@668@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@668@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@668@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 5
(declare-const $k@669@01 $Perm)
(assert ($Perm.isReadVar $k@669@01))
(assert (< $k@669@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@669@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@669@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@669@01))
(assert (and (< $k@669@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@669@01))))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@668@01))
(assert ($Perm.isReadVar $k@669@01))
(assert (and
  (< $k@668@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@668@01))
  (< $k@669@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@669@01))))
(set-option :timeout 0)
(push) ; 4
; [then-branch: 459 | i_V1@667@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 459 | !(i_V1@667@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(push) ; 5
; [then-branch: 459 | i_V1@667@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  i_V1@667@01))
; [eval] (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 6
(declare-const $k@670@01 $Perm)
(assert ($Perm.isReadVar $k@670@01))
(assert (< $k@670@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@670@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@670@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@671@01 $Perm)
(assert ($Perm.isReadVar $k@671@01))
(assert (< $k@671@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@671@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@671@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@671@01))
(assert (and (< $k@671@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@671@01))))
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@670@01))
(assert ($Perm.isReadVar $k@671@01))
(assert (and
  (< $k@670@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@670@01))
  (< $k@671@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@671@01))))
(pop) ; 5
(set-option :timeout 0)
(push) ; 5
; [else-branch: 459 | !(i_V1@667@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@667@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@670@01))
(assert ($Perm.isReadVar $k@671@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@667@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@667@01)
    (< $k@670@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@670@01))
    (< $k@671@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@671@01)))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@667@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@667@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@668@01))
(assert ($Perm.isReadVar $k@669@01))
(assert ($Perm.isReadVar $k@670@01))
(assert ($Perm.isReadVar $k@671@01))
(assert (< $k@668@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@668@01)))
(assert (< $k@669@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@669@01)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@667@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@667@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@667@01)
        (< $k@670@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@670@01))
        (< $k@671@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@671@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@667@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@667@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@667@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@667@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@667@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@667@01)
        (< $k@670@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@670@01))
        (< $k@671@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@671@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@667@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@667@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@657@01)
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@667@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@667@01 Int)) (!
  (=>
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@667@01)
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first $t@657@01)
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@667@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@667@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@657@01)
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@667@01))
  :qid |prog.l1438|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@657@01)))))
  $Snap.unit))
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 3
(declare-const $k@672@01 $Perm)
(assert ($Perm.isReadVar $k@672@01))
(assert (< $k@672@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@672@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@672@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 4
(declare-const $k@673@01 $Perm)
(assert ($Perm.isReadVar $k@673@01))
(assert (< $k@673@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@673@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@673@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@673@01))
(assert (and (< $k@673@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@673@01))))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@672@01))
(assert ($Perm.isReadVar $k@673@01))
(assert (and
  (< $k@672@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@672@01))
  (< $k@673@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@673@01))))
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [then-branch: 460 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 460 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 460 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 5
(declare-const $k@674@01 $Perm)
(assert ($Perm.isReadVar $k@674@01))
(assert (< $k@674@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@674@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@674@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@675@01 $Perm)
(assert ($Perm.isReadVar $k@675@01))
(assert (< $k@675@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@675@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@675@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@675@01))
(assert (and (< $k@675@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@675@01))))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@674@01))
(assert ($Perm.isReadVar $k@675@01))
(assert (and
  (< $k@674@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@674@01))
  (< $k@675@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@675@01))))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 5
(declare-const $k@676@01 $Perm)
(assert ($Perm.isReadVar $k@676@01))
(assert (< $k@676@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@676@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@676@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 6
(declare-const $k@677@01 $Perm)
(assert ($Perm.isReadVar $k@677@01))
(assert (< $k@677@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@677@01)))
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@677@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert ($Perm.isReadVar $k@677@01))
(assert (and (< $k@677@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@677@01))))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@676@01))
(assert ($Perm.isReadVar $k@677@01))
(assert (and
  (< $k@676@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@676@01))
  (< $k@677@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@677@01))))
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 460 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@674@01))
(assert ($Perm.isReadVar $k@675@01))
(assert ($Perm.isReadVar $k@676@01))
(assert ($Perm.isReadVar $k@677@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      value_V0@652@01)
    (< $k@674@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@674@01))
    (< $k@675@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@675@01))
    (< $k@676@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@676@01))
    (< $k@677@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@677@01)))))
; Joined path conditions
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@657@01)
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))))
(pop) ; 2
(push) ; 2
; [exec]
; var upperBound_V0_CN3: Option[Int]
(declare-const upperBound_V0_CN3@678@01 Option<Int>)
; [exec]
; var lowerBound_V0_CN2: Option[Int]
(declare-const lowerBound_V0_CN2@679@01 Option<Int>)
; [exec]
; var value_V0_CN1: Int
(declare-const value_V0_CN1@680@01 Int)
; [exec]
; var n_V0_CN0: ShStruct3[Ref, Ref, Ref]
(declare-const n_V0_CN0@681@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; inhale n_V0_CN0 ==
;   shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(declare-const $t@682@01 $Snap)
(assert (= $t@682@01 $Snap.unit))
; [eval] n_V0_CN0 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 3
(assert (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (=
  n_V0_CN0@681@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale value_V0_CN1 == 0
(declare-const $t@683@01 $Snap)
(assert (= $t@683@01 $Snap.unit))
; [eval] value_V0_CN1 == 0
(assert (= value_V0_CN1@680@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale lowerBound_V0_CN2 == (optNone(): Option[Int])
(declare-const $t@684@01 $Snap)
(assert (= $t@684@01 $Snap.unit))
; [eval] lowerBound_V0_CN2 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(assert (= lowerBound_V0_CN2@679@01 (as optNone<Option<Int>>  Option<Int>)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale upperBound_V0_CN3 == (optNone(): Option[Int])
(declare-const $t@685@01 $Snap)
(assert (= $t@685@01 $Snap.unit))
; [eval] upperBound_V0_CN3 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(assert (= upperBound_V0_CN3@678@01 (as optNone<Option<Int>>  Option<Int>)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; n_V0_CN0 := n_V0
; [exec]
; value_V0_CN1 := value_V0
; [exec]
; lowerBound_V0_CN2 := lowerBound_V0
; [exec]
; upperBound_V0_CN3 := upperBound_V0
; [exec]
; unfold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
(assert (=
  ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
; [eval] (ShStructget0of3(n_V0): Ref)
(assert (not (= (ShStructget0of3<Ref> n_V0@651@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
; [eval] (ShStructget1of3(n_V0): Ref)
(assert (not (= (ShStructget1of3<Ref> n_V0@651@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
; [eval] (ShStructget2of3(n_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> n_V0@651@01) (ShStructget2of3<Ref> n_V0@651@01))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget2of3<Ref> n_V0@651@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))))
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 461 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 461 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 461 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 462 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 462 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 462 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget2of3(n_V0): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMnode%trigger ($Snap.first ($Snap.second ($Snap.second $t@655@01))) n_V0@651@01))
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 463 | value_V0@652@01 < First:(First:(Second:(Second:($t@655@01)))) | live]
; [else-branch: 463 | !(value_V0@652@01 < First:(First:(Second:(Second:($t@655@01))))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 463 | value_V0@652@01 < First:(First:(Second:(Second:($t@655@01))))]
(assert (<
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
; [then-branch: 464 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 464 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 6
; [else-branch: 464 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 6
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 465 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 465 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 465 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; insert_4b5075e4_PMnode((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   value_V0_CN1, lowerBound_V0_CN2, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]))
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < value_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= lowerBound_V0@653@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@653@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 466 | lowerBound_V0@653@01 != optNone[Option[Int]] | live]
; [else-branch: 466 | lowerBound_V0@653@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 466 | lowerBound_V0@653@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@653@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(lowerBound_V0): Int) < value_V0
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 8
(push) ; 8
; [else-branch: 466 | lowerBound_V0@653@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@653@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > value_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
  (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
    (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 467 | optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))) != optNone[Option[Int]] | live]
; [else-branch: 467 | optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))) == optNone[Option[Int]] | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 467 | optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))) != optNone[Option[Int]]]
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
    (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(upperBound_V0): Int) > value_V0
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
    (as optNone<Option<Int>>  Option<Int>))))
(push) ; 7
(assert (not (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      (as optNone<Option<Int>>  Option<Int>)))
  (>
    (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    value_V0@652@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      (as optNone<Option<Int>>  Option<Int>)))
  (>
    (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    value_V0@652@01)))
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 7
(declare-const $k@686@01 $Perm)
(assert ($Perm.isReadVar $k@686@01))
(assert (< $k@686@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@686@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@686@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@686@01))
(assert (and
  (< $k@686@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@686@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
(set-option :timeout 0)
(push) ; 7
(assert (not (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(declare-const $t@687@01 $Snap)
(assert (= $t@687@01 ($Snap.combine ($Snap.first $t@687@01) ($Snap.second $t@687@01))))
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second $t@687@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@687@01))
    ($Snap.second ($Snap.second $t@687@01)))))
(assert (= ($Snap.first ($Snap.second $t@687@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@688@01 $Perm)
(assert ($Perm.isReadVar $k@688@01))
(assert (< $k@688@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@688@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@688@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@687@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@688@01))
(assert (and
  (< $k@688@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@688@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@687@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@687@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(assert (=
  ($Snap.second ($Snap.second $t@687@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@687@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@687@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@687@01))) $Snap.unit))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@689@01 $Perm)
(assert ($Perm.isReadVar $k@689@01))
(assert (< $k@689@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@689@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@689@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@690@01 $Perm)
(assert ($Perm.isReadVar $k@690@01))
(assert (< $k@690@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@690@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@690@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@690@01))
(assert (and (< $k@690@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@690@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@687@01)
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@689@01))
(assert ($Perm.isReadVar $k@690@01))
(assert (and
  (< $k@689@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@689@01))
  (< $k@690@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@690@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@687@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first $t@687@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  value_V0@652@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@687@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@687@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@687@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@687@01))))
  $Snap.unit))
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)| == old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@691@01 $Perm)
(assert ($Perm.isReadVar $k@691@01))
(assert (< $k@691@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@691@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@691@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@692@01 $Perm)
(assert ($Perm.isReadVar $k@692@01))
(assert (< $k@692@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@692@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@692@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@692@01))
(assert (and (< $k@692@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@692@01))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@691@01))
(assert ($Perm.isReadVar $k@692@01))
(assert (and
  (< $k@691@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@691@01))
  (< $k@692@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@692@01))))
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@693@01 $Perm)
(assert ($Perm.isReadVar $k@693@01))
(assert (< $k@693@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@693@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@693@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@694@01 $Perm)
(assert ($Perm.isReadVar $k@694@01))
(assert (< $k@694@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@694@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@694@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@694@01))
(assert (and (< $k@694@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@694@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@693@01))
(assert ($Perm.isReadVar $k@694@01))
(assert (and
  (< $k@693@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@693@01))
  (< $k@694@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@694@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
; [eval] ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@695@01 $Perm)
(assert ($Perm.isReadVar $k@695@01))
(assert (< $k@695@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@695@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@695@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@696@01 $Perm)
(assert ($Perm.isReadVar $k@696@01))
(assert (< $k@696@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@696@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@696@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@696@01))
(assert (and (< $k@696@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@696@01))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@695@01))
(assert ($Perm.isReadVar $k@696@01))
(assert (and
  (< $k@695@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@695@01))
  (< $k@696@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@696@01))))
(set-option :timeout 0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  value_V0@652@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 468 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(First:(Second:(Second:($t@655@01))))), lowerBound_V0@653@01, optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01)))))) | live]
; [else-branch: 468 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(First:(Second:(Second:($t@655@01))))), lowerBound_V0@653@01, optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 468 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(First:(Second:(Second:($t@655@01))))), lowerBound_V0@653@01, optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))))]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  value_V0@652@01))
(pop) ; 8
(push) ; 8
; [else-branch: 468 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(First:(Second:(Second:($t@655@01))))), lowerBound_V0@653@01, optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01)))))))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    value_V0@652@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      value_V0@652@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    value_V0@652@01)))
(assert (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@687@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
  (+
    (Seq_length
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
    (ite
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        value_V0@652@01)
      0
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@687@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@687@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@687@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@687@01)))))
  $Snap.unit))
; [eval] (forall i_V1: Int :: { (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) } { (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) } (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
(declare-const i_V1@697@01 Int)
(push) ; 7
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 8
(declare-const $k@698@01 $Perm)
(assert ($Perm.isReadVar $k@698@01))
(assert (< $k@698@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@698@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@698@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@699@01 $Perm)
(assert ($Perm.isReadVar $k@699@01))
(assert (< $k@699@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@699@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@699@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@699@01))
(assert (and (< $k@699@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@699@01))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@698@01))
(assert ($Perm.isReadVar $k@699@01))
(assert (and
  (< $k@698@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@698@01))
  (< $k@699@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@699@01))))
(set-option :timeout 0)
(push) ; 8
; [then-branch: 469 | i_V1@697@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(First:(Second:(Second:($t@655@01))))), lowerBound_V0@653@01, optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01)))))) | live]
; [else-branch: 469 | !(i_V1@697@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(First:(Second:(Second:($t@655@01))))), lowerBound_V0@653@01, optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))))) | live]
(push) ; 9
; [then-branch: 469 | i_V1@697@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(First:(Second:(Second:($t@655@01))))), lowerBound_V0@653@01, optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))))]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  i_V1@697@01))
; [eval] (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@700@01 $Perm)
(assert ($Perm.isReadVar $k@700@01))
(assert (< $k@700@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@700@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@700@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@701@01 $Perm)
(assert ($Perm.isReadVar $k@701@01))
(assert (< $k@701@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@701@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@701@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@701@01))
(assert (and (< $k@701@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@701@01))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@700@01))
(assert ($Perm.isReadVar $k@701@01))
(assert (and
  (< $k@700@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@700@01))
  (< $k@701@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@701@01))))
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 469 | !(i_V1@697@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(First:(Second:(Second:($t@655@01))))), lowerBound_V0@653@01, optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01)))))))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    i_V1@697@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@700@01))
(assert ($Perm.isReadVar $k@701@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    i_V1@697@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      i_V1@697@01)
    (< $k@700@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@700@01))
    (< $k@701@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@701@01)))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      i_V1@697@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    i_V1@697@01)))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@698@01))
(assert ($Perm.isReadVar $k@699@01))
(assert ($Perm.isReadVar $k@700@01))
(assert ($Perm.isReadVar $k@701@01))
(assert (< $k@698@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@698@01)))
(assert (< $k@699@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@699@01)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@697@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        i_V1@697@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          i_V1@697@01)
        (< $k@700@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@700@01))
        (< $k@701@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@701@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          i_V1@697@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        i_V1@697@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    i_V1@697@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@697@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        i_V1@697@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          i_V1@697@01)
        (< $k@700@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@700@01))
        (< $k@701@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@701@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          i_V1@697@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        i_V1@697@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@687@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    i_V1@697@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@697@01 Int)) (!
  (=>
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      i_V1@697@01)
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first $t@687@01)
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      i_V1@697@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    i_V1@697@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@687@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    i_V1@697@01))
  :qid |prog.l1438|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@687@01)))))
  $Snap.unit))
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 7
(declare-const $k@702@01 $Perm)
(assert ($Perm.isReadVar $k@702@01))
(assert (< $k@702@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@702@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@702@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@703@01 $Perm)
(assert ($Perm.isReadVar $k@703@01))
(assert (< $k@703@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@703@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@703@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@703@01))
(assert (and (< $k@703@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@703@01))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@702@01))
(assert ($Perm.isReadVar $k@703@01))
(assert (and
  (< $k@702@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@702@01))
  (< $k@703@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@703@01))))
(set-option :timeout 0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  value_V0@652@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 470 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(First:(Second:(Second:($t@655@01))))), lowerBound_V0@653@01, optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01)))))) | live]
; [else-branch: 470 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(First:(Second:(Second:($t@655@01))))), lowerBound_V0@653@01, optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 470 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(First:(Second:(Second:($t@655@01))))), lowerBound_V0@653@01, optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))))]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  value_V0@652@01))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@704@01 $Perm)
(assert ($Perm.isReadVar $k@704@01))
(assert (< $k@704@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@704@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@704@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@705@01 $Perm)
(assert ($Perm.isReadVar $k@705@01))
(assert (< $k@705@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@705@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@705@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@705@01))
(assert (and (< $k@705@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@705@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@704@01))
(assert ($Perm.isReadVar $k@705@01))
(assert (and
  (< $k@704@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@704@01))
  (< $k@705@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@705@01))))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@706@01 $Perm)
(assert ($Perm.isReadVar $k@706@01))
(assert (< $k@706@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@706@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@706@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@707@01 $Perm)
(assert ($Perm.isReadVar $k@707@01))
(assert (< $k@707@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@707@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@707@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@707@01))
(assert (and (< $k@707@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@707@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@706@01))
(assert ($Perm.isReadVar $k@707@01))
(assert (and
  (< $k@706@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@706@01))
  (< $k@707@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@707@01))))
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 470 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(First:(Second:(Second:($t@655@01))))), lowerBound_V0@653@01, optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01)))))))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    value_V0@652@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@704@01))
(assert ($Perm.isReadVar $k@705@01))
(assert ($Perm.isReadVar $k@706@01))
(assert ($Perm.isReadVar $k@707@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    value_V0@652@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      value_V0@652@01)
    (< $k@704@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@704@01))
    (< $k@705@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@705@01))
    (< $k@706@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@706@01))
    (< $k@707@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@707@01)))))
; Joined path conditions
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    value_V0@652@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@687@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 471 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 471 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 471 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 472 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 472 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 472 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget2of3(n_V0): Ref)
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        ($Snap.first $t@687@01)
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))))) n_V0@651@01))
; [exec]
; label returnLabel
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@708@01 $Perm)
(assert ($Perm.isReadVar $k@708@01))
(assert (< $k@708@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@708@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@708@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        ($Snap.first $t@687@01)
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@708@01))
(assert (and
  (< $k@708@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@708@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
        ($Snap.combine
          ($Snap.first $t@687@01)
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        ($Snap.first $t@687@01)
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        ($Snap.first $t@687@01)
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@709@01 $Perm)
(assert ($Perm.isReadVar $k@709@01))
(assert (< $k@709@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@709@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@709@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@710@01 $Perm)
(assert ($Perm.isReadVar $k@710@01))
(assert (< $k@710@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@710@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@710@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@710@01))
(assert (and (< $k@710@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@710@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
        ($Snap.combine
          ($Snap.first $t@687@01)
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@709@01))
(assert ($Perm.isReadVar $k@710@01))
(assert (and
  (< $k@709@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@709@01))
  (< $k@710@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@710@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine
            ($Snap.first $t@687@01)
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine
            ($Snap.first $t@687@01)
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine
            ($Snap.first $t@687@01)
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)| == old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@711@01 $Perm)
(assert ($Perm.isReadVar $k@711@01))
(assert (< $k@711@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@711@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@711@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@712@01 $Perm)
(assert ($Perm.isReadVar $k@712@01))
(assert (< $k@712@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@712@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@712@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@712@01))
(assert (and (< $k@712@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@712@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@711@01))
(assert ($Perm.isReadVar $k@712@01))
(assert (and
  (< $k@711@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@711@01))
  (< $k@712@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@712@01))))
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@713@01 $Perm)
(assert ($Perm.isReadVar $k@713@01))
(assert (< $k@713@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@713@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@713@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@714@01 $Perm)
(assert ($Perm.isReadVar $k@714@01))
(assert (< $k@714@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@714@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@714@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@714@01))
(assert (and (< $k@714@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@714@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@713@01))
(assert ($Perm.isReadVar $k@714@01))
(assert (and
  (< $k@713@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@713@01))
  (< $k@714@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@714@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
; [eval] ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@715@01 $Perm)
(assert ($Perm.isReadVar $k@715@01))
(assert (< $k@715@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@715@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@715@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@716@01 $Perm)
(assert ($Perm.isReadVar $k@716@01))
(assert (< $k@716@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@716@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@716@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@716@01))
(assert (and (< $k@716@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@716@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@715@01))
(assert ($Perm.isReadVar $k@716@01))
(assert (and
  (< $k@715@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@715@01))
  (< $k@716@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@716@01))))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 473 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 473 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 473 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
(pop) ; 10
(push) ; 10
; [else-branch: 473 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      value_V0@652@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)))
(push) ; 9
(assert (not (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first $t@687@01)
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
  (+
    (Seq_length
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
    (ite
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        value_V0@652@01)
      0
      1)))))
(check-sat)
; unsat
(pop) ; 9
; 0.04s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first $t@687@01)
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
  (+
    (Seq_length
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
    (ite
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        value_V0@652@01)
      0
      1))))
; [eval] (forall i_V1: Int :: { (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) } { (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) } (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
(declare-const i_V1@717@01 Int)
(push) ; 9
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@718@01 $Perm)
(assert ($Perm.isReadVar $k@718@01))
(assert (< $k@718@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@718@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@718@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@719@01 $Perm)
(assert ($Perm.isReadVar $k@719@01))
(assert (< $k@719@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@719@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@719@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@719@01))
(assert (and (< $k@719@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@719@01))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@718@01))
(assert ($Perm.isReadVar $k@719@01))
(assert (and
  (< $k@718@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@718@01))
  (< $k@719@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@719@01))))
(set-option :timeout 0)
(push) ; 10
; [then-branch: 474 | i_V1@717@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 474 | !(i_V1@717@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(push) ; 11
; [then-branch: 474 | i_V1@717@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  i_V1@717@01))
; [eval] (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 12
(declare-const $k@720@01 $Perm)
(assert ($Perm.isReadVar $k@720@01))
(assert (< $k@720@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@720@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@720@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@721@01 $Perm)
(assert ($Perm.isReadVar $k@721@01))
(assert (< $k@721@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@721@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@721@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@721@01))
(assert (and (< $k@721@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@721@01))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@720@01))
(assert ($Perm.isReadVar $k@721@01))
(assert (and
  (< $k@720@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@720@01))
  (< $k@721@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@721@01))))
(pop) ; 11
(set-option :timeout 0)
(push) ; 11
; [else-branch: 474 | !(i_V1@717@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@717@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@720@01))
(assert ($Perm.isReadVar $k@721@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@717@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@717@01)
    (< $k@720@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@720@01))
    (< $k@721@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@721@01)))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@717@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@717@01)))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@718@01))
(assert ($Perm.isReadVar $k@719@01))
(assert ($Perm.isReadVar $k@720@01))
(assert ($Perm.isReadVar $k@721@01))
(assert (< $k@718@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@718@01)))
(assert (< $k@719@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@719@01)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@717@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@717@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@717@01)
        (< $k@720@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@720@01))
        (< $k@721@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@721@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@717@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@717@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@717@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@717@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@717@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@717@01)
        (< $k@720@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@720@01))
        (< $k@721@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@721@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@717@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@717@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first $t@687@01)
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@717@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@717@01 Int)) (!
  (and
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@717@01)
      (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine
                ($Snap.first $t@687@01)
                ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@717@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first $t@687@01)
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@717@01))
  :qid |prog.l1438_precondition|)))
(push) ; 9
(assert (not (forall ((i_V1@717@01 Int)) (!
  (=>
    (and
      (and
        (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        (=>
          (Seq_contains
            (sortedValues_4b5075e4_PMnode ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
              $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
            i_V1@717@01)
          (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
                  ($Snap.combine
                    ($Snap.first $t@687@01)
                    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@717@01))
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine
                ($Snap.first $t@687@01)
                ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@717@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@717@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first $t@687@01)
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@717@01))
  :qid |prog.l1438|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i_V1@717@01 Int)) (!
  (=>
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@717@01)
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine
                ($Snap.first $t@687@01)
                ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@717@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@717@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first $t@687@01)
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@717@01))
  :qid |prog.l1438|)))
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@722@01 $Perm)
(assert ($Perm.isReadVar $k@722@01))
(assert (< $k@722@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@722@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@722@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@723@01 $Perm)
(assert ($Perm.isReadVar $k@723@01))
(assert (< $k@723@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@723@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@723@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@723@01))
(assert (and (< $k@723@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@723@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@722@01))
(assert ($Perm.isReadVar $k@723@01))
(assert (and
  (< $k@722@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@722@01))
  (< $k@723@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@723@01))))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 475 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 475 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 475 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 11
(declare-const $k@724@01 $Perm)
(assert ($Perm.isReadVar $k@724@01))
(assert (< $k@724@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@724@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@724@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@725@01 $Perm)
(assert ($Perm.isReadVar $k@725@01))
(assert (< $k@725@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@725@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@725@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@725@01))
(assert (and (< $k@725@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@725@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@724@01))
(assert ($Perm.isReadVar $k@725@01))
(assert (and
  (< $k@724@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@724@01))
  (< $k@725@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@725@01))))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@726@01 $Perm)
(assert ($Perm.isReadVar $k@726@01))
(assert (< $k@726@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@726@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@726@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@727@01 $Perm)
(assert ($Perm.isReadVar $k@727@01))
(assert (< $k@727@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@727@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@727@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@727@01))
(assert (and (< $k@727@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@727@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@726@01))
(assert ($Perm.isReadVar $k@727@01))
(assert (and
  (< $k@726@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@726@01))
  (< $k@727@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@727@01))))
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 475 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@724@01))
(assert ($Perm.isReadVar $k@725@01))
(assert ($Perm.isReadVar $k@726@01))
(assert ($Perm.isReadVar $k@727@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      value_V0@652@01)
    (< $k@724@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@724@01))
    (< $k@725@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@725@01))
    (< $k@726@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@726@01))
    (< $k@727@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@727@01)))))
; Joined path conditions
(push) ; 9
(assert (not (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first $t@687@01)
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first $t@687@01)
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 463 | !(value_V0@652@01 < First:(First:(Second:(Second:($t@655@01)))))]
(assert (not
  (<
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(pop) ; 5
; [eval] !(value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$)
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 476 | !(value_V0@652@01 < First:(First:(Second:(Second:($t@655@01))))) | live]
; [else-branch: 476 | value_V0@652@01 < First:(First:(Second:(Second:($t@655@01)))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 476 | !(value_V0@652@01 < First:(First:(Second:(Second:($t@655@01)))))]
(assert (not
  (<
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 477 | value_V0@652@01 > First:(First:(Second:(Second:($t@655@01)))) | live]
; [else-branch: 477 | !(value_V0@652@01 > First:(First:(Second:(Second:($t@655@01))))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 477 | value_V0@652@01 > First:(First:(Second:(Second:($t@655@01))))]
(assert (>
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
; [then-branch: 478 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 478 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 7
; [else-branch: 478 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 7
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 479 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 479 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 479 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; insert_4b5075e4_PMnode((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   value_V0_CN1, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]),
;   upperBound_V0_CN3)
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < value_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
  (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
    (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 480 | optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))) != optNone[Option[Int]] | live]
; [else-branch: 480 | optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))) == optNone[Option[Int]] | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 480 | optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))) != optNone[Option[Int]]]
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
    (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(lowerBound_V0): Int) < value_V0
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
    (as optNone<Option<Int>>  Option<Int>))))
(push) ; 8
(assert (not (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      (as optNone<Option<Int>>  Option<Int>)))
  (<
    (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    value_V0@652@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      (as optNone<Option<Int>>  Option<Int>)))
  (<
    (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    value_V0@652@01)))
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > value_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= upperBound_V0@654@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= upperBound_V0@654@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 481 | upperBound_V0@654@01 != optNone[Option[Int]] | live]
; [else-branch: 481 | upperBound_V0@654@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 481 | upperBound_V0@654@01 != optNone[Option[Int]]]
(assert (not (= upperBound_V0@654@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(upperBound_V0): Int) > value_V0
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 9
(push) ; 9
; [else-branch: 481 | upperBound_V0@654@01 == optNone[Option[Int]]]
(assert (= upperBound_V0@654@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 8
(declare-const $k@728@01 $Perm)
(assert ($Perm.isReadVar $k@728@01))
(assert (< $k@728@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@728@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@728@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@728@01))
(assert (and
  (< $k@728@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@728@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 8
(assert (not (sorted_4b5075e4_PMnode ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01))
(declare-const $t@729@01 $Snap)
(assert (= $t@729@01 ($Snap.combine ($Snap.first $t@729@01) ($Snap.second $t@729@01))))
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second $t@729@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@729@01))
    ($Snap.second ($Snap.second $t@729@01)))))
(assert (= ($Snap.first ($Snap.second $t@729@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@730@01 $Perm)
(assert ($Perm.isReadVar $k@730@01))
(assert (< $k@730@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@730@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@730@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@729@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@730@01))
(assert (and
  (< $k@730@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@730@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@729@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@729@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01))
(assert (=
  ($Snap.second ($Snap.second $t@729@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@729@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@729@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@729@01))) $Snap.unit))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@731@01 $Perm)
(assert ($Perm.isReadVar $k@731@01))
(assert (< $k@731@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@731@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@731@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@732@01 $Perm)
(assert ($Perm.isReadVar $k@732@01))
(assert (< $k@732@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@732@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@732@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@732@01))
(assert (and (< $k@732@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@732@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@729@01)
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@731@01))
(assert ($Perm.isReadVar $k@732@01))
(assert (and
  (< $k@731@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@731@01))
  (< $k@732@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@732@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@729@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)))
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first $t@729@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
  value_V0@652@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@729@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@729@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@729@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@729@01))))
  $Snap.unit))
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)| == old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@733@01 $Perm)
(assert ($Perm.isReadVar $k@733@01))
(assert (< $k@733@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@733@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@733@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@734@01 $Perm)
(assert ($Perm.isReadVar $k@734@01))
(assert (< $k@734@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@734@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@734@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@734@01))
(assert (and (< $k@734@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@734@01))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@733@01))
(assert ($Perm.isReadVar $k@734@01))
(assert (and
  (< $k@733@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@733@01))
  (< $k@734@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@734@01))))
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@735@01 $Perm)
(assert ($Perm.isReadVar $k@735@01))
(assert (< $k@735@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@735@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@735@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@736@01 $Perm)
(assert ($Perm.isReadVar $k@736@01))
(assert (< $k@736@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@736@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@736@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@736@01))
(assert (and (< $k@736@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@736@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@735@01))
(assert ($Perm.isReadVar $k@736@01))
(assert (and
  (< $k@735@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@735@01))
  (< $k@736@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@736@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)))
; [eval] ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@737@01 $Perm)
(assert ($Perm.isReadVar $k@737@01))
(assert (< $k@737@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@737@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@737@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@738@01 $Perm)
(assert ($Perm.isReadVar $k@738@01))
(assert (< $k@738@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@738@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@738@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@738@01))
(assert (and (< $k@738@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@738@01))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@737@01))
(assert ($Perm.isReadVar $k@738@01))
(assert (and
  (< $k@737@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@737@01))
  (< $k@738@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@738@01))))
(set-option :timeout 0)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 482 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((Second:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))), optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))), upperBound_V0@654@01) | live]
; [else-branch: 482 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((Second:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))), optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))), upperBound_V0@654@01)) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 482 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((Second:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))), optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))), upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
  value_V0@652@01))
(pop) ; 9
(push) ; 9
; [else-branch: 482 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((Second:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))), optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))), upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    value_V0@652@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
      value_V0@652@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    value_V0@652@01)))
(assert (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@729@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01))
  (+
    (Seq_length
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01))
    (ite
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
        value_V0@652@01)
      0
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@729@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@729@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@729@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@729@01)))))
  $Snap.unit))
; [eval] (forall i_V1: Int :: { (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) } { (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) } (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
(declare-const i_V1@739@01 Int)
(push) ; 8
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@740@01 $Perm)
(assert ($Perm.isReadVar $k@740@01))
(assert (< $k@740@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@740@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@740@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@741@01 $Perm)
(assert ($Perm.isReadVar $k@741@01))
(assert (< $k@741@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@741@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@741@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@741@01))
(assert (and (< $k@741@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@741@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@740@01))
(assert ($Perm.isReadVar $k@741@01))
(assert (and
  (< $k@740@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@740@01))
  (< $k@741@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@741@01))))
(set-option :timeout 0)
(push) ; 9
; [then-branch: 483 | i_V1@739@01 in sortedValues_4b5075e4_PMnode((Second:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))), optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))), upperBound_V0@654@01) | live]
; [else-branch: 483 | !(i_V1@739@01 in sortedValues_4b5075e4_PMnode((Second:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))), optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))), upperBound_V0@654@01)) | live]
(push) ; 10
; [then-branch: 483 | i_V1@739@01 in sortedValues_4b5075e4_PMnode((Second:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))), optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))), upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
  i_V1@739@01))
; [eval] (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 11
(declare-const $k@742@01 $Perm)
(assert ($Perm.isReadVar $k@742@01))
(assert (< $k@742@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@742@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@742@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@743@01 $Perm)
(assert ($Perm.isReadVar $k@743@01))
(assert (< $k@743@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@743@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@743@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@743@01))
(assert (and (< $k@743@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@743@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@742@01))
(assert ($Perm.isReadVar $k@743@01))
(assert (and
  (< $k@742@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@742@01))
  (< $k@743@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@743@01))))
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 483 | !(i_V1@739@01 in sortedValues_4b5075e4_PMnode((Second:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))), optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))), upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    i_V1@739@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@742@01))
(assert ($Perm.isReadVar $k@743@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    i_V1@739@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
      i_V1@739@01)
    (< $k@742@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@742@01))
    (< $k@743@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@743@01)))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
      i_V1@739@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    i_V1@739@01)))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@740@01))
(assert ($Perm.isReadVar $k@741@01))
(assert ($Perm.isReadVar $k@742@01))
(assert ($Perm.isReadVar $k@743@01))
(assert (< $k@740@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@740@01)))
(assert (< $k@741@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@741@01)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@739@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
        i_V1@739@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
          i_V1@739@01)
        (< $k@742@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@742@01))
        (< $k@743@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@743@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
          i_V1@739@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
        i_V1@739@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    i_V1@739@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@739@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
        i_V1@739@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
          i_V1@739@01)
        (< $k@742@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@742@01))
        (< $k@743@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@743@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
          i_V1@739@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
        i_V1@739@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@729@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    i_V1@739@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@739@01 Int)) (!
  (=>
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
      i_V1@739@01)
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first $t@729@01)
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
      i_V1@739@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    i_V1@739@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@729@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    i_V1@739@01))
  :qid |prog.l1438|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@729@01)))))
  $Snap.unit))
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 8
(declare-const $k@744@01 $Perm)
(assert ($Perm.isReadVar $k@744@01))
(assert (< $k@744@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@744@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@744@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@745@01 $Perm)
(assert ($Perm.isReadVar $k@745@01))
(assert (< $k@745@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@745@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@745@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@745@01))
(assert (and (< $k@745@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@745@01))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@744@01))
(assert ($Perm.isReadVar $k@745@01))
(assert (and
  (< $k@744@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@744@01))
  (< $k@745@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@745@01))))
(set-option :timeout 0)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 484 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((Second:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))), optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))), upperBound_V0@654@01) | live]
; [else-branch: 484 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((Second:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))), optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))), upperBound_V0@654@01)) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 484 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((Second:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))), optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))), upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
  value_V0@652@01))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@746@01 $Perm)
(assert ($Perm.isReadVar $k@746@01))
(assert (< $k@746@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@746@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@746@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@747@01 $Perm)
(assert ($Perm.isReadVar $k@747@01))
(assert (< $k@747@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@747@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@747@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@747@01))
(assert (and (< $k@747@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@747@01))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@746@01))
(assert ($Perm.isReadVar $k@747@01))
(assert (and
  (< $k@746@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@746@01))
  (< $k@747@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@747@01))))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@748@01 $Perm)
(assert ($Perm.isReadVar $k@748@01))
(assert (< $k@748@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@748@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@748@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@749@01 $Perm)
(assert ($Perm.isReadVar $k@749@01))
(assert (< $k@749@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@749@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@749@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@749@01))
(assert (and (< $k@749@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@749@01))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@748@01))
(assert ($Perm.isReadVar $k@749@01))
(assert (and
  (< $k@748@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@748@01))
  (< $k@749@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@749@01))))
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 484 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((Second:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))), optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))), upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    value_V0@652@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@746@01))
(assert ($Perm.isReadVar $k@747@01))
(assert ($Perm.isReadVar $k@748@01))
(assert ($Perm.isReadVar $k@749@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    value_V0@652@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
      value_V0@652@01)
    (< $k@746@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@746@01))
    (< $k@747@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@747@01))
    (< $k@748@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@748@01))
    (< $k@749@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@749@01)))))
; Joined path conditions
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    value_V0@652@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@729@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 485 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 485 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 485 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 486 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 486 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 486 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget2of3(n_V0): Ref)
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        ($Snap.first $t@729@01))))) n_V0@651@01))
; [exec]
; label returnLabel
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@750@01 $Perm)
(assert ($Perm.isReadVar $k@750@01))
(assert (< $k@750@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@750@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@750@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        ($Snap.first $t@729@01))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@750@01))
(assert (and
  (< $k@750@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@750@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          ($Snap.first $t@729@01))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 10
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        ($Snap.first $t@729@01))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        ($Snap.first $t@729@01))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@751@01 $Perm)
(assert ($Perm.isReadVar $k@751@01))
(assert (< $k@751@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@751@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@751@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@752@01 $Perm)
(assert ($Perm.isReadVar $k@752@01))
(assert (< $k@752@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@752@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@752@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@752@01))
(assert (and (< $k@752@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@752@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          ($Snap.first $t@729@01)))))
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@751@01))
(assert ($Perm.isReadVar $k@752@01))
(assert (and
  (< $k@751@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@751@01))
  (< $k@752@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@752@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            ($Snap.first $t@729@01)))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 10
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            ($Snap.first $t@729@01)))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            ($Snap.first $t@729@01)))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)| == old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@753@01 $Perm)
(assert ($Perm.isReadVar $k@753@01))
(assert (< $k@753@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@753@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@753@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@754@01 $Perm)
(assert ($Perm.isReadVar $k@754@01))
(assert (< $k@754@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@754@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@754@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@754@01))
(assert (and (< $k@754@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@754@01))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@753@01))
(assert ($Perm.isReadVar $k@754@01))
(assert (and
  (< $k@753@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@753@01))
  (< $k@754@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@754@01))))
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@755@01 $Perm)
(assert ($Perm.isReadVar $k@755@01))
(assert (< $k@755@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@755@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@755@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@756@01 $Perm)
(assert ($Perm.isReadVar $k@756@01))
(assert (< $k@756@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@756@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@756@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@756@01))
(assert (and (< $k@756@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@756@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@755@01))
(assert ($Perm.isReadVar $k@756@01))
(assert (and
  (< $k@755@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@755@01))
  (< $k@756@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@756@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
; [eval] ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@757@01 $Perm)
(assert ($Perm.isReadVar $k@757@01))
(assert (< $k@757@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@757@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@757@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@758@01 $Perm)
(assert ($Perm.isReadVar $k@758@01))
(assert (< $k@758@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@758@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@758@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@758@01))
(assert (and (< $k@758@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@758@01))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@757@01))
(assert ($Perm.isReadVar $k@758@01))
(assert (and
  (< $k@757@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@757@01))
  (< $k@758@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@758@01))))
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 487 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 487 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 487 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
(pop) ; 11
(push) ; 11
; [else-branch: 487 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      value_V0@652@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)))
(push) ; 10
(assert (not (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              ($Snap.first $t@729@01)))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
  (+
    (Seq_length
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
    (ite
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        value_V0@652@01)
      0
      1)))))
(check-sat)
; unsat
(pop) ; 10
; 0.12s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              ($Snap.first $t@729@01)))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
  (+
    (Seq_length
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
    (ite
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        value_V0@652@01)
      0
      1))))
; [eval] (forall i_V1: Int :: { (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) } { (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) } (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
(declare-const i_V1@759@01 Int)
(push) ; 10
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 11
(declare-const $k@760@01 $Perm)
(assert ($Perm.isReadVar $k@760@01))
(assert (< $k@760@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@760@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@760@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@761@01 $Perm)
(assert ($Perm.isReadVar $k@761@01))
(assert (< $k@761@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@761@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@761@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@761@01))
(assert (and (< $k@761@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@761@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@760@01))
(assert ($Perm.isReadVar $k@761@01))
(assert (and
  (< $k@760@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@760@01))
  (< $k@761@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@761@01))))
(set-option :timeout 0)
(push) ; 11
; [then-branch: 488 | i_V1@759@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 488 | !(i_V1@759@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(push) ; 12
; [then-branch: 488 | i_V1@759@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  i_V1@759@01))
; [eval] (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 13
(declare-const $k@762@01 $Perm)
(assert ($Perm.isReadVar $k@762@01))
(assert (< $k@762@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@762@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@762@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 14
(declare-const $k@763@01 $Perm)
(assert ($Perm.isReadVar $k@763@01))
(assert (< $k@763@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@763@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@763@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@763@01))
(assert (and (< $k@763@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@763@01))))
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@762@01))
(assert ($Perm.isReadVar $k@763@01))
(assert (and
  (< $k@762@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@762@01))
  (< $k@763@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@763@01))))
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 488 | !(i_V1@759@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@759@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@762@01))
(assert ($Perm.isReadVar $k@763@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@759@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@759@01)
    (< $k@762@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@762@01))
    (< $k@763@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@763@01)))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@759@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@759@01)))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@760@01))
(assert ($Perm.isReadVar $k@761@01))
(assert ($Perm.isReadVar $k@762@01))
(assert ($Perm.isReadVar $k@763@01))
(assert (< $k@760@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@760@01)))
(assert (< $k@761@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@761@01)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@759@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@759@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@759@01)
        (< $k@762@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@762@01))
        (< $k@763@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@763@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@759@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@759@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@759@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@759@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@759@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@759@01)
        (< $k@762@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@762@01))
        (< $k@763@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@763@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@759@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@759@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              ($Snap.first $t@729@01)))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@759@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@759@01 Int)) (!
  (and
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@759@01)
      (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
                ($Snap.first $t@729@01)))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@759@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              ($Snap.first $t@729@01)))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@759@01))
  :qid |prog.l1438_precondition|)))
(push) ; 10
(assert (not (forall ((i_V1@759@01 Int)) (!
  (=>
    (and
      (and
        (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        (=>
          (Seq_contains
            (sortedValues_4b5075e4_PMnode ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
              $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
            i_V1@759@01)
          (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
                    ($Snap.first $t@729@01)))))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@759@01))
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
                ($Snap.first $t@729@01)))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@759@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@759@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              ($Snap.first $t@729@01)))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@759@01))
  :qid |prog.l1438|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i_V1@759@01 Int)) (!
  (=>
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@759@01)
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
                ($Snap.first $t@729@01)))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@759@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@759@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              ($Snap.first $t@729@01)))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@759@01))
  :qid |prog.l1438|)))
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@764@01 $Perm)
(assert ($Perm.isReadVar $k@764@01))
(assert (< $k@764@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@764@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@764@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@765@01 $Perm)
(assert ($Perm.isReadVar $k@765@01))
(assert (< $k@765@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@765@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@765@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@765@01))
(assert (and (< $k@765@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@765@01))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@764@01))
(assert ($Perm.isReadVar $k@765@01))
(assert (and
  (< $k@764@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@764@01))
  (< $k@765@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@765@01))))
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 489 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 489 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 489 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 12
(declare-const $k@766@01 $Perm)
(assert ($Perm.isReadVar $k@766@01))
(assert (< $k@766@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@766@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@766@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@767@01 $Perm)
(assert ($Perm.isReadVar $k@767@01))
(assert (< $k@767@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@767@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@767@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@767@01))
(assert (and (< $k@767@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@767@01))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@766@01))
(assert ($Perm.isReadVar $k@767@01))
(assert (and
  (< $k@766@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@766@01))
  (< $k@767@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@767@01))))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@768@01 $Perm)
(assert ($Perm.isReadVar $k@768@01))
(assert (< $k@768@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@768@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@768@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@769@01 $Perm)
(assert ($Perm.isReadVar $k@769@01))
(assert (< $k@769@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@769@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@769@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@769@01))
(assert (and (< $k@769@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@769@01))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@768@01))
(assert ($Perm.isReadVar $k@769@01))
(assert (and
  (< $k@768@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@768@01))
  (< $k@769@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@769@01))))
(pop) ; 11
(set-option :timeout 0)
(push) ; 11
; [else-branch: 489 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@766@01))
(assert ($Perm.isReadVar $k@767@01))
(assert ($Perm.isReadVar $k@768@01))
(assert ($Perm.isReadVar $k@769@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      value_V0@652@01)
    (< $k@766@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@766@01))
    (< $k@767@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@767@01))
    (< $k@768@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@768@01))
    (< $k@769@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@769@01)))))
; Joined path conditions
(push) ; 10
(assert (not (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              ($Snap.first $t@729@01)))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              ($Snap.first $t@729@01)))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 477 | !(value_V0@652@01 > First:(First:(Second:(Second:($t@655@01)))))]
(assert (not
  (>
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(pop) ; 6
; [eval] !(value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$)
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 490 | !(value_V0@652@01 > First:(First:(Second:(Second:($t@655@01))))) | live]
; [else-branch: 490 | value_V0@652@01 > First:(First:(Second:(Second:($t@655@01)))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 490 | !(value_V0@652@01 > First:(First:(Second:(Second:($t@655@01)))))]
(assert (not
  (>
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 491 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 491 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 491 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 492 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 492 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 492 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget2of3(n_V0): Ref)
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))))) n_V0@651@01))
; [exec]
; label returnLabel
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@770@01 $Perm)
(assert ($Perm.isReadVar $k@770@01))
(assert (< $k@770@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@770@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@770@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@770@01))
(assert (and
  (< $k@770@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@770@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@771@01 $Perm)
(assert ($Perm.isReadVar $k@771@01))
(assert (< $k@771@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@771@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@771@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@772@01 $Perm)
(assert ($Perm.isReadVar $k@772@01))
(assert (< $k@772@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@772@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@772@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@772@01))
(assert (and (< $k@772@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@772@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@771@01))
(assert ($Perm.isReadVar $k@772@01))
(assert (and
  (< $k@771@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@771@01))
  (< $k@772@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@772@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)| == old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@773@01 $Perm)
(assert ($Perm.isReadVar $k@773@01))
(assert (< $k@773@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@773@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@773@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@774@01 $Perm)
(assert ($Perm.isReadVar $k@774@01))
(assert (< $k@774@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@774@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@774@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@774@01))
(assert (and (< $k@774@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@774@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@773@01))
(assert ($Perm.isReadVar $k@774@01))
(assert (and
  (< $k@773@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@773@01))
  (< $k@774@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@774@01))))
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@775@01 $Perm)
(assert ($Perm.isReadVar $k@775@01))
(assert (< $k@775@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@775@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@775@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@776@01 $Perm)
(assert ($Perm.isReadVar $k@776@01))
(assert (< $k@776@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@776@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@776@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@776@01))
(assert (and (< $k@776@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@776@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@775@01))
(assert ($Perm.isReadVar $k@776@01))
(assert (and
  (< $k@775@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@775@01))
  (< $k@776@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@776@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
; [eval] ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@777@01 $Perm)
(assert ($Perm.isReadVar $k@777@01))
(assert (< $k@777@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@777@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@777@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@778@01 $Perm)
(assert ($Perm.isReadVar $k@778@01))
(assert (< $k@778@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@778@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@778@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@778@01))
(assert (and (< $k@778@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@778@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@777@01))
(assert ($Perm.isReadVar $k@778@01))
(assert (and
  (< $k@777@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@777@01))
  (< $k@778@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@778@01))))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 493 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 493 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 493 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
(push) ; 9
(assert (not (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))))
; [eval] (forall i_V1: Int :: { (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) } { (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) } (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
(declare-const i_V1@779@01 Int)
(push) ; 9
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@780@01 $Perm)
(assert ($Perm.isReadVar $k@780@01))
(assert (< $k@780@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@780@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@780@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@781@01 $Perm)
(assert ($Perm.isReadVar $k@781@01))
(assert (< $k@781@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@781@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@781@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@781@01))
(assert (and (< $k@781@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@781@01))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@780@01))
(assert ($Perm.isReadVar $k@781@01))
(assert (and
  (< $k@780@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@780@01))
  (< $k@781@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@781@01))))
(set-option :timeout 0)
(push) ; 10
; [then-branch: 494 | i_V1@779@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 494 | !(i_V1@779@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(push) ; 11
; [then-branch: 494 | i_V1@779@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  i_V1@779@01))
; [eval] (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 12
(declare-const $k@782@01 $Perm)
(assert ($Perm.isReadVar $k@782@01))
(assert (< $k@782@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@782@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@782@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@783@01 $Perm)
(assert ($Perm.isReadVar $k@783@01))
(assert (< $k@783@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@783@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@783@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@783@01))
(assert (and (< $k@783@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@783@01))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@782@01))
(assert ($Perm.isReadVar $k@783@01))
(assert (and
  (< $k@782@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@782@01))
  (< $k@783@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@783@01))))
(pop) ; 11
(set-option :timeout 0)
(push) ; 11
; [else-branch: 494 | !(i_V1@779@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@779@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@782@01))
(assert ($Perm.isReadVar $k@783@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@779@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@779@01)
    (< $k@782@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@782@01))
    (< $k@783@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@783@01)))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@779@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@779@01)))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@780@01))
(assert ($Perm.isReadVar $k@781@01))
(assert ($Perm.isReadVar $k@782@01))
(assert ($Perm.isReadVar $k@783@01))
(assert (< $k@780@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@780@01)))
(assert (< $k@781@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@781@01)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@779@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@779@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@779@01)
        (< $k@782@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@782@01))
        (< $k@783@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@783@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@779@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@779@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@779@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@779@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@779@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@779@01)
        (< $k@782@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@782@01))
        (< $k@783@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@783@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@779@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@779@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@779@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@779@01 Int)) (!
  (and
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@779@01)
      (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
                ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@779@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@779@01))
  :qid |prog.l1438_precondition|)))
(push) ; 9
(assert (not (forall ((i_V1@779@01 Int)) (!
  (=>
    (and
      (and
        (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        (=>
          (Seq_contains
            (sortedValues_4b5075e4_PMnode ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
              $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
            i_V1@779@01)
          (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
                    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@779@01))
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
                ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@779@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@779@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@779@01))
  :qid |prog.l1438|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i_V1@779@01 Int)) (!
  (=>
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@779@01)
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
                ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@779@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@779@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@779@01))
  :qid |prog.l1438|)))
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@784@01 $Perm)
(assert ($Perm.isReadVar $k@784@01))
(assert (< $k@784@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@784@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@784@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@785@01 $Perm)
(assert ($Perm.isReadVar $k@785@01))
(assert (< $k@785@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@785@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@785@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@785@01))
(assert (and (< $k@785@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@785@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@784@01))
(assert ($Perm.isReadVar $k@785@01))
(assert (and
  (< $k@784@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@784@01))
  (< $k@785@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@785@01))))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 495 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 495 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 495 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 11
(declare-const $k@786@01 $Perm)
(assert ($Perm.isReadVar $k@786@01))
(assert (< $k@786@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@786@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@786@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@787@01 $Perm)
(assert ($Perm.isReadVar $k@787@01))
(assert (< $k@787@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@787@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@787@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@787@01))
(assert (and (< $k@787@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@787@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@786@01))
(assert ($Perm.isReadVar $k@787@01))
(assert (and
  (< $k@786@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@786@01))
  (< $k@787@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@787@01))))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@788@01 $Perm)
(assert ($Perm.isReadVar $k@788@01))
(assert (< $k@788@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@788@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@788@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@789@01 $Perm)
(assert ($Perm.isReadVar $k@789@01))
(assert (< $k@789@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@789@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@789@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@789@01))
(assert (and (< $k@789@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@789@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@788@01))
(assert ($Perm.isReadVar $k@789@01))
(assert (and
  (< $k@788@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@788@01))
  (< $k@789@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@789@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@786@01))
(assert ($Perm.isReadVar $k@787@01))
(assert ($Perm.isReadVar $k@788@01))
(assert ($Perm.isReadVar $k@789@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (and
    (< $k@786@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@786@01))
    (< $k@787@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@787@01))
    (< $k@788@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@788@01))
    (< $k@789@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@789@01)))))
(set-option :timeout 0)
(push) ; 9
(assert (not (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 490 | value_V0@652@01 > First:(First:(Second:(Second:($t@655@01))))]
(assert (>
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 476 | value_V0@652@01 < First:(First:(Second:(Second:($t@655@01))))]
(assert (<
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 462 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  $Snap.unit))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMnode%trigger ($Snap.first ($Snap.second ($Snap.second $t@655@01))) n_V0@651@01))
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 496 | value_V0@652@01 < First:(First:(Second:(Second:($t@655@01)))) | live]
; [else-branch: 496 | !(value_V0@652@01 < First:(First:(Second:(Second:($t@655@01))))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 496 | value_V0@652@01 < First:(First:(Second:(Second:($t@655@01))))]
(assert (<
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
; [then-branch: 497 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 497 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 6
; [else-branch: 497 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 6
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 498 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 498 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 498 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; insert_4b5075e4_PMnode((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   value_V0_CN1, lowerBound_V0_CN2, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]))
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < value_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (= lowerBound_V0@653@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= lowerBound_V0@653@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 499 | lowerBound_V0@653@01 != optNone[Option[Int]] | live]
; [else-branch: 499 | lowerBound_V0@653@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 499 | lowerBound_V0@653@01 != optNone[Option[Int]]]
(assert (not (= lowerBound_V0@653@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(lowerBound_V0): Int) < value_V0
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 8
(push) ; 8
; [else-branch: 499 | lowerBound_V0@653@01 == optNone[Option[Int]]]
(assert (= lowerBound_V0@653@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > value_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
  (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
    (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 500 | optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))) != optNone[Option[Int]] | live]
; [else-branch: 500 | optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))) == optNone[Option[Int]] | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 500 | optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))) != optNone[Option[Int]]]
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
    (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(upperBound_V0): Int) > value_V0
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
    (as optNone<Option<Int>>  Option<Int>))))
(push) ; 7
(assert (not (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      (as optNone<Option<Int>>  Option<Int>)))
  (>
    (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    value_V0@652@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      (as optNone<Option<Int>>  Option<Int>)))
  (>
    (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    value_V0@652@01)))
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 7
(declare-const $k@790@01 $Perm)
(assert ($Perm.isReadVar $k@790@01))
(assert (< $k@790@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@790@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@790@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@790@01))
(assert (and
  (< $k@790@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@790@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
(set-option :timeout 0)
(push) ; 7
(assert (not (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(declare-const $t@791@01 $Snap)
(assert (= $t@791@01 ($Snap.combine ($Snap.first $t@791@01) ($Snap.second $t@791@01))))
(assert (=
  ($Snap.second $t@791@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@791@01))
    ($Snap.second ($Snap.second $t@791@01)))))
(assert (= ($Snap.first ($Snap.second $t@791@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 7
(declare-const $k@792@01 $Perm)
(assert ($Perm.isReadVar $k@792@01))
(assert (< $k@792@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@792@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@792@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@791@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@792@01))
(assert (and
  (< $k@792@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@792@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@791@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@791@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(assert (=
  ($Snap.second ($Snap.second $t@791@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@791@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@791@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@791@01))) $Snap.unit))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@793@01 $Perm)
(assert ($Perm.isReadVar $k@793@01))
(assert (< $k@793@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@793@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@793@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@794@01 $Perm)
(assert ($Perm.isReadVar $k@794@01))
(assert (< $k@794@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@794@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@794@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@794@01))
(assert (and (< $k@794@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@794@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@791@01)
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@793@01))
(assert ($Perm.isReadVar $k@794@01))
(assert (and
  (< $k@793@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@793@01))
  (< $k@794@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@794@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@791@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first $t@791@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  value_V0@652@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@791@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@791@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@791@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@791@01))))
  $Snap.unit))
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)| == old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@795@01 $Perm)
(assert ($Perm.isReadVar $k@795@01))
(assert (< $k@795@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@795@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@795@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@796@01 $Perm)
(assert ($Perm.isReadVar $k@796@01))
(assert (< $k@796@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@796@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@796@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@796@01))
(assert (and (< $k@796@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@796@01))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@795@01))
(assert ($Perm.isReadVar $k@796@01))
(assert (and
  (< $k@795@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@795@01))
  (< $k@796@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@796@01))))
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@797@01 $Perm)
(assert ($Perm.isReadVar $k@797@01))
(assert (< $k@797@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@797@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@797@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@798@01 $Perm)
(assert ($Perm.isReadVar $k@798@01))
(assert (< $k@798@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@798@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@798@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@798@01))
(assert (and (< $k@798@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@798@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@797@01))
(assert ($Perm.isReadVar $k@798@01))
(assert (and
  (< $k@797@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@797@01))
  (< $k@798@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@798@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
; [eval] ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 7
(declare-const $k@799@01 $Perm)
(assert ($Perm.isReadVar $k@799@01))
(assert (< $k@799@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@799@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@799@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@800@01 $Perm)
(assert ($Perm.isReadVar $k@800@01))
(assert (< $k@800@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@800@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@800@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@800@01))
(assert (and (< $k@800@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@800@01))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@799@01))
(assert ($Perm.isReadVar $k@800@01))
(assert (and
  (< $k@799@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@799@01))
  (< $k@800@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@800@01))))
(set-option :timeout 0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  value_V0@652@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 501 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(First:(Second:(Second:($t@655@01))))), lowerBound_V0@653@01, optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01)))))) | live]
; [else-branch: 501 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(First:(Second:(Second:($t@655@01))))), lowerBound_V0@653@01, optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 501 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(First:(Second:(Second:($t@655@01))))), lowerBound_V0@653@01, optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))))]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  value_V0@652@01))
(pop) ; 8
(push) ; 8
; [else-branch: 501 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(First:(Second:(Second:($t@655@01))))), lowerBound_V0@653@01, optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01)))))))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    value_V0@652@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      value_V0@652@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    value_V0@652@01)))
(assert (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@791@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
  (+
    (Seq_length
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
    (ite
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        value_V0@652@01)
      0
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@791@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@791@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@791@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@791@01)))))
  $Snap.unit))
; [eval] (forall i_V1: Int :: { (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) } { (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) } (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
(declare-const i_V1@801@01 Int)
(push) ; 7
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 8
(declare-const $k@802@01 $Perm)
(assert ($Perm.isReadVar $k@802@01))
(assert (< $k@802@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@802@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@802@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@803@01 $Perm)
(assert ($Perm.isReadVar $k@803@01))
(assert (< $k@803@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@803@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@803@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@803@01))
(assert (and (< $k@803@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@803@01))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@802@01))
(assert ($Perm.isReadVar $k@803@01))
(assert (and
  (< $k@802@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@802@01))
  (< $k@803@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@803@01))))
(set-option :timeout 0)
(push) ; 8
; [then-branch: 502 | i_V1@801@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(First:(Second:(Second:($t@655@01))))), lowerBound_V0@653@01, optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01)))))) | live]
; [else-branch: 502 | !(i_V1@801@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(First:(Second:(Second:($t@655@01))))), lowerBound_V0@653@01, optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))))) | live]
(push) ; 9
; [then-branch: 502 | i_V1@801@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(First:(Second:(Second:($t@655@01))))), lowerBound_V0@653@01, optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))))]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  i_V1@801@01))
; [eval] (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@804@01 $Perm)
(assert ($Perm.isReadVar $k@804@01))
(assert (< $k@804@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@804@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@804@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@805@01 $Perm)
(assert ($Perm.isReadVar $k@805@01))
(assert (< $k@805@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@805@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@805@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@805@01))
(assert (and (< $k@805@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@805@01))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@804@01))
(assert ($Perm.isReadVar $k@805@01))
(assert (and
  (< $k@804@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@804@01))
  (< $k@805@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@805@01))))
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 502 | !(i_V1@801@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(First:(Second:(Second:($t@655@01))))), lowerBound_V0@653@01, optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01)))))))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    i_V1@801@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@804@01))
(assert ($Perm.isReadVar $k@805@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    i_V1@801@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      i_V1@801@01)
    (< $k@804@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@804@01))
    (< $k@805@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@805@01)))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      i_V1@801@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    i_V1@801@01)))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@802@01))
(assert ($Perm.isReadVar $k@803@01))
(assert ($Perm.isReadVar $k@804@01))
(assert ($Perm.isReadVar $k@805@01))
(assert (< $k@802@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@802@01)))
(assert (< $k@803@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@803@01)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@801@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        i_V1@801@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          i_V1@801@01)
        (< $k@804@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@804@01))
        (< $k@805@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@805@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          i_V1@801@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        i_V1@801@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    i_V1@801@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@801@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        i_V1@801@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          i_V1@801@01)
        (< $k@804@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@804@01))
        (< $k@805@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@805@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          i_V1@801@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        i_V1@801@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@791@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    i_V1@801@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@801@01 Int)) (!
  (=>
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      i_V1@801@01)
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first $t@791@01)
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      i_V1@801@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    i_V1@801@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@791@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    i_V1@801@01))
  :qid |prog.l1438|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@791@01)))))
  $Snap.unit))
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 7
(declare-const $k@806@01 $Perm)
(assert ($Perm.isReadVar $k@806@01))
(assert (< $k@806@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@806@01)))
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@806@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@807@01 $Perm)
(assert ($Perm.isReadVar $k@807@01))
(assert (< $k@807@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@807@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@807@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@807@01))
(assert (and (< $k@807@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@807@01))))
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@806@01))
(assert ($Perm.isReadVar $k@807@01))
(assert (and
  (< $k@806@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@806@01))
  (< $k@807@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@807@01))))
(set-option :timeout 0)
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  value_V0@652@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 503 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(First:(Second:(Second:($t@655@01))))), lowerBound_V0@653@01, optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01)))))) | live]
; [else-branch: 503 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(First:(Second:(Second:($t@655@01))))), lowerBound_V0@653@01, optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))))) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 503 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(First:(Second:(Second:($t@655@01))))), lowerBound_V0@653@01, optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))))]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  value_V0@652@01))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@808@01 $Perm)
(assert ($Perm.isReadVar $k@808@01))
(assert (< $k@808@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@808@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@808@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@809@01 $Perm)
(assert ($Perm.isReadVar $k@809@01))
(assert (< $k@809@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@809@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@809@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@809@01))
(assert (and (< $k@809@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@809@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@808@01))
(assert ($Perm.isReadVar $k@809@01))
(assert (and
  (< $k@808@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@808@01))
  (< $k@809@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@809@01))))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@810@01 $Perm)
(assert ($Perm.isReadVar $k@810@01))
(assert (< $k@810@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@810@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@810@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@811@01 $Perm)
(assert ($Perm.isReadVar $k@811@01))
(assert (< $k@811@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@811@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@811@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@811@01))
(assert (and (< $k@811@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@811@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@810@01))
(assert ($Perm.isReadVar $k@811@01))
(assert (and
  (< $k@810@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@810@01))
  (< $k@811@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@811@01))))
(pop) ; 8
(set-option :timeout 0)
(push) ; 8
; [else-branch: 503 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(First:(Second:(Second:($t@655@01))))), lowerBound_V0@653@01, optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01)))))))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    value_V0@652@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert ($Perm.isReadVar $k@808@01))
(assert ($Perm.isReadVar $k@809@01))
(assert ($Perm.isReadVar $k@810@01))
(assert ($Perm.isReadVar $k@811@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    value_V0@652@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      value_V0@652@01)
    (< $k@808@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@808@01))
    (< $k@809@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@809@01))
    (< $k@810@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@810@01))
    (< $k@811@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@811@01)))))
; Joined path conditions
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    value_V0@652@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@791@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) lowerBound_V0@653@01 (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 504 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 504 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 504 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
; [then-branch: 505 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 505 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 8
; [else-branch: 505 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine ($Snap.first $t@791@01) $Snap.unit)))) n_V0@651@01))
; [exec]
; label returnLabel
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@812@01 $Perm)
(assert ($Perm.isReadVar $k@812@01))
(assert (< $k@812@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@812@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@812@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine ($Snap.first $t@791@01) $Snap.unit)))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@812@01))
(assert (and
  (< $k@812@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@812@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
        ($Snap.combine ($Snap.first $t@791@01) $Snap.unit)))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine ($Snap.first $t@791@01) $Snap.unit)))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine ($Snap.first $t@791@01) $Snap.unit)))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@813@01 $Perm)
(assert ($Perm.isReadVar $k@813@01))
(assert (< $k@813@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@813@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@813@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@814@01 $Perm)
(assert ($Perm.isReadVar $k@814@01))
(assert (< $k@814@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@814@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@814@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@814@01))
(assert (and (< $k@814@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@814@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
        ($Snap.combine ($Snap.first $t@791@01) $Snap.unit))))
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@813@01))
(assert ($Perm.isReadVar $k@814@01))
(assert (and
  (< $k@813@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@813@01))
  (< $k@814@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@814@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine ($Snap.first $t@791@01) $Snap.unit))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine ($Snap.first $t@791@01) $Snap.unit))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine ($Snap.first $t@791@01) $Snap.unit))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)| == old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@815@01 $Perm)
(assert ($Perm.isReadVar $k@815@01))
(assert (< $k@815@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@815@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@815@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@816@01 $Perm)
(assert ($Perm.isReadVar $k@816@01))
(assert (< $k@816@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@816@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@816@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@816@01))
(assert (and (< $k@816@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@816@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@815@01))
(assert ($Perm.isReadVar $k@816@01))
(assert (and
  (< $k@815@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@815@01))
  (< $k@816@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@816@01))))
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@817@01 $Perm)
(assert ($Perm.isReadVar $k@817@01))
(assert (< $k@817@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@817@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@817@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@818@01 $Perm)
(assert ($Perm.isReadVar $k@818@01))
(assert (< $k@818@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@818@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@818@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@818@01))
(assert (and (< $k@818@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@818@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@817@01))
(assert ($Perm.isReadVar $k@818@01))
(assert (and
  (< $k@817@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@817@01))
  (< $k@818@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@818@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
; [eval] ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@819@01 $Perm)
(assert ($Perm.isReadVar $k@819@01))
(assert (< $k@819@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@819@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@819@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@820@01 $Perm)
(assert ($Perm.isReadVar $k@820@01))
(assert (< $k@820@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@820@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@820@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@820@01))
(assert (and (< $k@820@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@820@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@819@01))
(assert ($Perm.isReadVar $k@820@01))
(assert (and
  (< $k@819@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@819@01))
  (< $k@820@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@820@01))))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 506 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 506 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 506 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
(pop) ; 10
(push) ; 10
; [else-branch: 506 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      value_V0@652@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)))
(push) ; 9
(assert (not (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine ($Snap.first $t@791@01) $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
  (+
    (Seq_length
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
    (ite
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        value_V0@652@01)
      0
      1)))))
(check-sat)
; unsat
(pop) ; 9
; 0.13s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine ($Snap.first $t@791@01) $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
  (+
    (Seq_length
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
    (ite
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        value_V0@652@01)
      0
      1))))
; [eval] (forall i_V1: Int :: { (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) } { (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) } (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
(declare-const i_V1@821@01 Int)
(push) ; 9
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@822@01 $Perm)
(assert ($Perm.isReadVar $k@822@01))
(assert (< $k@822@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@822@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@822@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@823@01 $Perm)
(assert ($Perm.isReadVar $k@823@01))
(assert (< $k@823@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@823@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@823@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@823@01))
(assert (and (< $k@823@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@823@01))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@822@01))
(assert ($Perm.isReadVar $k@823@01))
(assert (and
  (< $k@822@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@822@01))
  (< $k@823@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@823@01))))
(set-option :timeout 0)
(push) ; 10
; [then-branch: 507 | i_V1@821@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 507 | !(i_V1@821@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(push) ; 11
; [then-branch: 507 | i_V1@821@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  i_V1@821@01))
; [eval] (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 12
(declare-const $k@824@01 $Perm)
(assert ($Perm.isReadVar $k@824@01))
(assert (< $k@824@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@824@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@824@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@825@01 $Perm)
(assert ($Perm.isReadVar $k@825@01))
(assert (< $k@825@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@825@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@825@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@825@01))
(assert (and (< $k@825@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@825@01))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@824@01))
(assert ($Perm.isReadVar $k@825@01))
(assert (and
  (< $k@824@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@824@01))
  (< $k@825@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@825@01))))
(pop) ; 11
(set-option :timeout 0)
(push) ; 11
; [else-branch: 507 | !(i_V1@821@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@821@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@824@01))
(assert ($Perm.isReadVar $k@825@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@821@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@821@01)
    (< $k@824@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@824@01))
    (< $k@825@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@825@01)))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@821@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@821@01)))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@822@01))
(assert ($Perm.isReadVar $k@823@01))
(assert ($Perm.isReadVar $k@824@01))
(assert ($Perm.isReadVar $k@825@01))
(assert (< $k@822@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@822@01)))
(assert (< $k@823@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@823@01)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@821@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@821@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@821@01)
        (< $k@824@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@824@01))
        (< $k@825@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@825@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@821@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@821@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@821@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@821@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@821@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@821@01)
        (< $k@824@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@824@01))
        (< $k@825@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@825@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@821@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@821@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine ($Snap.first $t@791@01) $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@821@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@821@01 Int)) (!
  (and
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@821@01)
      (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine ($Snap.first $t@791@01) $Snap.unit))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@821@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine ($Snap.first $t@791@01) $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@821@01))
  :qid |prog.l1438_precondition|)))
(push) ; 9
(assert (not (forall ((i_V1@821@01 Int)) (!
  (=>
    (and
      (and
        (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        (=>
          (Seq_contains
            (sortedValues_4b5075e4_PMnode ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
              $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
            i_V1@821@01)
          (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
                  ($Snap.combine ($Snap.first $t@791@01) $Snap.unit))))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@821@01))
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine ($Snap.first $t@791@01) $Snap.unit))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@821@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@821@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine ($Snap.first $t@791@01) $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@821@01))
  :qid |prog.l1438|))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(assert (forall ((i_V1@821@01 Int)) (!
  (=>
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@821@01)
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine ($Snap.first $t@791@01) $Snap.unit))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@821@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@821@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine ($Snap.first $t@791@01) $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@821@01))
  :qid |prog.l1438|)))
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@826@01 $Perm)
(assert ($Perm.isReadVar $k@826@01))
(assert (< $k@826@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@826@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@826@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@827@01 $Perm)
(assert ($Perm.isReadVar $k@827@01))
(assert (< $k@827@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@827@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@827@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@827@01))
(assert (and (< $k@827@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@827@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@826@01))
(assert ($Perm.isReadVar $k@827@01))
(assert (and
  (< $k@826@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@826@01))
  (< $k@827@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@827@01))))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 508 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 508 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 508 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 11
(declare-const $k@828@01 $Perm)
(assert ($Perm.isReadVar $k@828@01))
(assert (< $k@828@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@828@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@828@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@829@01 $Perm)
(assert ($Perm.isReadVar $k@829@01))
(assert (< $k@829@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@829@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@829@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@829@01))
(assert (and (< $k@829@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@829@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@828@01))
(assert ($Perm.isReadVar $k@829@01))
(assert (and
  (< $k@828@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@828@01))
  (< $k@829@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@829@01))))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@830@01 $Perm)
(assert ($Perm.isReadVar $k@830@01))
(assert (< $k@830@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@830@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@830@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@831@01 $Perm)
(assert ($Perm.isReadVar $k@831@01))
(assert (< $k@831@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@831@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@831@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@831@01))
(assert (and (< $k@831@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@831@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@830@01))
(assert ($Perm.isReadVar $k@831@01))
(assert (and
  (< $k@830@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@830@01))
  (< $k@831@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@831@01))))
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 508 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@828@01))
(assert ($Perm.isReadVar $k@829@01))
(assert ($Perm.isReadVar $k@830@01))
(assert ($Perm.isReadVar $k@831@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      value_V0@652@01)
    (< $k@828@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@828@01))
    (< $k@829@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@829@01))
    (< $k@830@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@830@01))
    (< $k@831@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@831@01)))))
; Joined path conditions
(push) ; 9
(assert (not (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine ($Snap.first $t@791@01) $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine ($Snap.first $t@791@01) $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 496 | !(value_V0@652@01 < First:(First:(Second:(Second:($t@655@01)))))]
(assert (not
  (<
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(pop) ; 5
; [eval] !(value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$)
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 509 | !(value_V0@652@01 < First:(First:(Second:(Second:($t@655@01))))) | live]
; [else-branch: 509 | value_V0@652@01 < First:(First:(Second:(Second:($t@655@01)))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 509 | !(value_V0@652@01 < First:(First:(Second:(Second:($t@655@01)))))]
(assert (not
  (<
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 510 | value_V0@652@01 > First:(First:(Second:(Second:($t@655@01)))) | live]
; [else-branch: 510 | !(value_V0@652@01 > First:(First:(Second:(Second:($t@655@01))))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 510 | value_V0@652@01 > First:(First:(Second:(Second:($t@655@01))))]
(assert (>
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 511 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 511 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 511 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; var N15: ShStruct3[Ref, Ref, Ref]
(declare-const N15@832@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; var fn$$4: ShStruct3[Ref, Ref, Ref]
(declare-const fn$$4@833@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; inhale (let fn$$5 ==
;     (fn$$4) in
;     acc((ShStructget0of3(fn$$5): Ref).Intint$$$$_E_$$$, write) &&
;     (acc((ShStructget1of3(fn$$5): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$, write) &&
;     acc((ShStructget2of3(fn$$5): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$, write))) &&
;   (let fn$$6 ==
;     (fn$$4) in
;     (let fn$$7 ==
;       ((tuple3(value_V0_CN1, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(),
;       shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()): Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]])) in
;       (ShStructget0of3(fn$$6): Ref).Intint$$$$_E_$$$ ==
;       (get0of3(fn$$7): Int) &&
;       ((ShStructget1of3(fn$$6): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ ==
;       (get1of3(fn$$7): ShStruct3[Ref, Ref, Ref]) &&
;       (ShStructget2of3(fn$$6): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ ==
;       (get2of3(fn$$7): ShStruct3[Ref, Ref, Ref]))))
(declare-const $t@834@01 $Snap)
(assert (= $t@834@01 ($Snap.combine ($Snap.first $t@834@01) ($Snap.second $t@834@01))))
(assert (=
  ($Snap.first $t@834@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@834@01))
    ($Snap.second ($Snap.first $t@834@01)))))
; [eval] (ShStructget0of3(fn$$5): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (= (ShStructget0of3<Ref> n_V0@651@01) (ShStructget0of3<Ref> fn$$4@833@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget0of3<Ref> fn$$4@833@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first $t@834@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@834@01)))
    ($Snap.second ($Snap.second ($Snap.first $t@834@01))))))
; [eval] (ShStructget1of3(fn$$5): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> n_V0@651@01) (ShStructget1of3<Ref> fn$$4@833@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= (ShStructget2of3<Ref> n_V0@651@01) (ShStructget1of3<Ref> fn$$4@833@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget1of3<Ref> fn$$4@833@01) $Ref.null)))
; [eval] (ShStructget2of3(fn$$5): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= (ShStructget2of3<Ref> n_V0@651@01) (ShStructget2of3<Ref> fn$$4@833@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> n_V0@651@01) (ShStructget2of3<Ref> fn$$4@833@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> fn$$4@833@01) (ShStructget2of3<Ref> fn$$4@833@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget2of3<Ref> fn$$4@833@01) $Ref.null)))
(assert (= ($Snap.second $t@834@01) $Snap.unit))
; [eval] (let fn$$6 == (fn$$4) in (let fn$$7 == ((tuple3(value_V0_CN1, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()): Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]])) in (ShStructget0of3(fn$$6): Ref).Intint$$$$_E_$$$ == (get0of3(fn$$7): Int) && ((ShStructget1of3(fn$$6): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get1of3(fn$$7): ShStruct3[Ref, Ref, Ref]) && (ShStructget2of3(fn$$6): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get2of3(fn$$7): ShStruct3[Ref, Ref, Ref]))))
(declare-const letvar@835@01 ShStruct3<Ref~_Ref~_Ref>)
(assert (= (as letvar@835@01  ShStruct3<Ref~_Ref~_Ref>) fn$$4@833@01))
; [eval] (let fn$$7 == ((tuple3(value_V0_CN1, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()): Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]])) in (ShStructget0of3(fn$$6): Ref).Intint$$$$_E_$$$ == (get0of3(fn$$7): Int) && ((ShStructget1of3(fn$$6): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get1of3(fn$$7): ShStruct3[Ref, Ref, Ref]) && (ShStructget2of3(fn$$6): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get2of3(fn$$7): ShStruct3[Ref, Ref, Ref])))
; [eval] (tuple3(value_V0_CN1, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()): Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]])
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(declare-const letvar@836@01 Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>)
(assert (=
  (as letvar@836@01  Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>)
  (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget0of3(fn$$6): Ref).Intint$$$$_E_$$$ == (get0of3(fn$$7): Int) && ((ShStructget1of3(fn$$6): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get1of3(fn$$7): ShStruct3[Ref, Ref, Ref]) && (ShStructget2of3(fn$$6): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get2of3(fn$$7): ShStruct3[Ref, Ref, Ref]))
; [eval] (ShStructget0of3(fn$$6): Ref).Intint$$$$_E_$$$ == (get0of3(fn$$7): Int)
; [eval] (ShStructget0of3(fn$$6): Ref)
; [eval] (get0of3(fn$$7): Int)
(push) ; 8
; [then-branch: 512 | First:(First:($t@834@01)) == get0of3[Int](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))) | live]
; [else-branch: 512 | First:(First:($t@834@01)) != get0of3[Int](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))) | live]
(push) ; 9
; [then-branch: 512 | First:(First:($t@834@01)) == get0of3[Int](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)))]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@834@01)))
  (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
; [eval] (ShStructget1of3(fn$$6): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get1of3(fn$$7): ShStruct3[Ref, Ref, Ref])
; [eval] (ShStructget1of3(fn$$6): Ref)
; [eval] (get1of3(fn$$7): ShStruct3[Ref, Ref, Ref])
(push) ; 10
; [then-branch: 513 | First:(Second:(First:($t@834@01))) == get1of3[ShStruct3[Ref, Ref, Ref]](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))) | live]
; [else-branch: 513 | First:(Second:(First:($t@834@01))) != get1of3[ShStruct3[Ref, Ref, Ref]](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))) | live]
(push) ; 11
; [then-branch: 513 | First:(Second:(First:($t@834@01))) == get1of3[ShStruct3[Ref, Ref, Ref]](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)))]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@834@01))))
  (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
; [eval] (ShStructget2of3(fn$$6): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get2of3(fn$$7): ShStruct3[Ref, Ref, Ref])
; [eval] (ShStructget2of3(fn$$6): Ref)
; [eval] (get2of3(fn$$7): ShStruct3[Ref, Ref, Ref])
(pop) ; 11
(push) ; 11
; [else-branch: 513 | First:(Second:(First:($t@834@01))) != get1of3[ShStruct3[Ref, Ref, Ref]](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)))]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@834@01))))
    (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@834@01))))
      (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@834@01))))
    (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(pop) ; 9
(push) ; 9
; [else-branch: 512 | First:(First:($t@834@01)) != get0of3[Int](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)))]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@834@01)))
    (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@834@01)))
    (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
  (and
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@834@01)))
      (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
    (or
      (not
        (=
          ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@834@01))))
          (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@834@01))))
        (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))))
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@834@01)))
      (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@834@01)))
    (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(assert (and
  (and
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.second ($Snap.second ($Snap.first $t@834@01))))
      (get2of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@834@01))))
      (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@834@01)))
    (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; N15 := fn$$4
; [exec]
; (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ := N15
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> fn$$4@833@01) (ShStructget2of3<Ref> n_V0@651@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> n_V0@651@01) (ShStructget2of3<Ref> n_V0@651@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= (ShStructget2of3<Ref> fn$$4@833@01) (ShStructget2of3<Ref> n_V0@651@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(tree_4b5075e4_PMnode((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$), write)
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@834@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 514 | First:(Second:(First:($t@834@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 514 | First:(Second:(First:($t@834@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 514 | First:(Second:(First:($t@834@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@834@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.second ($Snap.second ($Snap.first $t@834@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 515 | Second:(Second:(First:($t@834@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 515 | Second:(Second:(First:($t@834@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 515 | Second:(Second:(First:($t@834@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.second ($Snap.second ($Snap.first $t@834@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first $t@834@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@834@01)))
    ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.first $t@834@01)))
      ($Snap.combine $Snap.unit $Snap.unit)))) fn$$4@833@01))
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
  fn$$4@833@01)))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 516 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 516 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 516 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  fn$$4@833@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    fn$$4@833@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 517 | fn$$4@833@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 517 | fn$$4@833@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 517 | fn$$4@833@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    fn$$4@833@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget2of3(n_V0): Ref)
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@833@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        ($Snap.combine
          ($Snap.first ($Snap.first $t@834@01))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first $t@834@01)))
            ($Snap.combine
              ($Snap.second ($Snap.second ($Snap.first $t@834@01)))
              ($Snap.combine $Snap.unit $Snap.unit)))))))) n_V0@651@01))
; [exec]
; label returnLabel
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 12
(declare-const $k@837@01 $Perm)
(assert ($Perm.isReadVar $k@837@01))
(assert (< $k@837@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@837@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@837@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@833@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        ($Snap.combine
          ($Snap.first ($Snap.first $t@834@01))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first $t@834@01)))
            ($Snap.combine
              ($Snap.second ($Snap.second ($Snap.first $t@834@01)))
              ($Snap.combine $Snap.unit $Snap.unit)))))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@837@01))
(assert (and
  (< $k@837@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@837@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@833@01)
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          ($Snap.combine
            ($Snap.first ($Snap.first $t@834@01))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.first $t@834@01)))
              ($Snap.combine
                ($Snap.second ($Snap.second ($Snap.first $t@834@01)))
                ($Snap.combine $Snap.unit $Snap.unit)))))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 12
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@833@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        ($Snap.combine
          ($Snap.first ($Snap.first $t@834@01))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first $t@834@01)))
            ($Snap.combine
              ($Snap.second ($Snap.second ($Snap.first $t@834@01)))
              ($Snap.combine $Snap.unit $Snap.unit)))))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@833@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        ($Snap.combine
          ($Snap.first ($Snap.first $t@834@01))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first $t@834@01)))
            ($Snap.combine
              ($Snap.second ($Snap.second ($Snap.first $t@834@01)))
              ($Snap.combine $Snap.unit $Snap.unit)))))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 12
(declare-const $k@838@01 $Perm)
(assert ($Perm.isReadVar $k@838@01))
(assert (< $k@838@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@838@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@838@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@839@01 $Perm)
(assert ($Perm.isReadVar $k@839@01))
(assert (< $k@839@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@839@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@839@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@839@01))
(assert (and (< $k@839@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@839@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@833@01)
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          ($Snap.combine
            ($Snap.first ($Snap.first $t@834@01))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.first $t@834@01)))
              ($Snap.combine
                ($Snap.second ($Snap.second ($Snap.first $t@834@01)))
                ($Snap.combine $Snap.unit $Snap.unit))))))))
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@838@01))
(assert ($Perm.isReadVar $k@839@01))
(assert (and
  (< $k@838@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@838@01))
  (< $k@839@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@839@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@833@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            ($Snap.combine
              ($Snap.first ($Snap.first $t@834@01))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.first $t@834@01)))
                ($Snap.combine
                  ($Snap.second ($Snap.second ($Snap.first $t@834@01)))
                  ($Snap.combine $Snap.unit $Snap.unit))))))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 12
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@833@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            ($Snap.combine
              ($Snap.first ($Snap.first $t@834@01))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.first $t@834@01)))
                ($Snap.combine
                  ($Snap.second ($Snap.second ($Snap.first $t@834@01)))
                  ($Snap.combine $Snap.unit $Snap.unit))))))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@833@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            ($Snap.combine
              ($Snap.first ($Snap.first $t@834@01))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.first $t@834@01)))
                ($Snap.combine
                  ($Snap.second ($Snap.second ($Snap.first $t@834@01)))
                  ($Snap.combine $Snap.unit $Snap.unit))))))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)| == old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 12
(declare-const $k@840@01 $Perm)
(assert ($Perm.isReadVar $k@840@01))
(assert (< $k@840@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@840@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@840@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@841@01 $Perm)
(assert ($Perm.isReadVar $k@841@01))
(assert (< $k@841@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@841@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@841@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@841@01))
(assert (and (< $k@841@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@841@01))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@840@01))
(assert ($Perm.isReadVar $k@841@01))
(assert (and
  (< $k@840@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@840@01))
  (< $k@841@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@841@01))))
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@842@01 $Perm)
(assert ($Perm.isReadVar $k@842@01))
(assert (< $k@842@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@842@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@842@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@843@01 $Perm)
(assert ($Perm.isReadVar $k@843@01))
(assert (< $k@843@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@843@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@843@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@843@01))
(assert (and (< $k@843@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@843@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@842@01))
(assert ($Perm.isReadVar $k@843@01))
(assert (and
  (< $k@842@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@842@01))
  (< $k@843@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@843@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
; [eval] ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@844@01 $Perm)
(assert ($Perm.isReadVar $k@844@01))
(assert (< $k@844@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@844@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@844@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@845@01 $Perm)
(assert ($Perm.isReadVar $k@845@01))
(assert (< $k@845@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@845@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@845@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@845@01))
(assert (and (< $k@845@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@845@01))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@844@01))
(assert ($Perm.isReadVar $k@845@01))
(assert (and
  (< $k@844@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@844@01))
  (< $k@845@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@845@01))))
(set-option :timeout 0)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 518 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | dead]
; [else-branch: 518 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 518 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)))
(push) ; 12
(assert (not (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@833@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              ($Snap.combine
                ($Snap.first ($Snap.first $t@834@01))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first $t@834@01)))
                  ($Snap.combine
                    ($Snap.second ($Snap.second ($Snap.first $t@834@01)))
                    ($Snap.combine $Snap.unit $Snap.unit))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
  (+
    (Seq_length
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
    1))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@833@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              ($Snap.combine
                ($Snap.first ($Snap.first $t@834@01))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first $t@834@01)))
                  ($Snap.combine
                    ($Snap.second ($Snap.second ($Snap.first $t@834@01)))
                    ($Snap.combine $Snap.unit $Snap.unit))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
  (+
    (Seq_length
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
    1)))
; [eval] (forall i_V1: Int :: { (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) } { (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) } (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
(declare-const i_V1@846@01 Int)
(push) ; 12
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 13
(declare-const $k@847@01 $Perm)
(assert ($Perm.isReadVar $k@847@01))
(assert (< $k@847@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@847@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@847@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 14
(declare-const $k@848@01 $Perm)
(assert ($Perm.isReadVar $k@848@01))
(assert (< $k@848@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@848@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@848@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@848@01))
(assert (and (< $k@848@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@848@01))))
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@847@01))
(assert ($Perm.isReadVar $k@848@01))
(assert (and
  (< $k@847@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@847@01))
  (< $k@848@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@848@01))))
(set-option :timeout 0)
(push) ; 13
; [then-branch: 519 | i_V1@846@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 519 | !(i_V1@846@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(push) ; 14
; [then-branch: 519 | i_V1@846@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  i_V1@846@01))
; [eval] (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 15
(declare-const $k@849@01 $Perm)
(assert ($Perm.isReadVar $k@849@01))
(assert (< $k@849@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@849@01)))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@849@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 16
(declare-const $k@850@01 $Perm)
(assert ($Perm.isReadVar $k@850@01))
(assert (< $k@850@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@850@01)))
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No $k@850@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@850@01))
(assert (and (< $k@850@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@850@01))))
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@849@01))
(assert ($Perm.isReadVar $k@850@01))
(assert (and
  (< $k@849@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@849@01))
  (< $k@850@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@850@01))))
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 519 | !(i_V1@846@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@846@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@849@01))
(assert ($Perm.isReadVar $k@850@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@846@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@846@01)
    (< $k@849@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@849@01))
    (< $k@850@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@850@01)))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@846@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@846@01)))
(pop) ; 12
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@847@01))
(assert ($Perm.isReadVar $k@848@01))
(assert ($Perm.isReadVar $k@849@01))
(assert ($Perm.isReadVar $k@850@01))
(assert (< $k@847@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@847@01)))
(assert (< $k@848@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@848@01)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@846@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@846@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@846@01)
        (< $k@849@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@849@01))
        (< $k@850@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@850@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@846@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@846@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@846@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@846@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@846@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@846@01)
        (< $k@849@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@849@01))
        (< $k@850@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@850@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@846@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@846@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@833@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              ($Snap.combine
                ($Snap.first ($Snap.first $t@834@01))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first $t@834@01)))
                  ($Snap.combine
                    ($Snap.second ($Snap.second ($Snap.first $t@834@01)))
                    ($Snap.combine $Snap.unit $Snap.unit))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@846@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@846@01 Int)) (!
  (and
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@846@01)
      (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@833@01)
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@834@01))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.first $t@834@01)))
                    ($Snap.combine
                      ($Snap.second ($Snap.second ($Snap.first $t@834@01)))
                      ($Snap.combine $Snap.unit $Snap.unit))))))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@846@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@833@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              ($Snap.combine
                ($Snap.first ($Snap.first $t@834@01))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first $t@834@01)))
                  ($Snap.combine
                    ($Snap.second ($Snap.second ($Snap.first $t@834@01)))
                    ($Snap.combine $Snap.unit $Snap.unit))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@846@01))
  :qid |prog.l1438_precondition|)))
(push) ; 12
(assert (not (forall ((i_V1@846@01 Int)) (!
  (=>
    (and
      (and
        (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        (=>
          (Seq_contains
            (sortedValues_4b5075e4_PMnode ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
              $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
            i_V1@846@01)
          (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
                ($Snap.combine
                  ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@833@01)
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
                    ($Snap.combine
                      ($Snap.first ($Snap.first $t@834@01))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.first $t@834@01)))
                        ($Snap.combine
                          ($Snap.second ($Snap.second ($Snap.first $t@834@01)))
                          ($Snap.combine $Snap.unit $Snap.unit))))))))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@846@01))
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@833@01)
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@834@01))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.first $t@834@01)))
                    ($Snap.combine
                      ($Snap.second ($Snap.second ($Snap.first $t@834@01)))
                      ($Snap.combine $Snap.unit $Snap.unit))))))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@846@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@846@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@833@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              ($Snap.combine
                ($Snap.first ($Snap.first $t@834@01))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first $t@834@01)))
                  ($Snap.combine
                    ($Snap.second ($Snap.second ($Snap.first $t@834@01)))
                    ($Snap.combine $Snap.unit $Snap.unit))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@846@01))
  :qid |prog.l1438|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i_V1@846@01 Int)) (!
  (=>
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@846@01)
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@833@01)
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@834@01))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.first $t@834@01)))
                    ($Snap.combine
                      ($Snap.second ($Snap.second ($Snap.first $t@834@01)))
                      ($Snap.combine $Snap.unit $Snap.unit))))))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@846@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@846@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@833@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              ($Snap.combine
                ($Snap.first ($Snap.first $t@834@01))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first $t@834@01)))
                  ($Snap.combine
                    ($Snap.second ($Snap.second ($Snap.first $t@834@01)))
                    ($Snap.combine $Snap.unit $Snap.unit))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@846@01))
  :qid |prog.l1438|)))
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 12
(declare-const $k@851@01 $Perm)
(assert ($Perm.isReadVar $k@851@01))
(assert (< $k@851@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@851@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@851@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@852@01 $Perm)
(assert ($Perm.isReadVar $k@852@01))
(assert (< $k@852@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@852@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@852@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@852@01))
(assert (and (< $k@852@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@852@01))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@851@01))
(assert ($Perm.isReadVar $k@852@01))
(assert (and
  (< $k@851@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@851@01))
  (< $k@852@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@852@01))))
(set-option :timeout 0)
(push) ; 12
; [then-branch: 520 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | dead]
; [else-branch: 520 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(push) ; 13
; [else-branch: 520 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
; [then-branch: 521 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 521 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 7
; [else-branch: 521 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 510 | !(value_V0@652@01 > First:(First:(Second:(Second:($t@655@01)))))]
(assert (not
  (>
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(pop) ; 6
; [eval] !(value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$)
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 522 | !(value_V0@652@01 > First:(First:(Second:(Second:($t@655@01))))) | live]
; [else-branch: 522 | value_V0@652@01 > First:(First:(Second:(Second:($t@655@01)))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 522 | !(value_V0@652@01 > First:(First:(Second:(Second:($t@655@01)))))]
(assert (not
  (>
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 523 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 523 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 523 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
; [then-branch: 524 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 524 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 8
; [else-branch: 524 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit)))) n_V0@651@01))
; [exec]
; label returnLabel
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@853@01 $Perm)
(assert ($Perm.isReadVar $k@853@01))
(assert (< $k@853@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@853@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@853@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit)))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@853@01))
(assert (and
  (< $k@853@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@853@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          $Snap.unit)))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit)))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit)))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@854@01 $Perm)
(assert ($Perm.isReadVar $k@854@01))
(assert (< $k@854@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@854@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@854@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@855@01 $Perm)
(assert ($Perm.isReadVar $k@855@01))
(assert (< $k@855@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@855@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@855@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@855@01))
(assert (and (< $k@855@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@855@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          $Snap.unit))))
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@854@01))
(assert ($Perm.isReadVar $k@855@01))
(assert (and
  (< $k@854@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@854@01))
  (< $k@855@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@855@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            $Snap.unit))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            $Snap.unit))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            $Snap.unit))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)| == old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@856@01 $Perm)
(assert ($Perm.isReadVar $k@856@01))
(assert (< $k@856@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@856@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@856@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@857@01 $Perm)
(assert ($Perm.isReadVar $k@857@01))
(assert (< $k@857@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@857@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@857@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@857@01))
(assert (and (< $k@857@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@857@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@856@01))
(assert ($Perm.isReadVar $k@857@01))
(assert (and
  (< $k@856@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@856@01))
  (< $k@857@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@857@01))))
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@858@01 $Perm)
(assert ($Perm.isReadVar $k@858@01))
(assert (< $k@858@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@858@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@858@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@859@01 $Perm)
(assert ($Perm.isReadVar $k@859@01))
(assert (< $k@859@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@859@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@859@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@859@01))
(assert (and (< $k@859@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@859@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@858@01))
(assert ($Perm.isReadVar $k@859@01))
(assert (and
  (< $k@858@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@858@01))
  (< $k@859@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@859@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
; [eval] ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@860@01 $Perm)
(assert ($Perm.isReadVar $k@860@01))
(assert (< $k@860@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@860@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@860@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@861@01 $Perm)
(assert ($Perm.isReadVar $k@861@01))
(assert (< $k@861@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@861@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@861@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@861@01))
(assert (and (< $k@861@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@861@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@860@01))
(assert ($Perm.isReadVar $k@861@01))
(assert (and
  (< $k@860@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@860@01))
  (< $k@861@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@861@01))))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 525 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 525 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 525 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
(push) ; 9
(assert (not (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))))
; [eval] (forall i_V1: Int :: { (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) } { (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) } (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
(declare-const i_V1@862@01 Int)
(push) ; 9
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@863@01 $Perm)
(assert ($Perm.isReadVar $k@863@01))
(assert (< $k@863@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@863@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@863@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@864@01 $Perm)
(assert ($Perm.isReadVar $k@864@01))
(assert (< $k@864@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@864@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@864@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@864@01))
(assert (and (< $k@864@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@864@01))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@863@01))
(assert ($Perm.isReadVar $k@864@01))
(assert (and
  (< $k@863@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@863@01))
  (< $k@864@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@864@01))))
(set-option :timeout 0)
(push) ; 10
; [then-branch: 526 | i_V1@862@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 526 | !(i_V1@862@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(push) ; 11
; [then-branch: 526 | i_V1@862@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  i_V1@862@01))
; [eval] (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 12
(declare-const $k@865@01 $Perm)
(assert ($Perm.isReadVar $k@865@01))
(assert (< $k@865@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@865@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@865@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@866@01 $Perm)
(assert ($Perm.isReadVar $k@866@01))
(assert (< $k@866@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@866@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@866@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@866@01))
(assert (and (< $k@866@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@866@01))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@865@01))
(assert ($Perm.isReadVar $k@866@01))
(assert (and
  (< $k@865@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@865@01))
  (< $k@866@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@866@01))))
(pop) ; 11
(set-option :timeout 0)
(push) ; 11
; [else-branch: 526 | !(i_V1@862@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@862@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@865@01))
(assert ($Perm.isReadVar $k@866@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@862@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@862@01)
    (< $k@865@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@865@01))
    (< $k@866@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@866@01)))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@862@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@862@01)))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@863@01))
(assert ($Perm.isReadVar $k@864@01))
(assert ($Perm.isReadVar $k@865@01))
(assert ($Perm.isReadVar $k@866@01))
(assert (< $k@863@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@863@01)))
(assert (< $k@864@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@864@01)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@862@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@862@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@862@01)
        (< $k@865@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@865@01))
        (< $k@866@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@866@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@862@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@862@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@862@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@862@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@862@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@862@01)
        (< $k@865@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@865@01))
        (< $k@866@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@866@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@862@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@862@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@862@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@862@01 Int)) (!
  (and
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@862@01)
      (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
                $Snap.unit))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@862@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@862@01))
  :qid |prog.l1438_precondition|)))
(push) ; 9
(assert (not (forall ((i_V1@862@01 Int)) (!
  (=>
    (and
      (and
        (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        (=>
          (Seq_contains
            (sortedValues_4b5075e4_PMnode ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
              $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
            i_V1@862@01)
          (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
                    $Snap.unit))))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@862@01))
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
                $Snap.unit))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@862@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@862@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@862@01))
  :qid |prog.l1438|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i_V1@862@01 Int)) (!
  (=>
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@862@01)
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
                $Snap.unit))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@862@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@862@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@862@01))
  :qid |prog.l1438|)))
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@867@01 $Perm)
(assert ($Perm.isReadVar $k@867@01))
(assert (< $k@867@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@867@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@867@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@868@01 $Perm)
(assert ($Perm.isReadVar $k@868@01))
(assert (< $k@868@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@868@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@868@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@868@01))
(assert (and (< $k@868@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@868@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@867@01))
(assert ($Perm.isReadVar $k@868@01))
(assert (and
  (< $k@867@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@867@01))
  (< $k@868@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@868@01))))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 527 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 527 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 527 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 11
(declare-const $k@869@01 $Perm)
(assert ($Perm.isReadVar $k@869@01))
(assert (< $k@869@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@869@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@869@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@870@01 $Perm)
(assert ($Perm.isReadVar $k@870@01))
(assert (< $k@870@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@870@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@870@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@870@01))
(assert (and (< $k@870@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@870@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@869@01))
(assert ($Perm.isReadVar $k@870@01))
(assert (and
  (< $k@869@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@869@01))
  (< $k@870@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@870@01))))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@871@01 $Perm)
(assert ($Perm.isReadVar $k@871@01))
(assert (< $k@871@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@871@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@871@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@872@01 $Perm)
(assert ($Perm.isReadVar $k@872@01))
(assert (< $k@872@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@872@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@872@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@872@01))
(assert (and (< $k@872@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@872@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@871@01))
(assert ($Perm.isReadVar $k@872@01))
(assert (and
  (< $k@871@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@871@01))
  (< $k@872@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@872@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@869@01))
(assert ($Perm.isReadVar $k@870@01))
(assert ($Perm.isReadVar $k@871@01))
(assert ($Perm.isReadVar $k@872@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (and
    (< $k@869@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@869@01))
    (< $k@870@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@870@01))
    (< $k@871@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@871@01))
    (< $k@872@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@872@01)))))
(set-option :timeout 0)
(push) ; 9
(assert (not (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
              $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 522 | value_V0@652@01 > First:(First:(Second:(Second:($t@655@01))))]
(assert (>
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 509 | value_V0@652@01 < First:(First:(Second:(Second:($t@655@01))))]
(assert (<
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 461 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  $Snap.unit))
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 4
(pop) ; 4
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 528 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 528 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 528 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget2of3(n_V0): Ref)
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMnode%trigger ($Snap.first ($Snap.second ($Snap.second $t@655@01))) n_V0@651@01))
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 529 | value_V0@652@01 < First:(First:(Second:(Second:($t@655@01)))) | live]
; [else-branch: 529 | !(value_V0@652@01 < First:(First:(Second:(Second:($t@655@01))))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 529 | value_V0@652@01 < First:(First:(Second:(Second:($t@655@01))))]
(assert (<
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 530 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 530 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 530 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; var N16: ShStruct3[Ref, Ref, Ref]
(declare-const N16@873@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; var fn$$0: ShStruct3[Ref, Ref, Ref]
(declare-const fn$$0@874@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; inhale (let fn$$1 ==
;     (fn$$0) in
;     acc((ShStructget0of3(fn$$1): Ref).Intint$$$$_E_$$$, write) &&
;     (acc((ShStructget1of3(fn$$1): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$, write) &&
;     acc((ShStructget2of3(fn$$1): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$, write))) &&
;   (let fn$$2 ==
;     (fn$$0) in
;     (let fn$$3 ==
;       ((tuple3(value_V0_CN1, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(),
;       shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()): Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]])) in
;       (ShStructget0of3(fn$$2): Ref).Intint$$$$_E_$$$ ==
;       (get0of3(fn$$3): Int) &&
;       ((ShStructget1of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ ==
;       (get1of3(fn$$3): ShStruct3[Ref, Ref, Ref]) &&
;       (ShStructget2of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ ==
;       (get2of3(fn$$3): ShStruct3[Ref, Ref, Ref]))))
(declare-const $t@875@01 $Snap)
(assert (= $t@875@01 ($Snap.combine ($Snap.first $t@875@01) ($Snap.second $t@875@01))))
(assert (=
  ($Snap.first $t@875@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@875@01))
    ($Snap.second ($Snap.first $t@875@01)))))
; [eval] (ShStructget0of3(fn$$1): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget0of3<Ref> n_V0@651@01) (ShStructget0of3<Ref> fn$$0@874@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget0of3<Ref> fn$$0@874@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first $t@875@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@875@01)))
    ($Snap.second ($Snap.second ($Snap.first $t@875@01))))))
; [eval] (ShStructget1of3(fn$$1): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> n_V0@651@01) (ShStructget1of3<Ref> fn$$0@874@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget2of3<Ref> n_V0@651@01) (ShStructget1of3<Ref> fn$$0@874@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget1of3<Ref> fn$$0@874@01) $Ref.null)))
; [eval] (ShStructget2of3(fn$$1): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget2of3<Ref> n_V0@651@01) (ShStructget2of3<Ref> fn$$0@874@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> n_V0@651@01) (ShStructget2of3<Ref> fn$$0@874@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> fn$$0@874@01) (ShStructget2of3<Ref> fn$$0@874@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget2of3<Ref> fn$$0@874@01) $Ref.null)))
(assert (= ($Snap.second $t@875@01) $Snap.unit))
; [eval] (let fn$$2 == (fn$$0) in (let fn$$3 == ((tuple3(value_V0_CN1, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()): Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]])) in (ShStructget0of3(fn$$2): Ref).Intint$$$$_E_$$$ == (get0of3(fn$$3): Int) && ((ShStructget1of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get1of3(fn$$3): ShStruct3[Ref, Ref, Ref]) && (ShStructget2of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get2of3(fn$$3): ShStruct3[Ref, Ref, Ref]))))
(declare-const letvar@876@01 ShStruct3<Ref~_Ref~_Ref>)
(assert (= (as letvar@876@01  ShStruct3<Ref~_Ref~_Ref>) fn$$0@874@01))
; [eval] (let fn$$3 == ((tuple3(value_V0_CN1, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()): Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]])) in (ShStructget0of3(fn$$2): Ref).Intint$$$$_E_$$$ == (get0of3(fn$$3): Int) && ((ShStructget1of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get1of3(fn$$3): ShStruct3[Ref, Ref, Ref]) && (ShStructget2of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get2of3(fn$$3): ShStruct3[Ref, Ref, Ref])))
; [eval] (tuple3(value_V0_CN1, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()): Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]])
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(declare-const letvar@877@01 Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>)
(assert (=
  (as letvar@877@01  Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>)
  (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget0of3(fn$$2): Ref).Intint$$$$_E_$$$ == (get0of3(fn$$3): Int) && ((ShStructget1of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get1of3(fn$$3): ShStruct3[Ref, Ref, Ref]) && (ShStructget2of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get2of3(fn$$3): ShStruct3[Ref, Ref, Ref]))
; [eval] (ShStructget0of3(fn$$2): Ref).Intint$$$$_E_$$$ == (get0of3(fn$$3): Int)
; [eval] (ShStructget0of3(fn$$2): Ref)
; [eval] (get0of3(fn$$3): Int)
(push) ; 7
; [then-branch: 531 | First:(First:($t@875@01)) == get0of3[Int](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))) | live]
; [else-branch: 531 | First:(First:($t@875@01)) != get0of3[Int](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))) | live]
(push) ; 8
; [then-branch: 531 | First:(First:($t@875@01)) == get0of3[Int](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)))]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@875@01)))
  (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
; [eval] (ShStructget1of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get1of3(fn$$3): ShStruct3[Ref, Ref, Ref])
; [eval] (ShStructget1of3(fn$$2): Ref)
; [eval] (get1of3(fn$$3): ShStruct3[Ref, Ref, Ref])
(push) ; 9
; [then-branch: 532 | First:(Second:(First:($t@875@01))) == get1of3[ShStruct3[Ref, Ref, Ref]](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))) | live]
; [else-branch: 532 | First:(Second:(First:($t@875@01))) != get1of3[ShStruct3[Ref, Ref, Ref]](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))) | live]
(push) ; 10
; [then-branch: 532 | First:(Second:(First:($t@875@01))) == get1of3[ShStruct3[Ref, Ref, Ref]](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)))]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@875@01))))
  (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
; [eval] (ShStructget2of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get2of3(fn$$3): ShStruct3[Ref, Ref, Ref])
; [eval] (ShStructget2of3(fn$$2): Ref)
; [eval] (get2of3(fn$$3): ShStruct3[Ref, Ref, Ref])
(pop) ; 10
(push) ; 10
; [else-branch: 532 | First:(Second:(First:($t@875@01))) != get1of3[ShStruct3[Ref, Ref, Ref]](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)))]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@875@01))))
    (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@875@01))))
      (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@875@01))))
    (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(pop) ; 8
(push) ; 8
; [else-branch: 531 | First:(First:($t@875@01)) != get0of3[Int](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)))]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@875@01)))
    (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@875@01)))
    (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
  (and
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@875@01)))
      (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
    (or
      (not
        (=
          ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@875@01))))
          (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@875@01))))
        (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))))
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@875@01)))
      (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@875@01)))
    (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(assert (and
  (and
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.second ($Snap.second ($Snap.first $t@875@01))))
      (get2of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@875@01))))
      (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@875@01)))
    (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; N16 := fn$$0
; [exec]
; (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ := N16
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> fn$$0@874@01) (ShStructget1of3<Ref> n_V0@651@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget2of3<Ref> n_V0@651@01) (ShStructget1of3<Ref> n_V0@651@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget2of3<Ref> fn$$0@874@01) (ShStructget1of3<Ref> n_V0@651@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(tree_4b5075e4_PMnode((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$), write)
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@875@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 533 | First:(Second:(First:($t@875@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 533 | First:(Second:(First:($t@875@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 533 | First:(Second:(First:($t@875@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@875@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.second ($Snap.second ($Snap.first $t@875@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 534 | Second:(Second:(First:($t@875@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 534 | Second:(Second:(First:($t@875@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 534 | Second:(Second:(First:($t@875@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.second ($Snap.second ($Snap.first $t@875@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first $t@875@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@875@01)))
    ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.first $t@875@01)))
      ($Snap.combine $Snap.unit $Snap.unit)))) fn$$0@874@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  fn$$0@874@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  fn$$0@874@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    fn$$0@874@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 535 | fn$$0@874@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 535 | fn$$0@874@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 535 | fn$$0@874@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    fn$$0@874@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 536 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 536 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 536 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget2of3(n_V0): Ref)
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@874@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@875@01))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first $t@875@01)))
            ($Snap.combine
              ($Snap.second ($Snap.second ($Snap.first $t@875@01)))
              ($Snap.combine $Snap.unit $Snap.unit))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))))) n_V0@651@01))
; [exec]
; label returnLabel
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 11
(declare-const $k@878@01 $Perm)
(assert ($Perm.isReadVar $k@878@01))
(assert (< $k@878@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@878@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@878@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@874@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@875@01))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first $t@875@01)))
            ($Snap.combine
              ($Snap.second ($Snap.second ($Snap.first $t@875@01)))
              ($Snap.combine $Snap.unit $Snap.unit))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@878@01))
(assert (and
  (< $k@878@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@878@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@874@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
        ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first $t@875@01))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.first $t@875@01)))
              ($Snap.combine
                ($Snap.second ($Snap.second ($Snap.first $t@875@01)))
                ($Snap.combine $Snap.unit $Snap.unit))))
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 11
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@874@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@875@01))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first $t@875@01)))
            ($Snap.combine
              ($Snap.second ($Snap.second ($Snap.first $t@875@01)))
              ($Snap.combine $Snap.unit $Snap.unit))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@874@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@875@01))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first $t@875@01)))
            ($Snap.combine
              ($Snap.second ($Snap.second ($Snap.first $t@875@01)))
              ($Snap.combine $Snap.unit $Snap.unit))))
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 11
(declare-const $k@879@01 $Perm)
(assert ($Perm.isReadVar $k@879@01))
(assert (< $k@879@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@879@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@879@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@880@01 $Perm)
(assert ($Perm.isReadVar $k@880@01))
(assert (< $k@880@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@880@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@880@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@880@01))
(assert (and (< $k@880@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@880@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@874@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
        ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first $t@875@01))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.first $t@875@01)))
              ($Snap.combine
                ($Snap.second ($Snap.second ($Snap.first $t@875@01)))
                ($Snap.combine $Snap.unit $Snap.unit))))
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@879@01))
(assert ($Perm.isReadVar $k@880@01))
(assert (and
  (< $k@879@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@879@01))
  (< $k@880@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@880@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@874@01)
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first $t@875@01))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.first $t@875@01)))
                ($Snap.combine
                  ($Snap.second ($Snap.second ($Snap.first $t@875@01)))
                  ($Snap.combine $Snap.unit $Snap.unit))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 11
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@874@01)
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first $t@875@01))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.first $t@875@01)))
                ($Snap.combine
                  ($Snap.second ($Snap.second ($Snap.first $t@875@01)))
                  ($Snap.combine $Snap.unit $Snap.unit))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@874@01)
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first $t@875@01))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.first $t@875@01)))
                ($Snap.combine
                  ($Snap.second ($Snap.second ($Snap.first $t@875@01)))
                  ($Snap.combine $Snap.unit $Snap.unit))))
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)| == old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 11
(declare-const $k@881@01 $Perm)
(assert ($Perm.isReadVar $k@881@01))
(assert (< $k@881@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@881@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@881@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@882@01 $Perm)
(assert ($Perm.isReadVar $k@882@01))
(assert (< $k@882@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@882@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@882@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@882@01))
(assert (and (< $k@882@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@882@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@881@01))
(assert ($Perm.isReadVar $k@882@01))
(assert (and
  (< $k@881@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@881@01))
  (< $k@882@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@882@01))))
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@883@01 $Perm)
(assert ($Perm.isReadVar $k@883@01))
(assert (< $k@883@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@883@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@883@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@884@01 $Perm)
(assert ($Perm.isReadVar $k@884@01))
(assert (< $k@884@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@884@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@884@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@884@01))
(assert (and (< $k@884@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@884@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@883@01))
(assert ($Perm.isReadVar $k@884@01))
(assert (and
  (< $k@883@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@883@01))
  (< $k@884@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@884@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
; [eval] ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@885@01 $Perm)
(assert ($Perm.isReadVar $k@885@01))
(assert (< $k@885@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@885@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@885@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@886@01 $Perm)
(assert ($Perm.isReadVar $k@886@01))
(assert (< $k@886@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@886@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@886@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@886@01))
(assert (and (< $k@886@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@886@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@885@01))
(assert ($Perm.isReadVar $k@886@01))
(assert (and
  (< $k@885@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@885@01))
  (< $k@886@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@886@01))))
(set-option :timeout 0)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 537 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | dead]
; [else-branch: 537 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 537 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)))
(push) ; 11
(assert (not (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@874@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.first $t@875@01))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first $t@875@01)))
                  ($Snap.combine
                    ($Snap.second ($Snap.second ($Snap.first $t@875@01)))
                    ($Snap.combine $Snap.unit $Snap.unit))))
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
  (+
    (Seq_length
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
    1))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@874@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.first $t@875@01))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first $t@875@01)))
                  ($Snap.combine
                    ($Snap.second ($Snap.second ($Snap.first $t@875@01)))
                    ($Snap.combine $Snap.unit $Snap.unit))))
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
  (+
    (Seq_length
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
    1)))
; [eval] (forall i_V1: Int :: { (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) } { (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) } (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
(declare-const i_V1@887@01 Int)
(push) ; 11
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 12
(declare-const $k@888@01 $Perm)
(assert ($Perm.isReadVar $k@888@01))
(assert (< $k@888@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@888@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@888@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@889@01 $Perm)
(assert ($Perm.isReadVar $k@889@01))
(assert (< $k@889@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@889@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@889@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@889@01))
(assert (and (< $k@889@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@889@01))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@888@01))
(assert ($Perm.isReadVar $k@889@01))
(assert (and
  (< $k@888@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@888@01))
  (< $k@889@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@889@01))))
(set-option :timeout 0)
(push) ; 12
; [then-branch: 538 | i_V1@887@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 538 | !(i_V1@887@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(push) ; 13
; [then-branch: 538 | i_V1@887@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  i_V1@887@01))
; [eval] (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 14
(declare-const $k@890@01 $Perm)
(assert ($Perm.isReadVar $k@890@01))
(assert (< $k@890@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@890@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@890@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 15
(declare-const $k@891@01 $Perm)
(assert ($Perm.isReadVar $k@891@01))
(assert (< $k@891@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@891@01)))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@891@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@891@01))
(assert (and (< $k@891@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@891@01))))
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@890@01))
(assert ($Perm.isReadVar $k@891@01))
(assert (and
  (< $k@890@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@890@01))
  (< $k@891@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@891@01))))
(pop) ; 13
(set-option :timeout 0)
(push) ; 13
; [else-branch: 538 | !(i_V1@887@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@887@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@890@01))
(assert ($Perm.isReadVar $k@891@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@887@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@887@01)
    (< $k@890@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@890@01))
    (< $k@891@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@891@01)))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@887@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@887@01)))
(pop) ; 11
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@888@01))
(assert ($Perm.isReadVar $k@889@01))
(assert ($Perm.isReadVar $k@890@01))
(assert ($Perm.isReadVar $k@891@01))
(assert (< $k@888@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@888@01)))
(assert (< $k@889@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@889@01)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@887@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@887@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@887@01)
        (< $k@890@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@890@01))
        (< $k@891@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@891@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@887@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@887@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@887@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@887@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@887@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@887@01)
        (< $k@890@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@890@01))
        (< $k@891@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@891@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@887@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@887@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@874@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.first $t@875@01))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first $t@875@01)))
                  ($Snap.combine
                    ($Snap.second ($Snap.second ($Snap.first $t@875@01)))
                    ($Snap.combine $Snap.unit $Snap.unit))))
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@887@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@887@01 Int)) (!
  (and
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@887@01)
      (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@874@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@875@01))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.first $t@875@01)))
                    ($Snap.combine
                      ($Snap.second ($Snap.second ($Snap.first $t@875@01)))
                      ($Snap.combine $Snap.unit $Snap.unit))))
                ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@887@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@874@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.first $t@875@01))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first $t@875@01)))
                  ($Snap.combine
                    ($Snap.second ($Snap.second ($Snap.first $t@875@01)))
                    ($Snap.combine $Snap.unit $Snap.unit))))
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@887@01))
  :qid |prog.l1438_precondition|)))
(push) ; 11
(assert (not (forall ((i_V1@887@01 Int)) (!
  (=>
    (and
      (and
        (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        (=>
          (Seq_contains
            (sortedValues_4b5075e4_PMnode ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
              $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
            i_V1@887@01)
          (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
              ($Snap.combine
                ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@874@01)
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
                  ($Snap.combine
                    ($Snap.combine
                      ($Snap.first ($Snap.first $t@875@01))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.first $t@875@01)))
                        ($Snap.combine
                          ($Snap.second ($Snap.second ($Snap.first $t@875@01)))
                          ($Snap.combine $Snap.unit $Snap.unit))))
                    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@887@01))
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@874@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@875@01))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.first $t@875@01)))
                    ($Snap.combine
                      ($Snap.second ($Snap.second ($Snap.first $t@875@01)))
                      ($Snap.combine $Snap.unit $Snap.unit))))
                ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@887@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@887@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@874@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.first $t@875@01))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first $t@875@01)))
                  ($Snap.combine
                    ($Snap.second ($Snap.second ($Snap.first $t@875@01)))
                    ($Snap.combine $Snap.unit $Snap.unit))))
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@887@01))
  :qid |prog.l1438|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i_V1@887@01 Int)) (!
  (=>
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@887@01)
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@874@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@875@01))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.first $t@875@01)))
                    ($Snap.combine
                      ($Snap.second ($Snap.second ($Snap.first $t@875@01)))
                      ($Snap.combine $Snap.unit $Snap.unit))))
                ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@887@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@887@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@874@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.first $t@875@01))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first $t@875@01)))
                  ($Snap.combine
                    ($Snap.second ($Snap.second ($Snap.first $t@875@01)))
                    ($Snap.combine $Snap.unit $Snap.unit))))
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@887@01))
  :qid |prog.l1438|)))
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 11
(declare-const $k@892@01 $Perm)
(assert ($Perm.isReadVar $k@892@01))
(assert (< $k@892@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@892@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@892@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@893@01 $Perm)
(assert ($Perm.isReadVar $k@893@01))
(assert (< $k@893@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@893@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@893@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@893@01))
(assert (and (< $k@893@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@893@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@892@01))
(assert ($Perm.isReadVar $k@893@01))
(assert (and
  (< $k@892@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@892@01))
  (< $k@893@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@893@01))))
(set-option :timeout 0)
(push) ; 11
; [then-branch: 539 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | dead]
; [else-branch: 539 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(push) ; 12
; [else-branch: 539 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
; [then-branch: 540 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 540 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 6
; [else-branch: 540 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 529 | !(value_V0@652@01 < First:(First:(Second:(Second:($t@655@01)))))]
(assert (not
  (<
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(pop) ; 5
; [eval] !(value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$)
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 541 | !(value_V0@652@01 < First:(First:(Second:(Second:($t@655@01))))) | live]
; [else-branch: 541 | value_V0@652@01 < First:(First:(Second:(Second:($t@655@01)))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 541 | !(value_V0@652@01 < First:(First:(Second:(Second:($t@655@01)))))]
(assert (not
  (<
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 542 | value_V0@652@01 > First:(First:(Second:(Second:($t@655@01)))) | live]
; [else-branch: 542 | !(value_V0@652@01 > First:(First:(Second:(Second:($t@655@01))))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 542 | value_V0@652@01 > First:(First:(Second:(Second:($t@655@01))))]
(assert (>
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
; [then-branch: 543 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 543 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 7
; [else-branch: 543 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 7
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 544 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 544 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 544 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; insert_4b5075e4_PMnode((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$,
;   value_V0_CN1, (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int]),
;   upperBound_V0_CN3)
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] (optSome((ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$): Option[Int])
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
; [eval] !(lowerBound_V0 == (optNone(): Option[Int])) ==> (optGet(lowerBound_V0): Int) < value_V0
; [eval] !(lowerBound_V0 == (optNone(): Option[Int]))
; [eval] lowerBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
  (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
    (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 545 | optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))) != optNone[Option[Int]] | live]
; [else-branch: 545 | optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))) == optNone[Option[Int]] | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 545 | optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))) != optNone[Option[Int]]]
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
    (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(lowerBound_V0): Int) < value_V0
; [eval] (optGet(lowerBound_V0): Int)
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (not
  (=
    (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
    (as optNone<Option<Int>>  Option<Int>))))
(push) ; 8
(assert (not (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      (as optNone<Option<Int>>  Option<Int>)))
  (<
    (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    value_V0@652@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (not
    (=
      (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      (as optNone<Option<Int>>  Option<Int>)))
  (<
    (optGet<Int> (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    value_V0@652@01)))
; [eval] !(upperBound_V0 == (optNone(): Option[Int])) ==> (optGet(upperBound_V0): Int) > value_V0
; [eval] !(upperBound_V0 == (optNone(): Option[Int]))
; [eval] upperBound_V0 == (optNone(): Option[Int])
; [eval] (optNone(): Option[Int])
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (= upperBound_V0@654@01 (as optNone<Option<Int>>  Option<Int>))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= upperBound_V0@654@01 (as optNone<Option<Int>>  Option<Int>)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 546 | upperBound_V0@654@01 != optNone[Option[Int]] | live]
; [else-branch: 546 | upperBound_V0@654@01 == optNone[Option[Int]] | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 546 | upperBound_V0@654@01 != optNone[Option[Int]]]
(assert (not (= upperBound_V0@654@01 (as optNone<Option<Int>>  Option<Int>))))
; [eval] (optGet(upperBound_V0): Int) > value_V0
; [eval] (optGet(upperBound_V0): Int)
(pop) ; 9
(push) ; 9
; [else-branch: 546 | upperBound_V0@654@01 == optNone[Option[Int]]]
(assert (= upperBound_V0@654@01 (as optNone<Option<Int>>  Option<Int>)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 8
(declare-const $k@894@01 $Perm)
(assert ($Perm.isReadVar $k@894@01))
(assert (< $k@894@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@894@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@894@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@894@01))
(assert (and
  (< $k@894@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@894@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 8
(assert (not (sorted_4b5075e4_PMnode ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01))
(declare-const $t@895@01 $Snap)
(assert (= $t@895@01 ($Snap.combine ($Snap.first $t@895@01) ($Snap.second $t@895@01))))
(assert (=
  ($Snap.second $t@895@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@895@01))
    ($Snap.second ($Snap.second $t@895@01)))))
(assert (= ($Snap.first ($Snap.second $t@895@01)) $Snap.unit))
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 8
(declare-const $k@896@01 $Perm)
(assert ($Perm.isReadVar $k@896@01))
(assert (< $k@896@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@896@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@896@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@895@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@896@01))
(assert (and
  (< $k@896@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@896@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.first $t@895@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)))
(assert (sorted_4b5075e4_PMnode ($Snap.first $t@895@01) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01))
(assert (=
  ($Snap.second ($Snap.second $t@895@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@895@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@895@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@895@01))) $Snap.unit))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@897@01 $Perm)
(assert ($Perm.isReadVar $k@897@01))
(assert (< $k@897@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@897@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@897@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@898@01 $Perm)
(assert ($Perm.isReadVar $k@898@01))
(assert (< $k@898@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@898@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@898@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@898@01))
(assert (and (< $k@898@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@898@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first $t@895@01)
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@897@01))
(assert ($Perm.isReadVar $k@898@01))
(assert (and
  (< $k@897@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@897@01))
  (< $k@898@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@898@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first $t@895@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)))
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first $t@895@01)
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
  value_V0@652@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@895@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@895@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@895@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@895@01))))
  $Snap.unit))
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)| == old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@899@01 $Perm)
(assert ($Perm.isReadVar $k@899@01))
(assert (< $k@899@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@899@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@899@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@900@01 $Perm)
(assert ($Perm.isReadVar $k@900@01))
(assert (< $k@900@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@900@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@900@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@900@01))
(assert (and (< $k@900@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@900@01))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@899@01))
(assert ($Perm.isReadVar $k@900@01))
(assert (and
  (< $k@899@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@899@01))
  (< $k@900@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@900@01))))
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@901@01 $Perm)
(assert ($Perm.isReadVar $k@901@01))
(assert (< $k@901@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@901@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@901@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@902@01 $Perm)
(assert ($Perm.isReadVar $k@902@01))
(assert (< $k@902@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@902@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@902@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@902@01))
(assert (and (< $k@902@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@902@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@901@01))
(assert ($Perm.isReadVar $k@902@01))
(assert (and
  (< $k@901@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@901@01))
  (< $k@902@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@902@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)))
; [eval] ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 8
(declare-const $k@903@01 $Perm)
(assert ($Perm.isReadVar $k@903@01))
(assert (< $k@903@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@903@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@903@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@904@01 $Perm)
(assert ($Perm.isReadVar $k@904@01))
(assert (< $k@904@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@904@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@904@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@904@01))
(assert (and (< $k@904@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@904@01))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@903@01))
(assert ($Perm.isReadVar $k@904@01))
(assert (and
  (< $k@903@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@903@01))
  (< $k@904@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@904@01))))
(set-option :timeout 0)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 547 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((Second:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))), optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))), upperBound_V0@654@01) | live]
; [else-branch: 547 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((Second:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))), optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))), upperBound_V0@654@01)) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 547 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((Second:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))), optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))), upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
  value_V0@652@01))
(pop) ; 9
(push) ; 9
; [else-branch: 547 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((Second:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))), optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))), upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    value_V0@652@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
      value_V0@652@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    value_V0@652@01)))
(assert (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@895@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01))
  (+
    (Seq_length
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01))
    (ite
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
        value_V0@652@01)
      0
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@895@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@895@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@895@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@895@01)))))
  $Snap.unit))
; [eval] (forall i_V1: Int :: { (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) } { (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) } (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
(declare-const i_V1@905@01 Int)
(push) ; 8
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@906@01 $Perm)
(assert ($Perm.isReadVar $k@906@01))
(assert (< $k@906@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@906@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@906@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@907@01 $Perm)
(assert ($Perm.isReadVar $k@907@01))
(assert (< $k@907@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@907@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@907@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@907@01))
(assert (and (< $k@907@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@907@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@906@01))
(assert ($Perm.isReadVar $k@907@01))
(assert (and
  (< $k@906@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@906@01))
  (< $k@907@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@907@01))))
(set-option :timeout 0)
(push) ; 9
; [then-branch: 548 | i_V1@905@01 in sortedValues_4b5075e4_PMnode((Second:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))), optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))), upperBound_V0@654@01) | live]
; [else-branch: 548 | !(i_V1@905@01 in sortedValues_4b5075e4_PMnode((Second:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))), optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))), upperBound_V0@654@01)) | live]
(push) ; 10
; [then-branch: 548 | i_V1@905@01 in sortedValues_4b5075e4_PMnode((Second:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))), optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))), upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
  i_V1@905@01))
; [eval] (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 11
(declare-const $k@908@01 $Perm)
(assert ($Perm.isReadVar $k@908@01))
(assert (< $k@908@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@908@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@908@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@909@01 $Perm)
(assert ($Perm.isReadVar $k@909@01))
(assert (< $k@909@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@909@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@909@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@909@01))
(assert (and (< $k@909@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@909@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@908@01))
(assert ($Perm.isReadVar $k@909@01))
(assert (and
  (< $k@908@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@908@01))
  (< $k@909@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@909@01))))
(pop) ; 10
(set-option :timeout 0)
(push) ; 10
; [else-branch: 548 | !(i_V1@905@01 in sortedValues_4b5075e4_PMnode((Second:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))), optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))), upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    i_V1@905@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@908@01))
(assert ($Perm.isReadVar $k@909@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    i_V1@905@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
      i_V1@905@01)
    (< $k@908@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@908@01))
    (< $k@909@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@909@01)))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
      i_V1@905@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    i_V1@905@01)))
(pop) ; 8
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@906@01))
(assert ($Perm.isReadVar $k@907@01))
(assert ($Perm.isReadVar $k@908@01))
(assert ($Perm.isReadVar $k@909@01))
(assert (< $k@906@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@906@01)))
(assert (< $k@907@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@907@01)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@905@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
        i_V1@905@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
          i_V1@905@01)
        (< $k@908@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@908@01))
        (< $k@909@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@909@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
          i_V1@905@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
        i_V1@905@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    i_V1@905@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@905@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
        i_V1@905@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
          i_V1@905@01)
        (< $k@908@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@908@01))
        (< $k@909@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@909@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
            $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
          i_V1@905@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
          $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
        i_V1@905@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@895@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    i_V1@905@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@905@01 Int)) (!
  (=>
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
      i_V1@905@01)
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first $t@895@01)
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
      i_V1@905@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    i_V1@905@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@895@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    i_V1@905@01))
  :qid |prog.l1438|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@895@01)))))
  $Snap.unit))
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 8
(declare-const $k@910@01 $Perm)
(assert ($Perm.isReadVar $k@910@01))
(assert (< $k@910@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@910@01)))
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@910@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@911@01 $Perm)
(assert ($Perm.isReadVar $k@911@01))
(assert (< $k@911@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@911@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@911@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@911@01))
(assert (and (< $k@911@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@911@01))))
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@910@01))
(assert ($Perm.isReadVar $k@911@01))
(assert (and
  (< $k@910@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@910@01))
  (< $k@911@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@911@01))))
(set-option :timeout 0)
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 549 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((Second:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))), optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))), upperBound_V0@654@01) | live]
; [else-branch: 549 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((Second:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))), optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))), upperBound_V0@654@01)) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 549 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((Second:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))), optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))), upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
  value_V0@652@01))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@912@01 $Perm)
(assert ($Perm.isReadVar $k@912@01))
(assert (< $k@912@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@912@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@912@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@913@01 $Perm)
(assert ($Perm.isReadVar $k@913@01))
(assert (< $k@913@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@913@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@913@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@913@01))
(assert (and (< $k@913@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@913@01))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@912@01))
(assert ($Perm.isReadVar $k@913@01))
(assert (and
  (< $k@912@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@912@01))
  (< $k@913@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@913@01))))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@914@01 $Perm)
(assert ($Perm.isReadVar $k@914@01))
(assert (< $k@914@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@914@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@914@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@915@01 $Perm)
(assert ($Perm.isReadVar $k@915@01))
(assert (< $k@915@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@915@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@915@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@915@01))
(assert (and (< $k@915@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@915@01))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@914@01))
(assert ($Perm.isReadVar $k@915@01))
(assert (and
  (< $k@914@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@914@01))
  (< $k@915@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@915@01))))
(pop) ; 9
(set-option :timeout 0)
(push) ; 9
; [else-branch: 549 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((Second:(Second:(Second:(Second:(First:(Second:(Second:($t@655@01))))))), _), First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))), optSome[Option[Int]](First:(First:(Second:(Second:($t@655@01))))), upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    value_V0@652@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert ($Perm.isReadVar $k@912@01))
(assert ($Perm.isReadVar $k@913@01))
(assert ($Perm.isReadVar $k@914@01))
(assert ($Perm.isReadVar $k@915@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    value_V0@652@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
        $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
      value_V0@652@01)
    (< $k@912@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@912@01))
    (< $k@913@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@913@01))
    (< $k@914@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@914@01))
    (< $k@915@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@915@01)))))
; Joined path conditions
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    value_V0@652@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01)
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first $t@895@01)
      $Snap.unit) ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))) (optSome<Option<Int>> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))) upperBound_V0@654@01))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
; [then-branch: 550 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 550 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 8
; [else-branch: 550 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 551 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 551 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 551 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget2of3(n_V0): Ref)
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine $Snap.unit ($Snap.first $t@895@01))))) n_V0@651@01))
; [exec]
; label returnLabel
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@916@01 $Perm)
(assert ($Perm.isReadVar $k@916@01))
(assert (< $k@916@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@916@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@916@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine $Snap.unit ($Snap.first $t@895@01))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@916@01))
(assert (and
  (< $k@916@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@916@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
        ($Snap.combine $Snap.unit ($Snap.first $t@895@01))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 10
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine $Snap.unit ($Snap.first $t@895@01))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine $Snap.unit ($Snap.first $t@895@01))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@917@01 $Perm)
(assert ($Perm.isReadVar $k@917@01))
(assert (< $k@917@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@917@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@917@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@918@01 $Perm)
(assert ($Perm.isReadVar $k@918@01))
(assert (< $k@918@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@918@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@918@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@918@01))
(assert (and (< $k@918@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@918@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
        ($Snap.combine $Snap.unit ($Snap.first $t@895@01)))))
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@917@01))
(assert ($Perm.isReadVar $k@918@01))
(assert (and
  (< $k@917@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@917@01))
  (< $k@918@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@918@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine $Snap.unit ($Snap.first $t@895@01)))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 10
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine $Snap.unit ($Snap.first $t@895@01)))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine $Snap.unit ($Snap.first $t@895@01)))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)| == old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@919@01 $Perm)
(assert ($Perm.isReadVar $k@919@01))
(assert (< $k@919@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@919@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@919@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@920@01 $Perm)
(assert ($Perm.isReadVar $k@920@01))
(assert (< $k@920@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@920@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@920@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@920@01))
(assert (and (< $k@920@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@920@01))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@919@01))
(assert ($Perm.isReadVar $k@920@01))
(assert (and
  (< $k@919@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@919@01))
  (< $k@920@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@920@01))))
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@921@01 $Perm)
(assert ($Perm.isReadVar $k@921@01))
(assert (< $k@921@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@921@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@921@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@922@01 $Perm)
(assert ($Perm.isReadVar $k@922@01))
(assert (< $k@922@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@922@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@922@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@922@01))
(assert (and (< $k@922@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@922@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@921@01))
(assert ($Perm.isReadVar $k@922@01))
(assert (and
  (< $k@921@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@921@01))
  (< $k@922@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@922@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
; [eval] ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@923@01 $Perm)
(assert ($Perm.isReadVar $k@923@01))
(assert (< $k@923@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@923@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@923@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@924@01 $Perm)
(assert ($Perm.isReadVar $k@924@01))
(assert (< $k@924@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@924@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@924@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@924@01))
(assert (and (< $k@924@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@924@01))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@923@01))
(assert ($Perm.isReadVar $k@924@01))
(assert (and
  (< $k@923@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@923@01))
  (< $k@924@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@924@01))))
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 552 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 552 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 552 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
(pop) ; 11
(push) ; 11
; [else-branch: 552 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      value_V0@652@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)))
(push) ; 10
(assert (not (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine $Snap.unit ($Snap.first $t@895@01)))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
  (+
    (Seq_length
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
    (ite
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        value_V0@652@01)
      0
      1)))))
(check-sat)
; unsat
(pop) ; 10
; 0.11s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine $Snap.unit ($Snap.first $t@895@01)))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
  (+
    (Seq_length
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
    (ite
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        value_V0@652@01)
      0
      1))))
; [eval] (forall i_V1: Int :: { (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) } { (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) } (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
(declare-const i_V1@925@01 Int)
(push) ; 10
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 11
(declare-const $k@926@01 $Perm)
(assert ($Perm.isReadVar $k@926@01))
(assert (< $k@926@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@926@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@926@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@927@01 $Perm)
(assert ($Perm.isReadVar $k@927@01))
(assert (< $k@927@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@927@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@927@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@927@01))
(assert (and (< $k@927@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@927@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@926@01))
(assert ($Perm.isReadVar $k@927@01))
(assert (and
  (< $k@926@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@926@01))
  (< $k@927@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@927@01))))
(set-option :timeout 0)
(push) ; 11
; [then-branch: 553 | i_V1@925@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 553 | !(i_V1@925@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(push) ; 12
; [then-branch: 553 | i_V1@925@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  i_V1@925@01))
; [eval] (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 13
(declare-const $k@928@01 $Perm)
(assert ($Perm.isReadVar $k@928@01))
(assert (< $k@928@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@928@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@928@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 14
(declare-const $k@929@01 $Perm)
(assert ($Perm.isReadVar $k@929@01))
(assert (< $k@929@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@929@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@929@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@929@01))
(assert (and (< $k@929@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@929@01))))
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@928@01))
(assert ($Perm.isReadVar $k@929@01))
(assert (and
  (< $k@928@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@928@01))
  (< $k@929@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@929@01))))
(pop) ; 12
(set-option :timeout 0)
(push) ; 12
; [else-branch: 553 | !(i_V1@925@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@925@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@928@01))
(assert ($Perm.isReadVar $k@929@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@925@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@925@01)
    (< $k@928@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@928@01))
    (< $k@929@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@929@01)))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@925@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@925@01)))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@926@01))
(assert ($Perm.isReadVar $k@927@01))
(assert ($Perm.isReadVar $k@928@01))
(assert ($Perm.isReadVar $k@929@01))
(assert (< $k@926@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@926@01)))
(assert (< $k@927@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@927@01)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@925@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@925@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@925@01)
        (< $k@928@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@928@01))
        (< $k@929@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@929@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@925@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@925@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@925@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@925@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@925@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@925@01)
        (< $k@928@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@928@01))
        (< $k@929@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@929@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@925@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@925@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine $Snap.unit ($Snap.first $t@895@01)))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@925@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@925@01 Int)) (!
  (and
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@925@01)
      (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine $Snap.unit ($Snap.first $t@895@01)))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@925@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine $Snap.unit ($Snap.first $t@895@01)))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@925@01))
  :qid |prog.l1438_precondition|)))
(push) ; 10
(assert (not (forall ((i_V1@925@01 Int)) (!
  (=>
    (and
      (and
        (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        (=>
          (Seq_contains
            (sortedValues_4b5075e4_PMnode ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
              $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
            i_V1@925@01)
          (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
                  ($Snap.combine $Snap.unit ($Snap.first $t@895@01)))))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@925@01))
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine $Snap.unit ($Snap.first $t@895@01)))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@925@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@925@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine $Snap.unit ($Snap.first $t@895@01)))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@925@01))
  :qid |prog.l1438|))))
(check-sat)
; unsat
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(assert (forall ((i_V1@925@01 Int)) (!
  (=>
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@925@01)
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine $Snap.unit ($Snap.first $t@895@01)))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@925@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@925@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine $Snap.unit ($Snap.first $t@895@01)))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@925@01))
  :qid |prog.l1438|)))
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@930@01 $Perm)
(assert ($Perm.isReadVar $k@930@01))
(assert (< $k@930@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@930@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@930@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@931@01 $Perm)
(assert ($Perm.isReadVar $k@931@01))
(assert (< $k@931@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@931@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@931@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@931@01))
(assert (and (< $k@931@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@931@01))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@930@01))
(assert ($Perm.isReadVar $k@931@01))
(assert (and
  (< $k@930@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@930@01))
  (< $k@931@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@931@01))))
(set-option :timeout 0)
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 554 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 554 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 554 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 12
(declare-const $k@932@01 $Perm)
(assert ($Perm.isReadVar $k@932@01))
(assert (< $k@932@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@932@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@932@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@933@01 $Perm)
(assert ($Perm.isReadVar $k@933@01))
(assert (< $k@933@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@933@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@933@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@933@01))
(assert (and (< $k@933@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@933@01))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@932@01))
(assert ($Perm.isReadVar $k@933@01))
(assert (and
  (< $k@932@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@932@01))
  (< $k@933@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@933@01))))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@934@01 $Perm)
(assert ($Perm.isReadVar $k@934@01))
(assert (< $k@934@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@934@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@934@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@935@01 $Perm)
(assert ($Perm.isReadVar $k@935@01))
(assert (< $k@935@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@935@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@935@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@935@01))
(assert (and (< $k@935@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@935@01))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@934@01))
(assert ($Perm.isReadVar $k@935@01))
(assert (and
  (< $k@934@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@934@01))
  (< $k@935@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@935@01))))
(pop) ; 11
(set-option :timeout 0)
(push) ; 11
; [else-branch: 554 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@932@01))
(assert ($Perm.isReadVar $k@933@01))
(assert ($Perm.isReadVar $k@934@01))
(assert ($Perm.isReadVar $k@935@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      value_V0@652@01)
    (< $k@932@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@932@01))
    (< $k@933@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@933@01))
    (< $k@934@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@934@01))
    (< $k@935@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@935@01)))))
; Joined path conditions
(push) ; 10
(assert (not (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine $Snap.unit ($Snap.first $t@895@01)))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine $Snap.unit ($Snap.first $t@895@01)))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 542 | !(value_V0@652@01 > First:(First:(Second:(Second:($t@655@01)))))]
(assert (not
  (>
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(pop) ; 6
; [eval] !(value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$)
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 555 | !(value_V0@652@01 > First:(First:(Second:(Second:($t@655@01))))) | live]
; [else-branch: 555 | value_V0@652@01 > First:(First:(Second:(Second:($t@655@01)))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 555 | !(value_V0@652@01 > First:(First:(Second:(Second:($t@655@01)))))]
(assert (not
  (>
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
; [then-branch: 556 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 556 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 7
; [else-branch: 556 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 557 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 557 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 557 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] (ShStructget2of3(n_V0): Ref)
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))))) n_V0@651@01))
; [exec]
; label returnLabel
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@936@01 $Perm)
(assert ($Perm.isReadVar $k@936@01))
(assert (< $k@936@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@936@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@936@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@936@01))
(assert (and
  (< $k@936@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@936@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        $Snap.unit
        ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@937@01 $Perm)
(assert ($Perm.isReadVar $k@937@01))
(assert (< $k@937@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@937@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@937@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@938@01 $Perm)
(assert ($Perm.isReadVar $k@938@01))
(assert (< $k@938@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@938@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@938@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@938@01))
(assert (and (< $k@938@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@938@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
        ($Snap.combine
          $Snap.unit
          ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@937@01))
(assert ($Perm.isReadVar $k@938@01))
(assert (and
  (< $k@937@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@937@01))
  (< $k@938@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@938@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine
            $Snap.unit
            ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)| == old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@939@01 $Perm)
(assert ($Perm.isReadVar $k@939@01))
(assert (< $k@939@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@939@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@939@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@940@01 $Perm)
(assert ($Perm.isReadVar $k@940@01))
(assert (< $k@940@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@940@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@940@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@940@01))
(assert (and (< $k@940@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@940@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@939@01))
(assert ($Perm.isReadVar $k@940@01))
(assert (and
  (< $k@939@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@939@01))
  (< $k@940@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@940@01))))
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@941@01 $Perm)
(assert ($Perm.isReadVar $k@941@01))
(assert (< $k@941@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@941@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@941@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@942@01 $Perm)
(assert ($Perm.isReadVar $k@942@01))
(assert (< $k@942@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@942@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@942@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@942@01))
(assert (and (< $k@942@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@942@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@941@01))
(assert ($Perm.isReadVar $k@942@01))
(assert (and
  (< $k@941@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@941@01))
  (< $k@942@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@942@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
; [eval] ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@943@01 $Perm)
(assert ($Perm.isReadVar $k@943@01))
(assert (< $k@943@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@943@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@943@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@944@01 $Perm)
(assert ($Perm.isReadVar $k@944@01))
(assert (< $k@944@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@944@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@944@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@944@01))
(assert (and (< $k@944@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@944@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@943@01))
(assert ($Perm.isReadVar $k@944@01))
(assert (and
  (< $k@943@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@943@01))
  (< $k@944@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@944@01))))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 558 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 558 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 558 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
(push) ; 9
(assert (not (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))))
; [eval] (forall i_V1: Int :: { (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) } { (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) } (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
(declare-const i_V1@945@01 Int)
(push) ; 9
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@946@01 $Perm)
(assert ($Perm.isReadVar $k@946@01))
(assert (< $k@946@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@946@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@946@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@947@01 $Perm)
(assert ($Perm.isReadVar $k@947@01))
(assert (< $k@947@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@947@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@947@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@947@01))
(assert (and (< $k@947@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@947@01))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@946@01))
(assert ($Perm.isReadVar $k@947@01))
(assert (and
  (< $k@946@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@946@01))
  (< $k@947@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@947@01))))
(set-option :timeout 0)
(push) ; 10
; [then-branch: 559 | i_V1@945@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 559 | !(i_V1@945@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(push) ; 11
; [then-branch: 559 | i_V1@945@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  i_V1@945@01))
; [eval] (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 12
(declare-const $k@948@01 $Perm)
(assert ($Perm.isReadVar $k@948@01))
(assert (< $k@948@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@948@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@948@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@949@01 $Perm)
(assert ($Perm.isReadVar $k@949@01))
(assert (< $k@949@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@949@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@949@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@949@01))
(assert (and (< $k@949@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@949@01))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@948@01))
(assert ($Perm.isReadVar $k@949@01))
(assert (and
  (< $k@948@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@948@01))
  (< $k@949@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@949@01))))
(pop) ; 11
(set-option :timeout 0)
(push) ; 11
; [else-branch: 559 | !(i_V1@945@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@945@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@948@01))
(assert ($Perm.isReadVar $k@949@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@945@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@945@01)
    (< $k@948@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@948@01))
    (< $k@949@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@949@01)))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@945@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@945@01)))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@946@01))
(assert ($Perm.isReadVar $k@947@01))
(assert ($Perm.isReadVar $k@948@01))
(assert ($Perm.isReadVar $k@949@01))
(assert (< $k@946@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@946@01)))
(assert (< $k@947@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@947@01)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@945@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@945@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@945@01)
        (< $k@948@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@948@01))
        (< $k@949@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@949@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@945@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@945@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@945@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@945@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@945@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@945@01)
        (< $k@948@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@948@01))
        (< $k@949@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@949@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@945@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@945@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@945@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@945@01 Int)) (!
  (and
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@945@01)
      (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@945@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@945@01))
  :qid |prog.l1438_precondition|)))
(push) ; 9
(assert (not (forall ((i_V1@945@01 Int)) (!
  (=>
    (and
      (and
        (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        (=>
          (Seq_contains
            (sortedValues_4b5075e4_PMnode ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
              $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
            i_V1@945@01)
          (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@945@01))
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@945@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@945@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@945@01))
  :qid |prog.l1438|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i_V1@945@01 Int)) (!
  (=>
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@945@01)
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine
                $Snap.unit
                ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@945@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@945@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@945@01))
  :qid |prog.l1438|)))
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@950@01 $Perm)
(assert ($Perm.isReadVar $k@950@01))
(assert (< $k@950@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@950@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@950@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@951@01 $Perm)
(assert ($Perm.isReadVar $k@951@01))
(assert (< $k@951@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@951@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@951@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@951@01))
(assert (and (< $k@951@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@951@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@950@01))
(assert ($Perm.isReadVar $k@951@01))
(assert (and
  (< $k@950@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@950@01))
  (< $k@951@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@951@01))))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 560 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 560 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 560 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 11
(declare-const $k@952@01 $Perm)
(assert ($Perm.isReadVar $k@952@01))
(assert (< $k@952@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@952@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@952@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@953@01 $Perm)
(assert ($Perm.isReadVar $k@953@01))
(assert (< $k@953@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@953@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@953@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@953@01))
(assert (and (< $k@953@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@953@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@952@01))
(assert ($Perm.isReadVar $k@953@01))
(assert (and
  (< $k@952@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@952@01))
  (< $k@953@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@953@01))))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@954@01 $Perm)
(assert ($Perm.isReadVar $k@954@01))
(assert (< $k@954@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@954@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@954@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@955@01 $Perm)
(assert ($Perm.isReadVar $k@955@01))
(assert (< $k@955@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@955@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@955@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@955@01))
(assert (and (< $k@955@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@955@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@954@01))
(assert ($Perm.isReadVar $k@955@01))
(assert (and
  (< $k@954@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@954@01))
  (< $k@955@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@955@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@952@01))
(assert ($Perm.isReadVar $k@953@01))
(assert ($Perm.isReadVar $k@954@01))
(assert ($Perm.isReadVar $k@955@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (and
    (< $k@952@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@952@01))
    (< $k@953@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@953@01))
    (< $k@954@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@954@01))
    (< $k@955@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@955@01)))))
(set-option :timeout 0)
(push) ; 9
(assert (not (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              $Snap.unit
              ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 555 | value_V0@652@01 > First:(First:(Second:(Second:($t@655@01))))]
(assert (>
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 541 | value_V0@652@01 < First:(First:(Second:(Second:($t@655@01))))]
(assert (<
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 528 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
  $Snap.unit))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (tree_4b5075e4_PMnode%trigger ($Snap.first ($Snap.second ($Snap.second $t@655@01))) n_V0@651@01))
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 561 | value_V0@652@01 < First:(First:(Second:(Second:($t@655@01)))) | live]
; [else-branch: 561 | !(value_V0@652@01 < First:(First:(Second:(Second:($t@655@01))))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 561 | value_V0@652@01 < First:(First:(Second:(Second:($t@655@01))))]
(assert (<
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 562 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 562 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 562 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; var N16: ShStruct3[Ref, Ref, Ref]
(declare-const N16@956@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; var fn$$0: ShStruct3[Ref, Ref, Ref]
(declare-const fn$$0@957@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; inhale (let fn$$1 ==
;     (fn$$0) in
;     acc((ShStructget0of3(fn$$1): Ref).Intint$$$$_E_$$$, write) &&
;     (acc((ShStructget1of3(fn$$1): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$, write) &&
;     acc((ShStructget2of3(fn$$1): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$, write))) &&
;   (let fn$$2 ==
;     (fn$$0) in
;     (let fn$$3 ==
;       ((tuple3(value_V0_CN1, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(),
;       shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()): Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]])) in
;       (ShStructget0of3(fn$$2): Ref).Intint$$$$_E_$$$ ==
;       (get0of3(fn$$3): Int) &&
;       ((ShStructget1of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ ==
;       (get1of3(fn$$3): ShStruct3[Ref, Ref, Ref]) &&
;       (ShStructget2of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ ==
;       (get2of3(fn$$3): ShStruct3[Ref, Ref, Ref]))))
(declare-const $t@958@01 $Snap)
(assert (= $t@958@01 ($Snap.combine ($Snap.first $t@958@01) ($Snap.second $t@958@01))))
(assert (=
  ($Snap.first $t@958@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@958@01))
    ($Snap.second ($Snap.first $t@958@01)))))
; [eval] (ShStructget0of3(fn$$1): Ref)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget0of3<Ref> n_V0@651@01) (ShStructget0of3<Ref> fn$$0@957@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget0of3<Ref> fn$$0@957@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first $t@958@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@958@01)))
    ($Snap.second ($Snap.second ($Snap.first $t@958@01))))))
; [eval] (ShStructget1of3(fn$$1): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget2of3<Ref> n_V0@651@01) (ShStructget1of3<Ref> fn$$0@957@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> n_V0@651@01) (ShStructget1of3<Ref> fn$$0@957@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget1of3<Ref> fn$$0@957@01) $Ref.null)))
; [eval] (ShStructget2of3(fn$$1): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> n_V0@651@01) (ShStructget2of3<Ref> fn$$0@957@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget2of3<Ref> n_V0@651@01) (ShStructget2of3<Ref> fn$$0@957@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> fn$$0@957@01) (ShStructget2of3<Ref> fn$$0@957@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget2of3<Ref> fn$$0@957@01) $Ref.null)))
(assert (= ($Snap.second $t@958@01) $Snap.unit))
; [eval] (let fn$$2 == (fn$$0) in (let fn$$3 == ((tuple3(value_V0_CN1, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()): Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]])) in (ShStructget0of3(fn$$2): Ref).Intint$$$$_E_$$$ == (get0of3(fn$$3): Int) && ((ShStructget1of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get1of3(fn$$3): ShStruct3[Ref, Ref, Ref]) && (ShStructget2of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get2of3(fn$$3): ShStruct3[Ref, Ref, Ref]))))
(declare-const letvar@959@01 ShStruct3<Ref~_Ref~_Ref>)
(assert (= (as letvar@959@01  ShStruct3<Ref~_Ref~_Ref>) fn$$0@957@01))
; [eval] (let fn$$3 == ((tuple3(value_V0_CN1, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()): Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]])) in (ShStructget0of3(fn$$2): Ref).Intint$$$$_E_$$$ == (get0of3(fn$$3): Int) && ((ShStructget1of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get1of3(fn$$3): ShStruct3[Ref, Ref, Ref]) && (ShStructget2of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get2of3(fn$$3): ShStruct3[Ref, Ref, Ref])))
; [eval] (tuple3(value_V0_CN1, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()): Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]])
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(declare-const letvar@960@01 Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>)
(assert (=
  (as letvar@960@01  Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>)
  (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget0of3(fn$$2): Ref).Intint$$$$_E_$$$ == (get0of3(fn$$3): Int) && ((ShStructget1of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get1of3(fn$$3): ShStruct3[Ref, Ref, Ref]) && (ShStructget2of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get2of3(fn$$3): ShStruct3[Ref, Ref, Ref]))
; [eval] (ShStructget0of3(fn$$2): Ref).Intint$$$$_E_$$$ == (get0of3(fn$$3): Int)
; [eval] (ShStructget0of3(fn$$2): Ref)
; [eval] (get0of3(fn$$3): Int)
(push) ; 7
; [then-branch: 563 | First:(First:($t@958@01)) == get0of3[Int](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))) | live]
; [else-branch: 563 | First:(First:($t@958@01)) != get0of3[Int](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))) | live]
(push) ; 8
; [then-branch: 563 | First:(First:($t@958@01)) == get0of3[Int](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)))]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@958@01)))
  (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
; [eval] (ShStructget1of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get1of3(fn$$3): ShStruct3[Ref, Ref, Ref])
; [eval] (ShStructget1of3(fn$$2): Ref)
; [eval] (get1of3(fn$$3): ShStruct3[Ref, Ref, Ref])
(push) ; 9
; [then-branch: 564 | First:(Second:(First:($t@958@01))) == get1of3[ShStruct3[Ref, Ref, Ref]](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))) | live]
; [else-branch: 564 | First:(Second:(First:($t@958@01))) != get1of3[ShStruct3[Ref, Ref, Ref]](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))) | live]
(push) ; 10
; [then-branch: 564 | First:(Second:(First:($t@958@01))) == get1of3[ShStruct3[Ref, Ref, Ref]](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)))]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@958@01))))
  (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
; [eval] (ShStructget2of3(fn$$2): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get2of3(fn$$3): ShStruct3[Ref, Ref, Ref])
; [eval] (ShStructget2of3(fn$$2): Ref)
; [eval] (get2of3(fn$$3): ShStruct3[Ref, Ref, Ref])
(pop) ; 10
(push) ; 10
; [else-branch: 564 | First:(Second:(First:($t@958@01))) != get1of3[ShStruct3[Ref, Ref, Ref]](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)))]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@958@01))))
    (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@958@01))))
      (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@958@01))))
    (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(pop) ; 8
(push) ; 8
; [else-branch: 563 | First:(First:($t@958@01)) != get0of3[Int](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)))]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@958@01)))
    (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@958@01)))
    (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
  (and
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@958@01)))
      (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
    (or
      (not
        (=
          ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@958@01))))
          (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@958@01))))
        (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))))
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@958@01)))
      (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@958@01)))
    (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(assert (and
  (and
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.second ($Snap.second ($Snap.first $t@958@01))))
      (get2of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@958@01))))
      (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@958@01)))
    (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; N16 := fn$$0
; [exec]
; (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ := N16
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> fn$$0@957@01) (ShStructget1of3<Ref> n_V0@651@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget2of3<Ref> n_V0@651@01) (ShStructget1of3<Ref> n_V0@651@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget2of3<Ref> fn$$0@957@01) (ShStructget1of3<Ref> n_V0@651@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(tree_4b5075e4_PMnode((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$), write)
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@958@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 565 | First:(Second:(First:($t@958@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 565 | First:(Second:(First:($t@958@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 565 | First:(Second:(First:($t@958@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@958@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.second ($Snap.second ($Snap.first $t@958@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 566 | Second:(Second:(First:($t@958@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 566 | Second:(Second:(First:($t@958@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 566 | Second:(Second:(First:($t@958@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.second ($Snap.second ($Snap.first $t@958@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first $t@958@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@958@01)))
    ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.first $t@958@01)))
      ($Snap.combine $Snap.unit $Snap.unit)))) fn$$0@957@01))
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  fn$$0@957@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (=
    fn$$0@957@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 567 | fn$$0@957@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 567 | fn$$0@957@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 567 | fn$$0@957@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    fn$$0@957@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
; [then-branch: 568 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 568 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 10
; [else-branch: 568 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@957@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@958@01))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first $t@958@01)))
            ($Snap.combine
              ($Snap.second ($Snap.second ($Snap.first $t@958@01)))
              ($Snap.combine $Snap.unit $Snap.unit))))
        $Snap.unit)))) n_V0@651@01))
; [exec]
; label returnLabel
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 11
(declare-const $k@961@01 $Perm)
(assert ($Perm.isReadVar $k@961@01))
(assert (< $k@961@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@961@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@961@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@957@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@958@01))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first $t@958@01)))
            ($Snap.combine
              ($Snap.second ($Snap.second ($Snap.first $t@958@01)))
              ($Snap.combine $Snap.unit $Snap.unit))))
        $Snap.unit)))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@961@01))
(assert (and
  (< $k@961@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@961@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@957@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
        ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first $t@958@01))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.first $t@958@01)))
              ($Snap.combine
                ($Snap.second ($Snap.second ($Snap.first $t@958@01)))
                ($Snap.combine $Snap.unit $Snap.unit))))
          $Snap.unit)))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 11
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@957@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@958@01))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first $t@958@01)))
            ($Snap.combine
              ($Snap.second ($Snap.second ($Snap.first $t@958@01)))
              ($Snap.combine $Snap.unit $Snap.unit))))
        $Snap.unit)))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@957@01)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first $t@958@01))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first $t@958@01)))
            ($Snap.combine
              ($Snap.second ($Snap.second ($Snap.first $t@958@01)))
              ($Snap.combine $Snap.unit $Snap.unit))))
        $Snap.unit)))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 11
(declare-const $k@962@01 $Perm)
(assert ($Perm.isReadVar $k@962@01))
(assert (< $k@962@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@962@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@962@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@963@01 $Perm)
(assert ($Perm.isReadVar $k@963@01))
(assert (< $k@963@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@963@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@963@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@963@01))
(assert (and (< $k@963@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@963@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@957@01)
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
        ($Snap.combine
          ($Snap.combine
            ($Snap.first ($Snap.first $t@958@01))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.first $t@958@01)))
              ($Snap.combine
                ($Snap.second ($Snap.second ($Snap.first $t@958@01)))
                ($Snap.combine $Snap.unit $Snap.unit))))
          $Snap.unit))))
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@962@01))
(assert ($Perm.isReadVar $k@963@01))
(assert (and
  (< $k@962@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@962@01))
  (< $k@963@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@963@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@957@01)
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first $t@958@01))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.first $t@958@01)))
                ($Snap.combine
                  ($Snap.second ($Snap.second ($Snap.first $t@958@01)))
                  ($Snap.combine $Snap.unit $Snap.unit))))
            $Snap.unit))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 11
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@957@01)
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first $t@958@01))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.first $t@958@01)))
                ($Snap.combine
                  ($Snap.second ($Snap.second ($Snap.first $t@958@01)))
                  ($Snap.combine $Snap.unit $Snap.unit))))
            $Snap.unit))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@957@01)
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first $t@958@01))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.first $t@958@01)))
                ($Snap.combine
                  ($Snap.second ($Snap.second ($Snap.first $t@958@01)))
                  ($Snap.combine $Snap.unit $Snap.unit))))
            $Snap.unit))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)| == old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 11
(declare-const $k@964@01 $Perm)
(assert ($Perm.isReadVar $k@964@01))
(assert (< $k@964@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@964@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@964@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@965@01 $Perm)
(assert ($Perm.isReadVar $k@965@01))
(assert (< $k@965@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@965@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@965@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@965@01))
(assert (and (< $k@965@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@965@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@964@01))
(assert ($Perm.isReadVar $k@965@01))
(assert (and
  (< $k@964@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@964@01))
  (< $k@965@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@965@01))))
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@966@01 $Perm)
(assert ($Perm.isReadVar $k@966@01))
(assert (< $k@966@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@966@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@966@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@967@01 $Perm)
(assert ($Perm.isReadVar $k@967@01))
(assert (< $k@967@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@967@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@967@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@967@01))
(assert (and (< $k@967@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@967@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@966@01))
(assert ($Perm.isReadVar $k@967@01))
(assert (and
  (< $k@966@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@966@01))
  (< $k@967@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@967@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
; [eval] ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@968@01 $Perm)
(assert ($Perm.isReadVar $k@968@01))
(assert (< $k@968@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@968@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@968@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@969@01 $Perm)
(assert ($Perm.isReadVar $k@969@01))
(assert (< $k@969@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@969@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@969@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@969@01))
(assert (and (< $k@969@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@969@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@968@01))
(assert ($Perm.isReadVar $k@969@01))
(assert (and
  (< $k@968@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@968@01))
  (< $k@969@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@969@01))))
(set-option :timeout 0)
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 569 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | dead]
; [else-branch: 569 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 569 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)))
(push) ; 11
(assert (not (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@957@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.first $t@958@01))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first $t@958@01)))
                  ($Snap.combine
                    ($Snap.second ($Snap.second ($Snap.first $t@958@01)))
                    ($Snap.combine $Snap.unit $Snap.unit))))
              $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
  (+
    (Seq_length
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
    1))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@957@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.first $t@958@01))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first $t@958@01)))
                  ($Snap.combine
                    ($Snap.second ($Snap.second ($Snap.first $t@958@01)))
                    ($Snap.combine $Snap.unit $Snap.unit))))
              $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
  (+
    (Seq_length
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
    1)))
; [eval] (forall i_V1: Int :: { (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) } { (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) } (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
(declare-const i_V1@970@01 Int)
(push) ; 11
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 12
(declare-const $k@971@01 $Perm)
(assert ($Perm.isReadVar $k@971@01))
(assert (< $k@971@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@971@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@971@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@972@01 $Perm)
(assert ($Perm.isReadVar $k@972@01))
(assert (< $k@972@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@972@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@972@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@972@01))
(assert (and (< $k@972@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@972@01))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@971@01))
(assert ($Perm.isReadVar $k@972@01))
(assert (and
  (< $k@971@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@971@01))
  (< $k@972@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@972@01))))
(set-option :timeout 0)
(push) ; 12
; [then-branch: 570 | i_V1@970@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 570 | !(i_V1@970@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(push) ; 13
; [then-branch: 570 | i_V1@970@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  i_V1@970@01))
; [eval] (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 14
(declare-const $k@973@01 $Perm)
(assert ($Perm.isReadVar $k@973@01))
(assert (< $k@973@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@973@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@973@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 15
(declare-const $k@974@01 $Perm)
(assert ($Perm.isReadVar $k@974@01))
(assert (< $k@974@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@974@01)))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@974@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@974@01))
(assert (and (< $k@974@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@974@01))))
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@973@01))
(assert ($Perm.isReadVar $k@974@01))
(assert (and
  (< $k@973@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@973@01))
  (< $k@974@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@974@01))))
(pop) ; 13
(set-option :timeout 0)
(push) ; 13
; [else-branch: 570 | !(i_V1@970@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@970@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@973@01))
(assert ($Perm.isReadVar $k@974@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@970@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@970@01)
    (< $k@973@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@973@01))
    (< $k@974@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@974@01)))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@970@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@970@01)))
(pop) ; 11
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@971@01))
(assert ($Perm.isReadVar $k@972@01))
(assert ($Perm.isReadVar $k@973@01))
(assert ($Perm.isReadVar $k@974@01))
(assert (< $k@971@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@971@01)))
(assert (< $k@972@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@972@01)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@970@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@970@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@970@01)
        (< $k@973@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@973@01))
        (< $k@974@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@974@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@970@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@970@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@970@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@970@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@970@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@970@01)
        (< $k@973@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@973@01))
        (< $k@974@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@974@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@970@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@970@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@957@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.first $t@958@01))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first $t@958@01)))
                  ($Snap.combine
                    ($Snap.second ($Snap.second ($Snap.first $t@958@01)))
                    ($Snap.combine $Snap.unit $Snap.unit))))
              $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@970@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@970@01 Int)) (!
  (and
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@970@01)
      (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@957@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@958@01))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.first $t@958@01)))
                    ($Snap.combine
                      ($Snap.second ($Snap.second ($Snap.first $t@958@01)))
                      ($Snap.combine $Snap.unit $Snap.unit))))
                $Snap.unit))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@970@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@957@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.first $t@958@01))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first $t@958@01)))
                  ($Snap.combine
                    ($Snap.second ($Snap.second ($Snap.first $t@958@01)))
                    ($Snap.combine $Snap.unit $Snap.unit))))
              $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@970@01))
  :qid |prog.l1438_precondition|)))
(push) ; 11
(assert (not (forall ((i_V1@970@01 Int)) (!
  (=>
    (and
      (and
        (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        (=>
          (Seq_contains
            (sortedValues_4b5075e4_PMnode ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
              $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
            i_V1@970@01)
          (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
              ($Snap.combine
                ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@957@01)
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
                  ($Snap.combine
                    ($Snap.combine
                      ($Snap.first ($Snap.first $t@958@01))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.first $t@958@01)))
                        ($Snap.combine
                          ($Snap.second ($Snap.second ($Snap.first $t@958@01)))
                          ($Snap.combine $Snap.unit $Snap.unit))))
                    $Snap.unit))))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@970@01))
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@957@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@958@01))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.first $t@958@01)))
                    ($Snap.combine
                      ($Snap.second ($Snap.second ($Snap.first $t@958@01)))
                      ($Snap.combine $Snap.unit $Snap.unit))))
                $Snap.unit))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@970@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@970@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@957@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.first $t@958@01))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first $t@958@01)))
                  ($Snap.combine
                    ($Snap.second ($Snap.second ($Snap.first $t@958@01)))
                    ($Snap.combine $Snap.unit $Snap.unit))))
              $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@970@01))
  :qid |prog.l1438|))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i_V1@970@01 Int)) (!
  (=>
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@970@01)
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@957@01)
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@958@01))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.first $t@958@01)))
                    ($Snap.combine
                      ($Snap.second ($Snap.second ($Snap.first $t@958@01)))
                      ($Snap.combine $Snap.unit $Snap.unit))))
                $Snap.unit))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@970@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@970@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$0@957@01)
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.first $t@958@01))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first $t@958@01)))
                  ($Snap.combine
                    ($Snap.second ($Snap.second ($Snap.first $t@958@01)))
                    ($Snap.combine $Snap.unit $Snap.unit))))
              $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@970@01))
  :qid |prog.l1438|)))
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 11
(declare-const $k@975@01 $Perm)
(assert ($Perm.isReadVar $k@975@01))
(assert (< $k@975@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@975@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@975@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@976@01 $Perm)
(assert ($Perm.isReadVar $k@976@01))
(assert (< $k@976@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@976@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@976@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@976@01))
(assert (and (< $k@976@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@976@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@975@01))
(assert ($Perm.isReadVar $k@976@01))
(assert (and
  (< $k@975@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@975@01))
  (< $k@976@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@976@01))))
(set-option :timeout 0)
(push) ; 11
; [then-branch: 571 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | dead]
; [else-branch: 571 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(push) ; 12
; [else-branch: 571 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
; [eval] !((ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 6
(pop) ; 6
; Joined path conditions
; [then-branch: 572 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 572 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 6
; [else-branch: 572 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 561 | !(value_V0@652@01 < First:(First:(Second:(Second:($t@655@01)))))]
(assert (not
  (<
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(pop) ; 5
; [eval] !(value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$)
; [eval] value_V0_CN1 < (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 573 | !(value_V0@652@01 < First:(First:(Second:(Second:($t@655@01))))) | live]
; [else-branch: 573 | value_V0@652@01 < First:(First:(Second:(Second:($t@655@01)))) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 573 | !(value_V0@652@01 < First:(First:(Second:(Second:($t@655@01)))))]
(assert (not
  (<
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 574 | value_V0@652@01 > First:(First:(Second:(Second:($t@655@01)))) | live]
; [else-branch: 574 | !(value_V0@652@01 > First:(First:(Second:(Second:($t@655@01))))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 574 | value_V0@652@01 > First:(First:(Second:(Second:($t@655@01))))]
(assert (>
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 575 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 575 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 575 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [exec]
; var N15: ShStruct3[Ref, Ref, Ref]
(declare-const N15@977@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; var fn$$4: ShStruct3[Ref, Ref, Ref]
(declare-const fn$$4@978@01 ShStruct3<Ref~_Ref~_Ref>)
; [exec]
; inhale (let fn$$5 ==
;     (fn$$4) in
;     acc((ShStructget0of3(fn$$5): Ref).Intint$$$$_E_$$$, write) &&
;     (acc((ShStructget1of3(fn$$5): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$, write) &&
;     acc((ShStructget2of3(fn$$5): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$, write))) &&
;   (let fn$$6 ==
;     (fn$$4) in
;     (let fn$$7 ==
;       ((tuple3(value_V0_CN1, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(),
;       shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()): Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]])) in
;       (ShStructget0of3(fn$$6): Ref).Intint$$$$_E_$$$ ==
;       (get0of3(fn$$7): Int) &&
;       ((ShStructget1of3(fn$$6): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ ==
;       (get1of3(fn$$7): ShStruct3[Ref, Ref, Ref]) &&
;       (ShStructget2of3(fn$$6): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ ==
;       (get2of3(fn$$7): ShStruct3[Ref, Ref, Ref]))))
(declare-const $t@979@01 $Snap)
(assert (= $t@979@01 ($Snap.combine ($Snap.first $t@979@01) ($Snap.second $t@979@01))))
(assert (=
  ($Snap.first $t@979@01)
  ($Snap.combine
    ($Snap.first ($Snap.first $t@979@01))
    ($Snap.second ($Snap.first $t@979@01)))))
; [eval] (ShStructget0of3(fn$$5): Ref)
(push) ; 8
(set-option :timeout 10)
(assert (not (= (ShStructget0of3<Ref> n_V0@651@01) (ShStructget0of3<Ref> fn$$4@978@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget0of3<Ref> fn$$4@978@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.first $t@979@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@979@01)))
    ($Snap.second ($Snap.second ($Snap.first $t@979@01))))))
; [eval] (ShStructget1of3(fn$$5): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= (ShStructget2of3<Ref> n_V0@651@01) (ShStructget1of3<Ref> fn$$4@978@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> n_V0@651@01) (ShStructget1of3<Ref> fn$$4@978@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget1of3<Ref> fn$$4@978@01) $Ref.null)))
; [eval] (ShStructget2of3(fn$$5): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> n_V0@651@01) (ShStructget2of3<Ref> fn$$4@978@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= (ShStructget2of3<Ref> n_V0@651@01) (ShStructget2of3<Ref> fn$$4@978@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> fn$$4@978@01) (ShStructget2of3<Ref> fn$$4@978@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget2of3<Ref> fn$$4@978@01) $Ref.null)))
(assert (= ($Snap.second $t@979@01) $Snap.unit))
; [eval] (let fn$$6 == (fn$$4) in (let fn$$7 == ((tuple3(value_V0_CN1, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()): Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]])) in (ShStructget0of3(fn$$6): Ref).Intint$$$$_E_$$$ == (get0of3(fn$$7): Int) && ((ShStructget1of3(fn$$6): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get1of3(fn$$7): ShStruct3[Ref, Ref, Ref]) && (ShStructget2of3(fn$$6): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get2of3(fn$$7): ShStruct3[Ref, Ref, Ref]))))
(declare-const letvar@980@01 ShStruct3<Ref~_Ref~_Ref>)
(assert (= (as letvar@980@01  ShStruct3<Ref~_Ref~_Ref>) fn$$4@978@01))
; [eval] (let fn$$7 == ((tuple3(value_V0_CN1, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()): Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]])) in (ShStructget0of3(fn$$6): Ref).Intint$$$$_E_$$$ == (get0of3(fn$$7): Int) && ((ShStructget1of3(fn$$6): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get1of3(fn$$7): ShStruct3[Ref, Ref, Ref]) && (ShStructget2of3(fn$$6): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get2of3(fn$$7): ShStruct3[Ref, Ref, Ref])))
; [eval] (tuple3(value_V0_CN1, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()): Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]])
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(declare-const letvar@981@01 Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>)
(assert (=
  (as letvar@981@01  Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>)
  (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget0of3(fn$$6): Ref).Intint$$$$_E_$$$ == (get0of3(fn$$7): Int) && ((ShStructget1of3(fn$$6): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get1of3(fn$$7): ShStruct3[Ref, Ref, Ref]) && (ShStructget2of3(fn$$6): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get2of3(fn$$7): ShStruct3[Ref, Ref, Ref]))
; [eval] (ShStructget0of3(fn$$6): Ref).Intint$$$$_E_$$$ == (get0of3(fn$$7): Int)
; [eval] (ShStructget0of3(fn$$6): Ref)
; [eval] (get0of3(fn$$7): Int)
(push) ; 8
; [then-branch: 576 | First:(First:($t@979@01)) == get0of3[Int](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))) | live]
; [else-branch: 576 | First:(First:($t@979@01)) != get0of3[Int](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))) | live]
(push) ; 9
; [then-branch: 576 | First:(First:($t@979@01)) == get0of3[Int](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)))]
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@979@01)))
  (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
; [eval] (ShStructget1of3(fn$$6): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get1of3(fn$$7): ShStruct3[Ref, Ref, Ref])
; [eval] (ShStructget1of3(fn$$6): Ref)
; [eval] (get1of3(fn$$7): ShStruct3[Ref, Ref, Ref])
(push) ; 10
; [then-branch: 577 | First:(Second:(First:($t@979@01))) == get1of3[ShStruct3[Ref, Ref, Ref]](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))) | live]
; [else-branch: 577 | First:(Second:(First:($t@979@01))) != get1of3[ShStruct3[Ref, Ref, Ref]](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_))) | live]
(push) ; 11
; [then-branch: 577 | First:(Second:(First:($t@979@01))) == get1of3[ShStruct3[Ref, Ref, Ref]](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)))]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@979@01))))
  (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
; [eval] (ShStructget2of3(fn$$6): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == (get2of3(fn$$7): ShStruct3[Ref, Ref, Ref])
; [eval] (ShStructget2of3(fn$$6): Ref)
; [eval] (get2of3(fn$$7): ShStruct3[Ref, Ref, Ref])
(pop) ; 11
(push) ; 11
; [else-branch: 577 | First:(Second:(First:($t@979@01))) != get1of3[ShStruct3[Ref, Ref, Ref]](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)))]
(assert (not
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@979@01))))
    (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@979@01))))
      (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
  (=
    ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@979@01))))
    (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(pop) ; 9
(push) ; 9
; [else-branch: 576 | First:(First:($t@979@01)) != get0of3[Int](tuple3[Tuple3[Int, ShStruct3[Ref, Ref, Ref], ShStruct3[Ref, Ref, Ref]]](value_V0@652@01, shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_), shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)))]
(assert (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@979@01)))
    (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@979@01)))
    (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
  (and
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@979@01)))
      (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
    (or
      (not
        (=
          ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@979@01))))
          (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
      (=
        ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@979@01))))
        (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))))
; Joined path conditions
(assert (or
  (not
    (=
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@979@01)))
      (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@979@01)))
    (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
(assert (and
  (and
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.second ($Snap.second ($Snap.first $t@979@01))))
      (get2of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
    (=
      ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@979@01))))
      (get1of3<ShStruct3<Ref~_Ref~_Ref>> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first $t@979@01)))
    (get0of3<Int> (tuple3<Tuple3<Int~_ShStruct3<Ref~_Ref~_Ref>~_ShStruct3<Ref~_Ref~_Ref>>> value_V0@652@01 (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit) (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; N15 := fn$$4
; [exec]
; (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ := N15
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> fn$$4@978@01) (ShStructget2of3<Ref> n_V0@651@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= (ShStructget1of3<Ref> n_V0@651@01) (ShStructget2of3<Ref> n_V0@651@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= (ShStructget2of3<Ref> fn$$4@978@01) (ShStructget2of3<Ref> n_V0@651@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; fold acc(tree_4b5075e4_PMnode((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$), write)
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 8
(pop) ; 8
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@979@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 578 | First:(Second:(First:($t@979@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 578 | First:(Second:(First:($t@979@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 578 | First:(Second:(First:($t@979@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.first ($Snap.second ($Snap.first $t@979@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 9
(pop) ; 9
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.second ($Snap.second ($Snap.first $t@979@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 579 | Second:(Second:(First:($t@979@01))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 579 | Second:(Second:(First:($t@979@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 579 | Second:(Second:(First:($t@979@01))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (=
  ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap.second ($Snap.second ($Snap.first $t@979@01))))
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first $t@979@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first $t@979@01)))
    ($Snap.combine
      ($Snap.second ($Snap.second ($Snap.first $t@979@01)))
      ($Snap.combine $Snap.unit $Snap.unit)))) fn$$4@978@01))
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 10
(pop) ; 10
; Joined path conditions
; [then-branch: 580 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 580 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 10
; [else-branch: 580 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 11
(pop) ; 11
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (=
  fn$$4@978@01
  (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (=
    fn$$4@978@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 581 | fn$$4@978@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
; [else-branch: 581 | fn$$4@978@01 == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 581 | fn$$4@978@01 != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (not
  (=
    fn$$4@978@01
    (shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit))))
; [eval] (ShStructget2of3(n_V0): Ref)
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@978@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.first $t@979@01))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first $t@979@01)))
            ($Snap.combine
              ($Snap.second ($Snap.second ($Snap.first $t@979@01)))
              ($Snap.combine $Snap.unit $Snap.unit)))))))) n_V0@651@01))
; [exec]
; label returnLabel
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 12
(declare-const $k@982@01 $Perm)
(assert ($Perm.isReadVar $k@982@01))
(assert (< $k@982@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@982@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@982@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@978@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.first $t@979@01))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first $t@979@01)))
            ($Snap.combine
              ($Snap.second ($Snap.second ($Snap.first $t@979@01)))
              ($Snap.combine $Snap.unit $Snap.unit)))))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@982@01))
(assert (and
  (< $k@982@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@982@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@978@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.first $t@979@01))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.first $t@979@01)))
              ($Snap.combine
                ($Snap.second ($Snap.second ($Snap.first $t@979@01)))
                ($Snap.combine $Snap.unit $Snap.unit)))))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 12
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@978@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.first $t@979@01))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first $t@979@01)))
            ($Snap.combine
              ($Snap.second ($Snap.second ($Snap.first $t@979@01)))
              ($Snap.combine $Snap.unit $Snap.unit)))))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@978@01)
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($Snap.first ($Snap.first $t@979@01))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first $t@979@01)))
            ($Snap.combine
              ($Snap.second ($Snap.second ($Snap.first $t@979@01)))
              ($Snap.combine $Snap.unit $Snap.unit)))))))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 12
(declare-const $k@983@01 $Perm)
(assert ($Perm.isReadVar $k@983@01))
(assert (< $k@983@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@983@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@983@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@984@01 $Perm)
(assert ($Perm.isReadVar $k@984@01))
(assert (< $k@984@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@984@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@984@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@984@01))
(assert (and (< $k@984@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@984@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
      ($Snap.combine
        ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@978@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.first ($Snap.first $t@979@01))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.first $t@979@01)))
              ($Snap.combine
                ($Snap.second ($Snap.second ($Snap.first $t@979@01)))
                ($Snap.combine $Snap.unit $Snap.unit))))))))
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@983@01))
(assert ($Perm.isReadVar $k@984@01))
(assert (and
  (< $k@983@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@983@01))
  (< $k@984@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@984@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@978@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.first $t@979@01))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.first $t@979@01)))
                ($Snap.combine
                  ($Snap.second ($Snap.second ($Snap.first $t@979@01)))
                  ($Snap.combine $Snap.unit $Snap.unit))))))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 12
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@978@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.first $t@979@01))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.first $t@979@01)))
                ($Snap.combine
                  ($Snap.second ($Snap.second ($Snap.first $t@979@01)))
                  ($Snap.combine $Snap.unit $Snap.unit))))))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@978@01)
          ($Snap.combine
            $Snap.unit
            ($Snap.combine
              ($Snap.first ($Snap.first $t@979@01))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.first $t@979@01)))
                ($Snap.combine
                  ($Snap.second ($Snap.second ($Snap.first $t@979@01)))
                  ($Snap.combine $Snap.unit $Snap.unit))))))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)| == old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 12
(declare-const $k@985@01 $Perm)
(assert ($Perm.isReadVar $k@985@01))
(assert (< $k@985@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@985@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@985@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@986@01 $Perm)
(assert ($Perm.isReadVar $k@986@01))
(assert (< $k@986@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@986@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@986@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@986@01))
(assert (and (< $k@986@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@986@01))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@985@01))
(assert ($Perm.isReadVar $k@986@01))
(assert (and
  (< $k@985@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@985@01))
  (< $k@986@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@986@01))))
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@987@01 $Perm)
(assert ($Perm.isReadVar $k@987@01))
(assert (< $k@987@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@987@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@987@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@988@01 $Perm)
(assert ($Perm.isReadVar $k@988@01))
(assert (< $k@988@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@988@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@988@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@988@01))
(assert (and (< $k@988@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@988@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@987@01))
(assert ($Perm.isReadVar $k@988@01))
(assert (and
  (< $k@987@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@987@01))
  (< $k@988@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@988@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
; [eval] ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@989@01 $Perm)
(assert ($Perm.isReadVar $k@989@01))
(assert (< $k@989@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@989@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@989@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@990@01 $Perm)
(assert ($Perm.isReadVar $k@990@01))
(assert (< $k@990@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@990@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@990@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@990@01))
(assert (and (< $k@990@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@990@01))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@989@01))
(assert ($Perm.isReadVar $k@990@01))
(assert (and
  (< $k@989@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@989@01))
  (< $k@990@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@990@01))))
(set-option :timeout 0)
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 582 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | dead]
; [else-branch: 582 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 582 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)))
(push) ; 12
(assert (not (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@978@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.first $t@979@01))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first $t@979@01)))
                  ($Snap.combine
                    ($Snap.second ($Snap.second ($Snap.first $t@979@01)))
                    ($Snap.combine $Snap.unit $Snap.unit))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
  (+
    (Seq_length
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
    1))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@978@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.first $t@979@01))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first $t@979@01)))
                  ($Snap.combine
                    ($Snap.second ($Snap.second ($Snap.first $t@979@01)))
                    ($Snap.combine $Snap.unit $Snap.unit))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
  (+
    (Seq_length
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
    1)))
; [eval] (forall i_V1: Int :: { (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) } { (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) } (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
(declare-const i_V1@991@01 Int)
(push) ; 12
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 13
(declare-const $k@992@01 $Perm)
(assert ($Perm.isReadVar $k@992@01))
(assert (< $k@992@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@992@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@992@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 14
(declare-const $k@993@01 $Perm)
(assert ($Perm.isReadVar $k@993@01))
(assert (< $k@993@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@993@01)))
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No $k@993@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
; Joined path conditions
(assert ($Perm.isReadVar $k@993@01))
(assert (and (< $k@993@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@993@01))))
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@992@01))
(assert ($Perm.isReadVar $k@993@01))
(assert (and
  (< $k@992@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@992@01))
  (< $k@993@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@993@01))))
(set-option :timeout 0)
(push) ; 13
; [then-branch: 583 | i_V1@991@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 583 | !(i_V1@991@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(push) ; 14
; [then-branch: 583 | i_V1@991@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  i_V1@991@01))
; [eval] (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 15
(declare-const $k@994@01 $Perm)
(assert ($Perm.isReadVar $k@994@01))
(assert (< $k@994@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@994@01)))
(push) ; 16
(set-option :timeout 10)
(assert (not (< $Perm.No $k@994@01)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 16
(declare-const $k@995@01 $Perm)
(assert ($Perm.isReadVar $k@995@01))
(assert (< $k@995@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@995@01)))
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No $k@995@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(pop) ; 16
; Joined path conditions
(assert ($Perm.isReadVar $k@995@01))
(assert (and (< $k@995@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@995@01))))
(pop) ; 15
; Joined path conditions
(assert ($Perm.isReadVar $k@994@01))
(assert ($Perm.isReadVar $k@995@01))
(assert (and
  (< $k@994@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@994@01))
  (< $k@995@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@995@01))))
(pop) ; 14
(set-option :timeout 0)
(push) ; 14
; [else-branch: 583 | !(i_V1@991@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@991@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@994@01))
(assert ($Perm.isReadVar $k@995@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@991@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@991@01)
    (< $k@994@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@994@01))
    (< $k@995@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@995@01)))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@991@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@991@01)))
(pop) ; 12
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@992@01))
(assert ($Perm.isReadVar $k@993@01))
(assert ($Perm.isReadVar $k@994@01))
(assert ($Perm.isReadVar $k@995@01))
(assert (< $k@992@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@992@01)))
(assert (< $k@993@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@993@01)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@991@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@991@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@991@01)
        (< $k@994@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@994@01))
        (< $k@995@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@995@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@991@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@991@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@991@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@991@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@991@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@991@01)
        (< $k@994@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@994@01))
        (< $k@995@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@995@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@991@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@991@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@978@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.first $t@979@01))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first $t@979@01)))
                  ($Snap.combine
                    ($Snap.second ($Snap.second ($Snap.first $t@979@01)))
                    ($Snap.combine $Snap.unit $Snap.unit))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@991@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@991@01 Int)) (!
  (and
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@991@01)
      (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@978@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@979@01))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.first $t@979@01)))
                    ($Snap.combine
                      ($Snap.second ($Snap.second ($Snap.first $t@979@01)))
                      ($Snap.combine $Snap.unit $Snap.unit))))))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@991@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@978@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.first $t@979@01))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first $t@979@01)))
                  ($Snap.combine
                    ($Snap.second ($Snap.second ($Snap.first $t@979@01)))
                    ($Snap.combine $Snap.unit $Snap.unit))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@991@01))
  :qid |prog.l1438_precondition|)))
(push) ; 12
(assert (not (forall ((i_V1@991@01 Int)) (!
  (=>
    (and
      (and
        (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        (=>
          (Seq_contains
            (sortedValues_4b5075e4_PMnode ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
              $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
            i_V1@991@01)
          (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
                ($Snap.combine
                  ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@978@01)
                  ($Snap.combine
                    $Snap.unit
                    ($Snap.combine
                      ($Snap.first ($Snap.first $t@979@01))
                      ($Snap.combine
                        ($Snap.first ($Snap.second ($Snap.first $t@979@01)))
                        ($Snap.combine
                          ($Snap.second ($Snap.second ($Snap.first $t@979@01)))
                          ($Snap.combine $Snap.unit $Snap.unit))))))))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@991@01))
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@978@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@979@01))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.first $t@979@01)))
                    ($Snap.combine
                      ($Snap.second ($Snap.second ($Snap.first $t@979@01)))
                      ($Snap.combine $Snap.unit $Snap.unit))))))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@991@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@991@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@978@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.first $t@979@01))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first $t@979@01)))
                  ($Snap.combine
                    ($Snap.second ($Snap.second ($Snap.first $t@979@01)))
                    ($Snap.combine $Snap.unit $Snap.unit))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@991@01))
  :qid |prog.l1438|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i_V1@991@01 Int)) (!
  (=>
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@991@01)
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@978@01)
              ($Snap.combine
                $Snap.unit
                ($Snap.combine
                  ($Snap.first ($Snap.first $t@979@01))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.first $t@979@01)))
                    ($Snap.combine
                      ($Snap.second ($Snap.second ($Snap.first $t@979@01)))
                      ($Snap.combine $Snap.unit $Snap.unit))))))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@991@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@991@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap fn$$4@978@01)
            ($Snap.combine
              $Snap.unit
              ($Snap.combine
                ($Snap.first ($Snap.first $t@979@01))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first $t@979@01)))
                  ($Snap.combine
                    ($Snap.second ($Snap.second ($Snap.first $t@979@01)))
                    ($Snap.combine $Snap.unit $Snap.unit))))))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@991@01))
  :qid |prog.l1438|)))
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 12
(declare-const $k@996@01 $Perm)
(assert ($Perm.isReadVar $k@996@01))
(assert (< $k@996@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@996@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@996@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@997@01 $Perm)
(assert ($Perm.isReadVar $k@997@01))
(assert (< $k@997@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@997@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@997@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@997@01))
(assert (and (< $k@997@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@997@01))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@996@01))
(assert ($Perm.isReadVar $k@997@01))
(assert (and
  (< $k@996@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@996@01))
  (< $k@997@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@997@01))))
(set-option :timeout 0)
(push) ; 12
; [then-branch: 584 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | dead]
; [else-branch: 584 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(push) ; 13
; [else-branch: 584 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [eval] !((ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0_CN0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0_CN0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
; [then-branch: 585 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 585 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 7
; [else-branch: 585 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 574 | !(value_V0@652@01 > First:(First:(Second:(Second:($t@655@01)))))]
(assert (not
  (>
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(pop) ; 6
; [eval] !(value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$)
; [eval] value_V0_CN1 > (ShStructget0of3(n_V0_CN0): Ref).Intint$$$$_E_$$$
; [eval] (ShStructget0of3(n_V0_CN0): Ref)
(push) ; 6
(set-option :timeout 10)
(assert (not (>
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (>
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 586 | !(value_V0@652@01 > First:(First:(Second:(Second:($t@655@01))))) | live]
; [else-branch: 586 | value_V0@652@01 > First:(First:(Second:(Second:($t@655@01)))) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 586 | !(value_V0@652@01 > First:(First:(Second:(Second:($t@655@01)))))]
(assert (not
  (>
    value_V0@652@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))))
; [exec]
; fold acc(tree_4b5075e4_PMnode(n_V0_CN0), write)
; [eval] (ShStructget0of3(n_V0): Ref)
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] !((ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget1of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget1of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 7
(pop) ; 7
; Joined path conditions
; [then-branch: 587 | First:(Second:(First:(Second:(Second:($t@655@01))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 587 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 7
; [else-branch: 587 | First:(Second:(First:(Second:(Second:($t@655@01))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
; [eval] !((ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$())
; [eval] (ShStructget2of3(n_V0): Ref).PointerDefinednode_4b5075e4_T$$$_S_$$$$$$$_E_$$$ == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] (ShStructget2of3(n_V0): Ref)
; [eval] shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
; [then-branch: 588 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) != shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | dead]
; [else-branch: 588 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_) | live]
(push) ; 8
; [else-branch: 588 | First:(Second:(Second:(First:(Second:(Second:($t@655@01)))))) == shStructDefault_$valueA_Intint$$$_S_$$$_leftA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$_rightA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$(_)]
(assert (tree_4b5075e4_PMnode%trigger ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@651@01))
; [exec]
; label returnLabel
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@998@01 $Perm)
(assert ($Perm.isReadVar $k@998@01))
(assert (< $k@998@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@998@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@998@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@998@01))
(assert (and
  (< $k@998@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@998@01))
  (sorted_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
        ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (sorted_4b5075e4_PMnode ($Snap.combine
  ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
      ($Snap.combine $Snap.unit $Snap.unit)))) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
; [eval] (value_V0 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@999@01 $Perm)
(assert ($Perm.isReadVar $k@999@01))
(assert (< $k@999@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@999@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@999@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@1000@01 $Perm)
(assert ($Perm.isReadVar $k@1000@01))
(assert (< $k@1000@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@1000@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@1000@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@1000@01))
(assert (and (< $k@1000@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@1000@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
        ($Snap.combine $Snap.unit $Snap.unit))))
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@999@01))
(assert ($Perm.isReadVar $k@1000@01))
(assert (and
  (< $k@999@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@999@01))
  (< $k@1000@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@1000@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine $Snap.unit $Snap.unit))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
(set-option :timeout 0)
(push) ; 9
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine $Snap.unit $Snap.unit))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.combine
      ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
          ($Snap.combine $Snap.unit $Snap.unit))))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)| == old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@1001@01 $Perm)
(assert ($Perm.isReadVar $k@1001@01))
(assert (< $k@1001@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@1001@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@1001@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@1002@01 $Perm)
(assert ($Perm.isReadVar $k@1002@01))
(assert (< $k@1002@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@1002@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@1002@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@1002@01))
(assert (and (< $k@1002@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@1002@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@1001@01))
(assert ($Perm.isReadVar $k@1002@01))
(assert (and
  (< $k@1001@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@1001@01))
  (< $k@1002@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@1002@01))))
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|) + ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] old(|sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|)
; [eval] |sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)|
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@1003@01 $Perm)
(assert ($Perm.isReadVar $k@1003@01))
(assert (< $k@1003@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@1003@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@1003@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@1004@01 $Perm)
(assert ($Perm.isReadVar $k@1004@01))
(assert (< $k@1004@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@1004@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@1004@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@1004@01))
(assert (and (< $k@1004@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@1004@01))))
(assert (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
  ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
  $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@1003@01))
(assert ($Perm.isReadVar $k@1004@01))
(assert (and
  (< $k@1003@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@1003@01))
  (< $k@1004@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@1004@01))
  (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
; [eval] ((value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ? 0 : 1)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 9
(declare-const $k@1005@01 $Perm)
(assert ($Perm.isReadVar $k@1005@01))
(assert (< $k@1005@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@1005@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@1005@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@1006@01 $Perm)
(assert ($Perm.isReadVar $k@1006@01))
(assert (< $k@1006@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@1006@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@1006@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@1006@01))
(assert (and (< $k@1006@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@1006@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@1005@01))
(assert ($Perm.isReadVar $k@1006@01))
(assert (and
  (< $k@1005@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@1005@01))
  (< $k@1006@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@1006@01))))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 589 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 589 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 589 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  value_V0@652@01))
(push) ; 9
(assert (not (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine $Snap.unit $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine $Snap.unit $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))
  (Seq_length
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))))
; [eval] (forall i_V1: Int :: { (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) } { (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) } (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
(declare-const i_V1@1007@01 Int)
(push) ; 9
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] (i_V1 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 10
(declare-const $k@1008@01 $Perm)
(assert ($Perm.isReadVar $k@1008@01))
(assert (< $k@1008@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@1008@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@1008@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@1009@01 $Perm)
(assert ($Perm.isReadVar $k@1009@01))
(assert (< $k@1009@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@1009@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@1009@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@1009@01))
(assert (and (< $k@1009@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@1009@01))))
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@1008@01))
(assert ($Perm.isReadVar $k@1009@01))
(assert (and
  (< $k@1008@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@1008@01))
  (< $k@1009@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@1009@01))))
(set-option :timeout 0)
(push) ; 10
; [then-branch: 590 | i_V1@1007@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 590 | !(i_V1@1007@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | live]
(push) ; 11
; [then-branch: 590 | i_V1@1007@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
(assert (Seq_contains
  (sortedValues_4b5075e4_PMnode ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
    $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
  i_V1@1007@01))
; [eval] (i_V1 in sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 12
(declare-const $k@1010@01 $Perm)
(assert ($Perm.isReadVar $k@1010@01))
(assert (< $k@1010@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@1010@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@1010@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 13
(declare-const $k@1011@01 $Perm)
(assert ($Perm.isReadVar $k@1011@01))
(assert (< $k@1011@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@1011@01)))
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@1011@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
; Joined path conditions
(assert ($Perm.isReadVar $k@1011@01))
(assert (and (< $k@1011@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@1011@01))))
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@1010@01))
(assert ($Perm.isReadVar $k@1011@01))
(assert (and
  (< $k@1010@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@1010@01))
  (< $k@1011@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@1011@01))))
(pop) ; 11
(set-option :timeout 0)
(push) ; 11
; [else-branch: 590 | !(i_V1@1007@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01))]
(assert (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@1007@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@1010@01))
(assert ($Perm.isReadVar $k@1011@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@1007@01)
  (and
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@1007@01)
    (< $k@1010@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@1010@01))
    (< $k@1011@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@1011@01)))))
; Joined path conditions
(assert (or
  (not
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@1007@01))
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@1007@01)))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
(assert ($Perm.isReadVar $k@1008@01))
(assert ($Perm.isReadVar $k@1009@01))
(assert ($Perm.isReadVar $k@1010@01))
(assert ($Perm.isReadVar $k@1011@01))
(assert (< $k@1008@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@1008@01)))
(assert (< $k@1009@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@1009@01)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i_V1@1007@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@1007@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@1007@01)
        (< $k@1010@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@1010@01))
        (< $k@1011@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@1011@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@1007@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@1007@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@1007@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@1007@01 Int)) (!
  (and
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@1007@01)
      (and
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@1007@01)
        (< $k@1010@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@1010@01))
        (< $k@1011@01 $Perm.Write)
        (<= $Perm.No (- $Perm.Write $k@1011@01))))
    (or
      (not
        (Seq_contains
          (sortedValues_4b5075e4_PMnode ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
          i_V1@1007@01))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@1007@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine $Snap.unit $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@1007@01))
  :qid |prog.l1438-aux|)))
(assert (forall ((i_V1@1007@01 Int)) (!
  (and
    (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (=>
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@1007@01)
      (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine $Snap.unit $Snap.unit))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@1007@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine $Snap.unit $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@1007@01))
  :qid |prog.l1438_precondition|)))
(push) ; 9
(assert (not (forall ((i_V1@1007@01 Int)) (!
  (=>
    (and
      (and
        (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        (=>
          (Seq_contains
            (sortedValues_4b5075e4_PMnode ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
              $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
            i_V1@1007@01)
          (sortedValues_4b5075e4_PMnode%precondition ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
                  ($Snap.combine $Snap.unit $Snap.unit))))
            $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))
      (Seq_contains
        (sortedValues_4b5075e4_PMnode ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
          $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
        i_V1@1007@01))
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine $Snap.unit $Snap.unit))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@1007@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@1007@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine $Snap.unit $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@1007@01))
  :qid |prog.l1438|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i_V1@1007@01 Int)) (!
  (=>
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@1007@01)
    (Seq_contains
      (sortedValues_4b5075e4_PMnode ($Snap.combine
        ($Snap.combine
          ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
            ($Snap.combine
              ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
              ($Snap.combine $Snap.unit $Snap.unit))))
        $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
      i_V1@1007@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@1007@01))
  :pattern ((Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine $Snap.unit $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    i_V1@1007@01))
  :qid |prog.l1438|)))
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))) ==> old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] (value_V0 in old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)))
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 9
(declare-const $k@1012@01 $Perm)
(assert ($Perm.isReadVar $k@1012@01))
(assert (< $k@1012@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@1012@01)))
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@1012@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 10
(declare-const $k@1013@01 $Perm)
(assert ($Perm.isReadVar $k@1013@01))
(assert (< $k@1013@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@1013@01)))
(push) ; 11
(set-option :timeout 10)
(assert (not (< $Perm.No $k@1013@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
; Joined path conditions
(assert ($Perm.isReadVar $k@1013@01))
(assert (and (< $k@1013@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@1013@01))))
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@1012@01))
(assert ($Perm.isReadVar $k@1013@01))
(assert (and
  (< $k@1012@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@1012@01))
  (< $k@1013@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@1013@01))))
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 591 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01) | live]
; [else-branch: 591 | !(value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 591 | value_V0@652@01 in sortedValues_4b5075e4_PMnode((First:(Second:(Second:($t@655@01))), _), n_V0@651@01, lowerBound_V0@653@01, upperBound_V0@654@01)]
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)) == sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
; [eval] old(sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(push) ; 11
(declare-const $k@1014@01 $Perm)
(assert ($Perm.isReadVar $k@1014@01))
(assert (< $k@1014@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@1014@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@1014@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@1015@01 $Perm)
(assert ($Perm.isReadVar $k@1015@01))
(assert (< $k@1015@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@1015@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@1015@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@1015@01))
(assert (and (< $k@1015@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@1015@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@1014@01))
(assert ($Perm.isReadVar $k@1015@01))
(assert (and
  (< $k@1014@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@1014@01))
  (< $k@1015@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@1015@01))))
; [eval] sortedValues_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 11
(declare-const $k@1016@01 $Perm)
(assert ($Perm.isReadVar $k@1016@01))
(assert (< $k@1016@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@1016@01)))
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@1016@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] sorted_4b5075e4_PMnode(n_V0, lowerBound_V0, upperBound_V0)
(set-option :timeout 0)
(push) ; 12
(declare-const $k@1017@01 $Perm)
(assert ($Perm.isReadVar $k@1017@01))
(assert (< $k@1017@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@1017@01)))
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No $k@1017@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
(assert ($Perm.isReadVar $k@1017@01))
(assert (and (< $k@1017@01 $Perm.Write) (<= $Perm.No (- $Perm.Write $k@1017@01))))
(pop) ; 11
; Joined path conditions
(assert ($Perm.isReadVar $k@1016@01))
(assert ($Perm.isReadVar $k@1017@01))
(assert (and
  (< $k@1016@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@1016@01))
  (< $k@1017@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@1017@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert ($Perm.isReadVar $k@1014@01))
(assert ($Perm.isReadVar $k@1015@01))
(assert ($Perm.isReadVar $k@1016@01))
(assert ($Perm.isReadVar $k@1017@01))
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (and
    (< $k@1014@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@1014@01))
    (< $k@1015@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@1015@01))
    (< $k@1016@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@1016@01))
    (< $k@1017@01 $Perm.Write)
    (<= $Perm.No (- $Perm.Write $k@1017@01)))))
(set-option :timeout 0)
(push) ; 9
(assert (not (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine $Snap.unit $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (Seq_contains
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    value_V0@652@01)
  (Seq_equal
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@655@01)))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01)
    (sortedValues_4b5075e4_PMnode ($Snap.combine
      ($Snap.combine
        ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01))))
        ($Snap.combine
          ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))
          ($Snap.combine
            ($Snap.first ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second $t@655@01))))))
            ($Snap.combine $Snap.unit $Snap.unit))))
      $Snap.unit) n_V0@651@01 lowerBound_V0@653@01 upperBound_V0@654@01))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 586 | value_V0@652@01 > First:(First:(Second:(Second:($t@655@01))))]
(assert (>
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 573 | value_V0@652@01 < First:(First:(Second:(Second:($t@655@01))))]
(assert (<
  value_V0@652@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second $t@655@01)))))))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- main_4b5075e4_$CHECKMAIN ----------
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; label returnLabel
(pop) ; 2
(pop) ; 1
; ---------- main_4b5075e4_F ----------
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var t_V0: ShStruct1[Ref]
(declare-const t_V0@1018@01 ShStruct1<Ref>)
; [exec]
; var N0: ShStruct1[Ref]
(declare-const N0@1019@01 ShStruct1<Ref>)
; [exec]
; var value2_V0: Int
(declare-const value2_V0@1020@01 Int)
; [exec]
; var value1_V0: Int
(declare-const value1_V0@1021@01 Int)
; [exec]
; var value0_V0: Int
(declare-const value0_V0@1022@01 Int)
; [exec]
; inhale value0_V0 == 0
(declare-const $t@1023@01 $Snap)
(assert (= $t@1023@01 $Snap.unit))
; [eval] value0_V0 == 0
(assert (= value0_V0@1022@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; value0_V0 := 2
; [exec]
; inhale value1_V0 == 0
(declare-const $t@1024@01 $Snap)
(assert (= $t@1024@01 $Snap.unit))
; [eval] value1_V0 == 0
(assert (= value1_V0@1021@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; value1_V0 := 5
; [exec]
; inhale value2_V0 == 0
(declare-const $t@1025@01 $Snap)
(assert (= $t@1025@01 $Snap.unit))
; [eval] value2_V0 == 0
(assert (= value2_V0@1020@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; value2_V0 := 42
; [exec]
; N0 := client0_4b5075e4_F(value0_V0)
(declare-const t_V0@1026@01 ShStruct1<Ref>)
(declare-const $t@1027@01 $Snap)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale t_V0 ==
;   shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(declare-const $t@1028@01 $Snap)
(assert (= $t@1028@01 $Snap.unit))
; [eval] t_V0 == shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
; [eval] shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(assert (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit))
(assert (=
  t_V0@1018@01
  (shStructDefault_$rootA_PointerDefinednode_4b5075e4_T$$$_S_$$$$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; t_V0 := N0
; [exec]
; client1_4b5075e4_F(t_V0, value1_V0)
(declare-const $t@1029@01 $Snap)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; client2_4b5075e4_F(t_V0, value2_V0)
(declare-const $t@1030@01 $Snap)
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; label returnLabel
(pop) ; 2
(pop) ; 1
