(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $allocated () T@U)
(declare-fun key () T@U)
(declare-fun degree () T@U)
(declare-fun parent () T@U)
(declare-fun sibling () T@U)
(declare-fun child () T@U)
(declare-fun Nodes () T@U)
(declare-fun size () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun NormalFieldType () T@T)
(declare-fun RefType () T@T)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun state (T@U T@U) Bool)
(declare-fun segLength (T@U T@U T@U) Int)
(declare-fun |segLength#triggerStateless| (T@U T@U) Int)
(declare-fun |heapseg#trigger| (T@U T@U) Bool)
(declare-fun heapseg (T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun AssumeFunctionsAbove () Int)
(declare-fun |segLength'| (T@U T@U T@U) Int)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun PredicateType_heapsegType () T@T)
(declare-fun FrameTypeType () T@T)
(declare-fun |treeDegree'| (T@U T@U) Int)
(declare-fun |treeDegree#trigger| (T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun tree (T@U) T@U)
(declare-fun PredicateType_treeType () T@T)
(declare-fun GoodMask (T@U) Bool)
(declare-fun |segDegree'| (T@U T@U T@U Int) Int)
(declare-fun dummyFunction (T@U) Bool)
(declare-fun |segDegree#triggerStateless| (T@U T@U Int) Int)
(declare-fun segSize (T@U T@U T@U) Int)
(declare-fun |segSize#triggerStateless| (T@U T@U) Int)
(declare-fun |treeSize'| (T@U T@U) Int)
(declare-fun |segSize'| (T@U T@U T@U) Int)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun |segParent'| (T@U T@U T@U) T@U)
(declare-fun |segParent#triggerStateless| (T@U T@U) T@U)
(declare-fun |sorted'| (T@U T@U T@U) Bool)
(declare-fun |sorted#triggerStateless| (T@U T@U) Bool)
(declare-fun |presorted'| (T@U T@U T@U) Bool)
(declare-fun |presorted#triggerStateless| (T@U T@U) Bool)
(declare-fun |validChildren'| (T@U T@U T@U) Bool)
(declare-fun |validChildren#triggerStateless| (T@U T@U) Bool)
(declare-fun |heapseg#everUsed| (T@U) Bool)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun IsWandField (T@U) Bool)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun heap (T@U) T@U)
(declare-fun PredicateType_heapType () T@T)
(declare-fun |treeKey'| (T@U T@U) Int)
(declare-fun |treeKey#triggerStateless| (T@U) Int)
(declare-fun |treeDegree#triggerStateless| (T@U) Int)
(declare-fun |treeSize#triggerStateless| (T@U) Int)
(declare-fun |treeParent'| (T@U T@U) T@U)
(declare-fun |treeParent#triggerStateless| (T@U) T@U)
(declare-fun |tree#trigger| (T@U T@U) Bool)
(declare-fun |tree#everUsed| (T@U) Bool)
(declare-fun |heap#trigger| (T@U T@U) Bool)
(declare-fun |heap#everUsed| (T@U) Bool)
(declare-fun segDegree (T@U T@U T@U Int) Int)
(declare-fun treeDegree (T@U T@U) Int)
(declare-fun |sorted#frame| (T@U T@U T@U) Bool)
(declare-fun |presorted#frame| (T@U T@U T@U) Bool)
(declare-fun |validChildren#frame| (T@U T@U T@U) Bool)
(declare-fun treeKey (T@U T@U) Int)
(declare-fun treeSize (T@U T@U) Int)
(declare-fun treeParent (T@U T@U) T@U)
(declare-fun |heapseg#sm| (T@U T@U) T@U)
(declare-fun |tree#sm| (T@U) T@U)
(declare-fun |heap#sm| (T@U) T@U)
(declare-fun |segLength#frame| (T@U T@U T@U) Int)
(declare-fun |segSize#frame| (T@U T@U T@U) Int)
(declare-fun |segParent#frame| (T@U T@U T@U) T@U)
(declare-fun presorted (T@U T@U T@U) Bool)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun |sorted#trigger| (T@U T@U T@U) Bool)
(declare-fun segParent (T@U T@U T@U) T@U)
(declare-fun |segDegree#trigger| (T@U T@U T@U Int) Bool)
(declare-fun |segDegree#frame| (T@U T@U T@U Int) Int)
(declare-fun getPredWandId (T@U) Int)
(declare-fun |segSize#trigger| (T@U T@U T@U) Bool)
(declare-fun FullPerm () Real)
(declare-fun |segLength#trigger| (T@U T@U T@U) Bool)
(declare-fun |treeKey#frame| (T@U T@U) Int)
(declare-fun |treeDegree#frame| (T@U T@U) Int)
(declare-fun |treeSize#frame| (T@U T@U) Int)
(declare-fun |treeParent#frame| (T@U T@U) T@U)
(declare-fun sorted (T@U T@U T@U) Bool)
(declare-fun ZeroPMask () T@U)
(declare-fun validChildren (T@U T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@11 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@11 arg1)) 6)
 :qid |ctor:FieldType|
)) (forall ((arg0@@12 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12 arg1@@0)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12 arg1@@0))
))) (forall ((arg0@@13 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@13 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@13 arg1@@1))
))) (= (Ctor NormalFieldType) 7)) (= (type $allocated) (FieldType NormalFieldType boolType))) (= (type key) (FieldType NormalFieldType intType))) (= (type degree) (FieldType NormalFieldType intType))) (= (Ctor RefType) 8)) (= (type parent) (FieldType NormalFieldType RefType))) (= (type sibling) (FieldType NormalFieldType RefType))) (= (type child) (FieldType NormalFieldType RefType))) (= (type Nodes) (FieldType NormalFieldType RefType))) (= (type size) (FieldType NormalFieldType intType))))
(assert (distinct $allocated key degree parent sibling child Nodes size)
)
(assert  (and (and (and (and (and (forall ((arg0@@14 T@T) ) (! (= (Ctor (MapType0Type arg0@@14)) 9)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@15 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@15)) arg0@@15)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@15))
))) (forall ((arg0@@16 T@U) (arg1@@2 T@U) (arg2 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2))))
(= (type (MapType0Select arg0@@16 arg1@@2 arg2)) B))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@16 arg1@@2 arg2))
))) (forall ((arg0@@17 T@U) (arg1@@3 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@3)))
(= (type (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1))))
 (=> (= (type val) B@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType0Type RefType)) (= (type Heap1) (MapType0Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((arg0@@18 T@T) (arg1@@4 T@T) ) (! (= (Ctor (MapType1Type arg0@@18 arg1@@4)) 10)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@19 T@T) (arg1@@5 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@19 arg1@@5)) arg0@@19)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@19 arg1@@5))
))) (forall ((arg0@@20 T@T) (arg1@@6 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@20 arg1@@6)) arg1@@6)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@20 arg1@@6))
))) (forall ((arg0@@21 T@U) (arg1@@7 T@U) (arg2@@1 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@21))))
(= (type (MapType1Select arg0@@21 arg1@@7 arg2@@1)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@21 arg1@@7 arg2@@1))
))) (forall ((arg0@@22 T@U) (arg1@@8 T@U) (arg2@@2 T@U) (arg3@@0 T@U) ) (! (let ((aVar1@@0 (type arg3@@0)))
(let ((aVar0@@0 (type arg1@@8)))
(= (type (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@3) x0@@3 x1@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@4) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@5) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@6) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))) (= (Ctor PredicateType_heapsegType) 11)) (= (Ctor FrameTypeType) 12)) (forall ((arg0@@23 T@U) (arg1@@9 T@U) ) (! (= (type (heapseg arg0@@23 arg1@@9)) (FieldType PredicateType_heapsegType FrameTypeType))
 :qid |funType:heapseg|
 :pattern ( (heapseg arg0@@23 arg1@@9))
))))
(assert (forall ((Heap T@U) (Mask T@U) (this T@U) (last T@U) ) (!  (=> (and (and (and (and (= (type Heap) (MapType0Type RefType)) (= (type Mask) (MapType1Type RefType realType))) (= (type this) RefType)) (= (type last) RefType)) (and (state Heap Mask) (< AssumeFunctionsAbove 8))) (= (segLength Heap this last) (ite (= this last) 0 (+ 1 (|segLength'| Heap (MapType0Select Heap this sibling) last)))))
 :qid |stdinbpl.781:15|
 :skolemid |45|
 :pattern ( (state Heap Mask) (segLength Heap this last))
 :pattern ( (state Heap Mask) (|segLength#triggerStateless| this last) (|heapseg#trigger| Heap (heapseg this last)))
)))
(assert  (and (and (= (type null) RefType) (= (Ctor PredicateType_treeType) 13)) (forall ((arg0@@24 T@U) ) (! (= (type (tree arg0@@24)) (FieldType PredicateType_treeType FrameTypeType))
 :qid |funType:tree|
 :pattern ( (tree arg0@@24))
))))
(assert (forall ((Heap@@0 T@U) (Mask@@0 T@U) (this@@0 T@U) ) (!  (=> (and (and (and (= (type Heap@@0) (MapType0Type RefType)) (= (type Mask@@0) (MapType1Type RefType realType))) (= (type this@@0) RefType)) (and (state Heap@@0 Mask@@0) (or (< AssumeFunctionsAbove 9) (|treeDegree#trigger| (MapType0Select Heap@@0 null (tree this@@0)) this@@0)))) (<= 0 (|treeDegree'| Heap@@0 this@@0)))
 :qid |stdinbpl.372:15|
 :skolemid |31|
 :pattern ( (state Heap@@0 Mask@@0) (|treeDegree'| Heap@@0 this@@0))
)))
(assert (forall ((Heap@@1 T@U) (Mask@@1 T@U) ) (!  (=> (and (and (= (type Heap@@1) (MapType0Type RefType)) (= (type Mask@@1) (MapType1Type RefType realType))) (state Heap@@1 Mask@@1)) (GoodMask Mask@@1))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap@@1 Mask@@1))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType0Type RefType)) (= (type Heap1@@0) (MapType0Type RefType))) (= (type Heap2) (MapType0Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert (forall ((Heap@@2 T@U) (this@@1 T@U) (last@@0 T@U) (index Int) ) (!  (=> (and (and (= (type Heap@@2) (MapType0Type RefType)) (= (type this@@1) RefType)) (= (type last@@0) RefType)) (dummyFunction (int_2_U (|segDegree#triggerStateless| this@@1 last@@0 index))))
 :qid |stdinbpl.1128:15|
 :skolemid |60|
 :pattern ( (|segDegree'| Heap@@2 this@@1 last@@0 index))
)))
(assert (forall ((Heap@@3 T@U) (Mask@@2 T@U) (this@@2 T@U) (last@@1 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@3) (MapType0Type RefType)) (= (type Mask@@2) (MapType1Type RefType realType))) (= (type this@@2) RefType)) (= (type last@@1) RefType)) (and (state Heap@@3 Mask@@2) (< AssumeFunctionsAbove 1))) (= (segSize Heap@@3 this@@2 last@@1) (ite (= this@@2 last@@1) 0 (+ (|treeSize'| Heap@@3 this@@2) (|segSize'| Heap@@3 (MapType0Select Heap@@3 this@@2 sibling) last@@1)))))
 :qid |stdinbpl.957:15|
 :skolemid |54|
 :pattern ( (state Heap@@3 Mask@@2) (segSize Heap@@3 this@@2 last@@1))
 :pattern ( (state Heap@@3 Mask@@2) (|segSize#triggerStateless| this@@2 last@@1) (|heapseg#trigger| Heap@@3 (heapseg this@@2 last@@1)) (|heapseg#trigger| Heap@@3 (heapseg this@@2 last@@1)))
)))
(assert (forall ((this@@3 T@U) (last@@2 T@U) ) (!  (=> (and (= (type this@@3) RefType) (= (type last@@2) RefType)) (IsPredicateField (heapseg this@@3 last@@2)))
 :qid |stdinbpl.2402:15|
 :skolemid |98|
 :pattern ( (heapseg this@@3 last@@2))
)))
(assert (forall ((Heap@@4 T@U) (this@@4 T@U) (last@@3 T@U) ) (!  (=> (and (and (= (type Heap@@4) (MapType0Type RefType)) (= (type this@@4) RefType)) (= (type last@@3) RefType)) (dummyFunction (int_2_U (|segLength#triggerStateless| this@@4 last@@3))))
 :qid |stdinbpl.775:15|
 :skolemid |44|
 :pattern ( (|segLength'| Heap@@4 this@@4 last@@3))
)))
(assert (forall ((Heap@@5 T@U) (this@@5 T@U) (last@@4 T@U) ) (!  (=> (and (and (= (type Heap@@5) (MapType0Type RefType)) (= (type this@@5) RefType)) (= (type last@@4) RefType)) (dummyFunction (int_2_U (|segSize#triggerStateless| this@@5 last@@4))))
 :qid |stdinbpl.951:15|
 :skolemid |53|
 :pattern ( (|segSize'| Heap@@5 this@@5 last@@4))
)))
(assert  (and (forall ((arg0@@25 T@U) (arg1@@10 T@U) (arg2@@3 T@U) ) (! (= (type (|segParent'| arg0@@25 arg1@@10 arg2@@3)) RefType)
 :qid |funType:segParent'|
 :pattern ( (|segParent'| arg0@@25 arg1@@10 arg2@@3))
)) (forall ((arg0@@26 T@U) (arg1@@11 T@U) ) (! (= (type (|segParent#triggerStateless| arg0@@26 arg1@@11)) RefType)
 :qid |funType:segParent#triggerStateless|
 :pattern ( (|segParent#triggerStateless| arg0@@26 arg1@@11))
))))
(assert (forall ((Heap@@6 T@U) (this@@6 T@U) (last@@5 T@U) ) (!  (=> (and (and (= (type Heap@@6) (MapType0Type RefType)) (= (type this@@6) RefType)) (= (type last@@5) RefType)) (dummyFunction (|segParent#triggerStateless| this@@6 last@@5)))
 :qid |stdinbpl.1330:15|
 :skolemid |67|
 :pattern ( (|segParent'| Heap@@6 this@@6 last@@5))
)))
(assert (forall ((Heap@@7 T@U) (this@@7 T@U) (last@@6 T@U) ) (!  (=> (and (and (= (type Heap@@7) (MapType0Type RefType)) (= (type this@@7) RefType)) (= (type last@@6) RefType)) (dummyFunction (bool_2_U (|sorted#triggerStateless| this@@7 last@@6))))
 :qid |stdinbpl.1469:15|
 :skolemid |73|
 :pattern ( (|sorted'| Heap@@7 this@@7 last@@6))
)))
(assert (forall ((Heap@@8 T@U) (this@@8 T@U) (last@@7 T@U) ) (!  (=> (and (and (= (type Heap@@8) (MapType0Type RefType)) (= (type this@@8) RefType)) (= (type last@@7) RefType)) (dummyFunction (bool_2_U (|presorted#triggerStateless| this@@8 last@@7))))
 :qid |stdinbpl.1706:15|
 :skolemid |80|
 :pattern ( (|presorted'| Heap@@8 this@@8 last@@7))
)))
(assert (forall ((Heap@@9 T@U) (this@@9 T@U) (last@@8 T@U) ) (!  (=> (and (and (= (type Heap@@9) (MapType0Type RefType)) (= (type this@@9) RefType)) (= (type last@@8) RefType)) (dummyFunction (bool_2_U (|validChildren#triggerStateless| this@@9 last@@8))))
 :qid |stdinbpl.2007:15|
 :skolemid |86|
 :pattern ( (|validChildren'| Heap@@9 this@@9 last@@8))
)))
(assert (forall ((Heap@@10 T@U) (this@@10 T@U) (last@@9 T@U) ) (!  (=> (and (and (= (type Heap@@10) (MapType0Type RefType)) (= (type this@@10) RefType)) (= (type last@@9) RefType)) (|heapseg#everUsed| (heapseg this@@10 last@@9)))
 :qid |stdinbpl.2421:15|
 :skolemid |102|
 :pattern ( (|heapseg#trigger| Heap@@10 (heapseg this@@10 last@@9)))
)))
(assert (forall ((arg0@@27 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@27))))
(= (type (PredicateMaskField arg0@@27)) (FieldType A (MapType1Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@27))
)))
(assert (forall ((Heap@@11 T@U) (ExhaleHeap T@U) (Mask@@3 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@11) (MapType0Type RefType)) (= (type ExhaleHeap) (MapType0Type RefType))) (= (type Mask@@3) (MapType1Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@11 ExhaleHeap Mask@@3)) (and (HasDirectPerm Mask@@3 null pm_f) (IsPredicateField pm_f))) (= (MapType0Select Heap@@11 null (PredicateMaskField pm_f)) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@11 ExhaleHeap Mask@@3) (IsPredicateField pm_f) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((arg0@@28 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@28))))
(= (type (WandMaskField arg0@@28)) (FieldType A@@0 (MapType1Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@28))
)))
(assert (forall ((Heap@@12 T@U) (ExhaleHeap@@0 T@U) (Mask@@4 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@12) (MapType0Type RefType)) (= (type ExhaleHeap@@0) (MapType0Type RefType))) (= (type Mask@@4) (MapType1Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@12 ExhaleHeap@@0 Mask@@4)) (and (HasDirectPerm Mask@@4 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType0Select Heap@@12 null (WandMaskField pm_f@@0)) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@12 ExhaleHeap@@0 Mask@@4) (IsWandField pm_f@@0) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert (forall ((this@@11 T@U) ) (!  (=> (= (type this@@11) RefType) (IsPredicateField (tree this@@11)))
 :qid |stdinbpl.2209:15|
 :skolemid |92|
 :pattern ( (tree this@@11))
)))
(assert  (and (= (Ctor PredicateType_heapType) 14) (forall ((arg0@@29 T@U) ) (! (= (type (heap arg0@@29)) (FieldType PredicateType_heapType FrameTypeType))
 :qid |funType:heap|
 :pattern ( (heap arg0@@29))
))))
(assert (forall ((this@@12 T@U) ) (!  (=> (= (type this@@12) RefType) (IsPredicateField (heap this@@12)))
 :qid |stdinbpl.2520:15|
 :skolemid |104|
 :pattern ( (heap this@@12))
)))
(assert (forall ((Heap@@13 T@U) (this@@13 T@U) ) (!  (=> (and (= (type Heap@@13) (MapType0Type RefType)) (= (type this@@13) RefType)) (dummyFunction (int_2_U (|treeKey#triggerStateless| this@@13))))
 :qid |stdinbpl.224:15|
 :skolemid |23|
 :pattern ( (|treeKey'| Heap@@13 this@@13))
)))
(assert (forall ((Heap@@14 T@U) (this@@14 T@U) ) (!  (=> (and (= (type Heap@@14) (MapType0Type RefType)) (= (type this@@14) RefType)) (dummyFunction (int_2_U (|treeDegree#triggerStateless| this@@14))))
 :qid |stdinbpl.353:15|
 :skolemid |28|
 :pattern ( (|treeDegree'| Heap@@14 this@@14))
)))
(assert (forall ((Heap@@15 T@U) (this@@15 T@U) ) (!  (=> (and (= (type Heap@@15) (MapType0Type RefType)) (= (type this@@15) RefType)) (dummyFunction (int_2_U (|treeSize#triggerStateless| this@@15))))
 :qid |stdinbpl.494:15|
 :skolemid |34|
 :pattern ( (|treeSize'| Heap@@15 this@@15))
)))
(assert  (and (forall ((arg0@@30 T@U) (arg1@@12 T@U) ) (! (= (type (|treeParent'| arg0@@30 arg1@@12)) RefType)
 :qid |funType:treeParent'|
 :pattern ( (|treeParent'| arg0@@30 arg1@@12))
)) (forall ((arg0@@31 T@U) ) (! (= (type (|treeParent#triggerStateless| arg0@@31)) RefType)
 :qid |funType:treeParent#triggerStateless|
 :pattern ( (|treeParent#triggerStateless| arg0@@31))
))))
(assert (forall ((Heap@@16 T@U) (this@@16 T@U) ) (!  (=> (and (= (type Heap@@16) (MapType0Type RefType)) (= (type this@@16) RefType)) (dummyFunction (|treeParent#triggerStateless| this@@16)))
 :qid |stdinbpl.646:15|
 :skolemid |39|
 :pattern ( (|treeParent'| Heap@@16 this@@16))
)))
(assert (forall ((Heap@@17 T@U) (this@@17 T@U) ) (!  (=> (and (= (type Heap@@17) (MapType0Type RefType)) (= (type this@@17) RefType)) (|tree#everUsed| (tree this@@17)))
 :qid |stdinbpl.2228:15|
 :skolemid |96|
 :pattern ( (|tree#trigger| Heap@@17 (tree this@@17)))
)))
(assert (forall ((Heap@@18 T@U) (this@@18 T@U) ) (!  (=> (and (= (type Heap@@18) (MapType0Type RefType)) (= (type this@@18) RefType)) (|heap#everUsed| (heap this@@18)))
 :qid |stdinbpl.2539:15|
 :skolemid |108|
 :pattern ( (|heap#trigger| Heap@@18 (heap this@@18)))
)))
(assert (forall ((Heap@@19 T@U) (Mask@@5 T@U) (this@@19 T@U) (last@@10 T@U) (index@@0 Int) ) (!  (=> (and (and (and (and (and (= (type Heap@@19) (MapType0Type RefType)) (= (type Mask@@5) (MapType1Type RefType realType))) (= (type this@@19) RefType)) (= (type last@@10) RefType)) (and (state Heap@@19 Mask@@5) (< AssumeFunctionsAbove 7))) (and (<= 0 index@@0) (< index@@0 (segLength Heap@@19 this@@19 last@@10)))) (= (segDegree Heap@@19 this@@19 last@@10 index@@0) (ite (= index@@0 0) (treeDegree Heap@@19 this@@19) (|segDegree'| Heap@@19 (MapType0Select Heap@@19 this@@19 sibling) last@@10 (- index@@0 1)))))
 :qid |stdinbpl.1134:15|
 :skolemid |61|
 :pattern ( (state Heap@@19 Mask@@5) (segDegree Heap@@19 this@@19 last@@10 index@@0))
 :pattern ( (state Heap@@19 Mask@@5) (|segDegree#triggerStateless| this@@19 last@@10 index@@0) (|heapseg#trigger| Heap@@19 (heapseg this@@19 last@@10)) (|heapseg#trigger| Heap@@19 (heapseg this@@19 last@@10)))
)))
(assert (forall ((Heap@@20 T@U) (Mask@@6 T@U) (this@@20 T@U) (last@@11 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@20) (MapType0Type RefType)) (= (type Mask@@6) (MapType1Type RefType realType))) (= (type this@@20) RefType)) (= (type last@@11) RefType)) (state Heap@@20 Mask@@6)) (= (|sorted'| Heap@@20 this@@20 last@@11) (|sorted#frame| (MapType0Select Heap@@20 null (heapseg this@@20 last@@11)) this@@20 last@@11)))
 :qid |stdinbpl.1482:15|
 :skolemid |75|
 :pattern ( (state Heap@@20 Mask@@6) (|sorted'| Heap@@20 this@@20 last@@11))
 :pattern ( (state Heap@@20 Mask@@6) (|sorted#triggerStateless| this@@20 last@@11) (|heapseg#trigger| Heap@@20 (heapseg this@@20 last@@11)) (|heapseg#trigger| Heap@@20 (heapseg this@@20 last@@11)) (|heapseg#trigger| Heap@@20 (heapseg this@@20 last@@11)))
)))
(assert (forall ((Heap@@21 T@U) (Mask@@7 T@U) (this@@21 T@U) (last@@12 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@21) (MapType0Type RefType)) (= (type Mask@@7) (MapType1Type RefType realType))) (= (type this@@21) RefType)) (= (type last@@12) RefType)) (state Heap@@21 Mask@@7)) (= (|presorted'| Heap@@21 this@@21 last@@12) (|presorted#frame| (MapType0Select Heap@@21 null (heapseg this@@21 last@@12)) this@@21 last@@12)))
 :qid |stdinbpl.1719:15|
 :skolemid |82|
 :pattern ( (state Heap@@21 Mask@@7) (|presorted'| Heap@@21 this@@21 last@@12))
 :pattern ( (state Heap@@21 Mask@@7) (|presorted#triggerStateless| this@@21 last@@12) (|heapseg#trigger| Heap@@21 (heapseg this@@21 last@@12)) (|heapseg#trigger| Heap@@21 (heapseg this@@21 last@@12)) (|heapseg#trigger| Heap@@21 (heapseg this@@21 last@@12)))
)))
(assert (forall ((Heap@@22 T@U) (Mask@@8 T@U) (this@@22 T@U) (last@@13 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@22) (MapType0Type RefType)) (= (type Mask@@8) (MapType1Type RefType realType))) (= (type this@@22) RefType)) (= (type last@@13) RefType)) (state Heap@@22 Mask@@8)) (= (|validChildren'| Heap@@22 this@@22 last@@13) (|validChildren#frame| (MapType0Select Heap@@22 null (heapseg this@@22 last@@13)) this@@22 last@@13)))
 :qid |stdinbpl.2020:15|
 :skolemid |88|
 :pattern ( (state Heap@@22 Mask@@8) (|validChildren'| Heap@@22 this@@22 last@@13))
 :pattern ( (state Heap@@22 Mask@@8) (|validChildren#triggerStateless| this@@22 last@@13) (|heapseg#trigger| Heap@@22 (heapseg this@@22 last@@13)) (|heapseg#trigger| Heap@@22 (heapseg this@@22 last@@13)) (|heapseg#trigger| Heap@@22 (heapseg this@@22 last@@13)))
)))
(assert (forall ((Heap@@23 T@U) (ExhaleHeap@@1 T@U) (Mask@@9 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@23) (MapType0Type RefType)) (= (type ExhaleHeap@@1) (MapType0Type RefType))) (= (type Mask@@9) (MapType1Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@23 ExhaleHeap@@1 Mask@@9)) (U_2_bool (MapType0Select Heap@@23 o_1 $allocated))) (U_2_bool (MapType0Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@23 ExhaleHeap@@1 Mask@@9) (MapType0Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((Heap@@24 T@U) (this@@23 T@U) ) (!  (=> (and (= (type Heap@@24) (MapType0Type RefType)) (= (type this@@23) RefType)) (and (= (treeKey Heap@@24 this@@23) (|treeKey'| Heap@@24 this@@23)) (dummyFunction (int_2_U (|treeKey#triggerStateless| this@@23)))))
 :qid |stdinbpl.220:15|
 :skolemid |22|
 :pattern ( (treeKey Heap@@24 this@@23))
)))
(assert (forall ((Heap@@25 T@U) (this@@24 T@U) ) (!  (=> (and (= (type Heap@@25) (MapType0Type RefType)) (= (type this@@24) RefType)) (and (= (treeDegree Heap@@25 this@@24) (|treeDegree'| Heap@@25 this@@24)) (dummyFunction (int_2_U (|treeDegree#triggerStateless| this@@24)))))
 :qid |stdinbpl.349:15|
 :skolemid |27|
 :pattern ( (treeDegree Heap@@25 this@@24))
)))
(assert (forall ((Heap@@26 T@U) (this@@25 T@U) ) (!  (=> (and (= (type Heap@@26) (MapType0Type RefType)) (= (type this@@25) RefType)) (and (= (treeSize Heap@@26 this@@25) (|treeSize'| Heap@@26 this@@25)) (dummyFunction (int_2_U (|treeSize#triggerStateless| this@@25)))))
 :qid |stdinbpl.490:15|
 :skolemid |33|
 :pattern ( (treeSize Heap@@26 this@@25))
)))
(assert (forall ((arg0@@32 T@U) (arg1@@13 T@U) ) (! (= (type (treeParent arg0@@32 arg1@@13)) RefType)
 :qid |funType:treeParent|
 :pattern ( (treeParent arg0@@32 arg1@@13))
)))
(assert (forall ((Heap@@27 T@U) (this@@26 T@U) ) (!  (=> (and (= (type Heap@@27) (MapType0Type RefType)) (= (type this@@26) RefType)) (and (= (treeParent Heap@@27 this@@26) (|treeParent'| Heap@@27 this@@26)) (dummyFunction (|treeParent#triggerStateless| this@@26))))
 :qid |stdinbpl.642:15|
 :skolemid |38|
 :pattern ( (treeParent Heap@@27 this@@26))
)))
(assert (forall ((this@@27 T@U) (last@@14 T@U) (this2 T@U) (last2 T@U) ) (!  (=> (and (and (and (and (= (type this@@27) RefType) (= (type last@@14) RefType)) (= (type this2) RefType)) (= (type last2) RefType)) (= (heapseg this@@27 last@@14) (heapseg this2 last2))) (and (= this@@27 this2) (= last@@14 last2)))
 :qid |stdinbpl.2412:15|
 :skolemid |100|
 :pattern ( (heapseg this@@27 last@@14) (heapseg this2 last2))
)))
(assert (forall ((arg0@@33 T@U) (arg1@@14 T@U) ) (! (= (type (|heapseg#sm| arg0@@33 arg1@@14)) (FieldType PredicateType_heapsegType (MapType1Type RefType boolType)))
 :qid |funType:heapseg#sm|
 :pattern ( (|heapseg#sm| arg0@@33 arg1@@14))
)))
(assert (forall ((this@@28 T@U) (last@@15 T@U) (this2@@0 T@U) (last2@@0 T@U) ) (!  (=> (and (and (and (and (= (type this@@28) RefType) (= (type last@@15) RefType)) (= (type this2@@0) RefType)) (= (type last2@@0) RefType)) (= (|heapseg#sm| this@@28 last@@15) (|heapseg#sm| this2@@0 last2@@0))) (and (= this@@28 this2@@0) (= last@@15 last2@@0)))
 :qid |stdinbpl.2416:15|
 :skolemid |101|
 :pattern ( (|heapseg#sm| this@@28 last@@15) (|heapseg#sm| this2@@0 last2@@0))
)))
(assert (forall ((this@@29 T@U) (this2@@1 T@U) ) (!  (=> (and (and (= (type this@@29) RefType) (= (type this2@@1) RefType)) (= (tree this@@29) (tree this2@@1))) (= this@@29 this2@@1))
 :qid |stdinbpl.2219:15|
 :skolemid |94|
 :pattern ( (tree this@@29) (tree this2@@1))
)))
(assert (forall ((arg0@@34 T@U) ) (! (= (type (|tree#sm| arg0@@34)) (FieldType PredicateType_treeType (MapType1Type RefType boolType)))
 :qid |funType:tree#sm|
 :pattern ( (|tree#sm| arg0@@34))
)))
(assert (forall ((this@@30 T@U) (this2@@2 T@U) ) (!  (=> (and (and (= (type this@@30) RefType) (= (type this2@@2) RefType)) (= (|tree#sm| this@@30) (|tree#sm| this2@@2))) (= this@@30 this2@@2))
 :qid |stdinbpl.2223:15|
 :skolemid |95|
 :pattern ( (|tree#sm| this@@30) (|tree#sm| this2@@2))
)))
(assert (forall ((this@@31 T@U) (this2@@3 T@U) ) (!  (=> (and (and (= (type this@@31) RefType) (= (type this2@@3) RefType)) (= (heap this@@31) (heap this2@@3))) (= this@@31 this2@@3))
 :qid |stdinbpl.2530:15|
 :skolemid |106|
 :pattern ( (heap this@@31) (heap this2@@3))
)))
(assert (forall ((arg0@@35 T@U) ) (! (= (type (|heap#sm| arg0@@35)) (FieldType PredicateType_heapType (MapType1Type RefType boolType)))
 :qid |funType:heap#sm|
 :pattern ( (|heap#sm| arg0@@35))
)))
(assert (forall ((this@@32 T@U) (this2@@4 T@U) ) (!  (=> (and (and (= (type this@@32) RefType) (= (type this2@@4) RefType)) (= (|heap#sm| this@@32) (|heap#sm| this2@@4))) (= this@@32 this2@@4))
 :qid |stdinbpl.2534:15|
 :skolemid |107|
 :pattern ( (|heap#sm| this@@32) (|heap#sm| this2@@4))
)))
(assert (forall ((Heap@@28 T@U) (Mask@@10 T@U) (this@@33 T@U) (last@@16 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@28) (MapType0Type RefType)) (= (type Mask@@10) (MapType1Type RefType realType))) (= (type this@@33) RefType)) (= (type last@@16) RefType)) (state Heap@@28 Mask@@10)) (= (|segLength'| Heap@@28 this@@33 last@@16) (|segLength#frame| (MapType0Select Heap@@28 null (heapseg this@@33 last@@16)) this@@33 last@@16)))
 :qid |stdinbpl.788:15|
 :skolemid |46|
 :pattern ( (state Heap@@28 Mask@@10) (|segLength'| Heap@@28 this@@33 last@@16))
 :pattern ( (state Heap@@28 Mask@@10) (|segLength#triggerStateless| this@@33 last@@16) (|heapseg#trigger| Heap@@28 (heapseg this@@33 last@@16)))
)))
(assert (forall ((Heap@@29 T@U) (Mask@@11 T@U) (this@@34 T@U) (last@@17 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@29) (MapType0Type RefType)) (= (type Mask@@11) (MapType1Type RefType realType))) (= (type this@@34) RefType)) (= (type last@@17) RefType)) (state Heap@@29 Mask@@11)) (= (|segSize'| Heap@@29 this@@34 last@@17) (|segSize#frame| (MapType0Select Heap@@29 null (heapseg this@@34 last@@17)) this@@34 last@@17)))
 :qid |stdinbpl.964:15|
 :skolemid |55|
 :pattern ( (state Heap@@29 Mask@@11) (|segSize'| Heap@@29 this@@34 last@@17))
 :pattern ( (state Heap@@29 Mask@@11) (|segSize#triggerStateless| this@@34 last@@17) (|heapseg#trigger| Heap@@29 (heapseg this@@34 last@@17)) (|heapseg#trigger| Heap@@29 (heapseg this@@34 last@@17)))
)))
(assert (forall ((arg0@@36 T@U) (arg1@@15 T@U) (arg2@@4 T@U) ) (! (= (type (|segParent#frame| arg0@@36 arg1@@15 arg2@@4)) RefType)
 :qid |funType:segParent#frame|
 :pattern ( (|segParent#frame| arg0@@36 arg1@@15 arg2@@4))
)))
(assert (forall ((Heap@@30 T@U) (Mask@@12 T@U) (this@@35 T@U) (last@@18 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@30) (MapType0Type RefType)) (= (type Mask@@12) (MapType1Type RefType realType))) (= (type this@@35) RefType)) (= (type last@@18) RefType)) (state Heap@@30 Mask@@12)) (= (|segParent'| Heap@@30 this@@35 last@@18) (|segParent#frame| (MapType0Select Heap@@30 null (heapseg this@@35 last@@18)) this@@35 last@@18)))
 :qid |stdinbpl.1343:15|
 :skolemid |69|
 :pattern ( (state Heap@@30 Mask@@12) (|segParent'| Heap@@30 this@@35 last@@18))
 :pattern ( (state Heap@@30 Mask@@12) (|segParent#triggerStateless| this@@35 last@@18) (|heapseg#trigger| Heap@@30 (heapseg this@@35 last@@18)))
)))
(assert (forall ((Heap@@31 T@U) (ExhaleHeap@@2 T@U) (Mask@@13 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@31) (MapType0Type RefType)) (= (type ExhaleHeap@@2) (MapType0Type RefType))) (= (type Mask@@13) (MapType1Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@31 ExhaleHeap@@2 Mask@@13)) (HasDirectPerm Mask@@13 o_1@@0 f_2)) (= (MapType0Select Heap@@31 o_1@@0 f_2) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@31 ExhaleHeap@@2 Mask@@13) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert (forall ((Heap@@32 T@U) (Mask@@14 T@U) (this@@36 T@U) (last@@19 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@32) (MapType0Type RefType)) (= (type Mask@@14) (MapType1Type RefType realType))) (= (type this@@36) RefType)) (= (type last@@19) RefType)) (and (state Heap@@32 Mask@@14) (< AssumeFunctionsAbove 5))) (= (presorted Heap@@32 this@@36 last@@19)  (and (=> (< 1 (segLength Heap@@32 this@@36 last@@19)) (and (<= (treeDegree Heap@@32 this@@36) (segDegree Heap@@32 (MapType0Select Heap@@32 this@@36 sibling) last@@19 0)) (|presorted'| Heap@@32 (MapType0Select Heap@@32 this@@36 sibling) last@@19))) (=> (and (< 2 (segLength Heap@@32 this@@36 last@@19)) (= (segDegree Heap@@32 this@@36 last@@19 0) (segDegree Heap@@32 this@@36 last@@19 1))) (< (segDegree Heap@@32 this@@36 last@@19 1) (segDegree Heap@@32 this@@36 last@@19 2))))))
 :qid |stdinbpl.1712:15|
 :skolemid |81|
 :pattern ( (state Heap@@32 Mask@@14) (presorted Heap@@32 this@@36 last@@19))
 :pattern ( (state Heap@@32 Mask@@14) (|presorted#triggerStateless| this@@36 last@@19) (|heapseg#trigger| Heap@@32 (heapseg this@@36 last@@19)) (|heapseg#trigger| Heap@@32 (heapseg this@@36 last@@19)) (|heapseg#trigger| Heap@@32 (heapseg this@@36 last@@19)))
)))
(assert  (and (= (type dummyHeap) (MapType0Type RefType)) (= (type ZeroMask) (MapType1Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.182:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert  (not (IsPredicateField key)))
(assert  (not (IsWandField key)))
(assert  (not (IsPredicateField degree)))
(assert  (not (IsWandField degree)))
(assert  (not (IsPredicateField parent)))
(assert  (not (IsWandField parent)))
(assert  (not (IsPredicateField sibling)))
(assert  (not (IsWandField sibling)))
(assert  (not (IsPredicateField child)))
(assert  (not (IsWandField child)))
(assert  (not (IsPredicateField Nodes)))
(assert  (not (IsWandField Nodes)))
(assert  (not (IsPredicateField size)))
(assert  (not (IsWandField size)))
(assert (forall ((Heap@@33 T@U) (ExhaleHeap@@3 T@U) (Mask@@15 T@U) ) (!  (=> (and (and (and (= (type Heap@@33) (MapType0Type RefType)) (= (type ExhaleHeap@@3) (MapType0Type RefType))) (= (type Mask@@15) (MapType1Type RefType realType))) (IdenticalOnKnownLocations Heap@@33 ExhaleHeap@@3 Mask@@15)) (succHeap Heap@@33 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@33 ExhaleHeap@@3 Mask@@15))
)))
(assert (forall ((Heap@@34 T@U) (Mask@@16 T@U) (this@@37 T@U) ) (!  (=> (and (and (and (= (type Heap@@34) (MapType0Type RefType)) (= (type Mask@@16) (MapType1Type RefType realType))) (= (type this@@37) RefType)) (and (state Heap@@34 Mask@@16) (< AssumeFunctionsAbove 1))) (= (treeSize Heap@@34 this@@37) (ite (= (U_2_int (MapType0Select Heap@@34 this@@37 degree)) 0) 1 (+ 1 (|segSize'| Heap@@34 (MapType0Select Heap@@34 this@@37 child) null)))))
 :qid |stdinbpl.500:15|
 :skolemid |35|
 :pattern ( (state Heap@@34 Mask@@16) (treeSize Heap@@34 this@@37))
 :pattern ( (state Heap@@34 Mask@@16) (|treeSize#triggerStateless| this@@37) (|tree#trigger| Heap@@34 (tree this@@37)))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType1Type RefType realType)) (= (type SummandMask1) (MapType1Type RefType realType))) (= (type SummandMask2) (MapType1Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType1Select ResultMask o_2 f_4)) (+ (U_2_real (MapType1Select SummandMask1 o_2 f_4)) (U_2_real (MapType1Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask2 o_2 f_4))
)))
(assert  (and (forall ((arg0@@37 Real) (arg1@@16 T@U) ) (! (= (type (ConditionalFrame arg0@@37 arg1@@16)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@37 arg1@@16))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.170:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((Mask@@17 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@17) (MapType1Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@17 o_2@@0 f_4@@0) (> (U_2_real (MapType1Select Mask@@17 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@17 o_2@@0 f_4@@0))
)))
(assert (forall ((Heap@@35 T@U) (Mask@@18 T@U) (this@@38 T@U) (last@@20 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@35) (MapType0Type RefType)) (= (type Mask@@18) (MapType1Type RefType realType))) (= (type this@@38) RefType)) (= (type last@@20) RefType)) (and (state Heap@@35 Mask@@18) (or (< AssumeFunctionsAbove 0) (|sorted#trigger| (MapType0Select Heap@@35 null (heapseg this@@38 last@@20)) this@@38 last@@20)))) (|sorted'| Heap@@35 this@@38 last@@20)) (presorted Heap@@35 this@@38 last@@20))
 :qid |stdinbpl.1488:15|
 :skolemid |76|
 :pattern ( (state Heap@@35 Mask@@18) (|sorted'| Heap@@35 this@@38 last@@20))
)))
(assert (forall ((Heap@@36 T@U) (this@@39 T@U) (last@@21 T@U) ) (!  (=> (and (and (= (type Heap@@36) (MapType0Type RefType)) (= (type this@@39) RefType)) (= (type last@@21) RefType)) (and (= (segLength Heap@@36 this@@39 last@@21) (|segLength'| Heap@@36 this@@39 last@@21)) (dummyFunction (int_2_U (|segLength#triggerStateless| this@@39 last@@21)))))
 :qid |stdinbpl.771:15|
 :skolemid |43|
 :pattern ( (segLength Heap@@36 this@@39 last@@21))
)))
(assert (forall ((Heap@@37 T@U) (this@@40 T@U) (last@@22 T@U) ) (!  (=> (and (and (= (type Heap@@37) (MapType0Type RefType)) (= (type this@@40) RefType)) (= (type last@@22) RefType)) (and (= (segSize Heap@@37 this@@40 last@@22) (|segSize'| Heap@@37 this@@40 last@@22)) (dummyFunction (int_2_U (|segSize#triggerStateless| this@@40 last@@22)))))
 :qid |stdinbpl.947:15|
 :skolemid |52|
 :pattern ( (segSize Heap@@37 this@@40 last@@22))
)))
(assert (forall ((arg0@@38 T@U) (arg1@@17 T@U) (arg2@@5 T@U) ) (! (= (type (segParent arg0@@38 arg1@@17 arg2@@5)) RefType)
 :qid |funType:segParent|
 :pattern ( (segParent arg0@@38 arg1@@17 arg2@@5))
)))
(assert (forall ((Heap@@38 T@U) (this@@41 T@U) (last@@23 T@U) ) (!  (=> (and (and (= (type Heap@@38) (MapType0Type RefType)) (= (type this@@41) RefType)) (= (type last@@23) RefType)) (and (= (segParent Heap@@38 this@@41 last@@23) (|segParent'| Heap@@38 this@@41 last@@23)) (dummyFunction (|segParent#triggerStateless| this@@41 last@@23))))
 :qid |stdinbpl.1326:15|
 :skolemid |66|
 :pattern ( (segParent Heap@@38 this@@41 last@@23))
)))
(assert (forall ((Heap@@39 T@U) (Mask@@19 T@U) (this@@42 T@U) (last@@24 T@U) (index@@1 Int) ) (!  (=> (and (and (and (and (and (= (type Heap@@39) (MapType0Type RefType)) (= (type Mask@@19) (MapType1Type RefType realType))) (= (type this@@42) RefType)) (= (type last@@24) RefType)) (and (state Heap@@39 Mask@@19) (or (< AssumeFunctionsAbove 7) (|segDegree#trigger| (MapType0Select Heap@@39 null (heapseg this@@42 last@@24)) this@@42 last@@24 index@@1)))) (and (<= 0 index@@1) (< index@@1 (segLength Heap@@39 this@@42 last@@24)))) (<= 0 (|segDegree'| Heap@@39 this@@42 last@@24 index@@1)))
 :qid |stdinbpl.1147:15|
 :skolemid |63|
 :pattern ( (state Heap@@39 Mask@@19) (|segDegree'| Heap@@39 this@@42 last@@24 index@@1))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType1Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType1Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((Heap@@40 T@U) (Mask@@20 T@U) (this@@43 T@U) (last@@25 T@U) (index@@2 Int) ) (!  (=> (and (and (and (and (= (type Heap@@40) (MapType0Type RefType)) (= (type Mask@@20) (MapType1Type RefType realType))) (= (type this@@43) RefType)) (= (type last@@25) RefType)) (state Heap@@40 Mask@@20)) (= (|segDegree'| Heap@@40 this@@43 last@@25 index@@2) (|segDegree#frame| (MapType0Select Heap@@40 null (heapseg this@@43 last@@25)) this@@43 last@@25 index@@2)))
 :qid |stdinbpl.1141:15|
 :skolemid |62|
 :pattern ( (state Heap@@40 Mask@@20) (|segDegree'| Heap@@40 this@@43 last@@25 index@@2))
 :pattern ( (state Heap@@40 Mask@@20) (|segDegree#triggerStateless| this@@43 last@@25 index@@2) (|heapseg#trigger| Heap@@40 (heapseg this@@43 last@@25)) (|heapseg#trigger| Heap@@40 (heapseg this@@43 last@@25)))
)))
(assert (forall ((Heap@@41 T@U) (this@@44 T@U) (last@@26 T@U) (index@@3 Int) ) (!  (=> (and (and (= (type Heap@@41) (MapType0Type RefType)) (= (type this@@44) RefType)) (= (type last@@26) RefType)) (and (= (segDegree Heap@@41 this@@44 last@@26 index@@3) (|segDegree'| Heap@@41 this@@44 last@@26 index@@3)) (dummyFunction (int_2_U (|segDegree#triggerStateless| this@@44 last@@26 index@@3)))))
 :qid |stdinbpl.1124:15|
 :skolemid |59|
 :pattern ( (segDegree Heap@@41 this@@44 last@@26 index@@3))
)))
(assert (forall ((this@@45 T@U) (last@@27 T@U) ) (!  (=> (and (= (type this@@45) RefType) (= (type last@@27) RefType)) (= (getPredWandId (heapseg this@@45 last@@27)) 1))
 :qid |stdinbpl.2406:15|
 :skolemid |99|
 :pattern ( (heapseg this@@45 last@@27))
)))
(assert (forall ((Heap@@42 T@U) (Mask@@21 T@U) (this@@46 T@U) (last@@28 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@42) (MapType0Type RefType)) (= (type Mask@@21) (MapType1Type RefType realType))) (= (type this@@46) RefType)) (= (type last@@28) RefType)) (and (state Heap@@42 Mask@@21) (or (< AssumeFunctionsAbove 1) (|segSize#trigger| (MapType0Select Heap@@42 null (heapseg this@@46 last@@28)) this@@46 last@@28)))) (= this@@46 last@@28)) (= (|segSize'| Heap@@42 this@@46 last@@28) 0))
 :qid |stdinbpl.970:15|
 :skolemid |56|
 :pattern ( (state Heap@@42 Mask@@21) (|segSize'| Heap@@42 this@@46 last@@28))
)))
(assert (forall ((Heap@@43 T@U) (ExhaleHeap@@4 T@U) (Mask@@22 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@43) (MapType0Type RefType)) (= (type ExhaleHeap@@4) (MapType0Type RefType))) (= (type Mask@@22) (MapType1Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@43 ExhaleHeap@@4 Mask@@22)) (and (HasDirectPerm Mask@@22 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType1Select (MapType0Select Heap@@43 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType0Select Heap@@43 o2 f_2@@0) (MapType0Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType0Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@43 ExhaleHeap@@4 Mask@@22) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@44 T@U) (ExhaleHeap@@5 T@U) (Mask@@23 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@44) (MapType0Type RefType)) (= (type ExhaleHeap@@5) (MapType0Type RefType))) (= (type Mask@@23) (MapType1Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@44 ExhaleHeap@@5 Mask@@23)) (and (HasDirectPerm Mask@@23 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType1Select (MapType0Select Heap@@44 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType0Select Heap@@44 o2@@0 f_2@@1) (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@44 ExhaleHeap@@5 Mask@@23) (IsWandField pm_f@@2))
)))
(assert (forall ((this@@47 T@U) ) (!  (=> (= (type this@@47) RefType) (= (getPredWandId (tree this@@47)) 0))
 :qid |stdinbpl.2213:15|
 :skolemid |93|
 :pattern ( (tree this@@47))
)))
(assert (forall ((this@@48 T@U) ) (!  (=> (= (type this@@48) RefType) (= (getPredWandId (heap this@@48)) 2))
 :qid |stdinbpl.2524:15|
 :skolemid |105|
 :pattern ( (heap this@@48))
)))
(assert (forall ((Mask@@24 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@24) (MapType1Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@24)) (and (>= (U_2_real (MapType1Select Mask@@24 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@24) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType1Select Mask@@24 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@24) (MapType1Select Mask@@24 o_2@@2 f_4@@2))
)))
(assert (forall ((Heap@@45 T@U) (Mask@@25 T@U) (this@@49 T@U) (last@@29 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@45) (MapType0Type RefType)) (= (type Mask@@25) (MapType1Type RefType realType))) (= (type this@@49) RefType)) (= (type last@@29) RefType)) (and (state Heap@@45 Mask@@25) (or (< AssumeFunctionsAbove 8) (|segLength#trigger| (MapType0Select Heap@@45 null (heapseg this@@49 last@@29)) this@@49 last@@29)))) (<= 0 (|segLength'| Heap@@45 this@@49 last@@29)))
 :qid |stdinbpl.794:15|
 :skolemid |47|
 :pattern ( (state Heap@@45 Mask@@25) (|segLength'| Heap@@45 this@@49 last@@29))
)))
(assert (forall ((Heap@@46 T@U) (Mask@@26 T@U) (this@@50 T@U) ) (!  (=> (and (and (and (= (type Heap@@46) (MapType0Type RefType)) (= (type Mask@@26) (MapType1Type RefType realType))) (= (type this@@50) RefType)) (state Heap@@46 Mask@@26)) (= (|treeKey'| Heap@@46 this@@50) (|treeKey#frame| (MapType0Select Heap@@46 null (tree this@@50)) this@@50)))
 :qid |stdinbpl.237:15|
 :skolemid |25|
 :pattern ( (state Heap@@46 Mask@@26) (|treeKey'| Heap@@46 this@@50))
)))
(assert (forall ((Heap@@47 T@U) (Mask@@27 T@U) (this@@51 T@U) ) (!  (=> (and (and (and (= (type Heap@@47) (MapType0Type RefType)) (= (type Mask@@27) (MapType1Type RefType realType))) (= (type this@@51) RefType)) (state Heap@@47 Mask@@27)) (= (|treeDegree'| Heap@@47 this@@51) (|treeDegree#frame| (MapType0Select Heap@@47 null (tree this@@51)) this@@51)))
 :qid |stdinbpl.366:15|
 :skolemid |30|
 :pattern ( (state Heap@@47 Mask@@27) (|treeDegree'| Heap@@47 this@@51))
)))
(assert (forall ((Heap@@48 T@U) (Mask@@28 T@U) (this@@52 T@U) ) (!  (=> (and (and (and (= (type Heap@@48) (MapType0Type RefType)) (= (type Mask@@28) (MapType1Type RefType realType))) (= (type this@@52) RefType)) (state Heap@@48 Mask@@28)) (= (|treeSize'| Heap@@48 this@@52) (|treeSize#frame| (MapType0Select Heap@@48 null (tree this@@52)) this@@52)))
 :qid |stdinbpl.507:15|
 :skolemid |36|
 :pattern ( (state Heap@@48 Mask@@28) (|treeSize'| Heap@@48 this@@52))
 :pattern ( (state Heap@@48 Mask@@28) (|treeSize#triggerStateless| this@@52) (|tree#trigger| Heap@@48 (tree this@@52)))
)))
(assert (forall ((arg0@@39 T@U) (arg1@@18 T@U) ) (! (= (type (|treeParent#frame| arg0@@39 arg1@@18)) RefType)
 :qid |funType:treeParent#frame|
 :pattern ( (|treeParent#frame| arg0@@39 arg1@@18))
)))
(assert (forall ((Heap@@49 T@U) (Mask@@29 T@U) (this@@53 T@U) ) (!  (=> (and (and (and (= (type Heap@@49) (MapType0Type RefType)) (= (type Mask@@29) (MapType1Type RefType realType))) (= (type this@@53) RefType)) (state Heap@@49 Mask@@29)) (= (|treeParent'| Heap@@49 this@@53) (|treeParent#frame| (MapType0Select Heap@@49 null (tree this@@53)) this@@53)))
 :qid |stdinbpl.659:15|
 :skolemid |41|
 :pattern ( (state Heap@@49 Mask@@29) (|treeParent'| Heap@@49 this@@53))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@50 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@50) (MapType0Type RefType))) (U_2_bool (MapType0Select Heap@@50 o $allocated))) (U_2_bool (MapType0Select Heap@@50 (MapType0Select Heap@@50 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType0Select Heap@@50 o f))
)))
(assert (forall ((this@@54 T@U) (last@@30 T@U) ) (!  (=> (and (= (type this@@54) RefType) (= (type last@@30) RefType)) (= (PredicateMaskField (heapseg this@@54 last@@30)) (|heapseg#sm| this@@54 last@@30)))
 :qid |stdinbpl.2398:15|
 :skolemid |97|
 :pattern ( (PredicateMaskField (heapseg this@@54 last@@30)))
)))
(assert (forall ((Heap@@51 T@U) (Mask@@30 T@U) (this@@55 T@U) (last@@31 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@51) (MapType0Type RefType)) (= (type Mask@@30) (MapType1Type RefType realType))) (= (type this@@55) RefType)) (= (type last@@31) RefType)) (and (state Heap@@51 Mask@@30) (< AssumeFunctionsAbove 0))) (= (sorted Heap@@51 this@@55 last@@31)  (=> (< 1 (segLength Heap@@51 this@@55 last@@31)) (and (< (treeDegree Heap@@51 this@@55) (segDegree Heap@@51 (MapType0Select Heap@@51 this@@55 sibling) last@@31 0)) (|sorted'| Heap@@51 (MapType0Select Heap@@51 this@@55 sibling) last@@31)))))
 :qid |stdinbpl.1475:15|
 :skolemid |74|
 :pattern ( (state Heap@@51 Mask@@30) (sorted Heap@@51 this@@55 last@@31))
 :pattern ( (state Heap@@51 Mask@@30) (|sorted#triggerStateless| this@@55 last@@31) (|heapseg#trigger| Heap@@51 (heapseg this@@55 last@@31)) (|heapseg#trigger| Heap@@51 (heapseg this@@55 last@@31)) (|heapseg#trigger| Heap@@51 (heapseg this@@55 last@@31)))
)))
(assert (forall ((this@@56 T@U) ) (!  (=> (= (type this@@56) RefType) (= (PredicateMaskField (tree this@@56)) (|tree#sm| this@@56)))
 :qid |stdinbpl.2205:15|
 :skolemid |91|
 :pattern ( (PredicateMaskField (tree this@@56)))
)))
(assert (forall ((this@@57 T@U) ) (!  (=> (= (type this@@57) RefType) (= (PredicateMaskField (heap this@@57)) (|heap#sm| this@@57)))
 :qid |stdinbpl.2516:15|
 :skolemid |103|
 :pattern ( (PredicateMaskField (heap this@@57)))
)))
(assert (forall ((Heap@@52 T@U) (o@@0 T@U) (f_3 T@U) (v T@U) ) (! (let ((B@@8 (type v)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@52) (MapType0Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@52 (MapType0Store Heap@@52 o@@0 f_3 v)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType0Store Heap@@52 o@@0 f_3 v))
)))
(assert (forall ((Heap@@53 T@U) (Mask@@31 T@U) (this@@58 T@U) ) (!  (=> (and (and (and (= (type Heap@@53) (MapType0Type RefType)) (= (type Mask@@31) (MapType1Type RefType realType))) (= (type this@@58) RefType)) (and (state Heap@@53 Mask@@31) (< AssumeFunctionsAbove 3))) (= (treeKey Heap@@53 this@@58) (U_2_int (MapType0Select Heap@@53 this@@58 key))))
 :qid |stdinbpl.230:15|
 :skolemid |24|
 :pattern ( (state Heap@@53 Mask@@31) (treeKey Heap@@53 this@@58))
 :pattern ( (state Heap@@53 Mask@@31) (|treeKey#triggerStateless| this@@58) (|tree#trigger| Heap@@53 (tree this@@58)))
)))
(assert (forall ((Heap@@54 T@U) (Mask@@32 T@U) (this@@59 T@U) ) (!  (=> (and (and (and (= (type Heap@@54) (MapType0Type RefType)) (= (type Mask@@32) (MapType1Type RefType realType))) (= (type this@@59) RefType)) (and (state Heap@@54 Mask@@32) (< AssumeFunctionsAbove 6))) (= (treeParent Heap@@54 this@@59) (MapType0Select Heap@@54 this@@59 parent)))
 :qid |stdinbpl.652:15|
 :skolemid |40|
 :pattern ( (state Heap@@54 Mask@@32) (treeParent Heap@@54 this@@59))
 :pattern ( (state Heap@@54 Mask@@32) (|treeParent#triggerStateless| this@@59) (|tree#trigger| Heap@@54 (tree this@@59)))
)))
(assert (forall ((Heap@@55 T@U) (Mask@@33 T@U) (this@@60 T@U) ) (!  (=> (and (and (and (= (type Heap@@55) (MapType0Type RefType)) (= (type Mask@@33) (MapType1Type RefType realType))) (= (type this@@60) RefType)) (and (state Heap@@55 Mask@@33) (< AssumeFunctionsAbove 9))) (= (treeDegree Heap@@55 this@@60) (U_2_int (MapType0Select Heap@@55 this@@60 degree))))
 :qid |stdinbpl.359:15|
 :skolemid |29|
 :pattern ( (state Heap@@55 Mask@@33) (treeDegree Heap@@55 this@@60))
 :pattern ( (state Heap@@55 Mask@@33) (|treeDegree#triggerStateless| this@@60) (|tree#trigger| Heap@@55 (tree this@@60)))
)))
(assert (= (type ZeroPMask) (MapType1Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType1Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType1Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((Heap@@56 T@U) (Mask@@34 T@U) (this@@61 T@U) (last@@32 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@56) (MapType0Type RefType)) (= (type Mask@@34) (MapType1Type RefType realType))) (= (type this@@61) RefType)) (= (type last@@32) RefType)) (and (state Heap@@56 Mask@@34) (< AssumeFunctionsAbove 2))) (= (validChildren Heap@@56 this@@61 last@@32)  (=> (< 1 (segLength Heap@@56 this@@61 last@@32)) (and (= (treeDegree Heap@@56 this@@61) (+ (segDegree Heap@@56 (MapType0Select Heap@@56 this@@61 sibling) last@@32 0) 1)) (|validChildren'| Heap@@56 (MapType0Select Heap@@56 this@@61 sibling) last@@32)))))
 :qid |stdinbpl.2013:15|
 :skolemid |87|
 :pattern ( (state Heap@@56 Mask@@34) (validChildren Heap@@56 this@@61 last@@32))
 :pattern ( (state Heap@@56 Mask@@34) (|validChildren#triggerStateless| this@@61 last@@32) (|heapseg#trigger| Heap@@56 (heapseg this@@61 last@@32)) (|heapseg#trigger| Heap@@56 (heapseg this@@61 last@@32)) (|heapseg#trigger| Heap@@56 (heapseg this@@61 last@@32)))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.177:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(assert (forall ((Heap@@57 T@U) (Mask@@35 T@U) (this@@62 T@U) (last@@33 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@57) (MapType0Type RefType)) (= (type Mask@@35) (MapType1Type RefType realType))) (= (type this@@62) RefType)) (= (type last@@33) RefType)) (and (state Heap@@57 Mask@@35) (< AssumeFunctionsAbove 4))) (not (= this@@62 last@@33))) (= (segParent Heap@@57 this@@62 last@@33) (treeParent Heap@@57 this@@62)))
 :qid |stdinbpl.1336:15|
 :skolemid |68|
 :pattern ( (state Heap@@57 Mask@@35) (segParent Heap@@57 this@@62 last@@33))
 :pattern ( (state Heap@@57 Mask@@35) (|segParent#triggerStateless| this@@62 last@@33) (|heapseg#trigger| Heap@@57 (heapseg this@@62 last@@33)))
)))
(assert (forall ((Heap@@58 T@U) (this@@63 T@U) (last@@34 T@U) ) (!  (=> (and (and (= (type Heap@@58) (MapType0Type RefType)) (= (type this@@63) RefType)) (= (type last@@34) RefType)) (and (= (sorted Heap@@58 this@@63 last@@34) (|sorted'| Heap@@58 this@@63 last@@34)) (dummyFunction (bool_2_U (|sorted#triggerStateless| this@@63 last@@34)))))
 :qid |stdinbpl.1465:15|
 :skolemid |72|
 :pattern ( (sorted Heap@@58 this@@63 last@@34))
)))
(assert (forall ((Heap@@59 T@U) (this@@64 T@U) (last@@35 T@U) ) (!  (=> (and (and (= (type Heap@@59) (MapType0Type RefType)) (= (type this@@64) RefType)) (= (type last@@35) RefType)) (and (= (presorted Heap@@59 this@@64 last@@35) (|presorted'| Heap@@59 this@@64 last@@35)) (dummyFunction (bool_2_U (|presorted#triggerStateless| this@@64 last@@35)))))
 :qid |stdinbpl.1702:15|
 :skolemid |79|
 :pattern ( (presorted Heap@@59 this@@64 last@@35))
)))
(assert (forall ((Heap@@60 T@U) (this@@65 T@U) (last@@36 T@U) ) (!  (=> (and (and (= (type Heap@@60) (MapType0Type RefType)) (= (type this@@65) RefType)) (= (type last@@36) RefType)) (and (= (validChildren Heap@@60 this@@65 last@@36) (|validChildren'| Heap@@60 this@@65 last@@36)) (dummyFunction (bool_2_U (|validChildren#triggerStateless| this@@65 last@@36)))))
 :qid |stdinbpl.2003:15|
 :skolemid |85|
 :pattern ( (validChildren Heap@@60 this@@65 last@@36))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun Heap@@61 () T@U)
(declare-fun UnfoldingMask@5 () T@U)
(declare-fun this@@66 () T@U)
(declare-fun UnfoldingMask@0 () T@U)
(declare-fun Mask@0 () T@U)
(declare-fun UnfoldingMask@1 () T@U)
(declare-fun UnfoldingMask@2 () T@U)
(declare-fun UnfoldingMask@3 () T@U)
(declare-fun UnfoldingMask@4 () T@U)
(declare-fun CombineFrames (T@U T@U) T@U)
(declare-fun FrameFragment (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (= (type Heap@@61) (MapType0Type RefType)) (= (type UnfoldingMask@5) (MapType1Type RefType realType))) (= (type this@@66) RefType)) (= (type UnfoldingMask@0) (MapType1Type RefType realType))) (= (type Mask@0) (MapType1Type RefType realType))) (= (type UnfoldingMask@1) (MapType1Type RefType realType))) (= (type UnfoldingMask@2) (MapType1Type RefType realType))) (= (type UnfoldingMask@3) (MapType1Type RefType realType))) (= (type UnfoldingMask@4) (MapType1Type RefType realType))) (forall ((arg0@@40 T@U) (arg1@@19 T@U) ) (! (= (type (CombineFrames arg0@@40 arg1@@19)) FrameTypeType)
 :qid |funType:CombineFrames|
 :pattern ( (CombineFrames arg0@@40 arg1@@19))
))) (forall ((arg0@@41 T@U) ) (! (= (type (FrameFragment arg0@@41)) FrameTypeType)
 :qid |funType:FrameFragment|
 :pattern ( (FrameFragment arg0@@41))
))))
(set-info :boogie-vc-id |treeParent#definedness|)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let ((anon6_correct  (=> (and (state Heap@@61 UnfoldingMask@5) (= (ControlFlow 0 2) (- 0 1))) (HasDirectPerm UnfoldingMask@5 this@@66 parent))))
(let ((anon9_Else_correct  (=> (and (= (MapType0Select Heap@@61 this@@66 child) null) (= (ControlFlow 0 4) 2)) anon6_correct)))
(let ((anon9_Then_correct  (=> (and (and (not (= (MapType0Select Heap@@61 this@@66 child) null)) (state Heap@@61 UnfoldingMask@5)) (and (= (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 child) null) this@@66) (= (ControlFlow 0 3) 2))) anon6_correct)))
(let ((anon4_correct  (=> (and (state Heap@@61 UnfoldingMask@5) (validChildren Heap@@61 (MapType0Select Heap@@61 this@@66 child) null)) (and (=> (= (ControlFlow 0 5) 3) anon9_Then_correct) (=> (= (ControlFlow 0 5) 4) anon9_Else_correct)))))
(let ((anon8_Else_correct  (=> (and (<= (U_2_int (MapType0Select Heap@@61 this@@66 degree)) 0) (= (ControlFlow 0 7) 5)) anon4_correct)))
(let ((anon8_Then_correct  (=> (and (and (< 0 (U_2_int (MapType0Select Heap@@61 this@@66 degree))) (state Heap@@61 UnfoldingMask@5)) (and (= (segDegree Heap@@61 (MapType0Select Heap@@61 this@@66 child) null 0) (- (U_2_int (MapType0Select Heap@@61 this@@66 degree)) 1)) (= (ControlFlow 0 6) 5))) anon4_correct)))
(let ((anon2_correct  (=> (= UnfoldingMask@0 (MapType1Store Mask@0 null (tree this@@66) (real_2_U (- (U_2_real (MapType1Select Mask@0 null (tree this@@66))) FullPerm)))) (=> (and (not (= this@@66 null)) (= UnfoldingMask@1 (MapType1Store UnfoldingMask@0 this@@66 key (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@0 this@@66 key)) FullPerm))))) (=> (and (and (and (and (state Heap@@61 UnfoldingMask@1) (not (= this@@66 null))) (and (= UnfoldingMask@2 (MapType1Store UnfoldingMask@1 this@@66 degree (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@1 this@@66 degree)) FullPerm)))) (state Heap@@61 UnfoldingMask@2))) (and (and (not (= this@@66 null)) (= UnfoldingMask@3 (MapType1Store UnfoldingMask@2 this@@66 child (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@2 this@@66 child)) FullPerm))))) (and (state Heap@@61 UnfoldingMask@3) (not (= this@@66 null))))) (and (and (and (= UnfoldingMask@4 (MapType1Store UnfoldingMask@3 this@@66 parent (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@3 this@@66 parent)) FullPerm)))) (state Heap@@61 UnfoldingMask@4)) (and (<= 0 (U_2_int (MapType0Select Heap@@61 this@@66 degree))) (= UnfoldingMask@5 (MapType1Store UnfoldingMask@4 null (heapseg (MapType0Select Heap@@61 this@@66 child) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@4 null (heapseg (MapType0Select Heap@@61 this@@66 child) null))) FullPerm)))))) (and (and (InsidePredicate (tree this@@66) (MapType0Select Heap@@61 null (tree this@@66)) (heapseg (MapType0Select Heap@@61 this@@66 child) null) (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 child) null))) (state Heap@@61 UnfoldingMask@5)) (and (state Heap@@61 UnfoldingMask@5) (= (U_2_int (MapType0Select Heap@@61 this@@66 degree)) (segLength Heap@@61 (MapType0Select Heap@@61 this@@66 child) null)))))) (and (=> (= (ControlFlow 0 8) 6) anon8_Then_correct) (=> (= (ControlFlow 0 8) 7) anon8_Else_correct)))))))
(let ((anon7_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 11) 8)) anon2_correct)))
(let ((anon7_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 9) (- 0 10)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (tree this@@66))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (tree this@@66)))) (=> (= (ControlFlow 0 9) 8) anon2_correct))))))
(let ((anon0_correct  (=> (and (and (and (state Heap@@61 ZeroMask) (U_2_bool (MapType0Select Heap@@61 this@@66 $allocated))) (and (= AssumeFunctionsAbove 6) (= Mask@0 (MapType1Store ZeroMask null (tree this@@66) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (tree this@@66))) FullPerm)))))) (and (and (state Heap@@61 Mask@0) (state Heap@@61 Mask@0)) (and (|tree#trigger| Heap@@61 (tree this@@66)) (= (MapType0Select Heap@@61 null (tree this@@66)) (CombineFrames (FrameFragment (MapType0Select Heap@@61 this@@66 key)) (CombineFrames (FrameFragment (MapType0Select Heap@@61 this@@66 degree)) (CombineFrames (FrameFragment (MapType0Select Heap@@61 this@@66 child)) (CombineFrames (FrameFragment (MapType0Select Heap@@61 this@@66 parent)) (CombineFrames (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 child) null)) (CombineFrames (FrameFragment (ite (< 0 (U_2_int (MapType0Select Heap@@61 this@@66 degree))) EmptyFrame EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@@61 this@@66 child) null)) EmptyFrame EmptyFrame)))))))))))) (and (=> (= (ControlFlow 0 12) 9) anon7_Then_correct) (=> (= (ControlFlow 0 12) 11) anon7_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 13) 12) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $allocated () T@U)
(declare-fun key () T@U)
(declare-fun degree () T@U)
(declare-fun parent () T@U)
(declare-fun sibling () T@U)
(declare-fun child () T@U)
(declare-fun Nodes () T@U)
(declare-fun size () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun NormalFieldType () T@T)
(declare-fun RefType () T@T)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun state (T@U T@U) Bool)
(declare-fun segLength (T@U T@U T@U) Int)
(declare-fun |segLength#triggerStateless| (T@U T@U) Int)
(declare-fun |heapseg#trigger| (T@U T@U) Bool)
(declare-fun heapseg (T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun AssumeFunctionsAbove () Int)
(declare-fun |segLength'| (T@U T@U T@U) Int)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun PredicateType_heapsegType () T@T)
(declare-fun FrameTypeType () T@T)
(declare-fun |treeDegree'| (T@U T@U) Int)
(declare-fun |treeDegree#trigger| (T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun tree (T@U) T@U)
(declare-fun PredicateType_treeType () T@T)
(declare-fun GoodMask (T@U) Bool)
(declare-fun |segDegree'| (T@U T@U T@U Int) Int)
(declare-fun dummyFunction (T@U) Bool)
(declare-fun |segDegree#triggerStateless| (T@U T@U Int) Int)
(declare-fun segSize (T@U T@U T@U) Int)
(declare-fun |segSize#triggerStateless| (T@U T@U) Int)
(declare-fun |treeSize'| (T@U T@U) Int)
(declare-fun |segSize'| (T@U T@U T@U) Int)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun |segParent'| (T@U T@U T@U) T@U)
(declare-fun |segParent#triggerStateless| (T@U T@U) T@U)
(declare-fun |sorted'| (T@U T@U T@U) Bool)
(declare-fun |sorted#triggerStateless| (T@U T@U) Bool)
(declare-fun |presorted'| (T@U T@U T@U) Bool)
(declare-fun |presorted#triggerStateless| (T@U T@U) Bool)
(declare-fun |validChildren'| (T@U T@U T@U) Bool)
(declare-fun |validChildren#triggerStateless| (T@U T@U) Bool)
(declare-fun |heapseg#everUsed| (T@U) Bool)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun IsWandField (T@U) Bool)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun heap (T@U) T@U)
(declare-fun PredicateType_heapType () T@T)
(declare-fun |treeKey'| (T@U T@U) Int)
(declare-fun |treeKey#triggerStateless| (T@U) Int)
(declare-fun |treeDegree#triggerStateless| (T@U) Int)
(declare-fun |treeSize#triggerStateless| (T@U) Int)
(declare-fun |treeParent'| (T@U T@U) T@U)
(declare-fun |treeParent#triggerStateless| (T@U) T@U)
(declare-fun |tree#trigger| (T@U T@U) Bool)
(declare-fun |tree#everUsed| (T@U) Bool)
(declare-fun |heap#trigger| (T@U T@U) Bool)
(declare-fun |heap#everUsed| (T@U) Bool)
(declare-fun segDegree (T@U T@U T@U Int) Int)
(declare-fun treeDegree (T@U T@U) Int)
(declare-fun |sorted#frame| (T@U T@U T@U) Bool)
(declare-fun |presorted#frame| (T@U T@U T@U) Bool)
(declare-fun |validChildren#frame| (T@U T@U T@U) Bool)
(declare-fun treeKey (T@U T@U) Int)
(declare-fun treeSize (T@U T@U) Int)
(declare-fun treeParent (T@U T@U) T@U)
(declare-fun |heapseg#sm| (T@U T@U) T@U)
(declare-fun |tree#sm| (T@U) T@U)
(declare-fun |heap#sm| (T@U) T@U)
(declare-fun |segLength#frame| (T@U T@U T@U) Int)
(declare-fun |segSize#frame| (T@U T@U T@U) Int)
(declare-fun |segParent#frame| (T@U T@U T@U) T@U)
(declare-fun presorted (T@U T@U T@U) Bool)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun |sorted#trigger| (T@U T@U T@U) Bool)
(declare-fun segParent (T@U T@U T@U) T@U)
(declare-fun |segDegree#trigger| (T@U T@U T@U Int) Bool)
(declare-fun |segDegree#frame| (T@U T@U T@U Int) Int)
(declare-fun getPredWandId (T@U) Int)
(declare-fun |segSize#trigger| (T@U T@U T@U) Bool)
(declare-fun FullPerm () Real)
(declare-fun |segLength#trigger| (T@U T@U T@U) Bool)
(declare-fun |treeKey#frame| (T@U T@U) Int)
(declare-fun |treeDegree#frame| (T@U T@U) Int)
(declare-fun |treeSize#frame| (T@U T@U) Int)
(declare-fun |treeParent#frame| (T@U T@U) T@U)
(declare-fun sorted (T@U T@U T@U) Bool)
(declare-fun ZeroPMask () T@U)
(declare-fun validChildren (T@U T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@11 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@11 arg1)) 6)
 :qid |ctor:FieldType|
)) (forall ((arg0@@12 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12 arg1@@0)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12 arg1@@0))
))) (forall ((arg0@@13 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@13 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@13 arg1@@1))
))) (= (Ctor NormalFieldType) 7)) (= (type $allocated) (FieldType NormalFieldType boolType))) (= (type key) (FieldType NormalFieldType intType))) (= (type degree) (FieldType NormalFieldType intType))) (= (Ctor RefType) 8)) (= (type parent) (FieldType NormalFieldType RefType))) (= (type sibling) (FieldType NormalFieldType RefType))) (= (type child) (FieldType NormalFieldType RefType))) (= (type Nodes) (FieldType NormalFieldType RefType))) (= (type size) (FieldType NormalFieldType intType))))
(assert (distinct $allocated key degree parent sibling child Nodes size)
)
(assert  (and (and (and (and (and (forall ((arg0@@14 T@T) ) (! (= (Ctor (MapType0Type arg0@@14)) 9)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@15 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@15)) arg0@@15)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@15))
))) (forall ((arg0@@16 T@U) (arg1@@2 T@U) (arg2 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2))))
(= (type (MapType0Select arg0@@16 arg1@@2 arg2)) B))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@16 arg1@@2 arg2))
))) (forall ((arg0@@17 T@U) (arg1@@3 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@3)))
(= (type (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1))))
 (=> (= (type val) B@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType0Type RefType)) (= (type Heap1) (MapType0Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((arg0@@18 T@T) (arg1@@4 T@T) ) (! (= (Ctor (MapType1Type arg0@@18 arg1@@4)) 10)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@19 T@T) (arg1@@5 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@19 arg1@@5)) arg0@@19)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@19 arg1@@5))
))) (forall ((arg0@@20 T@T) (arg1@@6 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@20 arg1@@6)) arg1@@6)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@20 arg1@@6))
))) (forall ((arg0@@21 T@U) (arg1@@7 T@U) (arg2@@1 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@21))))
(= (type (MapType1Select arg0@@21 arg1@@7 arg2@@1)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@21 arg1@@7 arg2@@1))
))) (forall ((arg0@@22 T@U) (arg1@@8 T@U) (arg2@@2 T@U) (arg3@@0 T@U) ) (! (let ((aVar1@@0 (type arg3@@0)))
(let ((aVar0@@0 (type arg1@@8)))
(= (type (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@3) x0@@3 x1@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@4) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@5) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@6) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))) (= (Ctor PredicateType_heapsegType) 11)) (= (Ctor FrameTypeType) 12)) (forall ((arg0@@23 T@U) (arg1@@9 T@U) ) (! (= (type (heapseg arg0@@23 arg1@@9)) (FieldType PredicateType_heapsegType FrameTypeType))
 :qid |funType:heapseg|
 :pattern ( (heapseg arg0@@23 arg1@@9))
))))
(assert (forall ((Heap T@U) (Mask T@U) (this T@U) (last T@U) ) (!  (=> (and (and (and (and (= (type Heap) (MapType0Type RefType)) (= (type Mask) (MapType1Type RefType realType))) (= (type this) RefType)) (= (type last) RefType)) (and (state Heap Mask) (< AssumeFunctionsAbove 8))) (= (segLength Heap this last) (ite (= this last) 0 (+ 1 (|segLength'| Heap (MapType0Select Heap this sibling) last)))))
 :qid |stdinbpl.781:15|
 :skolemid |45|
 :pattern ( (state Heap Mask) (segLength Heap this last))
 :pattern ( (state Heap Mask) (|segLength#triggerStateless| this last) (|heapseg#trigger| Heap (heapseg this last)))
)))
(assert  (and (and (= (type null) RefType) (= (Ctor PredicateType_treeType) 13)) (forall ((arg0@@24 T@U) ) (! (= (type (tree arg0@@24)) (FieldType PredicateType_treeType FrameTypeType))
 :qid |funType:tree|
 :pattern ( (tree arg0@@24))
))))
(assert (forall ((Heap@@0 T@U) (Mask@@0 T@U) (this@@0 T@U) ) (!  (=> (and (and (and (= (type Heap@@0) (MapType0Type RefType)) (= (type Mask@@0) (MapType1Type RefType realType))) (= (type this@@0) RefType)) (and (state Heap@@0 Mask@@0) (or (< AssumeFunctionsAbove 9) (|treeDegree#trigger| (MapType0Select Heap@@0 null (tree this@@0)) this@@0)))) (<= 0 (|treeDegree'| Heap@@0 this@@0)))
 :qid |stdinbpl.372:15|
 :skolemid |31|
 :pattern ( (state Heap@@0 Mask@@0) (|treeDegree'| Heap@@0 this@@0))
)))
(assert (forall ((Heap@@1 T@U) (Mask@@1 T@U) ) (!  (=> (and (and (= (type Heap@@1) (MapType0Type RefType)) (= (type Mask@@1) (MapType1Type RefType realType))) (state Heap@@1 Mask@@1)) (GoodMask Mask@@1))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap@@1 Mask@@1))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType0Type RefType)) (= (type Heap1@@0) (MapType0Type RefType))) (= (type Heap2) (MapType0Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert (forall ((Heap@@2 T@U) (this@@1 T@U) (last@@0 T@U) (index Int) ) (!  (=> (and (and (= (type Heap@@2) (MapType0Type RefType)) (= (type this@@1) RefType)) (= (type last@@0) RefType)) (dummyFunction (int_2_U (|segDegree#triggerStateless| this@@1 last@@0 index))))
 :qid |stdinbpl.1128:15|
 :skolemid |60|
 :pattern ( (|segDegree'| Heap@@2 this@@1 last@@0 index))
)))
(assert (forall ((Heap@@3 T@U) (Mask@@2 T@U) (this@@2 T@U) (last@@1 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@3) (MapType0Type RefType)) (= (type Mask@@2) (MapType1Type RefType realType))) (= (type this@@2) RefType)) (= (type last@@1) RefType)) (and (state Heap@@3 Mask@@2) (< AssumeFunctionsAbove 1))) (= (segSize Heap@@3 this@@2 last@@1) (ite (= this@@2 last@@1) 0 (+ (|treeSize'| Heap@@3 this@@2) (|segSize'| Heap@@3 (MapType0Select Heap@@3 this@@2 sibling) last@@1)))))
 :qid |stdinbpl.957:15|
 :skolemid |54|
 :pattern ( (state Heap@@3 Mask@@2) (segSize Heap@@3 this@@2 last@@1))
 :pattern ( (state Heap@@3 Mask@@2) (|segSize#triggerStateless| this@@2 last@@1) (|heapseg#trigger| Heap@@3 (heapseg this@@2 last@@1)) (|heapseg#trigger| Heap@@3 (heapseg this@@2 last@@1)))
)))
(assert (forall ((this@@3 T@U) (last@@2 T@U) ) (!  (=> (and (= (type this@@3) RefType) (= (type last@@2) RefType)) (IsPredicateField (heapseg this@@3 last@@2)))
 :qid |stdinbpl.2402:15|
 :skolemid |98|
 :pattern ( (heapseg this@@3 last@@2))
)))
(assert (forall ((Heap@@4 T@U) (this@@4 T@U) (last@@3 T@U) ) (!  (=> (and (and (= (type Heap@@4) (MapType0Type RefType)) (= (type this@@4) RefType)) (= (type last@@3) RefType)) (dummyFunction (int_2_U (|segLength#triggerStateless| this@@4 last@@3))))
 :qid |stdinbpl.775:15|
 :skolemid |44|
 :pattern ( (|segLength'| Heap@@4 this@@4 last@@3))
)))
(assert (forall ((Heap@@5 T@U) (this@@5 T@U) (last@@4 T@U) ) (!  (=> (and (and (= (type Heap@@5) (MapType0Type RefType)) (= (type this@@5) RefType)) (= (type last@@4) RefType)) (dummyFunction (int_2_U (|segSize#triggerStateless| this@@5 last@@4))))
 :qid |stdinbpl.951:15|
 :skolemid |53|
 :pattern ( (|segSize'| Heap@@5 this@@5 last@@4))
)))
(assert  (and (forall ((arg0@@25 T@U) (arg1@@10 T@U) (arg2@@3 T@U) ) (! (= (type (|segParent'| arg0@@25 arg1@@10 arg2@@3)) RefType)
 :qid |funType:segParent'|
 :pattern ( (|segParent'| arg0@@25 arg1@@10 arg2@@3))
)) (forall ((arg0@@26 T@U) (arg1@@11 T@U) ) (! (= (type (|segParent#triggerStateless| arg0@@26 arg1@@11)) RefType)
 :qid |funType:segParent#triggerStateless|
 :pattern ( (|segParent#triggerStateless| arg0@@26 arg1@@11))
))))
(assert (forall ((Heap@@6 T@U) (this@@6 T@U) (last@@5 T@U) ) (!  (=> (and (and (= (type Heap@@6) (MapType0Type RefType)) (= (type this@@6) RefType)) (= (type last@@5) RefType)) (dummyFunction (|segParent#triggerStateless| this@@6 last@@5)))
 :qid |stdinbpl.1330:15|
 :skolemid |67|
 :pattern ( (|segParent'| Heap@@6 this@@6 last@@5))
)))
(assert (forall ((Heap@@7 T@U) (this@@7 T@U) (last@@6 T@U) ) (!  (=> (and (and (= (type Heap@@7) (MapType0Type RefType)) (= (type this@@7) RefType)) (= (type last@@6) RefType)) (dummyFunction (bool_2_U (|sorted#triggerStateless| this@@7 last@@6))))
 :qid |stdinbpl.1469:15|
 :skolemid |73|
 :pattern ( (|sorted'| Heap@@7 this@@7 last@@6))
)))
(assert (forall ((Heap@@8 T@U) (this@@8 T@U) (last@@7 T@U) ) (!  (=> (and (and (= (type Heap@@8) (MapType0Type RefType)) (= (type this@@8) RefType)) (= (type last@@7) RefType)) (dummyFunction (bool_2_U (|presorted#triggerStateless| this@@8 last@@7))))
 :qid |stdinbpl.1706:15|
 :skolemid |80|
 :pattern ( (|presorted'| Heap@@8 this@@8 last@@7))
)))
(assert (forall ((Heap@@9 T@U) (this@@9 T@U) (last@@8 T@U) ) (!  (=> (and (and (= (type Heap@@9) (MapType0Type RefType)) (= (type this@@9) RefType)) (= (type last@@8) RefType)) (dummyFunction (bool_2_U (|validChildren#triggerStateless| this@@9 last@@8))))
 :qid |stdinbpl.2007:15|
 :skolemid |86|
 :pattern ( (|validChildren'| Heap@@9 this@@9 last@@8))
)))
(assert (forall ((Heap@@10 T@U) (this@@10 T@U) (last@@9 T@U) ) (!  (=> (and (and (= (type Heap@@10) (MapType0Type RefType)) (= (type this@@10) RefType)) (= (type last@@9) RefType)) (|heapseg#everUsed| (heapseg this@@10 last@@9)))
 :qid |stdinbpl.2421:15|
 :skolemid |102|
 :pattern ( (|heapseg#trigger| Heap@@10 (heapseg this@@10 last@@9)))
)))
(assert (forall ((arg0@@27 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@27))))
(= (type (PredicateMaskField arg0@@27)) (FieldType A (MapType1Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@27))
)))
(assert (forall ((Heap@@11 T@U) (ExhaleHeap T@U) (Mask@@3 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@11) (MapType0Type RefType)) (= (type ExhaleHeap) (MapType0Type RefType))) (= (type Mask@@3) (MapType1Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@11 ExhaleHeap Mask@@3)) (and (HasDirectPerm Mask@@3 null pm_f) (IsPredicateField pm_f))) (= (MapType0Select Heap@@11 null (PredicateMaskField pm_f)) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@11 ExhaleHeap Mask@@3) (IsPredicateField pm_f) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((arg0@@28 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@28))))
(= (type (WandMaskField arg0@@28)) (FieldType A@@0 (MapType1Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@28))
)))
(assert (forall ((Heap@@12 T@U) (ExhaleHeap@@0 T@U) (Mask@@4 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@12) (MapType0Type RefType)) (= (type ExhaleHeap@@0) (MapType0Type RefType))) (= (type Mask@@4) (MapType1Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@12 ExhaleHeap@@0 Mask@@4)) (and (HasDirectPerm Mask@@4 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType0Select Heap@@12 null (WandMaskField pm_f@@0)) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@12 ExhaleHeap@@0 Mask@@4) (IsWandField pm_f@@0) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert (forall ((this@@11 T@U) ) (!  (=> (= (type this@@11) RefType) (IsPredicateField (tree this@@11)))
 :qid |stdinbpl.2209:15|
 :skolemid |92|
 :pattern ( (tree this@@11))
)))
(assert  (and (= (Ctor PredicateType_heapType) 14) (forall ((arg0@@29 T@U) ) (! (= (type (heap arg0@@29)) (FieldType PredicateType_heapType FrameTypeType))
 :qid |funType:heap|
 :pattern ( (heap arg0@@29))
))))
(assert (forall ((this@@12 T@U) ) (!  (=> (= (type this@@12) RefType) (IsPredicateField (heap this@@12)))
 :qid |stdinbpl.2520:15|
 :skolemid |104|
 :pattern ( (heap this@@12))
)))
(assert (forall ((Heap@@13 T@U) (this@@13 T@U) ) (!  (=> (and (= (type Heap@@13) (MapType0Type RefType)) (= (type this@@13) RefType)) (dummyFunction (int_2_U (|treeKey#triggerStateless| this@@13))))
 :qid |stdinbpl.224:15|
 :skolemid |23|
 :pattern ( (|treeKey'| Heap@@13 this@@13))
)))
(assert (forall ((Heap@@14 T@U) (this@@14 T@U) ) (!  (=> (and (= (type Heap@@14) (MapType0Type RefType)) (= (type this@@14) RefType)) (dummyFunction (int_2_U (|treeDegree#triggerStateless| this@@14))))
 :qid |stdinbpl.353:15|
 :skolemid |28|
 :pattern ( (|treeDegree'| Heap@@14 this@@14))
)))
(assert (forall ((Heap@@15 T@U) (this@@15 T@U) ) (!  (=> (and (= (type Heap@@15) (MapType0Type RefType)) (= (type this@@15) RefType)) (dummyFunction (int_2_U (|treeSize#triggerStateless| this@@15))))
 :qid |stdinbpl.494:15|
 :skolemid |34|
 :pattern ( (|treeSize'| Heap@@15 this@@15))
)))
(assert  (and (forall ((arg0@@30 T@U) (arg1@@12 T@U) ) (! (= (type (|treeParent'| arg0@@30 arg1@@12)) RefType)
 :qid |funType:treeParent'|
 :pattern ( (|treeParent'| arg0@@30 arg1@@12))
)) (forall ((arg0@@31 T@U) ) (! (= (type (|treeParent#triggerStateless| arg0@@31)) RefType)
 :qid |funType:treeParent#triggerStateless|
 :pattern ( (|treeParent#triggerStateless| arg0@@31))
))))
(assert (forall ((Heap@@16 T@U) (this@@16 T@U) ) (!  (=> (and (= (type Heap@@16) (MapType0Type RefType)) (= (type this@@16) RefType)) (dummyFunction (|treeParent#triggerStateless| this@@16)))
 :qid |stdinbpl.646:15|
 :skolemid |39|
 :pattern ( (|treeParent'| Heap@@16 this@@16))
)))
(assert (forall ((Heap@@17 T@U) (this@@17 T@U) ) (!  (=> (and (= (type Heap@@17) (MapType0Type RefType)) (= (type this@@17) RefType)) (|tree#everUsed| (tree this@@17)))
 :qid |stdinbpl.2228:15|
 :skolemid |96|
 :pattern ( (|tree#trigger| Heap@@17 (tree this@@17)))
)))
(assert (forall ((Heap@@18 T@U) (this@@18 T@U) ) (!  (=> (and (= (type Heap@@18) (MapType0Type RefType)) (= (type this@@18) RefType)) (|heap#everUsed| (heap this@@18)))
 :qid |stdinbpl.2539:15|
 :skolemid |108|
 :pattern ( (|heap#trigger| Heap@@18 (heap this@@18)))
)))
(assert (forall ((Heap@@19 T@U) (Mask@@5 T@U) (this@@19 T@U) (last@@10 T@U) (index@@0 Int) ) (!  (=> (and (and (and (and (and (= (type Heap@@19) (MapType0Type RefType)) (= (type Mask@@5) (MapType1Type RefType realType))) (= (type this@@19) RefType)) (= (type last@@10) RefType)) (and (state Heap@@19 Mask@@5) (< AssumeFunctionsAbove 7))) (and (<= 0 index@@0) (< index@@0 (segLength Heap@@19 this@@19 last@@10)))) (= (segDegree Heap@@19 this@@19 last@@10 index@@0) (ite (= index@@0 0) (treeDegree Heap@@19 this@@19) (|segDegree'| Heap@@19 (MapType0Select Heap@@19 this@@19 sibling) last@@10 (- index@@0 1)))))
 :qid |stdinbpl.1134:15|
 :skolemid |61|
 :pattern ( (state Heap@@19 Mask@@5) (segDegree Heap@@19 this@@19 last@@10 index@@0))
 :pattern ( (state Heap@@19 Mask@@5) (|segDegree#triggerStateless| this@@19 last@@10 index@@0) (|heapseg#trigger| Heap@@19 (heapseg this@@19 last@@10)) (|heapseg#trigger| Heap@@19 (heapseg this@@19 last@@10)))
)))
(assert (forall ((Heap@@20 T@U) (Mask@@6 T@U) (this@@20 T@U) (last@@11 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@20) (MapType0Type RefType)) (= (type Mask@@6) (MapType1Type RefType realType))) (= (type this@@20) RefType)) (= (type last@@11) RefType)) (state Heap@@20 Mask@@6)) (= (|sorted'| Heap@@20 this@@20 last@@11) (|sorted#frame| (MapType0Select Heap@@20 null (heapseg this@@20 last@@11)) this@@20 last@@11)))
 :qid |stdinbpl.1482:15|
 :skolemid |75|
 :pattern ( (state Heap@@20 Mask@@6) (|sorted'| Heap@@20 this@@20 last@@11))
 :pattern ( (state Heap@@20 Mask@@6) (|sorted#triggerStateless| this@@20 last@@11) (|heapseg#trigger| Heap@@20 (heapseg this@@20 last@@11)) (|heapseg#trigger| Heap@@20 (heapseg this@@20 last@@11)) (|heapseg#trigger| Heap@@20 (heapseg this@@20 last@@11)))
)))
(assert (forall ((Heap@@21 T@U) (Mask@@7 T@U) (this@@21 T@U) (last@@12 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@21) (MapType0Type RefType)) (= (type Mask@@7) (MapType1Type RefType realType))) (= (type this@@21) RefType)) (= (type last@@12) RefType)) (state Heap@@21 Mask@@7)) (= (|presorted'| Heap@@21 this@@21 last@@12) (|presorted#frame| (MapType0Select Heap@@21 null (heapseg this@@21 last@@12)) this@@21 last@@12)))
 :qid |stdinbpl.1719:15|
 :skolemid |82|
 :pattern ( (state Heap@@21 Mask@@7) (|presorted'| Heap@@21 this@@21 last@@12))
 :pattern ( (state Heap@@21 Mask@@7) (|presorted#triggerStateless| this@@21 last@@12) (|heapseg#trigger| Heap@@21 (heapseg this@@21 last@@12)) (|heapseg#trigger| Heap@@21 (heapseg this@@21 last@@12)) (|heapseg#trigger| Heap@@21 (heapseg this@@21 last@@12)))
)))
(assert (forall ((Heap@@22 T@U) (Mask@@8 T@U) (this@@22 T@U) (last@@13 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@22) (MapType0Type RefType)) (= (type Mask@@8) (MapType1Type RefType realType))) (= (type this@@22) RefType)) (= (type last@@13) RefType)) (state Heap@@22 Mask@@8)) (= (|validChildren'| Heap@@22 this@@22 last@@13) (|validChildren#frame| (MapType0Select Heap@@22 null (heapseg this@@22 last@@13)) this@@22 last@@13)))
 :qid |stdinbpl.2020:15|
 :skolemid |88|
 :pattern ( (state Heap@@22 Mask@@8) (|validChildren'| Heap@@22 this@@22 last@@13))
 :pattern ( (state Heap@@22 Mask@@8) (|validChildren#triggerStateless| this@@22 last@@13) (|heapseg#trigger| Heap@@22 (heapseg this@@22 last@@13)) (|heapseg#trigger| Heap@@22 (heapseg this@@22 last@@13)) (|heapseg#trigger| Heap@@22 (heapseg this@@22 last@@13)))
)))
(assert (forall ((Heap@@23 T@U) (ExhaleHeap@@1 T@U) (Mask@@9 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@23) (MapType0Type RefType)) (= (type ExhaleHeap@@1) (MapType0Type RefType))) (= (type Mask@@9) (MapType1Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@23 ExhaleHeap@@1 Mask@@9)) (U_2_bool (MapType0Select Heap@@23 o_1 $allocated))) (U_2_bool (MapType0Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@23 ExhaleHeap@@1 Mask@@9) (MapType0Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((Heap@@24 T@U) (this@@23 T@U) ) (!  (=> (and (= (type Heap@@24) (MapType0Type RefType)) (= (type this@@23) RefType)) (and (= (treeKey Heap@@24 this@@23) (|treeKey'| Heap@@24 this@@23)) (dummyFunction (int_2_U (|treeKey#triggerStateless| this@@23)))))
 :qid |stdinbpl.220:15|
 :skolemid |22|
 :pattern ( (treeKey Heap@@24 this@@23))
)))
(assert (forall ((Heap@@25 T@U) (this@@24 T@U) ) (!  (=> (and (= (type Heap@@25) (MapType0Type RefType)) (= (type this@@24) RefType)) (and (= (treeDegree Heap@@25 this@@24) (|treeDegree'| Heap@@25 this@@24)) (dummyFunction (int_2_U (|treeDegree#triggerStateless| this@@24)))))
 :qid |stdinbpl.349:15|
 :skolemid |27|
 :pattern ( (treeDegree Heap@@25 this@@24))
)))
(assert (forall ((Heap@@26 T@U) (this@@25 T@U) ) (!  (=> (and (= (type Heap@@26) (MapType0Type RefType)) (= (type this@@25) RefType)) (and (= (treeSize Heap@@26 this@@25) (|treeSize'| Heap@@26 this@@25)) (dummyFunction (int_2_U (|treeSize#triggerStateless| this@@25)))))
 :qid |stdinbpl.490:15|
 :skolemid |33|
 :pattern ( (treeSize Heap@@26 this@@25))
)))
(assert (forall ((arg0@@32 T@U) (arg1@@13 T@U) ) (! (= (type (treeParent arg0@@32 arg1@@13)) RefType)
 :qid |funType:treeParent|
 :pattern ( (treeParent arg0@@32 arg1@@13))
)))
(assert (forall ((Heap@@27 T@U) (this@@26 T@U) ) (!  (=> (and (= (type Heap@@27) (MapType0Type RefType)) (= (type this@@26) RefType)) (and (= (treeParent Heap@@27 this@@26) (|treeParent'| Heap@@27 this@@26)) (dummyFunction (|treeParent#triggerStateless| this@@26))))
 :qid |stdinbpl.642:15|
 :skolemid |38|
 :pattern ( (treeParent Heap@@27 this@@26))
)))
(assert (forall ((this@@27 T@U) (last@@14 T@U) (this2 T@U) (last2 T@U) ) (!  (=> (and (and (and (and (= (type this@@27) RefType) (= (type last@@14) RefType)) (= (type this2) RefType)) (= (type last2) RefType)) (= (heapseg this@@27 last@@14) (heapseg this2 last2))) (and (= this@@27 this2) (= last@@14 last2)))
 :qid |stdinbpl.2412:15|
 :skolemid |100|
 :pattern ( (heapseg this@@27 last@@14) (heapseg this2 last2))
)))
(assert (forall ((arg0@@33 T@U) (arg1@@14 T@U) ) (! (= (type (|heapseg#sm| arg0@@33 arg1@@14)) (FieldType PredicateType_heapsegType (MapType1Type RefType boolType)))
 :qid |funType:heapseg#sm|
 :pattern ( (|heapseg#sm| arg0@@33 arg1@@14))
)))
(assert (forall ((this@@28 T@U) (last@@15 T@U) (this2@@0 T@U) (last2@@0 T@U) ) (!  (=> (and (and (and (and (= (type this@@28) RefType) (= (type last@@15) RefType)) (= (type this2@@0) RefType)) (= (type last2@@0) RefType)) (= (|heapseg#sm| this@@28 last@@15) (|heapseg#sm| this2@@0 last2@@0))) (and (= this@@28 this2@@0) (= last@@15 last2@@0)))
 :qid |stdinbpl.2416:15|
 :skolemid |101|
 :pattern ( (|heapseg#sm| this@@28 last@@15) (|heapseg#sm| this2@@0 last2@@0))
)))
(assert (forall ((this@@29 T@U) (this2@@1 T@U) ) (!  (=> (and (and (= (type this@@29) RefType) (= (type this2@@1) RefType)) (= (tree this@@29) (tree this2@@1))) (= this@@29 this2@@1))
 :qid |stdinbpl.2219:15|
 :skolemid |94|
 :pattern ( (tree this@@29) (tree this2@@1))
)))
(assert (forall ((arg0@@34 T@U) ) (! (= (type (|tree#sm| arg0@@34)) (FieldType PredicateType_treeType (MapType1Type RefType boolType)))
 :qid |funType:tree#sm|
 :pattern ( (|tree#sm| arg0@@34))
)))
(assert (forall ((this@@30 T@U) (this2@@2 T@U) ) (!  (=> (and (and (= (type this@@30) RefType) (= (type this2@@2) RefType)) (= (|tree#sm| this@@30) (|tree#sm| this2@@2))) (= this@@30 this2@@2))
 :qid |stdinbpl.2223:15|
 :skolemid |95|
 :pattern ( (|tree#sm| this@@30) (|tree#sm| this2@@2))
)))
(assert (forall ((this@@31 T@U) (this2@@3 T@U) ) (!  (=> (and (and (= (type this@@31) RefType) (= (type this2@@3) RefType)) (= (heap this@@31) (heap this2@@3))) (= this@@31 this2@@3))
 :qid |stdinbpl.2530:15|
 :skolemid |106|
 :pattern ( (heap this@@31) (heap this2@@3))
)))
(assert (forall ((arg0@@35 T@U) ) (! (= (type (|heap#sm| arg0@@35)) (FieldType PredicateType_heapType (MapType1Type RefType boolType)))
 :qid |funType:heap#sm|
 :pattern ( (|heap#sm| arg0@@35))
)))
(assert (forall ((this@@32 T@U) (this2@@4 T@U) ) (!  (=> (and (and (= (type this@@32) RefType) (= (type this2@@4) RefType)) (= (|heap#sm| this@@32) (|heap#sm| this2@@4))) (= this@@32 this2@@4))
 :qid |stdinbpl.2534:15|
 :skolemid |107|
 :pattern ( (|heap#sm| this@@32) (|heap#sm| this2@@4))
)))
(assert (forall ((Heap@@28 T@U) (Mask@@10 T@U) (this@@33 T@U) (last@@16 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@28) (MapType0Type RefType)) (= (type Mask@@10) (MapType1Type RefType realType))) (= (type this@@33) RefType)) (= (type last@@16) RefType)) (state Heap@@28 Mask@@10)) (= (|segLength'| Heap@@28 this@@33 last@@16) (|segLength#frame| (MapType0Select Heap@@28 null (heapseg this@@33 last@@16)) this@@33 last@@16)))
 :qid |stdinbpl.788:15|
 :skolemid |46|
 :pattern ( (state Heap@@28 Mask@@10) (|segLength'| Heap@@28 this@@33 last@@16))
 :pattern ( (state Heap@@28 Mask@@10) (|segLength#triggerStateless| this@@33 last@@16) (|heapseg#trigger| Heap@@28 (heapseg this@@33 last@@16)))
)))
(assert (forall ((Heap@@29 T@U) (Mask@@11 T@U) (this@@34 T@U) (last@@17 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@29) (MapType0Type RefType)) (= (type Mask@@11) (MapType1Type RefType realType))) (= (type this@@34) RefType)) (= (type last@@17) RefType)) (state Heap@@29 Mask@@11)) (= (|segSize'| Heap@@29 this@@34 last@@17) (|segSize#frame| (MapType0Select Heap@@29 null (heapseg this@@34 last@@17)) this@@34 last@@17)))
 :qid |stdinbpl.964:15|
 :skolemid |55|
 :pattern ( (state Heap@@29 Mask@@11) (|segSize'| Heap@@29 this@@34 last@@17))
 :pattern ( (state Heap@@29 Mask@@11) (|segSize#triggerStateless| this@@34 last@@17) (|heapseg#trigger| Heap@@29 (heapseg this@@34 last@@17)) (|heapseg#trigger| Heap@@29 (heapseg this@@34 last@@17)))
)))
(assert (forall ((arg0@@36 T@U) (arg1@@15 T@U) (arg2@@4 T@U) ) (! (= (type (|segParent#frame| arg0@@36 arg1@@15 arg2@@4)) RefType)
 :qid |funType:segParent#frame|
 :pattern ( (|segParent#frame| arg0@@36 arg1@@15 arg2@@4))
)))
(assert (forall ((Heap@@30 T@U) (Mask@@12 T@U) (this@@35 T@U) (last@@18 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@30) (MapType0Type RefType)) (= (type Mask@@12) (MapType1Type RefType realType))) (= (type this@@35) RefType)) (= (type last@@18) RefType)) (state Heap@@30 Mask@@12)) (= (|segParent'| Heap@@30 this@@35 last@@18) (|segParent#frame| (MapType0Select Heap@@30 null (heapseg this@@35 last@@18)) this@@35 last@@18)))
 :qid |stdinbpl.1343:15|
 :skolemid |69|
 :pattern ( (state Heap@@30 Mask@@12) (|segParent'| Heap@@30 this@@35 last@@18))
 :pattern ( (state Heap@@30 Mask@@12) (|segParent#triggerStateless| this@@35 last@@18) (|heapseg#trigger| Heap@@30 (heapseg this@@35 last@@18)))
)))
(assert (forall ((Heap@@31 T@U) (ExhaleHeap@@2 T@U) (Mask@@13 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@31) (MapType0Type RefType)) (= (type ExhaleHeap@@2) (MapType0Type RefType))) (= (type Mask@@13) (MapType1Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@31 ExhaleHeap@@2 Mask@@13)) (HasDirectPerm Mask@@13 o_1@@0 f_2)) (= (MapType0Select Heap@@31 o_1@@0 f_2) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@31 ExhaleHeap@@2 Mask@@13) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert (forall ((Heap@@32 T@U) (Mask@@14 T@U) (this@@36 T@U) (last@@19 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@32) (MapType0Type RefType)) (= (type Mask@@14) (MapType1Type RefType realType))) (= (type this@@36) RefType)) (= (type last@@19) RefType)) (and (state Heap@@32 Mask@@14) (< AssumeFunctionsAbove 5))) (= (presorted Heap@@32 this@@36 last@@19)  (and (=> (< 1 (segLength Heap@@32 this@@36 last@@19)) (and (<= (treeDegree Heap@@32 this@@36) (segDegree Heap@@32 (MapType0Select Heap@@32 this@@36 sibling) last@@19 0)) (|presorted'| Heap@@32 (MapType0Select Heap@@32 this@@36 sibling) last@@19))) (=> (and (< 2 (segLength Heap@@32 this@@36 last@@19)) (= (segDegree Heap@@32 this@@36 last@@19 0) (segDegree Heap@@32 this@@36 last@@19 1))) (< (segDegree Heap@@32 this@@36 last@@19 1) (segDegree Heap@@32 this@@36 last@@19 2))))))
 :qid |stdinbpl.1712:15|
 :skolemid |81|
 :pattern ( (state Heap@@32 Mask@@14) (presorted Heap@@32 this@@36 last@@19))
 :pattern ( (state Heap@@32 Mask@@14) (|presorted#triggerStateless| this@@36 last@@19) (|heapseg#trigger| Heap@@32 (heapseg this@@36 last@@19)) (|heapseg#trigger| Heap@@32 (heapseg this@@36 last@@19)) (|heapseg#trigger| Heap@@32 (heapseg this@@36 last@@19)))
)))
(assert  (and (= (type dummyHeap) (MapType0Type RefType)) (= (type ZeroMask) (MapType1Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.182:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert  (not (IsPredicateField key)))
(assert  (not (IsWandField key)))
(assert  (not (IsPredicateField degree)))
(assert  (not (IsWandField degree)))
(assert  (not (IsPredicateField parent)))
(assert  (not (IsWandField parent)))
(assert  (not (IsPredicateField sibling)))
(assert  (not (IsWandField sibling)))
(assert  (not (IsPredicateField child)))
(assert  (not (IsWandField child)))
(assert  (not (IsPredicateField Nodes)))
(assert  (not (IsWandField Nodes)))
(assert  (not (IsPredicateField size)))
(assert  (not (IsWandField size)))
(assert (forall ((Heap@@33 T@U) (ExhaleHeap@@3 T@U) (Mask@@15 T@U) ) (!  (=> (and (and (and (= (type Heap@@33) (MapType0Type RefType)) (= (type ExhaleHeap@@3) (MapType0Type RefType))) (= (type Mask@@15) (MapType1Type RefType realType))) (IdenticalOnKnownLocations Heap@@33 ExhaleHeap@@3 Mask@@15)) (succHeap Heap@@33 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@33 ExhaleHeap@@3 Mask@@15))
)))
(assert (forall ((Heap@@34 T@U) (Mask@@16 T@U) (this@@37 T@U) ) (!  (=> (and (and (and (= (type Heap@@34) (MapType0Type RefType)) (= (type Mask@@16) (MapType1Type RefType realType))) (= (type this@@37) RefType)) (and (state Heap@@34 Mask@@16) (< AssumeFunctionsAbove 1))) (= (treeSize Heap@@34 this@@37) (ite (= (U_2_int (MapType0Select Heap@@34 this@@37 degree)) 0) 1 (+ 1 (|segSize'| Heap@@34 (MapType0Select Heap@@34 this@@37 child) null)))))
 :qid |stdinbpl.500:15|
 :skolemid |35|
 :pattern ( (state Heap@@34 Mask@@16) (treeSize Heap@@34 this@@37))
 :pattern ( (state Heap@@34 Mask@@16) (|treeSize#triggerStateless| this@@37) (|tree#trigger| Heap@@34 (tree this@@37)))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType1Type RefType realType)) (= (type SummandMask1) (MapType1Type RefType realType))) (= (type SummandMask2) (MapType1Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType1Select ResultMask o_2 f_4)) (+ (U_2_real (MapType1Select SummandMask1 o_2 f_4)) (U_2_real (MapType1Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask2 o_2 f_4))
)))
(assert  (and (forall ((arg0@@37 Real) (arg1@@16 T@U) ) (! (= (type (ConditionalFrame arg0@@37 arg1@@16)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@37 arg1@@16))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.170:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((Mask@@17 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@17) (MapType1Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@17 o_2@@0 f_4@@0) (> (U_2_real (MapType1Select Mask@@17 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@17 o_2@@0 f_4@@0))
)))
(assert (forall ((Heap@@35 T@U) (Mask@@18 T@U) (this@@38 T@U) (last@@20 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@35) (MapType0Type RefType)) (= (type Mask@@18) (MapType1Type RefType realType))) (= (type this@@38) RefType)) (= (type last@@20) RefType)) (and (state Heap@@35 Mask@@18) (or (< AssumeFunctionsAbove 0) (|sorted#trigger| (MapType0Select Heap@@35 null (heapseg this@@38 last@@20)) this@@38 last@@20)))) (|sorted'| Heap@@35 this@@38 last@@20)) (presorted Heap@@35 this@@38 last@@20))
 :qid |stdinbpl.1488:15|
 :skolemid |76|
 :pattern ( (state Heap@@35 Mask@@18) (|sorted'| Heap@@35 this@@38 last@@20))
)))
(assert (forall ((Heap@@36 T@U) (this@@39 T@U) (last@@21 T@U) ) (!  (=> (and (and (= (type Heap@@36) (MapType0Type RefType)) (= (type this@@39) RefType)) (= (type last@@21) RefType)) (and (= (segLength Heap@@36 this@@39 last@@21) (|segLength'| Heap@@36 this@@39 last@@21)) (dummyFunction (int_2_U (|segLength#triggerStateless| this@@39 last@@21)))))
 :qid |stdinbpl.771:15|
 :skolemid |43|
 :pattern ( (segLength Heap@@36 this@@39 last@@21))
)))
(assert (forall ((Heap@@37 T@U) (this@@40 T@U) (last@@22 T@U) ) (!  (=> (and (and (= (type Heap@@37) (MapType0Type RefType)) (= (type this@@40) RefType)) (= (type last@@22) RefType)) (and (= (segSize Heap@@37 this@@40 last@@22) (|segSize'| Heap@@37 this@@40 last@@22)) (dummyFunction (int_2_U (|segSize#triggerStateless| this@@40 last@@22)))))
 :qid |stdinbpl.947:15|
 :skolemid |52|
 :pattern ( (segSize Heap@@37 this@@40 last@@22))
)))
(assert (forall ((arg0@@38 T@U) (arg1@@17 T@U) (arg2@@5 T@U) ) (! (= (type (segParent arg0@@38 arg1@@17 arg2@@5)) RefType)
 :qid |funType:segParent|
 :pattern ( (segParent arg0@@38 arg1@@17 arg2@@5))
)))
(assert (forall ((Heap@@38 T@U) (this@@41 T@U) (last@@23 T@U) ) (!  (=> (and (and (= (type Heap@@38) (MapType0Type RefType)) (= (type this@@41) RefType)) (= (type last@@23) RefType)) (and (= (segParent Heap@@38 this@@41 last@@23) (|segParent'| Heap@@38 this@@41 last@@23)) (dummyFunction (|segParent#triggerStateless| this@@41 last@@23))))
 :qid |stdinbpl.1326:15|
 :skolemid |66|
 :pattern ( (segParent Heap@@38 this@@41 last@@23))
)))
(assert (forall ((Heap@@39 T@U) (Mask@@19 T@U) (this@@42 T@U) (last@@24 T@U) (index@@1 Int) ) (!  (=> (and (and (and (and (and (= (type Heap@@39) (MapType0Type RefType)) (= (type Mask@@19) (MapType1Type RefType realType))) (= (type this@@42) RefType)) (= (type last@@24) RefType)) (and (state Heap@@39 Mask@@19) (or (< AssumeFunctionsAbove 7) (|segDegree#trigger| (MapType0Select Heap@@39 null (heapseg this@@42 last@@24)) this@@42 last@@24 index@@1)))) (and (<= 0 index@@1) (< index@@1 (segLength Heap@@39 this@@42 last@@24)))) (<= 0 (|segDegree'| Heap@@39 this@@42 last@@24 index@@1)))
 :qid |stdinbpl.1147:15|
 :skolemid |63|
 :pattern ( (state Heap@@39 Mask@@19) (|segDegree'| Heap@@39 this@@42 last@@24 index@@1))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType1Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType1Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((Heap@@40 T@U) (Mask@@20 T@U) (this@@43 T@U) (last@@25 T@U) (index@@2 Int) ) (!  (=> (and (and (and (and (= (type Heap@@40) (MapType0Type RefType)) (= (type Mask@@20) (MapType1Type RefType realType))) (= (type this@@43) RefType)) (= (type last@@25) RefType)) (state Heap@@40 Mask@@20)) (= (|segDegree'| Heap@@40 this@@43 last@@25 index@@2) (|segDegree#frame| (MapType0Select Heap@@40 null (heapseg this@@43 last@@25)) this@@43 last@@25 index@@2)))
 :qid |stdinbpl.1141:15|
 :skolemid |62|
 :pattern ( (state Heap@@40 Mask@@20) (|segDegree'| Heap@@40 this@@43 last@@25 index@@2))
 :pattern ( (state Heap@@40 Mask@@20) (|segDegree#triggerStateless| this@@43 last@@25 index@@2) (|heapseg#trigger| Heap@@40 (heapseg this@@43 last@@25)) (|heapseg#trigger| Heap@@40 (heapseg this@@43 last@@25)))
)))
(assert (forall ((Heap@@41 T@U) (this@@44 T@U) (last@@26 T@U) (index@@3 Int) ) (!  (=> (and (and (= (type Heap@@41) (MapType0Type RefType)) (= (type this@@44) RefType)) (= (type last@@26) RefType)) (and (= (segDegree Heap@@41 this@@44 last@@26 index@@3) (|segDegree'| Heap@@41 this@@44 last@@26 index@@3)) (dummyFunction (int_2_U (|segDegree#triggerStateless| this@@44 last@@26 index@@3)))))
 :qid |stdinbpl.1124:15|
 :skolemid |59|
 :pattern ( (segDegree Heap@@41 this@@44 last@@26 index@@3))
)))
(assert (forall ((this@@45 T@U) (last@@27 T@U) ) (!  (=> (and (= (type this@@45) RefType) (= (type last@@27) RefType)) (= (getPredWandId (heapseg this@@45 last@@27)) 1))
 :qid |stdinbpl.2406:15|
 :skolemid |99|
 :pattern ( (heapseg this@@45 last@@27))
)))
(assert (forall ((Heap@@42 T@U) (Mask@@21 T@U) (this@@46 T@U) (last@@28 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@42) (MapType0Type RefType)) (= (type Mask@@21) (MapType1Type RefType realType))) (= (type this@@46) RefType)) (= (type last@@28) RefType)) (and (state Heap@@42 Mask@@21) (or (< AssumeFunctionsAbove 1) (|segSize#trigger| (MapType0Select Heap@@42 null (heapseg this@@46 last@@28)) this@@46 last@@28)))) (= this@@46 last@@28)) (= (|segSize'| Heap@@42 this@@46 last@@28) 0))
 :qid |stdinbpl.970:15|
 :skolemid |56|
 :pattern ( (state Heap@@42 Mask@@21) (|segSize'| Heap@@42 this@@46 last@@28))
)))
(assert (forall ((Heap@@43 T@U) (ExhaleHeap@@4 T@U) (Mask@@22 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@43) (MapType0Type RefType)) (= (type ExhaleHeap@@4) (MapType0Type RefType))) (= (type Mask@@22) (MapType1Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@43 ExhaleHeap@@4 Mask@@22)) (and (HasDirectPerm Mask@@22 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType1Select (MapType0Select Heap@@43 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType0Select Heap@@43 o2 f_2@@0) (MapType0Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType0Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@43 ExhaleHeap@@4 Mask@@22) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@44 T@U) (ExhaleHeap@@5 T@U) (Mask@@23 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@44) (MapType0Type RefType)) (= (type ExhaleHeap@@5) (MapType0Type RefType))) (= (type Mask@@23) (MapType1Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@44 ExhaleHeap@@5 Mask@@23)) (and (HasDirectPerm Mask@@23 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType1Select (MapType0Select Heap@@44 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType0Select Heap@@44 o2@@0 f_2@@1) (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@44 ExhaleHeap@@5 Mask@@23) (IsWandField pm_f@@2))
)))
(assert (forall ((this@@47 T@U) ) (!  (=> (= (type this@@47) RefType) (= (getPredWandId (tree this@@47)) 0))
 :qid |stdinbpl.2213:15|
 :skolemid |93|
 :pattern ( (tree this@@47))
)))
(assert (forall ((this@@48 T@U) ) (!  (=> (= (type this@@48) RefType) (= (getPredWandId (heap this@@48)) 2))
 :qid |stdinbpl.2524:15|
 :skolemid |105|
 :pattern ( (heap this@@48))
)))
(assert (forall ((Mask@@24 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@24) (MapType1Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@24)) (and (>= (U_2_real (MapType1Select Mask@@24 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@24) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType1Select Mask@@24 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@24) (MapType1Select Mask@@24 o_2@@2 f_4@@2))
)))
(assert (forall ((Heap@@45 T@U) (Mask@@25 T@U) (this@@49 T@U) (last@@29 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@45) (MapType0Type RefType)) (= (type Mask@@25) (MapType1Type RefType realType))) (= (type this@@49) RefType)) (= (type last@@29) RefType)) (and (state Heap@@45 Mask@@25) (or (< AssumeFunctionsAbove 8) (|segLength#trigger| (MapType0Select Heap@@45 null (heapseg this@@49 last@@29)) this@@49 last@@29)))) (<= 0 (|segLength'| Heap@@45 this@@49 last@@29)))
 :qid |stdinbpl.794:15|
 :skolemid |47|
 :pattern ( (state Heap@@45 Mask@@25) (|segLength'| Heap@@45 this@@49 last@@29))
)))
(assert (forall ((Heap@@46 T@U) (Mask@@26 T@U) (this@@50 T@U) ) (!  (=> (and (and (and (= (type Heap@@46) (MapType0Type RefType)) (= (type Mask@@26) (MapType1Type RefType realType))) (= (type this@@50) RefType)) (state Heap@@46 Mask@@26)) (= (|treeKey'| Heap@@46 this@@50) (|treeKey#frame| (MapType0Select Heap@@46 null (tree this@@50)) this@@50)))
 :qid |stdinbpl.237:15|
 :skolemid |25|
 :pattern ( (state Heap@@46 Mask@@26) (|treeKey'| Heap@@46 this@@50))
)))
(assert (forall ((Heap@@47 T@U) (Mask@@27 T@U) (this@@51 T@U) ) (!  (=> (and (and (and (= (type Heap@@47) (MapType0Type RefType)) (= (type Mask@@27) (MapType1Type RefType realType))) (= (type this@@51) RefType)) (state Heap@@47 Mask@@27)) (= (|treeDegree'| Heap@@47 this@@51) (|treeDegree#frame| (MapType0Select Heap@@47 null (tree this@@51)) this@@51)))
 :qid |stdinbpl.366:15|
 :skolemid |30|
 :pattern ( (state Heap@@47 Mask@@27) (|treeDegree'| Heap@@47 this@@51))
)))
(assert (forall ((Heap@@48 T@U) (Mask@@28 T@U) (this@@52 T@U) ) (!  (=> (and (and (and (= (type Heap@@48) (MapType0Type RefType)) (= (type Mask@@28) (MapType1Type RefType realType))) (= (type this@@52) RefType)) (state Heap@@48 Mask@@28)) (= (|treeSize'| Heap@@48 this@@52) (|treeSize#frame| (MapType0Select Heap@@48 null (tree this@@52)) this@@52)))
 :qid |stdinbpl.507:15|
 :skolemid |36|
 :pattern ( (state Heap@@48 Mask@@28) (|treeSize'| Heap@@48 this@@52))
 :pattern ( (state Heap@@48 Mask@@28) (|treeSize#triggerStateless| this@@52) (|tree#trigger| Heap@@48 (tree this@@52)))
)))
(assert (forall ((arg0@@39 T@U) (arg1@@18 T@U) ) (! (= (type (|treeParent#frame| arg0@@39 arg1@@18)) RefType)
 :qid |funType:treeParent#frame|
 :pattern ( (|treeParent#frame| arg0@@39 arg1@@18))
)))
(assert (forall ((Heap@@49 T@U) (Mask@@29 T@U) (this@@53 T@U) ) (!  (=> (and (and (and (= (type Heap@@49) (MapType0Type RefType)) (= (type Mask@@29) (MapType1Type RefType realType))) (= (type this@@53) RefType)) (state Heap@@49 Mask@@29)) (= (|treeParent'| Heap@@49 this@@53) (|treeParent#frame| (MapType0Select Heap@@49 null (tree this@@53)) this@@53)))
 :qid |stdinbpl.659:15|
 :skolemid |41|
 :pattern ( (state Heap@@49 Mask@@29) (|treeParent'| Heap@@49 this@@53))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@50 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@50) (MapType0Type RefType))) (U_2_bool (MapType0Select Heap@@50 o $allocated))) (U_2_bool (MapType0Select Heap@@50 (MapType0Select Heap@@50 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType0Select Heap@@50 o f))
)))
(assert (forall ((this@@54 T@U) (last@@30 T@U) ) (!  (=> (and (= (type this@@54) RefType) (= (type last@@30) RefType)) (= (PredicateMaskField (heapseg this@@54 last@@30)) (|heapseg#sm| this@@54 last@@30)))
 :qid |stdinbpl.2398:15|
 :skolemid |97|
 :pattern ( (PredicateMaskField (heapseg this@@54 last@@30)))
)))
(assert (forall ((Heap@@51 T@U) (Mask@@30 T@U) (this@@55 T@U) (last@@31 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@51) (MapType0Type RefType)) (= (type Mask@@30) (MapType1Type RefType realType))) (= (type this@@55) RefType)) (= (type last@@31) RefType)) (and (state Heap@@51 Mask@@30) (< AssumeFunctionsAbove 0))) (= (sorted Heap@@51 this@@55 last@@31)  (=> (< 1 (segLength Heap@@51 this@@55 last@@31)) (and (< (treeDegree Heap@@51 this@@55) (segDegree Heap@@51 (MapType0Select Heap@@51 this@@55 sibling) last@@31 0)) (|sorted'| Heap@@51 (MapType0Select Heap@@51 this@@55 sibling) last@@31)))))
 :qid |stdinbpl.1475:15|
 :skolemid |74|
 :pattern ( (state Heap@@51 Mask@@30) (sorted Heap@@51 this@@55 last@@31))
 :pattern ( (state Heap@@51 Mask@@30) (|sorted#triggerStateless| this@@55 last@@31) (|heapseg#trigger| Heap@@51 (heapseg this@@55 last@@31)) (|heapseg#trigger| Heap@@51 (heapseg this@@55 last@@31)) (|heapseg#trigger| Heap@@51 (heapseg this@@55 last@@31)))
)))
(assert (forall ((this@@56 T@U) ) (!  (=> (= (type this@@56) RefType) (= (PredicateMaskField (tree this@@56)) (|tree#sm| this@@56)))
 :qid |stdinbpl.2205:15|
 :skolemid |91|
 :pattern ( (PredicateMaskField (tree this@@56)))
)))
(assert (forall ((this@@57 T@U) ) (!  (=> (= (type this@@57) RefType) (= (PredicateMaskField (heap this@@57)) (|heap#sm| this@@57)))
 :qid |stdinbpl.2516:15|
 :skolemid |103|
 :pattern ( (PredicateMaskField (heap this@@57)))
)))
(assert (forall ((Heap@@52 T@U) (o@@0 T@U) (f_3 T@U) (v T@U) ) (! (let ((B@@8 (type v)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@52) (MapType0Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@52 (MapType0Store Heap@@52 o@@0 f_3 v)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType0Store Heap@@52 o@@0 f_3 v))
)))
(assert (forall ((Heap@@53 T@U) (Mask@@31 T@U) (this@@58 T@U) ) (!  (=> (and (and (and (= (type Heap@@53) (MapType0Type RefType)) (= (type Mask@@31) (MapType1Type RefType realType))) (= (type this@@58) RefType)) (and (state Heap@@53 Mask@@31) (< AssumeFunctionsAbove 3))) (= (treeKey Heap@@53 this@@58) (U_2_int (MapType0Select Heap@@53 this@@58 key))))
 :qid |stdinbpl.230:15|
 :skolemid |24|
 :pattern ( (state Heap@@53 Mask@@31) (treeKey Heap@@53 this@@58))
 :pattern ( (state Heap@@53 Mask@@31) (|treeKey#triggerStateless| this@@58) (|tree#trigger| Heap@@53 (tree this@@58)))
)))
(assert (forall ((Heap@@54 T@U) (Mask@@32 T@U) (this@@59 T@U) ) (!  (=> (and (and (and (= (type Heap@@54) (MapType0Type RefType)) (= (type Mask@@32) (MapType1Type RefType realType))) (= (type this@@59) RefType)) (and (state Heap@@54 Mask@@32) (< AssumeFunctionsAbove 6))) (= (treeParent Heap@@54 this@@59) (MapType0Select Heap@@54 this@@59 parent)))
 :qid |stdinbpl.652:15|
 :skolemid |40|
 :pattern ( (state Heap@@54 Mask@@32) (treeParent Heap@@54 this@@59))
 :pattern ( (state Heap@@54 Mask@@32) (|treeParent#triggerStateless| this@@59) (|tree#trigger| Heap@@54 (tree this@@59)))
)))
(assert (forall ((Heap@@55 T@U) (Mask@@33 T@U) (this@@60 T@U) ) (!  (=> (and (and (and (= (type Heap@@55) (MapType0Type RefType)) (= (type Mask@@33) (MapType1Type RefType realType))) (= (type this@@60) RefType)) (and (state Heap@@55 Mask@@33) (< AssumeFunctionsAbove 9))) (= (treeDegree Heap@@55 this@@60) (U_2_int (MapType0Select Heap@@55 this@@60 degree))))
 :qid |stdinbpl.359:15|
 :skolemid |29|
 :pattern ( (state Heap@@55 Mask@@33) (treeDegree Heap@@55 this@@60))
 :pattern ( (state Heap@@55 Mask@@33) (|treeDegree#triggerStateless| this@@60) (|tree#trigger| Heap@@55 (tree this@@60)))
)))
(assert (= (type ZeroPMask) (MapType1Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType1Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType1Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((Heap@@56 T@U) (Mask@@34 T@U) (this@@61 T@U) (last@@32 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@56) (MapType0Type RefType)) (= (type Mask@@34) (MapType1Type RefType realType))) (= (type this@@61) RefType)) (= (type last@@32) RefType)) (and (state Heap@@56 Mask@@34) (< AssumeFunctionsAbove 2))) (= (validChildren Heap@@56 this@@61 last@@32)  (=> (< 1 (segLength Heap@@56 this@@61 last@@32)) (and (= (treeDegree Heap@@56 this@@61) (+ (segDegree Heap@@56 (MapType0Select Heap@@56 this@@61 sibling) last@@32 0) 1)) (|validChildren'| Heap@@56 (MapType0Select Heap@@56 this@@61 sibling) last@@32)))))
 :qid |stdinbpl.2013:15|
 :skolemid |87|
 :pattern ( (state Heap@@56 Mask@@34) (validChildren Heap@@56 this@@61 last@@32))
 :pattern ( (state Heap@@56 Mask@@34) (|validChildren#triggerStateless| this@@61 last@@32) (|heapseg#trigger| Heap@@56 (heapseg this@@61 last@@32)) (|heapseg#trigger| Heap@@56 (heapseg this@@61 last@@32)) (|heapseg#trigger| Heap@@56 (heapseg this@@61 last@@32)))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.177:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(assert (forall ((Heap@@57 T@U) (Mask@@35 T@U) (this@@62 T@U) (last@@33 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@57) (MapType0Type RefType)) (= (type Mask@@35) (MapType1Type RefType realType))) (= (type this@@62) RefType)) (= (type last@@33) RefType)) (and (state Heap@@57 Mask@@35) (< AssumeFunctionsAbove 4))) (not (= this@@62 last@@33))) (= (segParent Heap@@57 this@@62 last@@33) (treeParent Heap@@57 this@@62)))
 :qid |stdinbpl.1336:15|
 :skolemid |68|
 :pattern ( (state Heap@@57 Mask@@35) (segParent Heap@@57 this@@62 last@@33))
 :pattern ( (state Heap@@57 Mask@@35) (|segParent#triggerStateless| this@@62 last@@33) (|heapseg#trigger| Heap@@57 (heapseg this@@62 last@@33)))
)))
(assert (forall ((Heap@@58 T@U) (this@@63 T@U) (last@@34 T@U) ) (!  (=> (and (and (= (type Heap@@58) (MapType0Type RefType)) (= (type this@@63) RefType)) (= (type last@@34) RefType)) (and (= (sorted Heap@@58 this@@63 last@@34) (|sorted'| Heap@@58 this@@63 last@@34)) (dummyFunction (bool_2_U (|sorted#triggerStateless| this@@63 last@@34)))))
 :qid |stdinbpl.1465:15|
 :skolemid |72|
 :pattern ( (sorted Heap@@58 this@@63 last@@34))
)))
(assert (forall ((Heap@@59 T@U) (this@@64 T@U) (last@@35 T@U) ) (!  (=> (and (and (= (type Heap@@59) (MapType0Type RefType)) (= (type this@@64) RefType)) (= (type last@@35) RefType)) (and (= (presorted Heap@@59 this@@64 last@@35) (|presorted'| Heap@@59 this@@64 last@@35)) (dummyFunction (bool_2_U (|presorted#triggerStateless| this@@64 last@@35)))))
 :qid |stdinbpl.1702:15|
 :skolemid |79|
 :pattern ( (presorted Heap@@59 this@@64 last@@35))
)))
(assert (forall ((Heap@@60 T@U) (this@@65 T@U) (last@@36 T@U) ) (!  (=> (and (and (= (type Heap@@60) (MapType0Type RefType)) (= (type this@@65) RefType)) (= (type last@@36) RefType)) (and (= (validChildren Heap@@60 this@@65 last@@36) (|validChildren'| Heap@@60 this@@65 last@@36)) (dummyFunction (bool_2_U (|validChildren#triggerStateless| this@@65 last@@36)))))
 :qid |stdinbpl.2003:15|
 :skolemid |85|
 :pattern ( (validChildren Heap@@60 this@@65 last@@36))
)))
; Valid

(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun Mask@318 () T@U)
(declare-fun Mask@2 () T@U)
(declare-fun binHeap () T@U)
(declare-fun Mask@319 () T@U)
(declare-fun Heap@@61 () T@U)
(declare-fun this@@66 () T@U)
(declare-fun PostMask@2 () T@U)
(declare-fun PostMask@1 () T@U)
(declare-fun PostHeap@0 () T@U)
(declare-fun PostMask@0 () T@U)
(declare-fun Mask@263 () T@U)
(declare-fun temp1@1 () T@U)
(declare-fun Mask@305 () T@U)
(declare-fun ExhaleHeap@0 () T@U)
(declare-fun Mask@307 () T@U)
(declare-fun Mask@302 () T@U)
(declare-fun Mask@303 () T@U)
(declare-fun Mask@310 () T@U)
(declare-fun Mask@311 () T@U)
(declare-fun temp2@0 () T@U)
(declare-fun Mask@292 () T@U)
(declare-fun Mask@294 () T@U)
(declare-fun Mask@289 () T@U)
(declare-fun Mask@290 () T@U)
(declare-fun Mask@297 () T@U)
(declare-fun Mask@298 () T@U)
(declare-fun Mask@280 () T@U)
(declare-fun Mask@281 () T@U)
(declare-fun Mask@283 () T@U)
(declare-fun Mask@284 () T@U)
(declare-fun Mask@276 () T@U)
(declare-fun Mask@277 () T@U)
(declare-fun Mask@271 () T@U)
(declare-fun Mask@272 () T@U)
(declare-fun Mask@269 () T@U)
(declare-fun Mask@270 () T@U)
(declare-fun Mask@267 () T@U)
(declare-fun Mask@268 () T@U)
(declare-fun Mask@266 () T@U)
(declare-fun Mask@265 () T@U)
(declare-fun Mask@264 () T@U)
(declare-fun Mask@261 () T@U)
(declare-fun Mask@262 () T@U)
(declare-fun Mask@12 () T@U)
(declare-fun Mask@11 () T@U)
(declare-fun UnfoldingMask@14 () T@U)
(declare-fun Mask@241 () T@U)
(declare-fun Mask@156 () T@U)
(declare-fun Mask@229 () T@U)
(declare-fun Heap@100 () T@U)
(declare-fun temp2@6 () T@U)
(declare-fun Heap@214 () T@U)
(declare-fun temp1@8 () T@U)
(declare-fun Mask@258 () T@U)
(declare-fun Mask@257 () T@U)
(declare-fun Mask@256 () T@U)
(declare-fun Mask@255 () T@U)
(declare-fun Mask@254 () T@U)
(declare-fun Heap@213 () T@U)
(declare-fun Mask@253 () T@U)
(declare-fun temp2@1 () T@U)
(declare-fun Heap@209 () T@U)
(declare-fun newPMask@55 () T@U)
(declare-fun Heap@210 () T@U)
(declare-fun Heap@211 () T@U)
(declare-fun newPMask@56 () T@U)
(declare-fun Heap@212 () T@U)
(declare-fun ExhaleHeap@64 () T@U)
(declare-fun Heap@207 () T@U)
(declare-fun Heap@208 () T@U)
(declare-fun freshVersion@18 () T@U)
(declare-fun Mask@252 () T@U)
(declare-fun FrameFragment (T@U) T@U)
(declare-fun CombineFrames (T@U T@U) T@U)
(declare-fun Mask@251 () T@U)
(declare-fun Mask@250 () T@U)
(declare-fun Mask@249 () T@U)
(declare-fun Mask@248 () T@U)
(declare-fun arg_a@0 () T@U)
(declare-fun Heap@206 () T@U)
(declare-fun Mask@246 () T@U)
(declare-fun Mask@247 () T@U)
(declare-fun Mask@245 () T@U)
(declare-fun Mask@244 () T@U)
(declare-fun Mask@243 () T@U)
(declare-fun Mask@242 () T@U)
(declare-fun Heap@202 () T@U)
(declare-fun newPMask@53 () T@U)
(declare-fun Heap@203 () T@U)
(declare-fun Heap@204 () T@U)
(declare-fun newPMask@54 () T@U)
(declare-fun Heap@205 () T@U)
(declare-fun Heap@198 () T@U)
(declare-fun newPMask@51 () T@U)
(declare-fun Heap@199 () T@U)
(declare-fun Heap@200 () T@U)
(declare-fun newPMask@52 () T@U)
(declare-fun Heap@201 () T@U)
(declare-fun Heap@194 () T@U)
(declare-fun newPMask@49 () T@U)
(declare-fun Heap@195 () T@U)
(declare-fun Heap@196 () T@U)
(declare-fun newPMask@50 () T@U)
(declare-fun Heap@197 () T@U)
(declare-fun UnfoldingMask@13 () T@U)
(declare-fun UnfoldingMask@11 () T@U)
(declare-fun UnfoldingMask@10 () T@U)
(declare-fun UnfoldingMask@12 () T@U)
(declare-fun Heap@190 () T@U)
(declare-fun newPMask@47 () T@U)
(declare-fun Heap@191 () T@U)
(declare-fun Heap@192 () T@U)
(declare-fun newPMask@48 () T@U)
(declare-fun Heap@193 () T@U)
(declare-fun Heap@187 () T@U)
(declare-fun Heap@188 () T@U)
(declare-fun Heap@189 () T@U)
(declare-fun freshVersion@17 () T@U)
(declare-fun Mask@240 () T@U)
(declare-fun Mask@239 () T@U)
(declare-fun Mask@238 () T@U)
(declare-fun Mask@237 () T@U)
(declare-fun Mask@236 () T@U)
(declare-fun Heap@183 () T@U)
(declare-fun newPMask@45 () T@U)
(declare-fun Heap@184 () T@U)
(declare-fun Heap@185 () T@U)
(declare-fun newPMask@46 () T@U)
(declare-fun Heap@186 () T@U)
(declare-fun Heap@102 () T@U)
(declare-fun Heap@181 () T@U)
(declare-fun Heap@182 () T@U)
(declare-fun freshVersion@16 () T@U)
(declare-fun Mask@235 () T@U)
(declare-fun Mask@234 () T@U)
(declare-fun Mask@233 () T@U)
(declare-fun Mask@232 () T@U)
(declare-fun Heap@101 () T@U)
(declare-fun Heap@180 () T@U)
(declare-fun Mask@227 () T@U)
(declare-fun temp1@7 () T@U)
(declare-fun temp2@5 () T@U)
(declare-fun Heap@179 () T@U)
(declare-fun Mask@226 () T@U)
(declare-fun temp2@4 () T@U)
(declare-fun temp1@6 () T@U)
(declare-fun Heap@178 () T@U)
(declare-fun Mask@225 () T@U)
(declare-fun temp2@3 () T@U)
(declare-fun Heap@174 () T@U)
(declare-fun newPMask@43 () T@U)
(declare-fun Heap@175 () T@U)
(declare-fun Heap@176 () T@U)
(declare-fun newPMask@44 () T@U)
(declare-fun Heap@177 () T@U)
(declare-fun ExhaleHeap@59 () T@U)
(declare-fun Heap@172 () T@U)
(declare-fun Heap@173 () T@U)
(declare-fun freshVersion@15 () T@U)
(declare-fun Mask@224 () T@U)
(declare-fun Mask@223 () T@U)
(declare-fun Mask@222 () T@U)
(declare-fun Mask@221 () T@U)
(declare-fun Mask@220 () T@U)
(declare-fun arg_a_1@0 () T@U)
(declare-fun Heap@171 () T@U)
(declare-fun Mask@218 () T@U)
(declare-fun Mask@219 () T@U)
(declare-fun Mask@217 () T@U)
(declare-fun Mask@216 () T@U)
(declare-fun Mask@215 () T@U)
(declare-fun Mask@214 () T@U)
(declare-fun Mask@213 () T@U)
(declare-fun Heap@167 () T@U)
(declare-fun newPMask@41 () T@U)
(declare-fun Heap@168 () T@U)
(declare-fun Heap@169 () T@U)
(declare-fun newPMask@42 () T@U)
(declare-fun Heap@170 () T@U)
(declare-fun Heap@164 () T@U)
(declare-fun Heap@165 () T@U)
(declare-fun Heap@166 () T@U)
(declare-fun freshVersion@14 () T@U)
(declare-fun Mask@212 () T@U)
(declare-fun Mask@211 () T@U)
(declare-fun Mask@210 () T@U)
(declare-fun Mask@209 () T@U)
(declare-fun Mask@208 () T@U)
(declare-fun Heap@160 () T@U)
(declare-fun newPMask@39 () T@U)
(declare-fun Heap@161 () T@U)
(declare-fun Heap@162 () T@U)
(declare-fun newPMask@40 () T@U)
(declare-fun Heap@163 () T@U)
(declare-fun Heap@127 () T@U)
(declare-fun Heap@158 () T@U)
(declare-fun Heap@159 () T@U)
(declare-fun freshVersion@13 () T@U)
(declare-fun Mask@207 () T@U)
(declare-fun Mask@206 () T@U)
(declare-fun Mask@205 () T@U)
(declare-fun Mask@204 () T@U)
(declare-fun Heap@126 () T@U)
(declare-fun Heap@157 () T@U)
(declare-fun Mask@203 () T@U)
(declare-fun tmp@0 () T@U)
(declare-fun Heap@153 () T@U)
(declare-fun newPMask@37 () T@U)
(declare-fun Heap@154 () T@U)
(declare-fun Heap@155 () T@U)
(declare-fun newPMask@38 () T@U)
(declare-fun Heap@156 () T@U)
(declare-fun ExhaleHeap@58 () T@U)
(declare-fun Heap@151 () T@U)
(declare-fun Heap@152 () T@U)
(declare-fun freshVersion@12 () T@U)
(declare-fun Mask@202 () T@U)
(declare-fun Mask@201 () T@U)
(declare-fun Mask@200 () T@U)
(declare-fun Mask@199 () T@U)
(declare-fun Mask@198 () T@U)
(declare-fun arg_a_2@0 () T@U)
(declare-fun Heap@150 () T@U)
(declare-fun Mask@196 () T@U)
(declare-fun Mask@197 () T@U)
(declare-fun Mask@195 () T@U)
(declare-fun Mask@194 () T@U)
(declare-fun Mask@193 () T@U)
(declare-fun Mask@192 () T@U)
(declare-fun Mask@191 () T@U)
(declare-fun Mask@190 () T@U)
(declare-fun Mask@188 () T@U)
(declare-fun Mask@187 () T@U)
(declare-fun Mask@189 () T@U)
(declare-fun Heap@148 () T@U)
(declare-fun Heap@149 () T@U)
(declare-fun newVersion@5 () T@U)
(declare-fun Mask@186 () T@U)
(declare-fun Heap@144 () T@U)
(declare-fun newPMask@35 () T@U)
(declare-fun Heap@145 () T@U)
(declare-fun Heap@146 () T@U)
(declare-fun newPMask@36 () T@U)
(declare-fun Heap@147 () T@U)
(declare-fun Heap@141 () T@U)
(declare-fun Heap@142 () T@U)
(declare-fun Heap@143 () T@U)
(declare-fun freshVersion@11 () T@U)
(declare-fun Mask@185 () T@U)
(declare-fun Mask@184 () T@U)
(declare-fun Mask@183 () T@U)
(declare-fun Mask@182 () T@U)
(declare-fun Mask@181 () T@U)
(declare-fun Heap@137 () T@U)
(declare-fun newPMask@33 () T@U)
(declare-fun Heap@138 () T@U)
(declare-fun Heap@139 () T@U)
(declare-fun newPMask@34 () T@U)
(declare-fun Heap@140 () T@U)
(declare-fun Heap@134 () T@U)
(declare-fun Heap@135 () T@U)
(declare-fun Heap@136 () T@U)
(declare-fun freshVersion@10 () T@U)
(declare-fun Mask@180 () T@U)
(declare-fun Mask@179 () T@U)
(declare-fun Mask@178 () T@U)
(declare-fun Mask@177 () T@U)
(declare-fun Mask@176 () T@U)
(declare-fun Heap@130 () T@U)
(declare-fun newPMask@31 () T@U)
(declare-fun Heap@131 () T@U)
(declare-fun Heap@132 () T@U)
(declare-fun newPMask@32 () T@U)
(declare-fun Heap@133 () T@U)
(declare-fun Heap@128 () T@U)
(declare-fun Heap@129 () T@U)
(declare-fun freshVersion@9 () T@U)
(declare-fun Mask@175 () T@U)
(declare-fun Mask@174 () T@U)
(declare-fun Mask@173 () T@U)
(declare-fun Mask@172 () T@U)
(declare-fun Heap@125 () T@U)
(declare-fun Mask@171 () T@U)
(declare-fun temp2@2 () T@U)
(declare-fun Heap@121 () T@U)
(declare-fun newPMask@29 () T@U)
(declare-fun Heap@122 () T@U)
(declare-fun Heap@123 () T@U)
(declare-fun newPMask@30 () T@U)
(declare-fun Heap@124 () T@U)
(declare-fun Heap@118 () T@U)
(declare-fun Heap@119 () T@U)
(declare-fun Heap@120 () T@U)
(declare-fun freshVersion@8 () T@U)
(declare-fun Mask@170 () T@U)
(declare-fun Mask@169 () T@U)
(declare-fun Mask@168 () T@U)
(declare-fun Mask@167 () T@U)
(declare-fun Mask@166 () T@U)
(declare-fun Heap@117 () T@U)
(declare-fun Heap@113 () T@U)
(declare-fun newPMask@27 () T@U)
(declare-fun Heap@114 () T@U)
(declare-fun Heap@115 () T@U)
(declare-fun newPMask@28 () T@U)
(declare-fun Heap@116 () T@U)
(declare-fun Heap@110 () T@U)
(declare-fun Heap@111 () T@U)
(declare-fun Heap@112 () T@U)
(declare-fun freshVersion@7 () T@U)
(declare-fun Mask@165 () T@U)
(declare-fun Mask@164 () T@U)
(declare-fun Mask@163 () T@U)
(declare-fun Mask@162 () T@U)
(declare-fun Mask@161 () T@U)
(declare-fun Heap@106 () T@U)
(declare-fun newPMask@25 () T@U)
(declare-fun Heap@107 () T@U)
(declare-fun Heap@108 () T@U)
(declare-fun newPMask@26 () T@U)
(declare-fun Heap@109 () T@U)
(declare-fun Heap@103 () T@U)
(declare-fun Heap@104 () T@U)
(declare-fun Heap@105 () T@U)
(declare-fun freshVersion@6 () T@U)
(declare-fun Mask@160 () T@U)
(declare-fun Mask@159 () T@U)
(declare-fun Mask@158 () T@U)
(declare-fun Mask@157 () T@U)
(declare-fun Mask@155 () T@U)
(declare-fun Mask@153 () T@U)
(declare-fun Mask@152 () T@U)
(declare-fun Mask@154 () T@U)
(declare-fun Heap@98 () T@U)
(declare-fun Heap@99 () T@U)
(declare-fun newVersion@4 () T@U)
(declare-fun Mask@151 () T@U)
(declare-fun Mask@150 () T@U)
(declare-fun Mask@148 () T@U)
(declare-fun Mask@147 () T@U)
(declare-fun Mask@149 () T@U)
(declare-fun Heap@97 () T@U)
(declare-fun newVersion@3 () T@U)
(declare-fun Mask@16 () T@U)
(declare-fun tmp () T@U)
(declare-fun Mask@13 () T@U)
(declare-fun Mask@14 () T@U)
(declare-fun Mask@15 () T@U)
(declare-fun Mask@134 () T@U)
(declare-fun Mask@97 () T@U)
(declare-fun ExhaleHeap@1 () T@U)
(declare-fun temp1@3 () T@U)
(declare-fun Mask@136 () T@U)
(declare-fun Mask@131 () T@U)
(declare-fun Mask@132 () T@U)
(declare-fun Mask@128 () T@U)
(declare-fun Mask@129 () T@U)
(declare-fun Mask@125 () T@U)
(declare-fun Mask@126 () T@U)
(declare-fun Mask@139 () T@U)
(declare-fun Mask@140 () T@U)
(declare-fun Mask@116 () T@U)
(declare-fun Mask@114 () T@U)
(declare-fun Mask@98 () T@U)
(declare-fun Mask@111 () T@U)
(declare-fun Mask@112 () T@U)
(declare-fun Mask@121 () T@U)
(declare-fun Mask@122 () T@U)
(declare-fun Mask@106 () T@U)
(declare-fun Mask@107 () T@U)
(declare-fun Mask@104 () T@U)
(declare-fun Mask@105 () T@U)
(declare-fun Mask@102 () T@U)
(declare-fun Mask@103 () T@U)
(declare-fun Mask@100 () T@U)
(declare-fun Mask@101 () T@U)
(declare-fun Mask@95 () T@U)
(declare-fun Mask@96 () T@U)
(declare-fun Mask@30 () T@U)
(declare-fun Mask@29 () T@U)
(declare-fun Heap@96 () T@U)
(declare-fun temp1@5 () T@U)
(declare-fun Mask@94 () T@U)
(declare-fun Mask@93 () T@U)
(declare-fun Mask@92 () T@U)
(declare-fun Mask@91 () T@U)
(declare-fun Mask@90 () T@U)
(declare-fun Heap@92 () T@U)
(declare-fun newPMask@23 () T@U)
(declare-fun Heap@93 () T@U)
(declare-fun Heap@94 () T@U)
(declare-fun newPMask@24 () T@U)
(declare-fun Heap@95 () T@U)
(declare-fun ExhaleHeap@7 () T@U)
(declare-fun Heap@90 () T@U)
(declare-fun Heap@91 () T@U)
(declare-fun freshVersion@5 () T@U)
(declare-fun Mask@89 () T@U)
(declare-fun Mask@88 () T@U)
(declare-fun Mask@87 () T@U)
(declare-fun Mask@86 () T@U)
(declare-fun Mask@85 () T@U)
(declare-fun arg_a_3@0 () T@U)
(declare-fun Heap@89 () T@U)
(declare-fun Mask@83 () T@U)
(declare-fun Mask@84 () T@U)
(declare-fun Mask@82 () T@U)
(declare-fun Mask@81 () T@U)
(declare-fun Mask@80 () T@U)
(declare-fun Mask@79 () T@U)
(declare-fun Mask@78 () T@U)
(declare-fun Mask@77 () T@U)
(declare-fun Mask@75 () T@U)
(declare-fun Mask@74 () T@U)
(declare-fun Mask@76 () T@U)
(declare-fun Heap@87 () T@U)
(declare-fun Heap@88 () T@U)
(declare-fun newVersion@2 () T@U)
(declare-fun Mask@73 () T@U)
(declare-fun Heap@83 () T@U)
(declare-fun newPMask@21 () T@U)
(declare-fun Heap@84 () T@U)
(declare-fun Heap@85 () T@U)
(declare-fun newPMask@22 () T@U)
(declare-fun Heap@86 () T@U)
(declare-fun Heap@80 () T@U)
(declare-fun Heap@81 () T@U)
(declare-fun Heap@82 () T@U)
(declare-fun freshVersion@4 () T@U)
(declare-fun Mask@72 () T@U)
(declare-fun Mask@71 () T@U)
(declare-fun Mask@70 () T@U)
(declare-fun Mask@69 () T@U)
(declare-fun Mask@68 () T@U)
(declare-fun Heap@76 () T@U)
(declare-fun newPMask@19 () T@U)
(declare-fun Heap@77 () T@U)
(declare-fun Heap@78 () T@U)
(declare-fun newPMask@20 () T@U)
(declare-fun Heap@79 () T@U)
(declare-fun Heap@73 () T@U)
(declare-fun Heap@74 () T@U)
(declare-fun Heap@75 () T@U)
(declare-fun freshVersion@3 () T@U)
(declare-fun Mask@67 () T@U)
(declare-fun Mask@66 () T@U)
(declare-fun Mask@65 () T@U)
(declare-fun Mask@64 () T@U)
(declare-fun Mask@63 () T@U)
(declare-fun Heap@63 () T@U)
(declare-fun Heap@64 () T@U)
(declare-fun Heap@65 () T@U)
(declare-fun Heap@66 () T@U)
(declare-fun Heap@67 () T@U)
(declare-fun newPMask@17 () T@U)
(declare-fun Heap@68 () T@U)
(declare-fun Heap@69 () T@U)
(declare-fun Heap@70 () T@U)
(declare-fun Heap@71 () T@U)
(declare-fun Heap@72 () T@U)
(declare-fun newPMask@18 () T@U)
(declare-fun Heap@59 () T@U)
(declare-fun newPMask@15 () T@U)
(declare-fun Heap@60 () T@U)
(declare-fun Heap@61 () T@U)
(declare-fun newPMask@16 () T@U)
(declare-fun Heap@62 () T@U)
(declare-fun Heap@49 () T@U)
(declare-fun Heap@50 () T@U)
(declare-fun Heap@51 () T@U)
(declare-fun Heap@52 () T@U)
(declare-fun Heap@53 () T@U)
(declare-fun newPMask@13 () T@U)
(declare-fun Heap@54 () T@U)
(declare-fun Heap@55 () T@U)
(declare-fun Heap@56 () T@U)
(declare-fun Heap@57 () T@U)
(declare-fun Heap@58 () T@U)
(declare-fun newPMask@14 () T@U)
(declare-fun Heap@45 () T@U)
(declare-fun newPMask@11 () T@U)
(declare-fun Heap@46 () T@U)
(declare-fun Heap@47 () T@U)
(declare-fun newPMask@12 () T@U)
(declare-fun Heap@48 () T@U)
(declare-fun Heap@30 () T@U)
(declare-fun Unfolding2Mask@5 () T@U)
(declare-fun Heap@31 () T@U)
(declare-fun Heap@32 () T@U)
(declare-fun Heap@33 () T@U)
(declare-fun Heap@34 () T@U)
(declare-fun newPMask@8 () T@U)
(declare-fun Heap@35 () T@U)
(declare-fun Heap@36 () T@U)
(declare-fun Heap@37 () T@U)
(declare-fun Heap@38 () T@U)
(declare-fun Heap@39 () T@U)
(declare-fun newPMask@9 () T@U)
(declare-fun Heap@40 () T@U)
(declare-fun Heap@41 () T@U)
(declare-fun Heap@42 () T@U)
(declare-fun Heap@43 () T@U)
(declare-fun Heap@44 () T@U)
(declare-fun newPMask@10 () T@U)
(declare-fun Unfolding2Mask@0 () T@U)
(declare-fun Unfolding1Mask@5 () T@U)
(declare-fun Unfolding2Mask@1 () T@U)
(declare-fun Unfolding2Mask@2 () T@U)
(declare-fun Unfolding2Mask@3 () T@U)
(declare-fun Unfolding2Mask@4 () T@U)
(declare-fun Unfolding1Mask@0 () T@U)
(declare-fun UnfoldingMask@9 () T@U)
(declare-fun Unfolding1Mask@1 () T@U)
(declare-fun Unfolding1Mask@2 () T@U)
(declare-fun Unfolding1Mask@3 () T@U)
(declare-fun Unfolding1Mask@4 () T@U)
(declare-fun UnfoldingMask@8 () T@U)
(declare-fun UnfoldingMask@6 () T@U)
(declare-fun UnfoldingMask@5 () T@U)
(declare-fun UnfoldingMask@7 () T@U)
(declare-fun Mask@62 () T@U)
(declare-fun Mask@60 () T@U)
(declare-fun Mask@59 () T@U)
(declare-fun Mask@61 () T@U)
(declare-fun Heap@28 () T@U)
(declare-fun Heap@29 () T@U)
(declare-fun newVersion@1 () T@U)
(declare-fun Mask@34 () T@U)
(declare-fun t_1 () T@U)
(declare-fun newPMask@6 () T@U)
(declare-fun Heap@25 () T@U)
(declare-fun Heap@26 () T@U)
(declare-fun newPMask@7 () T@U)
(declare-fun Heap@27 () T@U)
(declare-fun UnfoldingMask@4 () T@U)
(declare-fun UnfoldingMask@3 () T@U)
(declare-fun UnfoldingMask@1 () T@U)
(declare-fun UnfoldingMask@0 () T@U)
(declare-fun UnfoldingMask@2 () T@U)
(declare-fun Mask@31 () T@U)
(declare-fun Mask@32 () T@U)
(declare-fun Mask@33 () T@U)
(declare-fun ExhaleWellDef0Mask@0 () T@U)
(declare-fun Mask@43 () T@U)
(declare-fun Heap@15 () T@U)
(declare-fun ExhaleWellDef0Mask@1 () T@U)
(declare-fun Mask@58 () T@U)
(declare-fun Mask@57 () T@U)
(declare-fun ExhaleHeap@2 () T@U)
(declare-fun Mask@56 () T@U)
(declare-fun temp1@4 () T@U)
(declare-fun arg_a_4@0 () T@U)
(declare-fun Heap@24 () T@U)
(declare-fun Mask@54 () T@U)
(declare-fun Mask@55 () T@U)
(declare-fun Mask@53 () T@U)
(declare-fun Mask@52 () T@U)
(declare-fun Mask@51 () T@U)
(declare-fun Mask@50 () T@U)
(declare-fun Mask@49 () T@U)
(declare-fun Heap@23 () T@U)
(declare-fun Mask@48 () T@U)
(declare-fun Heap@19 () T@U)
(declare-fun newPMask@4 () T@U)
(declare-fun Heap@20 () T@U)
(declare-fun Heap@21 () T@U)
(declare-fun newPMask@5 () T@U)
(declare-fun Heap@22 () T@U)
(declare-fun Heap@16 () T@U)
(declare-fun Heap@17 () T@U)
(declare-fun Heap@18 () T@U)
(declare-fun freshVersion@2 () T@U)
(declare-fun Mask@47 () T@U)
(declare-fun Mask@46 () T@U)
(declare-fun Mask@45 () T@U)
(declare-fun Mask@44 () T@U)
(declare-fun Mask@42 () T@U)
(declare-fun Mask@40 () T@U)
(declare-fun Mask@39 () T@U)
(declare-fun Mask@41 () T@U)
(declare-fun Heap@14 () T@U)
(declare-fun newVersion@0 () T@U)
(declare-fun Mask@38 () T@U)
(declare-fun Mask@35 () T@U)
(declare-fun Mask@36 () T@U)
(declare-fun Mask@37 () T@U)
(declare-fun Heap@13 () T@U)
(declare-fun temp1@2 () T@U)
(declare-fun Mask@28 () T@U)
(declare-fun Mask@27 () T@U)
(declare-fun Mask@26 () T@U)
(declare-fun Mask@25 () T@U)
(declare-fun Heap@9 () T@U)
(declare-fun newPMask@2 () T@U)
(declare-fun Heap@10 () T@U)
(declare-fun Heap@11 () T@U)
(declare-fun newPMask@3 () T@U)
(declare-fun Heap@12 () T@U)
(declare-fun Heap@7 () T@U)
(declare-fun Heap@8 () T@U)
(declare-fun freshVersion@1 () T@U)
(declare-fun Mask@24 () T@U)
(declare-fun Mask@23 () T@U)
(declare-fun Mask@22 () T@U)
(declare-fun Mask@21 () T@U)
(declare-fun Mask@20 () T@U)
(declare-fun Mask@17 () T@U)
(declare-fun Mask@18 () T@U)
(declare-fun Mask@19 () T@U)
(declare-fun Heap@6 () T@U)
(declare-fun temp1@0 () T@U)
(declare-fun Mask@10 () T@U)
(declare-fun Mask@9 () T@U)
(declare-fun Mask@8 () T@U)
(declare-fun Mask@7 () T@U)
(declare-fun Heap@2 () T@U)
(declare-fun newPMask@0 () T@U)
(declare-fun Heap@3 () T@U)
(declare-fun Heap@4 () T@U)
(declare-fun newPMask@1 () T@U)
(declare-fun Heap@5 () T@U)
(declare-fun Heap@0 () T@U)
(declare-fun Heap@1 () T@U)
(declare-fun freshVersion@0 () T@U)
(declare-fun Mask@6 () T@U)
(declare-fun Mask@5 () T@U)
(declare-fun Mask@4 () T@U)
(declare-fun Mask@3 () T@U)
(declare-fun temp1 () T@U)
(declare-fun temp2 () T@U)
(declare-fun Mask@1 () T@U)
(declare-fun Mask@0 () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type Mask@1) (MapType1Type RefType realType)) (= (type Heap@@61) (MapType0Type RefType))) (= (type this@@66) RefType)) (= (type Mask@2) (MapType1Type RefType realType))) (= (type binHeap) RefType)) (= (type Mask@58) (MapType1Type RefType realType))) (= (type Mask@57) (MapType1Type RefType realType))) (= (type ExhaleHeap@2) (MapType0Type RefType))) (= (type Mask@56) (MapType1Type RefType realType))) (= (type temp1@4) RefType)) (= (type arg_a_4@0) RefType)) (= (type Heap@24) (MapType0Type RefType))) (= (type Mask@55) (MapType1Type RefType realType))) (= (type Mask@54) (MapType1Type RefType realType))) (= (type Mask@53) (MapType1Type RefType realType))) (= (type Mask@51) (MapType1Type RefType realType))) (= (type Mask@52) (MapType1Type RefType realType))) (= (type Mask@50) (MapType1Type RefType realType))) (= (type Mask@49) (MapType1Type RefType realType))) (= (type temp1@1) RefType)) (= (type Mask@20) (MapType1Type RefType realType))) (= (type ExhaleHeap@0) (MapType0Type RefType))) (= (type Mask@43) (MapType1Type RefType realType))) (= (type temp2@0) RefType)) (= (type Heap@23) (MapType0Type RefType))) (= (type Mask@48) (MapType1Type RefType realType))) (= (type temp1@3) RefType)) (= (type newPMask@4) (MapType1Type RefType boolType))) (= (type Heap@19) (MapType0Type RefType))) (= (type Heap@20) (MapType0Type RefType))) (= (type Heap@21) (MapType0Type RefType))) (= (type newPMask@5) (MapType1Type RefType boolType))) (= (type Heap@22) (MapType0Type RefType))) (= (type Heap@17) (MapType0Type RefType))) (= (type Heap@16) (MapType0Type RefType))) (= (type Heap@18) (MapType0Type RefType))) (= (type freshVersion@2) FrameTypeType)) (= (type Mask@47) (MapType1Type RefType realType))) (forall ((arg0@@40 T@U) ) (! (= (type (FrameFragment arg0@@40)) FrameTypeType)
 :qid |funType:FrameFragment|
 :pattern ( (FrameFragment arg0@@40))
))) (forall ((arg0@@41 T@U) (arg1@@19 T@U) ) (! (= (type (CombineFrames arg0@@41 arg1@@19)) FrameTypeType)
 :qid |funType:CombineFrames|
 :pattern ( (CombineFrames arg0@@41 arg1@@19))
))) (= (type Mask@46) (MapType1Type RefType realType))) (= (type Mask@45) (MapType1Type RefType realType))) (= (type Mask@44) (MapType1Type RefType realType))) (= (type Heap@15) (MapType0Type RefType))) (= (type ExhaleWellDef0Mask@1) (MapType1Type RefType realType))) (= (type ExhaleWellDef0Mask@0) (MapType1Type RefType realType))) (= (type Mask@39) (MapType1Type RefType realType))) (= (type Mask@42) (MapType1Type RefType realType))) (= (type Mask@40) (MapType1Type RefType realType))) (= (type Mask@41) (MapType1Type RefType realType))) (= (type Heap@14) (MapType0Type RefType))) (= (type ExhaleHeap@1) (MapType0Type RefType))) (= (type newVersion@0) FrameTypeType)) (= (type Mask@38) (MapType1Type RefType realType))) (= (type Mask@29) (MapType1Type RefType realType))) (= (type Mask@35) (MapType1Type RefType realType))) (= (type Mask@36) (MapType1Type RefType realType))) (= (type Mask@37) (MapType1Type RefType realType))) (= (type Heap@96) (MapType0Type RefType))) (= (type temp1@5) RefType)) (= (type Mask@94) (MapType1Type RefType realType))) (= (type Mask@93) (MapType1Type RefType realType))) (= (type Mask@92) (MapType1Type RefType realType))) (= (type Mask@91) (MapType1Type RefType realType))) (= (type Mask@90) (MapType1Type RefType realType))) (= (type newPMask@23) (MapType1Type RefType boolType))) (= (type Heap@92) (MapType0Type RefType))) (= (type Heap@93) (MapType0Type RefType))) (= (type Heap@94) (MapType0Type RefType))) (= (type newPMask@24) (MapType1Type RefType boolType))) (= (type Heap@95) (MapType0Type RefType))) (= (type Heap@90) (MapType0Type RefType))) (= (type ExhaleHeap@7) (MapType0Type RefType))) (= (type Heap@91) (MapType0Type RefType))) (= (type freshVersion@5) FrameTypeType)) (= (type Mask@89) (MapType1Type RefType realType))) (= (type Mask@85) (MapType1Type RefType realType))) (= (type Mask@88) (MapType1Type RefType realType))) (= (type Mask@87) (MapType1Type RefType realType))) (= (type Mask@86) (MapType1Type RefType realType))) (= (type arg_a_3@0) RefType)) (= (type Heap@89) (MapType0Type RefType))) (= (type Mask@84) (MapType1Type RefType realType))) (= (type Mask@83) (MapType1Type RefType realType))) (= (type Mask@82) (MapType1Type RefType realType))) (= (type Mask@80) (MapType1Type RefType realType))) (= (type Mask@81) (MapType1Type RefType realType))) (= (type Mask@79) (MapType1Type RefType realType))) (= (type Mask@78) (MapType1Type RefType realType))) (= (type Mask@74) (MapType1Type RefType realType))) (= (type Mask@77) (MapType1Type RefType realType))) (= (type Mask@75) (MapType1Type RefType realType))) (= (type Mask@76) (MapType1Type RefType realType))) (= (type Heap@88) (MapType0Type RefType))) (= (type Heap@87) (MapType0Type RefType))) (= (type newVersion@2) FrameTypeType)) (= (type Mask@73) (MapType1Type RefType realType))) (= (type newPMask@21) (MapType1Type RefType boolType))) (= (type Heap@83) (MapType0Type RefType))) (= (type Heap@84) (MapType0Type RefType))) (= (type Heap@85) (MapType0Type RefType))) (= (type newPMask@22) (MapType1Type RefType boolType))) (= (type Heap@86) (MapType0Type RefType))) (= (type Heap@81) (MapType0Type RefType))) (= (type Heap@80) (MapType0Type RefType))) (= (type Heap@82) (MapType0Type RefType))) (= (type freshVersion@4) FrameTypeType)) (= (type Mask@72) (MapType1Type RefType realType))) (= (type Mask@68) (MapType1Type RefType realType))) (= (type Mask@71) (MapType1Type RefType realType))) (= (type Mask@70) (MapType1Type RefType realType))) (= (type Mask@69) (MapType1Type RefType realType))) (= (type newPMask@19) (MapType1Type RefType boolType))) (= (type Heap@76) (MapType0Type RefType))) (= (type Heap@77) (MapType0Type RefType))) (= (type Heap@78) (MapType0Type RefType))) (= (type newPMask@20) (MapType1Type RefType boolType))) (= (type Heap@79) (MapType0Type RefType))) (= (type Heap@74) (MapType0Type RefType))) (= (type Heap@73) (MapType0Type RefType))) (= (type Heap@75) (MapType0Type RefType))) (= (type freshVersion@3) FrameTypeType)) (= (type Mask@67) (MapType1Type RefType realType))) (= (type Mask@63) (MapType1Type RefType realType))) (= (type Mask@66) (MapType1Type RefType realType))) (= (type Mask@65) (MapType1Type RefType realType))) (= (type Mask@64) (MapType1Type RefType realType))) (= (type Heap@63) (MapType0Type RefType))) (= (type Heap@64) (MapType0Type RefType))) (= (type Heap@65) (MapType0Type RefType))) (= (type Heap@66) (MapType0Type RefType))) (= (type Heap@67) (MapType0Type RefType))) (= (type newPMask@17) (MapType1Type RefType boolType))) (= (type Heap@68) (MapType0Type RefType))) (= (type Heap@69) (MapType0Type RefType))) (= (type Heap@70) (MapType0Type RefType))) (= (type Heap@71) (MapType0Type RefType))) (= (type Heap@72) (MapType0Type RefType))) (= (type newPMask@18) (MapType1Type RefType boolType))) (= (type newPMask@15) (MapType1Type RefType boolType))) (= (type Heap@59) (MapType0Type RefType))) (= (type Heap@60) (MapType0Type RefType))) (= (type Heap@61) (MapType0Type RefType))) (= (type newPMask@16) (MapType1Type RefType boolType))) (= (type Heap@62) (MapType0Type RefType))) (= (type Heap@49) (MapType0Type RefType))) (= (type Heap@50) (MapType0Type RefType))) (= (type Heap@51) (MapType0Type RefType))) (= (type Heap@52) (MapType0Type RefType))) (= (type Heap@53) (MapType0Type RefType))) (= (type newPMask@13) (MapType1Type RefType boolType))) (= (type Heap@54) (MapType0Type RefType))) (= (type Heap@55) (MapType0Type RefType))) (= (type Heap@56) (MapType0Type RefType))) (= (type Heap@57) (MapType0Type RefType))) (= (type Heap@58) (MapType0Type RefType))) (= (type newPMask@14) (MapType1Type RefType boolType))) (= (type newPMask@11) (MapType1Type RefType boolType))) (= (type Heap@45) (MapType0Type RefType))) (= (type Heap@46) (MapType0Type RefType))) (= (type Heap@47) (MapType0Type RefType))) (= (type newPMask@12) (MapType1Type RefType boolType))) (= (type Heap@48) (MapType0Type RefType))) (= (type Heap@30) (MapType0Type RefType))) (= (type Unfolding2Mask@5) (MapType1Type RefType realType))) (= (type Heap@31) (MapType0Type RefType))) (= (type Heap@32) (MapType0Type RefType))) (= (type Heap@33) (MapType0Type RefType))) (= (type Heap@34) (MapType0Type RefType))) (= (type newPMask@8) (MapType1Type RefType boolType))) (= (type Heap@35) (MapType0Type RefType))) (= (type Heap@36) (MapType0Type RefType))) (= (type Heap@37) (MapType0Type RefType))) (= (type Heap@38) (MapType0Type RefType))) (= (type Heap@39) (MapType0Type RefType))) (= (type newPMask@9) (MapType1Type RefType boolType))) (= (type Heap@40) (MapType0Type RefType))) (= (type Heap@41) (MapType0Type RefType))) (= (type Heap@42) (MapType0Type RefType))) (= (type Heap@43) (MapType0Type RefType))) (= (type Heap@44) (MapType0Type RefType))) (= (type newPMask@10) (MapType1Type RefType boolType))) (= (type Unfolding2Mask@0) (MapType1Type RefType realType))) (= (type Unfolding1Mask@5) (MapType1Type RefType realType))) (= (type Unfolding2Mask@1) (MapType1Type RefType realType))) (= (type Unfolding2Mask@2) (MapType1Type RefType realType))) (= (type Unfolding2Mask@3) (MapType1Type RefType realType))) (= (type Unfolding2Mask@4) (MapType1Type RefType realType))) (= (type Unfolding1Mask@0) (MapType1Type RefType realType))) (= (type UnfoldingMask@9) (MapType1Type RefType realType))) (= (type Unfolding1Mask@1) (MapType1Type RefType realType))) (= (type Unfolding1Mask@2) (MapType1Type RefType realType))) (= (type Unfolding1Mask@3) (MapType1Type RefType realType))) (= (type Unfolding1Mask@4) (MapType1Type RefType realType))) (= (type UnfoldingMask@5) (MapType1Type RefType realType))) (= (type UnfoldingMask@8) (MapType1Type RefType realType))) (= (type UnfoldingMask@6) (MapType1Type RefType realType))) (= (type UnfoldingMask@7) (MapType1Type RefType realType))) (= (type Mask@59) (MapType1Type RefType realType))) (= (type Mask@62) (MapType1Type RefType realType))) (= (type Mask@60) (MapType1Type RefType realType))) (= (type Mask@61) (MapType1Type RefType realType))) (= (type Heap@29) (MapType0Type RefType))) (= (type Heap@28) (MapType0Type RefType))) (= (type newVersion@1) FrameTypeType)) (= (type Mask@34) (MapType1Type RefType realType))) (= (type t_1) RefType)) (= (type newPMask@6) (MapType1Type RefType boolType))) (= (type Heap@25) (MapType0Type RefType))) (= (type Heap@26) (MapType0Type RefType))) (= (type newPMask@7) (MapType1Type RefType boolType))) (= (type Heap@27) (MapType0Type RefType))) (= (type UnfoldingMask@4) (MapType1Type RefType realType))) (= (type UnfoldingMask@0) (MapType1Type RefType realType))) (= (type UnfoldingMask@3) (MapType1Type RefType realType))) (= (type UnfoldingMask@1) (MapType1Type RefType realType))) (= (type UnfoldingMask@2) (MapType1Type RefType realType))) (= (type Mask@31) (MapType1Type RefType realType))) (= (type Mask@32) (MapType1Type RefType realType))) (= (type Mask@33) (MapType1Type RefType realType))) (= (type Mask@30) (MapType1Type RefType realType))) (= (type Mask@95) (MapType1Type RefType realType))) (= (type Mask@97) (MapType1Type RefType realType))) (= (type Mask@101) (MapType1Type RefType realType))) (= (type Mask@100) (MapType1Type RefType realType))) (= (type Mask@103) (MapType1Type RefType realType))) (= (type Mask@102) (MapType1Type RefType realType))) (= (type Mask@105) (MapType1Type RefType realType))) (= (type Mask@104) (MapType1Type RefType realType))) (= (type Mask@107) (MapType1Type RefType realType))) (= (type Mask@106) (MapType1Type RefType realType))) (= (type Mask@122) (MapType1Type RefType realType))) (= (type Mask@121) (MapType1Type RefType realType))) (= (type Mask@112) (MapType1Type RefType realType))) (= (type Mask@111) (MapType1Type RefType realType))) (= (type Mask@98) (MapType1Type RefType realType))) (= (type Mask@114) (MapType1Type RefType realType))) (= (type Mask@116) (MapType1Type RefType realType))) (= (type Mask@140) (MapType1Type RefType realType))) (= (type Mask@139) (MapType1Type RefType realType))) (= (type Mask@126) (MapType1Type RefType realType))) (= (type Mask@125) (MapType1Type RefType realType))) (= (type Mask@129) (MapType1Type RefType realType))) (= (type Mask@128) (MapType1Type RefType realType))) (= (type Mask@132) (MapType1Type RefType realType))) (= (type Mask@131) (MapType1Type RefType realType))) (= (type Mask@136) (MapType1Type RefType realType))) (= (type Mask@134) (MapType1Type RefType realType))) (= (type Mask@96) (MapType1Type RefType realType))) (= (type Heap@13) (MapType0Type RefType))) (= (type temp1@2) RefType)) (= (type Mask@28) (MapType1Type RefType realType))) (= (type Mask@27) (MapType1Type RefType realType))) (= (type Mask@26) (MapType1Type RefType realType))) (= (type Mask@25) (MapType1Type RefType realType))) (= (type Heap@9) (MapType0Type RefType))) (= (type newPMask@2) (MapType1Type RefType boolType))) (= (type Heap@10) (MapType0Type RefType))) (= (type Heap@11) (MapType0Type RefType))) (= (type newPMask@3) (MapType1Type RefType boolType))) (= (type Heap@12) (MapType0Type RefType))) (= (type Heap@7) (MapType0Type RefType))) (= (type Heap@8) (MapType0Type RefType))) (= (type freshVersion@1) FrameTypeType)) (= (type Mask@24) (MapType1Type RefType realType))) (= (type Mask@23) (MapType1Type RefType realType))) (= (type Mask@22) (MapType1Type RefType realType))) (= (type Mask@21) (MapType1Type RefType realType))) (= (type Mask@11) (MapType1Type RefType realType))) (= (type Mask@17) (MapType1Type RefType realType))) (= (type Mask@18) (MapType1Type RefType realType))) (= (type Mask@19) (MapType1Type RefType realType))) (= (type Mask@156) (MapType1Type RefType realType))) (= (type Heap@117) (MapType0Type RefType))) (= (type temp2@6) RefType)) (= (type Heap@214) (MapType0Type RefType))) (= (type temp1@8) RefType)) (= (type Mask@258) (MapType1Type RefType realType))) (= (type Mask@257) (MapType1Type RefType realType))) (= (type Mask@256) (MapType1Type RefType realType))) (= (type Mask@255) (MapType1Type RefType realType))) (= (type Mask@254) (MapType1Type RefType realType))) (= (type Heap@180) (MapType0Type RefType))) (= (type Mask@227) (MapType1Type RefType realType))) (= (type temp1@7) RefType)) (= (type temp2@5) RefType)) (= (type Heap@125) (MapType0Type RefType))) (= (type Mask@171) (MapType1Type RefType realType))) (= (type temp2@2) RefType)) (= (type Heap@121) (MapType0Type RefType))) (= (type newPMask@29) (MapType1Type RefType boolType))) (= (type Heap@122) (MapType0Type RefType))) (= (type Heap@123) (MapType0Type RefType))) (= (type newPMask@30) (MapType1Type RefType boolType))) (= (type Heap@124) (MapType0Type RefType))) (= (type Heap@118) (MapType0Type RefType))) (= (type Heap@119) (MapType0Type RefType))) (= (type Heap@120) (MapType0Type RefType))) (= (type freshVersion@8) FrameTypeType)) (= (type Mask@170) (MapType1Type RefType realType))) (= (type Mask@166) (MapType1Type RefType realType))) (= (type Mask@169) (MapType1Type RefType realType))) (= (type Mask@168) (MapType1Type RefType realType))) (= (type Mask@167) (MapType1Type RefType realType))) (= (type newPMask@27) (MapType1Type RefType boolType))) (= (type Heap@113) (MapType0Type RefType))) (= (type Heap@114) (MapType0Type RefType))) (= (type Heap@115) (MapType0Type RefType))) (= (type newPMask@28) (MapType1Type RefType boolType))) (= (type Heap@116) (MapType0Type RefType))) (= (type Heap@111) (MapType0Type RefType))) (= (type Heap@110) (MapType0Type RefType))) (= (type Heap@112) (MapType0Type RefType))) (= (type freshVersion@7) FrameTypeType)) (= (type Mask@165) (MapType1Type RefType realType))) (= (type Mask@161) (MapType1Type RefType realType))) (= (type Mask@164) (MapType1Type RefType realType))) (= (type Mask@163) (MapType1Type RefType realType))) (= (type Mask@162) (MapType1Type RefType realType))) (= (type newPMask@25) (MapType1Type RefType boolType))) (= (type Heap@106) (MapType0Type RefType))) (= (type Heap@107) (MapType0Type RefType))) (= (type Heap@108) (MapType0Type RefType))) (= (type newPMask@26) (MapType1Type RefType boolType))) (= (type Heap@109) (MapType0Type RefType))) (= (type Heap@104) (MapType0Type RefType))) (= (type Heap@103) (MapType0Type RefType))) (= (type Heap@105) (MapType0Type RefType))) (= (type freshVersion@6) FrameTypeType)) (= (type Mask@160) (MapType1Type RefType realType))) (= (type Mask@159) (MapType1Type RefType realType))) (= (type Mask@158) (MapType1Type RefType realType))) (= (type Mask@157) (MapType1Type RefType realType))) (= (type Heap@100) (MapType0Type RefType))) (= (type Heap@179) (MapType0Type RefType))) (= (type Mask@226) (MapType1Type RefType realType))) (= (type temp2@4) RefType)) (= (type temp1@6) RefType)) (= (type Heap@157) (MapType0Type RefType))) (= (type Mask@203) (MapType1Type RefType realType))) (= (type tmp@0) RefType)) (= (type newPMask@37) (MapType1Type RefType boolType))) (= (type Heap@153) (MapType0Type RefType))) (= (type Heap@154) (MapType0Type RefType))) (= (type Heap@155) (MapType0Type RefType))) (= (type newPMask@38) (MapType1Type RefType boolType))) (= (type Heap@156) (MapType0Type RefType))) (= (type Heap@151) (MapType0Type RefType))) (= (type ExhaleHeap@58) (MapType0Type RefType))) (= (type Heap@152) (MapType0Type RefType))) (= (type freshVersion@12) FrameTypeType)) (= (type Mask@202) (MapType1Type RefType realType))) (= (type Mask@198) (MapType1Type RefType realType))) (= (type Mask@201) (MapType1Type RefType realType))) (= (type Mask@200) (MapType1Type RefType realType))) (= (type Mask@199) (MapType1Type RefType realType))) (= (type arg_a_2@0) RefType)) (= (type Heap@150) (MapType0Type RefType))) (= (type Mask@197) (MapType1Type RefType realType))) (= (type Mask@196) (MapType1Type RefType realType))) (= (type Mask@195) (MapType1Type RefType realType))) (= (type Mask@193) (MapType1Type RefType realType))) (= (type Mask@194) (MapType1Type RefType realType))) (= (type Mask@192) (MapType1Type RefType realType))) (= (type Mask@191) (MapType1Type RefType realType))) (= (type Mask@187) (MapType1Type RefType realType))) (= (type Mask@190) (MapType1Type RefType realType))) (= (type Mask@188) (MapType1Type RefType realType))) (= (type Mask@189) (MapType1Type RefType realType))) (= (type Heap@149) (MapType0Type RefType))) (= (type Heap@148) (MapType0Type RefType))) (= (type newVersion@5) FrameTypeType)) (= (type Mask@186) (MapType1Type RefType realType))) (= (type newPMask@35) (MapType1Type RefType boolType))) (= (type Heap@144) (MapType0Type RefType))) (= (type Heap@145) (MapType0Type RefType))) (= (type Heap@146) (MapType0Type RefType))) (= (type newPMask@36) (MapType1Type RefType boolType))) (= (type Heap@147) (MapType0Type RefType))) (= (type Heap@142) (MapType0Type RefType))) (= (type Heap@141) (MapType0Type RefType))) (= (type Heap@143) (MapType0Type RefType))) (= (type freshVersion@11) FrameTypeType)) (= (type Mask@185) (MapType1Type RefType realType))) (= (type Mask@181) (MapType1Type RefType realType))) (= (type Mask@184) (MapType1Type RefType realType))) (= (type Mask@183) (MapType1Type RefType realType))) (= (type Mask@182) (MapType1Type RefType realType))) (= (type newPMask@33) (MapType1Type RefType boolType))) (= (type Heap@137) (MapType0Type RefType))) (= (type Heap@138) (MapType0Type RefType))) (= (type Heap@139) (MapType0Type RefType))) (= (type newPMask@34) (MapType1Type RefType boolType))) (= (type Heap@140) (MapType0Type RefType))) (= (type Heap@135) (MapType0Type RefType))) (= (type Heap@134) (MapType0Type RefType))) (= (type Heap@136) (MapType0Type RefType))) (= (type freshVersion@10) FrameTypeType)) (= (type Mask@180) (MapType1Type RefType realType))) (= (type Mask@176) (MapType1Type RefType realType))) (= (type Mask@179) (MapType1Type RefType realType))) (= (type Mask@178) (MapType1Type RefType realType))) (= (type Mask@177) (MapType1Type RefType realType))) (= (type newPMask@31) (MapType1Type RefType boolType))) (= (type Heap@130) (MapType0Type RefType))) (= (type Heap@131) (MapType0Type RefType))) (= (type Heap@132) (MapType0Type RefType))) (= (type newPMask@32) (MapType1Type RefType boolType))) (= (type Heap@133) (MapType0Type RefType))) (= (type Heap@128) (MapType0Type RefType))) (= (type Heap@129) (MapType0Type RefType))) (= (type freshVersion@9) FrameTypeType)) (= (type Mask@175) (MapType1Type RefType realType))) (= (type Mask@174) (MapType1Type RefType realType))) (= (type Mask@173) (MapType1Type RefType realType))) (= (type Mask@172) (MapType1Type RefType realType))) (= (type Heap@178) (MapType0Type RefType))) (= (type Mask@225) (MapType1Type RefType realType))) (= (type temp2@3) RefType)) (= (type newPMask@43) (MapType1Type RefType boolType))) (= (type Heap@174) (MapType0Type RefType))) (= (type Heap@175) (MapType0Type RefType))) (= (type Heap@176) (MapType0Type RefType))) (= (type newPMask@44) (MapType1Type RefType boolType))) (= (type Heap@177) (MapType0Type RefType))) (= (type Heap@172) (MapType0Type RefType))) (= (type ExhaleHeap@59) (MapType0Type RefType))) (= (type Heap@173) (MapType0Type RefType))) (= (type freshVersion@15) FrameTypeType)) (= (type Mask@224) (MapType1Type RefType realType))) (= (type Mask@220) (MapType1Type RefType realType))) (= (type Mask@223) (MapType1Type RefType realType))) (= (type Mask@222) (MapType1Type RefType realType))) (= (type Mask@221) (MapType1Type RefType realType))) (= (type arg_a_1@0) RefType)) (= (type Heap@171) (MapType0Type RefType))) (= (type Mask@219) (MapType1Type RefType realType))) (= (type Mask@218) (MapType1Type RefType realType))) (= (type Mask@217) (MapType1Type RefType realType))) (= (type Mask@215) (MapType1Type RefType realType))) (= (type Mask@216) (MapType1Type RefType realType))) (= (type Mask@214) (MapType1Type RefType realType))) (= (type Mask@213) (MapType1Type RefType realType))) (= (type newPMask@41) (MapType1Type RefType boolType))) (= (type Heap@167) (MapType0Type RefType))) (= (type Heap@168) (MapType0Type RefType))) (= (type Heap@169) (MapType0Type RefType))) (= (type newPMask@42) (MapType1Type RefType boolType))) (= (type Heap@170) (MapType0Type RefType))) (= (type Heap@165) (MapType0Type RefType))) (= (type Heap@164) (MapType0Type RefType))) (= (type Heap@166) (MapType0Type RefType))) (= (type freshVersion@14) FrameTypeType)) (= (type Mask@212) (MapType1Type RefType realType))) (= (type Mask@208) (MapType1Type RefType realType))) (= (type Mask@211) (MapType1Type RefType realType))) (= (type Mask@210) (MapType1Type RefType realType))) (= (type Mask@209) (MapType1Type RefType realType))) (= (type newPMask@39) (MapType1Type RefType boolType))) (= (type Heap@160) (MapType0Type RefType))) (= (type Heap@161) (MapType0Type RefType))) (= (type Heap@162) (MapType0Type RefType))) (= (type newPMask@40) (MapType1Type RefType boolType))) (= (type Heap@163) (MapType0Type RefType))) (= (type Heap@158) (MapType0Type RefType))) (= (type Heap@127) (MapType0Type RefType))) (= (type Heap@159) (MapType0Type RefType))) (= (type freshVersion@13) FrameTypeType)) (= (type Mask@207) (MapType1Type RefType realType))) (= (type Mask@206) (MapType1Type RefType realType))) (= (type Mask@205) (MapType1Type RefType realType))) (= (type Mask@204) (MapType1Type RefType realType))) (= (type Heap@126) (MapType0Type RefType))) (= (type Mask@229) (MapType1Type RefType realType))) (= (type Mask@241) (MapType1Type RefType realType))) (= (type UnfoldingMask@14) (MapType1Type RefType realType))) (= (type Heap@213) (MapType0Type RefType))) (= (type Mask@253) (MapType1Type RefType realType))) (= (type temp2@1) RefType)) (= (type newPMask@55) (MapType1Type RefType boolType))) (= (type Heap@209) (MapType0Type RefType))) (= (type Heap@210) (MapType0Type RefType))) (= (type Heap@211) (MapType0Type RefType))) (= (type newPMask@56) (MapType1Type RefType boolType))) (= (type Heap@212) (MapType0Type RefType))) (= (type Heap@207) (MapType0Type RefType))) (= (type ExhaleHeap@64) (MapType0Type RefType))) (= (type Heap@208) (MapType0Type RefType))) (= (type freshVersion@18) FrameTypeType)) (= (type Mask@252) (MapType1Type RefType realType))) (= (type Mask@248) (MapType1Type RefType realType))) (= (type Mask@251) (MapType1Type RefType realType))) (= (type Mask@250) (MapType1Type RefType realType))) (= (type Mask@249) (MapType1Type RefType realType))) (= (type arg_a@0) RefType)) (= (type Heap@206) (MapType0Type RefType))) (= (type Mask@247) (MapType1Type RefType realType))) (= (type Mask@246) (MapType1Type RefType realType))) (= (type Mask@245) (MapType1Type RefType realType))) (= (type Mask@243) (MapType1Type RefType realType))) (= (type Mask@244) (MapType1Type RefType realType))) (= (type Mask@242) (MapType1Type RefType realType))) (= (type newPMask@53) (MapType1Type RefType boolType))) (= (type Heap@202) (MapType0Type RefType))) (= (type Heap@203) (MapType0Type RefType))) (= (type Heap@204) (MapType0Type RefType))) (= (type newPMask@54) (MapType1Type RefType boolType))) (= (type Heap@205) (MapType0Type RefType))) (= (type newPMask@51) (MapType1Type RefType boolType))) (= (type Heap@198) (MapType0Type RefType))) (= (type Heap@199) (MapType0Type RefType))) (= (type Heap@200) (MapType0Type RefType))) (= (type newPMask@52) (MapType1Type RefType boolType))) (= (type Heap@201) (MapType0Type RefType))) (= (type newPMask@49) (MapType1Type RefType boolType))) (= (type Heap@194) (MapType0Type RefType))) (= (type Heap@195) (MapType0Type RefType))) (= (type Heap@196) (MapType0Type RefType))) (= (type newPMask@50) (MapType1Type RefType boolType))) (= (type Heap@197) (MapType0Type RefType))) (= (type UnfoldingMask@10) (MapType1Type RefType realType))) (= (type UnfoldingMask@13) (MapType1Type RefType realType))) (= (type UnfoldingMask@11) (MapType1Type RefType realType))) (= (type UnfoldingMask@12) (MapType1Type RefType realType))) (= (type newPMask@47) (MapType1Type RefType boolType))) (= (type Heap@190) (MapType0Type RefType))) (= (type Heap@191) (MapType0Type RefType))) (= (type Heap@192) (MapType0Type RefType))) (= (type newPMask@48) (MapType1Type RefType boolType))) (= (type Heap@193) (MapType0Type RefType))) (= (type Heap@188) (MapType0Type RefType))) (= (type Heap@187) (MapType0Type RefType))) (= (type Heap@189) (MapType0Type RefType))) (= (type freshVersion@17) FrameTypeType)) (= (type Mask@240) (MapType1Type RefType realType))) (= (type Mask@236) (MapType1Type RefType realType))) (= (type Mask@239) (MapType1Type RefType realType))) (= (type Mask@238) (MapType1Type RefType realType))) (= (type Mask@237) (MapType1Type RefType realType))) (= (type newPMask@45) (MapType1Type RefType boolType))) (= (type Heap@183) (MapType0Type RefType))) (= (type Heap@184) (MapType0Type RefType))) (= (type Heap@185) (MapType0Type RefType))) (= (type newPMask@46) (MapType1Type RefType boolType))) (= (type Heap@186) (MapType0Type RefType))) (= (type Heap@181) (MapType0Type RefType))) (= (type Heap@102) (MapType0Type RefType))) (= (type Heap@182) (MapType0Type RefType))) (= (type freshVersion@16) FrameTypeType)) (= (type Mask@235) (MapType1Type RefType realType))) (= (type Mask@234) (MapType1Type RefType realType))) (= (type Mask@233) (MapType1Type RefType realType))) (= (type Mask@232) (MapType1Type RefType realType))) (= (type Heap@101) (MapType0Type RefType))) (= (type Mask@152) (MapType1Type RefType realType))) (= (type Mask@155) (MapType1Type RefType realType))) (= (type Mask@153) (MapType1Type RefType realType))) (= (type Mask@154) (MapType1Type RefType realType))) (= (type Heap@99) (MapType0Type RefType))) (= (type Heap@98) (MapType0Type RefType))) (= (type newVersion@4) FrameTypeType)) (= (type Mask@151) (MapType1Type RefType realType))) (= (type Mask@147) (MapType1Type RefType realType))) (= (type Mask@150) (MapType1Type RefType realType))) (= (type Mask@148) (MapType1Type RefType realType))) (= (type Mask@149) (MapType1Type RefType realType))) (= (type Heap@97) (MapType0Type RefType))) (= (type newVersion@3) FrameTypeType)) (= (type Mask@16) (MapType1Type RefType realType))) (= (type tmp) RefType)) (= (type Mask@13) (MapType1Type RefType realType))) (= (type Mask@14) (MapType1Type RefType realType))) (= (type Mask@15) (MapType1Type RefType realType))) (= (type Mask@12) (MapType1Type RefType realType))) (= (type Mask@261) (MapType1Type RefType realType))) (= (type Mask@263) (MapType1Type RefType realType))) (= (type Mask@264) (MapType1Type RefType realType))) (= (type Mask@265) (MapType1Type RefType realType))) (= (type Mask@266) (MapType1Type RefType realType))) (= (type Mask@268) (MapType1Type RefType realType))) (= (type Mask@267) (MapType1Type RefType realType))) (= (type Mask@270) (MapType1Type RefType realType))) (= (type Mask@269) (MapType1Type RefType realType))) (= (type Mask@272) (MapType1Type RefType realType))) (= (type Mask@271) (MapType1Type RefType realType))) (= (type Mask@277) (MapType1Type RefType realType))) (= (type Mask@276) (MapType1Type RefType realType))) (= (type Mask@284) (MapType1Type RefType realType))) (= (type Mask@283) (MapType1Type RefType realType))) (= (type Mask@281) (MapType1Type RefType realType))) (= (type Mask@280) (MapType1Type RefType realType))) (= (type Mask@298) (MapType1Type RefType realType))) (= (type Mask@297) (MapType1Type RefType realType))) (= (type Mask@290) (MapType1Type RefType realType))) (= (type Mask@289) (MapType1Type RefType realType))) (= (type Mask@294) (MapType1Type RefType realType))) (= (type Mask@292) (MapType1Type RefType realType))) (= (type Mask@311) (MapType1Type RefType realType))) (= (type Mask@310) (MapType1Type RefType realType))) (= (type Mask@303) (MapType1Type RefType realType))) (= (type Mask@302) (MapType1Type RefType realType))) (= (type Mask@307) (MapType1Type RefType realType))) (= (type Mask@305) (MapType1Type RefType realType))) (= (type Mask@262) (MapType1Type RefType realType))) (= (type Heap@6) (MapType0Type RefType))) (= (type temp1@0) RefType)) (= (type Mask@10) (MapType1Type RefType realType))) (= (type Mask@9) (MapType1Type RefType realType))) (= (type Mask@8) (MapType1Type RefType realType))) (= (type Mask@7) (MapType1Type RefType realType))) (= (type Heap@2) (MapType0Type RefType))) (= (type newPMask@0) (MapType1Type RefType boolType))) (= (type Heap@3) (MapType0Type RefType))) (= (type Heap@4) (MapType0Type RefType))) (= (type newPMask@1) (MapType1Type RefType boolType))) (= (type Heap@5) (MapType0Type RefType))) (= (type Heap@0) (MapType0Type RefType))) (= (type Heap@1) (MapType0Type RefType))) (= (type freshVersion@0) FrameTypeType)) (= (type Mask@6) (MapType1Type RefType realType))) (= (type Mask@5) (MapType1Type RefType realType))) (= (type Mask@4) (MapType1Type RefType realType))) (= (type Mask@3) (MapType1Type RefType realType))) (= (type temp1) RefType)) (= (type temp2) RefType)) (= (type PostMask@1) (MapType1Type RefType realType))) (= (type PostHeap@0) (MapType0Type RefType))) (= (type PostMask@2) (MapType1Type RefType realType))) (= (type PostMask@0) (MapType1Type RefType realType))) (= (type Mask@319) (MapType1Type RefType realType))) (= (type Mask@318) (MapType1Type RefType realType))) (= (type Mask@0) (MapType1Type RefType realType))))
(set-info :boogie-vc-id merge)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 1952) (let ((anon16_correct  (=> (and (= Mask@318 (MapType1Store Mask@2 null (heapseg binHeap null) (real_2_U (- (U_2_real (MapType1Select Mask@2 null (heapseg binHeap null))) FullPerm)))) (= (ControlFlow 0 1940) (- 0 1939))) (not (= binHeap null)))))
(let ((anon1247_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1943) 1940)) anon16_correct)))
(let ((anon1247_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1941) (- 0 1942)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg binHeap null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg binHeap null)))) (=> (= (ControlFlow 0 1941) 1940) anon16_correct))))))
(let ((anon12_correct  (=> (and (= Mask@319 (MapType1Store Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null) (real_2_U (- (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))) FullPerm)))) (= (ControlFlow 0 1935) (- 0 1934))) (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)))))
(let ((anon1245_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1938) 1935)) anon12_correct)))
(let ((anon1245_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1936) (- 0 1937)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 1936) 1935) anon12_correct))))))
(let ((anon42_correct  (=> (= (ControlFlow 0 1915) (- 0 1914)) (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)))))
(let ((anon1260_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1918) 1915)) anon42_correct)))
(let ((anon1260_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1916) (- 0 1917)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 1916) 1915) anon42_correct))))))
(let ((anon1259_Else_correct true))
(let ((anon1257_Else_correct  (and (=> (= (ControlFlow 0 1919) (- 0 1920)) (HasDirectPerm Mask@2 this@@66 Nodes)) (=> (HasDirectPerm Mask@2 this@@66 Nodes) (and (and (=> (= (ControlFlow 0 1919) 1913) anon1259_Else_correct) (=> (= (ControlFlow 0 1919) 1916) anon1260_Then_correct)) (=> (= (ControlFlow 0 1919) 1918) anon1260_Else_correct))))))
(let ((anon38_correct  (=> (and (= PostMask@2 (MapType1Store PostMask@1 null (heapseg (MapType0Select PostHeap@0 this@@66 Nodes) null) (real_2_U (- (U_2_real (MapType1Select PostMask@1 null (heapseg (MapType0Select PostHeap@0 this@@66 Nodes) null))) FullPerm)))) (= (ControlFlow 0 1909) (- 0 1908))) (not (= (MapType0Select PostHeap@0 this@@66 Nodes) null)))))
(let ((anon1258_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1912) 1909)) anon38_correct)))
(let ((anon1258_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1910) (- 0 1911)) (<= FullPerm (U_2_real (MapType1Select PostMask@1 null (heapseg (MapType0Select PostHeap@0 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select PostMask@1 null (heapseg (MapType0Select PostHeap@0 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 1910) 1909) anon38_correct))))))
(let ((anon1255_Else_correct  (=> (= (segSize PostHeap@0 (MapType0Select PostHeap@0 this@@66 Nodes) null) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null))) (=> (and (state PostHeap@0 PostMask@1) (state PostHeap@0 PostMask@1)) (and (=> (= (ControlFlow 0 1921) (- 0 1922)) (HasDirectPerm PostMask@1 this@@66 Nodes)) (=> (HasDirectPerm PostMask@1 this@@66 Nodes) (and (and (=> (= (ControlFlow 0 1921) 1919) anon1257_Else_correct) (=> (= (ControlFlow 0 1921) 1910) anon1258_Then_correct)) (=> (= (ControlFlow 0 1921) 1912) anon1258_Else_correct))))))))
(let ((anon34_correct true))
(let ((anon1256_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1907) 1904)) anon34_correct)))
(let ((anon1256_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1905) (- 0 1906)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg binHeap null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg binHeap null)))) (=> (= (ControlFlow 0 1905) 1904) anon34_correct))))))
(let ((anon30_correct true))
(let ((anon1254_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1903) 1900)) anon30_correct)))
(let ((anon1254_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1901) (- 0 1902)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 1901) 1900) anon30_correct))))))
(let ((anon1251_Else_correct  (and (=> (= (ControlFlow 0 1923) (- 0 1924)) (HasDirectPerm Mask@2 this@@66 Nodes)) (=> (HasDirectPerm Mask@2 this@@66 Nodes) (and (and (and (and (=> (= (ControlFlow 0 1923) 1921) anon1255_Else_correct) (=> (= (ControlFlow 0 1923) 1905) anon1256_Then_correct)) (=> (= (ControlFlow 0 1923) 1907) anon1256_Else_correct)) (=> (= (ControlFlow 0 1923) 1901) anon1254_Then_correct)) (=> (= (ControlFlow 0 1923) 1903) anon1254_Else_correct))))))
(let ((anon26_correct true))
(let ((anon1252_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1899) 1896)) anon26_correct)))
(let ((anon1252_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1897) (- 0 1898)) (<= FullPerm (U_2_real (MapType1Select PostMask@1 null (heapseg (MapType0Select PostHeap@0 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select PostMask@1 null (heapseg (MapType0Select PostHeap@0 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 1897) 1896) anon26_correct))))))
(let ((anon1249_Else_correct  (=> (presorted PostHeap@0 (MapType0Select PostHeap@0 this@@66 Nodes) null) (=> (and (state PostHeap@0 PostMask@1) (state PostHeap@0 PostMask@1)) (and (=> (= (ControlFlow 0 1925) (- 0 1926)) (HasDirectPerm PostMask@1 this@@66 Nodes)) (=> (HasDirectPerm PostMask@1 this@@66 Nodes) (and (and (=> (= (ControlFlow 0 1925) 1923) anon1251_Else_correct) (=> (= (ControlFlow 0 1925) 1897) anon1252_Then_correct)) (=> (= (ControlFlow 0 1925) 1899) anon1252_Else_correct))))))))
(let ((anon22_correct true))
(let ((anon1250_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1895) 1892)) anon22_correct)))
(let ((anon1250_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1893) (- 0 1894)) (<= FullPerm (U_2_real (MapType1Select PostMask@1 null (heapseg (MapType0Select PostHeap@0 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select PostMask@1 null (heapseg (MapType0Select PostHeap@0 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 1893) 1892) anon22_correct))))))
(let ((anon1248_Then_correct  (=> (and (and (state PostHeap@0 ZeroMask) (not (= this@@66 null))) (and (= PostMask@0 (MapType1Store ZeroMask this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select ZeroMask this@@66 Nodes)) FullPerm)))) (state PostHeap@0 PostMask@0))) (and (=> (= (ControlFlow 0 1927) (- 0 1930)) (HasDirectPerm PostMask@0 this@@66 Nodes)) (=> (HasDirectPerm PostMask@0 this@@66 Nodes) (=> (not (= (MapType0Select PostHeap@0 this@@66 Nodes) null)) (and (=> (= (ControlFlow 0 1927) (- 0 1929)) (HasDirectPerm PostMask@0 this@@66 Nodes)) (=> (HasDirectPerm PostMask@0 this@@66 Nodes) (=> (= PostMask@1 (MapType1Store PostMask@0 null (heapseg (MapType0Select PostHeap@0 this@@66 Nodes) null) (real_2_U (+ (U_2_real (MapType1Select PostMask@0 null (heapseg (MapType0Select PostHeap@0 this@@66 Nodes) null))) FullPerm)))) (=> (and (state PostHeap@0 PostMask@1) (state PostHeap@0 PostMask@1)) (and (=> (= (ControlFlow 0 1927) (- 0 1928)) (HasDirectPerm PostMask@1 this@@66 Nodes)) (=> (HasDirectPerm PostMask@1 this@@66 Nodes) (and (and (=> (= (ControlFlow 0 1927) 1925) anon1249_Else_correct) (=> (= (ControlFlow 0 1927) 1893) anon1250_Then_correct)) (=> (= (ControlFlow 0 1927) 1895) anon1250_Else_correct))))))))))))))
(let ((anon108_correct true))
(let ((anon1295_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1797) 1794)) anon108_correct)))
(let ((anon1295_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1795) (- 0 1796)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null)))) (=> (= (ControlFlow 0 1795) 1794) anon108_correct))))))
(let ((anon142_correct  (=> (= Mask@305 (MapType1Store Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))) FullPerm)))) (and (=> (= (ControlFlow 0 1777) (- 0 1778)) (<= 0 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 2))) (=> (<= 0 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 2)) (=> (= (ControlFlow 0 1777) (- 0 1776)) (< (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 2) (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))))))
(let ((anon1313_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1781) 1777)) anon142_correct)))
(let ((anon1313_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1779) (- 0 1780)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1779) 1777) anon142_correct))))))
(let ((anon138_correct true))
(let ((anon1311_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1775) 1772)) anon138_correct)))
(let ((anon1311_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1773) (- 0 1774)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1773) 1772) anon138_correct))))))
(let ((anon134_correct  (=> (= Mask@307 (MapType1Store Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))) FullPerm)))) (and (=> (= (ControlFlow 0 1767) (- 0 1768)) (<= 0 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1))) (=> (<= 0 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (=> (= (ControlFlow 0 1767) (- 0 1766)) (< (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1) (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))))))
(let ((anon1309_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1771) 1767)) anon134_correct)))
(let ((anon1309_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1769) (- 0 1770)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1769) 1767) anon134_correct))))))
(let ((anon130_correct true))
(let ((anon1307_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1765) 1762)) anon130_correct)))
(let ((anon1307_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1763) (- 0 1764)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1763) 1762) anon130_correct))))))
(let ((anon155_correct  (=> (and (= Mask@302 (MapType1Store Mask@263 null (heapseg temp1@1 null) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null))) FullPerm)))) (= (ControlFlow 0 1754) (- 0 1753))) (< 0 (segLength ExhaleHeap@0 temp1@1 null)))))
(let ((anon1320_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1757) 1754)) anon155_correct)))
(let ((anon1320_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1755) (- 0 1756)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null)))) (=> (= (ControlFlow 0 1755) 1754) anon155_correct))))))
(let ((anon151_correct  (=> (= Mask@303 (MapType1Store Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))) FullPerm)))) (and (=> (= (ControlFlow 0 1748) (- 0 1749)) (<= 0 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1))) (=> (<= 0 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (=> (= (ControlFlow 0 1748) (- 0 1747)) (< (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1) (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))))))
(let ((anon1318_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1752) 1748)) anon151_correct)))
(let ((anon1318_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1750) (- 0 1751)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1750) 1748) anon151_correct))))))
(let ((anon147_correct true))
(let ((anon1316_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1746) 1743)) anon147_correct)))
(let ((anon1316_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1744) (- 0 1745)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1744) 1743) anon147_correct))))))
(let ((anon125_correct true))
(let ((anon1304_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1740) 1737)) anon125_correct)))
(let ((anon1304_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1738) (- 0 1739)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1738) 1737) anon125_correct))))))
(let ((anon121_correct  (=> (and (= Mask@310 (MapType1Store Mask@263 null (heapseg temp1@1 null) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null))) FullPerm)))) (= (ControlFlow 0 1733) (- 0 1732))) (< 0 (segLength ExhaleHeap@0 temp1@1 null)))))
(let ((anon1302_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1736) 1733)) anon121_correct)))
(let ((anon1302_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1734) (- 0 1735)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null)))) (=> (= (ControlFlow 0 1734) 1733) anon121_correct))))))
(let ((anon117_correct  (=> (= Mask@311 (MapType1Store Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))) FullPerm)))) (and (=> (= (ControlFlow 0 1727) (- 0 1728)) (<= 0 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1))) (=> (<= 0 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (=> (= (ControlFlow 0 1727) (- 0 1726)) (< (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1) (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))))))
(let ((anon1300_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1731) 1727)) anon117_correct)))
(let ((anon1300_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1729) (- 0 1730)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1729) 1727) anon117_correct))))))
(let ((anon113_correct true))
(let ((anon1298_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1725) 1722)) anon113_correct)))
(let ((anon1298_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1723) (- 0 1724)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1723) 1722) anon113_correct))))))
(let ((anon165_correct true))
(let ((anon1325_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1717) 1714)) anon165_correct)))
(let ((anon1325_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1715) (- 0 1716)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 1715) 1714) anon165_correct))))))
(let ((anon199_correct  (=> (= Mask@292 (MapType1Store Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))) FullPerm)))) (and (=> (= (ControlFlow 0 1697) (- 0 1698)) (<= 0 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 2))) (=> (<= 0 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 2)) (=> (= (ControlFlow 0 1697) (- 0 1696)) (< (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 2) (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))))))
(let ((anon1343_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1701) 1697)) anon199_correct)))
(let ((anon1343_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1699) (- 0 1700)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1699) 1697) anon199_correct))))))
(let ((anon195_correct true))
(let ((anon1341_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1695) 1692)) anon195_correct)))
(let ((anon1341_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1693) (- 0 1694)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1693) 1692) anon195_correct))))))
(let ((anon191_correct  (=> (= Mask@294 (MapType1Store Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))) FullPerm)))) (and (=> (= (ControlFlow 0 1687) (- 0 1688)) (<= 0 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1))) (=> (<= 0 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (=> (= (ControlFlow 0 1687) (- 0 1686)) (< (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1) (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))))))
(let ((anon1339_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1691) 1687)) anon191_correct)))
(let ((anon1339_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1689) (- 0 1690)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1689) 1687) anon191_correct))))))
(let ((anon187_correct true))
(let ((anon1337_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1685) 1682)) anon187_correct)))
(let ((anon1337_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1683) (- 0 1684)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1683) 1682) anon187_correct))))))
(let ((anon212_correct  (=> (and (= Mask@289 (MapType1Store Mask@263 null (heapseg temp2@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null))) FullPerm)))) (= (ControlFlow 0 1674) (- 0 1673))) (< 0 (segLength ExhaleHeap@0 temp2@0 null)))))
(let ((anon1350_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1677) 1674)) anon212_correct)))
(let ((anon1350_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1675) (- 0 1676)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 1675) 1674) anon212_correct))))))
(let ((anon208_correct  (=> (= Mask@290 (MapType1Store Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))) FullPerm)))) (and (=> (= (ControlFlow 0 1668) (- 0 1669)) (<= 0 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1))) (=> (<= 0 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (=> (= (ControlFlow 0 1668) (- 0 1667)) (< (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1) (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))))))
(let ((anon1348_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1672) 1668)) anon208_correct)))
(let ((anon1348_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1670) (- 0 1671)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1670) 1668) anon208_correct))))))
(let ((anon204_correct true))
(let ((anon1346_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1666) 1663)) anon204_correct)))
(let ((anon1346_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1664) (- 0 1665)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1664) 1663) anon204_correct))))))
(let ((anon182_correct true))
(let ((anon1334_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1660) 1657)) anon182_correct)))
(let ((anon1334_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1658) (- 0 1659)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1658) 1657) anon182_correct))))))
(let ((anon178_correct  (=> (and (= Mask@297 (MapType1Store Mask@263 null (heapseg temp2@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null))) FullPerm)))) (= (ControlFlow 0 1653) (- 0 1652))) (< 0 (segLength ExhaleHeap@0 temp2@0 null)))))
(let ((anon1332_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1656) 1653)) anon178_correct)))
(let ((anon1332_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1654) (- 0 1655)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 1654) 1653) anon178_correct))))))
(let ((anon174_correct  (=> (= Mask@298 (MapType1Store Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))) FullPerm)))) (and (=> (= (ControlFlow 0 1647) (- 0 1648)) (<= 0 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1))) (=> (<= 0 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (=> (= (ControlFlow 0 1647) (- 0 1646)) (< (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1) (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))))))
(let ((anon1330_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1651) 1647)) anon174_correct)))
(let ((anon1330_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1649) (- 0 1650)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1649) 1647) anon174_correct))))))
(let ((anon170_correct true))
(let ((anon1328_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1645) 1642)) anon170_correct)))
(let ((anon1328_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1643) (- 0 1644)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1643) 1642) anon170_correct))))))
(let ((anon227_correct true))
(let ((anon1358_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1636) 1633)) anon227_correct)))
(let ((anon1358_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1634) (- 0 1635)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 1634) 1633) anon227_correct))))))
(let ((anon222_correct true))
(let ((anon1355_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1632) 1629)) anon222_correct)))
(let ((anon1355_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1630) (- 0 1631)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null)))) (=> (= (ControlFlow 0 1630) 1629) anon222_correct))))))
(let ((anon253_correct  (=> (and (= Mask@280 (MapType1Store Mask@263 null (heapseg temp2@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null))) FullPerm)))) (= (ControlFlow 0 1617) (- 0 1616))) (< 0 (segLength ExhaleHeap@0 temp2@0 null)))))
(let ((anon1372_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1620) 1617)) anon253_correct)))
(let ((anon1372_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1618) (- 0 1619)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 1618) 1617) anon253_correct))))))
(let ((anon249_correct  (=> (= Mask@281 (MapType1Store Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))) FullPerm)))) (and (=> (= (ControlFlow 0 1611) (- 0 1612)) (<= 0 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1))) (=> (<= 0 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (=> (= (ControlFlow 0 1611) (- 0 1610)) (< (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1) (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))))))
(let ((anon1370_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1615) 1611)) anon249_correct)))
(let ((anon1370_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1613) (- 0 1614)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1613) 1611) anon249_correct))))))
(let ((anon245_correct true))
(let ((anon1368_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1609) 1606)) anon245_correct)))
(let ((anon1368_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1607) (- 0 1608)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1607) 1606) anon245_correct))))))
(let ((anon240_correct  (=> (and (= Mask@283 (MapType1Store Mask@263 null (heapseg temp1@1 null) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null))) FullPerm)))) (= (ControlFlow 0 1600) (- 0 1599))) (< 0 (segLength ExhaleHeap@0 temp1@1 null)))))
(let ((anon1365_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1603) 1600)) anon240_correct)))
(let ((anon1365_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1601) (- 0 1602)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null)))) (=> (= (ControlFlow 0 1601) 1600) anon240_correct))))))
(let ((anon236_correct  (=> (= Mask@284 (MapType1Store Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))) FullPerm)))) (and (=> (= (ControlFlow 0 1594) (- 0 1595)) (<= 0 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1))) (=> (<= 0 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (=> (= (ControlFlow 0 1594) (- 0 1593)) (< (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1) (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))))))
(let ((anon1363_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1598) 1594)) anon236_correct)))
(let ((anon1363_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1596) (- 0 1597)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1596) 1594) anon236_correct))))))
(let ((anon232_correct true))
(let ((anon1361_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1592) 1589)) anon232_correct)))
(let ((anon1361_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1590) (- 0 1591)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1590) 1589) anon232_correct))))))
(let ((anon264_correct true))
(let ((anon1378_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1583) 1580)) anon264_correct)))
(let ((anon1378_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1581) (- 0 1582)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 1581) 1580) anon264_correct))))))
(let ((anon259_correct true))
(let ((anon1375_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1579) 1576)) anon259_correct)))
(let ((anon1375_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1577) (- 0 1578)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null)))) (=> (= (ControlFlow 0 1577) 1576) anon259_correct))))))
(let ((anon273_correct  (=> (and (= Mask@276 (MapType1Store Mask@263 null (heapseg temp2@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null))) FullPerm)))) (= (ControlFlow 0 1569) (- 0 1568))) (< 0 (segLength ExhaleHeap@0 temp2@0 null)))))
(let ((anon1383_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1572) 1569)) anon273_correct)))
(let ((anon1383_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1570) (- 0 1571)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 1570) 1569) anon273_correct))))))
(let ((anon269_correct  (=> (and (= Mask@277 (MapType1Store Mask@263 null (heapseg temp1@1 null) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null))) FullPerm)))) (= (ControlFlow 0 1564) (- 0 1563))) (< 0 (segLength ExhaleHeap@0 temp1@1 null)))))
(let ((anon1381_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1567) 1564)) anon269_correct)))
(let ((anon1381_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1565) (- 0 1566)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null)))) (=> (= (ControlFlow 0 1565) 1564) anon269_correct))))))
(let ((anon303_correct  (=> (and (= Mask@271 (MapType1Store Mask@263 null (heapseg temp2@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null))) FullPerm)))) (= (ControlFlow 0 1551) (- 0 1550))) (not (= temp2@0 null)))))
(let ((anon1398_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1554) 1551)) anon303_correct)))
(let ((anon1398_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1552) (- 0 1553)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 1552) 1551) anon303_correct))))))
(let ((anon299_correct  (=> (and (= Mask@272 (MapType1Store Mask@263 null (heapseg temp1@1 null) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null))) FullPerm)))) (= (ControlFlow 0 1546) (- 0 1545))) (not (= temp1@1 null)))))
(let ((anon1396_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1549) 1546)) anon299_correct)))
(let ((anon1396_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1547) (- 0 1548)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null)))) (=> (= (ControlFlow 0 1547) 1546) anon299_correct))))))
(let ((anon313_correct  (=> (and (= Mask@269 (MapType1Store Mask@263 null (heapseg temp1@1 null) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null))) FullPerm)))) (= (ControlFlow 0 1535) (- 0 1534))) (not (= temp1@1 null)))))
(let ((anon1403_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1538) 1535)) anon313_correct)))
(let ((anon1403_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1536) (- 0 1537)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null)))) (=> (= (ControlFlow 0 1536) 1535) anon313_correct))))))
(let ((anon309_correct  (=> (and (= Mask@270 (MapType1Store Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))) FullPerm)))) (= (ControlFlow 0 1530) (- 0 1529))) (not (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))))
(let ((anon1401_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1533) 1530)) anon309_correct)))
(let ((anon1401_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1531) (- 0 1532)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1531) 1530) anon309_correct))))))
(let ((anon323_correct  (=> (and (= Mask@267 (MapType1Store Mask@263 null (heapseg temp2@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null))) FullPerm)))) (= (ControlFlow 0 1519) (- 0 1518))) (not (= temp2@0 null)))))
(let ((anon1408_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1522) 1519)) anon323_correct)))
(let ((anon1408_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1520) (- 0 1521)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 1520) 1519) anon323_correct))))))
(let ((anon319_correct  (=> (and (= Mask@268 (MapType1Store Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))) FullPerm)))) (= (ControlFlow 0 1514) (- 0 1513))) (not (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))))
(let ((anon1406_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1517) 1514)) anon319_correct)))
(let ((anon1406_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1515) (- 0 1516)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1515) 1514) anon319_correct))))))
(let ((anon333_correct  (=> (= (ControlFlow 0 1501) (- 0 1500)) (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)))))
(let ((anon1413_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1504) 1501)) anon333_correct)))
(let ((anon1413_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1502) (- 0 1503)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 1502) 1501) anon333_correct))))))
(let ((anon329_correct  (=> (and (= Mask@266 (MapType1Store Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))) FullPerm)))) (= (ControlFlow 0 1495) (- 0 1494))) (not (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))))
(let ((anon1411_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1498) 1495)) anon329_correct)))
(let ((anon1411_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1496) (- 0 1497)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1496) 1495) anon329_correct))))))
(let ((anon343_correct  (=> (= (ControlFlow 0 1485) (- 0 1484)) (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)))))
(let ((anon1418_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1488) 1485)) anon343_correct)))
(let ((anon1418_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1486) (- 0 1487)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 1486) 1485) anon343_correct))))))
(let ((anon339_correct  (=> (and (= Mask@265 (MapType1Store Mask@263 null (heapseg temp1@1 null) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null))) FullPerm)))) (= (ControlFlow 0 1479) (- 0 1478))) (not (= temp1@1 null)))))
(let ((anon1416_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1482) 1479)) anon339_correct)))
(let ((anon1416_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1480) (- 0 1481)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null)))) (=> (= (ControlFlow 0 1480) 1479) anon339_correct))))))
(let ((anon353_correct  (=> (= (ControlFlow 0 1469) (- 0 1468)) (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)))))
(let ((anon1423_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1472) 1469)) anon353_correct)))
(let ((anon1423_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1470) (- 0 1471)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 1470) 1469) anon353_correct))))))
(let ((anon349_correct  (=> (and (= Mask@264 (MapType1Store Mask@263 null (heapseg temp2@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null))) FullPerm)))) (= (ControlFlow 0 1463) (- 0 1462))) (not (= temp2@0 null)))))
(let ((anon1421_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1466) 1463)) anon349_correct)))
(let ((anon1421_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1464) (- 0 1465)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 1464) 1463) anon349_correct))))))
(let ((anon355_correct true))
(let ((anon1422_Else_correct  (=> (and (= (segParent ExhaleHeap@0 temp2@0 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (= (ControlFlow 0 1467) 1460)) anon355_correct)))
(let ((anon1420_Else_correct  (and (=> (= (ControlFlow 0 1473) (- 0 1474)) (HasDirectPerm Mask@2 this@@66 Nodes)) (=> (HasDirectPerm Mask@2 this@@66 Nodes) (and (and (=> (= (ControlFlow 0 1473) 1467) anon1422_Else_correct) (=> (= (ControlFlow 0 1473) 1470) anon1423_Then_correct)) (=> (= (ControlFlow 0 1473) 1472) anon1423_Else_correct))))))
(let ((anon1419_Then_correct  (=> (and (not (= temp2@0 null)) (state ExhaleHeap@0 Mask@263)) (and (and (=> (= (ControlFlow 0 1475) 1473) anon1420_Else_correct) (=> (= (ControlFlow 0 1475) 1464) anon1421_Then_correct)) (=> (= (ControlFlow 0 1475) 1466) anon1421_Else_correct)))))
(let ((anon1419_Else_correct  (=> (and (= temp2@0 null) (= (ControlFlow 0 1461) 1460)) anon355_correct)))
(let ((anon345_correct  (=> (state ExhaleHeap@0 Mask@263) (and (=> (= (ControlFlow 0 1476) 1475) anon1419_Then_correct) (=> (= (ControlFlow 0 1476) 1461) anon1419_Else_correct)))))
(let ((anon1417_Else_correct  (=> (and (= (segParent ExhaleHeap@0 temp1@1 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (= (ControlFlow 0 1483) 1476)) anon345_correct)))
(let ((anon1415_Else_correct  (and (=> (= (ControlFlow 0 1489) (- 0 1490)) (HasDirectPerm Mask@2 this@@66 Nodes)) (=> (HasDirectPerm Mask@2 this@@66 Nodes) (and (and (=> (= (ControlFlow 0 1489) 1483) anon1417_Else_correct) (=> (= (ControlFlow 0 1489) 1486) anon1418_Then_correct)) (=> (= (ControlFlow 0 1489) 1488) anon1418_Else_correct))))))
(let ((anon1414_Then_correct  (=> (and (not (= temp1@1 null)) (state ExhaleHeap@0 Mask@263)) (and (and (=> (= (ControlFlow 0 1491) 1489) anon1415_Else_correct) (=> (= (ControlFlow 0 1491) 1480) anon1416_Then_correct)) (=> (= (ControlFlow 0 1491) 1482) anon1416_Else_correct)))))
(let ((anon1414_Else_correct  (=> (and (= temp1@1 null) (= (ControlFlow 0 1477) 1476)) anon345_correct)))
(let ((anon335_correct  (=> (state ExhaleHeap@0 Mask@263) (and (=> (= (ControlFlow 0 1492) 1491) anon1414_Then_correct) (=> (= (ControlFlow 0 1492) 1477) anon1414_Else_correct)))))
(let ((anon1412_Else_correct  (=> (and (= (segParent ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (= (ControlFlow 0 1499) 1492)) anon335_correct)))
(let ((anon1410_Else_correct  (and (=> (= (ControlFlow 0 1505) (- 0 1506)) (HasDirectPerm Mask@2 this@@66 Nodes)) (=> (HasDirectPerm Mask@2 this@@66 Nodes) (and (and (=> (= (ControlFlow 0 1505) 1499) anon1412_Else_correct) (=> (= (ControlFlow 0 1505) 1502) anon1413_Then_correct)) (=> (= (ControlFlow 0 1505) 1504) anon1413_Else_correct))))))
(let ((anon1409_Then_correct  (=> (and (not (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (state ExhaleHeap@0 Mask@263)) (and (=> (= (ControlFlow 0 1507) (- 0 1508)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (and (=> (= (ControlFlow 0 1507) 1505) anon1410_Else_correct) (=> (= (ControlFlow 0 1507) 1496) anon1411_Then_correct)) (=> (= (ControlFlow 0 1507) 1498) anon1411_Else_correct)))))))
(let ((anon1409_Else_correct  (=> (and (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (= (ControlFlow 0 1493) 1492)) anon335_correct)))
(let ((anon325_correct  (=> (state ExhaleHeap@0 Mask@263) (and (=> (= (ControlFlow 0 1509) (- 0 1510)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (=> (= (ControlFlow 0 1509) 1507) anon1409_Then_correct) (=> (= (ControlFlow 0 1509) 1493) anon1409_Else_correct)))))))
(let ((anon1407_Else_correct  (=> (and (= (segParent ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (segParent ExhaleHeap@0 temp2@0 null)) (= (ControlFlow 0 1512) 1509)) anon325_correct)))
(let ((anon1404_Then_correct  (=> (and (and (not (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (not (= temp2@0 null))) (state ExhaleHeap@0 Mask@263)) (and (=> (= (ControlFlow 0 1523) (- 0 1524)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (and (and (and (=> (= (ControlFlow 0 1523) 1512) anon1407_Else_correct) (=> (= (ControlFlow 0 1523) 1520) anon1408_Then_correct)) (=> (= (ControlFlow 0 1523) 1522) anon1408_Else_correct)) (=> (= (ControlFlow 0 1523) 1515) anon1406_Then_correct)) (=> (= (ControlFlow 0 1523) 1517) anon1406_Else_correct)))))))
(let ((anon1404_Else_correct  (=> (and (not (and (not (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (not (= temp2@0 null)))) (= (ControlFlow 0 1511) 1509)) anon325_correct)))
(let ((anon315_correct  (=> (state ExhaleHeap@0 Mask@263) (and (=> (= (ControlFlow 0 1525) (- 0 1526)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (=> (= (ControlFlow 0 1525) 1523) anon1404_Then_correct) (=> (= (ControlFlow 0 1525) 1511) anon1404_Else_correct)))))))
(let ((anon1402_Else_correct  (=> (and (= (segParent ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (segParent ExhaleHeap@0 temp1@1 null)) (= (ControlFlow 0 1528) 1525)) anon315_correct)))
(let ((anon1399_Then_correct  (=> (and (and (not (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (not (= temp1@1 null))) (state ExhaleHeap@0 Mask@263)) (and (=> (= (ControlFlow 0 1539) (- 0 1540)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (and (and (and (=> (= (ControlFlow 0 1539) 1528) anon1402_Else_correct) (=> (= (ControlFlow 0 1539) 1536) anon1403_Then_correct)) (=> (= (ControlFlow 0 1539) 1538) anon1403_Else_correct)) (=> (= (ControlFlow 0 1539) 1531) anon1401_Then_correct)) (=> (= (ControlFlow 0 1539) 1533) anon1401_Else_correct)))))))
(let ((anon1399_Else_correct  (=> (and (not (and (not (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (not (= temp1@1 null)))) (= (ControlFlow 0 1527) 1525)) anon315_correct)))
(let ((anon305_correct  (=> (state ExhaleHeap@0 Mask@263) (and (=> (= (ControlFlow 0 1541) (- 0 1542)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (=> (= (ControlFlow 0 1541) 1539) anon1399_Then_correct) (=> (= (ControlFlow 0 1541) 1527) anon1399_Else_correct)))))))
(let ((anon1397_Else_correct  (=> (and (= (segParent ExhaleHeap@0 temp1@1 null) (segParent ExhaleHeap@0 temp2@0 null)) (= (ControlFlow 0 1544) 1541)) anon305_correct)))
(let ((anon1394_Then_correct  (=> (and (and (not (= temp1@1 null)) (not (= temp2@0 null))) (state ExhaleHeap@0 Mask@263)) (and (and (and (and (=> (= (ControlFlow 0 1555) 1544) anon1397_Else_correct) (=> (= (ControlFlow 0 1555) 1552) anon1398_Then_correct)) (=> (= (ControlFlow 0 1555) 1554) anon1398_Else_correct)) (=> (= (ControlFlow 0 1555) 1547) anon1396_Then_correct)) (=> (= (ControlFlow 0 1555) 1549) anon1396_Else_correct)))))
(let ((anon1394_Else_correct  (=> (and (not (and (not (= temp1@1 null)) (not (= temp2@0 null)))) (= (ControlFlow 0 1543) 1541)) anon305_correct)))
(let ((anon1392_Else_correct  (=> (and (= (+ (+ (segSize ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (segSize ExhaleHeap@0 temp1@1 null)) (segSize ExhaleHeap@0 temp2@0 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null))) (state ExhaleHeap@0 Mask@263)) (and (=> (= (ControlFlow 0 1556) 1555) anon1394_Then_correct) (=> (= (ControlFlow 0 1556) 1543) anon1394_Else_correct)))))
(let ((anon294_correct true))
(let ((anon1393_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1459) 1456)) anon294_correct)))
(let ((anon1393_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1457) (- 0 1458)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg binHeap null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg binHeap null)))) (=> (= (ControlFlow 0 1457) 1456) anon294_correct))))))
(let ((anon290_correct true))
(let ((anon1391_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1455) 1452)) anon290_correct)))
(let ((anon1391_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1453) (- 0 1454)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 1453) 1452) anon290_correct))))))
(let ((anon1388_Else_correct  (and (=> (= (ControlFlow 0 1557) (- 0 1558)) (HasDirectPerm Mask@2 this@@66 Nodes)) (=> (HasDirectPerm Mask@2 this@@66 Nodes) (and (and (and (and (=> (= (ControlFlow 0 1557) 1556) anon1392_Else_correct) (=> (= (ControlFlow 0 1557) 1457) anon1393_Then_correct)) (=> (= (ControlFlow 0 1557) 1459) anon1393_Else_correct)) (=> (= (ControlFlow 0 1557) 1453) anon1391_Then_correct)) (=> (= (ControlFlow 0 1557) 1455) anon1391_Else_correct))))))
(let ((anon286_correct true))
(let ((anon1389_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1451) 1448)) anon286_correct)))
(let ((anon1389_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1449) (- 0 1450)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 1449) 1448) anon286_correct))))))
(let ((anon282_correct true))
(let ((anon1387_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1447) 1444)) anon282_correct)))
(let ((anon1387_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1445) (- 0 1446)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg temp1@1 null)))) (=> (= (ControlFlow 0 1445) 1444) anon282_correct))))))
(let ((anon278_correct true))
(let ((anon1385_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1443) 1440)) anon278_correct)))
(let ((anon1385_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1441) (- 0 1442)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1441) 1440) anon278_correct))))))
(let ((anon275_correct  (=> (and (state ExhaleHeap@0 Mask@263) (state ExhaleHeap@0 Mask@263)) (and (=> (= (ControlFlow 0 1559) (- 0 1560)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (and (and (and (and (and (=> (= (ControlFlow 0 1559) 1557) anon1388_Else_correct) (=> (= (ControlFlow 0 1559) 1449) anon1389_Then_correct)) (=> (= (ControlFlow 0 1559) 1451) anon1389_Else_correct)) (=> (= (ControlFlow 0 1559) 1445) anon1387_Then_correct)) (=> (= (ControlFlow 0 1559) 1447) anon1387_Else_correct)) (=> (= (ControlFlow 0 1559) 1441) anon1385_Then_correct)) (=> (= (ControlFlow 0 1559) 1443) anon1385_Else_correct)))))))
(let ((anon1382_Else_correct  (=> (and (<= (segDegree ExhaleHeap@0 temp1@1 null 0) (segDegree ExhaleHeap@0 temp2@0 null 0)) (= (ControlFlow 0 1562) 1559)) anon275_correct)))
(let ((anon1379_Then_correct  (=> (and (and (not (= temp1@1 (MapType0Select ExhaleHeap@0 this@@66 Nodes))) (and (< 0 (segLength ExhaleHeap@0 temp1@1 null)) (< 0 (segLength ExhaleHeap@0 temp2@0 null)))) (state ExhaleHeap@0 Mask@263)) (and (and (and (and (=> (= (ControlFlow 0 1573) 1562) anon1382_Else_correct) (=> (= (ControlFlow 0 1573) 1570) anon1383_Then_correct)) (=> (= (ControlFlow 0 1573) 1572) anon1383_Else_correct)) (=> (= (ControlFlow 0 1573) 1565) anon1381_Then_correct)) (=> (= (ControlFlow 0 1573) 1567) anon1381_Else_correct)))))
(let ((anon1379_Else_correct  (=> (and (not (and (not (= temp1@1 (MapType0Select ExhaleHeap@0 this@@66 Nodes))) (and (< 0 (segLength ExhaleHeap@0 temp1@1 null)) (< 0 (segLength ExhaleHeap@0 temp2@0 null))))) (= (ControlFlow 0 1561) 1559)) anon275_correct)))
(let ((anon1376_Then_correct  (=> (< 0 (segLength ExhaleHeap@0 temp1@1 null)) (and (and (and (=> (= (ControlFlow 0 1584) 1573) anon1379_Then_correct) (=> (= (ControlFlow 0 1584) 1561) anon1379_Else_correct)) (=> (= (ControlFlow 0 1584) 1581) anon1378_Then_correct)) (=> (= (ControlFlow 0 1584) 1583) anon1378_Else_correct)))))
(let ((anon1376_Else_correct  (=> (<= (segLength ExhaleHeap@0 temp1@1 null) 0) (and (=> (= (ControlFlow 0 1575) 1573) anon1379_Then_correct) (=> (= (ControlFlow 0 1575) 1561) anon1379_Else_correct)))))
(let ((anon1373_Then_correct  (=> (not (= temp1@1 (MapType0Select ExhaleHeap@0 this@@66 Nodes))) (and (and (and (=> (= (ControlFlow 0 1585) 1584) anon1376_Then_correct) (=> (= (ControlFlow 0 1585) 1575) anon1376_Else_correct)) (=> (= (ControlFlow 0 1585) 1577) anon1375_Then_correct)) (=> (= (ControlFlow 0 1585) 1579) anon1375_Else_correct)))))
(let ((anon1373_Else_correct  (=> (= temp1@1 (MapType0Select ExhaleHeap@0 this@@66 Nodes)) (and (=> (= (ControlFlow 0 1574) 1573) anon1379_Then_correct) (=> (= (ControlFlow 0 1574) 1561) anon1379_Else_correct)))))
(let ((anon255_correct  (=> (state ExhaleHeap@0 Mask@263) (and (=> (= (ControlFlow 0 1586) (- 0 1587)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (=> (= (ControlFlow 0 1586) 1585) anon1373_Then_correct) (=> (= (ControlFlow 0 1586) 1574) anon1373_Else_correct)))))))
(let ((anon254_correct  (=> (and (or (< (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 temp1@1 null 0)) (< (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 temp2@0 null 0))) (= (ControlFlow 0 1604) 1586)) anon255_correct)))
(let ((anon1366_Then_correct  (=> (not (< (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 temp1@1 null 0))) (and (=> (= (ControlFlow 0 1621) (- 0 1623)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (=> (= (ControlFlow 0 1621) (- 0 1622)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (and (and (and (and (and (=> (= (ControlFlow 0 1621) 1604) anon254_correct) (=> (= (ControlFlow 0 1621) 1618) anon1372_Then_correct)) (=> (= (ControlFlow 0 1621) 1620) anon1372_Else_correct)) (=> (= (ControlFlow 0 1621) 1613) anon1370_Then_correct)) (=> (= (ControlFlow 0 1621) 1615) anon1370_Else_correct)) (=> (= (ControlFlow 0 1621) 1607) anon1368_Then_correct)) (=> (= (ControlFlow 0 1621) 1609) anon1368_Else_correct)))))))))
(let ((anon1366_Else_correct  (=> (and (< (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 temp1@1 null 0)) (= (ControlFlow 0 1605) 1604)) anon254_correct)))
(let ((anon1359_Then_correct  (=> (and (and (< 0 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (and (< 0 (segLength ExhaleHeap@0 temp1@1 null)) (< 0 (segLength ExhaleHeap@0 temp2@0 null)))) (state ExhaleHeap@0 Mask@263)) (and (=> (= (ControlFlow 0 1624) (- 0 1626)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (=> (= (ControlFlow 0 1624) (- 0 1625)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (and (and (and (and (and (and (=> (= (ControlFlow 0 1624) 1621) anon1366_Then_correct) (=> (= (ControlFlow 0 1624) 1605) anon1366_Else_correct)) (=> (= (ControlFlow 0 1624) 1601) anon1365_Then_correct)) (=> (= (ControlFlow 0 1624) 1603) anon1365_Else_correct)) (=> (= (ControlFlow 0 1624) 1596) anon1363_Then_correct)) (=> (= (ControlFlow 0 1624) 1598) anon1363_Else_correct)) (=> (= (ControlFlow 0 1624) 1590) anon1361_Then_correct)) (=> (= (ControlFlow 0 1624) 1592) anon1361_Else_correct)))))))))
(let ((anon1359_Else_correct  (=> (and (not (and (< 0 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (and (< 0 (segLength ExhaleHeap@0 temp1@1 null)) (< 0 (segLength ExhaleHeap@0 temp2@0 null))))) (= (ControlFlow 0 1588) 1586)) anon255_correct)))
(let ((anon1356_Then_correct  (=> (< 0 (segLength ExhaleHeap@0 temp1@1 null)) (and (and (and (=> (= (ControlFlow 0 1637) 1624) anon1359_Then_correct) (=> (= (ControlFlow 0 1637) 1588) anon1359_Else_correct)) (=> (= (ControlFlow 0 1637) 1634) anon1358_Then_correct)) (=> (= (ControlFlow 0 1637) 1636) anon1358_Else_correct)))))
(let ((anon1356_Else_correct  (=> (<= (segLength ExhaleHeap@0 temp1@1 null) 0) (and (=> (= (ControlFlow 0 1628) 1624) anon1359_Then_correct) (=> (= (ControlFlow 0 1628) 1588) anon1359_Else_correct)))))
(let ((anon1353_Then_correct  (=> (< 0 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (and (and (and (=> (= (ControlFlow 0 1638) 1637) anon1356_Then_correct) (=> (= (ControlFlow 0 1638) 1628) anon1356_Else_correct)) (=> (= (ControlFlow 0 1638) 1630) anon1355_Then_correct)) (=> (= (ControlFlow 0 1638) 1632) anon1355_Else_correct)))))
(let ((anon1353_Else_correct  (=> (<= (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 0) (and (=> (= (ControlFlow 0 1627) 1624) anon1359_Then_correct) (=> (= (ControlFlow 0 1627) 1588) anon1359_Else_correct)))))
(let ((anon217_correct true))
(let ((anon1352_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1439) 1436)) anon217_correct)))
(let ((anon1352_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1437) (- 0 1438)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1437) 1436) anon217_correct))))))
(let ((anon214_correct  (=> (state ExhaleHeap@0 Mask@263) (and (=> (= (ControlFlow 0 1639) (- 0 1640)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (and (and (=> (= (ControlFlow 0 1639) 1638) anon1353_Then_correct) (=> (= (ControlFlow 0 1639) 1627) anon1353_Else_correct)) (=> (= (ControlFlow 0 1639) 1437) anon1352_Then_correct)) (=> (= (ControlFlow 0 1639) 1439) anon1352_Else_correct)))))))
(let ((anon1349_Else_correct  (=> (and (< (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 temp2@0 null 0)) (= (ControlFlow 0 1662) 1639)) anon214_correct)))
(let ((anon1344_Then_correct  (=> (and (and (<= 2 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (= (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 2)))) (state ExhaleHeap@0 Mask@263)) (and (=> (= (ControlFlow 0 1678) (- 0 1680)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (=> (= (ControlFlow 0 1678) (- 0 1679)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (and (and (and (and (and (=> (= (ControlFlow 0 1678) 1662) anon1349_Else_correct) (=> (= (ControlFlow 0 1678) 1675) anon1350_Then_correct)) (=> (= (ControlFlow 0 1678) 1677) anon1350_Else_correct)) (=> (= (ControlFlow 0 1678) 1670) anon1348_Then_correct)) (=> (= (ControlFlow 0 1678) 1672) anon1348_Else_correct)) (=> (= (ControlFlow 0 1678) 1664) anon1346_Then_correct)) (=> (= (ControlFlow 0 1678) 1666) anon1346_Else_correct)))))))))
(let ((anon1344_Else_correct  (=> (and (not (and (<= 2 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (= (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 2))))) (= (ControlFlow 0 1661) 1639)) anon214_correct)))
(let ((anon1338_Else_correct  (and (=> (= (ControlFlow 0 1702) (- 0 1704)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (=> (= (ControlFlow 0 1702) (- 0 1703)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (and (and (and (and (=> (= (ControlFlow 0 1702) 1678) anon1344_Then_correct) (=> (= (ControlFlow 0 1702) 1661) anon1344_Else_correct)) (=> (= (ControlFlow 0 1702) 1699) anon1343_Then_correct)) (=> (= (ControlFlow 0 1702) 1701) anon1343_Else_correct)) (=> (= (ControlFlow 0 1702) 1693) anon1341_Then_correct)) (=> (= (ControlFlow 0 1702) 1695) anon1341_Else_correct))))))))
(let ((anon1335_Then_correct  (=> (<= 2 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (and (=> (= (ControlFlow 0 1705) (- 0 1707)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (=> (= (ControlFlow 0 1705) (- 0 1706)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (and (and (and (=> (= (ControlFlow 0 1705) 1702) anon1338_Else_correct) (=> (= (ControlFlow 0 1705) 1689) anon1339_Then_correct)) (=> (= (ControlFlow 0 1705) 1691) anon1339_Else_correct)) (=> (= (ControlFlow 0 1705) 1683) anon1337_Then_correct)) (=> (= (ControlFlow 0 1705) 1685) anon1337_Else_correct)))))))))
(let ((anon1335_Else_correct  (=> (< (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 2) (and (=> (= (ControlFlow 0 1681) 1678) anon1344_Then_correct) (=> (= (ControlFlow 0 1681) 1661) anon1344_Else_correct)))))
(let ((anon1331_Else_correct  (=> (<= (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 temp2@0 null 0)) (and (=> (= (ControlFlow 0 1708) (- 0 1709)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (and (and (=> (= (ControlFlow 0 1708) 1705) anon1335_Then_correct) (=> (= (ControlFlow 0 1708) 1681) anon1335_Else_correct)) (=> (= (ControlFlow 0 1708) 1658) anon1334_Then_correct)) (=> (= (ControlFlow 0 1708) 1660) anon1334_Else_correct)))))))
(let ((anon1326_Then_correct  (=> (and (and (< 0 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (< 0 (segLength ExhaleHeap@0 temp2@0 null))) (state ExhaleHeap@0 Mask@263)) (and (=> (= (ControlFlow 0 1710) (- 0 1712)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (=> (= (ControlFlow 0 1710) (- 0 1711)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (and (and (and (and (and (=> (= (ControlFlow 0 1710) 1708) anon1331_Else_correct) (=> (= (ControlFlow 0 1710) 1654) anon1332_Then_correct)) (=> (= (ControlFlow 0 1710) 1656) anon1332_Else_correct)) (=> (= (ControlFlow 0 1710) 1649) anon1330_Then_correct)) (=> (= (ControlFlow 0 1710) 1651) anon1330_Else_correct)) (=> (= (ControlFlow 0 1710) 1643) anon1328_Then_correct)) (=> (= (ControlFlow 0 1710) 1645) anon1328_Else_correct)))))))))
(let ((anon1326_Else_correct  (=> (and (not (and (< 0 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (< 0 (segLength ExhaleHeap@0 temp2@0 null)))) (= (ControlFlow 0 1641) 1639)) anon214_correct)))
(let ((anon1323_Then_correct  (=> (< 0 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (and (and (and (=> (= (ControlFlow 0 1718) 1710) anon1326_Then_correct) (=> (= (ControlFlow 0 1718) 1641) anon1326_Else_correct)) (=> (= (ControlFlow 0 1718) 1715) anon1325_Then_correct)) (=> (= (ControlFlow 0 1718) 1717) anon1325_Else_correct)))))
(let ((anon1323_Else_correct  (=> (<= (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 0) (and (=> (= (ControlFlow 0 1713) 1710) anon1326_Then_correct) (=> (= (ControlFlow 0 1713) 1641) anon1326_Else_correct)))))
(let ((anon160_correct true))
(let ((anon1322_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1435) 1432)) anon160_correct)))
(let ((anon1322_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1433) (- 0 1434)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1433) 1432) anon160_correct))))))
(let ((anon157_correct  (=> (state ExhaleHeap@0 Mask@263) (and (=> (= (ControlFlow 0 1719) (- 0 1720)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (and (and (=> (= (ControlFlow 0 1719) 1718) anon1323_Then_correct) (=> (= (ControlFlow 0 1719) 1713) anon1323_Else_correct)) (=> (= (ControlFlow 0 1719) 1433) anon1322_Then_correct)) (=> (= (ControlFlow 0 1719) 1435) anon1322_Else_correct)))))))
(let ((anon1319_Else_correct  (=> (and (< (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 temp1@1 null 0)) (= (ControlFlow 0 1742) 1719)) anon157_correct)))
(let ((anon1314_Then_correct  (=> (and (and (<= 2 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (= (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 2)))) (state ExhaleHeap@0 Mask@263)) (and (=> (= (ControlFlow 0 1758) (- 0 1760)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (=> (= (ControlFlow 0 1758) (- 0 1759)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (and (and (and (and (and (=> (= (ControlFlow 0 1758) 1742) anon1319_Else_correct) (=> (= (ControlFlow 0 1758) 1755) anon1320_Then_correct)) (=> (= (ControlFlow 0 1758) 1757) anon1320_Else_correct)) (=> (= (ControlFlow 0 1758) 1750) anon1318_Then_correct)) (=> (= (ControlFlow 0 1758) 1752) anon1318_Else_correct)) (=> (= (ControlFlow 0 1758) 1744) anon1316_Then_correct)) (=> (= (ControlFlow 0 1758) 1746) anon1316_Else_correct)))))))))
(let ((anon1314_Else_correct  (=> (and (not (and (<= 2 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (= (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 2))))) (= (ControlFlow 0 1741) 1719)) anon157_correct)))
(let ((anon1308_Else_correct  (and (=> (= (ControlFlow 0 1782) (- 0 1784)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (=> (= (ControlFlow 0 1782) (- 0 1783)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (and (and (and (and (=> (= (ControlFlow 0 1782) 1758) anon1314_Then_correct) (=> (= (ControlFlow 0 1782) 1741) anon1314_Else_correct)) (=> (= (ControlFlow 0 1782) 1779) anon1313_Then_correct)) (=> (= (ControlFlow 0 1782) 1781) anon1313_Else_correct)) (=> (= (ControlFlow 0 1782) 1773) anon1311_Then_correct)) (=> (= (ControlFlow 0 1782) 1775) anon1311_Else_correct))))))))
(let ((anon1305_Then_correct  (=> (<= 2 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (and (=> (= (ControlFlow 0 1785) (- 0 1787)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (=> (= (ControlFlow 0 1785) (- 0 1786)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (and (and (and (=> (= (ControlFlow 0 1785) 1782) anon1308_Else_correct) (=> (= (ControlFlow 0 1785) 1769) anon1309_Then_correct)) (=> (= (ControlFlow 0 1785) 1771) anon1309_Else_correct)) (=> (= (ControlFlow 0 1785) 1763) anon1307_Then_correct)) (=> (= (ControlFlow 0 1785) 1765) anon1307_Else_correct)))))))))
(let ((anon1305_Else_correct  (=> (< (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 2) (and (=> (= (ControlFlow 0 1761) 1758) anon1314_Then_correct) (=> (= (ControlFlow 0 1761) 1741) anon1314_Else_correct)))))
(let ((anon1301_Else_correct  (=> (<= (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 temp1@1 null 0)) (and (=> (= (ControlFlow 0 1788) (- 0 1789)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (and (and (=> (= (ControlFlow 0 1788) 1785) anon1305_Then_correct) (=> (= (ControlFlow 0 1788) 1761) anon1305_Else_correct)) (=> (= (ControlFlow 0 1788) 1738) anon1304_Then_correct)) (=> (= (ControlFlow 0 1788) 1740) anon1304_Else_correct)))))))
(let ((anon1296_Then_correct  (=> (and (and (< 0 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (< 0 (segLength ExhaleHeap@0 temp1@1 null))) (state ExhaleHeap@0 Mask@263)) (and (=> (= (ControlFlow 0 1790) (- 0 1792)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (=> (= (ControlFlow 0 1790) (- 0 1791)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (and (and (and (and (and (=> (= (ControlFlow 0 1790) 1788) anon1301_Else_correct) (=> (= (ControlFlow 0 1790) 1734) anon1302_Then_correct)) (=> (= (ControlFlow 0 1790) 1736) anon1302_Else_correct)) (=> (= (ControlFlow 0 1790) 1729) anon1300_Then_correct)) (=> (= (ControlFlow 0 1790) 1731) anon1300_Else_correct)) (=> (= (ControlFlow 0 1790) 1723) anon1298_Then_correct)) (=> (= (ControlFlow 0 1790) 1725) anon1298_Else_correct)))))))))
(let ((anon1296_Else_correct  (=> (and (not (and (< 0 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (< 0 (segLength ExhaleHeap@0 temp1@1 null)))) (= (ControlFlow 0 1721) 1719)) anon157_correct)))
(let ((anon1293_Then_correct  (=> (< 0 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (and (and (and (=> (= (ControlFlow 0 1798) 1790) anon1296_Then_correct) (=> (= (ControlFlow 0 1798) 1721) anon1296_Else_correct)) (=> (= (ControlFlow 0 1798) 1795) anon1295_Then_correct)) (=> (= (ControlFlow 0 1798) 1797) anon1295_Else_correct)))))
(let ((anon1293_Else_correct  (=> (<= (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 0) (and (=> (= (ControlFlow 0 1793) 1790) anon1296_Then_correct) (=> (= (ControlFlow 0 1793) 1721) anon1296_Else_correct)))))
(let ((anon103_correct true))
(let ((anon1292_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1431) 1428)) anon103_correct)))
(let ((anon1292_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1429) (- 0 1430)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1429) 1428) anon103_correct))))))
(let ((anon1289_Else_correct  (=> (and (presorted ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (state ExhaleHeap@0 Mask@263)) (and (=> (= (ControlFlow 0 1799) (- 0 1800)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (and (and (=> (= (ControlFlow 0 1799) 1798) anon1293_Then_correct) (=> (= (ControlFlow 0 1799) 1793) anon1293_Else_correct)) (=> (= (ControlFlow 0 1799) 1429) anon1292_Then_correct)) (=> (= (ControlFlow 0 1799) 1431) anon1292_Else_correct)))))))
(let ((anon99_correct true))
(let ((anon1290_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1427) 1424)) anon99_correct)))
(let ((anon1290_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1425) (- 0 1426)) (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@263 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)))) (=> (= (ControlFlow 0 1425) 1424) anon99_correct))))))
(let ((anon1287_Else_correct  (=> (sorted ExhaleHeap@0 temp2@0 null) (=> (and (and (state ExhaleHeap@0 Mask@261) (not (= this@@66 null))) (and (= Mask@262 (MapType1Store Mask@261 this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select Mask@261 this@@66 Nodes)) FullPerm)))) (state ExhaleHeap@0 Mask@262))) (and (=> (= (ControlFlow 0 1801) (- 0 1804)) (HasDirectPerm Mask@262 this@@66 Nodes)) (=> (HasDirectPerm Mask@262 this@@66 Nodes) (=> (and (not (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) null)) (state ExhaleHeap@0 Mask@262)) (and (=> (= (ControlFlow 0 1801) (- 0 1803)) (HasDirectPerm Mask@262 this@@66 Nodes)) (=> (HasDirectPerm Mask@262 this@@66 Nodes) (=> (= Mask@263 (MapType1Store Mask@262 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (real_2_U (+ (U_2_real (MapType1Select Mask@262 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))) FullPerm)))) (=> (and (state ExhaleHeap@0 Mask@263) (state ExhaleHeap@0 Mask@263)) (and (=> (= (ControlFlow 0 1801) (- 0 1802)) (HasDirectPerm Mask@263 this@@66 Nodes)) (=> (HasDirectPerm Mask@263 this@@66 Nodes) (and (and (=> (= (ControlFlow 0 1801) 1799) anon1289_Else_correct) (=> (= (ControlFlow 0 1801) 1425) anon1290_Then_correct)) (=> (= (ControlFlow 0 1801) 1427) anon1290_Else_correct)))))))))))))))
(let ((anon95_correct true))
(let ((anon1288_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1423) 1420)) anon95_correct)))
(let ((anon1288_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1421) (- 0 1422)) (<= FullPerm (U_2_real (MapType1Select Mask@261 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@261 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 1421) 1420) anon95_correct))))))
(let ((anon1285_Else_correct  (=> (sorted ExhaleHeap@0 temp1@1 null) (=> (and (and (state ExhaleHeap@0 Mask@12) (= Mask@261 (MapType1Store Mask@12 null (heapseg temp2@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@12 null (heapseg temp2@0 null))) FullPerm))))) (and (state ExhaleHeap@0 Mask@261) (state ExhaleHeap@0 Mask@261))) (and (and (=> (= (ControlFlow 0 1805) 1801) anon1287_Else_correct) (=> (= (ControlFlow 0 1805) 1421) anon1288_Then_correct)) (=> (= (ControlFlow 0 1805) 1423) anon1288_Else_correct))))))
(let ((anon91_correct true))
(let ((anon1286_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1419) 1416)) anon91_correct)))
(let ((anon1286_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1417) (- 0 1418)) (<= FullPerm (U_2_real (MapType1Select Mask@12 null (heapseg temp1@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@12 null (heapseg temp1@1 null)))) (=> (= (ControlFlow 0 1417) 1416) anon91_correct))))))
(let ((anon1284_Then_correct  (=> (= Mask@12 (MapType1Store Mask@11 null (heapseg temp1@1 null) (real_2_U (+ (U_2_real (MapType1Select Mask@11 null (heapseg temp1@1 null))) FullPerm)))) (=> (and (state ExhaleHeap@0 Mask@12) (state ExhaleHeap@0 Mask@12)) (and (and (=> (= (ControlFlow 0 1806) 1805) anon1285_Else_correct) (=> (= (ControlFlow 0 1806) 1417) anon1286_Then_correct)) (=> (= (ControlFlow 0 1806) 1419) anon1286_Else_correct))))))
(let ((anon440_correct true))
(let ((anon1470_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1239) 1236)) anon440_correct)))
(let ((anon1470_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1237) (- 0 1238)) (<= FullPerm (U_2_real (MapType1Select UnfoldingMask@14 null (tree temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select UnfoldingMask@14 null (tree temp1@1)))) (=> (= (ControlFlow 0 1237) 1236) anon440_correct))))))
(let ((anon431_correct true))
(let ((anon1465_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1235) 1232)) anon431_correct)))
(let ((anon1465_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1233) (- 0 1234)) (<= FullPerm (U_2_real (MapType1Select Mask@241 null (heapseg temp1@1 temp2@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@241 null (heapseg temp1@1 temp2@0)))) (=> (= (ControlFlow 0 1233) 1232) anon431_correct))))))
(let ((anon500_correct true))
(let ((anon1501_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1226) 1223)) anon500_correct)))
(let ((anon1501_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1224) (- 0 1225)) (<= FullPerm (U_2_real (MapType1Select Mask@156 null (tree temp2@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@156 null (tree temp2@0)))) (=> (= (ControlFlow 0 1224) 1223) anon500_correct))))))
(let ((anon496_correct  (=> (and (= Mask@229 (MapType1Store Mask@156 null (heapseg (MapType0Select Heap@100 temp1@1 sibling) null) (real_2_U (- (U_2_real (MapType1Select Mask@156 null (heapseg (MapType0Select Heap@100 temp1@1 sibling) null))) FullPerm)))) (= (ControlFlow 0 1219) (- 0 1218))) (< 0 (segLength Heap@100 (MapType0Select Heap@100 temp1@1 sibling) null)))))
(let ((anon1499_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1222) 1219)) anon496_correct)))
(let ((anon1499_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1220) (- 0 1221)) (<= FullPerm (U_2_real (MapType1Select Mask@156 null (heapseg (MapType0Select Heap@100 temp1@1 sibling) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@156 null (heapseg (MapType0Select Heap@100 temp1@1 sibling) null)))) (=> (= (ControlFlow 0 1220) 1219) anon496_correct))))))
(let ((anon721_correct true))
(let ((anon1615_Else_correct  (=> (and (= temp2@6 null) (= (ControlFlow 0 837) 834)) anon721_correct)))
(let ((anon1615_Then_correct  (=> (not (= temp2@6 null)) (and (=> (= (ControlFlow 0 835) (- 0 836)) (= (segParent Heap@214 temp2@6 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (=> (= (segParent Heap@214 temp2@6 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (=> (= (ControlFlow 0 835) 834) anon721_correct))))))
(let ((anon1614_Else_correct  (=> (= temp1@8 null) (and (=> (= (ControlFlow 0 840) 835) anon1615_Then_correct) (=> (= (ControlFlow 0 840) 837) anon1615_Else_correct)))))
(let ((anon1614_Then_correct  (=> (not (= temp1@8 null)) (and (=> (= (ControlFlow 0 838) (- 0 839)) (= (segParent Heap@214 temp1@8 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (=> (= (segParent Heap@214 temp1@8 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (and (=> (= (ControlFlow 0 838) 835) anon1615_Then_correct) (=> (= (ControlFlow 0 838) 837) anon1615_Else_correct)))))))
(let ((anon1613_Else_correct  (=> (= (MapType0Select Heap@214 this@@66 Nodes) temp1@8) (and (=> (= (ControlFlow 0 843) 838) anon1614_Then_correct) (=> (= (ControlFlow 0 843) 840) anon1614_Else_correct)))))
(let ((anon1613_Then_correct  (=> (not (= (MapType0Select Heap@214 this@@66 Nodes) temp1@8)) (and (=> (= (ControlFlow 0 841) (- 0 842)) (= (segParent Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (=> (= (segParent Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (and (=> (= (ControlFlow 0 841) 838) anon1614_Then_correct) (=> (= (ControlFlow 0 841) 840) anon1614_Else_correct)))))))
(let ((anon1612_Else_correct  (=> (not (and (not (= (MapType0Select Heap@214 this@@66 Nodes) temp1@8)) (not (= temp2@6 null)))) (and (=> (= (ControlFlow 0 846) 841) anon1613_Then_correct) (=> (= (ControlFlow 0 846) 843) anon1613_Else_correct)))))
(let ((anon1612_Then_correct  (=> (and (not (= (MapType0Select Heap@214 this@@66 Nodes) temp1@8)) (not (= temp2@6 null))) (and (=> (= (ControlFlow 0 844) (- 0 845)) (= (segParent Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) (segParent Heap@214 temp2@6 null))) (=> (= (segParent Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) (segParent Heap@214 temp2@6 null)) (and (=> (= (ControlFlow 0 844) 841) anon1613_Then_correct) (=> (= (ControlFlow 0 844) 843) anon1613_Else_correct)))))))
(let ((anon1611_Else_correct  (=> (not (and (not (= (MapType0Select Heap@214 this@@66 Nodes) temp1@8)) (not (= temp1@8 null)))) (and (=> (= (ControlFlow 0 849) 844) anon1612_Then_correct) (=> (= (ControlFlow 0 849) 846) anon1612_Else_correct)))))
(let ((anon1611_Then_correct  (=> (and (not (= (MapType0Select Heap@214 this@@66 Nodes) temp1@8)) (not (= temp1@8 null))) (and (=> (= (ControlFlow 0 847) (- 0 848)) (= (segParent Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) (segParent Heap@214 temp1@8 null))) (=> (= (segParent Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) (segParent Heap@214 temp1@8 null)) (and (=> (= (ControlFlow 0 847) 844) anon1612_Then_correct) (=> (= (ControlFlow 0 847) 846) anon1612_Else_correct)))))))
(let ((anon1610_Else_correct  (=> (not (and (not (= temp1@8 null)) (not (= temp2@6 null)))) (and (=> (= (ControlFlow 0 852) 847) anon1611_Then_correct) (=> (= (ControlFlow 0 852) 849) anon1611_Else_correct)))))
(let ((anon1610_Then_correct  (=> (and (not (= temp1@8 null)) (not (= temp2@6 null))) (and (=> (= (ControlFlow 0 850) (- 0 851)) (= (segParent Heap@214 temp1@8 null) (segParent Heap@214 temp2@6 null))) (=> (= (segParent Heap@214 temp1@8 null) (segParent Heap@214 temp2@6 null)) (and (=> (= (ControlFlow 0 850) 847) anon1611_Then_correct) (=> (= (ControlFlow 0 850) 849) anon1611_Else_correct)))))))
(let ((anon709_correct  (and (=> (= (ControlFlow 0 853) (- 0 854)) (= (+ (+ (segSize Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) (segSize Heap@214 temp1@8 null)) (segSize Heap@214 temp2@6 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null)))) (=> (= (+ (+ (segSize Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) (segSize Heap@214 temp1@8 null)) (segSize Heap@214 temp2@6 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null))) (and (=> (= (ControlFlow 0 853) 850) anon1610_Then_correct) (=> (= (ControlFlow 0 853) 852) anon1610_Else_correct))))))
(let ((anon1609_Else_correct  (=> (and (not (and (not (= temp1@8 (MapType0Select Heap@214 this@@66 Nodes))) (and (< 0 (segLength Heap@214 temp1@8 null)) (< 0 (segLength Heap@214 temp2@6 null))))) (= (ControlFlow 0 857) 853)) anon709_correct)))
(let ((anon1609_Then_correct  (=> (and (not (= temp1@8 (MapType0Select Heap@214 this@@66 Nodes))) (and (< 0 (segLength Heap@214 temp1@8 null)) (< 0 (segLength Heap@214 temp2@6 null)))) (and (=> (= (ControlFlow 0 855) (- 0 856)) (<= (segDegree Heap@214 temp1@8 null 0) (segDegree Heap@214 temp2@6 null 0))) (=> (<= (segDegree Heap@214 temp1@8 null 0) (segDegree Heap@214 temp2@6 null 0)) (=> (= (ControlFlow 0 855) 853) anon709_correct))))))
(let ((anon1608_Else_correct  (=> (not (and (< 0 (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8)) (and (< 0 (segLength Heap@214 temp1@8 null)) (< 0 (segLength Heap@214 temp2@6 null))))) (and (=> (= (ControlFlow 0 860) 855) anon1609_Then_correct) (=> (= (ControlFlow 0 860) 857) anon1609_Else_correct)))))
(let ((anon1608_Then_correct  (=> (and (< 0 (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8)) (and (< 0 (segLength Heap@214 temp1@8 null)) (< 0 (segLength Heap@214 temp2@6 null)))) (and (=> (= (ControlFlow 0 858) (- 0 859)) (or (< (segDegree Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8 (- (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) 1)) (segDegree Heap@214 temp1@8 null 0)) (< (segDegree Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8 (- (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) 1)) (segDegree Heap@214 temp2@6 null 0)))) (=> (or (< (segDegree Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8 (- (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) 1)) (segDegree Heap@214 temp1@8 null 0)) (< (segDegree Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8 (- (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) 1)) (segDegree Heap@214 temp2@6 null 0))) (and (=> (= (ControlFlow 0 858) 855) anon1609_Then_correct) (=> (= (ControlFlow 0 858) 857) anon1609_Else_correct)))))))
(let ((anon1607_Else_correct  (=> (not (and (<= 2 (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8)) (= (segDegree Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8 (- (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) 1)) (segDegree Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8 (- (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) 2))))) (and (=> (= (ControlFlow 0 864) 858) anon1608_Then_correct) (=> (= (ControlFlow 0 864) 860) anon1608_Else_correct)))))
(let ((anon1607_Then_correct  (=> (and (<= 2 (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8)) (= (segDegree Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8 (- (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) 1)) (segDegree Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8 (- (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) 2)))) (and (=> (= (ControlFlow 0 862) (- 0 863)) (< (segDegree Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8 (- (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) 1)) (segDegree Heap@214 temp2@6 null 0))) (=> (< (segDegree Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8 (- (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) 1)) (segDegree Heap@214 temp2@6 null 0)) (and (=> (= (ControlFlow 0 862) 858) anon1608_Then_correct) (=> (= (ControlFlow 0 862) 860) anon1608_Else_correct)))))))
(let ((anon1606_Then_correct  (=> (and (< 0 (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8)) (< 0 (segLength Heap@214 temp2@6 null))) (and (=> (= (ControlFlow 0 865) (- 0 866)) (<= (segDegree Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8 (- (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) 1)) (segDegree Heap@214 temp2@6 null 0))) (=> (<= (segDegree Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8 (- (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) 1)) (segDegree Heap@214 temp2@6 null 0)) (and (=> (= (ControlFlow 0 865) 862) anon1607_Then_correct) (=> (= (ControlFlow 0 865) 864) anon1607_Else_correct)))))))
(let ((anon1606_Else_correct  (=> (not (and (< 0 (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8)) (< 0 (segLength Heap@214 temp2@6 null)))) (and (=> (= (ControlFlow 0 861) 858) anon1608_Then_correct) (=> (= (ControlFlow 0 861) 860) anon1608_Else_correct)))))
(let ((anon1605_Else_correct  (=> (not (and (<= 2 (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8)) (= (segDegree Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8 (- (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) 1)) (segDegree Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8 (- (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) 2))))) (and (=> (= (ControlFlow 0 870) 865) anon1606_Then_correct) (=> (= (ControlFlow 0 870) 861) anon1606_Else_correct)))))
(let ((anon1605_Then_correct  (=> (and (<= 2 (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8)) (= (segDegree Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8 (- (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) 1)) (segDegree Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8 (- (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) 2)))) (and (=> (= (ControlFlow 0 868) (- 0 869)) (< (segDegree Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8 (- (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) 1)) (segDegree Heap@214 temp1@8 null 0))) (=> (< (segDegree Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8 (- (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) 1)) (segDegree Heap@214 temp1@8 null 0)) (and (=> (= (ControlFlow 0 868) 865) anon1606_Then_correct) (=> (= (ControlFlow 0 868) 861) anon1606_Else_correct)))))))
(let ((anon1604_Then_correct  (=> (and (< 0 (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8)) (< 0 (segLength Heap@214 temp1@8 null))) (and (=> (= (ControlFlow 0 871) (- 0 872)) (<= (segDegree Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8 (- (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) 1)) (segDegree Heap@214 temp1@8 null 0))) (=> (<= (segDegree Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8 (- (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) 1)) (segDegree Heap@214 temp1@8 null 0)) (and (=> (= (ControlFlow 0 871) 868) anon1605_Then_correct) (=> (= (ControlFlow 0 871) 870) anon1605_Else_correct)))))))
(let ((anon1604_Else_correct  (=> (not (and (< 0 (segLength Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8)) (< 0 (segLength Heap@214 temp1@8 null)))) (and (=> (= (ControlFlow 0 867) 865) anon1606_Then_correct) (=> (= (ControlFlow 0 867) 861) anon1606_Else_correct)))))
(let ((anon699_correct  (=> (= Mask@258 (MapType1Store Mask@257 null (heapseg (MapType0Select Heap@214 this@@66 Nodes) temp1@8) (real_2_U (- (U_2_real (MapType1Select Mask@257 null (heapseg (MapType0Select Heap@214 this@@66 Nodes) temp1@8))) FullPerm)))) (and (=> (= (ControlFlow 0 873) (- 0 874)) (presorted Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8)) (=> (presorted Heap@214 (MapType0Select Heap@214 this@@66 Nodes) temp1@8) (and (=> (= (ControlFlow 0 873) 871) anon1604_Then_correct) (=> (= (ControlFlow 0 873) 867) anon1604_Else_correct)))))))
(let ((anon1603_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 877) 873)) anon699_correct)))
(let ((anon1603_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 875) (- 0 876)) (<= FullPerm (U_2_real (MapType1Select Mask@257 null (heapseg (MapType0Select Heap@214 this@@66 Nodes) temp1@8))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@257 null (heapseg (MapType0Select Heap@214 this@@66 Nodes) temp1@8)))) (=> (= (ControlFlow 0 875) 873) anon699_correct))))))
(let ((anon697_correct  (=> (= Mask@257 (MapType1Store Mask@256 this@@66 Nodes (real_2_U (- (U_2_real (MapType1Select Mask@256 this@@66 Nodes)) FullPerm)))) (and (=> (= (ControlFlow 0 878) (- 0 879)) (not (= (MapType0Select Heap@214 this@@66 Nodes) null))) (=> (not (= (MapType0Select Heap@214 this@@66 Nodes) null)) (and (=> (= (ControlFlow 0 878) 875) anon1603_Then_correct) (=> (= (ControlFlow 0 878) 877) anon1603_Else_correct)))))))
(let ((anon1602_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 882) 878)) anon697_correct)))
(let ((anon1602_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 880) (- 0 881)) (<= FullPerm (U_2_real (MapType1Select Mask@256 this@@66 Nodes)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@256 this@@66 Nodes))) (=> (= (ControlFlow 0 880) 878) anon697_correct))))))
(let ((anon695_correct  (=> (= Mask@256 (MapType1Store Mask@255 null (heapseg temp2@6 null) (real_2_U (- (U_2_real (MapType1Select Mask@255 null (heapseg temp2@6 null))) FullPerm)))) (and (=> (= (ControlFlow 0 883) (- 0 884)) (sorted Heap@214 temp2@6 null)) (=> (sorted Heap@214 temp2@6 null) (and (=> (= (ControlFlow 0 883) 880) anon1602_Then_correct) (=> (= (ControlFlow 0 883) 882) anon1602_Else_correct)))))))
(let ((anon1601_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 887) 883)) anon695_correct)))
(let ((anon1601_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 885) (- 0 886)) (<= FullPerm (U_2_real (MapType1Select Mask@255 null (heapseg temp2@6 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@255 null (heapseg temp2@6 null)))) (=> (= (ControlFlow 0 885) 883) anon695_correct))))))
(let ((anon693_correct  (=> (= Mask@255 (MapType1Store Mask@254 null (heapseg temp1@8 null) (real_2_U (- (U_2_real (MapType1Select Mask@254 null (heapseg temp1@8 null))) FullPerm)))) (and (=> (= (ControlFlow 0 888) (- 0 889)) (sorted Heap@214 temp1@8 null)) (=> (sorted Heap@214 temp1@8 null) (and (=> (= (ControlFlow 0 888) 885) anon1601_Then_correct) (=> (= (ControlFlow 0 888) 887) anon1601_Else_correct)))))))
(let ((anon1600_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 892) 888)) anon693_correct)))
(let ((anon1600_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 890) (- 0 891)) (<= FullPerm (U_2_real (MapType1Select Mask@254 null (heapseg temp1@8 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@254 null (heapseg temp1@8 null)))) (=> (= (ControlFlow 0 890) 888) anon693_correct))))))
(let ((anon691_correct  (=> (state Heap@214 Mask@254) (and (=> (= (ControlFlow 0 893) 890) anon1600_Then_correct) (=> (= (ControlFlow 0 893) 892) anon1600_Else_correct)))))
(let ((anon482_correct  (=> (state Heap@213 Mask@253) (=> (and (state Heap@213 Mask@253) (= temp1@8 temp2@0)) (=> (and (and (= temp2@6 temp2@1) (= Heap@214 Heap@213)) (and (= Mask@254 Mask@253) (= (ControlFlow 0 1240) 893))) anon691_correct)))))
(let ((anon1491_Else_correct  (=> (= temp2@0 null) (=> (and (= Heap@213 Heap@209) (= (ControlFlow 0 1242) 1240)) anon482_correct))))
(let ((anon1491_Then_correct  (=> (and (and (and (not (= temp2@0 null)) (forall ((o_60 T@U) (f_64 T@U) ) (! (let ((B@@11 (FieldTypeInv1 (type f_64))))
(let ((A@@12 (FieldTypeInv0 (type f_64))))
 (=> (and (and (= (type o_60) RefType) (= (type f_64) (FieldType A@@12 B@@11))) (or (U_2_bool (MapType1Select (MapType0Select Heap@209 null (|heapseg#sm| temp2@0 null)) o_60 f_64)) (U_2_bool (MapType1Select (MapType0Select Heap@209 null (|tree#sm| temp2@0)) o_60 f_64)))) (U_2_bool (MapType1Select newPMask@55 o_60 f_64)))))
 :qid |stdinbpl.9372:41|
 :skolemid |158|
 :pattern ( (MapType1Select newPMask@55 o_60 f_64))
))) (and (= Heap@210 (MapType0Store Heap@209 null (|heapseg#sm| temp2@0 null) newPMask@55)) (= Heap@211 (MapType0Store Heap@210 null (|heapseg#sm| temp2@0 null) (MapType1Store (MapType0Select Heap@210 null (|heapseg#sm| temp2@0 null)) temp2@0 sibling (bool_2_U true)))))) (and (and (forall ((o_61 T@U) (f_65 T@U) ) (! (let ((B@@12 (FieldTypeInv1 (type f_65))))
(let ((A@@13 (FieldTypeInv0 (type f_65))))
 (=> (and (and (= (type o_61) RefType) (= (type f_65) (FieldType A@@13 B@@12))) (or (U_2_bool (MapType1Select (MapType0Select Heap@211 null (|heapseg#sm| temp2@0 null)) o_61 f_65)) (U_2_bool (MapType1Select (MapType0Select Heap@211 null (|heapseg#sm| (MapType0Select Heap@211 temp2@0 sibling) null)) o_61 f_65)))) (U_2_bool (MapType1Select newPMask@56 o_61 f_65)))))
 :qid |stdinbpl.9379:41|
 :skolemid |159|
 :pattern ( (MapType1Select newPMask@56 o_61 f_65))
)) (= Heap@212 (MapType0Store Heap@211 null (|heapseg#sm| temp2@0 null) newPMask@56))) (and (= Heap@213 Heap@212) (= (ControlFlow 0 1241) 1240)))) anon482_correct)))
(let ((anon1490_Else_correct  (=> (and (HasDirectPerm Mask@253 null (heapseg temp2@0 null)) (= Heap@209 ExhaleHeap@64)) (and (=> (= (ControlFlow 0 1244) 1241) anon1491_Then_correct) (=> (= (ControlFlow 0 1244) 1242) anon1491_Else_correct)))))
(let ((anon1490_Then_correct  (=> (and (and (not (HasDirectPerm Mask@253 null (heapseg temp2@0 null))) (= Heap@207 (MapType0Store ExhaleHeap@64 null (|heapseg#sm| temp2@0 null) ZeroPMask))) (and (= Heap@208 (MapType0Store Heap@207 null (heapseg temp2@0 null) freshVersion@18)) (= Heap@209 Heap@208))) (and (=> (= (ControlFlow 0 1243) 1241) anon1491_Then_correct) (=> (= (ControlFlow 0 1243) 1242) anon1491_Else_correct)))))
(let ((anon478_correct  (=> (= Mask@253 (MapType1Store Mask@252 null (heapseg temp2@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@252 null (heapseg temp2@0 null))) FullPerm)))) (=> (and (and (state ExhaleHeap@64 Mask@253) (state ExhaleHeap@64 Mask@253)) (and (|heapseg#trigger| ExhaleHeap@64 (heapseg temp2@0 null)) (= (MapType0Select ExhaleHeap@64 null (heapseg temp2@0 null)) (FrameFragment (ite (not (= temp2@0 null)) (CombineFrames (MapType0Select ExhaleHeap@64 null (tree temp2@0)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@64 temp2@0 sibling)) (CombineFrames (MapType0Select ExhaleHeap@64 null (heapseg (MapType0Select ExhaleHeap@64 temp2@0 sibling) null)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@64 temp2@0 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 1245) 1243) anon1490_Then_correct) (=> (= (ControlFlow 0 1245) 1244) anon1490_Else_correct))))))
(let ((anon1489_Else_correct  (=> (= (MapType0Select ExhaleHeap@64 temp2@0 sibling) null) (=> (and (= Mask@252 Mask@251) (= (ControlFlow 0 1249) 1245)) anon478_correct))))
(let ((anon1489_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@64 temp2@0 sibling) null)) (and (=> (= (ControlFlow 0 1247) (- 0 1248)) (= (treeParent ExhaleHeap@64 temp2@0) (segParent ExhaleHeap@64 (MapType0Select ExhaleHeap@64 temp2@0 sibling) null))) (=> (= (treeParent ExhaleHeap@64 temp2@0) (segParent ExhaleHeap@64 (MapType0Select ExhaleHeap@64 temp2@0 sibling) null)) (=> (and (= Mask@252 Mask@251) (= (ControlFlow 0 1247) 1245)) anon478_correct))))))
(let ((anon476_correct  (=> (and (= Mask@251 (MapType1Store Mask@250 null (heapseg (MapType0Select ExhaleHeap@64 temp2@0 sibling) null) (real_2_U (- (U_2_real (MapType1Select Mask@250 null (heapseg (MapType0Select ExhaleHeap@64 temp2@0 sibling) null))) FullPerm)))) (InsidePredicate (heapseg temp2@0 null) (MapType0Select ExhaleHeap@64 null (heapseg temp2@0 null)) (heapseg (MapType0Select ExhaleHeap@64 temp2@0 sibling) null) (MapType0Select ExhaleHeap@64 null (heapseg (MapType0Select ExhaleHeap@64 temp2@0 sibling) null)))) (and (=> (= (ControlFlow 0 1250) 1247) anon1489_Then_correct) (=> (= (ControlFlow 0 1250) 1249) anon1489_Else_correct)))))
(let ((anon1488_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1253) 1250)) anon476_correct)))
(let ((anon1488_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1251) (- 0 1252)) (<= FullPerm (U_2_real (MapType1Select Mask@250 null (heapseg (MapType0Select ExhaleHeap@64 temp2@0 sibling) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@250 null (heapseg (MapType0Select ExhaleHeap@64 temp2@0 sibling) null)))) (=> (= (ControlFlow 0 1251) 1250) anon476_correct))))))
(let ((anon474_correct  (=> (= Mask@250 (MapType1Store Mask@249 temp2@0 sibling (real_2_U (- (U_2_real (MapType1Select Mask@249 temp2@0 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 1254) 1251) anon1488_Then_correct) (=> (= (ControlFlow 0 1254) 1253) anon1488_Else_correct)))))
(let ((anon1487_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1257) 1254)) anon474_correct)))
(let ((anon1487_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1255) (- 0 1256)) (<= FullPerm (U_2_real (MapType1Select Mask@249 temp2@0 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@249 temp2@0 sibling))) (=> (= (ControlFlow 0 1255) 1254) anon474_correct))))))
(let ((anon472_correct  (=> (and (= Mask@249 (MapType1Store Mask@248 null (tree temp2@0) (real_2_U (- (U_2_real (MapType1Select Mask@248 null (tree temp2@0))) FullPerm)))) (InsidePredicate (heapseg temp2@0 null) (MapType0Select ExhaleHeap@64 null (heapseg temp2@0 null)) (tree temp2@0) (MapType0Select ExhaleHeap@64 null (tree temp2@0)))) (and (=> (= (ControlFlow 0 1258) 1255) anon1487_Then_correct) (=> (= (ControlFlow 0 1258) 1257) anon1487_Else_correct)))))
(let ((anon1486_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1261) 1258)) anon472_correct)))
(let ((anon1486_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1259) (- 0 1260)) (<= FullPerm (U_2_real (MapType1Select Mask@248 null (tree temp2@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@248 null (tree temp2@0)))) (=> (= (ControlFlow 0 1259) 1258) anon472_correct))))))
(let ((anon1485_Then_correct  (=> (not (= temp2@0 null)) (and (=> (= (ControlFlow 0 1262) 1259) anon1486_Then_correct) (=> (= (ControlFlow 0 1262) 1261) anon1486_Else_correct)))))
(let ((anon1485_Else_correct  (=> (= temp2@0 null) (=> (and (= Mask@252 Mask@248) (= (ControlFlow 0 1246) 1245)) anon478_correct))))
(let ((anon469_correct  (=> (state ExhaleHeap@64 Mask@248) (=> (and (state ExhaleHeap@64 Mask@248) (state ExhaleHeap@64 Mask@248)) (and (=> (= (ControlFlow 0 1263) 1262) anon1485_Then_correct) (=> (= (ControlFlow 0 1263) 1246) anon1485_Else_correct))))))
(let ((anon1484_Else_correct  (=> (and (= temp1@1 temp2@0) (= (ControlFlow 0 1265) 1263)) anon469_correct)))
(let ((anon1484_Then_correct  (=> (and (and (not (= temp1@1 temp2@0)) (state ExhaleHeap@64 Mask@248)) (and (= (segParent ExhaleHeap@64 arg_a@0 temp2@0) (segParent Heap@206 temp1@1 temp2@0)) (= (ControlFlow 0 1264) 1263))) anon469_correct)))
(let ((anon1483_Else_correct  (=> (= arg_a@0 temp1@1) (and (=> (= (ControlFlow 0 1267) 1264) anon1484_Then_correct) (=> (= (ControlFlow 0 1267) 1265) anon1484_Else_correct)))))
(let ((anon1483_Then_correct  (=> (not (= arg_a@0 temp1@1)) (=> (and (state ExhaleHeap@64 Mask@248) (= (segParent ExhaleHeap@64 arg_a@0 temp2@0) (segParent Heap@206 arg_a@0 temp1@1))) (and (=> (= (ControlFlow 0 1266) 1264) anon1484_Then_correct) (=> (= (ControlFlow 0 1266) 1265) anon1484_Else_correct))))))
(let ((anon465_correct  (=> (and (state ExhaleHeap@64 Mask@248) (= (segSize ExhaleHeap@64 arg_a@0 temp2@0) (+ (segSize Heap@206 arg_a@0 temp1@1) (segSize Heap@206 temp1@1 temp2@0)))) (and (=> (= (ControlFlow 0 1268) 1266) anon1483_Then_correct) (=> (= (ControlFlow 0 1268) 1267) anon1483_Else_correct)))))
(let ((anon1482_Else_correct  (=> (and (not (and (validChildren Heap@206 arg_a@0 temp1@1) (and (validChildren Heap@206 temp1@1 temp2@0) (=> (and (< 0 (segLength Heap@206 arg_a@0 temp1@1)) (< 0 (segLength Heap@206 temp1@1 temp2@0))) (= (segDegree Heap@206 arg_a@0 temp1@1 (- (segLength Heap@206 arg_a@0 temp1@1) 1)) (+ (segDegree Heap@206 temp1@1 temp2@0 0) 1)))))) (= (ControlFlow 0 1270) 1268)) anon465_correct)))
(let ((anon1482_Then_correct  (=> (and (and (and (validChildren Heap@206 arg_a@0 temp1@1) (and (validChildren Heap@206 temp1@1 temp2@0) (=> (and (< 0 (segLength Heap@206 arg_a@0 temp1@1)) (< 0 (segLength Heap@206 temp1@1 temp2@0))) (= (segDegree Heap@206 arg_a@0 temp1@1 (- (segLength Heap@206 arg_a@0 temp1@1) 1)) (+ (segDegree Heap@206 temp1@1 temp2@0 0) 1))))) (state ExhaleHeap@64 Mask@248)) (and (validChildren ExhaleHeap@64 arg_a@0 temp2@0) (= (ControlFlow 0 1269) 1268))) anon465_correct)))
(let ((anon1481_Else_correct  (=> (not (and (presorted Heap@206 arg_a@0 temp1@1) (and (presorted Heap@206 temp1@1 temp2@0) (=> (and (< 0 (segLength Heap@206 arg_a@0 temp1@1)) (< 0 (segLength Heap@206 temp1@1 temp2@0))) (and (<= (segDegree Heap@206 arg_a@0 temp1@1 (- (segLength Heap@206 arg_a@0 temp1@1) 1)) (segDegree Heap@206 temp1@1 temp2@0 0)) (and (=> (and (<= 2 (segLength Heap@206 arg_a@0 temp1@1)) (= (segDegree Heap@206 arg_a@0 temp1@1 (- (segLength Heap@206 arg_a@0 temp1@1) 1)) (segDegree Heap@206 arg_a@0 temp1@1 (- (segLength Heap@206 arg_a@0 temp1@1) 2)))) (< (segDegree Heap@206 arg_a@0 temp1@1 (- (segLength Heap@206 arg_a@0 temp1@1) 1)) (segDegree Heap@206 temp1@1 temp2@0 0))) (=> (and (<= 2 (segLength Heap@206 temp1@1 temp2@0)) (= (segDegree Heap@206 temp1@1 temp2@0 0) (segDegree Heap@206 temp1@1 temp2@0 1))) (< (segDegree Heap@206 arg_a@0 temp1@1 (- (segLength Heap@206 arg_a@0 temp1@1) 1)) (segDegree Heap@206 temp1@1 temp2@0 0))))))))) (and (=> (= (ControlFlow 0 1272) 1269) anon1482_Then_correct) (=> (= (ControlFlow 0 1272) 1270) anon1482_Else_correct)))))
(let ((anon1481_Then_correct  (=> (and (and (presorted Heap@206 arg_a@0 temp1@1) (and (presorted Heap@206 temp1@1 temp2@0) (=> (and (< 0 (segLength Heap@206 arg_a@0 temp1@1)) (< 0 (segLength Heap@206 temp1@1 temp2@0))) (and (<= (segDegree Heap@206 arg_a@0 temp1@1 (- (segLength Heap@206 arg_a@0 temp1@1) 1)) (segDegree Heap@206 temp1@1 temp2@0 0)) (and (=> (and (<= 2 (segLength Heap@206 arg_a@0 temp1@1)) (= (segDegree Heap@206 arg_a@0 temp1@1 (- (segLength Heap@206 arg_a@0 temp1@1) 1)) (segDegree Heap@206 arg_a@0 temp1@1 (- (segLength Heap@206 arg_a@0 temp1@1) 2)))) (< (segDegree Heap@206 arg_a@0 temp1@1 (- (segLength Heap@206 arg_a@0 temp1@1) 1)) (segDegree Heap@206 temp1@1 temp2@0 0))) (=> (and (<= 2 (segLength Heap@206 temp1@1 temp2@0)) (= (segDegree Heap@206 temp1@1 temp2@0 0) (segDegree Heap@206 temp1@1 temp2@0 1))) (< (segDegree Heap@206 arg_a@0 temp1@1 (- (segLength Heap@206 arg_a@0 temp1@1) 1)) (segDegree Heap@206 temp1@1 temp2@0 0)))))))) (and (state ExhaleHeap@64 Mask@248) (presorted ExhaleHeap@64 arg_a@0 temp2@0))) (and (=> (= (ControlFlow 0 1271) 1269) anon1482_Then_correct) (=> (= (ControlFlow 0 1271) 1270) anon1482_Else_correct)))))
(let ((anon1480_Else_correct  (=> (not (and (sorted Heap@206 arg_a@0 temp1@1) (and (sorted Heap@206 temp1@1 temp2@0) (=> (and (< 0 (segLength Heap@206 arg_a@0 temp1@1)) (< 0 (segLength Heap@206 temp1@1 temp2@0))) (< (segDegree Heap@206 arg_a@0 temp1@1 (- (segLength Heap@206 arg_a@0 temp1@1) 1)) (segDegree Heap@206 temp1@1 temp2@0 0)))))) (and (=> (= (ControlFlow 0 1274) 1271) anon1481_Then_correct) (=> (= (ControlFlow 0 1274) 1272) anon1481_Else_correct)))))
(let ((anon1480_Then_correct  (=> (and (and (sorted Heap@206 arg_a@0 temp1@1) (and (sorted Heap@206 temp1@1 temp2@0) (=> (and (< 0 (segLength Heap@206 arg_a@0 temp1@1)) (< 0 (segLength Heap@206 temp1@1 temp2@0))) (< (segDegree Heap@206 arg_a@0 temp1@1 (- (segLength Heap@206 arg_a@0 temp1@1) 1)) (segDegree Heap@206 temp1@1 temp2@0 0))))) (and (state ExhaleHeap@64 Mask@248) (sorted ExhaleHeap@64 arg_a@0 temp2@0))) (and (=> (= (ControlFlow 0 1273) 1271) anon1481_Then_correct) (=> (= (ControlFlow 0 1273) 1272) anon1481_Else_correct)))))
(let ((anon1479_Else_correct  (=> (and (= temp2@0 null) (= Mask@248 Mask@246)) (and (=> (= (ControlFlow 0 1276) 1273) anon1480_Then_correct) (=> (= (ControlFlow 0 1276) 1274) anon1480_Else_correct)))))
(let ((anon1479_Then_correct  (=> (and (not (= temp2@0 null)) (= Mask@247 (MapType1Store Mask@246 null (tree temp2@0) (real_2_U (+ (U_2_real (MapType1Select Mask@246 null (tree temp2@0))) FullPerm))))) (=> (and (and (and (state ExhaleHeap@64 Mask@247) (state ExhaleHeap@64 Mask@247)) (and (= (treeDegree ExhaleHeap@64 temp2@0) (treeDegree Heap@206 temp2@0)) (state ExhaleHeap@64 Mask@247))) (and (and (= (treeSize ExhaleHeap@64 temp2@0) (treeSize Heap@206 temp2@0)) (state ExhaleHeap@64 Mask@247)) (and (= (treeParent ExhaleHeap@64 temp2@0) (treeParent Heap@206 temp2@0)) (= Mask@248 Mask@247)))) (and (=> (= (ControlFlow 0 1275) 1273) anon1480_Then_correct) (=> (= (ControlFlow 0 1275) 1274) anon1480_Else_correct))))))
(let ((anon457_correct  (=> (IdenticalOnKnownLocations Heap@206 ExhaleHeap@64 Mask@245) (=> (and (and (and (= Mask@246 (MapType1Store Mask@245 null (heapseg arg_a@0 temp2@0) (real_2_U (+ (U_2_real (MapType1Select Mask@245 null (heapseg arg_a@0 temp2@0))) FullPerm)))) (state ExhaleHeap@64 Mask@246)) (and (state ExhaleHeap@64 Mask@246) (= (segLength ExhaleHeap@64 arg_a@0 temp2@0) (+ (segLength Heap@206 arg_a@0 temp1@1) (segLength Heap@206 temp1@1 temp2@0))))) (and (and (state ExhaleHeap@64 Mask@246) (forall ((i_5 Int) ) (!  (=> (and (<= 0 i_5) (< i_5 (segLength Heap@206 arg_a@0 temp1@1))) (= (segDegree ExhaleHeap@64 arg_a@0 temp2@0 i_5) (segDegree Heap@206 arg_a@0 temp1@1 i_5)))
 :qid |stdinbpl.9277:34|
 :skolemid |156|
 :pattern ( (|segDegree#frame| (MapType0Select ExhaleHeap@64 null (heapseg arg_a@0 temp2@0)) arg_a@0 temp2@0 i_5))
 :pattern ( (|segDegree#frame| (MapType0Select Heap@206 null (heapseg arg_a@0 temp1@1)) arg_a@0 temp1@1 i_5))
))) (and (state ExhaleHeap@64 Mask@246) (forall ((i_1 Int) ) (!  (=> (and (<= (segLength Heap@206 arg_a@0 temp1@1) i_1) (< i_1 (segLength ExhaleHeap@64 arg_a@0 temp2@0))) (= (segDegree ExhaleHeap@64 arg_a@0 temp2@0 i_1) (segDegree Heap@206 temp1@1 temp2@0 (- i_1 (segLength Heap@206 arg_a@0 temp1@1)))))
 :qid |stdinbpl.9282:34|
 :skolemid |157|
 :pattern ( (|segDegree#frame| (MapType0Select ExhaleHeap@64 null (heapseg arg_a@0 temp2@0)) arg_a@0 temp2@0 i_1))
))))) (and (=> (= (ControlFlow 0 1277) 1275) anon1479_Then_correct) (=> (= (ControlFlow 0 1277) 1276) anon1479_Else_correct))))))
(let ((anon1478_Else_correct  (=> (and (not (and (not (= arg_a@0 temp1@1)) (not (= temp1@1 temp2@0)))) (= (ControlFlow 0 1280) 1277)) anon457_correct)))
(let ((anon1478_Then_correct  (=> (and (not (= arg_a@0 temp1@1)) (not (= temp1@1 temp2@0))) (and (=> (= (ControlFlow 0 1278) (- 0 1279)) (= (segParent Heap@206 arg_a@0 temp1@1) (segParent Heap@206 temp1@1 temp2@0))) (=> (= (segParent Heap@206 arg_a@0 temp1@1) (segParent Heap@206 temp1@1 temp2@0)) (=> (= (ControlFlow 0 1278) 1277) anon457_correct))))))
(let ((anon454_correct  (=> (and (= Mask@244 (MapType1Store Mask@243 null (tree temp2@0) (real_2_U (- (U_2_real (MapType1Select Mask@243 null (tree temp2@0))) FullPerm)))) (= Mask@245 Mask@244)) (and (=> (= (ControlFlow 0 1282) 1278) anon1478_Then_correct) (=> (= (ControlFlow 0 1282) 1280) anon1478_Else_correct)))))
(let ((anon1477_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1285) 1282)) anon454_correct)))
(let ((anon1477_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1283) (- 0 1284)) (<= FullPerm (U_2_real (MapType1Select Mask@243 null (tree temp2@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@243 null (tree temp2@0)))) (=> (= (ControlFlow 0 1283) 1282) anon454_correct))))))
(let ((anon1476_Then_correct  (=> (not (= temp2@0 null)) (and (=> (= (ControlFlow 0 1286) 1283) anon1477_Then_correct) (=> (= (ControlFlow 0 1286) 1285) anon1477_Else_correct)))))
(let ((anon1476_Else_correct  (=> (and (= temp2@0 null) (= Mask@245 Mask@243)) (and (=> (= (ControlFlow 0 1281) 1278) anon1478_Then_correct) (=> (= (ControlFlow 0 1281) 1280) anon1478_Else_correct)))))
(let ((anon451_correct  (=> (= Mask@243 (MapType1Store Mask@242 null (heapseg temp1@1 temp2@0) (real_2_U (- (U_2_real (MapType1Select Mask@242 null (heapseg temp1@1 temp2@0))) FullPerm)))) (and (=> (= (ControlFlow 0 1287) 1286) anon1476_Then_correct) (=> (= (ControlFlow 0 1287) 1281) anon1476_Else_correct)))))
(let ((anon1475_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1290) 1287)) anon451_correct)))
(let ((anon1475_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1288) (- 0 1289)) (<= FullPerm (U_2_real (MapType1Select Mask@242 null (heapseg temp1@1 temp2@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@242 null (heapseg temp1@1 temp2@0)))) (=> (= (ControlFlow 0 1288) 1287) anon451_correct))))))
(let ((anon449_correct  (=> (= Mask@242 (MapType1Store Mask@241 null (heapseg arg_a@0 temp1@1) (real_2_U (- (U_2_real (MapType1Select Mask@241 null (heapseg arg_a@0 temp1@1))) FullPerm)))) (and (=> (= (ControlFlow 0 1291) 1288) anon1475_Then_correct) (=> (= (ControlFlow 0 1291) 1290) anon1475_Else_correct)))))
(let ((anon1474_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1294) 1291)) anon449_correct)))
(let ((anon1474_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1292) (- 0 1293)) (<= FullPerm (U_2_real (MapType1Select Mask@241 null (heapseg arg_a@0 temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@241 null (heapseg arg_a@0 temp1@1)))) (=> (= (ControlFlow 0 1292) 1291) anon449_correct))))))
(let ((anon447_correct  (=> (and (state Heap@206 Mask@241) (state Heap@206 Mask@241)) (and (=> (= (ControlFlow 0 1295) (- 0 1296)) (HasDirectPerm Mask@241 this@@66 Nodes)) (=> (HasDirectPerm Mask@241 this@@66 Nodes) (=> (= arg_a@0 (MapType0Select Heap@206 this@@66 Nodes)) (and (=> (= (ControlFlow 0 1295) 1292) anon1474_Then_correct) (=> (= (ControlFlow 0 1295) 1294) anon1474_Else_correct))))))))
(let ((anon1473_Else_correct  (=> (= temp1@1 temp2@0) (=> (and (= Heap@206 Heap@202) (= (ControlFlow 0 1298) 1295)) anon447_correct))))
(let ((anon1473_Then_correct  (=> (and (and (and (not (= temp1@1 temp2@0)) (forall ((o_58 T@U) (f_62 T@U) ) (! (let ((B@@13 (FieldTypeInv1 (type f_62))))
(let ((A@@14 (FieldTypeInv0 (type f_62))))
 (=> (and (and (= (type o_58) RefType) (= (type f_62) (FieldType A@@14 B@@13))) (or (U_2_bool (MapType1Select (MapType0Select Heap@202 null (|heapseg#sm| temp1@1 temp2@0)) o_58 f_62)) (U_2_bool (MapType1Select (MapType0Select Heap@202 null (|tree#sm| temp1@1)) o_58 f_62)))) (U_2_bool (MapType1Select newPMask@53 o_58 f_62)))))
 :qid |stdinbpl.9213:43|
 :skolemid |154|
 :pattern ( (MapType1Select newPMask@53 o_58 f_62))
))) (and (= Heap@203 (MapType0Store Heap@202 null (|heapseg#sm| temp1@1 temp2@0) newPMask@53)) (= Heap@204 (MapType0Store Heap@203 null (|heapseg#sm| temp1@1 temp2@0) (MapType1Store (MapType0Select Heap@203 null (|heapseg#sm| temp1@1 temp2@0)) temp1@1 sibling (bool_2_U true)))))) (and (and (forall ((o_59 T@U) (f_63 T@U) ) (! (let ((B@@14 (FieldTypeInv1 (type f_63))))
(let ((A@@15 (FieldTypeInv0 (type f_63))))
 (=> (and (and (= (type o_59) RefType) (= (type f_63) (FieldType A@@15 B@@14))) (or (U_2_bool (MapType1Select (MapType0Select Heap@204 null (|heapseg#sm| temp1@1 temp2@0)) o_59 f_63)) (U_2_bool (MapType1Select (MapType0Select Heap@204 null (|heapseg#sm| (MapType0Select Heap@204 temp1@1 sibling) temp2@0)) o_59 f_63)))) (U_2_bool (MapType1Select newPMask@54 o_59 f_63)))))
 :qid |stdinbpl.9220:43|
 :skolemid |155|
 :pattern ( (MapType1Select newPMask@54 o_59 f_63))
)) (= Heap@205 (MapType0Store Heap@204 null (|heapseg#sm| temp1@1 temp2@0) newPMask@54))) (and (= Heap@206 Heap@205) (= (ControlFlow 0 1297) 1295)))) anon447_correct)))
(let ((anon445_correct  (=> (state Heap@202 Mask@241) (and (=> (= (ControlFlow 0 1299) (- 0 1300)) (= (segSize Heap@202 temp1@1 temp2@0) (treeSize Heap@202 temp1@1))) (=> (= (segSize Heap@202 temp1@1 temp2@0) (treeSize Heap@202 temp1@1)) (and (=> (= (ControlFlow 0 1299) 1297) anon1473_Then_correct) (=> (= (ControlFlow 0 1299) 1298) anon1473_Else_correct)))))))
(let ((anon1472_Else_correct  (=> (= temp1@1 temp2@0) (=> (and (= Heap@202 Heap@198) (= (ControlFlow 0 1302) 1299)) anon445_correct))))
(let ((anon1472_Then_correct  (=> (and (and (and (not (= temp1@1 temp2@0)) (forall ((o_56 T@U) (f_60 T@U) ) (! (let ((B@@15 (FieldTypeInv1 (type f_60))))
(let ((A@@16 (FieldTypeInv0 (type f_60))))
 (=> (and (and (= (type o_56) RefType) (= (type f_60) (FieldType A@@16 B@@15))) (or (U_2_bool (MapType1Select (MapType0Select Heap@198 null (|heapseg#sm| temp1@1 temp2@0)) o_56 f_60)) (U_2_bool (MapType1Select (MapType0Select Heap@198 null (|tree#sm| temp1@1)) o_56 f_60)))) (U_2_bool (MapType1Select newPMask@51 o_56 f_60)))))
 :qid |stdinbpl.9193:45|
 :skolemid |152|
 :pattern ( (MapType1Select newPMask@51 o_56 f_60))
))) (and (= Heap@199 (MapType0Store Heap@198 null (|heapseg#sm| temp1@1 temp2@0) newPMask@51)) (= Heap@200 (MapType0Store Heap@199 null (|heapseg#sm| temp1@1 temp2@0) (MapType1Store (MapType0Select Heap@199 null (|heapseg#sm| temp1@1 temp2@0)) temp1@1 sibling (bool_2_U true)))))) (and (and (forall ((o_57 T@U) (f_61 T@U) ) (! (let ((B@@16 (FieldTypeInv1 (type f_61))))
(let ((A@@17 (FieldTypeInv0 (type f_61))))
 (=> (and (and (= (type o_57) RefType) (= (type f_61) (FieldType A@@17 B@@16))) (or (U_2_bool (MapType1Select (MapType0Select Heap@200 null (|heapseg#sm| temp1@1 temp2@0)) o_57 f_61)) (U_2_bool (MapType1Select (MapType0Select Heap@200 null (|heapseg#sm| (MapType0Select Heap@200 temp1@1 sibling) temp2@0)) o_57 f_61)))) (U_2_bool (MapType1Select newPMask@52 o_57 f_61)))))
 :qid |stdinbpl.9200:45|
 :skolemid |153|
 :pattern ( (MapType1Select newPMask@52 o_57 f_61))
)) (= Heap@201 (MapType0Store Heap@200 null (|heapseg#sm| temp1@1 temp2@0) newPMask@52))) (and (= Heap@202 Heap@201) (= (ControlFlow 0 1301) 1299)))) anon445_correct)))
(let ((anon443_correct  (=> (state Heap@198 Mask@241) (and (=> (= (ControlFlow 0 1303) 1301) anon1472_Then_correct) (=> (= (ControlFlow 0 1303) 1302) anon1472_Else_correct)))))
(let ((anon1471_Else_correct  (=> (= temp1@1 temp2@0) (=> (and (= Heap@198 Heap@194) (= (ControlFlow 0 1305) 1303)) anon443_correct))))
(let ((anon1471_Then_correct  (=> (and (and (and (not (= temp1@1 temp2@0)) (forall ((o_54 T@U) (f_58 T@U) ) (! (let ((B@@17 (FieldTypeInv1 (type f_58))))
(let ((A@@18 (FieldTypeInv0 (type f_58))))
 (=> (and (and (= (type o_54) RefType) (= (type f_58) (FieldType A@@18 B@@17))) (or (U_2_bool (MapType1Select (MapType0Select Heap@194 null (|heapseg#sm| temp1@1 temp2@0)) o_54 f_58)) (U_2_bool (MapType1Select (MapType0Select Heap@194 null (|tree#sm| temp1@1)) o_54 f_58)))) (U_2_bool (MapType1Select newPMask@49 o_54 f_58)))))
 :qid |stdinbpl.9175:45|
 :skolemid |150|
 :pattern ( (MapType1Select newPMask@49 o_54 f_58))
))) (and (= Heap@195 (MapType0Store Heap@194 null (|heapseg#sm| temp1@1 temp2@0) newPMask@49)) (= Heap@196 (MapType0Store Heap@195 null (|heapseg#sm| temp1@1 temp2@0) (MapType1Store (MapType0Select Heap@195 null (|heapseg#sm| temp1@1 temp2@0)) temp1@1 sibling (bool_2_U true)))))) (and (and (forall ((o_55 T@U) (f_59 T@U) ) (! (let ((B@@18 (FieldTypeInv1 (type f_59))))
(let ((A@@19 (FieldTypeInv0 (type f_59))))
 (=> (and (and (= (type o_55) RefType) (= (type f_59) (FieldType A@@19 B@@18))) (or (U_2_bool (MapType1Select (MapType0Select Heap@196 null (|heapseg#sm| temp1@1 temp2@0)) o_55 f_59)) (U_2_bool (MapType1Select (MapType0Select Heap@196 null (|heapseg#sm| (MapType0Select Heap@196 temp1@1 sibling) temp2@0)) o_55 f_59)))) (U_2_bool (MapType1Select newPMask@50 o_55 f_59)))))
 :qid |stdinbpl.9182:45|
 :skolemid |151|
 :pattern ( (MapType1Select newPMask@50 o_55 f_59))
)) (= Heap@197 (MapType0Store Heap@196 null (|heapseg#sm| temp1@1 temp2@0) newPMask@50))) (and (= Heap@198 Heap@197) (= (ControlFlow 0 1304) 1303)))) anon443_correct)))
(let ((anon437_correct  (=> (state Heap@194 UnfoldingMask@14) (and (and (and (=> (= (ControlFlow 0 1306) 1304) anon1471_Then_correct) (=> (= (ControlFlow 0 1306) 1305) anon1471_Else_correct)) (=> (= (ControlFlow 0 1306) 1237) anon1470_Then_correct)) (=> (= (ControlFlow 0 1306) 1239) anon1470_Else_correct)))))
(let ((anon1468_Else_correct  (=> (= (MapType0Select Heap@194 temp1@1 sibling) temp2@0) (=> (and (= UnfoldingMask@14 UnfoldingMask@13) (= (ControlFlow 0 1309) 1306)) anon437_correct))))
(let ((anon1468_Then_correct  (=> (not (= (MapType0Select Heap@194 temp1@1 sibling) temp2@0)) (=> (and (and (state Heap@194 UnfoldingMask@13) (= (treeParent Heap@194 temp1@1) (segParent Heap@194 (MapType0Select Heap@194 temp1@1 sibling) temp2@0))) (and (= UnfoldingMask@14 UnfoldingMask@13) (= (ControlFlow 0 1308) 1306))) anon437_correct))))
(let ((anon1467_Then_correct  (=> (and (not (= temp1@1 temp2@0)) (= UnfoldingMask@11 (MapType1Store UnfoldingMask@10 null (tree temp1@1) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@10 null (tree temp1@1))) FullPerm))))) (=> (and (and (and (InsidePredicate (heapseg temp1@1 temp2@0) (MapType0Select Heap@194 null (heapseg temp1@1 temp2@0)) (tree temp1@1) (MapType0Select Heap@194 null (tree temp1@1))) (state Heap@194 UnfoldingMask@11)) (and (not (= temp1@1 null)) (= UnfoldingMask@12 (MapType1Store UnfoldingMask@11 temp1@1 sibling (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@11 temp1@1 sibling)) FullPerm)))))) (and (and (state Heap@194 UnfoldingMask@12) (= UnfoldingMask@13 (MapType1Store UnfoldingMask@12 null (heapseg (MapType0Select Heap@194 temp1@1 sibling) temp2@0) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@12 null (heapseg (MapType0Select Heap@194 temp1@1 sibling) temp2@0))) FullPerm))))) (and (InsidePredicate (heapseg temp1@1 temp2@0) (MapType0Select Heap@194 null (heapseg temp1@1 temp2@0)) (heapseg (MapType0Select Heap@194 temp1@1 sibling) temp2@0) (MapType0Select Heap@194 null (heapseg (MapType0Select Heap@194 temp1@1 sibling) temp2@0))) (state Heap@194 UnfoldingMask@13)))) (and (=> (= (ControlFlow 0 1310) 1308) anon1468_Then_correct) (=> (= (ControlFlow 0 1310) 1309) anon1468_Else_correct))))))
(let ((anon1467_Else_correct  (=> (= temp1@1 temp2@0) (=> (and (= UnfoldingMask@14 UnfoldingMask@10) (= (ControlFlow 0 1307) 1306)) anon437_correct))))
(let ((anon434_correct  (=> (= UnfoldingMask@10 (MapType1Store Mask@241 null (heapseg temp1@1 temp2@0) (real_2_U (- (U_2_real (MapType1Select Mask@241 null (heapseg temp1@1 temp2@0))) FullPerm)))) (and (=> (= (ControlFlow 0 1311) 1310) anon1467_Then_correct) (=> (= (ControlFlow 0 1311) 1307) anon1467_Else_correct)))))
(let ((anon1466_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1314) 1311)) anon434_correct)))
(let ((anon1466_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1312) (- 0 1313)) (<= FullPerm (U_2_real (MapType1Select Mask@241 null (heapseg temp1@1 temp2@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@241 null (heapseg temp1@1 temp2@0)))) (=> (= (ControlFlow 0 1312) 1311) anon434_correct))))))
(let ((anon1464_Else_correct  (=> (and (|heapseg#trigger| Heap@194 (heapseg temp1@1 temp2@0)) (= (MapType0Select Heap@194 null (heapseg temp1@1 temp2@0)) (FrameFragment (ite (not (= temp1@1 temp2@0)) (CombineFrames (MapType0Select Heap@194 null (tree temp1@1)) (CombineFrames (FrameFragment (MapType0Select Heap@194 temp1@1 sibling)) (CombineFrames (MapType0Select Heap@194 null (heapseg (MapType0Select Heap@194 temp1@1 sibling) temp2@0)) (FrameFragment (ite (not (= (MapType0Select Heap@194 temp1@1 sibling) temp2@0)) EmptyFrame EmptyFrame))))) EmptyFrame)))) (and (=> (= (ControlFlow 0 1315) 1312) anon1466_Then_correct) (=> (= (ControlFlow 0 1315) 1314) anon1466_Else_correct)))))
(let ((anon428_correct  (=> (and (state Heap@194 Mask@241) (state Heap@194 Mask@241)) (and (and (=> (= (ControlFlow 0 1316) 1315) anon1464_Else_correct) (=> (= (ControlFlow 0 1316) 1233) anon1465_Then_correct)) (=> (= (ControlFlow 0 1316) 1235) anon1465_Else_correct)))))
(let ((anon1463_Else_correct  (=> (= temp1@1 temp2@0) (=> (and (= Heap@194 Heap@190) (= (ControlFlow 0 1318) 1316)) anon428_correct))))
(let ((anon1463_Then_correct  (=> (and (and (and (not (= temp1@1 temp2@0)) (forall ((o_52 T@U) (f_56 T@U) ) (! (let ((B@@19 (FieldTypeInv1 (type f_56))))
(let ((A@@20 (FieldTypeInv0 (type f_56))))
 (=> (and (and (= (type o_52) RefType) (= (type f_56) (FieldType A@@20 B@@19))) (or (U_2_bool (MapType1Select (MapType0Select Heap@190 null (|heapseg#sm| temp1@1 temp2@0)) o_52 f_56)) (U_2_bool (MapType1Select (MapType0Select Heap@190 null (|tree#sm| temp1@1)) o_52 f_56)))) (U_2_bool (MapType1Select newPMask@47 o_52 f_56)))))
 :qid |stdinbpl.9080:41|
 :skolemid |148|
 :pattern ( (MapType1Select newPMask@47 o_52 f_56))
))) (and (= Heap@191 (MapType0Store Heap@190 null (|heapseg#sm| temp1@1 temp2@0) newPMask@47)) (= Heap@192 (MapType0Store Heap@191 null (|heapseg#sm| temp1@1 temp2@0) (MapType1Store (MapType0Select Heap@191 null (|heapseg#sm| temp1@1 temp2@0)) temp1@1 sibling (bool_2_U true)))))) (and (and (forall ((o_53 T@U) (f_57 T@U) ) (! (let ((B@@20 (FieldTypeInv1 (type f_57))))
(let ((A@@21 (FieldTypeInv0 (type f_57))))
 (=> (and (and (= (type o_53) RefType) (= (type f_57) (FieldType A@@21 B@@20))) (or (U_2_bool (MapType1Select (MapType0Select Heap@192 null (|heapseg#sm| temp1@1 temp2@0)) o_53 f_57)) (U_2_bool (MapType1Select (MapType0Select Heap@192 null (|heapseg#sm| (MapType0Select Heap@192 temp1@1 sibling) temp2@0)) o_53 f_57)))) (U_2_bool (MapType1Select newPMask@48 o_53 f_57)))))
 :qid |stdinbpl.9087:41|
 :skolemid |149|
 :pattern ( (MapType1Select newPMask@48 o_53 f_57))
)) (= Heap@193 (MapType0Store Heap@192 null (|heapseg#sm| temp1@1 temp2@0) newPMask@48))) (and (= Heap@194 Heap@193) (= (ControlFlow 0 1317) 1316)))) anon428_correct)))
(let ((anon1462_Else_correct  (=> (and (HasDirectPerm Mask@241 null (heapseg temp1@1 temp2@0)) (= Heap@190 Heap@187)) (and (=> (= (ControlFlow 0 1320) 1317) anon1463_Then_correct) (=> (= (ControlFlow 0 1320) 1318) anon1463_Else_correct)))))
(let ((anon1462_Then_correct  (=> (and (and (not (HasDirectPerm Mask@241 null (heapseg temp1@1 temp2@0))) (= Heap@188 (MapType0Store Heap@187 null (|heapseg#sm| temp1@1 temp2@0) ZeroPMask))) (and (= Heap@189 (MapType0Store Heap@188 null (heapseg temp1@1 temp2@0) freshVersion@17)) (= Heap@190 Heap@189))) (and (=> (= (ControlFlow 0 1319) 1317) anon1463_Then_correct) (=> (= (ControlFlow 0 1319) 1318) anon1463_Else_correct)))))
(let ((anon424_correct  (=> (= Mask@241 (MapType1Store Mask@240 null (heapseg temp1@1 temp2@0) (real_2_U (+ (U_2_real (MapType1Select Mask@240 null (heapseg temp1@1 temp2@0))) FullPerm)))) (=> (and (and (state Heap@187 Mask@241) (state Heap@187 Mask@241)) (and (|heapseg#trigger| Heap@187 (heapseg temp1@1 temp2@0)) (= (MapType0Select Heap@187 null (heapseg temp1@1 temp2@0)) (FrameFragment (ite (not (= temp1@1 temp2@0)) (CombineFrames (MapType0Select Heap@187 null (tree temp1@1)) (CombineFrames (FrameFragment (MapType0Select Heap@187 temp1@1 sibling)) (CombineFrames (MapType0Select Heap@187 null (heapseg (MapType0Select Heap@187 temp1@1 sibling) temp2@0)) (FrameFragment (ite (not (= (MapType0Select Heap@187 temp1@1 sibling) temp2@0)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 1321) 1319) anon1462_Then_correct) (=> (= (ControlFlow 0 1321) 1320) anon1462_Else_correct))))))
(let ((anon1461_Else_correct  (=> (= (MapType0Select Heap@187 temp1@1 sibling) temp2@0) (=> (and (= Mask@240 Mask@239) (= (ControlFlow 0 1325) 1321)) anon424_correct))))
(let ((anon1461_Then_correct  (=> (not (= (MapType0Select Heap@187 temp1@1 sibling) temp2@0)) (and (=> (= (ControlFlow 0 1323) (- 0 1324)) (= (treeParent Heap@187 temp1@1) (segParent Heap@187 (MapType0Select Heap@187 temp1@1 sibling) temp2@0))) (=> (= (treeParent Heap@187 temp1@1) (segParent Heap@187 (MapType0Select Heap@187 temp1@1 sibling) temp2@0)) (=> (and (= Mask@240 Mask@239) (= (ControlFlow 0 1323) 1321)) anon424_correct))))))
(let ((anon422_correct  (=> (and (= Mask@239 (MapType1Store Mask@238 null (heapseg (MapType0Select Heap@187 temp1@1 sibling) temp2@0) (real_2_U (- (U_2_real (MapType1Select Mask@238 null (heapseg (MapType0Select Heap@187 temp1@1 sibling) temp2@0))) FullPerm)))) (InsidePredicate (heapseg temp1@1 temp2@0) (MapType0Select Heap@187 null (heapseg temp1@1 temp2@0)) (heapseg (MapType0Select Heap@187 temp1@1 sibling) temp2@0) (MapType0Select Heap@187 null (heapseg (MapType0Select Heap@187 temp1@1 sibling) temp2@0)))) (and (=> (= (ControlFlow 0 1326) 1323) anon1461_Then_correct) (=> (= (ControlFlow 0 1326) 1325) anon1461_Else_correct)))))
(let ((anon1460_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1329) 1326)) anon422_correct)))
(let ((anon1460_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1327) (- 0 1328)) (<= FullPerm (U_2_real (MapType1Select Mask@238 null (heapseg (MapType0Select Heap@187 temp1@1 sibling) temp2@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@238 null (heapseg (MapType0Select Heap@187 temp1@1 sibling) temp2@0)))) (=> (= (ControlFlow 0 1327) 1326) anon422_correct))))))
(let ((anon420_correct  (=> (= Mask@238 (MapType1Store Mask@237 temp1@1 sibling (real_2_U (- (U_2_real (MapType1Select Mask@237 temp1@1 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 1330) 1327) anon1460_Then_correct) (=> (= (ControlFlow 0 1330) 1329) anon1460_Else_correct)))))
(let ((anon1459_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1333) 1330)) anon420_correct)))
(let ((anon1459_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1331) (- 0 1332)) (<= FullPerm (U_2_real (MapType1Select Mask@237 temp1@1 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@237 temp1@1 sibling))) (=> (= (ControlFlow 0 1331) 1330) anon420_correct))))))
(let ((anon418_correct  (=> (and (= Mask@237 (MapType1Store Mask@236 null (tree temp1@1) (real_2_U (- (U_2_real (MapType1Select Mask@236 null (tree temp1@1))) FullPerm)))) (InsidePredicate (heapseg temp1@1 temp2@0) (MapType0Select Heap@187 null (heapseg temp1@1 temp2@0)) (tree temp1@1) (MapType0Select Heap@187 null (tree temp1@1)))) (and (=> (= (ControlFlow 0 1334) 1331) anon1459_Then_correct) (=> (= (ControlFlow 0 1334) 1333) anon1459_Else_correct)))))
(let ((anon1458_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1337) 1334)) anon418_correct)))
(let ((anon1458_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1335) (- 0 1336)) (<= FullPerm (U_2_real (MapType1Select Mask@236 null (tree temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@236 null (tree temp1@1)))) (=> (= (ControlFlow 0 1335) 1334) anon418_correct))))))
(let ((anon1457_Then_correct  (=> (not (= temp1@1 temp2@0)) (and (=> (= (ControlFlow 0 1338) 1335) anon1458_Then_correct) (=> (= (ControlFlow 0 1338) 1337) anon1458_Else_correct)))))
(let ((anon1457_Else_correct  (=> (= temp1@1 temp2@0) (=> (and (= Mask@240 Mask@236) (= (ControlFlow 0 1322) 1321)) anon424_correct))))
(let ((anon415_correct  (=> (and (state Heap@187 Mask@236) (state Heap@187 Mask@236)) (and (=> (= (ControlFlow 0 1339) 1338) anon1457_Then_correct) (=> (= (ControlFlow 0 1339) 1322) anon1457_Else_correct)))))
(let ((anon1456_Else_correct  (=> (= temp2@0 temp2@0) (=> (and (= Heap@187 Heap@183) (= (ControlFlow 0 1341) 1339)) anon415_correct))))
(let ((anon1456_Then_correct  (=> (and (and (and (not (= temp2@0 temp2@0)) (forall ((o_50 T@U) (f_54 T@U) ) (! (let ((B@@21 (FieldTypeInv1 (type f_54))))
(let ((A@@22 (FieldTypeInv0 (type f_54))))
 (=> (and (and (= (type o_50) RefType) (= (type f_54) (FieldType A@@22 B@@21))) (or (U_2_bool (MapType1Select (MapType0Select Heap@183 null (|heapseg#sm| temp2@0 temp2@0)) o_50 f_54)) (U_2_bool (MapType1Select (MapType0Select Heap@183 null (|tree#sm| temp2@0)) o_50 f_54)))) (U_2_bool (MapType1Select newPMask@45 o_50 f_54)))))
 :qid |stdinbpl.9018:41|
 :skolemid |146|
 :pattern ( (MapType1Select newPMask@45 o_50 f_54))
))) (and (= Heap@184 (MapType0Store Heap@183 null (|heapseg#sm| temp2@0 temp2@0) newPMask@45)) (= Heap@185 (MapType0Store Heap@184 null (|heapseg#sm| temp2@0 temp2@0) (MapType1Store (MapType0Select Heap@184 null (|heapseg#sm| temp2@0 temp2@0)) temp2@0 sibling (bool_2_U true)))))) (and (and (forall ((o_51 T@U) (f_55 T@U) ) (! (let ((B@@22 (FieldTypeInv1 (type f_55))))
(let ((A@@23 (FieldTypeInv0 (type f_55))))
 (=> (and (and (= (type o_51) RefType) (= (type f_55) (FieldType A@@23 B@@22))) (or (U_2_bool (MapType1Select (MapType0Select Heap@185 null (|heapseg#sm| temp2@0 temp2@0)) o_51 f_55)) (U_2_bool (MapType1Select (MapType0Select Heap@185 null (|heapseg#sm| (MapType0Select Heap@185 temp2@0 sibling) temp2@0)) o_51 f_55)))) (U_2_bool (MapType1Select newPMask@46 o_51 f_55)))))
 :qid |stdinbpl.9025:41|
 :skolemid |147|
 :pattern ( (MapType1Select newPMask@46 o_51 f_55))
)) (= Heap@186 (MapType0Store Heap@185 null (|heapseg#sm| temp2@0 temp2@0) newPMask@46))) (and (= Heap@187 Heap@186) (= (ControlFlow 0 1340) 1339)))) anon415_correct)))
(let ((anon1455_Else_correct  (=> (and (HasDirectPerm Mask@236 null (heapseg temp2@0 temp2@0)) (= Heap@183 Heap@102)) (and (=> (= (ControlFlow 0 1343) 1340) anon1456_Then_correct) (=> (= (ControlFlow 0 1343) 1341) anon1456_Else_correct)))))
(let ((anon1455_Then_correct  (=> (and (and (not (HasDirectPerm Mask@236 null (heapseg temp2@0 temp2@0))) (= Heap@181 (MapType0Store Heap@102 null (|heapseg#sm| temp2@0 temp2@0) ZeroPMask))) (and (= Heap@182 (MapType0Store Heap@181 null (heapseg temp2@0 temp2@0) freshVersion@16)) (= Heap@183 Heap@182))) (and (=> (= (ControlFlow 0 1342) 1340) anon1456_Then_correct) (=> (= (ControlFlow 0 1342) 1341) anon1456_Else_correct)))))
(let ((anon411_correct  (=> (= Mask@236 (MapType1Store Mask@235 null (heapseg temp2@0 temp2@0) (real_2_U (+ (U_2_real (MapType1Select Mask@235 null (heapseg temp2@0 temp2@0))) FullPerm)))) (=> (and (and (state Heap@102 Mask@236) (state Heap@102 Mask@236)) (and (|heapseg#trigger| Heap@102 (heapseg temp2@0 temp2@0)) (= (MapType0Select Heap@102 null (heapseg temp2@0 temp2@0)) (FrameFragment (ite (not (= temp2@0 temp2@0)) (CombineFrames (MapType0Select Heap@102 null (tree temp2@0)) (CombineFrames (FrameFragment (MapType0Select Heap@102 temp2@0 sibling)) (CombineFrames (MapType0Select Heap@102 null (heapseg (MapType0Select Heap@102 temp2@0 sibling) temp2@0)) (FrameFragment (ite (not (= (MapType0Select Heap@102 temp2@0 sibling) temp2@0)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 1344) 1342) anon1455_Then_correct) (=> (= (ControlFlow 0 1344) 1343) anon1455_Else_correct))))))
(let ((anon1454_Else_correct  (=> (= (MapType0Select Heap@102 temp2@0 sibling) temp2@0) (=> (and (= Mask@235 Mask@234) (= (ControlFlow 0 1348) 1344)) anon411_correct))))
(let ((anon1454_Then_correct  (=> (not (= (MapType0Select Heap@102 temp2@0 sibling) temp2@0)) (and (=> (= (ControlFlow 0 1346) (- 0 1347)) (= (treeParent Heap@102 temp2@0) (segParent Heap@102 (MapType0Select Heap@102 temp2@0 sibling) temp2@0))) (=> (= (treeParent Heap@102 temp2@0) (segParent Heap@102 (MapType0Select Heap@102 temp2@0 sibling) temp2@0)) (=> (and (= Mask@235 Mask@234) (= (ControlFlow 0 1346) 1344)) anon411_correct))))))
(let ((anon409_correct  (=> (and (= Mask@234 (MapType1Store Mask@233 null (heapseg (MapType0Select Heap@102 temp2@0 sibling) temp2@0) (real_2_U (- (U_2_real (MapType1Select Mask@233 null (heapseg (MapType0Select Heap@102 temp2@0 sibling) temp2@0))) FullPerm)))) (InsidePredicate (heapseg temp2@0 temp2@0) (MapType0Select Heap@102 null (heapseg temp2@0 temp2@0)) (heapseg (MapType0Select Heap@102 temp2@0 sibling) temp2@0) (MapType0Select Heap@102 null (heapseg (MapType0Select Heap@102 temp2@0 sibling) temp2@0)))) (and (=> (= (ControlFlow 0 1349) 1346) anon1454_Then_correct) (=> (= (ControlFlow 0 1349) 1348) anon1454_Else_correct)))))
(let ((anon1453_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1352) 1349)) anon409_correct)))
(let ((anon1453_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1350) (- 0 1351)) (<= FullPerm (U_2_real (MapType1Select Mask@233 null (heapseg (MapType0Select Heap@102 temp2@0 sibling) temp2@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@233 null (heapseg (MapType0Select Heap@102 temp2@0 sibling) temp2@0)))) (=> (= (ControlFlow 0 1350) 1349) anon409_correct))))))
(let ((anon407_correct  (=> (= Mask@233 (MapType1Store Mask@232 temp2@0 sibling (real_2_U (- (U_2_real (MapType1Select Mask@232 temp2@0 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 1353) 1350) anon1453_Then_correct) (=> (= (ControlFlow 0 1353) 1352) anon1453_Else_correct)))))
(let ((anon1452_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1356) 1353)) anon407_correct)))
(let ((anon1452_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1354) (- 0 1355)) (<= FullPerm (U_2_real (MapType1Select Mask@232 temp2@0 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@232 temp2@0 sibling))) (=> (= (ControlFlow 0 1354) 1353) anon407_correct))))))
(let ((anon405_correct  (=> (and (= Mask@232 (MapType1Store Mask@156 null (tree temp2@0) (real_2_U (- (U_2_real (MapType1Select Mask@156 null (tree temp2@0))) FullPerm)))) (InsidePredicate (heapseg temp2@0 temp2@0) (MapType0Select Heap@102 null (heapseg temp2@0 temp2@0)) (tree temp2@0) (MapType0Select Heap@102 null (tree temp2@0)))) (and (=> (= (ControlFlow 0 1357) 1354) anon1452_Then_correct) (=> (= (ControlFlow 0 1357) 1356) anon1452_Else_correct)))))
(let ((anon1451_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1360) 1357)) anon405_correct)))
(let ((anon1451_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1358) (- 0 1359)) (<= FullPerm (U_2_real (MapType1Select Mask@156 null (tree temp2@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@156 null (tree temp2@0)))) (=> (= (ControlFlow 0 1358) 1357) anon405_correct))))))
(let ((anon1450_Then_correct  (=> (not (= temp2@0 temp2@0)) (and (=> (= (ControlFlow 0 1361) 1358) anon1451_Then_correct) (=> (= (ControlFlow 0 1361) 1360) anon1451_Else_correct)))))
(let ((anon1450_Else_correct  (=> (= temp2@0 temp2@0) (=> (and (= Mask@235 Mask@156) (= (ControlFlow 0 1345) 1344)) anon411_correct))))
(let ((anon1449_Then_correct  (=> (and (= (treeDegree Heap@100 temp1@1) (treeDegree Heap@100 temp2@0)) (state Heap@100 Mask@156)) (and (=> (= (ControlFlow 0 1362) (- 0 1366)) (HasDirectPerm Mask@156 temp2@0 sibling)) (=> (HasDirectPerm Mask@156 temp2@0 sibling) (=> (and (= temp2@1 (MapType0Select Heap@100 temp2@0 sibling)) (state Heap@100 Mask@156)) (and (=> (= (ControlFlow 0 1362) (- 0 1365)) (HasDirectPerm Mask@156 temp1@1 sibling)) (=> (HasDirectPerm Mask@156 temp1@1 sibling) (and (=> (= (ControlFlow 0 1362) (- 0 1364)) (= FullPerm (U_2_real (MapType1Select Mask@156 temp2@0 sibling)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@156 temp2@0 sibling))) (=> (and (= Heap@101 (MapType0Store Heap@100 temp2@0 sibling (MapType0Select Heap@100 temp1@1 sibling))) (state Heap@101 Mask@156)) (and (=> (= (ControlFlow 0 1362) (- 0 1363)) (= FullPerm (U_2_real (MapType1Select Mask@156 temp1@1 sibling)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@156 temp1@1 sibling))) (=> (and (= Heap@102 (MapType0Store Heap@101 temp1@1 sibling temp2@0)) (state Heap@102 Mask@156)) (and (=> (= (ControlFlow 0 1362) 1361) anon1450_Then_correct) (=> (= (ControlFlow 0 1362) 1345) anon1450_Else_correct))))))))))))))))
(let ((anon690_correct  (=> (and (state Heap@180 Mask@227) (= temp1@8 temp1@7)) (=> (and (and (= temp2@6 temp2@5) (= Heap@214 Heap@180)) (and (= Mask@254 Mask@227) (= (ControlFlow 0 894) 893))) anon691_correct))))
(let ((anon646_correct  (=> (and (state Heap@179 Mask@226) (= Mask@227 Mask@226)) (=> (and (and (= Heap@180 Heap@179) (= temp2@5 temp2@4)) (and (= temp1@7 temp1@6) (= (ControlFlow 0 971) 894))) anon690_correct))))
(let ((anon563_correct  (=> (state Heap@178 Mask@225) (=> (and (state Heap@178 Mask@225) (= temp1@6 temp2@0)) (=> (and (and (= temp2@4 temp2@3) (= Heap@179 Heap@178)) (and (= Mask@226 Mask@225) (= (ControlFlow 0 1110) 971))) anon646_correct)))))
(let ((anon1534_Else_correct  (=> (= temp2@0 null) (=> (and (= Heap@178 Heap@174) (= (ControlFlow 0 1112) 1110)) anon563_correct))))
(let ((anon1534_Then_correct  (=> (and (and (and (not (= temp2@0 null)) (forall ((o_66 T@U) (f_70 T@U) ) (! (let ((B@@23 (FieldTypeInv1 (type f_70))))
(let ((A@@24 (FieldTypeInv0 (type f_70))))
 (=> (and (and (= (type o_66) RefType) (= (type f_70) (FieldType A@@24 B@@23))) (or (U_2_bool (MapType1Select (MapType0Select Heap@174 null (|heapseg#sm| temp2@0 null)) o_66 f_70)) (U_2_bool (MapType1Select (MapType0Select Heap@174 null (|tree#sm| temp2@0)) o_66 f_70)))) (U_2_bool (MapType1Select newPMask@43 o_66 f_70)))))
 :qid |stdinbpl.9770:49|
 :skolemid |166|
 :pattern ( (MapType1Select newPMask@43 o_66 f_70))
))) (and (= Heap@175 (MapType0Store Heap@174 null (|heapseg#sm| temp2@0 null) newPMask@43)) (= Heap@176 (MapType0Store Heap@175 null (|heapseg#sm| temp2@0 null) (MapType1Store (MapType0Select Heap@175 null (|heapseg#sm| temp2@0 null)) temp2@0 sibling (bool_2_U true)))))) (and (and (forall ((o_67 T@U) (f_71 T@U) ) (! (let ((B@@24 (FieldTypeInv1 (type f_71))))
(let ((A@@25 (FieldTypeInv0 (type f_71))))
 (=> (and (and (= (type o_67) RefType) (= (type f_71) (FieldType A@@25 B@@24))) (or (U_2_bool (MapType1Select (MapType0Select Heap@176 null (|heapseg#sm| temp2@0 null)) o_67 f_71)) (U_2_bool (MapType1Select (MapType0Select Heap@176 null (|heapseg#sm| (MapType0Select Heap@176 temp2@0 sibling) null)) o_67 f_71)))) (U_2_bool (MapType1Select newPMask@44 o_67 f_71)))))
 :qid |stdinbpl.9777:49|
 :skolemid |167|
 :pattern ( (MapType1Select newPMask@44 o_67 f_71))
)) (= Heap@177 (MapType0Store Heap@176 null (|heapseg#sm| temp2@0 null) newPMask@44))) (and (= Heap@178 Heap@177) (= (ControlFlow 0 1111) 1110)))) anon563_correct)))
(let ((anon1533_Else_correct  (=> (and (HasDirectPerm Mask@225 null (heapseg temp2@0 null)) (= Heap@174 ExhaleHeap@59)) (and (=> (= (ControlFlow 0 1114) 1111) anon1534_Then_correct) (=> (= (ControlFlow 0 1114) 1112) anon1534_Else_correct)))))
(let ((anon1533_Then_correct  (=> (and (and (not (HasDirectPerm Mask@225 null (heapseg temp2@0 null))) (= Heap@172 (MapType0Store ExhaleHeap@59 null (|heapseg#sm| temp2@0 null) ZeroPMask))) (and (= Heap@173 (MapType0Store Heap@172 null (heapseg temp2@0 null) freshVersion@15)) (= Heap@174 Heap@173))) (and (=> (= (ControlFlow 0 1113) 1111) anon1534_Then_correct) (=> (= (ControlFlow 0 1113) 1112) anon1534_Else_correct)))))
(let ((anon559_correct  (=> (= Mask@225 (MapType1Store Mask@224 null (heapseg temp2@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@224 null (heapseg temp2@0 null))) FullPerm)))) (=> (and (and (state ExhaleHeap@59 Mask@225) (state ExhaleHeap@59 Mask@225)) (and (|heapseg#trigger| ExhaleHeap@59 (heapseg temp2@0 null)) (= (MapType0Select ExhaleHeap@59 null (heapseg temp2@0 null)) (FrameFragment (ite (not (= temp2@0 null)) (CombineFrames (MapType0Select ExhaleHeap@59 null (tree temp2@0)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@59 temp2@0 sibling)) (CombineFrames (MapType0Select ExhaleHeap@59 null (heapseg (MapType0Select ExhaleHeap@59 temp2@0 sibling) null)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@59 temp2@0 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 1115) 1113) anon1533_Then_correct) (=> (= (ControlFlow 0 1115) 1114) anon1533_Else_correct))))))
(let ((anon1532_Else_correct  (=> (= (MapType0Select ExhaleHeap@59 temp2@0 sibling) null) (=> (and (= Mask@224 Mask@223) (= (ControlFlow 0 1119) 1115)) anon559_correct))))
(let ((anon1532_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@59 temp2@0 sibling) null)) (and (=> (= (ControlFlow 0 1117) (- 0 1118)) (= (treeParent ExhaleHeap@59 temp2@0) (segParent ExhaleHeap@59 (MapType0Select ExhaleHeap@59 temp2@0 sibling) null))) (=> (= (treeParent ExhaleHeap@59 temp2@0) (segParent ExhaleHeap@59 (MapType0Select ExhaleHeap@59 temp2@0 sibling) null)) (=> (and (= Mask@224 Mask@223) (= (ControlFlow 0 1117) 1115)) anon559_correct))))))
(let ((anon557_correct  (=> (and (= Mask@223 (MapType1Store Mask@222 null (heapseg (MapType0Select ExhaleHeap@59 temp2@0 sibling) null) (real_2_U (- (U_2_real (MapType1Select Mask@222 null (heapseg (MapType0Select ExhaleHeap@59 temp2@0 sibling) null))) FullPerm)))) (InsidePredicate (heapseg temp2@0 null) (MapType0Select ExhaleHeap@59 null (heapseg temp2@0 null)) (heapseg (MapType0Select ExhaleHeap@59 temp2@0 sibling) null) (MapType0Select ExhaleHeap@59 null (heapseg (MapType0Select ExhaleHeap@59 temp2@0 sibling) null)))) (and (=> (= (ControlFlow 0 1120) 1117) anon1532_Then_correct) (=> (= (ControlFlow 0 1120) 1119) anon1532_Else_correct)))))
(let ((anon1531_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1123) 1120)) anon557_correct)))
(let ((anon1531_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1121) (- 0 1122)) (<= FullPerm (U_2_real (MapType1Select Mask@222 null (heapseg (MapType0Select ExhaleHeap@59 temp2@0 sibling) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@222 null (heapseg (MapType0Select ExhaleHeap@59 temp2@0 sibling) null)))) (=> (= (ControlFlow 0 1121) 1120) anon557_correct))))))
(let ((anon555_correct  (=> (= Mask@222 (MapType1Store Mask@221 temp2@0 sibling (real_2_U (- (U_2_real (MapType1Select Mask@221 temp2@0 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 1124) 1121) anon1531_Then_correct) (=> (= (ControlFlow 0 1124) 1123) anon1531_Else_correct)))))
(let ((anon1530_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1127) 1124)) anon555_correct)))
(let ((anon1530_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1125) (- 0 1126)) (<= FullPerm (U_2_real (MapType1Select Mask@221 temp2@0 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@221 temp2@0 sibling))) (=> (= (ControlFlow 0 1125) 1124) anon555_correct))))))
(let ((anon553_correct  (=> (and (= Mask@221 (MapType1Store Mask@220 null (tree temp2@0) (real_2_U (- (U_2_real (MapType1Select Mask@220 null (tree temp2@0))) FullPerm)))) (InsidePredicate (heapseg temp2@0 null) (MapType0Select ExhaleHeap@59 null (heapseg temp2@0 null)) (tree temp2@0) (MapType0Select ExhaleHeap@59 null (tree temp2@0)))) (and (=> (= (ControlFlow 0 1128) 1125) anon1530_Then_correct) (=> (= (ControlFlow 0 1128) 1127) anon1530_Else_correct)))))
(let ((anon1529_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1131) 1128)) anon553_correct)))
(let ((anon1529_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1129) (- 0 1130)) (<= FullPerm (U_2_real (MapType1Select Mask@220 null (tree temp2@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@220 null (tree temp2@0)))) (=> (= (ControlFlow 0 1129) 1128) anon553_correct))))))
(let ((anon1528_Then_correct  (=> (not (= temp2@0 null)) (and (=> (= (ControlFlow 0 1132) 1129) anon1529_Then_correct) (=> (= (ControlFlow 0 1132) 1131) anon1529_Else_correct)))))
(let ((anon1528_Else_correct  (=> (= temp2@0 null) (=> (and (= Mask@224 Mask@220) (= (ControlFlow 0 1116) 1115)) anon559_correct))))
(let ((anon550_correct  (=> (state ExhaleHeap@59 Mask@220) (=> (and (state ExhaleHeap@59 Mask@220) (state ExhaleHeap@59 Mask@220)) (and (=> (= (ControlFlow 0 1133) 1132) anon1528_Then_correct) (=> (= (ControlFlow 0 1133) 1116) anon1528_Else_correct))))))
(let ((anon1527_Else_correct  (=> (and (= temp1@1 temp2@0) (= (ControlFlow 0 1135) 1133)) anon550_correct)))
(let ((anon1527_Then_correct  (=> (and (and (not (= temp1@1 temp2@0)) (state ExhaleHeap@59 Mask@220)) (and (= (segParent ExhaleHeap@59 arg_a_1@0 temp2@0) (segParent Heap@171 temp1@1 temp2@0)) (= (ControlFlow 0 1134) 1133))) anon550_correct)))
(let ((anon1526_Else_correct  (=> (= arg_a_1@0 temp1@1) (and (=> (= (ControlFlow 0 1137) 1134) anon1527_Then_correct) (=> (= (ControlFlow 0 1137) 1135) anon1527_Else_correct)))))
(let ((anon1526_Then_correct  (=> (not (= arg_a_1@0 temp1@1)) (=> (and (state ExhaleHeap@59 Mask@220) (= (segParent ExhaleHeap@59 arg_a_1@0 temp2@0) (segParent Heap@171 arg_a_1@0 temp1@1))) (and (=> (= (ControlFlow 0 1136) 1134) anon1527_Then_correct) (=> (= (ControlFlow 0 1136) 1135) anon1527_Else_correct))))))
(let ((anon546_correct  (=> (and (state ExhaleHeap@59 Mask@220) (= (segSize ExhaleHeap@59 arg_a_1@0 temp2@0) (+ (segSize Heap@171 arg_a_1@0 temp1@1) (segSize Heap@171 temp1@1 temp2@0)))) (and (=> (= (ControlFlow 0 1138) 1136) anon1526_Then_correct) (=> (= (ControlFlow 0 1138) 1137) anon1526_Else_correct)))))
(let ((anon1525_Else_correct  (=> (and (not (and (validChildren Heap@171 arg_a_1@0 temp1@1) (and (validChildren Heap@171 temp1@1 temp2@0) (=> (and (< 0 (segLength Heap@171 arg_a_1@0 temp1@1)) (< 0 (segLength Heap@171 temp1@1 temp2@0))) (= (segDegree Heap@171 arg_a_1@0 temp1@1 (- (segLength Heap@171 arg_a_1@0 temp1@1) 1)) (+ (segDegree Heap@171 temp1@1 temp2@0 0) 1)))))) (= (ControlFlow 0 1140) 1138)) anon546_correct)))
(let ((anon1525_Then_correct  (=> (and (and (and (validChildren Heap@171 arg_a_1@0 temp1@1) (and (validChildren Heap@171 temp1@1 temp2@0) (=> (and (< 0 (segLength Heap@171 arg_a_1@0 temp1@1)) (< 0 (segLength Heap@171 temp1@1 temp2@0))) (= (segDegree Heap@171 arg_a_1@0 temp1@1 (- (segLength Heap@171 arg_a_1@0 temp1@1) 1)) (+ (segDegree Heap@171 temp1@1 temp2@0 0) 1))))) (state ExhaleHeap@59 Mask@220)) (and (validChildren ExhaleHeap@59 arg_a_1@0 temp2@0) (= (ControlFlow 0 1139) 1138))) anon546_correct)))
(let ((anon1524_Else_correct  (=> (not (and (presorted Heap@171 arg_a_1@0 temp1@1) (and (presorted Heap@171 temp1@1 temp2@0) (=> (and (< 0 (segLength Heap@171 arg_a_1@0 temp1@1)) (< 0 (segLength Heap@171 temp1@1 temp2@0))) (and (<= (segDegree Heap@171 arg_a_1@0 temp1@1 (- (segLength Heap@171 arg_a_1@0 temp1@1) 1)) (segDegree Heap@171 temp1@1 temp2@0 0)) (and (=> (and (<= 2 (segLength Heap@171 arg_a_1@0 temp1@1)) (= (segDegree Heap@171 arg_a_1@0 temp1@1 (- (segLength Heap@171 arg_a_1@0 temp1@1) 1)) (segDegree Heap@171 arg_a_1@0 temp1@1 (- (segLength Heap@171 arg_a_1@0 temp1@1) 2)))) (< (segDegree Heap@171 arg_a_1@0 temp1@1 (- (segLength Heap@171 arg_a_1@0 temp1@1) 1)) (segDegree Heap@171 temp1@1 temp2@0 0))) (=> (and (<= 2 (segLength Heap@171 temp1@1 temp2@0)) (= (segDegree Heap@171 temp1@1 temp2@0 0) (segDegree Heap@171 temp1@1 temp2@0 1))) (< (segDegree Heap@171 arg_a_1@0 temp1@1 (- (segLength Heap@171 arg_a_1@0 temp1@1) 1)) (segDegree Heap@171 temp1@1 temp2@0 0))))))))) (and (=> (= (ControlFlow 0 1142) 1139) anon1525_Then_correct) (=> (= (ControlFlow 0 1142) 1140) anon1525_Else_correct)))))
(let ((anon1524_Then_correct  (=> (and (and (presorted Heap@171 arg_a_1@0 temp1@1) (and (presorted Heap@171 temp1@1 temp2@0) (=> (and (< 0 (segLength Heap@171 arg_a_1@0 temp1@1)) (< 0 (segLength Heap@171 temp1@1 temp2@0))) (and (<= (segDegree Heap@171 arg_a_1@0 temp1@1 (- (segLength Heap@171 arg_a_1@0 temp1@1) 1)) (segDegree Heap@171 temp1@1 temp2@0 0)) (and (=> (and (<= 2 (segLength Heap@171 arg_a_1@0 temp1@1)) (= (segDegree Heap@171 arg_a_1@0 temp1@1 (- (segLength Heap@171 arg_a_1@0 temp1@1) 1)) (segDegree Heap@171 arg_a_1@0 temp1@1 (- (segLength Heap@171 arg_a_1@0 temp1@1) 2)))) (< (segDegree Heap@171 arg_a_1@0 temp1@1 (- (segLength Heap@171 arg_a_1@0 temp1@1) 1)) (segDegree Heap@171 temp1@1 temp2@0 0))) (=> (and (<= 2 (segLength Heap@171 temp1@1 temp2@0)) (= (segDegree Heap@171 temp1@1 temp2@0 0) (segDegree Heap@171 temp1@1 temp2@0 1))) (< (segDegree Heap@171 arg_a_1@0 temp1@1 (- (segLength Heap@171 arg_a_1@0 temp1@1) 1)) (segDegree Heap@171 temp1@1 temp2@0 0)))))))) (and (state ExhaleHeap@59 Mask@220) (presorted ExhaleHeap@59 arg_a_1@0 temp2@0))) (and (=> (= (ControlFlow 0 1141) 1139) anon1525_Then_correct) (=> (= (ControlFlow 0 1141) 1140) anon1525_Else_correct)))))
(let ((anon1523_Else_correct  (=> (not (and (sorted Heap@171 arg_a_1@0 temp1@1) (and (sorted Heap@171 temp1@1 temp2@0) (=> (and (< 0 (segLength Heap@171 arg_a_1@0 temp1@1)) (< 0 (segLength Heap@171 temp1@1 temp2@0))) (< (segDegree Heap@171 arg_a_1@0 temp1@1 (- (segLength Heap@171 arg_a_1@0 temp1@1) 1)) (segDegree Heap@171 temp1@1 temp2@0 0)))))) (and (=> (= (ControlFlow 0 1144) 1141) anon1524_Then_correct) (=> (= (ControlFlow 0 1144) 1142) anon1524_Else_correct)))))
(let ((anon1523_Then_correct  (=> (and (and (sorted Heap@171 arg_a_1@0 temp1@1) (and (sorted Heap@171 temp1@1 temp2@0) (=> (and (< 0 (segLength Heap@171 arg_a_1@0 temp1@1)) (< 0 (segLength Heap@171 temp1@1 temp2@0))) (< (segDegree Heap@171 arg_a_1@0 temp1@1 (- (segLength Heap@171 arg_a_1@0 temp1@1) 1)) (segDegree Heap@171 temp1@1 temp2@0 0))))) (and (state ExhaleHeap@59 Mask@220) (sorted ExhaleHeap@59 arg_a_1@0 temp2@0))) (and (=> (= (ControlFlow 0 1143) 1141) anon1524_Then_correct) (=> (= (ControlFlow 0 1143) 1142) anon1524_Else_correct)))))
(let ((anon1522_Else_correct  (=> (and (= temp2@0 null) (= Mask@220 Mask@218)) (and (=> (= (ControlFlow 0 1146) 1143) anon1523_Then_correct) (=> (= (ControlFlow 0 1146) 1144) anon1523_Else_correct)))))
(let ((anon1522_Then_correct  (=> (and (not (= temp2@0 null)) (= Mask@219 (MapType1Store Mask@218 null (tree temp2@0) (real_2_U (+ (U_2_real (MapType1Select Mask@218 null (tree temp2@0))) FullPerm))))) (=> (and (and (and (state ExhaleHeap@59 Mask@219) (state ExhaleHeap@59 Mask@219)) (and (= (treeDegree ExhaleHeap@59 temp2@0) (treeDegree Heap@171 temp2@0)) (state ExhaleHeap@59 Mask@219))) (and (and (= (treeSize ExhaleHeap@59 temp2@0) (treeSize Heap@171 temp2@0)) (state ExhaleHeap@59 Mask@219)) (and (= (treeParent ExhaleHeap@59 temp2@0) (treeParent Heap@171 temp2@0)) (= Mask@220 Mask@219)))) (and (=> (= (ControlFlow 0 1145) 1143) anon1523_Then_correct) (=> (= (ControlFlow 0 1145) 1144) anon1523_Else_correct))))))
(let ((anon538_correct  (=> (IdenticalOnKnownLocations Heap@171 ExhaleHeap@59 Mask@217) (=> (and (and (and (= Mask@218 (MapType1Store Mask@217 null (heapseg arg_a_1@0 temp2@0) (real_2_U (+ (U_2_real (MapType1Select Mask@217 null (heapseg arg_a_1@0 temp2@0))) FullPerm)))) (state ExhaleHeap@59 Mask@218)) (and (state ExhaleHeap@59 Mask@218) (= (segLength ExhaleHeap@59 arg_a_1@0 temp2@0) (+ (segLength Heap@171 arg_a_1@0 temp1@1) (segLength Heap@171 temp1@1 temp2@0))))) (and (and (state ExhaleHeap@59 Mask@218) (forall ((i_2_1 Int) ) (!  (=> (and (<= 0 i_2_1) (< i_2_1 (segLength Heap@171 arg_a_1@0 temp1@1))) (= (segDegree ExhaleHeap@59 arg_a_1@0 temp2@0 i_2_1) (segDegree Heap@171 arg_a_1@0 temp1@1 i_2_1)))
 :qid |stdinbpl.9675:42|
 :skolemid |164|
 :pattern ( (|segDegree#frame| (MapType0Select ExhaleHeap@59 null (heapseg arg_a_1@0 temp2@0)) arg_a_1@0 temp2@0 i_2_1))
 :pattern ( (|segDegree#frame| (MapType0Select Heap@171 null (heapseg arg_a_1@0 temp1@1)) arg_a_1@0 temp1@1 i_2_1))
))) (and (state ExhaleHeap@59 Mask@218) (forall ((i_3 Int) ) (!  (=> (and (<= (segLength Heap@171 arg_a_1@0 temp1@1) i_3) (< i_3 (segLength ExhaleHeap@59 arg_a_1@0 temp2@0))) (= (segDegree ExhaleHeap@59 arg_a_1@0 temp2@0 i_3) (segDegree Heap@171 temp1@1 temp2@0 (- i_3 (segLength Heap@171 arg_a_1@0 temp1@1)))))
 :qid |stdinbpl.9680:42|
 :skolemid |165|
 :pattern ( (|segDegree#frame| (MapType0Select ExhaleHeap@59 null (heapseg arg_a_1@0 temp2@0)) arg_a_1@0 temp2@0 i_3))
))))) (and (=> (= (ControlFlow 0 1147) 1145) anon1522_Then_correct) (=> (= (ControlFlow 0 1147) 1146) anon1522_Else_correct))))))
(let ((anon1521_Else_correct  (=> (and (not (and (not (= arg_a_1@0 temp1@1)) (not (= temp1@1 temp2@0)))) (= (ControlFlow 0 1150) 1147)) anon538_correct)))
(let ((anon1521_Then_correct  (=> (and (not (= arg_a_1@0 temp1@1)) (not (= temp1@1 temp2@0))) (and (=> (= (ControlFlow 0 1148) (- 0 1149)) (= (segParent Heap@171 arg_a_1@0 temp1@1) (segParent Heap@171 temp1@1 temp2@0))) (=> (= (segParent Heap@171 arg_a_1@0 temp1@1) (segParent Heap@171 temp1@1 temp2@0)) (=> (= (ControlFlow 0 1148) 1147) anon538_correct))))))
(let ((anon535_correct  (=> (and (= Mask@216 (MapType1Store Mask@215 null (tree temp2@0) (real_2_U (- (U_2_real (MapType1Select Mask@215 null (tree temp2@0))) FullPerm)))) (= Mask@217 Mask@216)) (and (=> (= (ControlFlow 0 1152) 1148) anon1521_Then_correct) (=> (= (ControlFlow 0 1152) 1150) anon1521_Else_correct)))))
(let ((anon1520_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1155) 1152)) anon535_correct)))
(let ((anon1520_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1153) (- 0 1154)) (<= FullPerm (U_2_real (MapType1Select Mask@215 null (tree temp2@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@215 null (tree temp2@0)))) (=> (= (ControlFlow 0 1153) 1152) anon535_correct))))))
(let ((anon1519_Then_correct  (=> (not (= temp2@0 null)) (and (=> (= (ControlFlow 0 1156) 1153) anon1520_Then_correct) (=> (= (ControlFlow 0 1156) 1155) anon1520_Else_correct)))))
(let ((anon1519_Else_correct  (=> (and (= temp2@0 null) (= Mask@217 Mask@215)) (and (=> (= (ControlFlow 0 1151) 1148) anon1521_Then_correct) (=> (= (ControlFlow 0 1151) 1150) anon1521_Else_correct)))))
(let ((anon532_correct  (=> (= Mask@215 (MapType1Store Mask@214 null (heapseg temp1@1 temp2@0) (real_2_U (- (U_2_real (MapType1Select Mask@214 null (heapseg temp1@1 temp2@0))) FullPerm)))) (and (=> (= (ControlFlow 0 1157) 1156) anon1519_Then_correct) (=> (= (ControlFlow 0 1157) 1151) anon1519_Else_correct)))))
(let ((anon1518_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1160) 1157)) anon532_correct)))
(let ((anon1518_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1158) (- 0 1159)) (<= FullPerm (U_2_real (MapType1Select Mask@214 null (heapseg temp1@1 temp2@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@214 null (heapseg temp1@1 temp2@0)))) (=> (= (ControlFlow 0 1158) 1157) anon532_correct))))))
(let ((anon530_correct  (=> (= Mask@214 (MapType1Store Mask@213 null (heapseg arg_a_1@0 temp1@1) (real_2_U (- (U_2_real (MapType1Select Mask@213 null (heapseg arg_a_1@0 temp1@1))) FullPerm)))) (and (=> (= (ControlFlow 0 1161) 1158) anon1518_Then_correct) (=> (= (ControlFlow 0 1161) 1160) anon1518_Else_correct)))))
(let ((anon1517_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1164) 1161)) anon530_correct)))
(let ((anon1517_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1162) (- 0 1163)) (<= FullPerm (U_2_real (MapType1Select Mask@213 null (heapseg arg_a_1@0 temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@213 null (heapseg arg_a_1@0 temp1@1)))) (=> (= (ControlFlow 0 1162) 1161) anon530_correct))))))
(let ((anon528_correct  (=> (and (state Heap@171 Mask@213) (state Heap@171 Mask@213)) (and (=> (= (ControlFlow 0 1165) (- 0 1166)) (HasDirectPerm Mask@213 this@@66 Nodes)) (=> (HasDirectPerm Mask@213 this@@66 Nodes) (=> (= arg_a_1@0 (MapType0Select Heap@171 this@@66 Nodes)) (and (=> (= (ControlFlow 0 1165) 1162) anon1517_Then_correct) (=> (= (ControlFlow 0 1165) 1164) anon1517_Else_correct))))))))
(let ((anon1516_Else_correct  (=> (= temp1@1 temp2@0) (=> (and (= Heap@171 Heap@167) (= (ControlFlow 0 1168) 1165)) anon528_correct))))
(let ((anon1516_Then_correct  (=> (and (and (and (not (= temp1@1 temp2@0)) (forall ((o_64 T@U) (f_68 T@U) ) (! (let ((B@@25 (FieldTypeInv1 (type f_68))))
(let ((A@@26 (FieldTypeInv0 (type f_68))))
 (=> (and (and (= (type o_64) RefType) (= (type f_68) (FieldType A@@26 B@@25))) (or (U_2_bool (MapType1Select (MapType0Select Heap@167 null (|heapseg#sm| temp1@1 temp2@0)) o_64 f_68)) (U_2_bool (MapType1Select (MapType0Select Heap@167 null (|tree#sm| temp1@1)) o_64 f_68)))) (U_2_bool (MapType1Select newPMask@41 o_64 f_68)))))
 :qid |stdinbpl.9611:49|
 :skolemid |162|
 :pattern ( (MapType1Select newPMask@41 o_64 f_68))
))) (and (= Heap@168 (MapType0Store Heap@167 null (|heapseg#sm| temp1@1 temp2@0) newPMask@41)) (= Heap@169 (MapType0Store Heap@168 null (|heapseg#sm| temp1@1 temp2@0) (MapType1Store (MapType0Select Heap@168 null (|heapseg#sm| temp1@1 temp2@0)) temp1@1 sibling (bool_2_U true)))))) (and (and (forall ((o_65 T@U) (f_69 T@U) ) (! (let ((B@@26 (FieldTypeInv1 (type f_69))))
(let ((A@@27 (FieldTypeInv0 (type f_69))))
 (=> (and (and (= (type o_65) RefType) (= (type f_69) (FieldType A@@27 B@@26))) (or (U_2_bool (MapType1Select (MapType0Select Heap@169 null (|heapseg#sm| temp1@1 temp2@0)) o_65 f_69)) (U_2_bool (MapType1Select (MapType0Select Heap@169 null (|heapseg#sm| (MapType0Select Heap@169 temp1@1 sibling) temp2@0)) o_65 f_69)))) (U_2_bool (MapType1Select newPMask@42 o_65 f_69)))))
 :qid |stdinbpl.9618:49|
 :skolemid |163|
 :pattern ( (MapType1Select newPMask@42 o_65 f_69))
)) (= Heap@170 (MapType0Store Heap@169 null (|heapseg#sm| temp1@1 temp2@0) newPMask@42))) (and (= Heap@171 Heap@170) (= (ControlFlow 0 1167) 1165)))) anon528_correct)))
(let ((anon1515_Else_correct  (=> (and (HasDirectPerm Mask@213 null (heapseg temp1@1 temp2@0)) (= Heap@167 Heap@164)) (and (=> (= (ControlFlow 0 1170) 1167) anon1516_Then_correct) (=> (= (ControlFlow 0 1170) 1168) anon1516_Else_correct)))))
(let ((anon1515_Then_correct  (=> (and (and (not (HasDirectPerm Mask@213 null (heapseg temp1@1 temp2@0))) (= Heap@165 (MapType0Store Heap@164 null (|heapseg#sm| temp1@1 temp2@0) ZeroPMask))) (and (= Heap@166 (MapType0Store Heap@165 null (heapseg temp1@1 temp2@0) freshVersion@14)) (= Heap@167 Heap@166))) (and (=> (= (ControlFlow 0 1169) 1167) anon1516_Then_correct) (=> (= (ControlFlow 0 1169) 1168) anon1516_Else_correct)))))
(let ((anon524_correct  (=> (= Mask@213 (MapType1Store Mask@212 null (heapseg temp1@1 temp2@0) (real_2_U (+ (U_2_real (MapType1Select Mask@212 null (heapseg temp1@1 temp2@0))) FullPerm)))) (=> (and (and (state Heap@164 Mask@213) (state Heap@164 Mask@213)) (and (|heapseg#trigger| Heap@164 (heapseg temp1@1 temp2@0)) (= (MapType0Select Heap@164 null (heapseg temp1@1 temp2@0)) (FrameFragment (ite (not (= temp1@1 temp2@0)) (CombineFrames (MapType0Select Heap@164 null (tree temp1@1)) (CombineFrames (FrameFragment (MapType0Select Heap@164 temp1@1 sibling)) (CombineFrames (MapType0Select Heap@164 null (heapseg (MapType0Select Heap@164 temp1@1 sibling) temp2@0)) (FrameFragment (ite (not (= (MapType0Select Heap@164 temp1@1 sibling) temp2@0)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 1171) 1169) anon1515_Then_correct) (=> (= (ControlFlow 0 1171) 1170) anon1515_Else_correct))))))
(let ((anon1514_Else_correct  (=> (= (MapType0Select Heap@164 temp1@1 sibling) temp2@0) (=> (and (= Mask@212 Mask@211) (= (ControlFlow 0 1175) 1171)) anon524_correct))))
(let ((anon1514_Then_correct  (=> (not (= (MapType0Select Heap@164 temp1@1 sibling) temp2@0)) (and (=> (= (ControlFlow 0 1173) (- 0 1174)) (= (treeParent Heap@164 temp1@1) (segParent Heap@164 (MapType0Select Heap@164 temp1@1 sibling) temp2@0))) (=> (= (treeParent Heap@164 temp1@1) (segParent Heap@164 (MapType0Select Heap@164 temp1@1 sibling) temp2@0)) (=> (and (= Mask@212 Mask@211) (= (ControlFlow 0 1173) 1171)) anon524_correct))))))
(let ((anon522_correct  (=> (and (= Mask@211 (MapType1Store Mask@210 null (heapseg (MapType0Select Heap@164 temp1@1 sibling) temp2@0) (real_2_U (- (U_2_real (MapType1Select Mask@210 null (heapseg (MapType0Select Heap@164 temp1@1 sibling) temp2@0))) FullPerm)))) (InsidePredicate (heapseg temp1@1 temp2@0) (MapType0Select Heap@164 null (heapseg temp1@1 temp2@0)) (heapseg (MapType0Select Heap@164 temp1@1 sibling) temp2@0) (MapType0Select Heap@164 null (heapseg (MapType0Select Heap@164 temp1@1 sibling) temp2@0)))) (and (=> (= (ControlFlow 0 1176) 1173) anon1514_Then_correct) (=> (= (ControlFlow 0 1176) 1175) anon1514_Else_correct)))))
(let ((anon1513_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1179) 1176)) anon522_correct)))
(let ((anon1513_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1177) (- 0 1178)) (<= FullPerm (U_2_real (MapType1Select Mask@210 null (heapseg (MapType0Select Heap@164 temp1@1 sibling) temp2@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@210 null (heapseg (MapType0Select Heap@164 temp1@1 sibling) temp2@0)))) (=> (= (ControlFlow 0 1177) 1176) anon522_correct))))))
(let ((anon520_correct  (=> (= Mask@210 (MapType1Store Mask@209 temp1@1 sibling (real_2_U (- (U_2_real (MapType1Select Mask@209 temp1@1 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 1180) 1177) anon1513_Then_correct) (=> (= (ControlFlow 0 1180) 1179) anon1513_Else_correct)))))
(let ((anon1512_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1183) 1180)) anon520_correct)))
(let ((anon1512_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1181) (- 0 1182)) (<= FullPerm (U_2_real (MapType1Select Mask@209 temp1@1 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@209 temp1@1 sibling))) (=> (= (ControlFlow 0 1181) 1180) anon520_correct))))))
(let ((anon518_correct  (=> (and (= Mask@209 (MapType1Store Mask@208 null (tree temp1@1) (real_2_U (- (U_2_real (MapType1Select Mask@208 null (tree temp1@1))) FullPerm)))) (InsidePredicate (heapseg temp1@1 temp2@0) (MapType0Select Heap@164 null (heapseg temp1@1 temp2@0)) (tree temp1@1) (MapType0Select Heap@164 null (tree temp1@1)))) (and (=> (= (ControlFlow 0 1184) 1181) anon1512_Then_correct) (=> (= (ControlFlow 0 1184) 1183) anon1512_Else_correct)))))
(let ((anon1511_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1187) 1184)) anon518_correct)))
(let ((anon1511_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1185) (- 0 1186)) (<= FullPerm (U_2_real (MapType1Select Mask@208 null (tree temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@208 null (tree temp1@1)))) (=> (= (ControlFlow 0 1185) 1184) anon518_correct))))))
(let ((anon1510_Then_correct  (=> (not (= temp1@1 temp2@0)) (and (=> (= (ControlFlow 0 1188) 1185) anon1511_Then_correct) (=> (= (ControlFlow 0 1188) 1187) anon1511_Else_correct)))))
(let ((anon1510_Else_correct  (=> (= temp1@1 temp2@0) (=> (and (= Mask@212 Mask@208) (= (ControlFlow 0 1172) 1171)) anon524_correct))))
(let ((anon515_correct  (=> (and (state Heap@164 Mask@208) (state Heap@164 Mask@208)) (and (=> (= (ControlFlow 0 1189) 1188) anon1510_Then_correct) (=> (= (ControlFlow 0 1189) 1172) anon1510_Else_correct)))))
(let ((anon1509_Else_correct  (=> (= temp2@0 temp2@0) (=> (and (= Heap@164 Heap@160) (= (ControlFlow 0 1191) 1189)) anon515_correct))))
(let ((anon1509_Then_correct  (=> (and (and (and (not (= temp2@0 temp2@0)) (forall ((o_62 T@U) (f_66 T@U) ) (! (let ((B@@27 (FieldTypeInv1 (type f_66))))
(let ((A@@28 (FieldTypeInv0 (type f_66))))
 (=> (and (and (= (type o_62) RefType) (= (type f_66) (FieldType A@@28 B@@27))) (or (U_2_bool (MapType1Select (MapType0Select Heap@160 null (|heapseg#sm| temp2@0 temp2@0)) o_62 f_66)) (U_2_bool (MapType1Select (MapType0Select Heap@160 null (|tree#sm| temp2@0)) o_62 f_66)))) (U_2_bool (MapType1Select newPMask@39 o_62 f_66)))))
 :qid |stdinbpl.9549:49|
 :skolemid |160|
 :pattern ( (MapType1Select newPMask@39 o_62 f_66))
))) (and (= Heap@161 (MapType0Store Heap@160 null (|heapseg#sm| temp2@0 temp2@0) newPMask@39)) (= Heap@162 (MapType0Store Heap@161 null (|heapseg#sm| temp2@0 temp2@0) (MapType1Store (MapType0Select Heap@161 null (|heapseg#sm| temp2@0 temp2@0)) temp2@0 sibling (bool_2_U true)))))) (and (and (forall ((o_63 T@U) (f_67 T@U) ) (! (let ((B@@28 (FieldTypeInv1 (type f_67))))
(let ((A@@29 (FieldTypeInv0 (type f_67))))
 (=> (and (and (= (type o_63) RefType) (= (type f_67) (FieldType A@@29 B@@28))) (or (U_2_bool (MapType1Select (MapType0Select Heap@162 null (|heapseg#sm| temp2@0 temp2@0)) o_63 f_67)) (U_2_bool (MapType1Select (MapType0Select Heap@162 null (|heapseg#sm| (MapType0Select Heap@162 temp2@0 sibling) temp2@0)) o_63 f_67)))) (U_2_bool (MapType1Select newPMask@40 o_63 f_67)))))
 :qid |stdinbpl.9556:49|
 :skolemid |161|
 :pattern ( (MapType1Select newPMask@40 o_63 f_67))
)) (= Heap@163 (MapType0Store Heap@162 null (|heapseg#sm| temp2@0 temp2@0) newPMask@40))) (and (= Heap@164 Heap@163) (= (ControlFlow 0 1190) 1189)))) anon515_correct)))
(let ((anon1508_Else_correct  (=> (and (HasDirectPerm Mask@208 null (heapseg temp2@0 temp2@0)) (= Heap@160 Heap@127)) (and (=> (= (ControlFlow 0 1193) 1190) anon1509_Then_correct) (=> (= (ControlFlow 0 1193) 1191) anon1509_Else_correct)))))
(let ((anon1508_Then_correct  (=> (and (and (not (HasDirectPerm Mask@208 null (heapseg temp2@0 temp2@0))) (= Heap@158 (MapType0Store Heap@127 null (|heapseg#sm| temp2@0 temp2@0) ZeroPMask))) (and (= Heap@159 (MapType0Store Heap@158 null (heapseg temp2@0 temp2@0) freshVersion@13)) (= Heap@160 Heap@159))) (and (=> (= (ControlFlow 0 1192) 1190) anon1509_Then_correct) (=> (= (ControlFlow 0 1192) 1191) anon1509_Else_correct)))))
(let ((anon511_correct  (=> (= Mask@208 (MapType1Store Mask@207 null (heapseg temp2@0 temp2@0) (real_2_U (+ (U_2_real (MapType1Select Mask@207 null (heapseg temp2@0 temp2@0))) FullPerm)))) (=> (and (and (state Heap@127 Mask@208) (state Heap@127 Mask@208)) (and (|heapseg#trigger| Heap@127 (heapseg temp2@0 temp2@0)) (= (MapType0Select Heap@127 null (heapseg temp2@0 temp2@0)) (FrameFragment (ite (not (= temp2@0 temp2@0)) (CombineFrames (MapType0Select Heap@127 null (tree temp2@0)) (CombineFrames (FrameFragment (MapType0Select Heap@127 temp2@0 sibling)) (CombineFrames (MapType0Select Heap@127 null (heapseg (MapType0Select Heap@127 temp2@0 sibling) temp2@0)) (FrameFragment (ite (not (= (MapType0Select Heap@127 temp2@0 sibling) temp2@0)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 1194) 1192) anon1508_Then_correct) (=> (= (ControlFlow 0 1194) 1193) anon1508_Else_correct))))))
(let ((anon1507_Else_correct  (=> (= (MapType0Select Heap@127 temp2@0 sibling) temp2@0) (=> (and (= Mask@207 Mask@206) (= (ControlFlow 0 1198) 1194)) anon511_correct))))
(let ((anon1507_Then_correct  (=> (not (= (MapType0Select Heap@127 temp2@0 sibling) temp2@0)) (and (=> (= (ControlFlow 0 1196) (- 0 1197)) (= (treeParent Heap@127 temp2@0) (segParent Heap@127 (MapType0Select Heap@127 temp2@0 sibling) temp2@0))) (=> (= (treeParent Heap@127 temp2@0) (segParent Heap@127 (MapType0Select Heap@127 temp2@0 sibling) temp2@0)) (=> (and (= Mask@207 Mask@206) (= (ControlFlow 0 1196) 1194)) anon511_correct))))))
(let ((anon509_correct  (=> (and (= Mask@206 (MapType1Store Mask@205 null (heapseg (MapType0Select Heap@127 temp2@0 sibling) temp2@0) (real_2_U (- (U_2_real (MapType1Select Mask@205 null (heapseg (MapType0Select Heap@127 temp2@0 sibling) temp2@0))) FullPerm)))) (InsidePredicate (heapseg temp2@0 temp2@0) (MapType0Select Heap@127 null (heapseg temp2@0 temp2@0)) (heapseg (MapType0Select Heap@127 temp2@0 sibling) temp2@0) (MapType0Select Heap@127 null (heapseg (MapType0Select Heap@127 temp2@0 sibling) temp2@0)))) (and (=> (= (ControlFlow 0 1199) 1196) anon1507_Then_correct) (=> (= (ControlFlow 0 1199) 1198) anon1507_Else_correct)))))
(let ((anon1506_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1202) 1199)) anon509_correct)))
(let ((anon1506_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1200) (- 0 1201)) (<= FullPerm (U_2_real (MapType1Select Mask@205 null (heapseg (MapType0Select Heap@127 temp2@0 sibling) temp2@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@205 null (heapseg (MapType0Select Heap@127 temp2@0 sibling) temp2@0)))) (=> (= (ControlFlow 0 1200) 1199) anon509_correct))))))
(let ((anon507_correct  (=> (= Mask@205 (MapType1Store Mask@204 temp2@0 sibling (real_2_U (- (U_2_real (MapType1Select Mask@204 temp2@0 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 1203) 1200) anon1506_Then_correct) (=> (= (ControlFlow 0 1203) 1202) anon1506_Else_correct)))))
(let ((anon1505_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1206) 1203)) anon507_correct)))
(let ((anon1505_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1204) (- 0 1205)) (<= FullPerm (U_2_real (MapType1Select Mask@204 temp2@0 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@204 temp2@0 sibling))) (=> (= (ControlFlow 0 1204) 1203) anon507_correct))))))
(let ((anon505_correct  (=> (and (= Mask@204 (MapType1Store Mask@156 null (tree temp2@0) (real_2_U (- (U_2_real (MapType1Select Mask@156 null (tree temp2@0))) FullPerm)))) (InsidePredicate (heapseg temp2@0 temp2@0) (MapType0Select Heap@127 null (heapseg temp2@0 temp2@0)) (tree temp2@0) (MapType0Select Heap@127 null (tree temp2@0)))) (and (=> (= (ControlFlow 0 1207) 1204) anon1505_Then_correct) (=> (= (ControlFlow 0 1207) 1206) anon1505_Else_correct)))))
(let ((anon1504_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1210) 1207)) anon505_correct)))
(let ((anon1504_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1208) (- 0 1209)) (<= FullPerm (U_2_real (MapType1Select Mask@156 null (tree temp2@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@156 null (tree temp2@0)))) (=> (= (ControlFlow 0 1208) 1207) anon505_correct))))))
(let ((anon1503_Then_correct  (=> (not (= temp2@0 temp2@0)) (and (=> (= (ControlFlow 0 1211) 1208) anon1504_Then_correct) (=> (= (ControlFlow 0 1211) 1210) anon1504_Else_correct)))))
(let ((anon1503_Else_correct  (=> (= temp2@0 temp2@0) (=> (and (= Mask@207 Mask@156) (= (ControlFlow 0 1195) 1194)) anon511_correct))))
(let ((anon1502_Then_correct  (=> (and (or (= (MapType0Select Heap@100 temp1@1 sibling) null) (> (segDegree Heap@100 (MapType0Select Heap@100 temp1@1 sibling) null 0) (treeDegree Heap@100 temp2@0))) (state Heap@100 Mask@156)) (and (=> (= (ControlFlow 0 1212) (- 0 1216)) (HasDirectPerm Mask@156 temp2@0 sibling)) (=> (HasDirectPerm Mask@156 temp2@0 sibling) (=> (and (= temp2@3 (MapType0Select Heap@100 temp2@0 sibling)) (state Heap@100 Mask@156)) (and (=> (= (ControlFlow 0 1212) (- 0 1215)) (HasDirectPerm Mask@156 temp1@1 sibling)) (=> (HasDirectPerm Mask@156 temp1@1 sibling) (and (=> (= (ControlFlow 0 1212) (- 0 1214)) (= FullPerm (U_2_real (MapType1Select Mask@156 temp2@0 sibling)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@156 temp2@0 sibling))) (=> (and (= Heap@126 (MapType0Store Heap@100 temp2@0 sibling (MapType0Select Heap@100 temp1@1 sibling))) (state Heap@126 Mask@156)) (and (=> (= (ControlFlow 0 1212) (- 0 1213)) (= FullPerm (U_2_real (MapType1Select Mask@156 temp1@1 sibling)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@156 temp1@1 sibling))) (=> (and (= Heap@127 (MapType0Store Heap@126 temp1@1 sibling temp2@0)) (state Heap@127 Mask@156)) (and (=> (= (ControlFlow 0 1212) 1211) anon1503_Then_correct) (=> (= (ControlFlow 0 1212) 1195) anon1503_Else_correct))))))))))))))))
(let ((anon645_correct  (=> (and (and (and (state Heap@157 Mask@203) (state Heap@157 Mask@203)) (and (state Heap@157 Mask@203) (= temp1@6 tmp@0))) (and (and (= temp2@4 temp2@0) (= Heap@179 Heap@157)) (and (= Mask@226 Mask@203) (= (ControlFlow 0 972) 971)))) anon646_correct)))
(let ((anon1577_Else_correct  (=> (= tmp@0 null) (=> (and (= Heap@157 Heap@153) (= (ControlFlow 0 974) 972)) anon645_correct))))
(let ((anon1577_Then_correct  (=> (and (and (and (not (= tmp@0 null)) (forall ((o_74 T@U) (f_78 T@U) ) (! (let ((B@@29 (FieldTypeInv1 (type f_78))))
(let ((A@@30 (FieldTypeInv0 (type f_78))))
 (=> (and (and (= (type o_74) RefType) (= (type f_78) (FieldType A@@30 B@@29))) (or (U_2_bool (MapType1Select (MapType0Select Heap@153 null (|heapseg#sm| tmp@0 null)) o_74 f_78)) (U_2_bool (MapType1Select (MapType0Select Heap@153 null (|tree#sm| tmp@0)) o_74 f_78)))) (U_2_bool (MapType1Select newPMask@37 o_74 f_78)))))
 :qid |stdinbpl.10162:49|
 :skolemid |176|
 :pattern ( (MapType1Select newPMask@37 o_74 f_78))
))) (and (= Heap@154 (MapType0Store Heap@153 null (|heapseg#sm| tmp@0 null) newPMask@37)) (= Heap@155 (MapType0Store Heap@154 null (|heapseg#sm| tmp@0 null) (MapType1Store (MapType0Select Heap@154 null (|heapseg#sm| tmp@0 null)) tmp@0 sibling (bool_2_U true)))))) (and (and (forall ((o_75 T@U) (f_79 T@U) ) (! (let ((B@@30 (FieldTypeInv1 (type f_79))))
(let ((A@@31 (FieldTypeInv0 (type f_79))))
 (=> (and (and (= (type o_75) RefType) (= (type f_79) (FieldType A@@31 B@@30))) (or (U_2_bool (MapType1Select (MapType0Select Heap@155 null (|heapseg#sm| tmp@0 null)) o_75 f_79)) (U_2_bool (MapType1Select (MapType0Select Heap@155 null (|heapseg#sm| (MapType0Select Heap@155 tmp@0 sibling) null)) o_75 f_79)))) (U_2_bool (MapType1Select newPMask@38 o_75 f_79)))))
 :qid |stdinbpl.10169:49|
 :skolemid |177|
 :pattern ( (MapType1Select newPMask@38 o_75 f_79))
)) (= Heap@156 (MapType0Store Heap@155 null (|heapseg#sm| tmp@0 null) newPMask@38))) (and (= Heap@157 Heap@156) (= (ControlFlow 0 973) 972)))) anon645_correct)))
(let ((anon1576_Else_correct  (=> (and (HasDirectPerm Mask@203 null (heapseg tmp@0 null)) (= Heap@153 ExhaleHeap@58)) (and (=> (= (ControlFlow 0 976) 973) anon1577_Then_correct) (=> (= (ControlFlow 0 976) 974) anon1577_Else_correct)))))
(let ((anon1576_Then_correct  (=> (and (and (not (HasDirectPerm Mask@203 null (heapseg tmp@0 null))) (= Heap@151 (MapType0Store ExhaleHeap@58 null (|heapseg#sm| tmp@0 null) ZeroPMask))) (and (= Heap@152 (MapType0Store Heap@151 null (heapseg tmp@0 null) freshVersion@12)) (= Heap@153 Heap@152))) (and (=> (= (ControlFlow 0 975) 973) anon1577_Then_correct) (=> (= (ControlFlow 0 975) 974) anon1577_Else_correct)))))
(let ((anon641_correct  (=> (= Mask@203 (MapType1Store Mask@202 null (heapseg tmp@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@202 null (heapseg tmp@0 null))) FullPerm)))) (=> (and (and (state ExhaleHeap@58 Mask@203) (state ExhaleHeap@58 Mask@203)) (and (|heapseg#trigger| ExhaleHeap@58 (heapseg tmp@0 null)) (= (MapType0Select ExhaleHeap@58 null (heapseg tmp@0 null)) (FrameFragment (ite (not (= tmp@0 null)) (CombineFrames (MapType0Select ExhaleHeap@58 null (tree tmp@0)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@58 tmp@0 sibling)) (CombineFrames (MapType0Select ExhaleHeap@58 null (heapseg (MapType0Select ExhaleHeap@58 tmp@0 sibling) null)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@58 tmp@0 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 977) 975) anon1576_Then_correct) (=> (= (ControlFlow 0 977) 976) anon1576_Else_correct))))))
(let ((anon1575_Else_correct  (=> (= (MapType0Select ExhaleHeap@58 tmp@0 sibling) null) (=> (and (= Mask@202 Mask@201) (= (ControlFlow 0 981) 977)) anon641_correct))))
(let ((anon1575_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@58 tmp@0 sibling) null)) (and (=> (= (ControlFlow 0 979) (- 0 980)) (= (treeParent ExhaleHeap@58 tmp@0) (segParent ExhaleHeap@58 (MapType0Select ExhaleHeap@58 tmp@0 sibling) null))) (=> (= (treeParent ExhaleHeap@58 tmp@0) (segParent ExhaleHeap@58 (MapType0Select ExhaleHeap@58 tmp@0 sibling) null)) (=> (and (= Mask@202 Mask@201) (= (ControlFlow 0 979) 977)) anon641_correct))))))
(let ((anon639_correct  (=> (and (= Mask@201 (MapType1Store Mask@200 null (heapseg (MapType0Select ExhaleHeap@58 tmp@0 sibling) null) (real_2_U (- (U_2_real (MapType1Select Mask@200 null (heapseg (MapType0Select ExhaleHeap@58 tmp@0 sibling) null))) FullPerm)))) (InsidePredicate (heapseg tmp@0 null) (MapType0Select ExhaleHeap@58 null (heapseg tmp@0 null)) (heapseg (MapType0Select ExhaleHeap@58 tmp@0 sibling) null) (MapType0Select ExhaleHeap@58 null (heapseg (MapType0Select ExhaleHeap@58 tmp@0 sibling) null)))) (and (=> (= (ControlFlow 0 982) 979) anon1575_Then_correct) (=> (= (ControlFlow 0 982) 981) anon1575_Else_correct)))))
(let ((anon1574_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 985) 982)) anon639_correct)))
(let ((anon1574_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 983) (- 0 984)) (<= FullPerm (U_2_real (MapType1Select Mask@200 null (heapseg (MapType0Select ExhaleHeap@58 tmp@0 sibling) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@200 null (heapseg (MapType0Select ExhaleHeap@58 tmp@0 sibling) null)))) (=> (= (ControlFlow 0 983) 982) anon639_correct))))))
(let ((anon637_correct  (=> (= Mask@200 (MapType1Store Mask@199 tmp@0 sibling (real_2_U (- (U_2_real (MapType1Select Mask@199 tmp@0 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 986) 983) anon1574_Then_correct) (=> (= (ControlFlow 0 986) 985) anon1574_Else_correct)))))
(let ((anon1573_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 989) 986)) anon637_correct)))
(let ((anon1573_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 987) (- 0 988)) (<= FullPerm (U_2_real (MapType1Select Mask@199 tmp@0 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@199 tmp@0 sibling))) (=> (= (ControlFlow 0 987) 986) anon637_correct))))))
(let ((anon635_correct  (=> (and (= Mask@199 (MapType1Store Mask@198 null (tree tmp@0) (real_2_U (- (U_2_real (MapType1Select Mask@198 null (tree tmp@0))) FullPerm)))) (InsidePredicate (heapseg tmp@0 null) (MapType0Select ExhaleHeap@58 null (heapseg tmp@0 null)) (tree tmp@0) (MapType0Select ExhaleHeap@58 null (tree tmp@0)))) (and (=> (= (ControlFlow 0 990) 987) anon1573_Then_correct) (=> (= (ControlFlow 0 990) 989) anon1573_Else_correct)))))
(let ((anon1572_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 993) 990)) anon635_correct)))
(let ((anon1572_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 991) (- 0 992)) (<= FullPerm (U_2_real (MapType1Select Mask@198 null (tree tmp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@198 null (tree tmp@0)))) (=> (= (ControlFlow 0 991) 990) anon635_correct))))))
(let ((anon1571_Then_correct  (=> (not (= tmp@0 null)) (and (=> (= (ControlFlow 0 994) 991) anon1572_Then_correct) (=> (= (ControlFlow 0 994) 993) anon1572_Else_correct)))))
(let ((anon1571_Else_correct  (=> (= tmp@0 null) (=> (and (= Mask@202 Mask@198) (= (ControlFlow 0 978) 977)) anon641_correct))))
(let ((anon632_correct  (=> (and (state ExhaleHeap@58 Mask@198) (state ExhaleHeap@58 Mask@198)) (and (=> (= (ControlFlow 0 995) 994) anon1571_Then_correct) (=> (= (ControlFlow 0 995) 978) anon1571_Else_correct)))))
(let ((anon1570_Else_correct  (=> (and (= temp1@1 tmp@0) (= (ControlFlow 0 997) 995)) anon632_correct)))
(let ((anon1570_Then_correct  (=> (and (and (not (= temp1@1 tmp@0)) (state ExhaleHeap@58 Mask@198)) (and (= (segParent ExhaleHeap@58 arg_a_2@0 tmp@0) (segParent Heap@150 temp1@1 tmp@0)) (= (ControlFlow 0 996) 995))) anon632_correct)))
(let ((anon1569_Else_correct  (=> (= arg_a_2@0 temp1@1) (and (=> (= (ControlFlow 0 999) 996) anon1570_Then_correct) (=> (= (ControlFlow 0 999) 997) anon1570_Else_correct)))))
(let ((anon1569_Then_correct  (=> (not (= arg_a_2@0 temp1@1)) (=> (and (state ExhaleHeap@58 Mask@198) (= (segParent ExhaleHeap@58 arg_a_2@0 tmp@0) (segParent Heap@150 arg_a_2@0 temp1@1))) (and (=> (= (ControlFlow 0 998) 996) anon1570_Then_correct) (=> (= (ControlFlow 0 998) 997) anon1570_Else_correct))))))
(let ((anon628_correct  (=> (and (state ExhaleHeap@58 Mask@198) (= (segSize ExhaleHeap@58 arg_a_2@0 tmp@0) (+ (segSize Heap@150 arg_a_2@0 temp1@1) (segSize Heap@150 temp1@1 tmp@0)))) (and (=> (= (ControlFlow 0 1000) 998) anon1569_Then_correct) (=> (= (ControlFlow 0 1000) 999) anon1569_Else_correct)))))
(let ((anon1568_Else_correct  (=> (and (not (and (validChildren Heap@150 arg_a_2@0 temp1@1) (and (validChildren Heap@150 temp1@1 tmp@0) (=> (and (< 0 (segLength Heap@150 arg_a_2@0 temp1@1)) (< 0 (segLength Heap@150 temp1@1 tmp@0))) (= (segDegree Heap@150 arg_a_2@0 temp1@1 (- (segLength Heap@150 arg_a_2@0 temp1@1) 1)) (+ (segDegree Heap@150 temp1@1 tmp@0 0) 1)))))) (= (ControlFlow 0 1002) 1000)) anon628_correct)))
(let ((anon1568_Then_correct  (=> (and (and (and (validChildren Heap@150 arg_a_2@0 temp1@1) (and (validChildren Heap@150 temp1@1 tmp@0) (=> (and (< 0 (segLength Heap@150 arg_a_2@0 temp1@1)) (< 0 (segLength Heap@150 temp1@1 tmp@0))) (= (segDegree Heap@150 arg_a_2@0 temp1@1 (- (segLength Heap@150 arg_a_2@0 temp1@1) 1)) (+ (segDegree Heap@150 temp1@1 tmp@0 0) 1))))) (state ExhaleHeap@58 Mask@198)) (and (validChildren ExhaleHeap@58 arg_a_2@0 tmp@0) (= (ControlFlow 0 1001) 1000))) anon628_correct)))
(let ((anon1567_Else_correct  (=> (not (and (presorted Heap@150 arg_a_2@0 temp1@1) (and (presorted Heap@150 temp1@1 tmp@0) (=> (and (< 0 (segLength Heap@150 arg_a_2@0 temp1@1)) (< 0 (segLength Heap@150 temp1@1 tmp@0))) (and (<= (segDegree Heap@150 arg_a_2@0 temp1@1 (- (segLength Heap@150 arg_a_2@0 temp1@1) 1)) (segDegree Heap@150 temp1@1 tmp@0 0)) (and (=> (and (<= 2 (segLength Heap@150 arg_a_2@0 temp1@1)) (= (segDegree Heap@150 arg_a_2@0 temp1@1 (- (segLength Heap@150 arg_a_2@0 temp1@1) 1)) (segDegree Heap@150 arg_a_2@0 temp1@1 (- (segLength Heap@150 arg_a_2@0 temp1@1) 2)))) (< (segDegree Heap@150 arg_a_2@0 temp1@1 (- (segLength Heap@150 arg_a_2@0 temp1@1) 1)) (segDegree Heap@150 temp1@1 tmp@0 0))) (=> (and (<= 2 (segLength Heap@150 temp1@1 tmp@0)) (= (segDegree Heap@150 temp1@1 tmp@0 0) (segDegree Heap@150 temp1@1 tmp@0 1))) (< (segDegree Heap@150 arg_a_2@0 temp1@1 (- (segLength Heap@150 arg_a_2@0 temp1@1) 1)) (segDegree Heap@150 temp1@1 tmp@0 0))))))))) (and (=> (= (ControlFlow 0 1004) 1001) anon1568_Then_correct) (=> (= (ControlFlow 0 1004) 1002) anon1568_Else_correct)))))
(let ((anon1567_Then_correct  (=> (and (and (presorted Heap@150 arg_a_2@0 temp1@1) (and (presorted Heap@150 temp1@1 tmp@0) (=> (and (< 0 (segLength Heap@150 arg_a_2@0 temp1@1)) (< 0 (segLength Heap@150 temp1@1 tmp@0))) (and (<= (segDegree Heap@150 arg_a_2@0 temp1@1 (- (segLength Heap@150 arg_a_2@0 temp1@1) 1)) (segDegree Heap@150 temp1@1 tmp@0 0)) (and (=> (and (<= 2 (segLength Heap@150 arg_a_2@0 temp1@1)) (= (segDegree Heap@150 arg_a_2@0 temp1@1 (- (segLength Heap@150 arg_a_2@0 temp1@1) 1)) (segDegree Heap@150 arg_a_2@0 temp1@1 (- (segLength Heap@150 arg_a_2@0 temp1@1) 2)))) (< (segDegree Heap@150 arg_a_2@0 temp1@1 (- (segLength Heap@150 arg_a_2@0 temp1@1) 1)) (segDegree Heap@150 temp1@1 tmp@0 0))) (=> (and (<= 2 (segLength Heap@150 temp1@1 tmp@0)) (= (segDegree Heap@150 temp1@1 tmp@0 0) (segDegree Heap@150 temp1@1 tmp@0 1))) (< (segDegree Heap@150 arg_a_2@0 temp1@1 (- (segLength Heap@150 arg_a_2@0 temp1@1) 1)) (segDegree Heap@150 temp1@1 tmp@0 0)))))))) (and (state ExhaleHeap@58 Mask@198) (presorted ExhaleHeap@58 arg_a_2@0 tmp@0))) (and (=> (= (ControlFlow 0 1003) 1001) anon1568_Then_correct) (=> (= (ControlFlow 0 1003) 1002) anon1568_Else_correct)))))
(let ((anon1566_Else_correct  (=> (not (and (sorted Heap@150 arg_a_2@0 temp1@1) (and (sorted Heap@150 temp1@1 tmp@0) (=> (and (< 0 (segLength Heap@150 arg_a_2@0 temp1@1)) (< 0 (segLength Heap@150 temp1@1 tmp@0))) (< (segDegree Heap@150 arg_a_2@0 temp1@1 (- (segLength Heap@150 arg_a_2@0 temp1@1) 1)) (segDegree Heap@150 temp1@1 tmp@0 0)))))) (and (=> (= (ControlFlow 0 1006) 1003) anon1567_Then_correct) (=> (= (ControlFlow 0 1006) 1004) anon1567_Else_correct)))))
(let ((anon1566_Then_correct  (=> (and (and (sorted Heap@150 arg_a_2@0 temp1@1) (and (sorted Heap@150 temp1@1 tmp@0) (=> (and (< 0 (segLength Heap@150 arg_a_2@0 temp1@1)) (< 0 (segLength Heap@150 temp1@1 tmp@0))) (< (segDegree Heap@150 arg_a_2@0 temp1@1 (- (segLength Heap@150 arg_a_2@0 temp1@1) 1)) (segDegree Heap@150 temp1@1 tmp@0 0))))) (and (state ExhaleHeap@58 Mask@198) (sorted ExhaleHeap@58 arg_a_2@0 tmp@0))) (and (=> (= (ControlFlow 0 1005) 1003) anon1567_Then_correct) (=> (= (ControlFlow 0 1005) 1004) anon1567_Else_correct)))))
(let ((anon1565_Else_correct  (=> (and (= tmp@0 null) (= Mask@198 Mask@196)) (and (=> (= (ControlFlow 0 1008) 1005) anon1566_Then_correct) (=> (= (ControlFlow 0 1008) 1006) anon1566_Else_correct)))))
(let ((anon1565_Then_correct  (=> (and (not (= tmp@0 null)) (= Mask@197 (MapType1Store Mask@196 null (tree tmp@0) (real_2_U (+ (U_2_real (MapType1Select Mask@196 null (tree tmp@0))) FullPerm))))) (=> (and (and (and (state ExhaleHeap@58 Mask@197) (state ExhaleHeap@58 Mask@197)) (and (= (treeDegree ExhaleHeap@58 tmp@0) (treeDegree Heap@150 tmp@0)) (state ExhaleHeap@58 Mask@197))) (and (and (= (treeSize ExhaleHeap@58 tmp@0) (treeSize Heap@150 tmp@0)) (state ExhaleHeap@58 Mask@197)) (and (= (treeParent ExhaleHeap@58 tmp@0) (treeParent Heap@150 tmp@0)) (= Mask@198 Mask@197)))) (and (=> (= (ControlFlow 0 1007) 1005) anon1566_Then_correct) (=> (= (ControlFlow 0 1007) 1006) anon1566_Else_correct))))))
(let ((anon620_correct  (=> (IdenticalOnKnownLocations Heap@150 ExhaleHeap@58 Mask@195) (=> (and (and (and (= Mask@196 (MapType1Store Mask@195 null (heapseg arg_a_2@0 tmp@0) (real_2_U (+ (U_2_real (MapType1Select Mask@195 null (heapseg arg_a_2@0 tmp@0))) FullPerm)))) (state ExhaleHeap@58 Mask@196)) (and (state ExhaleHeap@58 Mask@196) (= (segLength ExhaleHeap@58 arg_a_2@0 tmp@0) (+ (segLength Heap@150 arg_a_2@0 temp1@1) (segLength Heap@150 temp1@1 tmp@0))))) (and (and (state ExhaleHeap@58 Mask@196) (forall ((i_4 Int) ) (!  (=> (and (<= 0 i_4) (< i_4 (segLength Heap@150 arg_a_2@0 temp1@1))) (= (segDegree ExhaleHeap@58 arg_a_2@0 tmp@0 i_4) (segDegree Heap@150 arg_a_2@0 temp1@1 i_4)))
 :qid |stdinbpl.10071:42|
 :skolemid |174|
 :pattern ( (|segDegree#frame| (MapType0Select ExhaleHeap@58 null (heapseg arg_a_2@0 tmp@0)) arg_a_2@0 tmp@0 i_4))
 :pattern ( (|segDegree#frame| (MapType0Select Heap@150 null (heapseg arg_a_2@0 temp1@1)) arg_a_2@0 temp1@1 i_4))
))) (and (state ExhaleHeap@58 Mask@196) (forall ((i_5_2 Int) ) (!  (=> (and (<= (segLength Heap@150 arg_a_2@0 temp1@1) i_5_2) (< i_5_2 (segLength ExhaleHeap@58 arg_a_2@0 tmp@0))) (= (segDegree ExhaleHeap@58 arg_a_2@0 tmp@0 i_5_2) (segDegree Heap@150 temp1@1 tmp@0 (- i_5_2 (segLength Heap@150 arg_a_2@0 temp1@1)))))
 :qid |stdinbpl.10076:42|
 :skolemid |175|
 :pattern ( (|segDegree#frame| (MapType0Select ExhaleHeap@58 null (heapseg arg_a_2@0 tmp@0)) arg_a_2@0 tmp@0 i_5_2))
))))) (and (=> (= (ControlFlow 0 1009) 1007) anon1565_Then_correct) (=> (= (ControlFlow 0 1009) 1008) anon1565_Else_correct))))))
(let ((anon1564_Else_correct  (=> (and (not (and (not (= arg_a_2@0 temp1@1)) (not (= temp1@1 tmp@0)))) (= (ControlFlow 0 1012) 1009)) anon620_correct)))
(let ((anon1564_Then_correct  (=> (and (not (= arg_a_2@0 temp1@1)) (not (= temp1@1 tmp@0))) (and (=> (= (ControlFlow 0 1010) (- 0 1011)) (= (segParent Heap@150 arg_a_2@0 temp1@1) (segParent Heap@150 temp1@1 tmp@0))) (=> (= (segParent Heap@150 arg_a_2@0 temp1@1) (segParent Heap@150 temp1@1 tmp@0)) (=> (= (ControlFlow 0 1010) 1009) anon620_correct))))))
(let ((anon617_correct  (=> (and (= Mask@194 (MapType1Store Mask@193 null (tree tmp@0) (real_2_U (- (U_2_real (MapType1Select Mask@193 null (tree tmp@0))) FullPerm)))) (= Mask@195 Mask@194)) (and (=> (= (ControlFlow 0 1014) 1010) anon1564_Then_correct) (=> (= (ControlFlow 0 1014) 1012) anon1564_Else_correct)))))
(let ((anon1563_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1017) 1014)) anon617_correct)))
(let ((anon1563_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1015) (- 0 1016)) (<= FullPerm (U_2_real (MapType1Select Mask@193 null (tree tmp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@193 null (tree tmp@0)))) (=> (= (ControlFlow 0 1015) 1014) anon617_correct))))))
(let ((anon1562_Then_correct  (=> (not (= tmp@0 null)) (and (=> (= (ControlFlow 0 1018) 1015) anon1563_Then_correct) (=> (= (ControlFlow 0 1018) 1017) anon1563_Else_correct)))))
(let ((anon1562_Else_correct  (=> (and (= tmp@0 null) (= Mask@195 Mask@193)) (and (=> (= (ControlFlow 0 1013) 1010) anon1564_Then_correct) (=> (= (ControlFlow 0 1013) 1012) anon1564_Else_correct)))))
(let ((anon614_correct  (=> (= Mask@193 (MapType1Store Mask@192 null (heapseg temp1@1 tmp@0) (real_2_U (- (U_2_real (MapType1Select Mask@192 null (heapseg temp1@1 tmp@0))) FullPerm)))) (and (=> (= (ControlFlow 0 1019) 1018) anon1562_Then_correct) (=> (= (ControlFlow 0 1019) 1013) anon1562_Else_correct)))))
(let ((anon1561_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1022) 1019)) anon614_correct)))
(let ((anon1561_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1020) (- 0 1021)) (<= FullPerm (U_2_real (MapType1Select Mask@192 null (heapseg temp1@1 tmp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@192 null (heapseg temp1@1 tmp@0)))) (=> (= (ControlFlow 0 1020) 1019) anon614_correct))))))
(let ((anon612_correct  (=> (= Mask@192 (MapType1Store Mask@191 null (heapseg arg_a_2@0 temp1@1) (real_2_U (- (U_2_real (MapType1Select Mask@191 null (heapseg arg_a_2@0 temp1@1))) FullPerm)))) (and (=> (= (ControlFlow 0 1023) 1020) anon1561_Then_correct) (=> (= (ControlFlow 0 1023) 1022) anon1561_Else_correct)))))
(let ((anon1560_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1026) 1023)) anon612_correct)))
(let ((anon1560_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1024) (- 0 1025)) (<= FullPerm (U_2_real (MapType1Select Mask@191 null (heapseg arg_a_2@0 temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@191 null (heapseg arg_a_2@0 temp1@1)))) (=> (= (ControlFlow 0 1024) 1023) anon612_correct))))))
(let ((anon610_correct  (=> (and (state Heap@150 Mask@191) (state Heap@150 Mask@191)) (and (=> (= (ControlFlow 0 1027) (- 0 1028)) (HasDirectPerm Mask@191 this@@66 Nodes)) (=> (HasDirectPerm Mask@191 this@@66 Nodes) (=> (= arg_a_2@0 (MapType0Select Heap@150 this@@66 Nodes)) (and (=> (= (ControlFlow 0 1027) 1024) anon1560_Then_correct) (=> (= (ControlFlow 0 1027) 1026) anon1560_Else_correct))))))))
(let ((anon1559_Else_correct  (=> (= (MapType0Select Heap@150 tmp@0 sibling) null) (=> (and (= Mask@191 Mask@190) (= (ControlFlow 0 1031) 1027)) anon610_correct))))
(let ((anon1559_Then_correct  (=> (not (= (MapType0Select Heap@150 tmp@0 sibling) null)) (=> (and (and (state Heap@150 Mask@190) (= (treeParent Heap@150 tmp@0) (segParent Heap@150 (MapType0Select Heap@150 tmp@0 sibling) null))) (and (= Mask@191 Mask@190) (= (ControlFlow 0 1030) 1027))) anon610_correct))))
(let ((anon1558_Then_correct  (=> (and (not (= tmp@0 null)) (= Mask@188 (MapType1Store Mask@187 null (tree tmp@0) (real_2_U (+ (U_2_real (MapType1Select Mask@187 null (tree tmp@0))) FullPerm))))) (=> (and (and (and (InsidePredicate (heapseg tmp@0 null) (MapType0Select Heap@150 null (heapseg tmp@0 null)) (tree tmp@0) (MapType0Select Heap@150 null (tree tmp@0))) (state Heap@150 Mask@188)) (and (not (= tmp@0 null)) (= Mask@189 (MapType1Store Mask@188 tmp@0 sibling (real_2_U (+ (U_2_real (MapType1Select Mask@188 tmp@0 sibling)) FullPerm)))))) (and (and (state Heap@150 Mask@189) (= Mask@190 (MapType1Store Mask@189 null (heapseg (MapType0Select Heap@150 tmp@0 sibling) null) (real_2_U (+ (U_2_real (MapType1Select Mask@189 null (heapseg (MapType0Select Heap@150 tmp@0 sibling) null))) FullPerm))))) (and (InsidePredicate (heapseg tmp@0 null) (MapType0Select Heap@150 null (heapseg tmp@0 null)) (heapseg (MapType0Select Heap@150 tmp@0 sibling) null) (MapType0Select Heap@150 null (heapseg (MapType0Select Heap@150 tmp@0 sibling) null))) (state Heap@150 Mask@190)))) (and (=> (= (ControlFlow 0 1032) 1030) anon1559_Then_correct) (=> (= (ControlFlow 0 1032) 1031) anon1559_Else_correct))))))
(let ((anon1558_Else_correct  (=> (= tmp@0 null) (=> (and (= Mask@191 Mask@187) (= (ControlFlow 0 1029) 1027)) anon610_correct))))
(let ((anon1557_Else_correct  (=> (and (HasDirectPerm Mask@187 null (heapseg tmp@0 null)) (= Heap@150 Heap@148)) (and (=> (= (ControlFlow 0 1034) 1032) anon1558_Then_correct) (=> (= (ControlFlow 0 1034) 1029) anon1558_Else_correct)))))
(let ((anon1557_Then_correct  (=> (not (HasDirectPerm Mask@187 null (heapseg tmp@0 null))) (=> (and (= Heap@149 (MapType0Store Heap@148 null (heapseg tmp@0 null) newVersion@5)) (= Heap@150 Heap@149)) (and (=> (= (ControlFlow 0 1033) 1032) anon1558_Then_correct) (=> (= (ControlFlow 0 1033) 1029) anon1558_Else_correct))))))
(let ((anon605_correct  (=> (= Mask@187 (MapType1Store Mask@186 null (heapseg tmp@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@186 null (heapseg tmp@0 null))) FullPerm)))) (and (=> (= (ControlFlow 0 1035) 1033) anon1557_Then_correct) (=> (= (ControlFlow 0 1035) 1034) anon1557_Else_correct)))))
(let ((anon1556_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1038) 1035)) anon605_correct)))
(let ((anon1556_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1036) (- 0 1037)) (<= FullPerm (U_2_real (MapType1Select Mask@186 null (heapseg tmp@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@186 null (heapseg tmp@0 null)))) (=> (= (ControlFlow 0 1036) 1035) anon605_correct))))))
(let ((anon603_correct  (=> (and (and (state Heap@148 Mask@186) (state Heap@148 Mask@186)) (and (|heapseg#trigger| Heap@148 (heapseg tmp@0 null)) (= (MapType0Select Heap@148 null (heapseg tmp@0 null)) (FrameFragment (ite (not (= tmp@0 null)) (CombineFrames (MapType0Select Heap@148 null (tree tmp@0)) (CombineFrames (FrameFragment (MapType0Select Heap@148 tmp@0 sibling)) (CombineFrames (MapType0Select Heap@148 null (heapseg (MapType0Select Heap@148 tmp@0 sibling) null)) (FrameFragment (ite (not (= (MapType0Select Heap@148 tmp@0 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 1039) 1036) anon1556_Then_correct) (=> (= (ControlFlow 0 1039) 1038) anon1556_Else_correct)))))
(let ((anon1555_Else_correct  (=> (= temp1@1 tmp@0) (=> (and (= Heap@148 Heap@144) (= (ControlFlow 0 1041) 1039)) anon603_correct))))
(let ((anon1555_Then_correct  (=> (and (and (and (not (= temp1@1 tmp@0)) (forall ((o_72 T@U) (f_76 T@U) ) (! (let ((B@@31 (FieldTypeInv1 (type f_76))))
(let ((A@@32 (FieldTypeInv0 (type f_76))))
 (=> (and (and (= (type o_72) RefType) (= (type f_76) (FieldType A@@32 B@@31))) (or (U_2_bool (MapType1Select (MapType0Select Heap@144 null (|heapseg#sm| temp1@1 tmp@0)) o_72 f_76)) (U_2_bool (MapType1Select (MapType0Select Heap@144 null (|tree#sm| temp1@1)) o_72 f_76)))) (U_2_bool (MapType1Select newPMask@35 o_72 f_76)))))
 :qid |stdinbpl.9965:49|
 :skolemid |172|
 :pattern ( (MapType1Select newPMask@35 o_72 f_76))
))) (and (= Heap@145 (MapType0Store Heap@144 null (|heapseg#sm| temp1@1 tmp@0) newPMask@35)) (= Heap@146 (MapType0Store Heap@145 null (|heapseg#sm| temp1@1 tmp@0) (MapType1Store (MapType0Select Heap@145 null (|heapseg#sm| temp1@1 tmp@0)) temp1@1 sibling (bool_2_U true)))))) (and (and (forall ((o_73 T@U) (f_77 T@U) ) (! (let ((B@@32 (FieldTypeInv1 (type f_77))))
(let ((A@@33 (FieldTypeInv0 (type f_77))))
 (=> (and (and (= (type o_73) RefType) (= (type f_77) (FieldType A@@33 B@@32))) (or (U_2_bool (MapType1Select (MapType0Select Heap@146 null (|heapseg#sm| temp1@1 tmp@0)) o_73 f_77)) (U_2_bool (MapType1Select (MapType0Select Heap@146 null (|heapseg#sm| (MapType0Select Heap@146 temp1@1 sibling) tmp@0)) o_73 f_77)))) (U_2_bool (MapType1Select newPMask@36 o_73 f_77)))))
 :qid |stdinbpl.9972:49|
 :skolemid |173|
 :pattern ( (MapType1Select newPMask@36 o_73 f_77))
)) (= Heap@147 (MapType0Store Heap@146 null (|heapseg#sm| temp1@1 tmp@0) newPMask@36))) (and (= Heap@148 Heap@147) (= (ControlFlow 0 1040) 1039)))) anon603_correct)))
(let ((anon1554_Else_correct  (=> (and (HasDirectPerm Mask@186 null (heapseg temp1@1 tmp@0)) (= Heap@144 Heap@141)) (and (=> (= (ControlFlow 0 1043) 1040) anon1555_Then_correct) (=> (= (ControlFlow 0 1043) 1041) anon1555_Else_correct)))))
(let ((anon1554_Then_correct  (=> (and (and (not (HasDirectPerm Mask@186 null (heapseg temp1@1 tmp@0))) (= Heap@142 (MapType0Store Heap@141 null (|heapseg#sm| temp1@1 tmp@0) ZeroPMask))) (and (= Heap@143 (MapType0Store Heap@142 null (heapseg temp1@1 tmp@0) freshVersion@11)) (= Heap@144 Heap@143))) (and (=> (= (ControlFlow 0 1042) 1040) anon1555_Then_correct) (=> (= (ControlFlow 0 1042) 1041) anon1555_Else_correct)))))
(let ((anon599_correct  (=> (= Mask@186 (MapType1Store Mask@185 null (heapseg temp1@1 tmp@0) (real_2_U (+ (U_2_real (MapType1Select Mask@185 null (heapseg temp1@1 tmp@0))) FullPerm)))) (=> (and (and (state Heap@141 Mask@186) (state Heap@141 Mask@186)) (and (|heapseg#trigger| Heap@141 (heapseg temp1@1 tmp@0)) (= (MapType0Select Heap@141 null (heapseg temp1@1 tmp@0)) (FrameFragment (ite (not (= temp1@1 tmp@0)) (CombineFrames (MapType0Select Heap@141 null (tree temp1@1)) (CombineFrames (FrameFragment (MapType0Select Heap@141 temp1@1 sibling)) (CombineFrames (MapType0Select Heap@141 null (heapseg (MapType0Select Heap@141 temp1@1 sibling) tmp@0)) (FrameFragment (ite (not (= (MapType0Select Heap@141 temp1@1 sibling) tmp@0)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 1044) 1042) anon1554_Then_correct) (=> (= (ControlFlow 0 1044) 1043) anon1554_Else_correct))))))
(let ((anon1553_Else_correct  (=> (= (MapType0Select Heap@141 temp1@1 sibling) tmp@0) (=> (and (= Mask@185 Mask@184) (= (ControlFlow 0 1048) 1044)) anon599_correct))))
(let ((anon1553_Then_correct  (=> (not (= (MapType0Select Heap@141 temp1@1 sibling) tmp@0)) (and (=> (= (ControlFlow 0 1046) (- 0 1047)) (= (treeParent Heap@141 temp1@1) (segParent Heap@141 (MapType0Select Heap@141 temp1@1 sibling) tmp@0))) (=> (= (treeParent Heap@141 temp1@1) (segParent Heap@141 (MapType0Select Heap@141 temp1@1 sibling) tmp@0)) (=> (and (= Mask@185 Mask@184) (= (ControlFlow 0 1046) 1044)) anon599_correct))))))
(let ((anon597_correct  (=> (and (= Mask@184 (MapType1Store Mask@183 null (heapseg (MapType0Select Heap@141 temp1@1 sibling) tmp@0) (real_2_U (- (U_2_real (MapType1Select Mask@183 null (heapseg (MapType0Select Heap@141 temp1@1 sibling) tmp@0))) FullPerm)))) (InsidePredicate (heapseg temp1@1 tmp@0) (MapType0Select Heap@141 null (heapseg temp1@1 tmp@0)) (heapseg (MapType0Select Heap@141 temp1@1 sibling) tmp@0) (MapType0Select Heap@141 null (heapseg (MapType0Select Heap@141 temp1@1 sibling) tmp@0)))) (and (=> (= (ControlFlow 0 1049) 1046) anon1553_Then_correct) (=> (= (ControlFlow 0 1049) 1048) anon1553_Else_correct)))))
(let ((anon1552_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1052) 1049)) anon597_correct)))
(let ((anon1552_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1050) (- 0 1051)) (<= FullPerm (U_2_real (MapType1Select Mask@183 null (heapseg (MapType0Select Heap@141 temp1@1 sibling) tmp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@183 null (heapseg (MapType0Select Heap@141 temp1@1 sibling) tmp@0)))) (=> (= (ControlFlow 0 1050) 1049) anon597_correct))))))
(let ((anon595_correct  (=> (= Mask@183 (MapType1Store Mask@182 temp1@1 sibling (real_2_U (- (U_2_real (MapType1Select Mask@182 temp1@1 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 1053) 1050) anon1552_Then_correct) (=> (= (ControlFlow 0 1053) 1052) anon1552_Else_correct)))))
(let ((anon1551_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1056) 1053)) anon595_correct)))
(let ((anon1551_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1054) (- 0 1055)) (<= FullPerm (U_2_real (MapType1Select Mask@182 temp1@1 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@182 temp1@1 sibling))) (=> (= (ControlFlow 0 1054) 1053) anon595_correct))))))
(let ((anon593_correct  (=> (and (= Mask@182 (MapType1Store Mask@181 null (tree temp1@1) (real_2_U (- (U_2_real (MapType1Select Mask@181 null (tree temp1@1))) FullPerm)))) (InsidePredicate (heapseg temp1@1 tmp@0) (MapType0Select Heap@141 null (heapseg temp1@1 tmp@0)) (tree temp1@1) (MapType0Select Heap@141 null (tree temp1@1)))) (and (=> (= (ControlFlow 0 1057) 1054) anon1551_Then_correct) (=> (= (ControlFlow 0 1057) 1056) anon1551_Else_correct)))))
(let ((anon1550_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1060) 1057)) anon593_correct)))
(let ((anon1550_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1058) (- 0 1059)) (<= FullPerm (U_2_real (MapType1Select Mask@181 null (tree temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@181 null (tree temp1@1)))) (=> (= (ControlFlow 0 1058) 1057) anon593_correct))))))
(let ((anon1549_Then_correct  (=> (not (= temp1@1 tmp@0)) (and (=> (= (ControlFlow 0 1061) 1058) anon1550_Then_correct) (=> (= (ControlFlow 0 1061) 1060) anon1550_Else_correct)))))
(let ((anon1549_Else_correct  (=> (= temp1@1 tmp@0) (=> (and (= Mask@185 Mask@181) (= (ControlFlow 0 1045) 1044)) anon599_correct))))
(let ((anon590_correct  (=> (and (state Heap@141 Mask@181) (state Heap@141 Mask@181)) (and (=> (= (ControlFlow 0 1062) 1061) anon1549_Then_correct) (=> (= (ControlFlow 0 1062) 1045) anon1549_Else_correct)))))
(let ((anon1548_Else_correct  (=> (= tmp@0 tmp@0) (=> (and (= Heap@141 Heap@137) (= (ControlFlow 0 1064) 1062)) anon590_correct))))
(let ((anon1548_Then_correct  (=> (and (and (and (not (= tmp@0 tmp@0)) (forall ((o_70 T@U) (f_74 T@U) ) (! (let ((B@@33 (FieldTypeInv1 (type f_74))))
(let ((A@@34 (FieldTypeInv0 (type f_74))))
 (=> (and (and (= (type o_70) RefType) (= (type f_74) (FieldType A@@34 B@@33))) (or (U_2_bool (MapType1Select (MapType0Select Heap@137 null (|heapseg#sm| tmp@0 tmp@0)) o_70 f_74)) (U_2_bool (MapType1Select (MapType0Select Heap@137 null (|tree#sm| tmp@0)) o_70 f_74)))) (U_2_bool (MapType1Select newPMask@33 o_70 f_74)))))
 :qid |stdinbpl.9903:49|
 :skolemid |170|
 :pattern ( (MapType1Select newPMask@33 o_70 f_74))
))) (and (= Heap@138 (MapType0Store Heap@137 null (|heapseg#sm| tmp@0 tmp@0) newPMask@33)) (= Heap@139 (MapType0Store Heap@138 null (|heapseg#sm| tmp@0 tmp@0) (MapType1Store (MapType0Select Heap@138 null (|heapseg#sm| tmp@0 tmp@0)) tmp@0 sibling (bool_2_U true)))))) (and (and (forall ((o_71 T@U) (f_75 T@U) ) (! (let ((B@@34 (FieldTypeInv1 (type f_75))))
(let ((A@@35 (FieldTypeInv0 (type f_75))))
 (=> (and (and (= (type o_71) RefType) (= (type f_75) (FieldType A@@35 B@@34))) (or (U_2_bool (MapType1Select (MapType0Select Heap@139 null (|heapseg#sm| tmp@0 tmp@0)) o_71 f_75)) (U_2_bool (MapType1Select (MapType0Select Heap@139 null (|heapseg#sm| (MapType0Select Heap@139 tmp@0 sibling) tmp@0)) o_71 f_75)))) (U_2_bool (MapType1Select newPMask@34 o_71 f_75)))))
 :qid |stdinbpl.9910:49|
 :skolemid |171|
 :pattern ( (MapType1Select newPMask@34 o_71 f_75))
)) (= Heap@140 (MapType0Store Heap@139 null (|heapseg#sm| tmp@0 tmp@0) newPMask@34))) (and (= Heap@141 Heap@140) (= (ControlFlow 0 1063) 1062)))) anon590_correct)))
(let ((anon1547_Else_correct  (=> (and (HasDirectPerm Mask@181 null (heapseg tmp@0 tmp@0)) (= Heap@137 Heap@134)) (and (=> (= (ControlFlow 0 1066) 1063) anon1548_Then_correct) (=> (= (ControlFlow 0 1066) 1064) anon1548_Else_correct)))))
(let ((anon1547_Then_correct  (=> (and (and (not (HasDirectPerm Mask@181 null (heapseg tmp@0 tmp@0))) (= Heap@135 (MapType0Store Heap@134 null (|heapseg#sm| tmp@0 tmp@0) ZeroPMask))) (and (= Heap@136 (MapType0Store Heap@135 null (heapseg tmp@0 tmp@0) freshVersion@10)) (= Heap@137 Heap@136))) (and (=> (= (ControlFlow 0 1065) 1063) anon1548_Then_correct) (=> (= (ControlFlow 0 1065) 1064) anon1548_Else_correct)))))
(let ((anon586_correct  (=> (= Mask@181 (MapType1Store Mask@180 null (heapseg tmp@0 tmp@0) (real_2_U (+ (U_2_real (MapType1Select Mask@180 null (heapseg tmp@0 tmp@0))) FullPerm)))) (=> (and (and (state Heap@134 Mask@181) (state Heap@134 Mask@181)) (and (|heapseg#trigger| Heap@134 (heapseg tmp@0 tmp@0)) (= (MapType0Select Heap@134 null (heapseg tmp@0 tmp@0)) (FrameFragment (ite (not (= tmp@0 tmp@0)) (CombineFrames (MapType0Select Heap@134 null (tree tmp@0)) (CombineFrames (FrameFragment (MapType0Select Heap@134 tmp@0 sibling)) (CombineFrames (MapType0Select Heap@134 null (heapseg (MapType0Select Heap@134 tmp@0 sibling) tmp@0)) (FrameFragment (ite (not (= (MapType0Select Heap@134 tmp@0 sibling) tmp@0)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 1067) 1065) anon1547_Then_correct) (=> (= (ControlFlow 0 1067) 1066) anon1547_Else_correct))))))
(let ((anon1546_Else_correct  (=> (= (MapType0Select Heap@134 tmp@0 sibling) tmp@0) (=> (and (= Mask@180 Mask@179) (= (ControlFlow 0 1071) 1067)) anon586_correct))))
(let ((anon1546_Then_correct  (=> (not (= (MapType0Select Heap@134 tmp@0 sibling) tmp@0)) (and (=> (= (ControlFlow 0 1069) (- 0 1070)) (= (treeParent Heap@134 tmp@0) (segParent Heap@134 (MapType0Select Heap@134 tmp@0 sibling) tmp@0))) (=> (= (treeParent Heap@134 tmp@0) (segParent Heap@134 (MapType0Select Heap@134 tmp@0 sibling) tmp@0)) (=> (and (= Mask@180 Mask@179) (= (ControlFlow 0 1069) 1067)) anon586_correct))))))
(let ((anon584_correct  (=> (and (= Mask@179 (MapType1Store Mask@178 null (heapseg (MapType0Select Heap@134 tmp@0 sibling) tmp@0) (real_2_U (- (U_2_real (MapType1Select Mask@178 null (heapseg (MapType0Select Heap@134 tmp@0 sibling) tmp@0))) FullPerm)))) (InsidePredicate (heapseg tmp@0 tmp@0) (MapType0Select Heap@134 null (heapseg tmp@0 tmp@0)) (heapseg (MapType0Select Heap@134 tmp@0 sibling) tmp@0) (MapType0Select Heap@134 null (heapseg (MapType0Select Heap@134 tmp@0 sibling) tmp@0)))) (and (=> (= (ControlFlow 0 1072) 1069) anon1546_Then_correct) (=> (= (ControlFlow 0 1072) 1071) anon1546_Else_correct)))))
(let ((anon1545_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1075) 1072)) anon584_correct)))
(let ((anon1545_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1073) (- 0 1074)) (<= FullPerm (U_2_real (MapType1Select Mask@178 null (heapseg (MapType0Select Heap@134 tmp@0 sibling) tmp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@178 null (heapseg (MapType0Select Heap@134 tmp@0 sibling) tmp@0)))) (=> (= (ControlFlow 0 1073) 1072) anon584_correct))))))
(let ((anon582_correct  (=> (= Mask@178 (MapType1Store Mask@177 tmp@0 sibling (real_2_U (- (U_2_real (MapType1Select Mask@177 tmp@0 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 1076) 1073) anon1545_Then_correct) (=> (= (ControlFlow 0 1076) 1075) anon1545_Else_correct)))))
(let ((anon1544_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1079) 1076)) anon582_correct)))
(let ((anon1544_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1077) (- 0 1078)) (<= FullPerm (U_2_real (MapType1Select Mask@177 tmp@0 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@177 tmp@0 sibling))) (=> (= (ControlFlow 0 1077) 1076) anon582_correct))))))
(let ((anon580_correct  (=> (and (= Mask@177 (MapType1Store Mask@176 null (tree tmp@0) (real_2_U (- (U_2_real (MapType1Select Mask@176 null (tree tmp@0))) FullPerm)))) (InsidePredicate (heapseg tmp@0 tmp@0) (MapType0Select Heap@134 null (heapseg tmp@0 tmp@0)) (tree tmp@0) (MapType0Select Heap@134 null (tree tmp@0)))) (and (=> (= (ControlFlow 0 1080) 1077) anon1544_Then_correct) (=> (= (ControlFlow 0 1080) 1079) anon1544_Else_correct)))))
(let ((anon1543_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1083) 1080)) anon580_correct)))
(let ((anon1543_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1081) (- 0 1082)) (<= FullPerm (U_2_real (MapType1Select Mask@176 null (tree tmp@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@176 null (tree tmp@0)))) (=> (= (ControlFlow 0 1081) 1080) anon580_correct))))))
(let ((anon1542_Then_correct  (=> (not (= tmp@0 tmp@0)) (and (=> (= (ControlFlow 0 1084) 1081) anon1543_Then_correct) (=> (= (ControlFlow 0 1084) 1083) anon1543_Else_correct)))))
(let ((anon1542_Else_correct  (=> (= tmp@0 tmp@0) (=> (and (= Mask@180 Mask@176) (= (ControlFlow 0 1068) 1067)) anon586_correct))))
(let ((anon577_correct  (=> (and (state Heap@134 Mask@176) (state Heap@134 Mask@176)) (and (=> (= (ControlFlow 0 1085) 1084) anon1542_Then_correct) (=> (= (ControlFlow 0 1085) 1068) anon1542_Else_correct)))))
(let ((anon1541_Else_correct  (=> (= temp2@0 null) (=> (and (= Heap@134 Heap@130) (= (ControlFlow 0 1087) 1085)) anon577_correct))))
(let ((anon1541_Then_correct  (=> (and (and (and (not (= temp2@0 null)) (forall ((o_68 T@U) (f_72 T@U) ) (! (let ((B@@35 (FieldTypeInv1 (type f_72))))
(let ((A@@36 (FieldTypeInv0 (type f_72))))
 (=> (and (and (= (type o_68) RefType) (= (type f_72) (FieldType A@@36 B@@35))) (or (U_2_bool (MapType1Select (MapType0Select Heap@130 null (|heapseg#sm| temp2@0 null)) o_68 f_72)) (U_2_bool (MapType1Select (MapType0Select Heap@130 null (|tree#sm| temp2@0)) o_68 f_72)))) (U_2_bool (MapType1Select newPMask@31 o_68 f_72)))))
 :qid |stdinbpl.9841:49|
 :skolemid |168|
 :pattern ( (MapType1Select newPMask@31 o_68 f_72))
))) (and (= Heap@131 (MapType0Store Heap@130 null (|heapseg#sm| temp2@0 null) newPMask@31)) (= Heap@132 (MapType0Store Heap@131 null (|heapseg#sm| temp2@0 null) (MapType1Store (MapType0Select Heap@131 null (|heapseg#sm| temp2@0 null)) temp2@0 sibling (bool_2_U true)))))) (and (and (forall ((o_69 T@U) (f_73 T@U) ) (! (let ((B@@36 (FieldTypeInv1 (type f_73))))
(let ((A@@37 (FieldTypeInv0 (type f_73))))
 (=> (and (and (= (type o_69) RefType) (= (type f_73) (FieldType A@@37 B@@36))) (or (U_2_bool (MapType1Select (MapType0Select Heap@132 null (|heapseg#sm| temp2@0 null)) o_69 f_73)) (U_2_bool (MapType1Select (MapType0Select Heap@132 null (|heapseg#sm| (MapType0Select Heap@132 temp2@0 sibling) null)) o_69 f_73)))) (U_2_bool (MapType1Select newPMask@32 o_69 f_73)))))
 :qid |stdinbpl.9848:49|
 :skolemid |169|
 :pattern ( (MapType1Select newPMask@32 o_69 f_73))
)) (= Heap@133 (MapType0Store Heap@132 null (|heapseg#sm| temp2@0 null) newPMask@32))) (and (= Heap@134 Heap@133) (= (ControlFlow 0 1086) 1085)))) anon577_correct)))
(let ((anon1540_Else_correct  (=> (and (HasDirectPerm Mask@176 null (heapseg temp2@0 null)) (= Heap@130 Heap@100)) (and (=> (= (ControlFlow 0 1089) 1086) anon1541_Then_correct) (=> (= (ControlFlow 0 1089) 1087) anon1541_Else_correct)))))
(let ((anon1540_Then_correct  (=> (and (and (not (HasDirectPerm Mask@176 null (heapseg temp2@0 null))) (= Heap@128 (MapType0Store Heap@100 null (|heapseg#sm| temp2@0 null) ZeroPMask))) (and (= Heap@129 (MapType0Store Heap@128 null (heapseg temp2@0 null) freshVersion@9)) (= Heap@130 Heap@129))) (and (=> (= (ControlFlow 0 1088) 1086) anon1541_Then_correct) (=> (= (ControlFlow 0 1088) 1087) anon1541_Else_correct)))))
(let ((anon573_correct  (=> (= Mask@176 (MapType1Store Mask@175 null (heapseg temp2@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@175 null (heapseg temp2@0 null))) FullPerm)))) (=> (and (and (state Heap@100 Mask@176) (state Heap@100 Mask@176)) (and (|heapseg#trigger| Heap@100 (heapseg temp2@0 null)) (= (MapType0Select Heap@100 null (heapseg temp2@0 null)) (FrameFragment (ite (not (= temp2@0 null)) (CombineFrames (MapType0Select Heap@100 null (tree temp2@0)) (CombineFrames (FrameFragment (MapType0Select Heap@100 temp2@0 sibling)) (CombineFrames (MapType0Select Heap@100 null (heapseg (MapType0Select Heap@100 temp2@0 sibling) null)) (FrameFragment (ite (not (= (MapType0Select Heap@100 temp2@0 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 1090) 1088) anon1540_Then_correct) (=> (= (ControlFlow 0 1090) 1089) anon1540_Else_correct))))))
(let ((anon1539_Else_correct  (=> (= (MapType0Select Heap@100 temp2@0 sibling) null) (=> (and (= Mask@175 Mask@174) (= (ControlFlow 0 1094) 1090)) anon573_correct))))
(let ((anon1539_Then_correct  (=> (not (= (MapType0Select Heap@100 temp2@0 sibling) null)) (and (=> (= (ControlFlow 0 1092) (- 0 1093)) (= (treeParent Heap@100 temp2@0) (segParent Heap@100 (MapType0Select Heap@100 temp2@0 sibling) null))) (=> (= (treeParent Heap@100 temp2@0) (segParent Heap@100 (MapType0Select Heap@100 temp2@0 sibling) null)) (=> (and (= Mask@175 Mask@174) (= (ControlFlow 0 1092) 1090)) anon573_correct))))))
(let ((anon571_correct  (=> (and (= Mask@174 (MapType1Store Mask@173 null (heapseg (MapType0Select Heap@100 temp2@0 sibling) null) (real_2_U (- (U_2_real (MapType1Select Mask@173 null (heapseg (MapType0Select Heap@100 temp2@0 sibling) null))) FullPerm)))) (InsidePredicate (heapseg temp2@0 null) (MapType0Select Heap@100 null (heapseg temp2@0 null)) (heapseg (MapType0Select Heap@100 temp2@0 sibling) null) (MapType0Select Heap@100 null (heapseg (MapType0Select Heap@100 temp2@0 sibling) null)))) (and (=> (= (ControlFlow 0 1095) 1092) anon1539_Then_correct) (=> (= (ControlFlow 0 1095) 1094) anon1539_Else_correct)))))
(let ((anon1538_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1098) 1095)) anon571_correct)))
(let ((anon1538_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1096) (- 0 1097)) (<= FullPerm (U_2_real (MapType1Select Mask@173 null (heapseg (MapType0Select Heap@100 temp2@0 sibling) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@173 null (heapseg (MapType0Select Heap@100 temp2@0 sibling) null)))) (=> (= (ControlFlow 0 1096) 1095) anon571_correct))))))
(let ((anon569_correct  (=> (= Mask@173 (MapType1Store Mask@172 temp2@0 sibling (real_2_U (- (U_2_real (MapType1Select Mask@172 temp2@0 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 1099) 1096) anon1538_Then_correct) (=> (= (ControlFlow 0 1099) 1098) anon1538_Else_correct)))))
(let ((anon1537_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1102) 1099)) anon569_correct)))
(let ((anon1537_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1100) (- 0 1101)) (<= FullPerm (U_2_real (MapType1Select Mask@172 temp2@0 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@172 temp2@0 sibling))) (=> (= (ControlFlow 0 1100) 1099) anon569_correct))))))
(let ((anon567_correct  (=> (and (= Mask@172 (MapType1Store Mask@156 null (tree temp2@0) (real_2_U (- (U_2_real (MapType1Select Mask@156 null (tree temp2@0))) FullPerm)))) (InsidePredicate (heapseg temp2@0 null) (MapType0Select Heap@100 null (heapseg temp2@0 null)) (tree temp2@0) (MapType0Select Heap@100 null (tree temp2@0)))) (and (=> (= (ControlFlow 0 1103) 1100) anon1537_Then_correct) (=> (= (ControlFlow 0 1103) 1102) anon1537_Else_correct)))))
(let ((anon1536_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1106) 1103)) anon567_correct)))
(let ((anon1536_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1104) (- 0 1105)) (<= FullPerm (U_2_real (MapType1Select Mask@156 null (tree temp2@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@156 null (tree temp2@0)))) (=> (= (ControlFlow 0 1104) 1103) anon567_correct))))))
(let ((anon1535_Then_correct  (=> (not (= temp2@0 null)) (and (=> (= (ControlFlow 0 1107) 1104) anon1536_Then_correct) (=> (= (ControlFlow 0 1107) 1106) anon1536_Else_correct)))))
(let ((anon1535_Else_correct  (=> (= temp2@0 null) (=> (and (= Mask@175 Mask@156) (= (ControlFlow 0 1091) 1090)) anon573_correct))))
(let ((anon1502_Else_correct  (=> (not (or (= (MapType0Select Heap@100 temp1@1 sibling) null) (> (segDegree Heap@100 (MapType0Select Heap@100 temp1@1 sibling) null 0) (treeDegree Heap@100 temp2@0)))) (and (=> (= (ControlFlow 0 1108) (- 0 1109)) (HasDirectPerm Mask@156 temp1@1 sibling)) (=> (HasDirectPerm Mask@156 temp1@1 sibling) (=> (and (= tmp@0 (MapType0Select Heap@100 temp1@1 sibling)) (state Heap@100 Mask@156)) (and (=> (= (ControlFlow 0 1108) 1107) anon1535_Then_correct) (=> (= (ControlFlow 0 1108) 1091) anon1535_Else_correct))))))))
(let ((anon1497_Then_correct  (=> (not (= (MapType0Select Heap@100 temp1@1 sibling) null)) (and (=> (= (ControlFlow 0 1227) (- 0 1228)) (HasDirectPerm Mask@156 temp1@1 sibling)) (=> (HasDirectPerm Mask@156 temp1@1 sibling) (and (and (and (and (and (=> (= (ControlFlow 0 1227) 1212) anon1502_Then_correct) (=> (= (ControlFlow 0 1227) 1108) anon1502_Else_correct)) (=> (= (ControlFlow 0 1227) 1224) anon1501_Then_correct)) (=> (= (ControlFlow 0 1227) 1226) anon1501_Else_correct)) (=> (= (ControlFlow 0 1227) 1220) anon1499_Then_correct)) (=> (= (ControlFlow 0 1227) 1222) anon1499_Else_correct)))))))
(let ((anon1497_Else_correct  (=> (= (MapType0Select Heap@100 temp1@1 sibling) null) (and (=> (= (ControlFlow 0 1217) 1212) anon1502_Then_correct) (=> (= (ControlFlow 0 1217) 1108) anon1502_Else_correct)))))
(let ((anon1496_Then_correct  (=> (< (treeDegree Heap@100 temp1@1) (treeDegree Heap@100 temp2@0)) (and (=> (= (ControlFlow 0 1229) (- 0 1230)) (HasDirectPerm Mask@156 temp1@1 sibling)) (=> (HasDirectPerm Mask@156 temp1@1 sibling) (and (=> (= (ControlFlow 0 1229) 1227) anon1497_Then_correct) (=> (= (ControlFlow 0 1229) 1217) anon1497_Else_correct)))))))
(let ((anon687_correct  (=> (and (and (and (state Heap@125 Mask@171) (state Heap@125 Mask@171)) (and (state Heap@125 Mask@171) (= Mask@227 Mask@171))) (and (and (= Heap@180 Heap@125) (= temp2@5 temp2@2)) (and (= temp1@7 temp2@0) (= (ControlFlow 0 895) 894)))) anon690_correct)))
(let ((anon1599_Else_correct  (=> (= (MapType0Select Heap@121 this@@66 Nodes) temp2@0) (=> (and (= Heap@125 Heap@121) (= (ControlFlow 0 897) 895)) anon687_correct))))
(let ((anon1599_Then_correct  (=> (and (and (and (not (= (MapType0Select Heap@121 this@@66 Nodes) temp2@0)) (forall ((o_80 T@U) (f_84 T@U) ) (! (let ((B@@37 (FieldTypeInv1 (type f_84))))
(let ((A@@38 (FieldTypeInv0 (type f_84))))
 (=> (and (and (= (type o_80) RefType) (= (type f_84) (FieldType A@@38 B@@37))) (or (U_2_bool (MapType1Select (MapType0Select Heap@121 null (|heapseg#sm| (MapType0Select Heap@121 this@@66 Nodes) temp2@0)) o_80 f_84)) (U_2_bool (MapType1Select (MapType0Select Heap@121 null (|tree#sm| (MapType0Select Heap@121 this@@66 Nodes))) o_80 f_84)))) (U_2_bool (MapType1Select newPMask@29 o_80 f_84)))))
 :qid |stdinbpl.10394:49|
 :skolemid |182|
 :pattern ( (MapType1Select newPMask@29 o_80 f_84))
))) (and (= Heap@122 (MapType0Store Heap@121 null (|heapseg#sm| (MapType0Select Heap@121 this@@66 Nodes) temp2@0) newPMask@29)) (= Heap@123 (MapType0Store Heap@122 null (|heapseg#sm| (MapType0Select Heap@122 this@@66 Nodes) temp2@0) (MapType1Store (MapType0Select Heap@122 null (|heapseg#sm| (MapType0Select Heap@122 this@@66 Nodes) temp2@0)) (MapType0Select Heap@122 this@@66 Nodes) sibling (bool_2_U true)))))) (and (and (forall ((o_81 T@U) (f_85 T@U) ) (! (let ((B@@38 (FieldTypeInv1 (type f_85))))
(let ((A@@39 (FieldTypeInv0 (type f_85))))
 (=> (and (and (= (type o_81) RefType) (= (type f_85) (FieldType A@@39 B@@38))) (or (U_2_bool (MapType1Select (MapType0Select Heap@123 null (|heapseg#sm| (MapType0Select Heap@123 this@@66 Nodes) temp2@0)) o_81 f_85)) (U_2_bool (MapType1Select (MapType0Select Heap@123 null (|heapseg#sm| (MapType0Select Heap@123 (MapType0Select Heap@123 this@@66 Nodes) sibling) temp2@0)) o_81 f_85)))) (U_2_bool (MapType1Select newPMask@30 o_81 f_85)))))
 :qid |stdinbpl.10401:49|
 :skolemid |183|
 :pattern ( (MapType1Select newPMask@30 o_81 f_85))
)) (= Heap@124 (MapType0Store Heap@123 null (|heapseg#sm| (MapType0Select Heap@123 this@@66 Nodes) temp2@0) newPMask@30))) (and (= Heap@125 Heap@124) (= (ControlFlow 0 896) 895)))) anon687_correct)))
(let ((anon1598_Else_correct  (=> (and (HasDirectPerm Mask@171 null (heapseg (MapType0Select Heap@118 this@@66 Nodes) temp2@0)) (= Heap@121 Heap@118)) (and (=> (= (ControlFlow 0 899) 896) anon1599_Then_correct) (=> (= (ControlFlow 0 899) 897) anon1599_Else_correct)))))
(let ((anon1598_Then_correct  (=> (and (and (not (HasDirectPerm Mask@171 null (heapseg (MapType0Select Heap@118 this@@66 Nodes) temp2@0))) (= Heap@119 (MapType0Store Heap@118 null (|heapseg#sm| (MapType0Select Heap@118 this@@66 Nodes) temp2@0) ZeroPMask))) (and (= Heap@120 (MapType0Store Heap@119 null (heapseg (MapType0Select Heap@119 this@@66 Nodes) temp2@0) freshVersion@8)) (= Heap@121 Heap@120))) (and (=> (= (ControlFlow 0 898) 896) anon1599_Then_correct) (=> (= (ControlFlow 0 898) 897) anon1599_Else_correct)))))
(let ((anon683_correct  (=> (= Mask@171 (MapType1Store Mask@170 null (heapseg (MapType0Select Heap@118 this@@66 Nodes) temp2@0) (real_2_U (+ (U_2_real (MapType1Select Mask@170 null (heapseg (MapType0Select Heap@118 this@@66 Nodes) temp2@0))) FullPerm)))) (=> (and (and (state Heap@118 Mask@171) (state Heap@118 Mask@171)) (and (|heapseg#trigger| Heap@118 (heapseg (MapType0Select Heap@118 this@@66 Nodes) temp2@0)) (= (MapType0Select Heap@118 null (heapseg (MapType0Select Heap@118 this@@66 Nodes) temp2@0)) (FrameFragment (ite (not (= (MapType0Select Heap@118 this@@66 Nodes) temp2@0)) (CombineFrames (MapType0Select Heap@118 null (tree (MapType0Select Heap@118 this@@66 Nodes))) (CombineFrames (FrameFragment (MapType0Select Heap@118 (MapType0Select Heap@118 this@@66 Nodes) sibling)) (CombineFrames (MapType0Select Heap@118 null (heapseg (MapType0Select Heap@118 (MapType0Select Heap@118 this@@66 Nodes) sibling) temp2@0)) (FrameFragment (ite (not (= (MapType0Select Heap@118 (MapType0Select Heap@118 this@@66 Nodes) sibling) temp2@0)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 900) 898) anon1598_Then_correct) (=> (= (ControlFlow 0 900) 899) anon1598_Else_correct))))))
(let ((anon1597_Else_correct  (=> (= (MapType0Select Heap@118 (MapType0Select Heap@118 this@@66 Nodes) sibling) temp2@0) (=> (and (= Mask@170 Mask@169) (= (ControlFlow 0 904) 900)) anon683_correct))))
(let ((anon1597_Then_correct  (=> (not (= (MapType0Select Heap@118 (MapType0Select Heap@118 this@@66 Nodes) sibling) temp2@0)) (and (=> (= (ControlFlow 0 902) (- 0 903)) (= (treeParent Heap@118 (MapType0Select Heap@118 this@@66 Nodes)) (segParent Heap@118 (MapType0Select Heap@118 (MapType0Select Heap@118 this@@66 Nodes) sibling) temp2@0))) (=> (= (treeParent Heap@118 (MapType0Select Heap@118 this@@66 Nodes)) (segParent Heap@118 (MapType0Select Heap@118 (MapType0Select Heap@118 this@@66 Nodes) sibling) temp2@0)) (=> (and (= Mask@170 Mask@169) (= (ControlFlow 0 902) 900)) anon683_correct))))))
(let ((anon681_correct  (=> (and (= Mask@169 (MapType1Store Mask@168 null (heapseg (MapType0Select Heap@118 (MapType0Select Heap@118 this@@66 Nodes) sibling) temp2@0) (real_2_U (- (U_2_real (MapType1Select Mask@168 null (heapseg (MapType0Select Heap@118 (MapType0Select Heap@118 this@@66 Nodes) sibling) temp2@0))) FullPerm)))) (InsidePredicate (heapseg (MapType0Select Heap@118 this@@66 Nodes) temp2@0) (MapType0Select Heap@118 null (heapseg (MapType0Select Heap@118 this@@66 Nodes) temp2@0)) (heapseg (MapType0Select Heap@118 (MapType0Select Heap@118 this@@66 Nodes) sibling) temp2@0) (MapType0Select Heap@118 null (heapseg (MapType0Select Heap@118 (MapType0Select Heap@118 this@@66 Nodes) sibling) temp2@0)))) (and (=> (= (ControlFlow 0 905) 902) anon1597_Then_correct) (=> (= (ControlFlow 0 905) 904) anon1597_Else_correct)))))
(let ((anon1596_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 908) 905)) anon681_correct)))
(let ((anon1596_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 906) (- 0 907)) (<= FullPerm (U_2_real (MapType1Select Mask@168 null (heapseg (MapType0Select Heap@118 (MapType0Select Heap@118 this@@66 Nodes) sibling) temp2@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@168 null (heapseg (MapType0Select Heap@118 (MapType0Select Heap@118 this@@66 Nodes) sibling) temp2@0)))) (=> (= (ControlFlow 0 906) 905) anon681_correct))))))
(let ((anon679_correct  (=> (= Mask@168 (MapType1Store Mask@167 (MapType0Select Heap@118 this@@66 Nodes) sibling (real_2_U (- (U_2_real (MapType1Select Mask@167 (MapType0Select Heap@118 this@@66 Nodes) sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 909) 906) anon1596_Then_correct) (=> (= (ControlFlow 0 909) 908) anon1596_Else_correct)))))
(let ((anon1595_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 912) 909)) anon679_correct)))
(let ((anon1595_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 910) (- 0 911)) (<= FullPerm (U_2_real (MapType1Select Mask@167 (MapType0Select Heap@118 this@@66 Nodes) sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@167 (MapType0Select Heap@118 this@@66 Nodes) sibling))) (=> (= (ControlFlow 0 910) 909) anon679_correct))))))
(let ((anon677_correct  (=> (and (= Mask@167 (MapType1Store Mask@166 null (tree (MapType0Select Heap@118 this@@66 Nodes)) (real_2_U (- (U_2_real (MapType1Select Mask@166 null (tree (MapType0Select Heap@118 this@@66 Nodes)))) FullPerm)))) (InsidePredicate (heapseg (MapType0Select Heap@118 this@@66 Nodes) temp2@0) (MapType0Select Heap@118 null (heapseg (MapType0Select Heap@118 this@@66 Nodes) temp2@0)) (tree (MapType0Select Heap@118 this@@66 Nodes)) (MapType0Select Heap@118 null (tree (MapType0Select Heap@118 this@@66 Nodes))))) (and (=> (= (ControlFlow 0 913) 910) anon1595_Then_correct) (=> (= (ControlFlow 0 913) 912) anon1595_Else_correct)))))
(let ((anon1594_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 916) 913)) anon677_correct)))
(let ((anon1594_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 914) (- 0 915)) (<= FullPerm (U_2_real (MapType1Select Mask@166 null (tree (MapType0Select Heap@118 this@@66 Nodes)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@166 null (tree (MapType0Select Heap@118 this@@66 Nodes))))) (=> (= (ControlFlow 0 914) 913) anon677_correct))))))
(let ((anon1593_Then_correct  (=> (not (= (MapType0Select Heap@118 this@@66 Nodes) temp2@0)) (and (=> (= (ControlFlow 0 917) 914) anon1594_Then_correct) (=> (= (ControlFlow 0 917) 916) anon1594_Else_correct)))))
(let ((anon1593_Else_correct  (=> (= (MapType0Select Heap@118 this@@66 Nodes) temp2@0) (=> (and (= Mask@170 Mask@166) (= (ControlFlow 0 901) 900)) anon683_correct))))
(let ((anon1592_Then_correct  (=> (= temp1@1 (MapType0Select Heap@117 this@@66 Nodes)) (and (=> (= (ControlFlow 0 918) (- 0 920)) (= FullPerm (U_2_real (MapType1Select Mask@166 this@@66 Nodes)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@166 this@@66 Nodes))) (=> (and (= Heap@118 (MapType0Store Heap@117 this@@66 Nodes temp2@0)) (state Heap@118 Mask@166)) (and (=> (= (ControlFlow 0 918) (- 0 919)) (HasDirectPerm Mask@166 this@@66 Nodes)) (=> (HasDirectPerm Mask@166 this@@66 Nodes) (and (=> (= (ControlFlow 0 918) 917) anon1593_Then_correct) (=> (= (ControlFlow 0 918) 901) anon1593_Else_correct))))))))))
(let ((anon1592_Else_correct  (=> (and (not (= temp1@1 (MapType0Select Heap@117 this@@66 Nodes))) (= (ControlFlow 0 833) (- 0 832))) false)))
(let ((anon673_correct  (=> (and (state Heap@117 Mask@166) (state Heap@117 Mask@166)) (and (=> (= (ControlFlow 0 921) (- 0 922)) (HasDirectPerm Mask@166 this@@66 Nodes)) (=> (HasDirectPerm Mask@166 this@@66 Nodes) (and (=> (= (ControlFlow 0 921) 918) anon1592_Then_correct) (=> (= (ControlFlow 0 921) 833) anon1592_Else_correct)))))))
(let ((anon1591_Else_correct  (=> (= temp2@0 null) (=> (and (= Heap@117 Heap@113) (= (ControlFlow 0 924) 921)) anon673_correct))))
(let ((anon1591_Then_correct  (=> (and (and (and (not (= temp2@0 null)) (forall ((o_78 T@U) (f_82 T@U) ) (! (let ((B@@39 (FieldTypeInv1 (type f_82))))
(let ((A@@40 (FieldTypeInv0 (type f_82))))
 (=> (and (and (= (type o_78) RefType) (= (type f_82) (FieldType A@@40 B@@39))) (or (U_2_bool (MapType1Select (MapType0Select Heap@113 null (|heapseg#sm| temp2@0 null)) o_78 f_82)) (U_2_bool (MapType1Select (MapType0Select Heap@113 null (|tree#sm| temp2@0)) o_78 f_82)))) (U_2_bool (MapType1Select newPMask@27 o_78 f_82)))))
 :qid |stdinbpl.10315:45|
 :skolemid |180|
 :pattern ( (MapType1Select newPMask@27 o_78 f_82))
))) (and (= Heap@114 (MapType0Store Heap@113 null (|heapseg#sm| temp2@0 null) newPMask@27)) (= Heap@115 (MapType0Store Heap@114 null (|heapseg#sm| temp2@0 null) (MapType1Store (MapType0Select Heap@114 null (|heapseg#sm| temp2@0 null)) temp2@0 sibling (bool_2_U true)))))) (and (and (forall ((o_79 T@U) (f_83 T@U) ) (! (let ((B@@40 (FieldTypeInv1 (type f_83))))
(let ((A@@41 (FieldTypeInv0 (type f_83))))
 (=> (and (and (= (type o_79) RefType) (= (type f_83) (FieldType A@@41 B@@40))) (or (U_2_bool (MapType1Select (MapType0Select Heap@115 null (|heapseg#sm| temp2@0 null)) o_79 f_83)) (U_2_bool (MapType1Select (MapType0Select Heap@115 null (|heapseg#sm| (MapType0Select Heap@115 temp2@0 sibling) null)) o_79 f_83)))) (U_2_bool (MapType1Select newPMask@28 o_79 f_83)))))
 :qid |stdinbpl.10322:45|
 :skolemid |181|
 :pattern ( (MapType1Select newPMask@28 o_79 f_83))
)) (= Heap@116 (MapType0Store Heap@115 null (|heapseg#sm| temp2@0 null) newPMask@28))) (and (= Heap@117 Heap@116) (= (ControlFlow 0 923) 921)))) anon673_correct)))
(let ((anon1590_Else_correct  (=> (and (HasDirectPerm Mask@166 null (heapseg temp2@0 null)) (= Heap@113 Heap@110)) (and (=> (= (ControlFlow 0 926) 923) anon1591_Then_correct) (=> (= (ControlFlow 0 926) 924) anon1591_Else_correct)))))
(let ((anon1590_Then_correct  (=> (and (and (not (HasDirectPerm Mask@166 null (heapseg temp2@0 null))) (= Heap@111 (MapType0Store Heap@110 null (|heapseg#sm| temp2@0 null) ZeroPMask))) (and (= Heap@112 (MapType0Store Heap@111 null (heapseg temp2@0 null) freshVersion@7)) (= Heap@113 Heap@112))) (and (=> (= (ControlFlow 0 925) 923) anon1591_Then_correct) (=> (= (ControlFlow 0 925) 924) anon1591_Else_correct)))))
(let ((anon669_correct  (=> (= Mask@166 (MapType1Store Mask@165 null (heapseg temp2@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@165 null (heapseg temp2@0 null))) FullPerm)))) (=> (and (and (state Heap@110 Mask@166) (state Heap@110 Mask@166)) (and (|heapseg#trigger| Heap@110 (heapseg temp2@0 null)) (= (MapType0Select Heap@110 null (heapseg temp2@0 null)) (FrameFragment (ite (not (= temp2@0 null)) (CombineFrames (MapType0Select Heap@110 null (tree temp2@0)) (CombineFrames (FrameFragment (MapType0Select Heap@110 temp2@0 sibling)) (CombineFrames (MapType0Select Heap@110 null (heapseg (MapType0Select Heap@110 temp2@0 sibling) null)) (FrameFragment (ite (not (= (MapType0Select Heap@110 temp2@0 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 927) 925) anon1590_Then_correct) (=> (= (ControlFlow 0 927) 926) anon1590_Else_correct))))))
(let ((anon1589_Else_correct  (=> (= (MapType0Select Heap@110 temp2@0 sibling) null) (=> (and (= Mask@165 Mask@164) (= (ControlFlow 0 931) 927)) anon669_correct))))
(let ((anon1589_Then_correct  (=> (not (= (MapType0Select Heap@110 temp2@0 sibling) null)) (and (=> (= (ControlFlow 0 929) (- 0 930)) (= (treeParent Heap@110 temp2@0) (segParent Heap@110 (MapType0Select Heap@110 temp2@0 sibling) null))) (=> (= (treeParent Heap@110 temp2@0) (segParent Heap@110 (MapType0Select Heap@110 temp2@0 sibling) null)) (=> (and (= Mask@165 Mask@164) (= (ControlFlow 0 929) 927)) anon669_correct))))))
(let ((anon667_correct  (=> (and (= Mask@164 (MapType1Store Mask@163 null (heapseg (MapType0Select Heap@110 temp2@0 sibling) null) (real_2_U (- (U_2_real (MapType1Select Mask@163 null (heapseg (MapType0Select Heap@110 temp2@0 sibling) null))) FullPerm)))) (InsidePredicate (heapseg temp2@0 null) (MapType0Select Heap@110 null (heapseg temp2@0 null)) (heapseg (MapType0Select Heap@110 temp2@0 sibling) null) (MapType0Select Heap@110 null (heapseg (MapType0Select Heap@110 temp2@0 sibling) null)))) (and (=> (= (ControlFlow 0 932) 929) anon1589_Then_correct) (=> (= (ControlFlow 0 932) 931) anon1589_Else_correct)))))
(let ((anon1588_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 935) 932)) anon667_correct)))
(let ((anon1588_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 933) (- 0 934)) (<= FullPerm (U_2_real (MapType1Select Mask@163 null (heapseg (MapType0Select Heap@110 temp2@0 sibling) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@163 null (heapseg (MapType0Select Heap@110 temp2@0 sibling) null)))) (=> (= (ControlFlow 0 933) 932) anon667_correct))))))
(let ((anon665_correct  (=> (= Mask@163 (MapType1Store Mask@162 temp2@0 sibling (real_2_U (- (U_2_real (MapType1Select Mask@162 temp2@0 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 936) 933) anon1588_Then_correct) (=> (= (ControlFlow 0 936) 935) anon1588_Else_correct)))))
(let ((anon1587_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 939) 936)) anon665_correct)))
(let ((anon1587_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 937) (- 0 938)) (<= FullPerm (U_2_real (MapType1Select Mask@162 temp2@0 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@162 temp2@0 sibling))) (=> (= (ControlFlow 0 937) 936) anon665_correct))))))
(let ((anon663_correct  (=> (and (= Mask@162 (MapType1Store Mask@161 null (tree temp2@0) (real_2_U (- (U_2_real (MapType1Select Mask@161 null (tree temp2@0))) FullPerm)))) (InsidePredicate (heapseg temp2@0 null) (MapType0Select Heap@110 null (heapseg temp2@0 null)) (tree temp2@0) (MapType0Select Heap@110 null (tree temp2@0)))) (and (=> (= (ControlFlow 0 940) 937) anon1587_Then_correct) (=> (= (ControlFlow 0 940) 939) anon1587_Else_correct)))))
(let ((anon1586_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 943) 940)) anon663_correct)))
(let ((anon1586_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 941) (- 0 942)) (<= FullPerm (U_2_real (MapType1Select Mask@161 null (tree temp2@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@161 null (tree temp2@0)))) (=> (= (ControlFlow 0 941) 940) anon663_correct))))))
(let ((anon1585_Then_correct  (=> (not (= temp2@0 null)) (and (=> (= (ControlFlow 0 944) 941) anon1586_Then_correct) (=> (= (ControlFlow 0 944) 943) anon1586_Else_correct)))))
(let ((anon1585_Else_correct  (=> (= temp2@0 null) (=> (and (= Mask@165 Mask@161) (= (ControlFlow 0 928) 927)) anon669_correct))))
(let ((anon660_correct  (=> (and (state Heap@110 Mask@161) (state Heap@110 Mask@161)) (and (=> (= (ControlFlow 0 945) 944) anon1585_Then_correct) (=> (= (ControlFlow 0 945) 928) anon1585_Else_correct)))))
(let ((anon1584_Else_correct  (=> (= temp1@1 null) (=> (and (= Heap@110 Heap@106) (= (ControlFlow 0 947) 945)) anon660_correct))))
(let ((anon1584_Then_correct  (=> (and (and (and (not (= temp1@1 null)) (forall ((o_76 T@U) (f_80 T@U) ) (! (let ((B@@41 (FieldTypeInv1 (type f_80))))
(let ((A@@42 (FieldTypeInv0 (type f_80))))
 (=> (and (and (= (type o_76) RefType) (= (type f_80) (FieldType A@@42 B@@41))) (or (U_2_bool (MapType1Select (MapType0Select Heap@106 null (|heapseg#sm| temp1@1 null)) o_76 f_80)) (U_2_bool (MapType1Select (MapType0Select Heap@106 null (|tree#sm| temp1@1)) o_76 f_80)))) (U_2_bool (MapType1Select newPMask@25 o_76 f_80)))))
 :qid |stdinbpl.10253:45|
 :skolemid |178|
 :pattern ( (MapType1Select newPMask@25 o_76 f_80))
))) (and (= Heap@107 (MapType0Store Heap@106 null (|heapseg#sm| temp1@1 null) newPMask@25)) (= Heap@108 (MapType0Store Heap@107 null (|heapseg#sm| temp1@1 null) (MapType1Store (MapType0Select Heap@107 null (|heapseg#sm| temp1@1 null)) temp1@1 sibling (bool_2_U true)))))) (and (and (forall ((o_77 T@U) (f_81 T@U) ) (! (let ((B@@42 (FieldTypeInv1 (type f_81))))
(let ((A@@43 (FieldTypeInv0 (type f_81))))
 (=> (and (and (= (type o_77) RefType) (= (type f_81) (FieldType A@@43 B@@42))) (or (U_2_bool (MapType1Select (MapType0Select Heap@108 null (|heapseg#sm| temp1@1 null)) o_77 f_81)) (U_2_bool (MapType1Select (MapType0Select Heap@108 null (|heapseg#sm| (MapType0Select Heap@108 temp1@1 sibling) null)) o_77 f_81)))) (U_2_bool (MapType1Select newPMask@26 o_77 f_81)))))
 :qid |stdinbpl.10260:45|
 :skolemid |179|
 :pattern ( (MapType1Select newPMask@26 o_77 f_81))
)) (= Heap@109 (MapType0Store Heap@108 null (|heapseg#sm| temp1@1 null) newPMask@26))) (and (= Heap@110 Heap@109) (= (ControlFlow 0 946) 945)))) anon660_correct)))
(let ((anon1583_Else_correct  (=> (and (HasDirectPerm Mask@161 null (heapseg temp1@1 null)) (= Heap@106 Heap@103)) (and (=> (= (ControlFlow 0 949) 946) anon1584_Then_correct) (=> (= (ControlFlow 0 949) 947) anon1584_Else_correct)))))
(let ((anon1583_Then_correct  (=> (and (and (not (HasDirectPerm Mask@161 null (heapseg temp1@1 null))) (= Heap@104 (MapType0Store Heap@103 null (|heapseg#sm| temp1@1 null) ZeroPMask))) (and (= Heap@105 (MapType0Store Heap@104 null (heapseg temp1@1 null) freshVersion@6)) (= Heap@106 Heap@105))) (and (=> (= (ControlFlow 0 948) 946) anon1584_Then_correct) (=> (= (ControlFlow 0 948) 947) anon1584_Else_correct)))))
(let ((anon656_correct  (=> (= Mask@161 (MapType1Store Mask@160 null (heapseg temp1@1 null) (real_2_U (+ (U_2_real (MapType1Select Mask@160 null (heapseg temp1@1 null))) FullPerm)))) (=> (and (and (state Heap@103 Mask@161) (state Heap@103 Mask@161)) (and (|heapseg#trigger| Heap@103 (heapseg temp1@1 null)) (= (MapType0Select Heap@103 null (heapseg temp1@1 null)) (FrameFragment (ite (not (= temp1@1 null)) (CombineFrames (MapType0Select Heap@103 null (tree temp1@1)) (CombineFrames (FrameFragment (MapType0Select Heap@103 temp1@1 sibling)) (CombineFrames (MapType0Select Heap@103 null (heapseg (MapType0Select Heap@103 temp1@1 sibling) null)) (FrameFragment (ite (not (= (MapType0Select Heap@103 temp1@1 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 950) 948) anon1583_Then_correct) (=> (= (ControlFlow 0 950) 949) anon1583_Else_correct))))))
(let ((anon1582_Else_correct  (=> (= (MapType0Select Heap@103 temp1@1 sibling) null) (=> (and (= Mask@160 Mask@159) (= (ControlFlow 0 954) 950)) anon656_correct))))
(let ((anon1582_Then_correct  (=> (not (= (MapType0Select Heap@103 temp1@1 sibling) null)) (and (=> (= (ControlFlow 0 952) (- 0 953)) (= (treeParent Heap@103 temp1@1) (segParent Heap@103 (MapType0Select Heap@103 temp1@1 sibling) null))) (=> (= (treeParent Heap@103 temp1@1) (segParent Heap@103 (MapType0Select Heap@103 temp1@1 sibling) null)) (=> (and (= Mask@160 Mask@159) (= (ControlFlow 0 952) 950)) anon656_correct))))))
(let ((anon654_correct  (=> (and (= Mask@159 (MapType1Store Mask@158 null (heapseg (MapType0Select Heap@103 temp1@1 sibling) null) (real_2_U (- (U_2_real (MapType1Select Mask@158 null (heapseg (MapType0Select Heap@103 temp1@1 sibling) null))) FullPerm)))) (InsidePredicate (heapseg temp1@1 null) (MapType0Select Heap@103 null (heapseg temp1@1 null)) (heapseg (MapType0Select Heap@103 temp1@1 sibling) null) (MapType0Select Heap@103 null (heapseg (MapType0Select Heap@103 temp1@1 sibling) null)))) (and (=> (= (ControlFlow 0 955) 952) anon1582_Then_correct) (=> (= (ControlFlow 0 955) 954) anon1582_Else_correct)))))
(let ((anon1581_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 958) 955)) anon654_correct)))
(let ((anon1581_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 956) (- 0 957)) (<= FullPerm (U_2_real (MapType1Select Mask@158 null (heapseg (MapType0Select Heap@103 temp1@1 sibling) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@158 null (heapseg (MapType0Select Heap@103 temp1@1 sibling) null)))) (=> (= (ControlFlow 0 956) 955) anon654_correct))))))
(let ((anon652_correct  (=> (= Mask@158 (MapType1Store Mask@157 temp1@1 sibling (real_2_U (- (U_2_real (MapType1Select Mask@157 temp1@1 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 959) 956) anon1581_Then_correct) (=> (= (ControlFlow 0 959) 958) anon1581_Else_correct)))))
(let ((anon1580_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 962) 959)) anon652_correct)))
(let ((anon1580_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 960) (- 0 961)) (<= FullPerm (U_2_real (MapType1Select Mask@157 temp1@1 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@157 temp1@1 sibling))) (=> (= (ControlFlow 0 960) 959) anon652_correct))))))
(let ((anon650_correct  (=> (and (= Mask@157 (MapType1Store Mask@156 null (tree temp1@1) (real_2_U (- (U_2_real (MapType1Select Mask@156 null (tree temp1@1))) FullPerm)))) (InsidePredicate (heapseg temp1@1 null) (MapType0Select Heap@103 null (heapseg temp1@1 null)) (tree temp1@1) (MapType0Select Heap@103 null (tree temp1@1)))) (and (=> (= (ControlFlow 0 963) 960) anon1580_Then_correct) (=> (= (ControlFlow 0 963) 962) anon1580_Else_correct)))))
(let ((anon1579_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 966) 963)) anon650_correct)))
(let ((anon1579_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 964) (- 0 965)) (<= FullPerm (U_2_real (MapType1Select Mask@156 null (tree temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@156 null (tree temp1@1)))) (=> (= (ControlFlow 0 964) 963) anon650_correct))))))
(let ((anon1578_Then_correct  (=> (not (= temp1@1 null)) (and (=> (= (ControlFlow 0 967) 964) anon1579_Then_correct) (=> (= (ControlFlow 0 967) 966) anon1579_Else_correct)))))
(let ((anon1578_Else_correct  (=> (= temp1@1 null) (=> (and (= Mask@160 Mask@156) (= (ControlFlow 0 951) 950)) anon656_correct))))
(let ((anon1496_Else_correct  (=> (<= (treeDegree Heap@100 temp2@0) (treeDegree Heap@100 temp1@1)) (=> (and (state Heap@100 Mask@156) (state Heap@100 Mask@156)) (and (=> (= (ControlFlow 0 968) (- 0 970)) (HasDirectPerm Mask@156 temp2@0 sibling)) (=> (HasDirectPerm Mask@156 temp2@0 sibling) (=> (and (= temp2@2 (MapType0Select Heap@100 temp2@0 sibling)) (state Heap@100 Mask@156)) (and (=> (= (ControlFlow 0 968) (- 0 969)) (= FullPerm (U_2_real (MapType1Select Mask@156 temp2@0 sibling)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@156 temp2@0 sibling))) (=> (and (= Heap@103 (MapType0Store Heap@100 temp2@0 sibling temp1@1)) (state Heap@103 Mask@156)) (and (=> (= (ControlFlow 0 968) 967) anon1578_Then_correct) (=> (= (ControlFlow 0 968) 951) anon1578_Else_correct))))))))))))
(let ((anon490_correct true))
(let ((anon1495_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 831) 828)) anon490_correct)))
(let ((anon1495_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 829) (- 0 830)) (<= FullPerm (U_2_real (MapType1Select Mask@156 null (tree temp2@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@156 null (tree temp2@0)))) (=> (= (ControlFlow 0 829) 828) anon490_correct))))))
(let ((anon486_correct true))
(let ((anon1493_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 827) 824)) anon486_correct)))
(let ((anon1493_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 825) (- 0 826)) (<= FullPerm (U_2_real (MapType1Select Mask@156 null (tree temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@156 null (tree temp1@1)))) (=> (= (ControlFlow 0 825) 824) anon486_correct))))))
(let ((anon1449_Else_correct  (=> (not (= (treeDegree Heap@100 temp1@1) (treeDegree Heap@100 temp2@0))) (and (and (and (and (and (=> (= (ControlFlow 0 1231) 1229) anon1496_Then_correct) (=> (= (ControlFlow 0 1231) 968) anon1496_Else_correct)) (=> (= (ControlFlow 0 1231) 829) anon1495_Then_correct)) (=> (= (ControlFlow 0 1231) 831) anon1495_Else_correct)) (=> (= (ControlFlow 0 1231) 825) anon1493_Then_correct)) (=> (= (ControlFlow 0 1231) 827) anon1493_Else_correct)))))
(let ((anon400_correct true))
(let ((anon1448_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 823) 820)) anon400_correct)))
(let ((anon1448_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 821) (- 0 822)) (<= FullPerm (U_2_real (MapType1Select Mask@156 null (tree temp2@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@156 null (tree temp2@0)))) (=> (= (ControlFlow 0 821) 820) anon400_correct))))))
(let ((anon396_correct true))
(let ((anon1446_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 819) 816)) anon396_correct)))
(let ((anon1446_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 817) (- 0 818)) (<= FullPerm (U_2_real (MapType1Select Mask@156 null (tree temp1@1))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@156 null (tree temp1@1)))) (=> (= (ControlFlow 0 817) 816) anon396_correct))))))
(let ((anon393_correct  (=> (and (state Heap@100 Mask@156) (state Heap@100 Mask@156)) (and (and (and (and (and (=> (= (ControlFlow 0 1367) 1362) anon1449_Then_correct) (=> (= (ControlFlow 0 1367) 1231) anon1449_Else_correct)) (=> (= (ControlFlow 0 1367) 821) anon1448_Then_correct)) (=> (= (ControlFlow 0 1367) 823) anon1448_Else_correct)) (=> (= (ControlFlow 0 1367) 817) anon1446_Then_correct)) (=> (= (ControlFlow 0 1367) 819) anon1446_Else_correct)))))
(let ((anon1444_Else_correct  (=> (= (MapType0Select Heap@100 temp2@0 sibling) null) (=> (and (= Mask@156 Mask@155) (= (ControlFlow 0 1370) 1367)) anon393_correct))))
(let ((anon1444_Then_correct  (=> (not (= (MapType0Select Heap@100 temp2@0 sibling) null)) (=> (and (and (state Heap@100 Mask@155) (= (treeParent Heap@100 temp2@0) (segParent Heap@100 (MapType0Select Heap@100 temp2@0 sibling) null))) (and (= Mask@156 Mask@155) (= (ControlFlow 0 1369) 1367))) anon393_correct))))
(let ((anon1443_Then_correct  (=> (and (not (= temp2@0 null)) (= Mask@153 (MapType1Store Mask@152 null (tree temp2@0) (real_2_U (+ (U_2_real (MapType1Select Mask@152 null (tree temp2@0))) FullPerm))))) (=> (and (and (and (InsidePredicate (heapseg temp2@0 null) (MapType0Select Heap@100 null (heapseg temp2@0 null)) (tree temp2@0) (MapType0Select Heap@100 null (tree temp2@0))) (state Heap@100 Mask@153)) (and (not (= temp2@0 null)) (= Mask@154 (MapType1Store Mask@153 temp2@0 sibling (real_2_U (+ (U_2_real (MapType1Select Mask@153 temp2@0 sibling)) FullPerm)))))) (and (and (state Heap@100 Mask@154) (= Mask@155 (MapType1Store Mask@154 null (heapseg (MapType0Select Heap@100 temp2@0 sibling) null) (real_2_U (+ (U_2_real (MapType1Select Mask@154 null (heapseg (MapType0Select Heap@100 temp2@0 sibling) null))) FullPerm))))) (and (InsidePredicate (heapseg temp2@0 null) (MapType0Select Heap@100 null (heapseg temp2@0 null)) (heapseg (MapType0Select Heap@100 temp2@0 sibling) null) (MapType0Select Heap@100 null (heapseg (MapType0Select Heap@100 temp2@0 sibling) null))) (state Heap@100 Mask@155)))) (and (=> (= (ControlFlow 0 1371) 1369) anon1444_Then_correct) (=> (= (ControlFlow 0 1371) 1370) anon1444_Else_correct))))))
(let ((anon1443_Else_correct  (=> (= temp2@0 null) (=> (and (= Mask@156 Mask@152) (= (ControlFlow 0 1368) 1367)) anon393_correct))))
(let ((anon1442_Else_correct  (=> (and (HasDirectPerm Mask@152 null (heapseg temp2@0 null)) (= Heap@100 Heap@98)) (and (=> (= (ControlFlow 0 1373) 1371) anon1443_Then_correct) (=> (= (ControlFlow 0 1373) 1368) anon1443_Else_correct)))))
(let ((anon1442_Then_correct  (=> (not (HasDirectPerm Mask@152 null (heapseg temp2@0 null))) (=> (and (= Heap@99 (MapType0Store Heap@98 null (heapseg temp2@0 null) newVersion@4)) (= Heap@100 Heap@99)) (and (=> (= (ControlFlow 0 1372) 1371) anon1443_Then_correct) (=> (= (ControlFlow 0 1372) 1368) anon1443_Else_correct))))))
(let ((anon388_correct  (=> (= Mask@152 (MapType1Store Mask@151 null (heapseg temp2@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@151 null (heapseg temp2@0 null))) FullPerm)))) (and (=> (= (ControlFlow 0 1374) 1372) anon1442_Then_correct) (=> (= (ControlFlow 0 1374) 1373) anon1442_Else_correct)))))
(let ((anon1441_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1377) 1374)) anon388_correct)))
(let ((anon1441_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1375) (- 0 1376)) (<= FullPerm (U_2_real (MapType1Select Mask@151 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@151 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 1375) 1374) anon388_correct))))))
(let ((anon386_correct  (=> (and (and (state Heap@98 Mask@151) (state Heap@98 Mask@151)) (and (|heapseg#trigger| Heap@98 (heapseg temp2@0 null)) (= (MapType0Select Heap@98 null (heapseg temp2@0 null)) (FrameFragment (ite (not (= temp2@0 null)) (CombineFrames (MapType0Select Heap@98 null (tree temp2@0)) (CombineFrames (FrameFragment (MapType0Select Heap@98 temp2@0 sibling)) (CombineFrames (MapType0Select Heap@98 null (heapseg (MapType0Select Heap@98 temp2@0 sibling) null)) (FrameFragment (ite (not (= (MapType0Select Heap@98 temp2@0 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 1378) 1375) anon1441_Then_correct) (=> (= (ControlFlow 0 1378) 1377) anon1441_Else_correct)))))
(let ((anon1440_Else_correct  (=> (= (MapType0Select Heap@98 temp1@1 sibling) null) (=> (and (= Mask@151 Mask@150) (= (ControlFlow 0 1381) 1378)) anon386_correct))))
(let ((anon1440_Then_correct  (=> (not (= (MapType0Select Heap@98 temp1@1 sibling) null)) (=> (and (and (state Heap@98 Mask@150) (= (treeParent Heap@98 temp1@1) (segParent Heap@98 (MapType0Select Heap@98 temp1@1 sibling) null))) (and (= Mask@151 Mask@150) (= (ControlFlow 0 1380) 1378))) anon386_correct))))
(let ((anon1439_Then_correct  (=> (and (not (= temp1@1 null)) (= Mask@148 (MapType1Store Mask@147 null (tree temp1@1) (real_2_U (+ (U_2_real (MapType1Select Mask@147 null (tree temp1@1))) FullPerm))))) (=> (and (and (and (InsidePredicate (heapseg temp1@1 null) (MapType0Select Heap@98 null (heapseg temp1@1 null)) (tree temp1@1) (MapType0Select Heap@98 null (tree temp1@1))) (state Heap@98 Mask@148)) (and (not (= temp1@1 null)) (= Mask@149 (MapType1Store Mask@148 temp1@1 sibling (real_2_U (+ (U_2_real (MapType1Select Mask@148 temp1@1 sibling)) FullPerm)))))) (and (and (state Heap@98 Mask@149) (= Mask@150 (MapType1Store Mask@149 null (heapseg (MapType0Select Heap@98 temp1@1 sibling) null) (real_2_U (+ (U_2_real (MapType1Select Mask@149 null (heapseg (MapType0Select Heap@98 temp1@1 sibling) null))) FullPerm))))) (and (InsidePredicate (heapseg temp1@1 null) (MapType0Select Heap@98 null (heapseg temp1@1 null)) (heapseg (MapType0Select Heap@98 temp1@1 sibling) null) (MapType0Select Heap@98 null (heapseg (MapType0Select Heap@98 temp1@1 sibling) null))) (state Heap@98 Mask@150)))) (and (=> (= (ControlFlow 0 1382) 1380) anon1440_Then_correct) (=> (= (ControlFlow 0 1382) 1381) anon1440_Else_correct))))))
(let ((anon1439_Else_correct  (=> (= temp1@1 null) (=> (and (= Mask@151 Mask@147) (= (ControlFlow 0 1379) 1378)) anon386_correct))))
(let ((anon1438_Else_correct  (=> (and (HasDirectPerm Mask@147 null (heapseg temp1@1 null)) (= Heap@98 ExhaleHeap@0)) (and (=> (= (ControlFlow 0 1384) 1382) anon1439_Then_correct) (=> (= (ControlFlow 0 1384) 1379) anon1439_Else_correct)))))
(let ((anon1438_Then_correct  (=> (not (HasDirectPerm Mask@147 null (heapseg temp1@1 null))) (=> (and (= Heap@97 (MapType0Store ExhaleHeap@0 null (heapseg temp1@1 null) newVersion@3)) (= Heap@98 Heap@97)) (and (=> (= (ControlFlow 0 1383) 1382) anon1439_Then_correct) (=> (= (ControlFlow 0 1383) 1379) anon1439_Else_correct))))))
(let ((anon381_correct  (=> (= Mask@147 (MapType1Store Mask@16 null (heapseg temp1@1 null) (real_2_U (- (U_2_real (MapType1Select Mask@16 null (heapseg temp1@1 null))) FullPerm)))) (and (=> (= (ControlFlow 0 1385) 1383) anon1438_Then_correct) (=> (= (ControlFlow 0 1385) 1384) anon1438_Else_correct)))))
(let ((anon1437_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1388) 1385)) anon381_correct)))
(let ((anon1437_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1386) (- 0 1387)) (<= FullPerm (U_2_real (MapType1Select Mask@16 null (heapseg temp1@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@16 null (heapseg temp1@1 null)))) (=> (= (ControlFlow 0 1386) 1385) anon381_correct))))))
(let ((anon379_correct  (=> (state ExhaleHeap@0 Mask@16) (=> (and (not (= temp1@1 null)) (not (= temp2@0 null))) (=> (and (and (state ExhaleHeap@0 Mask@16) (U_2_bool (MapType0Select ExhaleHeap@0 tmp $allocated))) (and (|heapseg#trigger| ExhaleHeap@0 (heapseg temp1@1 null)) (= (MapType0Select ExhaleHeap@0 null (heapseg temp1@1 null)) (FrameFragment (ite (not (= temp1@1 null)) (CombineFrames (MapType0Select ExhaleHeap@0 null (tree temp1@1)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@0 temp1@1 sibling)) (CombineFrames (MapType0Select ExhaleHeap@0 null (heapseg (MapType0Select ExhaleHeap@0 temp1@1 sibling) null)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@0 temp1@1 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 1389) 1386) anon1437_Then_correct) (=> (= (ControlFlow 0 1389) 1388) anon1437_Else_correct)))))))
(let ((anon1436_Else_correct  (=> (and (= temp2@0 null) (= (ControlFlow 0 1391) 1389)) anon379_correct)))
(let ((anon1436_Then_correct  (=> (and (and (not (= temp2@0 null)) (state ExhaleHeap@0 Mask@16)) (and (= (segParent ExhaleHeap@0 temp2@0 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (= (ControlFlow 0 1390) 1389))) anon379_correct)))
(let ((anon1435_Else_correct  (=> (= temp1@1 null) (and (=> (= (ControlFlow 0 1393) 1390) anon1436_Then_correct) (=> (= (ControlFlow 0 1393) 1391) anon1436_Else_correct)))))
(let ((anon1435_Then_correct  (=> (not (= temp1@1 null)) (=> (and (state ExhaleHeap@0 Mask@16) (= (segParent ExhaleHeap@0 temp1@1 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (and (=> (= (ControlFlow 0 1392) 1390) anon1436_Then_correct) (=> (= (ControlFlow 0 1392) 1391) anon1436_Else_correct))))))
(let ((anon1434_Else_correct  (=> (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (and (=> (= (ControlFlow 0 1395) 1392) anon1435_Then_correct) (=> (= (ControlFlow 0 1395) 1393) anon1435_Else_correct)))))
(let ((anon1434_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (=> (and (state ExhaleHeap@0 Mask@16) (= (segParent ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (and (=> (= (ControlFlow 0 1394) 1392) anon1435_Then_correct) (=> (= (ControlFlow 0 1394) 1393) anon1435_Else_correct))))))
(let ((anon1433_Else_correct  (=> (not (and (not (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (not (= temp2@0 null)))) (and (=> (= (ControlFlow 0 1397) 1394) anon1434_Then_correct) (=> (= (ControlFlow 0 1397) 1395) anon1434_Else_correct)))))
(let ((anon1433_Then_correct  (=> (and (and (not (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (not (= temp2@0 null))) (and (state ExhaleHeap@0 Mask@16) (= (segParent ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (segParent ExhaleHeap@0 temp2@0 null)))) (and (=> (= (ControlFlow 0 1396) 1394) anon1434_Then_correct) (=> (= (ControlFlow 0 1396) 1395) anon1434_Else_correct)))))
(let ((anon1432_Else_correct  (=> (not (and (not (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (not (= temp1@1 null)))) (and (=> (= (ControlFlow 0 1399) 1396) anon1433_Then_correct) (=> (= (ControlFlow 0 1399) 1397) anon1433_Else_correct)))))
(let ((anon1432_Then_correct  (=> (and (and (not (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (not (= temp1@1 null))) (and (state ExhaleHeap@0 Mask@16) (= (segParent ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (segParent ExhaleHeap@0 temp1@1 null)))) (and (=> (= (ControlFlow 0 1398) 1396) anon1433_Then_correct) (=> (= (ControlFlow 0 1398) 1397) anon1433_Else_correct)))))
(let ((anon1431_Else_correct  (=> (not (and (not (= temp1@1 null)) (not (= temp2@0 null)))) (and (=> (= (ControlFlow 0 1401) 1398) anon1432_Then_correct) (=> (= (ControlFlow 0 1401) 1399) anon1432_Else_correct)))))
(let ((anon1431_Then_correct  (=> (and (and (not (= temp1@1 null)) (not (= temp2@0 null))) (and (state ExhaleHeap@0 Mask@16) (= (segParent ExhaleHeap@0 temp1@1 null) (segParent ExhaleHeap@0 temp2@0 null)))) (and (=> (= (ControlFlow 0 1400) 1398) anon1432_Then_correct) (=> (= (ControlFlow 0 1400) 1399) anon1432_Else_correct)))))
(let ((anon367_correct  (=> (and (state ExhaleHeap@0 Mask@16) (= (+ (+ (segSize ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (segSize ExhaleHeap@0 temp1@1 null)) (segSize ExhaleHeap@0 temp2@0 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null)))) (and (=> (= (ControlFlow 0 1402) 1400) anon1431_Then_correct) (=> (= (ControlFlow 0 1402) 1401) anon1431_Else_correct)))))
(let ((anon1430_Else_correct  (=> (and (not (and (not (= temp1@1 (MapType0Select ExhaleHeap@0 this@@66 Nodes))) (and (< 0 (segLength ExhaleHeap@0 temp1@1 null)) (< 0 (segLength ExhaleHeap@0 temp2@0 null))))) (= (ControlFlow 0 1404) 1402)) anon367_correct)))
(let ((anon1430_Then_correct  (=> (and (and (and (not (= temp1@1 (MapType0Select ExhaleHeap@0 this@@66 Nodes))) (and (< 0 (segLength ExhaleHeap@0 temp1@1 null)) (< 0 (segLength ExhaleHeap@0 temp2@0 null)))) (state ExhaleHeap@0 Mask@16)) (and (<= (segDegree ExhaleHeap@0 temp1@1 null 0) (segDegree ExhaleHeap@0 temp2@0 null 0)) (= (ControlFlow 0 1403) 1402))) anon367_correct)))
(let ((anon1429_Else_correct  (=> (not (and (< 0 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (and (< 0 (segLength ExhaleHeap@0 temp1@1 null)) (< 0 (segLength ExhaleHeap@0 temp2@0 null))))) (and (=> (= (ControlFlow 0 1406) 1403) anon1430_Then_correct) (=> (= (ControlFlow 0 1406) 1404) anon1430_Else_correct)))))
(let ((anon1429_Then_correct  (=> (and (and (< 0 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (and (< 0 (segLength ExhaleHeap@0 temp1@1 null)) (< 0 (segLength ExhaleHeap@0 temp2@0 null)))) (and (state ExhaleHeap@0 Mask@16) (or (< (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 temp1@1 null 0)) (< (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 temp2@0 null 0))))) (and (=> (= (ControlFlow 0 1405) 1403) anon1430_Then_correct) (=> (= (ControlFlow 0 1405) 1404) anon1430_Else_correct)))))
(let ((anon1428_Else_correct  (=> (not (and (<= 2 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (= (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 2))))) (and (=> (= (ControlFlow 0 1409) 1405) anon1429_Then_correct) (=> (= (ControlFlow 0 1409) 1406) anon1429_Else_correct)))))
(let ((anon1428_Then_correct  (=> (and (and (<= 2 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (= (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 2)))) (and (state ExhaleHeap@0 Mask@16) (< (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 temp2@0 null 0)))) (and (=> (= (ControlFlow 0 1408) 1405) anon1429_Then_correct) (=> (= (ControlFlow 0 1408) 1406) anon1429_Else_correct)))))
(let ((anon1427_Then_correct  (=> (and (and (< 0 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (< 0 (segLength ExhaleHeap@0 temp2@0 null))) (and (state ExhaleHeap@0 Mask@16) (<= (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 temp2@0 null 0)))) (and (=> (= (ControlFlow 0 1410) 1408) anon1428_Then_correct) (=> (= (ControlFlow 0 1410) 1409) anon1428_Else_correct)))))
(let ((anon1427_Else_correct  (=> (not (and (< 0 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (< 0 (segLength ExhaleHeap@0 temp2@0 null)))) (and (=> (= (ControlFlow 0 1407) 1405) anon1429_Then_correct) (=> (= (ControlFlow 0 1407) 1406) anon1429_Else_correct)))))
(let ((anon1426_Else_correct  (=> (not (and (<= 2 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (= (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 2))))) (and (=> (= (ControlFlow 0 1413) 1410) anon1427_Then_correct) (=> (= (ControlFlow 0 1413) 1407) anon1427_Else_correct)))))
(let ((anon1426_Then_correct  (=> (and (and (<= 2 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (= (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 2)))) (and (state ExhaleHeap@0 Mask@16) (< (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 temp1@1 null 0)))) (and (=> (= (ControlFlow 0 1412) 1410) anon1427_Then_correct) (=> (= (ControlFlow 0 1412) 1407) anon1427_Else_correct)))))
(let ((anon1425_Then_correct  (=> (and (and (< 0 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (< 0 (segLength ExhaleHeap@0 temp1@1 null))) (and (state ExhaleHeap@0 Mask@16) (<= (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 temp1@1 null 0)))) (and (=> (= (ControlFlow 0 1414) 1412) anon1426_Then_correct) (=> (= (ControlFlow 0 1414) 1413) anon1426_Else_correct)))))
(let ((anon1425_Else_correct  (=> (not (and (< 0 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (< 0 (segLength ExhaleHeap@0 temp1@1 null)))) (and (=> (= (ControlFlow 0 1411) 1410) anon1427_Then_correct) (=> (= (ControlFlow 0 1411) 1407) anon1427_Else_correct)))))
(let ((anon1424_Then_correct  (=> (state ExhaleHeap@0 ZeroMask) (=> (and (and (and (and (= Mask@13 (MapType1Store ZeroMask null (heapseg temp1@1 null) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (heapseg temp1@1 null))) FullPerm)))) (state ExhaleHeap@0 Mask@13)) (and (state ExhaleHeap@0 Mask@13) (sorted ExhaleHeap@0 temp1@1 null))) (and (and (= Mask@14 (MapType1Store Mask@13 null (heapseg temp2@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@13 null (heapseg temp2@0 null))) FullPerm)))) (state ExhaleHeap@0 Mask@14)) (and (state ExhaleHeap@0 Mask@14) (sorted ExhaleHeap@0 temp2@0 null)))) (and (and (and (not (= this@@66 null)) (= Mask@15 (MapType1Store Mask@14 this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select Mask@14 this@@66 Nodes)) FullPerm))))) (and (state ExhaleHeap@0 Mask@15) (not (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) null)))) (and (and (= Mask@16 (MapType1Store Mask@15 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (real_2_U (+ (U_2_real (MapType1Select Mask@15 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))) FullPerm)))) (state ExhaleHeap@0 Mask@16)) (and (state ExhaleHeap@0 Mask@16) (presorted ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (and (=> (= (ControlFlow 0 1415) 1414) anon1425_Then_correct) (=> (= (ControlFlow 0 1415) 1411) anon1425_Else_correct))))))
(let ((anon836_correct  (=> (= Mask@134 (MapType1Store Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))) FullPerm)))) (and (=> (= (ControlFlow 0 684) (- 0 685)) (<= 0 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 2))) (=> (<= 0 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 2)) (=> (= (ControlFlow 0 684) (- 0 683)) (< (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 2) (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))))))))
(let ((anon1677_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 688) 684)) anon836_correct)))
(let ((anon1677_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 686) (- 0 687)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)))) (=> (= (ControlFlow 0 686) 684) anon836_correct))))))
(let ((anon832_correct true))
(let ((anon1675_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 682) 679)) anon832_correct)))
(let ((anon1675_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 680) (- 0 681)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)))) (=> (= (ControlFlow 0 680) 679) anon832_correct))))))
(let ((anon828_correct  (=> (= Mask@136 (MapType1Store Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))) FullPerm)))) (and (=> (= (ControlFlow 0 674) (- 0 675)) (<= 0 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1))) (=> (<= 0 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1)) (=> (= (ControlFlow 0 674) (- 0 673)) (< (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1) (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))))))))
(let ((anon1673_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 678) 674)) anon828_correct)))
(let ((anon1673_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 676) (- 0 677)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)))) (=> (= (ControlFlow 0 676) 674) anon828_correct))))))
(let ((anon824_correct true))
(let ((anon1671_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 672) 669)) anon824_correct)))
(let ((anon1671_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 670) (- 0 671)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)))) (=> (= (ControlFlow 0 670) 669) anon824_correct))))))
(let ((anon849_correct  (=> (and (= Mask@131 (MapType1Store Mask@97 null (heapseg temp1@3 null) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))) FullPerm)))) (= (ControlFlow 0 661) (- 0 660))) (< 0 (segLength ExhaleHeap@1 temp1@3 null)))))
(let ((anon1684_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 664) 661)) anon849_correct)))
(let ((anon1684_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 662) (- 0 663)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null)))) (=> (= (ControlFlow 0 662) 661) anon849_correct))))))
(let ((anon845_correct  (=> (= Mask@132 (MapType1Store Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))) FullPerm)))) (and (=> (= (ControlFlow 0 655) (- 0 656)) (<= 0 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1))) (=> (<= 0 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1)) (=> (= (ControlFlow 0 655) (- 0 654)) (< (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1) (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))))))))
(let ((anon1682_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 659) 655)) anon845_correct)))
(let ((anon1682_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 657) (- 0 658)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)))) (=> (= (ControlFlow 0 657) 655) anon845_correct))))))
(let ((anon841_correct true))
(let ((anon1680_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 653) 650)) anon841_correct)))
(let ((anon1680_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 651) (- 0 652)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)))) (=> (= (ControlFlow 0 651) 650) anon841_correct))))))
(let ((anon863_correct  (=> (and (= Mask@128 (MapType1Store Mask@97 null (heapseg temp1@3 null) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))) FullPerm)))) (= (ControlFlow 0 643) (- 0 642))) (< 1 (segLength ExhaleHeap@1 temp1@3 null)))))
(let ((anon1691_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 646) 643)) anon863_correct)))
(let ((anon1691_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 644) (- 0 645)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null)))) (=> (= (ControlFlow 0 644) 643) anon863_correct))))))
(let ((anon859_correct  (=> (and (= Mask@129 (MapType1Store Mask@97 null (heapseg temp1@3 null) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))) FullPerm)))) (= (ControlFlow 0 638) (- 0 637))) (< 0 (segLength ExhaleHeap@1 temp1@3 null)))))
(let ((anon1689_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 641) 638)) anon859_correct)))
(let ((anon1689_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 639) (- 0 640)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null)))) (=> (= (ControlFlow 0 639) 638) anon859_correct))))))
(let ((anon876_correct  (=> (and (= Mask@125 (MapType1Store Mask@97 null (heapseg temp1@3 null) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))) FullPerm)))) (= (ControlFlow 0 629) (- 0 628))) (< 0 (segLength ExhaleHeap@1 temp1@3 null)))))
(let ((anon1698_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 632) 629)) anon876_correct)))
(let ((anon1698_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 630) (- 0 631)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null)))) (=> (= (ControlFlow 0 630) 629) anon876_correct))))))
(let ((anon872_correct  (=> (= Mask@126 (MapType1Store Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))) FullPerm)))) (and (=> (= (ControlFlow 0 623) (- 0 624)) (<= 0 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1))) (=> (<= 0 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1)) (=> (= (ControlFlow 0 623) (- 0 622)) (< (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1) (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))))))))
(let ((anon1696_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 627) 623)) anon872_correct)))
(let ((anon1696_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 625) (- 0 626)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)))) (=> (= (ControlFlow 0 625) 623) anon872_correct))))))
(let ((anon868_correct true))
(let ((anon1694_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 621) 618)) anon868_correct)))
(let ((anon1694_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 619) (- 0 620)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)))) (=> (= (ControlFlow 0 619) 618) anon868_correct))))))
(let ((anon854_correct true))
(let ((anon1686_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 615) 612)) anon854_correct)))
(let ((anon1686_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 613) (- 0 614)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null)))) (=> (= (ControlFlow 0 613) 612) anon854_correct))))))
(let ((anon819_correct true))
(let ((anon1668_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 611) 608)) anon819_correct)))
(let ((anon1668_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 609) (- 0 610)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)))) (=> (= (ControlFlow 0 609) 608) anon819_correct))))))
(let ((anon815_correct  (=> (and (= Mask@139 (MapType1Store Mask@97 null (heapseg temp1@3 null) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))) FullPerm)))) (= (ControlFlow 0 604) (- 0 603))) (< 0 (segLength ExhaleHeap@1 temp1@3 null)))))
(let ((anon1666_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 607) 604)) anon815_correct)))
(let ((anon1666_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 605) (- 0 606)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null)))) (=> (= (ControlFlow 0 605) 604) anon815_correct))))))
(let ((anon811_correct  (=> (= Mask@140 (MapType1Store Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))) FullPerm)))) (and (=> (= (ControlFlow 0 598) (- 0 599)) (<= 0 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1))) (=> (<= 0 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1)) (=> (= (ControlFlow 0 598) (- 0 597)) (< (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1) (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))))))))
(let ((anon1664_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 602) 598)) anon811_correct)))
(let ((anon1664_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 600) (- 0 601)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)))) (=> (= (ControlFlow 0 600) 598) anon811_correct))))))
(let ((anon807_correct true))
(let ((anon1662_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 596) 593)) anon807_correct)))
(let ((anon1662_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 594) (- 0 595)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)))) (=> (= (ControlFlow 0 594) 593) anon807_correct))))))
(let ((anon916_correct  (=> (= Mask@116 (MapType1Store Mask@97 null (heapseg temp1@3 null) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))) FullPerm)))) (and (=> (= (ControlFlow 0 581) (- 0 582)) (<= 0 (- (segLength ExhaleHeap@1 temp1@3 null) 2))) (=> (<= 0 (- (segLength ExhaleHeap@1 temp1@3 null) 2)) (=> (= (ControlFlow 0 581) (- 0 580)) (< (- (segLength ExhaleHeap@1 temp1@3 null) 2) (segLength ExhaleHeap@1 temp1@3 null))))))))
(let ((anon1719_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 585) 581)) anon916_correct)))
(let ((anon1719_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 583) (- 0 584)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null)))) (=> (= (ControlFlow 0 583) 581) anon916_correct))))))
(let ((anon912_correct true))
(let ((anon1717_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 579) 576)) anon912_correct)))
(let ((anon1717_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 577) (- 0 578)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null)))) (=> (= (ControlFlow 0 577) 576) anon912_correct))))))
(let ((anon932_correct  (=> (= Mask@114 (MapType1Store Mask@97 null (heapseg temp1@3 null) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))) FullPerm)))) (and (=> (= (ControlFlow 0 568) (- 0 569)) (<= 0 (- (segLength ExhaleHeap@1 temp1@3 null) 1))) (=> (<= 0 (- (segLength ExhaleHeap@1 temp1@3 null) 1)) (=> (= (ControlFlow 0 568) (- 0 567)) (< (- (segLength ExhaleHeap@1 temp1@3 null) 1) (segLength ExhaleHeap@1 temp1@3 null))))))))
(let ((anon1727_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 572) 568)) anon932_correct)))
(let ((anon1727_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 570) (- 0 571)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null)))) (=> (= (ControlFlow 0 570) 568) anon932_correct))))))
(let ((anon928_correct true))
(let ((anon1725_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 566) 563)) anon928_correct)))
(let ((anon1725_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 564) (- 0 565)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null)))) (=> (= (ControlFlow 0 564) 563) anon928_correct))))))
(let ((anon924_correct  (=> (= Mask@98 (MapType1Store Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))) FullPerm)))) (and (=> (= (ControlFlow 0 558) (- 0 559)) (<= 0 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1))) (=> (<= 0 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1)) (=> (= (ControlFlow 0 558) (- 0 557)) (< (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1) (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))))))))
(let ((anon1723_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 562) 558)) anon924_correct)))
(let ((anon1723_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 560) (- 0 561)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)))) (=> (= (ControlFlow 0 560) 558) anon924_correct))))))
(let ((anon920_correct true))
(let ((anon1721_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 556) 553)) anon920_correct)))
(let ((anon1721_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 554) (- 0 555)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)))) (=> (= (ControlFlow 0 554) 553) anon920_correct))))))
(let ((anon907_correct true))
(let ((anon1714_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 552) 549)) anon907_correct)))
(let ((anon1714_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 550) (- 0 551)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null)))) (=> (= (ControlFlow 0 550) 549) anon907_correct))))))
(let ((anon945_correct  (=> (and (= Mask@111 (MapType1Store Mask@97 null (heapseg temp2@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (heapseg temp2@0 null))) FullPerm)))) (= (ControlFlow 0 543) (- 0 542))) (< 0 (segLength ExhaleHeap@1 temp2@0 null)))))
(let ((anon1734_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 546) 543)) anon945_correct)))
(let ((anon1734_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 544) (- 0 545)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 544) 543) anon945_correct))))))
(let ((anon941_correct  (=> (= Mask@112 (MapType1Store Mask@97 null (heapseg temp1@3 null) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))) FullPerm)))) (and (=> (= (ControlFlow 0 537) (- 0 538)) (<= 0 (- (segLength ExhaleHeap@1 temp1@3 null) 1))) (=> (<= 0 (- (segLength ExhaleHeap@1 temp1@3 null) 1)) (=> (= (ControlFlow 0 537) (- 0 536)) (< (- (segLength ExhaleHeap@1 temp1@3 null) 1) (segLength ExhaleHeap@1 temp1@3 null))))))))
(let ((anon1732_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 541) 537)) anon941_correct)))
(let ((anon1732_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 539) (- 0 540)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null)))) (=> (= (ControlFlow 0 539) 537) anon941_correct))))))
(let ((anon937_correct true))
(let ((anon1730_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 535) 532)) anon937_correct)))
(let ((anon1730_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 533) (- 0 534)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null)))) (=> (= (ControlFlow 0 533) 532) anon937_correct))))))
(let ((anon902_correct true))
(let ((anon1711_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 529) 526)) anon902_correct)))
(let ((anon1711_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 527) (- 0 528)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null)))) (=> (= (ControlFlow 0 527) 526) anon902_correct))))))
(let ((anon898_correct true))
(let ((anon1709_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 525) 522)) anon898_correct)))
(let ((anon1709_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 523) (- 0 524)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)))) (=> (= (ControlFlow 0 523) 522) anon898_correct))))))
(let ((anon894_correct  (=> (and (= Mask@121 (MapType1Store Mask@97 null (heapseg temp2@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (heapseg temp2@0 null))) FullPerm)))) (= (ControlFlow 0 518) (- 0 517))) (< 0 (segLength ExhaleHeap@1 temp2@0 null)))))
(let ((anon1707_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 521) 518)) anon894_correct)))
(let ((anon1707_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 519) (- 0 520)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 519) 518) anon894_correct))))))
(let ((anon890_correct  (=> (= Mask@122 (MapType1Store Mask@97 null (heapseg temp1@3 null) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))) FullPerm)))) (and (=> (= (ControlFlow 0 512) (- 0 513)) (<= 0 (- (segLength ExhaleHeap@1 temp1@3 null) 1))) (=> (<= 0 (- (segLength ExhaleHeap@1 temp1@3 null) 1)) (=> (= (ControlFlow 0 512) (- 0 511)) (< (- (segLength ExhaleHeap@1 temp1@3 null) 1) (segLength ExhaleHeap@1 temp1@3 null))))))))
(let ((anon1705_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 516) 512)) anon890_correct)))
(let ((anon1705_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 514) (- 0 515)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null)))) (=> (= (ControlFlow 0 514) 512) anon890_correct))))))
(let ((anon886_correct true))
(let ((anon1703_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 510) 507)) anon886_correct)))
(let ((anon1703_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 508) (- 0 509)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null)))) (=> (= (ControlFlow 0 508) 507) anon886_correct))))))
(let ((anon975_correct  (=> (and (= Mask@106 (MapType1Store Mask@97 null (heapseg temp2@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (heapseg temp2@0 null))) FullPerm)))) (= (ControlFlow 0 496) (- 0 495))) (not (= temp2@0 null)))))
(let ((anon1749_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 499) 496)) anon975_correct)))
(let ((anon1749_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 497) (- 0 498)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 497) 496) anon975_correct))))))
(let ((anon971_correct  (=> (and (= Mask@107 (MapType1Store Mask@97 null (heapseg temp1@3 null) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))) FullPerm)))) (= (ControlFlow 0 491) (- 0 490))) (not (= temp1@3 null)))))
(let ((anon1747_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 494) 491)) anon971_correct)))
(let ((anon1747_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 492) (- 0 493)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null)))) (=> (= (ControlFlow 0 492) 491) anon971_correct))))))
(let ((anon985_correct  (=> (and (= Mask@104 (MapType1Store Mask@97 null (heapseg temp1@3 null) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))) FullPerm)))) (= (ControlFlow 0 480) (- 0 479))) (not (= temp1@3 null)))))
(let ((anon1754_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 483) 480)) anon985_correct)))
(let ((anon1754_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 481) (- 0 482)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null)))) (=> (= (ControlFlow 0 481) 480) anon985_correct))))))
(let ((anon981_correct  (=> (and (= Mask@105 (MapType1Store Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))) FullPerm)))) (= (ControlFlow 0 475) (- 0 474))) (not (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)))))
(let ((anon1752_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 478) 475)) anon981_correct)))
(let ((anon1752_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 476) (- 0 477)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)))) (=> (= (ControlFlow 0 476) 475) anon981_correct))))))
(let ((anon995_correct  (=> (and (= Mask@102 (MapType1Store Mask@97 null (heapseg temp2@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (heapseg temp2@0 null))) FullPerm)))) (= (ControlFlow 0 464) (- 0 463))) (not (= temp2@0 null)))))
(let ((anon1759_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 467) 464)) anon995_correct)))
(let ((anon1759_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 465) (- 0 466)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 465) 464) anon995_correct))))))
(let ((anon991_correct  (=> (and (= Mask@103 (MapType1Store Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))) FullPerm)))) (= (ControlFlow 0 459) (- 0 458))) (not (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)))))
(let ((anon1757_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 462) 459)) anon991_correct)))
(let ((anon1757_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 460) (- 0 461)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)))) (=> (= (ControlFlow 0 460) 459) anon991_correct))))))
(let ((anon1013_correct  (=> (= (ControlFlow 0 445) (- 0 444)) (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)))))
(let ((anon1768_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 448) 445)) anon1013_correct)))
(let ((anon1768_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 446) (- 0 447)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 446) 445) anon1013_correct))))))
(let ((anon1009_correct  (=> (and (= Mask@100 (MapType1Store Mask@97 null (heapseg temp2@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (heapseg temp2@0 null))) FullPerm)))) (= (ControlFlow 0 439) (- 0 438))) (not (= temp2@0 null)))))
(let ((anon1766_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 442) 439)) anon1009_correct)))
(let ((anon1766_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 440) (- 0 441)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 440) 439) anon1009_correct))))))
(let ((anon1015_correct true))
(let ((anon1767_Else_correct  (=> (and (= (segParent ExhaleHeap@1 temp2@0 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (= (ControlFlow 0 443) 436)) anon1015_correct)))
(let ((anon1765_Else_correct  (and (=> (= (ControlFlow 0 449) (- 0 450)) (HasDirectPerm Mask@2 this@@66 Nodes)) (=> (HasDirectPerm Mask@2 this@@66 Nodes) (and (and (=> (= (ControlFlow 0 449) 443) anon1767_Else_correct) (=> (= (ControlFlow 0 449) 446) anon1768_Then_correct)) (=> (= (ControlFlow 0 449) 448) anon1768_Else_correct))))))
(let ((anon1764_Then_correct  (=> (and (not (= temp2@0 null)) (state ExhaleHeap@1 Mask@97)) (and (and (=> (= (ControlFlow 0 451) 449) anon1765_Else_correct) (=> (= (ControlFlow 0 451) 440) anon1766_Then_correct)) (=> (= (ControlFlow 0 451) 442) anon1766_Else_correct)))))
(let ((anon1764_Else_correct  (=> (and (= temp2@0 null) (= (ControlFlow 0 437) 436)) anon1015_correct)))
(let ((anon1762_Else_correct  (=> (and (= (segParent ExhaleHeap@1 temp1@3 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (state ExhaleHeap@1 Mask@97)) (and (=> (= (ControlFlow 0 452) 451) anon1764_Then_correct) (=> (= (ControlFlow 0 452) 437) anon1764_Else_correct)))))
(let ((anon1004_correct  (=> (= (ControlFlow 0 432) (- 0 431)) (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)))))
(let ((anon1763_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 435) 432)) anon1004_correct)))
(let ((anon1763_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 433) (- 0 434)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 433) 432) anon1004_correct))))))
(let ((anon1760_Else_correct  (and (=> (= (ControlFlow 0 453) (- 0 454)) (HasDirectPerm Mask@2 this@@66 Nodes)) (=> (HasDirectPerm Mask@2 this@@66 Nodes) (and (and (=> (= (ControlFlow 0 453) 452) anon1762_Else_correct) (=> (= (ControlFlow 0 453) 433) anon1763_Then_correct)) (=> (= (ControlFlow 0 453) 435) anon1763_Else_correct))))))
(let ((anon1000_correct  (=> (and (= Mask@101 (MapType1Store Mask@97 null (heapseg temp1@3 null) (real_2_U (- (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))) FullPerm)))) (= (ControlFlow 0 427) (- 0 426))) (not (= temp1@3 null)))))
(let ((anon1761_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 430) 427)) anon1000_correct)))
(let ((anon1761_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 428) (- 0 429)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null)))) (=> (= (ControlFlow 0 428) 427) anon1000_correct))))))
(let ((anon997_correct  (=> (and (state ExhaleHeap@1 Mask@97) (state ExhaleHeap@1 Mask@97)) (and (and (=> (= (ControlFlow 0 455) 453) anon1760_Else_correct) (=> (= (ControlFlow 0 455) 428) anon1761_Then_correct)) (=> (= (ControlFlow 0 455) 430) anon1761_Else_correct)))))
(let ((anon1758_Else_correct  (=> (and (= (segParent ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (segParent ExhaleHeap@1 temp2@0 null)) (= (ControlFlow 0 457) 455)) anon997_correct)))
(let ((anon1755_Then_correct  (=> (and (and (not (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)) (not (= temp2@0 null))) (state ExhaleHeap@1 Mask@97)) (and (=> (= (ControlFlow 0 468) (- 0 469)) (HasDirectPerm Mask@97 this@@66 Nodes)) (=> (HasDirectPerm Mask@97 this@@66 Nodes) (and (and (and (and (=> (= (ControlFlow 0 468) 457) anon1758_Else_correct) (=> (= (ControlFlow 0 468) 465) anon1759_Then_correct)) (=> (= (ControlFlow 0 468) 467) anon1759_Else_correct)) (=> (= (ControlFlow 0 468) 460) anon1757_Then_correct)) (=> (= (ControlFlow 0 468) 462) anon1757_Else_correct)))))))
(let ((anon1755_Else_correct  (=> (and (not (and (not (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)) (not (= temp2@0 null)))) (= (ControlFlow 0 456) 455)) anon997_correct)))
(let ((anon987_correct  (=> (state ExhaleHeap@1 Mask@97) (and (=> (= (ControlFlow 0 470) (- 0 471)) (HasDirectPerm Mask@97 this@@66 Nodes)) (=> (HasDirectPerm Mask@97 this@@66 Nodes) (and (=> (= (ControlFlow 0 470) 468) anon1755_Then_correct) (=> (= (ControlFlow 0 470) 456) anon1755_Else_correct)))))))
(let ((anon1753_Else_correct  (=> (and (= (segParent ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (segParent ExhaleHeap@1 temp1@3 null)) (= (ControlFlow 0 473) 470)) anon987_correct)))
(let ((anon1750_Then_correct  (=> (and (not (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)) (state ExhaleHeap@1 Mask@97)) (and (=> (= (ControlFlow 0 484) (- 0 485)) (HasDirectPerm Mask@97 this@@66 Nodes)) (=> (HasDirectPerm Mask@97 this@@66 Nodes) (and (and (and (and (=> (= (ControlFlow 0 484) 473) anon1753_Else_correct) (=> (= (ControlFlow 0 484) 481) anon1754_Then_correct)) (=> (= (ControlFlow 0 484) 483) anon1754_Else_correct)) (=> (= (ControlFlow 0 484) 476) anon1752_Then_correct)) (=> (= (ControlFlow 0 484) 478) anon1752_Else_correct)))))))
(let ((anon1750_Else_correct  (=> (and (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (= (ControlFlow 0 472) 470)) anon987_correct)))
(let ((anon977_correct  (=> (state ExhaleHeap@1 Mask@97) (and (=> (= (ControlFlow 0 486) (- 0 487)) (HasDirectPerm Mask@97 this@@66 Nodes)) (=> (HasDirectPerm Mask@97 this@@66 Nodes) (and (=> (= (ControlFlow 0 486) 484) anon1750_Then_correct) (=> (= (ControlFlow 0 486) 472) anon1750_Else_correct)))))))
(let ((anon1748_Else_correct  (=> (and (= (segParent ExhaleHeap@1 temp1@3 null) (segParent ExhaleHeap@1 temp2@0 null)) (= (ControlFlow 0 489) 486)) anon977_correct)))
(let ((anon1745_Then_correct  (=> (and (not (= temp2@0 null)) (state ExhaleHeap@1 Mask@97)) (and (and (and (and (=> (= (ControlFlow 0 500) 489) anon1748_Else_correct) (=> (= (ControlFlow 0 500) 497) anon1749_Then_correct)) (=> (= (ControlFlow 0 500) 499) anon1749_Else_correct)) (=> (= (ControlFlow 0 500) 492) anon1747_Then_correct)) (=> (= (ControlFlow 0 500) 494) anon1747_Else_correct)))))
(let ((anon1745_Else_correct  (=> (and (= temp2@0 null) (= (ControlFlow 0 488) 486)) anon977_correct)))
(let ((anon1743_Else_correct  (=> (and (= (+ (+ (segSize ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (segSize ExhaleHeap@1 temp1@3 null)) (segSize ExhaleHeap@1 temp2@0 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null))) (state ExhaleHeap@1 Mask@97)) (and (=> (= (ControlFlow 0 501) 500) anon1745_Then_correct) (=> (= (ControlFlow 0 501) 488) anon1745_Else_correct)))))
(let ((anon966_correct true))
(let ((anon1744_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 425) 422)) anon966_correct)))
(let ((anon1744_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 423) (- 0 424)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg binHeap null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg binHeap null)))) (=> (= (ControlFlow 0 423) 422) anon966_correct))))))
(let ((anon962_correct true))
(let ((anon1742_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 421) 418)) anon962_correct)))
(let ((anon1742_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 419) (- 0 420)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 419) 418) anon962_correct))))))
(let ((anon1739_Else_correct  (and (=> (= (ControlFlow 0 502) (- 0 503)) (HasDirectPerm Mask@2 this@@66 Nodes)) (=> (HasDirectPerm Mask@2 this@@66 Nodes) (and (and (and (and (=> (= (ControlFlow 0 502) 501) anon1743_Else_correct) (=> (= (ControlFlow 0 502) 423) anon1744_Then_correct)) (=> (= (ControlFlow 0 502) 425) anon1744_Else_correct)) (=> (= (ControlFlow 0 502) 419) anon1742_Then_correct)) (=> (= (ControlFlow 0 502) 421) anon1742_Else_correct))))))
(let ((anon958_correct true))
(let ((anon1740_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 417) 414)) anon958_correct)))
(let ((anon1740_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 415) (- 0 416)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 415) 414) anon958_correct))))))
(let ((anon954_correct true))
(let ((anon1738_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 413) 410)) anon954_correct)))
(let ((anon1738_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 411) (- 0 412)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null)))) (=> (= (ControlFlow 0 411) 410) anon954_correct))))))
(let ((anon950_correct true))
(let ((anon1736_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 409) 406)) anon950_correct)))
(let ((anon1736_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 407) (- 0 408)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)))) (=> (= (ControlFlow 0 407) 406) anon950_correct))))))
(let ((anon947_correct  (=> (and (state ExhaleHeap@1 Mask@97) (state ExhaleHeap@1 Mask@97)) (and (=> (= (ControlFlow 0 504) (- 0 505)) (HasDirectPerm Mask@97 this@@66 Nodes)) (=> (HasDirectPerm Mask@97 this@@66 Nodes) (and (and (and (and (and (and (=> (= (ControlFlow 0 504) 502) anon1739_Else_correct) (=> (= (ControlFlow 0 504) 415) anon1740_Then_correct)) (=> (= (ControlFlow 0 504) 417) anon1740_Else_correct)) (=> (= (ControlFlow 0 504) 411) anon1738_Then_correct)) (=> (= (ControlFlow 0 504) 413) anon1738_Else_correct)) (=> (= (ControlFlow 0 504) 407) anon1736_Then_correct)) (=> (= (ControlFlow 0 504) 409) anon1736_Else_correct)))))))
(let ((anon1733_Else_correct  (=> (and (< (segDegree ExhaleHeap@1 temp1@3 null (- (segLength ExhaleHeap@1 temp1@3 null) 1)) (segDegree ExhaleHeap@1 temp2@0 null 0)) (= (ControlFlow 0 531) 504)) anon947_correct)))
(let ((anon1728_Then_correct  (=> (and (and (<= 2 (+ (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (segLength ExhaleHeap@1 temp1@3 null))) (= (ite (<= 2 (segLength ExhaleHeap@1 temp1@3 null)) (segDegree ExhaleHeap@1 temp1@3 null (- (segLength ExhaleHeap@1 temp1@3 null) 2)) (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1))) (segDegree ExhaleHeap@1 temp1@3 null (- (segLength ExhaleHeap@1 temp1@3 null) 1)))) (state ExhaleHeap@1 Mask@97)) (and (and (and (and (and (and (=> (= (ControlFlow 0 547) 531) anon1733_Else_correct) (=> (= (ControlFlow 0 547) 544) anon1734_Then_correct)) (=> (= (ControlFlow 0 547) 546) anon1734_Else_correct)) (=> (= (ControlFlow 0 547) 539) anon1732_Then_correct)) (=> (= (ControlFlow 0 547) 541) anon1732_Else_correct)) (=> (= (ControlFlow 0 547) 533) anon1730_Then_correct)) (=> (= (ControlFlow 0 547) 535) anon1730_Else_correct)))))
(let ((anon1728_Else_correct  (=> (and (not (and (<= 2 (+ (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (segLength ExhaleHeap@1 temp1@3 null))) (= (ite (<= 2 (segLength ExhaleHeap@1 temp1@3 null)) (segDegree ExhaleHeap@1 temp1@3 null (- (segLength ExhaleHeap@1 temp1@3 null) 2)) (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1))) (segDegree ExhaleHeap@1 temp1@3 null (- (segLength ExhaleHeap@1 temp1@3 null) 1))))) (= (ControlFlow 0 530) 504)) anon947_correct)))
(let ((anon1715_Then_correct  (=> (<= 2 (segLength ExhaleHeap@1 temp1@3 null)) (and (and (and (and (and (and (and (and (and (=> (= (ControlFlow 0 586) 547) anon1728_Then_correct) (=> (= (ControlFlow 0 586) 530) anon1728_Else_correct)) (=> (= (ControlFlow 0 586) 570) anon1727_Then_correct)) (=> (= (ControlFlow 0 586) 572) anon1727_Else_correct)) (=> (= (ControlFlow 0 586) 564) anon1725_Then_correct)) (=> (= (ControlFlow 0 586) 566) anon1725_Else_correct)) (=> (= (ControlFlow 0 586) 583) anon1719_Then_correct)) (=> (= (ControlFlow 0 586) 585) anon1719_Else_correct)) (=> (= (ControlFlow 0 586) 577) anon1717_Then_correct)) (=> (= (ControlFlow 0 586) 579) anon1717_Else_correct)))))
(let ((anon1715_Else_correct  (=> (< (segLength ExhaleHeap@1 temp1@3 null) 2) (and (=> (= (ControlFlow 0 573) (- 0 575)) (HasDirectPerm Mask@97 this@@66 Nodes)) (=> (HasDirectPerm Mask@97 this@@66 Nodes) (and (=> (= (ControlFlow 0 573) (- 0 574)) (HasDirectPerm Mask@97 this@@66 Nodes)) (=> (HasDirectPerm Mask@97 this@@66 Nodes) (and (and (and (and (and (and (and (and (and (=> (= (ControlFlow 0 573) 547) anon1728_Then_correct) (=> (= (ControlFlow 0 573) 530) anon1728_Else_correct)) (=> (= (ControlFlow 0 573) 570) anon1727_Then_correct)) (=> (= (ControlFlow 0 573) 572) anon1727_Else_correct)) (=> (= (ControlFlow 0 573) 564) anon1725_Then_correct)) (=> (= (ControlFlow 0 573) 566) anon1725_Else_correct)) (=> (= (ControlFlow 0 573) 560) anon1723_Then_correct)) (=> (= (ControlFlow 0 573) 562) anon1723_Else_correct)) (=> (= (ControlFlow 0 573) 554) anon1721_Then_correct)) (=> (= (ControlFlow 0 573) 556) anon1721_Else_correct)))))))))
(let ((anon1712_Then_correct  (=> (<= 2 (+ (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (segLength ExhaleHeap@1 temp1@3 null))) (and (and (and (=> (= (ControlFlow 0 587) 586) anon1715_Then_correct) (=> (= (ControlFlow 0 587) 573) anon1715_Else_correct)) (=> (= (ControlFlow 0 587) 550) anon1714_Then_correct)) (=> (= (ControlFlow 0 587) 552) anon1714_Else_correct)))))
(let ((anon1712_Else_correct  (=> (< (+ (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (segLength ExhaleHeap@1 temp1@3 null)) 2) (and (=> (= (ControlFlow 0 548) 547) anon1728_Then_correct) (=> (= (ControlFlow 0 548) 530) anon1728_Else_correct)))))
(let ((anon1706_Else_correct  (=> (<= (segDegree ExhaleHeap@1 temp1@3 null (- (segLength ExhaleHeap@1 temp1@3 null) 1)) (segDegree ExhaleHeap@1 temp2@0 null 0)) (and (=> (= (ControlFlow 0 588) (- 0 589)) (HasDirectPerm Mask@97 this@@66 Nodes)) (=> (HasDirectPerm Mask@97 this@@66 Nodes) (and (and (and (and (and (=> (= (ControlFlow 0 588) 587) anon1712_Then_correct) (=> (= (ControlFlow 0 588) 548) anon1712_Else_correct)) (=> (= (ControlFlow 0 588) 527) anon1711_Then_correct)) (=> (= (ControlFlow 0 588) 529) anon1711_Else_correct)) (=> (= (ControlFlow 0 588) 523) anon1709_Then_correct)) (=> (= (ControlFlow 0 588) 525) anon1709_Else_correct)))))))
(let ((anon1701_Then_correct  (=> (and (< 0 (segLength ExhaleHeap@1 temp2@0 null)) (state ExhaleHeap@1 Mask@97)) (and (and (and (and (and (and (=> (= (ControlFlow 0 590) 588) anon1706_Else_correct) (=> (= (ControlFlow 0 590) 519) anon1707_Then_correct)) (=> (= (ControlFlow 0 590) 521) anon1707_Else_correct)) (=> (= (ControlFlow 0 590) 514) anon1705_Then_correct)) (=> (= (ControlFlow 0 590) 516) anon1705_Else_correct)) (=> (= (ControlFlow 0 590) 508) anon1703_Then_correct)) (=> (= (ControlFlow 0 590) 510) anon1703_Else_correct)))))
(let ((anon1701_Else_correct  (=> (and (<= (segLength ExhaleHeap@1 temp2@0 null) 0) (= (ControlFlow 0 506) 504)) anon947_correct)))
(let ((anon881_correct true))
(let ((anon1700_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 405) 402)) anon881_correct)))
(let ((anon1700_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 403) (- 0 404)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 403) 402) anon881_correct))))))
(let ((anon878_correct  (=> (state ExhaleHeap@1 Mask@97) (and (and (and (=> (= (ControlFlow 0 591) 590) anon1701_Then_correct) (=> (= (ControlFlow 0 591) 506) anon1701_Else_correct)) (=> (= (ControlFlow 0 591) 403) anon1700_Then_correct)) (=> (= (ControlFlow 0 591) 405) anon1700_Else_correct)))))
(let ((anon1697_Else_correct  (=> (and (< (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1)) (segDegree ExhaleHeap@1 temp1@3 null 0)) (= (ControlFlow 0 617) 591)) anon878_correct)))
(let ((anon1692_Then_correct  (=> (and (and (<= 2 (segLength ExhaleHeap@1 temp1@3 null)) (= (segDegree ExhaleHeap@1 temp1@3 null 0) (segDegree ExhaleHeap@1 temp1@3 null 1))) (state ExhaleHeap@1 Mask@97)) (and (=> (= (ControlFlow 0 633) (- 0 635)) (HasDirectPerm Mask@97 this@@66 Nodes)) (=> (HasDirectPerm Mask@97 this@@66 Nodes) (and (=> (= (ControlFlow 0 633) (- 0 634)) (HasDirectPerm Mask@97 this@@66 Nodes)) (=> (HasDirectPerm Mask@97 this@@66 Nodes) (and (and (and (and (and (and (=> (= (ControlFlow 0 633) 617) anon1697_Else_correct) (=> (= (ControlFlow 0 633) 630) anon1698_Then_correct)) (=> (= (ControlFlow 0 633) 632) anon1698_Else_correct)) (=> (= (ControlFlow 0 633) 625) anon1696_Then_correct)) (=> (= (ControlFlow 0 633) 627) anon1696_Else_correct)) (=> (= (ControlFlow 0 633) 619) anon1694_Then_correct)) (=> (= (ControlFlow 0 633) 621) anon1694_Else_correct)))))))))
(let ((anon1692_Else_correct  (=> (and (not (and (<= 2 (segLength ExhaleHeap@1 temp1@3 null)) (= (segDegree ExhaleHeap@1 temp1@3 null 0) (segDegree ExhaleHeap@1 temp1@3 null 1)))) (= (ControlFlow 0 616) 591)) anon878_correct)))
(let ((anon1687_Then_correct  (=> (<= 2 (segLength ExhaleHeap@1 temp1@3 null)) (and (and (and (and (and (=> (= (ControlFlow 0 647) 633) anon1692_Then_correct) (=> (= (ControlFlow 0 647) 616) anon1692_Else_correct)) (=> (= (ControlFlow 0 647) 644) anon1691_Then_correct)) (=> (= (ControlFlow 0 647) 646) anon1691_Else_correct)) (=> (= (ControlFlow 0 647) 639) anon1689_Then_correct)) (=> (= (ControlFlow 0 647) 641) anon1689_Else_correct)))))
(let ((anon1687_Else_correct  (=> (< (segLength ExhaleHeap@1 temp1@3 null) 2) (and (=> (= (ControlFlow 0 636) 633) anon1692_Then_correct) (=> (= (ControlFlow 0 636) 616) anon1692_Else_correct)))))
(let ((anon1683_Else_correct  (=> (< (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1)) (segDegree ExhaleHeap@1 temp1@3 null 0)) (and (and (and (=> (= (ControlFlow 0 649) 647) anon1687_Then_correct) (=> (= (ControlFlow 0 649) 636) anon1687_Else_correct)) (=> (= (ControlFlow 0 649) 613) anon1686_Then_correct)) (=> (= (ControlFlow 0 649) 615) anon1686_Else_correct)))))
(let ((anon1678_Then_correct  (=> (and (and (<= 2 (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)) (= (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1)) (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 2)))) (state ExhaleHeap@1 Mask@97)) (and (=> (= (ControlFlow 0 665) (- 0 667)) (HasDirectPerm Mask@97 this@@66 Nodes)) (=> (HasDirectPerm Mask@97 this@@66 Nodes) (and (=> (= (ControlFlow 0 665) (- 0 666)) (HasDirectPerm Mask@97 this@@66 Nodes)) (=> (HasDirectPerm Mask@97 this@@66 Nodes) (and (and (and (and (and (and (=> (= (ControlFlow 0 665) 649) anon1683_Else_correct) (=> (= (ControlFlow 0 665) 662) anon1684_Then_correct)) (=> (= (ControlFlow 0 665) 664) anon1684_Else_correct)) (=> (= (ControlFlow 0 665) 657) anon1682_Then_correct)) (=> (= (ControlFlow 0 665) 659) anon1682_Else_correct)) (=> (= (ControlFlow 0 665) 651) anon1680_Then_correct)) (=> (= (ControlFlow 0 665) 653) anon1680_Else_correct)))))))))
(let ((anon1678_Else_correct  (=> (not (and (<= 2 (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)) (= (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1)) (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 2))))) (and (and (and (=> (= (ControlFlow 0 648) 647) anon1687_Then_correct) (=> (= (ControlFlow 0 648) 636) anon1687_Else_correct)) (=> (= (ControlFlow 0 648) 613) anon1686_Then_correct)) (=> (= (ControlFlow 0 648) 615) anon1686_Else_correct)))))
(let ((anon1672_Else_correct  (and (=> (= (ControlFlow 0 689) (- 0 691)) (HasDirectPerm Mask@97 this@@66 Nodes)) (=> (HasDirectPerm Mask@97 this@@66 Nodes) (and (=> (= (ControlFlow 0 689) (- 0 690)) (HasDirectPerm Mask@97 this@@66 Nodes)) (=> (HasDirectPerm Mask@97 this@@66 Nodes) (and (and (and (and (and (=> (= (ControlFlow 0 689) 665) anon1678_Then_correct) (=> (= (ControlFlow 0 689) 648) anon1678_Else_correct)) (=> (= (ControlFlow 0 689) 686) anon1677_Then_correct)) (=> (= (ControlFlow 0 689) 688) anon1677_Else_correct)) (=> (= (ControlFlow 0 689) 680) anon1675_Then_correct)) (=> (= (ControlFlow 0 689) 682) anon1675_Else_correct))))))))
(let ((anon1669_Then_correct  (=> (<= 2 (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)) (and (=> (= (ControlFlow 0 692) (- 0 694)) (HasDirectPerm Mask@97 this@@66 Nodes)) (=> (HasDirectPerm Mask@97 this@@66 Nodes) (and (=> (= (ControlFlow 0 692) (- 0 693)) (HasDirectPerm Mask@97 this@@66 Nodes)) (=> (HasDirectPerm Mask@97 this@@66 Nodes) (and (and (and (and (=> (= (ControlFlow 0 692) 689) anon1672_Else_correct) (=> (= (ControlFlow 0 692) 676) anon1673_Then_correct)) (=> (= (ControlFlow 0 692) 678) anon1673_Else_correct)) (=> (= (ControlFlow 0 692) 670) anon1671_Then_correct)) (=> (= (ControlFlow 0 692) 672) anon1671_Else_correct)))))))))
(let ((anon1669_Else_correct  (=> (< (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 2) (and (=> (= (ControlFlow 0 668) 665) anon1678_Then_correct) (=> (= (ControlFlow 0 668) 648) anon1678_Else_correct)))))
(let ((anon1665_Else_correct  (=> (<= (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1)) (segDegree ExhaleHeap@1 temp1@3 null 0)) (and (=> (= (ControlFlow 0 695) (- 0 696)) (HasDirectPerm Mask@97 this@@66 Nodes)) (=> (HasDirectPerm Mask@97 this@@66 Nodes) (and (and (and (=> (= (ControlFlow 0 695) 692) anon1669_Then_correct) (=> (= (ControlFlow 0 695) 668) anon1669_Else_correct)) (=> (= (ControlFlow 0 695) 609) anon1668_Then_correct)) (=> (= (ControlFlow 0 695) 611) anon1668_Else_correct)))))))
(let ((anon1660_Then_correct  (=> (and (< 0 (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)) (state ExhaleHeap@1 Mask@97)) (and (=> (= (ControlFlow 0 697) (- 0 699)) (HasDirectPerm Mask@97 this@@66 Nodes)) (=> (HasDirectPerm Mask@97 this@@66 Nodes) (and (=> (= (ControlFlow 0 697) (- 0 698)) (HasDirectPerm Mask@97 this@@66 Nodes)) (=> (HasDirectPerm Mask@97 this@@66 Nodes) (and (and (and (and (and (and (=> (= (ControlFlow 0 697) 695) anon1665_Else_correct) (=> (= (ControlFlow 0 697) 605) anon1666_Then_correct)) (=> (= (ControlFlow 0 697) 607) anon1666_Else_correct)) (=> (= (ControlFlow 0 697) 600) anon1664_Then_correct)) (=> (= (ControlFlow 0 697) 602) anon1664_Else_correct)) (=> (= (ControlFlow 0 697) 594) anon1662_Then_correct)) (=> (= (ControlFlow 0 697) 596) anon1662_Else_correct)))))))))
(let ((anon1660_Else_correct  (=> (and (<= (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 0) (= (ControlFlow 0 592) 591)) anon878_correct)))
(let ((anon802_correct true))
(let ((anon1659_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 401) 398)) anon802_correct)))
(let ((anon1659_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 399) (- 0 400)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)))) (=> (= (ControlFlow 0 399) 398) anon802_correct))))))
(let ((anon1656_Else_correct  (=> (and (< 0 (segLength ExhaleHeap@1 temp1@3 null)) (state ExhaleHeap@1 Mask@97)) (and (=> (= (ControlFlow 0 700) (- 0 701)) (HasDirectPerm Mask@97 this@@66 Nodes)) (=> (HasDirectPerm Mask@97 this@@66 Nodes) (and (and (and (=> (= (ControlFlow 0 700) 697) anon1660_Then_correct) (=> (= (ControlFlow 0 700) 592) anon1660_Else_correct)) (=> (= (ControlFlow 0 700) 399) anon1659_Then_correct)) (=> (= (ControlFlow 0 700) 401) anon1659_Else_correct)))))))
(let ((anon798_correct true))
(let ((anon1657_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 397) 394)) anon798_correct)))
(let ((anon1657_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 395) (- 0 396)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg temp1@3 null)))) (=> (= (ControlFlow 0 395) 394) anon798_correct))))))
(let ((anon1654_Else_correct  (=> (presorted ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (=> (and (state ExhaleHeap@1 Mask@97) (state ExhaleHeap@1 Mask@97)) (and (and (=> (= (ControlFlow 0 702) 700) anon1656_Else_correct) (=> (= (ControlFlow 0 702) 395) anon1657_Then_correct)) (=> (= (ControlFlow 0 702) 397) anon1657_Else_correct))))))
(let ((anon794_correct true))
(let ((anon1655_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 393) 390)) anon794_correct)))
(let ((anon1655_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 391) (- 0 392)) (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@97 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)))) (=> (= (ControlFlow 0 391) 390) anon794_correct))))))
(let ((anon1652_Else_correct  (=> (sorted ExhaleHeap@1 temp2@0 null) (=> (and (and (state ExhaleHeap@1 Mask@95) (not (= this@@66 null))) (and (= Mask@96 (MapType1Store Mask@95 this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select Mask@95 this@@66 Nodes)) FullPerm)))) (state ExhaleHeap@1 Mask@96))) (and (=> (= (ControlFlow 0 703) (- 0 706)) (HasDirectPerm Mask@96 this@@66 Nodes)) (=> (HasDirectPerm Mask@96 this@@66 Nodes) (=> (and (not (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) null)) (state ExhaleHeap@1 Mask@96)) (and (=> (= (ControlFlow 0 703) (- 0 705)) (HasDirectPerm Mask@96 this@@66 Nodes)) (=> (HasDirectPerm Mask@96 this@@66 Nodes) (=> (= Mask@97 (MapType1Store Mask@96 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (real_2_U (+ (U_2_real (MapType1Select Mask@96 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))) FullPerm)))) (=> (and (state ExhaleHeap@1 Mask@97) (state ExhaleHeap@1 Mask@97)) (and (=> (= (ControlFlow 0 703) (- 0 704)) (HasDirectPerm Mask@97 this@@66 Nodes)) (=> (HasDirectPerm Mask@97 this@@66 Nodes) (and (and (=> (= (ControlFlow 0 703) 702) anon1654_Else_correct) (=> (= (ControlFlow 0 703) 391) anon1655_Then_correct)) (=> (= (ControlFlow 0 703) 393) anon1655_Else_correct)))))))))))))))
(let ((anon790_correct true))
(let ((anon1653_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 389) 386)) anon790_correct)))
(let ((anon1653_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 387) (- 0 388)) (<= FullPerm (U_2_real (MapType1Select Mask@95 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@95 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 387) 386) anon790_correct))))))
(let ((anon1650_Else_correct  (=> (presorted ExhaleHeap@1 temp1@3 null) (=> (and (and (state ExhaleHeap@1 Mask@30) (= Mask@95 (MapType1Store Mask@30 null (heapseg temp2@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@30 null (heapseg temp2@0 null))) FullPerm))))) (and (state ExhaleHeap@1 Mask@95) (state ExhaleHeap@1 Mask@95))) (and (and (=> (= (ControlFlow 0 707) 703) anon1652_Else_correct) (=> (= (ControlFlow 0 707) 387) anon1653_Then_correct)) (=> (= (ControlFlow 0 707) 389) anon1653_Else_correct))))))
(let ((anon786_correct true))
(let ((anon1651_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 385) 382)) anon786_correct)))
(let ((anon1651_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 383) (- 0 384)) (<= FullPerm (U_2_real (MapType1Select Mask@30 null (heapseg temp1@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@30 null (heapseg temp1@3 null)))) (=> (= (ControlFlow 0 383) 382) anon786_correct))))))
(let ((anon1649_Then_correct  (=> (not (= temp1@3 null)) (=> (and (and (state ExhaleHeap@1 Mask@29) (= Mask@30 (MapType1Store Mask@29 null (heapseg temp1@3 null) (real_2_U (+ (U_2_real (MapType1Select Mask@29 null (heapseg temp1@3 null))) FullPerm))))) (and (state ExhaleHeap@1 Mask@30) (state ExhaleHeap@1 Mask@30))) (and (and (=> (= (ControlFlow 0 708) 707) anon1650_Else_correct) (=> (= (ControlFlow 0 708) 383) anon1651_Then_correct)) (=> (= (ControlFlow 0 708) 385) anon1651_Else_correct))))))
(let ((anon1160_correct true))
(let ((anon1846_Else_correct  (=> (and (= temp2@0 null) (= (ControlFlow 0 135) 132)) anon1160_correct)))
(let ((anon1846_Then_correct  (=> (not (= temp2@0 null)) (and (=> (= (ControlFlow 0 133) (- 0 134)) (= (segParent Heap@96 temp2@0 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (=> (= (segParent Heap@96 temp2@0 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (=> (= (ControlFlow 0 133) 132) anon1160_correct))))))
(let ((anon1158_correct  (and (=> (= (ControlFlow 0 136) (- 0 137)) (= (segParent Heap@96 temp1@5 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (=> (= (segParent Heap@96 temp1@5 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (and (=> (= (ControlFlow 0 136) 133) anon1846_Then_correct) (=> (= (ControlFlow 0 136) 135) anon1846_Else_correct))))))
(let ((anon1845_Else_correct  (=> (and (not (and (not (= (MapType0Select Heap@96 this@@66 Nodes) temp1@5)) (not (= temp2@0 null)))) (= (ControlFlow 0 140) 136)) anon1158_correct)))
(let ((anon1845_Then_correct  (=> (and (not (= (MapType0Select Heap@96 this@@66 Nodes) temp1@5)) (not (= temp2@0 null))) (and (=> (= (ControlFlow 0 138) (- 0 139)) (= (segParent Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5) (segParent Heap@96 temp2@0 null))) (=> (= (segParent Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5) (segParent Heap@96 temp2@0 null)) (=> (= (ControlFlow 0 138) 136) anon1158_correct))))))
(let ((anon1844_Else_correct  (=> (= (MapType0Select Heap@96 this@@66 Nodes) temp1@5) (and (=> (= (ControlFlow 0 143) 138) anon1845_Then_correct) (=> (= (ControlFlow 0 143) 140) anon1845_Else_correct)))))
(let ((anon1844_Then_correct  (=> (not (= (MapType0Select Heap@96 this@@66 Nodes) temp1@5)) (and (=> (= (ControlFlow 0 141) (- 0 142)) (= (segParent Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5) (segParent Heap@96 temp1@5 null))) (=> (= (segParent Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5) (segParent Heap@96 temp1@5 null)) (and (=> (= (ControlFlow 0 141) 138) anon1845_Then_correct) (=> (= (ControlFlow 0 141) 140) anon1845_Else_correct)))))))
(let ((anon1843_Else_correct  (=> (= temp2@0 null) (and (=> (= (ControlFlow 0 146) 141) anon1844_Then_correct) (=> (= (ControlFlow 0 146) 143) anon1844_Else_correct)))))
(let ((anon1843_Then_correct  (=> (not (= temp2@0 null)) (and (=> (= (ControlFlow 0 144) (- 0 145)) (= (segParent Heap@96 temp1@5 null) (segParent Heap@96 temp2@0 null))) (=> (= (segParent Heap@96 temp1@5 null) (segParent Heap@96 temp2@0 null)) (and (=> (= (ControlFlow 0 144) 141) anon1844_Then_correct) (=> (= (ControlFlow 0 144) 143) anon1844_Else_correct)))))))
(let ((anon1152_correct  (and (=> (= (ControlFlow 0 147) (- 0 148)) (= (+ (+ (segSize Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5) (segSize Heap@96 temp1@5 null)) (segSize Heap@96 temp2@0 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null)))) (=> (= (+ (+ (segSize Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5) (segSize Heap@96 temp1@5 null)) (segSize Heap@96 temp2@0 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null))) (and (=> (= (ControlFlow 0 147) 144) anon1843_Then_correct) (=> (= (ControlFlow 0 147) 146) anon1843_Else_correct))))))
(let ((anon1842_Else_correct  (=> (and (not (and (<= 2 (+ (segLength Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5) (segLength Heap@96 temp1@5 null))) (= (ite (<= 2 (segLength Heap@96 temp1@5 null)) (segDegree Heap@96 temp1@5 null (- (segLength Heap@96 temp1@5 null) 2)) (segDegree Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5 (- (segLength Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5) 1))) (segDegree Heap@96 temp1@5 null (- (segLength Heap@96 temp1@5 null) 1))))) (= (ControlFlow 0 152) 147)) anon1152_correct)))
(let ((anon1842_Then_correct  (=> (and (<= 2 (+ (segLength Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5) (segLength Heap@96 temp1@5 null))) (= (ite (<= 2 (segLength Heap@96 temp1@5 null)) (segDegree Heap@96 temp1@5 null (- (segLength Heap@96 temp1@5 null) 2)) (segDegree Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5 (- (segLength Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5) 1))) (segDegree Heap@96 temp1@5 null (- (segLength Heap@96 temp1@5 null) 1)))) (and (=> (= (ControlFlow 0 150) (- 0 151)) (< (segDegree Heap@96 temp1@5 null (- (segLength Heap@96 temp1@5 null) 1)) (segDegree Heap@96 temp2@0 null 0))) (=> (< (segDegree Heap@96 temp1@5 null (- (segLength Heap@96 temp1@5 null) 1)) (segDegree Heap@96 temp2@0 null 0)) (=> (= (ControlFlow 0 150) 147) anon1152_correct))))))
(let ((anon1841_Then_correct  (=> (< 0 (segLength Heap@96 temp2@0 null)) (and (=> (= (ControlFlow 0 153) (- 0 154)) (<= (segDegree Heap@96 temp1@5 null (- (segLength Heap@96 temp1@5 null) 1)) (segDegree Heap@96 temp2@0 null 0))) (=> (<= (segDegree Heap@96 temp1@5 null (- (segLength Heap@96 temp1@5 null) 1)) (segDegree Heap@96 temp2@0 null 0)) (and (=> (= (ControlFlow 0 153) 150) anon1842_Then_correct) (=> (= (ControlFlow 0 153) 152) anon1842_Else_correct)))))))
(let ((anon1841_Else_correct  (=> (and (<= (segLength Heap@96 temp2@0 null) 0) (= (ControlFlow 0 149) 147)) anon1152_correct)))
(let ((anon1840_Else_correct  (=> (not (and (<= 2 (segLength Heap@96 temp1@5 null)) (= (segDegree Heap@96 temp1@5 null 0) (segDegree Heap@96 temp1@5 null 1)))) (and (=> (= (ControlFlow 0 158) 153) anon1841_Then_correct) (=> (= (ControlFlow 0 158) 149) anon1841_Else_correct)))))
(let ((anon1840_Then_correct  (=> (and (<= 2 (segLength Heap@96 temp1@5 null)) (= (segDegree Heap@96 temp1@5 null 0) (segDegree Heap@96 temp1@5 null 1))) (and (=> (= (ControlFlow 0 156) (- 0 157)) (< (segDegree Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5 (- (segLength Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5) 1)) (segDegree Heap@96 temp1@5 null 0))) (=> (< (segDegree Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5 (- (segLength Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5) 1)) (segDegree Heap@96 temp1@5 null 0)) (and (=> (= (ControlFlow 0 156) 153) anon1841_Then_correct) (=> (= (ControlFlow 0 156) 149) anon1841_Else_correct)))))))
(let ((anon1839_Else_correct  (=> (not (and (<= 2 (segLength Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5)) (= (segDegree Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5 (- (segLength Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5) 1)) (segDegree Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5 (- (segLength Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5) 2))))) (and (=> (= (ControlFlow 0 161) 156) anon1840_Then_correct) (=> (= (ControlFlow 0 161) 158) anon1840_Else_correct)))))
(let ((anon1839_Then_correct  (=> (and (<= 2 (segLength Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5)) (= (segDegree Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5 (- (segLength Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5) 1)) (segDegree Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5 (- (segLength Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5) 2)))) (and (=> (= (ControlFlow 0 159) (- 0 160)) (< (segDegree Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5 (- (segLength Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5) 1)) (segDegree Heap@96 temp1@5 null 0))) (=> (< (segDegree Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5 (- (segLength Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5) 1)) (segDegree Heap@96 temp1@5 null 0)) (and (=> (= (ControlFlow 0 159) 156) anon1840_Then_correct) (=> (= (ControlFlow 0 159) 158) anon1840_Else_correct)))))))
(let ((anon1838_Then_correct  (=> (< 0 (segLength Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5)) (and (=> (= (ControlFlow 0 162) (- 0 163)) (<= (segDegree Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5 (- (segLength Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5) 1)) (segDegree Heap@96 temp1@5 null 0))) (=> (<= (segDegree Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5 (- (segLength Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5) 1)) (segDegree Heap@96 temp1@5 null 0)) (and (=> (= (ControlFlow 0 162) 159) anon1839_Then_correct) (=> (= (ControlFlow 0 162) 161) anon1839_Else_correct)))))))
(let ((anon1838_Else_correct  (=> (<= (segLength Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5) 0) (and (=> (= (ControlFlow 0 155) 153) anon1841_Then_correct) (=> (= (ControlFlow 0 155) 149) anon1841_Else_correct)))))
(let ((anon1144_correct  (=> (= Mask@94 (MapType1Store Mask@93 null (heapseg (MapType0Select Heap@96 this@@66 Nodes) temp1@5) (real_2_U (- (U_2_real (MapType1Select Mask@93 null (heapseg (MapType0Select Heap@96 this@@66 Nodes) temp1@5))) FullPerm)))) (and (=> (= (ControlFlow 0 164) (- 0 166)) (presorted Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5)) (=> (presorted Heap@96 (MapType0Select Heap@96 this@@66 Nodes) temp1@5) (and (=> (= (ControlFlow 0 164) (- 0 165)) (< 0 (segLength Heap@96 temp1@5 null))) (=> (< 0 (segLength Heap@96 temp1@5 null)) (and (=> (= (ControlFlow 0 164) 162) anon1838_Then_correct) (=> (= (ControlFlow 0 164) 155) anon1838_Else_correct)))))))))
(let ((anon1837_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 169) 164)) anon1144_correct)))
(let ((anon1837_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 167) (- 0 168)) (<= FullPerm (U_2_real (MapType1Select Mask@93 null (heapseg (MapType0Select Heap@96 this@@66 Nodes) temp1@5))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@93 null (heapseg (MapType0Select Heap@96 this@@66 Nodes) temp1@5)))) (=> (= (ControlFlow 0 167) 164) anon1144_correct))))))
(let ((anon1142_correct  (=> (= Mask@93 (MapType1Store Mask@92 this@@66 Nodes (real_2_U (- (U_2_real (MapType1Select Mask@92 this@@66 Nodes)) FullPerm)))) (and (=> (= (ControlFlow 0 170) (- 0 171)) (not (= (MapType0Select Heap@96 this@@66 Nodes) null))) (=> (not (= (MapType0Select Heap@96 this@@66 Nodes) null)) (and (=> (= (ControlFlow 0 170) 167) anon1837_Then_correct) (=> (= (ControlFlow 0 170) 169) anon1837_Else_correct)))))))
(let ((anon1836_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 174) 170)) anon1142_correct)))
(let ((anon1836_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 172) (- 0 173)) (<= FullPerm (U_2_real (MapType1Select Mask@92 this@@66 Nodes)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@92 this@@66 Nodes))) (=> (= (ControlFlow 0 172) 170) anon1142_correct))))))
(let ((anon1140_correct  (=> (= Mask@92 (MapType1Store Mask@91 null (heapseg temp2@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@91 null (heapseg temp2@0 null))) FullPerm)))) (and (=> (= (ControlFlow 0 175) (- 0 176)) (sorted Heap@96 temp2@0 null)) (=> (sorted Heap@96 temp2@0 null) (and (=> (= (ControlFlow 0 175) 172) anon1836_Then_correct) (=> (= (ControlFlow 0 175) 174) anon1836_Else_correct)))))))
(let ((anon1835_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 179) 175)) anon1140_correct)))
(let ((anon1835_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 177) (- 0 178)) (<= FullPerm (U_2_real (MapType1Select Mask@91 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@91 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 177) 175) anon1140_correct))))))
(let ((anon1138_correct  (=> (= Mask@91 (MapType1Store Mask@90 null (heapseg temp1@5 null) (real_2_U (- (U_2_real (MapType1Select Mask@90 null (heapseg temp1@5 null))) FullPerm)))) (and (=> (= (ControlFlow 0 180) (- 0 181)) (presorted Heap@96 temp1@5 null)) (=> (presorted Heap@96 temp1@5 null) (and (=> (= (ControlFlow 0 180) 177) anon1835_Then_correct) (=> (= (ControlFlow 0 180) 179) anon1835_Else_correct)))))))
(let ((anon1834_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 184) 180)) anon1138_correct)))
(let ((anon1834_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 182) (- 0 183)) (<= FullPerm (U_2_real (MapType1Select Mask@90 null (heapseg temp1@5 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@90 null (heapseg temp1@5 null)))) (=> (= (ControlFlow 0 182) 180) anon1138_correct))))))
(let ((anon1136_correct  (=> (and (state Heap@96 Mask@90) (state Heap@96 Mask@90)) (and (=> (= (ControlFlow 0 185) (- 0 186)) (not (= temp1@5 null))) (=> (not (= temp1@5 null)) (and (=> (= (ControlFlow 0 185) 182) anon1834_Then_correct) (=> (= (ControlFlow 0 185) 184) anon1834_Else_correct)))))))
(let ((anon1833_Else_correct  (=> (= temp1@5 null) (=> (and (= Heap@96 Heap@92) (= (ControlFlow 0 188) 185)) anon1136_correct))))
(let ((anon1833_Then_correct  (=> (and (and (and (not (= temp1@5 null)) (forall ((o_101 T@U) (f_105 T@U) ) (! (let ((B@@43 (FieldTypeInv1 (type f_105))))
(let ((A@@44 (FieldTypeInv0 (type f_105))))
 (=> (and (and (= (type o_101) RefType) (= (type f_105) (FieldType A@@44 B@@43))) (or (U_2_bool (MapType1Select (MapType0Select Heap@92 null (|heapseg#sm| temp1@5 null)) o_101 f_105)) (U_2_bool (MapType1Select (MapType0Select Heap@92 null (|tree#sm| temp1@5)) o_101 f_105)))) (U_2_bool (MapType1Select newPMask@23 o_101 f_105)))))
 :qid |stdinbpl.12667:41|
 :skolemid |205|
 :pattern ( (MapType1Select newPMask@23 o_101 f_105))
))) (and (= Heap@93 (MapType0Store Heap@92 null (|heapseg#sm| temp1@5 null) newPMask@23)) (= Heap@94 (MapType0Store Heap@93 null (|heapseg#sm| temp1@5 null) (MapType1Store (MapType0Select Heap@93 null (|heapseg#sm| temp1@5 null)) temp1@5 sibling (bool_2_U true)))))) (and (and (forall ((o_102 T@U) (f_106 T@U) ) (! (let ((B@@44 (FieldTypeInv1 (type f_106))))
(let ((A@@45 (FieldTypeInv0 (type f_106))))
 (=> (and (and (= (type o_102) RefType) (= (type f_106) (FieldType A@@45 B@@44))) (or (U_2_bool (MapType1Select (MapType0Select Heap@94 null (|heapseg#sm| temp1@5 null)) o_102 f_106)) (U_2_bool (MapType1Select (MapType0Select Heap@94 null (|heapseg#sm| (MapType0Select Heap@94 temp1@5 sibling) null)) o_102 f_106)))) (U_2_bool (MapType1Select newPMask@24 o_102 f_106)))))
 :qid |stdinbpl.12674:41|
 :skolemid |206|
 :pattern ( (MapType1Select newPMask@24 o_102 f_106))
)) (= Heap@95 (MapType0Store Heap@94 null (|heapseg#sm| temp1@5 null) newPMask@24))) (and (= Heap@96 Heap@95) (= (ControlFlow 0 187) 185)))) anon1136_correct)))
(let ((anon1832_Else_correct  (=> (and (HasDirectPerm Mask@90 null (heapseg temp1@5 null)) (= Heap@92 ExhaleHeap@7)) (and (=> (= (ControlFlow 0 190) 187) anon1833_Then_correct) (=> (= (ControlFlow 0 190) 188) anon1833_Else_correct)))))
(let ((anon1832_Then_correct  (=> (and (and (not (HasDirectPerm Mask@90 null (heapseg temp1@5 null))) (= Heap@90 (MapType0Store ExhaleHeap@7 null (|heapseg#sm| temp1@5 null) ZeroPMask))) (and (= Heap@91 (MapType0Store Heap@90 null (heapseg temp1@5 null) freshVersion@5)) (= Heap@92 Heap@91))) (and (=> (= (ControlFlow 0 189) 187) anon1833_Then_correct) (=> (= (ControlFlow 0 189) 188) anon1833_Else_correct)))))
(let ((anon1132_correct  (=> (= Mask@90 (MapType1Store Mask@89 null (heapseg temp1@5 null) (real_2_U (+ (U_2_real (MapType1Select Mask@89 null (heapseg temp1@5 null))) FullPerm)))) (=> (and (and (state ExhaleHeap@7 Mask@90) (state ExhaleHeap@7 Mask@90)) (and (|heapseg#trigger| ExhaleHeap@7 (heapseg temp1@5 null)) (= (MapType0Select ExhaleHeap@7 null (heapseg temp1@5 null)) (FrameFragment (ite (not (= temp1@5 null)) (CombineFrames (MapType0Select ExhaleHeap@7 null (tree temp1@5)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@7 temp1@5 sibling)) (CombineFrames (MapType0Select ExhaleHeap@7 null (heapseg (MapType0Select ExhaleHeap@7 temp1@5 sibling) null)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@7 temp1@5 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 191) 189) anon1832_Then_correct) (=> (= (ControlFlow 0 191) 190) anon1832_Else_correct))))))
(let ((anon1831_Else_correct  (=> (= (MapType0Select ExhaleHeap@7 temp1@5 sibling) null) (=> (and (= Mask@89 Mask@88) (= (ControlFlow 0 195) 191)) anon1132_correct))))
(let ((anon1831_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@7 temp1@5 sibling) null)) (and (=> (= (ControlFlow 0 193) (- 0 194)) (= (treeParent ExhaleHeap@7 temp1@5) (segParent ExhaleHeap@7 (MapType0Select ExhaleHeap@7 temp1@5 sibling) null))) (=> (= (treeParent ExhaleHeap@7 temp1@5) (segParent ExhaleHeap@7 (MapType0Select ExhaleHeap@7 temp1@5 sibling) null)) (=> (and (= Mask@89 Mask@88) (= (ControlFlow 0 193) 191)) anon1132_correct))))))
(let ((anon1130_correct  (=> (and (= Mask@88 (MapType1Store Mask@87 null (heapseg (MapType0Select ExhaleHeap@7 temp1@5 sibling) null) (real_2_U (- (U_2_real (MapType1Select Mask@87 null (heapseg (MapType0Select ExhaleHeap@7 temp1@5 sibling) null))) FullPerm)))) (InsidePredicate (heapseg temp1@5 null) (MapType0Select ExhaleHeap@7 null (heapseg temp1@5 null)) (heapseg (MapType0Select ExhaleHeap@7 temp1@5 sibling) null) (MapType0Select ExhaleHeap@7 null (heapseg (MapType0Select ExhaleHeap@7 temp1@5 sibling) null)))) (and (=> (= (ControlFlow 0 196) 193) anon1831_Then_correct) (=> (= (ControlFlow 0 196) 195) anon1831_Else_correct)))))
(let ((anon1830_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 199) 196)) anon1130_correct)))
(let ((anon1830_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 197) (- 0 198)) (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg (MapType0Select ExhaleHeap@7 temp1@5 sibling) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 null (heapseg (MapType0Select ExhaleHeap@7 temp1@5 sibling) null)))) (=> (= (ControlFlow 0 197) 196) anon1130_correct))))))
(let ((anon1128_correct  (=> (= Mask@87 (MapType1Store Mask@86 temp1@5 sibling (real_2_U (- (U_2_real (MapType1Select Mask@86 temp1@5 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 200) 197) anon1830_Then_correct) (=> (= (ControlFlow 0 200) 199) anon1830_Else_correct)))))
(let ((anon1829_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 203) 200)) anon1128_correct)))
(let ((anon1829_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 201) (- 0 202)) (<= FullPerm (U_2_real (MapType1Select Mask@86 temp1@5 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@86 temp1@5 sibling))) (=> (= (ControlFlow 0 201) 200) anon1128_correct))))))
(let ((anon1126_correct  (=> (and (= Mask@86 (MapType1Store Mask@85 null (tree temp1@5) (real_2_U (- (U_2_real (MapType1Select Mask@85 null (tree temp1@5))) FullPerm)))) (InsidePredicate (heapseg temp1@5 null) (MapType0Select ExhaleHeap@7 null (heapseg temp1@5 null)) (tree temp1@5) (MapType0Select ExhaleHeap@7 null (tree temp1@5)))) (and (=> (= (ControlFlow 0 204) 201) anon1829_Then_correct) (=> (= (ControlFlow 0 204) 203) anon1829_Else_correct)))))
(let ((anon1828_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 207) 204)) anon1126_correct)))
(let ((anon1828_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 205) (- 0 206)) (<= FullPerm (U_2_real (MapType1Select Mask@85 null (tree temp1@5))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@85 null (tree temp1@5)))) (=> (= (ControlFlow 0 205) 204) anon1126_correct))))))
(let ((anon1827_Then_correct  (=> (not (= temp1@5 null)) (and (=> (= (ControlFlow 0 208) 205) anon1828_Then_correct) (=> (= (ControlFlow 0 208) 207) anon1828_Else_correct)))))
(let ((anon1827_Else_correct  (=> (= temp1@5 null) (=> (and (= Mask@89 Mask@85) (= (ControlFlow 0 192) 191)) anon1132_correct))))
(let ((anon1123_correct  (=> (and (state ExhaleHeap@7 Mask@85) (state ExhaleHeap@7 Mask@85)) (and (=> (= (ControlFlow 0 209) 208) anon1827_Then_correct) (=> (= (ControlFlow 0 209) 192) anon1827_Else_correct)))))
(let ((anon1826_Else_correct  (=> (and (= temp1@3 temp1@5) (= (ControlFlow 0 211) 209)) anon1123_correct)))
(let ((anon1826_Then_correct  (=> (and (and (not (= temp1@3 temp1@5)) (state ExhaleHeap@7 Mask@85)) (and (= (segParent ExhaleHeap@7 arg_a_3@0 temp1@5) (segParent Heap@89 temp1@3 temp1@5)) (= (ControlFlow 0 210) 209))) anon1123_correct)))
(let ((anon1825_Else_correct  (=> (= arg_a_3@0 temp1@3) (and (=> (= (ControlFlow 0 213) 210) anon1826_Then_correct) (=> (= (ControlFlow 0 213) 211) anon1826_Else_correct)))))
(let ((anon1825_Then_correct  (=> (not (= arg_a_3@0 temp1@3)) (=> (and (state ExhaleHeap@7 Mask@85) (= (segParent ExhaleHeap@7 arg_a_3@0 temp1@5) (segParent Heap@89 arg_a_3@0 temp1@3))) (and (=> (= (ControlFlow 0 212) 210) anon1826_Then_correct) (=> (= (ControlFlow 0 212) 211) anon1826_Else_correct))))))
(let ((anon1119_correct  (=> (and (state ExhaleHeap@7 Mask@85) (= (segSize ExhaleHeap@7 arg_a_3@0 temp1@5) (+ (segSize Heap@89 arg_a_3@0 temp1@3) (segSize Heap@89 temp1@3 temp1@5)))) (and (=> (= (ControlFlow 0 214) 212) anon1825_Then_correct) (=> (= (ControlFlow 0 214) 213) anon1825_Else_correct)))))
(let ((anon1824_Else_correct  (=> (and (not (and (validChildren Heap@89 arg_a_3@0 temp1@3) (and (validChildren Heap@89 temp1@3 temp1@5) (=> (and (< 0 (segLength Heap@89 arg_a_3@0 temp1@3)) (< 0 (segLength Heap@89 temp1@3 temp1@5))) (= (segDegree Heap@89 arg_a_3@0 temp1@3 (- (segLength Heap@89 arg_a_3@0 temp1@3) 1)) (+ (segDegree Heap@89 temp1@3 temp1@5 0) 1)))))) (= (ControlFlow 0 216) 214)) anon1119_correct)))
(let ((anon1824_Then_correct  (=> (and (and (and (validChildren Heap@89 arg_a_3@0 temp1@3) (and (validChildren Heap@89 temp1@3 temp1@5) (=> (and (< 0 (segLength Heap@89 arg_a_3@0 temp1@3)) (< 0 (segLength Heap@89 temp1@3 temp1@5))) (= (segDegree Heap@89 arg_a_3@0 temp1@3 (- (segLength Heap@89 arg_a_3@0 temp1@3) 1)) (+ (segDegree Heap@89 temp1@3 temp1@5 0) 1))))) (state ExhaleHeap@7 Mask@85)) (and (validChildren ExhaleHeap@7 arg_a_3@0 temp1@5) (= (ControlFlow 0 215) 214))) anon1119_correct)))
(let ((anon1823_Else_correct  (=> (not (and (presorted Heap@89 arg_a_3@0 temp1@3) (and (presorted Heap@89 temp1@3 temp1@5) (=> (and (< 0 (segLength Heap@89 arg_a_3@0 temp1@3)) (< 0 (segLength Heap@89 temp1@3 temp1@5))) (and (<= (segDegree Heap@89 arg_a_3@0 temp1@3 (- (segLength Heap@89 arg_a_3@0 temp1@3) 1)) (segDegree Heap@89 temp1@3 temp1@5 0)) (and (=> (and (<= 2 (segLength Heap@89 arg_a_3@0 temp1@3)) (= (segDegree Heap@89 arg_a_3@0 temp1@3 (- (segLength Heap@89 arg_a_3@0 temp1@3) 1)) (segDegree Heap@89 arg_a_3@0 temp1@3 (- (segLength Heap@89 arg_a_3@0 temp1@3) 2)))) (< (segDegree Heap@89 arg_a_3@0 temp1@3 (- (segLength Heap@89 arg_a_3@0 temp1@3) 1)) (segDegree Heap@89 temp1@3 temp1@5 0))) (=> (and (<= 2 (segLength Heap@89 temp1@3 temp1@5)) (= (segDegree Heap@89 temp1@3 temp1@5 0) (segDegree Heap@89 temp1@3 temp1@5 1))) (< (segDegree Heap@89 arg_a_3@0 temp1@3 (- (segLength Heap@89 arg_a_3@0 temp1@3) 1)) (segDegree Heap@89 temp1@3 temp1@5 0))))))))) (and (=> (= (ControlFlow 0 218) 215) anon1824_Then_correct) (=> (= (ControlFlow 0 218) 216) anon1824_Else_correct)))))
(let ((anon1823_Then_correct  (=> (and (and (presorted Heap@89 arg_a_3@0 temp1@3) (and (presorted Heap@89 temp1@3 temp1@5) (=> (and (< 0 (segLength Heap@89 arg_a_3@0 temp1@3)) (< 0 (segLength Heap@89 temp1@3 temp1@5))) (and (<= (segDegree Heap@89 arg_a_3@0 temp1@3 (- (segLength Heap@89 arg_a_3@0 temp1@3) 1)) (segDegree Heap@89 temp1@3 temp1@5 0)) (and (=> (and (<= 2 (segLength Heap@89 arg_a_3@0 temp1@3)) (= (segDegree Heap@89 arg_a_3@0 temp1@3 (- (segLength Heap@89 arg_a_3@0 temp1@3) 1)) (segDegree Heap@89 arg_a_3@0 temp1@3 (- (segLength Heap@89 arg_a_3@0 temp1@3) 2)))) (< (segDegree Heap@89 arg_a_3@0 temp1@3 (- (segLength Heap@89 arg_a_3@0 temp1@3) 1)) (segDegree Heap@89 temp1@3 temp1@5 0))) (=> (and (<= 2 (segLength Heap@89 temp1@3 temp1@5)) (= (segDegree Heap@89 temp1@3 temp1@5 0) (segDegree Heap@89 temp1@3 temp1@5 1))) (< (segDegree Heap@89 arg_a_3@0 temp1@3 (- (segLength Heap@89 arg_a_3@0 temp1@3) 1)) (segDegree Heap@89 temp1@3 temp1@5 0)))))))) (and (state ExhaleHeap@7 Mask@85) (presorted ExhaleHeap@7 arg_a_3@0 temp1@5))) (and (=> (= (ControlFlow 0 217) 215) anon1824_Then_correct) (=> (= (ControlFlow 0 217) 216) anon1824_Else_correct)))))
(let ((anon1822_Else_correct  (=> (not (and (sorted Heap@89 arg_a_3@0 temp1@3) (and (sorted Heap@89 temp1@3 temp1@5) (=> (and (< 0 (segLength Heap@89 arg_a_3@0 temp1@3)) (< 0 (segLength Heap@89 temp1@3 temp1@5))) (< (segDegree Heap@89 arg_a_3@0 temp1@3 (- (segLength Heap@89 arg_a_3@0 temp1@3) 1)) (segDegree Heap@89 temp1@3 temp1@5 0)))))) (and (=> (= (ControlFlow 0 220) 217) anon1823_Then_correct) (=> (= (ControlFlow 0 220) 218) anon1823_Else_correct)))))
(let ((anon1822_Then_correct  (=> (and (and (sorted Heap@89 arg_a_3@0 temp1@3) (and (sorted Heap@89 temp1@3 temp1@5) (=> (and (< 0 (segLength Heap@89 arg_a_3@0 temp1@3)) (< 0 (segLength Heap@89 temp1@3 temp1@5))) (< (segDegree Heap@89 arg_a_3@0 temp1@3 (- (segLength Heap@89 arg_a_3@0 temp1@3) 1)) (segDegree Heap@89 temp1@3 temp1@5 0))))) (and (state ExhaleHeap@7 Mask@85) (sorted ExhaleHeap@7 arg_a_3@0 temp1@5))) (and (=> (= (ControlFlow 0 219) 217) anon1823_Then_correct) (=> (= (ControlFlow 0 219) 218) anon1823_Else_correct)))))
(let ((anon1821_Else_correct  (=> (and (= temp1@5 null) (= Mask@85 Mask@83)) (and (=> (= (ControlFlow 0 222) 219) anon1822_Then_correct) (=> (= (ControlFlow 0 222) 220) anon1822_Else_correct)))))
(let ((anon1821_Then_correct  (=> (and (not (= temp1@5 null)) (= Mask@84 (MapType1Store Mask@83 null (tree temp1@5) (real_2_U (+ (U_2_real (MapType1Select Mask@83 null (tree temp1@5))) FullPerm))))) (=> (and (and (and (state ExhaleHeap@7 Mask@84) (state ExhaleHeap@7 Mask@84)) (and (= (treeDegree ExhaleHeap@7 temp1@5) (treeDegree Heap@89 temp1@5)) (state ExhaleHeap@7 Mask@84))) (and (and (= (treeSize ExhaleHeap@7 temp1@5) (treeSize Heap@89 temp1@5)) (state ExhaleHeap@7 Mask@84)) (and (= (treeParent ExhaleHeap@7 temp1@5) (treeParent Heap@89 temp1@5)) (= Mask@85 Mask@84)))) (and (=> (= (ControlFlow 0 221) 219) anon1822_Then_correct) (=> (= (ControlFlow 0 221) 220) anon1822_Else_correct))))))
(let ((anon1111_correct  (=> (IdenticalOnKnownLocations Heap@89 ExhaleHeap@7 Mask@82) (=> (and (and (and (= Mask@83 (MapType1Store Mask@82 null (heapseg arg_a_3@0 temp1@5) (real_2_U (+ (U_2_real (MapType1Select Mask@82 null (heapseg arg_a_3@0 temp1@5))) FullPerm)))) (state ExhaleHeap@7 Mask@83)) (and (state ExhaleHeap@7 Mask@83) (= (segLength ExhaleHeap@7 arg_a_3@0 temp1@5) (+ (segLength Heap@89 arg_a_3@0 temp1@3) (segLength Heap@89 temp1@3 temp1@5))))) (and (and (state ExhaleHeap@7 Mask@83) (forall ((i_6 Int) ) (!  (=> (and (<= 0 i_6) (< i_6 (segLength Heap@89 arg_a_3@0 temp1@3))) (= (segDegree ExhaleHeap@7 arg_a_3@0 temp1@5 i_6) (segDegree Heap@89 arg_a_3@0 temp1@3 i_6)))
 :qid |stdinbpl.12576:34|
 :skolemid |203|
 :pattern ( (|segDegree#frame| (MapType0Select ExhaleHeap@7 null (heapseg arg_a_3@0 temp1@5)) arg_a_3@0 temp1@5 i_6))
 :pattern ( (|segDegree#frame| (MapType0Select Heap@89 null (heapseg arg_a_3@0 temp1@3)) arg_a_3@0 temp1@3 i_6))
))) (and (state ExhaleHeap@7 Mask@83) (forall ((i_7 Int) ) (!  (=> (and (<= (segLength Heap@89 arg_a_3@0 temp1@3) i_7) (< i_7 (segLength ExhaleHeap@7 arg_a_3@0 temp1@5))) (= (segDegree ExhaleHeap@7 arg_a_3@0 temp1@5 i_7) (segDegree Heap@89 temp1@3 temp1@5 (- i_7 (segLength Heap@89 arg_a_3@0 temp1@3)))))
 :qid |stdinbpl.12581:34|
 :skolemid |204|
 :pattern ( (|segDegree#frame| (MapType0Select ExhaleHeap@7 null (heapseg arg_a_3@0 temp1@5)) arg_a_3@0 temp1@5 i_7))
))))) (and (=> (= (ControlFlow 0 223) 221) anon1821_Then_correct) (=> (= (ControlFlow 0 223) 222) anon1821_Else_correct))))))
(let ((anon1820_Else_correct  (=> (and (not (and (not (= arg_a_3@0 temp1@3)) (not (= temp1@3 temp1@5)))) (= (ControlFlow 0 226) 223)) anon1111_correct)))
(let ((anon1820_Then_correct  (=> (and (not (= arg_a_3@0 temp1@3)) (not (= temp1@3 temp1@5))) (and (=> (= (ControlFlow 0 224) (- 0 225)) (= (segParent Heap@89 arg_a_3@0 temp1@3) (segParent Heap@89 temp1@3 temp1@5))) (=> (= (segParent Heap@89 arg_a_3@0 temp1@3) (segParent Heap@89 temp1@3 temp1@5)) (=> (= (ControlFlow 0 224) 223) anon1111_correct))))))
(let ((anon1108_correct  (=> (and (= Mask@81 (MapType1Store Mask@80 null (tree temp1@5) (real_2_U (- (U_2_real (MapType1Select Mask@80 null (tree temp1@5))) FullPerm)))) (= Mask@82 Mask@81)) (and (=> (= (ControlFlow 0 228) 224) anon1820_Then_correct) (=> (= (ControlFlow 0 228) 226) anon1820_Else_correct)))))
(let ((anon1819_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 231) 228)) anon1108_correct)))
(let ((anon1819_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 229) (- 0 230)) (<= FullPerm (U_2_real (MapType1Select Mask@80 null (tree temp1@5))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@80 null (tree temp1@5)))) (=> (= (ControlFlow 0 229) 228) anon1108_correct))))))
(let ((anon1818_Then_correct  (=> (not (= temp1@5 null)) (and (=> (= (ControlFlow 0 232) 229) anon1819_Then_correct) (=> (= (ControlFlow 0 232) 231) anon1819_Else_correct)))))
(let ((anon1818_Else_correct  (=> (and (= temp1@5 null) (= Mask@82 Mask@80)) (and (=> (= (ControlFlow 0 227) 224) anon1820_Then_correct) (=> (= (ControlFlow 0 227) 226) anon1820_Else_correct)))))
(let ((anon1105_correct  (=> (= Mask@80 (MapType1Store Mask@79 null (heapseg temp1@3 temp1@5) (real_2_U (- (U_2_real (MapType1Select Mask@79 null (heapseg temp1@3 temp1@5))) FullPerm)))) (and (=> (= (ControlFlow 0 233) 232) anon1818_Then_correct) (=> (= (ControlFlow 0 233) 227) anon1818_Else_correct)))))
(let ((anon1817_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 236) 233)) anon1105_correct)))
(let ((anon1817_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 234) (- 0 235)) (<= FullPerm (U_2_real (MapType1Select Mask@79 null (heapseg temp1@3 temp1@5))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@79 null (heapseg temp1@3 temp1@5)))) (=> (= (ControlFlow 0 234) 233) anon1105_correct))))))
(let ((anon1103_correct  (=> (= Mask@79 (MapType1Store Mask@78 null (heapseg arg_a_3@0 temp1@3) (real_2_U (- (U_2_real (MapType1Select Mask@78 null (heapseg arg_a_3@0 temp1@3))) FullPerm)))) (and (=> (= (ControlFlow 0 237) 234) anon1817_Then_correct) (=> (= (ControlFlow 0 237) 236) anon1817_Else_correct)))))
(let ((anon1816_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 240) 237)) anon1103_correct)))
(let ((anon1816_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 238) (- 0 239)) (<= FullPerm (U_2_real (MapType1Select Mask@78 null (heapseg arg_a_3@0 temp1@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@78 null (heapseg arg_a_3@0 temp1@3)))) (=> (= (ControlFlow 0 238) 237) anon1103_correct))))))
(let ((anon1101_correct  (=> (and (state Heap@89 Mask@78) (state Heap@89 Mask@78)) (and (=> (= (ControlFlow 0 241) (- 0 242)) (HasDirectPerm Mask@78 this@@66 Nodes)) (=> (HasDirectPerm Mask@78 this@@66 Nodes) (=> (= arg_a_3@0 (MapType0Select Heap@89 this@@66 Nodes)) (and (=> (= (ControlFlow 0 241) 238) anon1816_Then_correct) (=> (= (ControlFlow 0 241) 240) anon1816_Else_correct))))))))
(let ((anon1815_Else_correct  (=> (= (MapType0Select Heap@89 temp1@5 sibling) null) (=> (and (= Mask@78 Mask@77) (= (ControlFlow 0 245) 241)) anon1101_correct))))
(let ((anon1815_Then_correct  (=> (not (= (MapType0Select Heap@89 temp1@5 sibling) null)) (=> (and (and (state Heap@89 Mask@77) (= (treeParent Heap@89 temp1@5) (segParent Heap@89 (MapType0Select Heap@89 temp1@5 sibling) null))) (and (= Mask@78 Mask@77) (= (ControlFlow 0 244) 241))) anon1101_correct))))
(let ((anon1814_Then_correct  (=> (and (not (= temp1@5 null)) (= Mask@75 (MapType1Store Mask@74 null (tree temp1@5) (real_2_U (+ (U_2_real (MapType1Select Mask@74 null (tree temp1@5))) FullPerm))))) (=> (and (and (and (InsidePredicate (heapseg temp1@5 null) (MapType0Select Heap@89 null (heapseg temp1@5 null)) (tree temp1@5) (MapType0Select Heap@89 null (tree temp1@5))) (state Heap@89 Mask@75)) (and (not (= temp1@5 null)) (= Mask@76 (MapType1Store Mask@75 temp1@5 sibling (real_2_U (+ (U_2_real (MapType1Select Mask@75 temp1@5 sibling)) FullPerm)))))) (and (and (state Heap@89 Mask@76) (= Mask@77 (MapType1Store Mask@76 null (heapseg (MapType0Select Heap@89 temp1@5 sibling) null) (real_2_U (+ (U_2_real (MapType1Select Mask@76 null (heapseg (MapType0Select Heap@89 temp1@5 sibling) null))) FullPerm))))) (and (InsidePredicate (heapseg temp1@5 null) (MapType0Select Heap@89 null (heapseg temp1@5 null)) (heapseg (MapType0Select Heap@89 temp1@5 sibling) null) (MapType0Select Heap@89 null (heapseg (MapType0Select Heap@89 temp1@5 sibling) null))) (state Heap@89 Mask@77)))) (and (=> (= (ControlFlow 0 246) 244) anon1815_Then_correct) (=> (= (ControlFlow 0 246) 245) anon1815_Else_correct))))))
(let ((anon1814_Else_correct  (=> (= temp1@5 null) (=> (and (= Mask@78 Mask@74) (= (ControlFlow 0 243) 241)) anon1101_correct))))
(let ((anon1813_Else_correct  (=> (and (HasDirectPerm Mask@74 null (heapseg temp1@5 null)) (= Heap@89 Heap@87)) (and (=> (= (ControlFlow 0 248) 246) anon1814_Then_correct) (=> (= (ControlFlow 0 248) 243) anon1814_Else_correct)))))
(let ((anon1813_Then_correct  (=> (not (HasDirectPerm Mask@74 null (heapseg temp1@5 null))) (=> (and (= Heap@88 (MapType0Store Heap@87 null (heapseg temp1@5 null) newVersion@2)) (= Heap@89 Heap@88)) (and (=> (= (ControlFlow 0 247) 246) anon1814_Then_correct) (=> (= (ControlFlow 0 247) 243) anon1814_Else_correct))))))
(let ((anon1096_correct  (=> (= Mask@74 (MapType1Store Mask@73 null (heapseg temp1@5 null) (real_2_U (- (U_2_real (MapType1Select Mask@73 null (heapseg temp1@5 null))) FullPerm)))) (and (=> (= (ControlFlow 0 249) 247) anon1813_Then_correct) (=> (= (ControlFlow 0 249) 248) anon1813_Else_correct)))))
(let ((anon1812_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 252) 249)) anon1096_correct)))
(let ((anon1812_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 250) (- 0 251)) (<= FullPerm (U_2_real (MapType1Select Mask@73 null (heapseg temp1@5 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@73 null (heapseg temp1@5 null)))) (=> (= (ControlFlow 0 250) 249) anon1096_correct))))))
(let ((anon1094_correct  (=> (and (and (state Heap@87 Mask@73) (state Heap@87 Mask@73)) (and (|heapseg#trigger| Heap@87 (heapseg temp1@5 null)) (= (MapType0Select Heap@87 null (heapseg temp1@5 null)) (FrameFragment (ite (not (= temp1@5 null)) (CombineFrames (MapType0Select Heap@87 null (tree temp1@5)) (CombineFrames (FrameFragment (MapType0Select Heap@87 temp1@5 sibling)) (CombineFrames (MapType0Select Heap@87 null (heapseg (MapType0Select Heap@87 temp1@5 sibling) null)) (FrameFragment (ite (not (= (MapType0Select Heap@87 temp1@5 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 253) 250) anon1812_Then_correct) (=> (= (ControlFlow 0 253) 252) anon1812_Else_correct)))))
(let ((anon1811_Else_correct  (=> (= temp1@3 temp1@5) (=> (and (= Heap@87 Heap@83) (= (ControlFlow 0 255) 253)) anon1094_correct))))
(let ((anon1811_Then_correct  (=> (and (and (and (not (= temp1@3 temp1@5)) (forall ((o_99 T@U) (f_103 T@U) ) (! (let ((B@@45 (FieldTypeInv1 (type f_103))))
(let ((A@@46 (FieldTypeInv0 (type f_103))))
 (=> (and (and (= (type o_99) RefType) (= (type f_103) (FieldType A@@46 B@@45))) (or (U_2_bool (MapType1Select (MapType0Select Heap@83 null (|heapseg#sm| temp1@3 temp1@5)) o_99 f_103)) (U_2_bool (MapType1Select (MapType0Select Heap@83 null (|tree#sm| temp1@3)) o_99 f_103)))) (U_2_bool (MapType1Select newPMask@21 o_99 f_103)))))
 :qid |stdinbpl.12470:41|
 :skolemid |201|
 :pattern ( (MapType1Select newPMask@21 o_99 f_103))
))) (and (= Heap@84 (MapType0Store Heap@83 null (|heapseg#sm| temp1@3 temp1@5) newPMask@21)) (= Heap@85 (MapType0Store Heap@84 null (|heapseg#sm| temp1@3 temp1@5) (MapType1Store (MapType0Select Heap@84 null (|heapseg#sm| temp1@3 temp1@5)) temp1@3 sibling (bool_2_U true)))))) (and (and (forall ((o_100 T@U) (f_104 T@U) ) (! (let ((B@@46 (FieldTypeInv1 (type f_104))))
(let ((A@@47 (FieldTypeInv0 (type f_104))))
 (=> (and (and (= (type o_100) RefType) (= (type f_104) (FieldType A@@47 B@@46))) (or (U_2_bool (MapType1Select (MapType0Select Heap@85 null (|heapseg#sm| temp1@3 temp1@5)) o_100 f_104)) (U_2_bool (MapType1Select (MapType0Select Heap@85 null (|heapseg#sm| (MapType0Select Heap@85 temp1@3 sibling) temp1@5)) o_100 f_104)))) (U_2_bool (MapType1Select newPMask@22 o_100 f_104)))))
 :qid |stdinbpl.12477:41|
 :skolemid |202|
 :pattern ( (MapType1Select newPMask@22 o_100 f_104))
)) (= Heap@86 (MapType0Store Heap@85 null (|heapseg#sm| temp1@3 temp1@5) newPMask@22))) (and (= Heap@87 Heap@86) (= (ControlFlow 0 254) 253)))) anon1094_correct)))
(let ((anon1810_Else_correct  (=> (and (HasDirectPerm Mask@73 null (heapseg temp1@3 temp1@5)) (= Heap@83 Heap@80)) (and (=> (= (ControlFlow 0 257) 254) anon1811_Then_correct) (=> (= (ControlFlow 0 257) 255) anon1811_Else_correct)))))
(let ((anon1810_Then_correct  (=> (and (and (not (HasDirectPerm Mask@73 null (heapseg temp1@3 temp1@5))) (= Heap@81 (MapType0Store Heap@80 null (|heapseg#sm| temp1@3 temp1@5) ZeroPMask))) (and (= Heap@82 (MapType0Store Heap@81 null (heapseg temp1@3 temp1@5) freshVersion@4)) (= Heap@83 Heap@82))) (and (=> (= (ControlFlow 0 256) 254) anon1811_Then_correct) (=> (= (ControlFlow 0 256) 255) anon1811_Else_correct)))))
(let ((anon1090_correct  (=> (= Mask@73 (MapType1Store Mask@72 null (heapseg temp1@3 temp1@5) (real_2_U (+ (U_2_real (MapType1Select Mask@72 null (heapseg temp1@3 temp1@5))) FullPerm)))) (=> (and (and (state Heap@80 Mask@73) (state Heap@80 Mask@73)) (and (|heapseg#trigger| Heap@80 (heapseg temp1@3 temp1@5)) (= (MapType0Select Heap@80 null (heapseg temp1@3 temp1@5)) (FrameFragment (ite (not (= temp1@3 temp1@5)) (CombineFrames (MapType0Select Heap@80 null (tree temp1@3)) (CombineFrames (FrameFragment (MapType0Select Heap@80 temp1@3 sibling)) (CombineFrames (MapType0Select Heap@80 null (heapseg (MapType0Select Heap@80 temp1@3 sibling) temp1@5)) (FrameFragment (ite (not (= (MapType0Select Heap@80 temp1@3 sibling) temp1@5)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 258) 256) anon1810_Then_correct) (=> (= (ControlFlow 0 258) 257) anon1810_Else_correct))))))
(let ((anon1809_Else_correct  (=> (= (MapType0Select Heap@80 temp1@3 sibling) temp1@5) (=> (and (= Mask@72 Mask@71) (= (ControlFlow 0 262) 258)) anon1090_correct))))
(let ((anon1809_Then_correct  (=> (not (= (MapType0Select Heap@80 temp1@3 sibling) temp1@5)) (and (=> (= (ControlFlow 0 260) (- 0 261)) (= (treeParent Heap@80 temp1@3) (segParent Heap@80 (MapType0Select Heap@80 temp1@3 sibling) temp1@5))) (=> (= (treeParent Heap@80 temp1@3) (segParent Heap@80 (MapType0Select Heap@80 temp1@3 sibling) temp1@5)) (=> (and (= Mask@72 Mask@71) (= (ControlFlow 0 260) 258)) anon1090_correct))))))
(let ((anon1088_correct  (=> (and (= Mask@71 (MapType1Store Mask@70 null (heapseg (MapType0Select Heap@80 temp1@3 sibling) temp1@5) (real_2_U (- (U_2_real (MapType1Select Mask@70 null (heapseg (MapType0Select Heap@80 temp1@3 sibling) temp1@5))) FullPerm)))) (InsidePredicate (heapseg temp1@3 temp1@5) (MapType0Select Heap@80 null (heapseg temp1@3 temp1@5)) (heapseg (MapType0Select Heap@80 temp1@3 sibling) temp1@5) (MapType0Select Heap@80 null (heapseg (MapType0Select Heap@80 temp1@3 sibling) temp1@5)))) (and (=> (= (ControlFlow 0 263) 260) anon1809_Then_correct) (=> (= (ControlFlow 0 263) 262) anon1809_Else_correct)))))
(let ((anon1808_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 266) 263)) anon1088_correct)))
(let ((anon1808_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 264) (- 0 265)) (<= FullPerm (U_2_real (MapType1Select Mask@70 null (heapseg (MapType0Select Heap@80 temp1@3 sibling) temp1@5))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@70 null (heapseg (MapType0Select Heap@80 temp1@3 sibling) temp1@5)))) (=> (= (ControlFlow 0 264) 263) anon1088_correct))))))
(let ((anon1086_correct  (=> (= Mask@70 (MapType1Store Mask@69 temp1@3 sibling (real_2_U (- (U_2_real (MapType1Select Mask@69 temp1@3 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 267) 264) anon1808_Then_correct) (=> (= (ControlFlow 0 267) 266) anon1808_Else_correct)))))
(let ((anon1807_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 270) 267)) anon1086_correct)))
(let ((anon1807_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 268) (- 0 269)) (<= FullPerm (U_2_real (MapType1Select Mask@69 temp1@3 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@69 temp1@3 sibling))) (=> (= (ControlFlow 0 268) 267) anon1086_correct))))))
(let ((anon1084_correct  (=> (and (= Mask@69 (MapType1Store Mask@68 null (tree temp1@3) (real_2_U (- (U_2_real (MapType1Select Mask@68 null (tree temp1@3))) FullPerm)))) (InsidePredicate (heapseg temp1@3 temp1@5) (MapType0Select Heap@80 null (heapseg temp1@3 temp1@5)) (tree temp1@3) (MapType0Select Heap@80 null (tree temp1@3)))) (and (=> (= (ControlFlow 0 271) 268) anon1807_Then_correct) (=> (= (ControlFlow 0 271) 270) anon1807_Else_correct)))))
(let ((anon1806_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 274) 271)) anon1084_correct)))
(let ((anon1806_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 272) (- 0 273)) (<= FullPerm (U_2_real (MapType1Select Mask@68 null (tree temp1@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@68 null (tree temp1@3)))) (=> (= (ControlFlow 0 272) 271) anon1084_correct))))))
(let ((anon1805_Then_correct  (=> (not (= temp1@3 temp1@5)) (and (=> (= (ControlFlow 0 275) 272) anon1806_Then_correct) (=> (= (ControlFlow 0 275) 274) anon1806_Else_correct)))))
(let ((anon1805_Else_correct  (=> (= temp1@3 temp1@5) (=> (and (= Mask@72 Mask@68) (= (ControlFlow 0 259) 258)) anon1090_correct))))
(let ((anon1081_correct  (=> (and (state Heap@80 Mask@68) (state Heap@80 Mask@68)) (and (=> (= (ControlFlow 0 276) 275) anon1805_Then_correct) (=> (= (ControlFlow 0 276) 259) anon1805_Else_correct)))))
(let ((anon1804_Else_correct  (=> (= temp1@5 temp1@5) (=> (and (= Heap@80 Heap@76) (= (ControlFlow 0 278) 276)) anon1081_correct))))
(let ((anon1804_Then_correct  (=> (and (and (and (not (= temp1@5 temp1@5)) (forall ((o_97 T@U) (f_101 T@U) ) (! (let ((B@@47 (FieldTypeInv1 (type f_101))))
(let ((A@@48 (FieldTypeInv0 (type f_101))))
 (=> (and (and (= (type o_97) RefType) (= (type f_101) (FieldType A@@48 B@@47))) (or (U_2_bool (MapType1Select (MapType0Select Heap@76 null (|heapseg#sm| temp1@5 temp1@5)) o_97 f_101)) (U_2_bool (MapType1Select (MapType0Select Heap@76 null (|tree#sm| temp1@5)) o_97 f_101)))) (U_2_bool (MapType1Select newPMask@19 o_97 f_101)))))
 :qid |stdinbpl.12408:41|
 :skolemid |199|
 :pattern ( (MapType1Select newPMask@19 o_97 f_101))
))) (and (= Heap@77 (MapType0Store Heap@76 null (|heapseg#sm| temp1@5 temp1@5) newPMask@19)) (= Heap@78 (MapType0Store Heap@77 null (|heapseg#sm| temp1@5 temp1@5) (MapType1Store (MapType0Select Heap@77 null (|heapseg#sm| temp1@5 temp1@5)) temp1@5 sibling (bool_2_U true)))))) (and (and (forall ((o_98 T@U) (f_102 T@U) ) (! (let ((B@@48 (FieldTypeInv1 (type f_102))))
(let ((A@@49 (FieldTypeInv0 (type f_102))))
 (=> (and (and (= (type o_98) RefType) (= (type f_102) (FieldType A@@49 B@@48))) (or (U_2_bool (MapType1Select (MapType0Select Heap@78 null (|heapseg#sm| temp1@5 temp1@5)) o_98 f_102)) (U_2_bool (MapType1Select (MapType0Select Heap@78 null (|heapseg#sm| (MapType0Select Heap@78 temp1@5 sibling) temp1@5)) o_98 f_102)))) (U_2_bool (MapType1Select newPMask@20 o_98 f_102)))))
 :qid |stdinbpl.12415:41|
 :skolemid |200|
 :pattern ( (MapType1Select newPMask@20 o_98 f_102))
)) (= Heap@79 (MapType0Store Heap@78 null (|heapseg#sm| temp1@5 temp1@5) newPMask@20))) (and (= Heap@80 Heap@79) (= (ControlFlow 0 277) 276)))) anon1081_correct)))
(let ((anon1803_Else_correct  (=> (and (HasDirectPerm Mask@68 null (heapseg temp1@5 temp1@5)) (= Heap@76 Heap@73)) (and (=> (= (ControlFlow 0 280) 277) anon1804_Then_correct) (=> (= (ControlFlow 0 280) 278) anon1804_Else_correct)))))
(let ((anon1803_Then_correct  (=> (and (and (not (HasDirectPerm Mask@68 null (heapseg temp1@5 temp1@5))) (= Heap@74 (MapType0Store Heap@73 null (|heapseg#sm| temp1@5 temp1@5) ZeroPMask))) (and (= Heap@75 (MapType0Store Heap@74 null (heapseg temp1@5 temp1@5) freshVersion@3)) (= Heap@76 Heap@75))) (and (=> (= (ControlFlow 0 279) 277) anon1804_Then_correct) (=> (= (ControlFlow 0 279) 278) anon1804_Else_correct)))))
(let ((anon1077_correct  (=> (= Mask@68 (MapType1Store Mask@67 null (heapseg temp1@5 temp1@5) (real_2_U (+ (U_2_real (MapType1Select Mask@67 null (heapseg temp1@5 temp1@5))) FullPerm)))) (=> (and (and (state Heap@73 Mask@68) (state Heap@73 Mask@68)) (and (|heapseg#trigger| Heap@73 (heapseg temp1@5 temp1@5)) (= (MapType0Select Heap@73 null (heapseg temp1@5 temp1@5)) (FrameFragment (ite (not (= temp1@5 temp1@5)) (CombineFrames (MapType0Select Heap@73 null (tree temp1@5)) (CombineFrames (FrameFragment (MapType0Select Heap@73 temp1@5 sibling)) (CombineFrames (MapType0Select Heap@73 null (heapseg (MapType0Select Heap@73 temp1@5 sibling) temp1@5)) (FrameFragment (ite (not (= (MapType0Select Heap@73 temp1@5 sibling) temp1@5)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 281) 279) anon1803_Then_correct) (=> (= (ControlFlow 0 281) 280) anon1803_Else_correct))))))
(let ((anon1802_Else_correct  (=> (= (MapType0Select Heap@73 temp1@5 sibling) temp1@5) (=> (and (= Mask@67 Mask@66) (= (ControlFlow 0 285) 281)) anon1077_correct))))
(let ((anon1802_Then_correct  (=> (not (= (MapType0Select Heap@73 temp1@5 sibling) temp1@5)) (and (=> (= (ControlFlow 0 283) (- 0 284)) (= (treeParent Heap@73 temp1@5) (segParent Heap@73 (MapType0Select Heap@73 temp1@5 sibling) temp1@5))) (=> (= (treeParent Heap@73 temp1@5) (segParent Heap@73 (MapType0Select Heap@73 temp1@5 sibling) temp1@5)) (=> (and (= Mask@67 Mask@66) (= (ControlFlow 0 283) 281)) anon1077_correct))))))
(let ((anon1075_correct  (=> (and (= Mask@66 (MapType1Store Mask@65 null (heapseg (MapType0Select Heap@73 temp1@5 sibling) temp1@5) (real_2_U (- (U_2_real (MapType1Select Mask@65 null (heapseg (MapType0Select Heap@73 temp1@5 sibling) temp1@5))) FullPerm)))) (InsidePredicate (heapseg temp1@5 temp1@5) (MapType0Select Heap@73 null (heapseg temp1@5 temp1@5)) (heapseg (MapType0Select Heap@73 temp1@5 sibling) temp1@5) (MapType0Select Heap@73 null (heapseg (MapType0Select Heap@73 temp1@5 sibling) temp1@5)))) (and (=> (= (ControlFlow 0 286) 283) anon1802_Then_correct) (=> (= (ControlFlow 0 286) 285) anon1802_Else_correct)))))
(let ((anon1801_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 289) 286)) anon1075_correct)))
(let ((anon1801_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 287) (- 0 288)) (<= FullPerm (U_2_real (MapType1Select Mask@65 null (heapseg (MapType0Select Heap@73 temp1@5 sibling) temp1@5))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@65 null (heapseg (MapType0Select Heap@73 temp1@5 sibling) temp1@5)))) (=> (= (ControlFlow 0 287) 286) anon1075_correct))))))
(let ((anon1073_correct  (=> (= Mask@65 (MapType1Store Mask@64 temp1@5 sibling (real_2_U (- (U_2_real (MapType1Select Mask@64 temp1@5 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 290) 287) anon1801_Then_correct) (=> (= (ControlFlow 0 290) 289) anon1801_Else_correct)))))
(let ((anon1800_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 293) 290)) anon1073_correct)))
(let ((anon1800_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 291) (- 0 292)) (<= FullPerm (U_2_real (MapType1Select Mask@64 temp1@5 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@64 temp1@5 sibling))) (=> (= (ControlFlow 0 291) 290) anon1073_correct))))))
(let ((anon1071_correct  (=> (and (= Mask@64 (MapType1Store Mask@63 null (tree temp1@5) (real_2_U (- (U_2_real (MapType1Select Mask@63 null (tree temp1@5))) FullPerm)))) (InsidePredicate (heapseg temp1@5 temp1@5) (MapType0Select Heap@73 null (heapseg temp1@5 temp1@5)) (tree temp1@5) (MapType0Select Heap@73 null (tree temp1@5)))) (and (=> (= (ControlFlow 0 294) 291) anon1800_Then_correct) (=> (= (ControlFlow 0 294) 293) anon1800_Else_correct)))))
(let ((anon1799_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 297) 294)) anon1071_correct)))
(let ((anon1799_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 295) (- 0 296)) (<= FullPerm (U_2_real (MapType1Select Mask@63 null (tree temp1@5))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@63 null (tree temp1@5)))) (=> (= (ControlFlow 0 295) 294) anon1071_correct))))))
(let ((anon1798_Then_correct  (=> (not (= temp1@5 temp1@5)) (and (=> (= (ControlFlow 0 298) 295) anon1799_Then_correct) (=> (= (ControlFlow 0 298) 297) anon1799_Else_correct)))))
(let ((anon1798_Else_correct  (=> (= temp1@5 temp1@5) (=> (and (= Mask@67 Mask@63) (= (ControlFlow 0 282) 281)) anon1077_correct))))
(let ((anon1068_correct  (=> (and (and (and (and (state Heap@63 Mask@63) (= Heap@64 (MapType0Store Heap@63 null (|tree#sm| temp1@3) (MapType1Store (MapType0Select Heap@63 null (|tree#sm| temp1@3)) temp1@3 key (bool_2_U true))))) (and (= Heap@65 (MapType0Store Heap@64 null (|tree#sm| temp1@3) (MapType1Store (MapType0Select Heap@64 null (|tree#sm| temp1@3)) temp1@3 degree (bool_2_U true)))) (= Heap@66 (MapType0Store Heap@65 null (|tree#sm| temp1@3) (MapType1Store (MapType0Select Heap@65 null (|tree#sm| temp1@3)) temp1@3 child (bool_2_U true)))))) (and (and (= Heap@67 (MapType0Store Heap@66 null (|tree#sm| temp1@3) (MapType1Store (MapType0Select Heap@66 null (|tree#sm| temp1@3)) temp1@3 parent (bool_2_U true)))) (forall ((o_95 T@U) (f_99 T@U) ) (! (let ((B@@49 (FieldTypeInv1 (type f_99))))
(let ((A@@50 (FieldTypeInv0 (type f_99))))
 (=> (and (and (= (type o_95) RefType) (= (type f_99) (FieldType A@@50 B@@49))) (or (U_2_bool (MapType1Select (MapType0Select Heap@67 null (|tree#sm| temp1@3)) o_95 f_99)) (U_2_bool (MapType1Select (MapType0Select Heap@67 null (|heapseg#sm| (MapType0Select Heap@67 temp1@3 child) null)) o_95 f_99)))) (U_2_bool (MapType1Select newPMask@17 o_95 f_99)))))
 :qid |stdinbpl.12343:41|
 :skolemid |197|
 :pattern ( (MapType1Select newPMask@17 o_95 f_99))
))) (and (= Heap@68 (MapType0Store Heap@67 null (|tree#sm| temp1@3) newPMask@17)) (state Heap@68 Mask@63)))) (and (and (and (= Heap@69 (MapType0Store Heap@68 null (|tree#sm| temp1@5) (MapType1Store (MapType0Select Heap@68 null (|tree#sm| temp1@5)) temp1@5 key (bool_2_U true)))) (= Heap@70 (MapType0Store Heap@69 null (|tree#sm| temp1@5) (MapType1Store (MapType0Select Heap@69 null (|tree#sm| temp1@5)) temp1@5 degree (bool_2_U true))))) (and (= Heap@71 (MapType0Store Heap@70 null (|tree#sm| temp1@5) (MapType1Store (MapType0Select Heap@70 null (|tree#sm| temp1@5)) temp1@5 child (bool_2_U true)))) (= Heap@72 (MapType0Store Heap@71 null (|tree#sm| temp1@5) (MapType1Store (MapType0Select Heap@71 null (|tree#sm| temp1@5)) temp1@5 parent (bool_2_U true)))))) (and (and (forall ((o_96 T@U) (f_100 T@U) ) (! (let ((B@@50 (FieldTypeInv1 (type f_100))))
(let ((A@@51 (FieldTypeInv0 (type f_100))))
 (=> (and (and (= (type o_96) RefType) (= (type f_100) (FieldType A@@51 B@@50))) (or (U_2_bool (MapType1Select (MapType0Select Heap@72 null (|tree#sm| temp1@5)) o_96 f_100)) (U_2_bool (MapType1Select (MapType0Select Heap@72 null (|heapseg#sm| (MapType0Select Heap@72 temp1@5 child) null)) o_96 f_100)))) (U_2_bool (MapType1Select newPMask@18 o_96 f_100)))))
 :qid |stdinbpl.12354:41|
 :skolemid |198|
 :pattern ( (MapType1Select newPMask@18 o_96 f_100))
)) (= Heap@73 (MapType0Store Heap@72 null (|tree#sm| temp1@5) newPMask@18))) (and (state Heap@73 Mask@63) (state Heap@73 Mask@63))))) (and (=> (= (ControlFlow 0 299) 298) anon1798_Then_correct) (=> (= (ControlFlow 0 299) 282) anon1798_Else_correct)))))
(let ((anon1797_Else_correct  (=> (= temp1@5 null) (=> (and (= Heap@63 Heap@59) (= (ControlFlow 0 301) 299)) anon1068_correct))))
(let ((anon1797_Then_correct  (=> (and (and (and (not (= temp1@5 null)) (forall ((o_93 T@U) (f_97 T@U) ) (! (let ((B@@51 (FieldTypeInv1 (type f_97))))
(let ((A@@52 (FieldTypeInv0 (type f_97))))
 (=> (and (and (= (type o_93) RefType) (= (type f_97) (FieldType A@@52 B@@51))) (or (U_2_bool (MapType1Select (MapType0Select Heap@59 null (|heapseg#sm| temp1@5 null)) o_93 f_97)) (U_2_bool (MapType1Select (MapType0Select Heap@59 null (|tree#sm| temp1@5)) o_93 f_97)))) (U_2_bool (MapType1Select newPMask@15 o_93 f_97)))))
 :qid |stdinbpl.12324:43|
 :skolemid |195|
 :pattern ( (MapType1Select newPMask@15 o_93 f_97))
))) (and (= Heap@60 (MapType0Store Heap@59 null (|heapseg#sm| temp1@5 null) newPMask@15)) (= Heap@61 (MapType0Store Heap@60 null (|heapseg#sm| temp1@5 null) (MapType1Store (MapType0Select Heap@60 null (|heapseg#sm| temp1@5 null)) temp1@5 sibling (bool_2_U true)))))) (and (and (forall ((o_94 T@U) (f_98 T@U) ) (! (let ((B@@52 (FieldTypeInv1 (type f_98))))
(let ((A@@53 (FieldTypeInv0 (type f_98))))
 (=> (and (and (= (type o_94) RefType) (= (type f_98) (FieldType A@@53 B@@52))) (or (U_2_bool (MapType1Select (MapType0Select Heap@61 null (|heapseg#sm| temp1@5 null)) o_94 f_98)) (U_2_bool (MapType1Select (MapType0Select Heap@61 null (|heapseg#sm| (MapType0Select Heap@61 temp1@5 sibling) null)) o_94 f_98)))) (U_2_bool (MapType1Select newPMask@16 o_94 f_98)))))
 :qid |stdinbpl.12331:43|
 :skolemid |196|
 :pattern ( (MapType1Select newPMask@16 o_94 f_98))
)) (= Heap@62 (MapType0Store Heap@61 null (|heapseg#sm| temp1@5 null) newPMask@16))) (and (= Heap@63 Heap@62) (= (ControlFlow 0 300) 299)))) anon1068_correct)))
(let ((anon1066_correct  (=> (state Heap@49 Mask@63) (=> (and (= Heap@50 (MapType0Store Heap@49 null (|tree#sm| temp1@3) (MapType1Store (MapType0Select Heap@49 null (|tree#sm| temp1@3)) temp1@3 key (bool_2_U true)))) (= Heap@51 (MapType0Store Heap@50 null (|tree#sm| temp1@3) (MapType1Store (MapType0Select Heap@50 null (|tree#sm| temp1@3)) temp1@3 degree (bool_2_U true))))) (=> (and (and (= Heap@52 (MapType0Store Heap@51 null (|tree#sm| temp1@3) (MapType1Store (MapType0Select Heap@51 null (|tree#sm| temp1@3)) temp1@3 child (bool_2_U true)))) (= Heap@53 (MapType0Store Heap@52 null (|tree#sm| temp1@3) (MapType1Store (MapType0Select Heap@52 null (|tree#sm| temp1@3)) temp1@3 parent (bool_2_U true))))) (and (forall ((o_91 T@U) (f_95 T@U) ) (! (let ((B@@53 (FieldTypeInv1 (type f_95))))
(let ((A@@54 (FieldTypeInv0 (type f_95))))
 (=> (and (and (= (type o_91) RefType) (= (type f_95) (FieldType A@@54 B@@53))) (or (U_2_bool (MapType1Select (MapType0Select Heap@53 null (|tree#sm| temp1@3)) o_91 f_95)) (U_2_bool (MapType1Select (MapType0Select Heap@53 null (|heapseg#sm| (MapType0Select Heap@53 temp1@3 child) null)) o_91 f_95)))) (U_2_bool (MapType1Select newPMask@13 o_91 f_95)))))
 :qid |stdinbpl.12301:43|
 :skolemid |193|
 :pattern ( (MapType1Select newPMask@13 o_91 f_95))
)) (= Heap@54 (MapType0Store Heap@53 null (|tree#sm| temp1@3) newPMask@13)))) (=> (and (and (and (state Heap@54 Mask@63) (= Heap@55 (MapType0Store Heap@54 null (|tree#sm| temp1@5) (MapType1Store (MapType0Select Heap@54 null (|tree#sm| temp1@5)) temp1@5 key (bool_2_U true))))) (and (= Heap@56 (MapType0Store Heap@55 null (|tree#sm| temp1@5) (MapType1Store (MapType0Select Heap@55 null (|tree#sm| temp1@5)) temp1@5 degree (bool_2_U true)))) (= Heap@57 (MapType0Store Heap@56 null (|tree#sm| temp1@5) (MapType1Store (MapType0Select Heap@56 null (|tree#sm| temp1@5)) temp1@5 child (bool_2_U true)))))) (and (and (= Heap@58 (MapType0Store Heap@57 null (|tree#sm| temp1@5) (MapType1Store (MapType0Select Heap@57 null (|tree#sm| temp1@5)) temp1@5 parent (bool_2_U true)))) (forall ((o_92 T@U) (f_96 T@U) ) (! (let ((B@@54 (FieldTypeInv1 (type f_96))))
(let ((A@@55 (FieldTypeInv0 (type f_96))))
 (=> (and (and (= (type o_92) RefType) (= (type f_96) (FieldType A@@55 B@@54))) (or (U_2_bool (MapType1Select (MapType0Select Heap@58 null (|tree#sm| temp1@5)) o_92 f_96)) (U_2_bool (MapType1Select (MapType0Select Heap@58 null (|heapseg#sm| (MapType0Select Heap@58 temp1@5 child) null)) o_92 f_96)))) (U_2_bool (MapType1Select newPMask@14 o_92 f_96)))))
 :qid |stdinbpl.12312:43|
 :skolemid |194|
 :pattern ( (MapType1Select newPMask@14 o_92 f_96))
))) (and (= Heap@59 (MapType0Store Heap@58 null (|tree#sm| temp1@5) newPMask@14)) (state Heap@59 Mask@63)))) (and (=> (= (ControlFlow 0 302) (- 0 303)) (not (= temp1@3 temp1@5))) (=> (not (= temp1@3 temp1@5)) (and (=> (= (ControlFlow 0 302) 300) anon1797_Then_correct) (=> (= (ControlFlow 0 302) 301) anon1797_Else_correct))))))))))
(let ((anon1796_Else_correct  (=> (= temp1@5 null) (=> (and (= Heap@49 Heap@45) (= (ControlFlow 0 305) 302)) anon1066_correct))))
(let ((anon1796_Then_correct  (=> (and (and (and (not (= temp1@5 null)) (forall ((o_89 T@U) (f_93 T@U) ) (! (let ((B@@55 (FieldTypeInv1 (type f_93))))
(let ((A@@56 (FieldTypeInv0 (type f_93))))
 (=> (and (and (= (type o_89) RefType) (= (type f_93) (FieldType A@@56 B@@55))) (or (U_2_bool (MapType1Select (MapType0Select Heap@45 null (|heapseg#sm| temp1@5 null)) o_89 f_93)) (U_2_bool (MapType1Select (MapType0Select Heap@45 null (|tree#sm| temp1@5)) o_89 f_93)))) (U_2_bool (MapType1Select newPMask@11 o_89 f_93)))))
 :qid |stdinbpl.12282:45|
 :skolemid |191|
 :pattern ( (MapType1Select newPMask@11 o_89 f_93))
))) (and (= Heap@46 (MapType0Store Heap@45 null (|heapseg#sm| temp1@5 null) newPMask@11)) (= Heap@47 (MapType0Store Heap@46 null (|heapseg#sm| temp1@5 null) (MapType1Store (MapType0Select Heap@46 null (|heapseg#sm| temp1@5 null)) temp1@5 sibling (bool_2_U true)))))) (and (and (forall ((o_90 T@U) (f_94 T@U) ) (! (let ((B@@56 (FieldTypeInv1 (type f_94))))
(let ((A@@57 (FieldTypeInv0 (type f_94))))
 (=> (and (and (= (type o_90) RefType) (= (type f_94) (FieldType A@@57 B@@56))) (or (U_2_bool (MapType1Select (MapType0Select Heap@47 null (|heapseg#sm| temp1@5 null)) o_90 f_94)) (U_2_bool (MapType1Select (MapType0Select Heap@47 null (|heapseg#sm| (MapType0Select Heap@47 temp1@5 sibling) null)) o_90 f_94)))) (U_2_bool (MapType1Select newPMask@12 o_90 f_94)))))
 :qid |stdinbpl.12289:45|
 :skolemid |192|
 :pattern ( (MapType1Select newPMask@12 o_90 f_94))
)) (= Heap@48 (MapType0Store Heap@47 null (|heapseg#sm| temp1@5 null) newPMask@12))) (and (= Heap@49 Heap@48) (= (ControlFlow 0 304) 302)))) anon1066_correct)))
(let ((anon1064_correct  (=> (and (state Heap@30 Unfolding2Mask@5) (= Heap@31 (MapType0Store Heap@30 null (|tree#sm| temp1@5) (MapType1Store (MapType0Select Heap@30 null (|tree#sm| temp1@5)) temp1@5 key (bool_2_U true))))) (=> (and (and (= Heap@32 (MapType0Store Heap@31 null (|tree#sm| temp1@5) (MapType1Store (MapType0Select Heap@31 null (|tree#sm| temp1@5)) temp1@5 degree (bool_2_U true)))) (= Heap@33 (MapType0Store Heap@32 null (|tree#sm| temp1@5) (MapType1Store (MapType0Select Heap@32 null (|tree#sm| temp1@5)) temp1@5 child (bool_2_U true))))) (and (= Heap@34 (MapType0Store Heap@33 null (|tree#sm| temp1@5) (MapType1Store (MapType0Select Heap@33 null (|tree#sm| temp1@5)) temp1@5 parent (bool_2_U true)))) (forall ((o_86 T@U) (f_90 T@U) ) (! (let ((B@@57 (FieldTypeInv1 (type f_90))))
(let ((A@@58 (FieldTypeInv0 (type f_90))))
 (=> (and (and (= (type o_86) RefType) (= (type f_90) (FieldType A@@58 B@@57))) (or (U_2_bool (MapType1Select (MapType0Select Heap@34 null (|tree#sm| temp1@5)) o_86 f_90)) (U_2_bool (MapType1Select (MapType0Select Heap@34 null (|heapseg#sm| (MapType0Select Heap@34 temp1@5 child) null)) o_86 f_90)))) (U_2_bool (MapType1Select newPMask@8 o_86 f_90)))))
 :qid |stdinbpl.12248:43|
 :skolemid |188|
 :pattern ( (MapType1Select newPMask@8 o_86 f_90))
)))) (=> (and (and (and (and (= Heap@35 (MapType0Store Heap@34 null (|tree#sm| temp1@5) newPMask@8)) (state Heap@35 Mask@63)) (and (= Heap@36 (MapType0Store Heap@35 null (|tree#sm| temp1@3) (MapType1Store (MapType0Select Heap@35 null (|tree#sm| temp1@3)) temp1@3 key (bool_2_U true)))) (= Heap@37 (MapType0Store Heap@36 null (|tree#sm| temp1@3) (MapType1Store (MapType0Select Heap@36 null (|tree#sm| temp1@3)) temp1@3 degree (bool_2_U true)))))) (and (and (= Heap@38 (MapType0Store Heap@37 null (|tree#sm| temp1@3) (MapType1Store (MapType0Select Heap@37 null (|tree#sm| temp1@3)) temp1@3 child (bool_2_U true)))) (= Heap@39 (MapType0Store Heap@38 null (|tree#sm| temp1@3) (MapType1Store (MapType0Select Heap@38 null (|tree#sm| temp1@3)) temp1@3 parent (bool_2_U true))))) (and (forall ((o_87 T@U) (f_91 T@U) ) (! (let ((B@@58 (FieldTypeInv1 (type f_91))))
(let ((A@@59 (FieldTypeInv0 (type f_91))))
 (=> (and (and (= (type o_87) RefType) (= (type f_91) (FieldType A@@59 B@@58))) (or (U_2_bool (MapType1Select (MapType0Select Heap@39 null (|tree#sm| temp1@3)) o_87 f_91)) (U_2_bool (MapType1Select (MapType0Select Heap@39 null (|heapseg#sm| (MapType0Select Heap@39 temp1@3 child) null)) o_87 f_91)))) (U_2_bool (MapType1Select newPMask@9 o_87 f_91)))))
 :qid |stdinbpl.12261:43|
 :skolemid |189|
 :pattern ( (MapType1Select newPMask@9 o_87 f_91))
)) (= Heap@40 (MapType0Store Heap@39 null (|tree#sm| temp1@3) newPMask@9))))) (and (and (and (state Heap@40 Mask@63) (= Heap@41 (MapType0Store Heap@40 null (|tree#sm| temp1@5) (MapType1Store (MapType0Select Heap@40 null (|tree#sm| temp1@5)) temp1@5 key (bool_2_U true))))) (and (= Heap@42 (MapType0Store Heap@41 null (|tree#sm| temp1@5) (MapType1Store (MapType0Select Heap@41 null (|tree#sm| temp1@5)) temp1@5 degree (bool_2_U true)))) (= Heap@43 (MapType0Store Heap@42 null (|tree#sm| temp1@5) (MapType1Store (MapType0Select Heap@42 null (|tree#sm| temp1@5)) temp1@5 child (bool_2_U true)))))) (and (and (= Heap@44 (MapType0Store Heap@43 null (|tree#sm| temp1@5) (MapType1Store (MapType0Select Heap@43 null (|tree#sm| temp1@5)) temp1@5 parent (bool_2_U true)))) (forall ((o_88 T@U) (f_92 T@U) ) (! (let ((B@@59 (FieldTypeInv1 (type f_92))))
(let ((A@@60 (FieldTypeInv0 (type f_92))))
 (=> (and (and (= (type o_88) RefType) (= (type f_92) (FieldType A@@60 B@@59))) (or (U_2_bool (MapType1Select (MapType0Select Heap@44 null (|tree#sm| temp1@5)) o_88 f_92)) (U_2_bool (MapType1Select (MapType0Select Heap@44 null (|heapseg#sm| (MapType0Select Heap@44 temp1@5 child) null)) o_88 f_92)))) (U_2_bool (MapType1Select newPMask@10 o_88 f_92)))))
 :qid |stdinbpl.12272:43|
 :skolemid |190|
 :pattern ( (MapType1Select newPMask@10 o_88 f_92))
))) (and (= Heap@45 (MapType0Store Heap@44 null (|tree#sm| temp1@5) newPMask@10)) (state Heap@45 Mask@63))))) (and (=> (= (ControlFlow 0 306) 304) anon1796_Then_correct) (=> (= (ControlFlow 0 306) 305) anon1796_Else_correct)))))))
(let ((anon1795_Else_correct  (=> (and (= (MapType0Select Heap@30 temp1@5 child) null) (= (ControlFlow 0 308) 306)) anon1064_correct)))
(let ((anon1795_Then_correct  (=> (and (and (not (= (MapType0Select Heap@30 temp1@5 child) null)) (state Heap@30 Unfolding2Mask@5)) (and (= (segParent Heap@30 (MapType0Select Heap@30 temp1@5 child) null) temp1@5) (= (ControlFlow 0 307) 306))) anon1064_correct)))
(let ((anon1062_correct  (=> (and (state Heap@30 Unfolding2Mask@5) (validChildren Heap@30 (MapType0Select Heap@30 temp1@5 child) null)) (and (=> (= (ControlFlow 0 309) 307) anon1795_Then_correct) (=> (= (ControlFlow 0 309) 308) anon1795_Else_correct)))))
(let ((anon1794_Else_correct  (=> (and (<= (U_2_int (MapType0Select Heap@30 temp1@5 degree)) 0) (= (ControlFlow 0 311) 309)) anon1062_correct)))
(let ((anon1794_Then_correct  (=> (and (and (< 0 (U_2_int (MapType0Select Heap@30 temp1@5 degree))) (state Heap@30 Unfolding2Mask@5)) (and (= (segDegree Heap@30 (MapType0Select Heap@30 temp1@5 child) null 0) (- (U_2_int (MapType0Select Heap@30 temp1@5 degree)) 1)) (= (ControlFlow 0 310) 309))) anon1062_correct)))
(let ((anon1060_correct  (=> (= Unfolding2Mask@0 (MapType1Store Unfolding1Mask@5 null (tree temp1@5) (real_2_U (- (U_2_real (MapType1Select Unfolding1Mask@5 null (tree temp1@5))) FullPerm)))) (=> (and (not (= temp1@5 null)) (= Unfolding2Mask@1 (MapType1Store Unfolding2Mask@0 temp1@5 key (real_2_U (+ (U_2_real (MapType1Select Unfolding2Mask@0 temp1@5 key)) FullPerm))))) (=> (and (and (and (and (state Heap@30 Unfolding2Mask@1) (not (= temp1@5 null))) (and (= Unfolding2Mask@2 (MapType1Store Unfolding2Mask@1 temp1@5 degree (real_2_U (+ (U_2_real (MapType1Select Unfolding2Mask@1 temp1@5 degree)) FullPerm)))) (state Heap@30 Unfolding2Mask@2))) (and (and (not (= temp1@5 null)) (= Unfolding2Mask@3 (MapType1Store Unfolding2Mask@2 temp1@5 child (real_2_U (+ (U_2_real (MapType1Select Unfolding2Mask@2 temp1@5 child)) FullPerm))))) (and (state Heap@30 Unfolding2Mask@3) (not (= temp1@5 null))))) (and (and (and (= Unfolding2Mask@4 (MapType1Store Unfolding2Mask@3 temp1@5 parent (real_2_U (+ (U_2_real (MapType1Select Unfolding2Mask@3 temp1@5 parent)) FullPerm)))) (state Heap@30 Unfolding2Mask@4)) (and (<= 0 (U_2_int (MapType0Select Heap@30 temp1@5 degree))) (= Unfolding2Mask@5 (MapType1Store Unfolding2Mask@4 null (heapseg (MapType0Select Heap@30 temp1@5 child) null) (real_2_U (+ (U_2_real (MapType1Select Unfolding2Mask@4 null (heapseg (MapType0Select Heap@30 temp1@5 child) null))) FullPerm)))))) (and (and (InsidePredicate (tree temp1@5) (MapType0Select Heap@30 null (tree temp1@5)) (heapseg (MapType0Select Heap@30 temp1@5 child) null) (MapType0Select Heap@30 null (heapseg (MapType0Select Heap@30 temp1@5 child) null))) (state Heap@30 Unfolding2Mask@5)) (and (state Heap@30 Unfolding2Mask@5) (= (U_2_int (MapType0Select Heap@30 temp1@5 degree)) (segLength Heap@30 (MapType0Select Heap@30 temp1@5 child) null)))))) (and (=> (= (ControlFlow 0 312) 310) anon1794_Then_correct) (=> (= (ControlFlow 0 312) 311) anon1794_Else_correct)))))))
(let ((anon1793_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 315) 312)) anon1060_correct)))
(let ((anon1793_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 313) (- 0 314)) (<= FullPerm (U_2_real (MapType1Select Unfolding1Mask@5 null (tree temp1@5))))) (=> (<= FullPerm (U_2_real (MapType1Select Unfolding1Mask@5 null (tree temp1@5)))) (=> (= (ControlFlow 0 313) 312) anon1060_correct))))))
(let ((anon1058_correct  (=> (state Heap@30 Unfolding1Mask@5) (=> (and (|tree#trigger| Heap@30 (tree temp1@5)) (= (MapType0Select Heap@30 null (tree temp1@5)) (CombineFrames (FrameFragment (MapType0Select Heap@30 temp1@5 key)) (CombineFrames (FrameFragment (MapType0Select Heap@30 temp1@5 degree)) (CombineFrames (FrameFragment (MapType0Select Heap@30 temp1@5 child)) (CombineFrames (FrameFragment (MapType0Select Heap@30 temp1@5 parent)) (CombineFrames (MapType0Select Heap@30 null (heapseg (MapType0Select Heap@30 temp1@5 child) null)) (CombineFrames (FrameFragment (ite (< 0 (U_2_int (MapType0Select Heap@30 temp1@5 degree))) EmptyFrame EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@30 temp1@5 child) null)) EmptyFrame EmptyFrame)))))))))) (and (=> (= (ControlFlow 0 316) 313) anon1793_Then_correct) (=> (= (ControlFlow 0 316) 315) anon1793_Else_correct))))))
(let ((anon1792_Else_correct  (=> (and (= (MapType0Select Heap@30 temp1@3 child) null) (= (ControlFlow 0 318) 316)) anon1058_correct)))
(let ((anon1792_Then_correct  (=> (and (and (not (= (MapType0Select Heap@30 temp1@3 child) null)) (state Heap@30 Unfolding1Mask@5)) (and (= (segParent Heap@30 (MapType0Select Heap@30 temp1@3 child) null) temp1@3) (= (ControlFlow 0 317) 316))) anon1058_correct)))
(let ((anon1056_correct  (=> (and (state Heap@30 Unfolding1Mask@5) (validChildren Heap@30 (MapType0Select Heap@30 temp1@3 child) null)) (and (=> (= (ControlFlow 0 319) 317) anon1792_Then_correct) (=> (= (ControlFlow 0 319) 318) anon1792_Else_correct)))))
(let ((anon1791_Else_correct  (=> (and (<= (U_2_int (MapType0Select Heap@30 temp1@3 degree)) 0) (= (ControlFlow 0 321) 319)) anon1056_correct)))
(let ((anon1791_Then_correct  (=> (and (and (< 0 (U_2_int (MapType0Select Heap@30 temp1@3 degree))) (state Heap@30 Unfolding1Mask@5)) (and (= (segDegree Heap@30 (MapType0Select Heap@30 temp1@3 child) null 0) (- (U_2_int (MapType0Select Heap@30 temp1@3 degree)) 1)) (= (ControlFlow 0 320) 319))) anon1056_correct)))
(let ((anon1054_correct  (=> (= Unfolding1Mask@0 (MapType1Store UnfoldingMask@9 null (tree temp1@3) (real_2_U (- (U_2_real (MapType1Select UnfoldingMask@9 null (tree temp1@3))) FullPerm)))) (=> (and (not (= temp1@3 null)) (= Unfolding1Mask@1 (MapType1Store Unfolding1Mask@0 temp1@3 key (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@0 temp1@3 key)) FullPerm))))) (=> (and (and (and (and (state Heap@30 Unfolding1Mask@1) (not (= temp1@3 null))) (and (= Unfolding1Mask@2 (MapType1Store Unfolding1Mask@1 temp1@3 degree (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@1 temp1@3 degree)) FullPerm)))) (state Heap@30 Unfolding1Mask@2))) (and (and (not (= temp1@3 null)) (= Unfolding1Mask@3 (MapType1Store Unfolding1Mask@2 temp1@3 child (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@2 temp1@3 child)) FullPerm))))) (and (state Heap@30 Unfolding1Mask@3) (not (= temp1@3 null))))) (and (and (and (= Unfolding1Mask@4 (MapType1Store Unfolding1Mask@3 temp1@3 parent (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@3 temp1@3 parent)) FullPerm)))) (state Heap@30 Unfolding1Mask@4)) (and (<= 0 (U_2_int (MapType0Select Heap@30 temp1@3 degree))) (= Unfolding1Mask@5 (MapType1Store Unfolding1Mask@4 null (heapseg (MapType0Select Heap@30 temp1@3 child) null) (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@4 null (heapseg (MapType0Select Heap@30 temp1@3 child) null))) FullPerm)))))) (and (and (InsidePredicate (tree temp1@3) (MapType0Select Heap@30 null (tree temp1@3)) (heapseg (MapType0Select Heap@30 temp1@3 child) null) (MapType0Select Heap@30 null (heapseg (MapType0Select Heap@30 temp1@3 child) null))) (state Heap@30 Unfolding1Mask@5)) (and (state Heap@30 Unfolding1Mask@5) (= (U_2_int (MapType0Select Heap@30 temp1@3 degree)) (segLength Heap@30 (MapType0Select Heap@30 temp1@3 child) null)))))) (and (=> (= (ControlFlow 0 322) 320) anon1791_Then_correct) (=> (= (ControlFlow 0 322) 321) anon1791_Else_correct)))))))
(let ((anon1790_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 325) 322)) anon1054_correct)))
(let ((anon1790_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 323) (- 0 324)) (<= FullPerm (U_2_real (MapType1Select UnfoldingMask@9 null (tree temp1@3))))) (=> (<= FullPerm (U_2_real (MapType1Select UnfoldingMask@9 null (tree temp1@3)))) (=> (= (ControlFlow 0 323) 322) anon1054_correct))))))
(let ((anon1052_correct  (=> (state Heap@30 UnfoldingMask@9) (=> (and (|tree#trigger| Heap@30 (tree temp1@3)) (= (MapType0Select Heap@30 null (tree temp1@3)) (CombineFrames (FrameFragment (MapType0Select Heap@30 temp1@3 key)) (CombineFrames (FrameFragment (MapType0Select Heap@30 temp1@3 degree)) (CombineFrames (FrameFragment (MapType0Select Heap@30 temp1@3 child)) (CombineFrames (FrameFragment (MapType0Select Heap@30 temp1@3 parent)) (CombineFrames (MapType0Select Heap@30 null (heapseg (MapType0Select Heap@30 temp1@3 child) null)) (CombineFrames (FrameFragment (ite (< 0 (U_2_int (MapType0Select Heap@30 temp1@3 degree))) EmptyFrame EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@30 temp1@3 child) null)) EmptyFrame EmptyFrame)))))))))) (and (=> (= (ControlFlow 0 326) 323) anon1790_Then_correct) (=> (= (ControlFlow 0 326) 325) anon1790_Else_correct))))))
(let ((anon1789_Else_correct  (=> (= (MapType0Select Heap@30 temp1@5 sibling) null) (=> (and (= UnfoldingMask@9 UnfoldingMask@8) (= (ControlFlow 0 329) 326)) anon1052_correct))))
(let ((anon1789_Then_correct  (=> (not (= (MapType0Select Heap@30 temp1@5 sibling) null)) (=> (and (and (state Heap@30 UnfoldingMask@8) (= (treeParent Heap@30 temp1@5) (segParent Heap@30 (MapType0Select Heap@30 temp1@5 sibling) null))) (and (= UnfoldingMask@9 UnfoldingMask@8) (= (ControlFlow 0 328) 326))) anon1052_correct))))
(let ((anon1788_Then_correct  (=> (and (not (= temp1@5 null)) (= UnfoldingMask@6 (MapType1Store UnfoldingMask@5 null (tree temp1@5) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@5 null (tree temp1@5))) FullPerm))))) (=> (and (and (and (InsidePredicate (heapseg temp1@5 null) (MapType0Select Heap@30 null (heapseg temp1@5 null)) (tree temp1@5) (MapType0Select Heap@30 null (tree temp1@5))) (state Heap@30 UnfoldingMask@6)) (and (not (= temp1@5 null)) (= UnfoldingMask@7 (MapType1Store UnfoldingMask@6 temp1@5 sibling (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@6 temp1@5 sibling)) FullPerm)))))) (and (and (state Heap@30 UnfoldingMask@7) (= UnfoldingMask@8 (MapType1Store UnfoldingMask@7 null (heapseg (MapType0Select Heap@30 temp1@5 sibling) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@7 null (heapseg (MapType0Select Heap@30 temp1@5 sibling) null))) FullPerm))))) (and (InsidePredicate (heapseg temp1@5 null) (MapType0Select Heap@30 null (heapseg temp1@5 null)) (heapseg (MapType0Select Heap@30 temp1@5 sibling) null) (MapType0Select Heap@30 null (heapseg (MapType0Select Heap@30 temp1@5 sibling) null))) (state Heap@30 UnfoldingMask@8)))) (and (=> (= (ControlFlow 0 330) 328) anon1789_Then_correct) (=> (= (ControlFlow 0 330) 329) anon1789_Else_correct))))))
(let ((anon1788_Else_correct  (=> (= temp1@5 null) (=> (and (= UnfoldingMask@9 UnfoldingMask@5) (= (ControlFlow 0 327) 326)) anon1052_correct))))
(let ((anon1049_correct  (=> (= UnfoldingMask@5 (MapType1Store Mask@63 null (heapseg temp1@5 null) (real_2_U (- (U_2_real (MapType1Select Mask@63 null (heapseg temp1@5 null))) FullPerm)))) (and (=> (= (ControlFlow 0 331) 330) anon1788_Then_correct) (=> (= (ControlFlow 0 331) 327) anon1788_Else_correct)))))
(let ((anon1787_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 334) 331)) anon1049_correct)))
(let ((anon1787_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 332) (- 0 333)) (<= FullPerm (U_2_real (MapType1Select Mask@63 null (heapseg temp1@5 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@63 null (heapseg temp1@5 null)))) (=> (= (ControlFlow 0 332) 331) anon1049_correct))))))
(let ((anon1047_correct  (=> (state Heap@30 Mask@63) (=> (and (state Heap@30 Mask@63) (state Heap@30 Mask@63)) (and (=> (= (ControlFlow 0 335) (- 0 336)) (HasDirectPerm Mask@63 temp1@3 sibling)) (=> (HasDirectPerm Mask@63 temp1@3 sibling) (=> (and (and (= temp1@5 (MapType0Select Heap@30 temp1@3 sibling)) (state Heap@30 Mask@63)) (and (|heapseg#trigger| Heap@30 (heapseg temp1@5 null)) (= (MapType0Select Heap@30 null (heapseg temp1@5 null)) (FrameFragment (ite (not (= temp1@5 null)) (CombineFrames (MapType0Select Heap@30 null (tree temp1@5)) (CombineFrames (FrameFragment (MapType0Select Heap@30 temp1@5 sibling)) (CombineFrames (MapType0Select Heap@30 null (heapseg (MapType0Select Heap@30 temp1@5 sibling) null)) (FrameFragment (ite (not (= (MapType0Select Heap@30 temp1@5 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 335) 332) anon1787_Then_correct) (=> (= (ControlFlow 0 335) 334) anon1787_Else_correct)))))))))
(let ((anon1786_Else_correct  (=> (= (MapType0Select Heap@30 temp1@3 sibling) null) (=> (and (= Mask@63 Mask@62) (= (ControlFlow 0 339) 335)) anon1047_correct))))
(let ((anon1786_Then_correct  (=> (not (= (MapType0Select Heap@30 temp1@3 sibling) null)) (=> (and (and (state Heap@30 Mask@62) (= (treeParent Heap@30 temp1@3) (segParent Heap@30 (MapType0Select Heap@30 temp1@3 sibling) null))) (and (= Mask@63 Mask@62) (= (ControlFlow 0 338) 335))) anon1047_correct))))
(let ((anon1785_Then_correct  (=> (and (not (= temp1@3 null)) (= Mask@60 (MapType1Store Mask@59 null (tree temp1@3) (real_2_U (+ (U_2_real (MapType1Select Mask@59 null (tree temp1@3))) FullPerm))))) (=> (and (and (and (InsidePredicate (heapseg temp1@3 null) (MapType0Select Heap@30 null (heapseg temp1@3 null)) (tree temp1@3) (MapType0Select Heap@30 null (tree temp1@3))) (state Heap@30 Mask@60)) (and (not (= temp1@3 null)) (= Mask@61 (MapType1Store Mask@60 temp1@3 sibling (real_2_U (+ (U_2_real (MapType1Select Mask@60 temp1@3 sibling)) FullPerm)))))) (and (and (state Heap@30 Mask@61) (= Mask@62 (MapType1Store Mask@61 null (heapseg (MapType0Select Heap@30 temp1@3 sibling) null) (real_2_U (+ (U_2_real (MapType1Select Mask@61 null (heapseg (MapType0Select Heap@30 temp1@3 sibling) null))) FullPerm))))) (and (InsidePredicate (heapseg temp1@3 null) (MapType0Select Heap@30 null (heapseg temp1@3 null)) (heapseg (MapType0Select Heap@30 temp1@3 sibling) null) (MapType0Select Heap@30 null (heapseg (MapType0Select Heap@30 temp1@3 sibling) null))) (state Heap@30 Mask@62)))) (and (=> (= (ControlFlow 0 340) 338) anon1786_Then_correct) (=> (= (ControlFlow 0 340) 339) anon1786_Else_correct))))))
(let ((anon1785_Else_correct  (=> (= temp1@3 null) (=> (and (= Mask@63 Mask@59) (= (ControlFlow 0 337) 335)) anon1047_correct))))
(let ((anon1784_Else_correct  (=> (and (HasDirectPerm Mask@59 null (heapseg temp1@3 null)) (= Heap@30 Heap@28)) (and (=> (= (ControlFlow 0 342) 340) anon1785_Then_correct) (=> (= (ControlFlow 0 342) 337) anon1785_Else_correct)))))
(let ((anon1784_Then_correct  (=> (not (HasDirectPerm Mask@59 null (heapseg temp1@3 null))) (=> (and (= Heap@29 (MapType0Store Heap@28 null (heapseg temp1@3 null) newVersion@1)) (= Heap@30 Heap@29)) (and (=> (= (ControlFlow 0 341) 340) anon1785_Then_correct) (=> (= (ControlFlow 0 341) 337) anon1785_Else_correct))))))
(let ((anon1042_correct  (=> (= Mask@59 (MapType1Store Mask@34 null (heapseg temp1@3 null) (real_2_U (- (U_2_real (MapType1Select Mask@34 null (heapseg temp1@3 null))) FullPerm)))) (and (=> (= (ControlFlow 0 343) 341) anon1784_Then_correct) (=> (= (ControlFlow 0 343) 342) anon1784_Else_correct)))))
(let ((anon1783_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 346) 343)) anon1042_correct)))
(let ((anon1783_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 344) (- 0 345)) (<= FullPerm (U_2_real (MapType1Select Mask@34 null (heapseg temp1@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@34 null (heapseg temp1@3 null)))) (=> (= (ControlFlow 0 344) 343) anon1042_correct))))))
(let ((anon1040_correct  (=> (and (state Heap@28 Mask@34) (not (= (MapType0Select Heap@28 temp1@3 sibling) null))) (=> (and (and (state Heap@28 Mask@34) (U_2_bool (MapType0Select Heap@28 t_1 $allocated))) (and (|heapseg#trigger| Heap@28 (heapseg temp1@3 null)) (= (MapType0Select Heap@28 null (heapseg temp1@3 null)) (FrameFragment (ite (not (= temp1@3 null)) (CombineFrames (MapType0Select Heap@28 null (tree temp1@3)) (CombineFrames (FrameFragment (MapType0Select Heap@28 temp1@3 sibling)) (CombineFrames (MapType0Select Heap@28 null (heapseg (MapType0Select Heap@28 temp1@3 sibling) null)) (FrameFragment (ite (not (= (MapType0Select Heap@28 temp1@3 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 347) 344) anon1783_Then_correct) (=> (= (ControlFlow 0 347) 346) anon1783_Else_correct))))))
(let ((anon1782_Else_correct  (=> (= temp1@3 null) (=> (and (= Heap@28 ExhaleHeap@1) (= (ControlFlow 0 349) 347)) anon1040_correct))))
(let ((anon1782_Then_correct  (=> (and (and (and (not (= temp1@3 null)) (forall ((o_84 T@U) (f_88 T@U) ) (! (let ((B@@60 (FieldTypeInv1 (type f_88))))
(let ((A@@61 (FieldTypeInv0 (type f_88))))
 (=> (and (and (= (type o_84) RefType) (= (type f_88) (FieldType A@@61 B@@60))) (or (U_2_bool (MapType1Select (MapType0Select ExhaleHeap@1 null (|heapseg#sm| temp1@3 null)) o_84 f_88)) (U_2_bool (MapType1Select (MapType0Select ExhaleHeap@1 null (|tree#sm| temp1@3)) o_84 f_88)))) (U_2_bool (MapType1Select newPMask@6 o_84 f_88)))))
 :qid |stdinbpl.12027:41|
 :skolemid |186|
 :pattern ( (MapType1Select newPMask@6 o_84 f_88))
))) (and (= Heap@25 (MapType0Store ExhaleHeap@1 null (|heapseg#sm| temp1@3 null) newPMask@6)) (= Heap@26 (MapType0Store Heap@25 null (|heapseg#sm| temp1@3 null) (MapType1Store (MapType0Select Heap@25 null (|heapseg#sm| temp1@3 null)) temp1@3 sibling (bool_2_U true)))))) (and (and (forall ((o_85 T@U) (f_89 T@U) ) (! (let ((B@@61 (FieldTypeInv1 (type f_89))))
(let ((A@@62 (FieldTypeInv0 (type f_89))))
 (=> (and (and (= (type o_85) RefType) (= (type f_89) (FieldType A@@62 B@@61))) (or (U_2_bool (MapType1Select (MapType0Select Heap@26 null (|heapseg#sm| temp1@3 null)) o_85 f_89)) (U_2_bool (MapType1Select (MapType0Select Heap@26 null (|heapseg#sm| (MapType0Select Heap@26 temp1@3 sibling) null)) o_85 f_89)))) (U_2_bool (MapType1Select newPMask@7 o_85 f_89)))))
 :qid |stdinbpl.12034:41|
 :skolemid |187|
 :pattern ( (MapType1Select newPMask@7 o_85 f_89))
)) (= Heap@27 (MapType0Store Heap@26 null (|heapseg#sm| temp1@3 null) newPMask@7))) (and (= Heap@28 Heap@27) (= (ControlFlow 0 348) 347)))) anon1040_correct)))
(let ((anon1038_correct  (=> (state ExhaleHeap@1 UnfoldingMask@4) (and (=> (= (ControlFlow 0 350) (- 0 351)) (HasDirectPerm UnfoldingMask@4 temp1@3 sibling)) (=> (HasDirectPerm UnfoldingMask@4 temp1@3 sibling) (and (=> (= (ControlFlow 0 350) 348) anon1782_Then_correct) (=> (= (ControlFlow 0 350) 349) anon1782_Else_correct)))))))
(let ((anon1781_Else_correct  (=> (= (MapType0Select ExhaleHeap@1 temp1@3 sibling) null) (=> (and (= UnfoldingMask@4 UnfoldingMask@3) (= (ControlFlow 0 354) 350)) anon1038_correct))))
(let ((anon1781_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@1 temp1@3 sibling) null)) (=> (and (and (state ExhaleHeap@1 UnfoldingMask@3) (= (treeParent ExhaleHeap@1 temp1@3) (segParent ExhaleHeap@1 (MapType0Select ExhaleHeap@1 temp1@3 sibling) null))) (and (= UnfoldingMask@4 UnfoldingMask@3) (= (ControlFlow 0 353) 350))) anon1038_correct))))
(let ((anon1780_Then_correct  (=> (and (not (= temp1@3 null)) (= UnfoldingMask@1 (MapType1Store UnfoldingMask@0 null (tree temp1@3) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@0 null (tree temp1@3))) FullPerm))))) (=> (and (and (and (InsidePredicate (heapseg temp1@3 null) (MapType0Select ExhaleHeap@1 null (heapseg temp1@3 null)) (tree temp1@3) (MapType0Select ExhaleHeap@1 null (tree temp1@3))) (state ExhaleHeap@1 UnfoldingMask@1)) (and (not (= temp1@3 null)) (= UnfoldingMask@2 (MapType1Store UnfoldingMask@1 temp1@3 sibling (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@1 temp1@3 sibling)) FullPerm)))))) (and (and (state ExhaleHeap@1 UnfoldingMask@2) (= UnfoldingMask@3 (MapType1Store UnfoldingMask@2 null (heapseg (MapType0Select ExhaleHeap@1 temp1@3 sibling) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@2 null (heapseg (MapType0Select ExhaleHeap@1 temp1@3 sibling) null))) FullPerm))))) (and (InsidePredicate (heapseg temp1@3 null) (MapType0Select ExhaleHeap@1 null (heapseg temp1@3 null)) (heapseg (MapType0Select ExhaleHeap@1 temp1@3 sibling) null) (MapType0Select ExhaleHeap@1 null (heapseg (MapType0Select ExhaleHeap@1 temp1@3 sibling) null))) (state ExhaleHeap@1 UnfoldingMask@3)))) (and (=> (= (ControlFlow 0 355) 353) anon1781_Then_correct) (=> (= (ControlFlow 0 355) 354) anon1781_Else_correct))))))
(let ((anon1780_Else_correct  (=> (= temp1@3 null) (=> (and (= UnfoldingMask@4 UnfoldingMask@0) (= (ControlFlow 0 352) 350)) anon1038_correct))))
(let ((anon1035_correct  (=> (= UnfoldingMask@0 (MapType1Store Mask@34 null (heapseg temp1@3 null) (real_2_U (- (U_2_real (MapType1Select Mask@34 null (heapseg temp1@3 null))) FullPerm)))) (and (=> (= (ControlFlow 0 356) 355) anon1780_Then_correct) (=> (= (ControlFlow 0 356) 352) anon1780_Else_correct)))))
(let ((anon1779_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 359) 356)) anon1035_correct)))
(let ((anon1779_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 357) (- 0 358)) (<= FullPerm (U_2_real (MapType1Select Mask@34 null (heapseg temp1@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@34 null (heapseg temp1@3 null)))) (=> (= (ControlFlow 0 357) 356) anon1035_correct))))))
(let ((anon1033_correct  (=> (state ExhaleHeap@1 Mask@34) (=> (and (|heapseg#trigger| ExhaleHeap@1 (heapseg temp1@3 null)) (= (MapType0Select ExhaleHeap@1 null (heapseg temp1@3 null)) (FrameFragment (ite (not (= temp1@3 null)) (CombineFrames (MapType0Select ExhaleHeap@1 null (tree temp1@3)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@1 temp1@3 sibling)) (CombineFrames (MapType0Select ExhaleHeap@1 null (heapseg (MapType0Select ExhaleHeap@1 temp1@3 sibling) null)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@1 temp1@3 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame)))) (and (=> (= (ControlFlow 0 360) 357) anon1779_Then_correct) (=> (= (ControlFlow 0 360) 359) anon1779_Else_correct))))))
(let ((anon1778_Else_correct  (=> (and (= temp2@0 null) (= (ControlFlow 0 362) 360)) anon1033_correct)))
(let ((anon1778_Then_correct  (=> (and (and (not (= temp2@0 null)) (state ExhaleHeap@1 Mask@34)) (and (= (segParent ExhaleHeap@1 temp2@0 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (= (ControlFlow 0 361) 360))) anon1033_correct)))
(let ((anon1031_correct  (=> (and (state ExhaleHeap@1 Mask@34) (= (segParent ExhaleHeap@1 temp1@3 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (and (=> (= (ControlFlow 0 363) 361) anon1778_Then_correct) (=> (= (ControlFlow 0 363) 362) anon1778_Else_correct)))))
(let ((anon1777_Else_correct  (=> (and (not (and (not (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)) (not (= temp2@0 null)))) (= (ControlFlow 0 365) 363)) anon1031_correct)))
(let ((anon1777_Then_correct  (=> (and (and (and (not (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)) (not (= temp2@0 null))) (state ExhaleHeap@1 Mask@34)) (and (= (segParent ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (segParent ExhaleHeap@1 temp2@0 null)) (= (ControlFlow 0 364) 363))) anon1031_correct)))
(let ((anon1776_Else_correct  (=> (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (and (=> (= (ControlFlow 0 367) 364) anon1777_Then_correct) (=> (= (ControlFlow 0 367) 365) anon1777_Else_correct)))))
(let ((anon1776_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)) (=> (and (state ExhaleHeap@1 Mask@34) (= (segParent ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (segParent ExhaleHeap@1 temp1@3 null))) (and (=> (= (ControlFlow 0 366) 364) anon1777_Then_correct) (=> (= (ControlFlow 0 366) 365) anon1777_Else_correct))))))
(let ((anon1775_Else_correct  (=> (= temp2@0 null) (and (=> (= (ControlFlow 0 369) 366) anon1776_Then_correct) (=> (= (ControlFlow 0 369) 367) anon1776_Else_correct)))))
(let ((anon1775_Then_correct  (=> (not (= temp2@0 null)) (=> (and (state ExhaleHeap@1 Mask@34) (= (segParent ExhaleHeap@1 temp1@3 null) (segParent ExhaleHeap@1 temp2@0 null))) (and (=> (= (ControlFlow 0 368) 366) anon1776_Then_correct) (=> (= (ControlFlow 0 368) 367) anon1776_Else_correct))))))
(let ((anon1025_correct  (=> (and (state ExhaleHeap@1 Mask@34) (= (+ (+ (segSize ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (segSize ExhaleHeap@1 temp1@3 null)) (segSize ExhaleHeap@1 temp2@0 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null)))) (and (=> (= (ControlFlow 0 370) 368) anon1775_Then_correct) (=> (= (ControlFlow 0 370) 369) anon1775_Else_correct)))))
(let ((anon1774_Else_correct  (=> (and (not (and (<= 2 (+ (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (segLength ExhaleHeap@1 temp1@3 null))) (= (ite (<= 2 (segLength ExhaleHeap@1 temp1@3 null)) (segDegree ExhaleHeap@1 temp1@3 null (- (segLength ExhaleHeap@1 temp1@3 null) 2)) (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1))) (segDegree ExhaleHeap@1 temp1@3 null (- (segLength ExhaleHeap@1 temp1@3 null) 1))))) (= (ControlFlow 0 373) 370)) anon1025_correct)))
(let ((anon1774_Then_correct  (=> (and (and (and (<= 2 (+ (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (segLength ExhaleHeap@1 temp1@3 null))) (= (ite (<= 2 (segLength ExhaleHeap@1 temp1@3 null)) (segDegree ExhaleHeap@1 temp1@3 null (- (segLength ExhaleHeap@1 temp1@3 null) 2)) (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1))) (segDegree ExhaleHeap@1 temp1@3 null (- (segLength ExhaleHeap@1 temp1@3 null) 1)))) (state ExhaleHeap@1 Mask@34)) (and (< (segDegree ExhaleHeap@1 temp1@3 null (- (segLength ExhaleHeap@1 temp1@3 null) 1)) (segDegree ExhaleHeap@1 temp2@0 null 0)) (= (ControlFlow 0 372) 370))) anon1025_correct)))
(let ((anon1773_Then_correct  (=> (< 0 (segLength ExhaleHeap@1 temp2@0 null)) (=> (and (state ExhaleHeap@1 Mask@34) (<= (segDegree ExhaleHeap@1 temp1@3 null (- (segLength ExhaleHeap@1 temp1@3 null) 1)) (segDegree ExhaleHeap@1 temp2@0 null 0))) (and (=> (= (ControlFlow 0 374) 372) anon1774_Then_correct) (=> (= (ControlFlow 0 374) 373) anon1774_Else_correct))))))
(let ((anon1773_Else_correct  (=> (and (<= (segLength ExhaleHeap@1 temp2@0 null) 0) (= (ControlFlow 0 371) 370)) anon1025_correct)))
(let ((anon1772_Else_correct  (=> (not (and (<= 2 (segLength ExhaleHeap@1 temp1@3 null)) (= (segDegree ExhaleHeap@1 temp1@3 null 0) (segDegree ExhaleHeap@1 temp1@3 null 1)))) (and (=> (= (ControlFlow 0 377) 374) anon1773_Then_correct) (=> (= (ControlFlow 0 377) 371) anon1773_Else_correct)))))
(let ((anon1772_Then_correct  (=> (and (and (<= 2 (segLength ExhaleHeap@1 temp1@3 null)) (= (segDegree ExhaleHeap@1 temp1@3 null 0) (segDegree ExhaleHeap@1 temp1@3 null 1))) (and (state ExhaleHeap@1 Mask@34) (< (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1)) (segDegree ExhaleHeap@1 temp1@3 null 0)))) (and (=> (= (ControlFlow 0 376) 374) anon1773_Then_correct) (=> (= (ControlFlow 0 376) 371) anon1773_Else_correct)))))
(let ((anon1771_Else_correct  (=> (not (and (<= 2 (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)) (= (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1)) (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 2))))) (and (=> (= (ControlFlow 0 379) 376) anon1772_Then_correct) (=> (= (ControlFlow 0 379) 377) anon1772_Else_correct)))))
(let ((anon1771_Then_correct  (=> (and (and (<= 2 (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)) (= (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1)) (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 2)))) (and (state ExhaleHeap@1 Mask@34) (< (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1)) (segDegree ExhaleHeap@1 temp1@3 null 0)))) (and (=> (= (ControlFlow 0 378) 376) anon1772_Then_correct) (=> (= (ControlFlow 0 378) 377) anon1772_Else_correct)))))
(let ((anon1770_Then_correct  (=> (< 0 (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)) (=> (and (state ExhaleHeap@1 Mask@34) (<= (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1)) (segDegree ExhaleHeap@1 temp1@3 null 0))) (and (=> (= (ControlFlow 0 380) 378) anon1771_Then_correct) (=> (= (ControlFlow 0 380) 379) anon1771_Else_correct))))))
(let ((anon1770_Else_correct  (=> (<= (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 0) (and (=> (= (ControlFlow 0 375) 374) anon1773_Then_correct) (=> (= (ControlFlow 0 375) 371) anon1773_Else_correct)))))
(let ((anon1769_Then_correct  (=> (and (and (state ExhaleHeap@1 ZeroMask) (not (= temp1@3 null))) (and (= Mask@31 (MapType1Store ZeroMask null (heapseg temp1@3 null) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (heapseg temp1@3 null))) FullPerm)))) (state ExhaleHeap@1 Mask@31))) (=> (and (and (and (and (state ExhaleHeap@1 Mask@31) (presorted ExhaleHeap@1 temp1@3 null)) (and (= Mask@32 (MapType1Store Mask@31 null (heapseg temp2@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@31 null (heapseg temp2@0 null))) FullPerm)))) (state ExhaleHeap@1 Mask@32))) (and (and (state ExhaleHeap@1 Mask@32) (sorted ExhaleHeap@1 temp2@0 null)) (and (not (= this@@66 null)) (= Mask@33 (MapType1Store Mask@32 this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select Mask@32 this@@66 Nodes)) FullPerm))))))) (and (and (and (state ExhaleHeap@1 Mask@33) (not (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) null))) (and (= Mask@34 (MapType1Store Mask@33 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (real_2_U (+ (U_2_real (MapType1Select Mask@33 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))) FullPerm)))) (state ExhaleHeap@1 Mask@34))) (and (and (state ExhaleHeap@1 Mask@34) (presorted ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)) (and (state ExhaleHeap@1 Mask@34) (< 0 (segLength ExhaleHeap@1 temp1@3 null)))))) (and (=> (= (ControlFlow 0 381) 380) anon1770_Then_correct) (=> (= (ControlFlow 0 381) 375) anon1770_Else_correct))))))
(let ((anon1196_correct  (=> (and (= ExhaleWellDef0Mask@0 (MapType1Store Mask@43 null (heapseg temp2@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@43 null (heapseg temp2@0 null))) FullPerm)))) (= (ControlFlow 0 94) (- 0 93))) (< 1 (segLength Heap@15 temp2@0 null)))))
(let ((anon1866_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 97) 94)) anon1196_correct)))
(let ((anon1866_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 95) (- 0 96)) (<= FullPerm (U_2_real (MapType1Select Mask@43 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@43 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 95) 94) anon1196_correct))))))
(let ((anon1192_correct  (=> (and (= ExhaleWellDef0Mask@1 (MapType1Store Mask@43 null (heapseg temp2@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@43 null (heapseg temp2@0 null))) FullPerm)))) (= (ControlFlow 0 89) (- 0 88))) (< 0 (segLength Heap@15 temp2@0 null)))))
(let ((anon1864_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 92) 89)) anon1192_correct)))
(let ((anon1864_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 90) (- 0 91)) (<= FullPerm (U_2_real (MapType1Select Mask@43 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@43 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 90) 89) anon1192_correct))))))
(let ((anon1187_correct true))
(let ((anon1861_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 59) 56)) anon1187_correct)))
(let ((anon1861_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 57) (- 0 58)) (<= FullPerm (U_2_real (MapType1Select Mask@43 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@43 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 57) 56) anon1187_correct))))))
(let ((anon1238_correct  (=> (= Mask@58 (MapType1Store Mask@57 null (heapseg (MapType0Select ExhaleHeap@2 this@@66 Nodes) null) (real_2_U (- (U_2_real (MapType1Select Mask@57 null (heapseg (MapType0Select ExhaleHeap@2 this@@66 Nodes) null))) FullPerm)))) (and (=> (= (ControlFlow 0 10) (- 0 12)) (presorted ExhaleHeap@2 (MapType0Select ExhaleHeap@2 this@@66 Nodes) null)) (=> (presorted ExhaleHeap@2 (MapType0Select ExhaleHeap@2 this@@66 Nodes) null) (and (=> (= (ControlFlow 0 10) (- 0 11)) (= (segSize ExhaleHeap@2 (MapType0Select ExhaleHeap@2 this@@66 Nodes) null) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null)))) (=> (= (segSize ExhaleHeap@2 (MapType0Select ExhaleHeap@2 this@@66 Nodes) null) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null))) (=> (= (ControlFlow 0 10) (- 0 9)) (= (segParent ExhaleHeap@2 (MapType0Select ExhaleHeap@2 this@@66 Nodes) null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))))))))))
(let ((anon1886_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 15) 10)) anon1238_correct)))
(let ((anon1886_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 13) (- 0 14)) (<= FullPerm (U_2_real (MapType1Select Mask@57 null (heapseg (MapType0Select ExhaleHeap@2 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@57 null (heapseg (MapType0Select ExhaleHeap@2 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 13) 10) anon1238_correct))))))
(let ((anon1236_correct  (=> (= Mask@57 (MapType1Store Mask@56 this@@66 Nodes (real_2_U (- (U_2_real (MapType1Select Mask@56 this@@66 Nodes)) FullPerm)))) (and (=> (= (ControlFlow 0 16) (- 0 17)) (not (= (MapType0Select ExhaleHeap@2 this@@66 Nodes) null))) (=> (not (= (MapType0Select ExhaleHeap@2 this@@66 Nodes) null)) (and (=> (= (ControlFlow 0 16) 13) anon1886_Then_correct) (=> (= (ControlFlow 0 16) 15) anon1886_Else_correct)))))))
(let ((anon1885_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 20) 16)) anon1236_correct)))
(let ((anon1885_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 18) (- 0 19)) (<= FullPerm (U_2_real (MapType1Select Mask@56 this@@66 Nodes)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@56 this@@66 Nodes))) (=> (= (ControlFlow 0 18) 16) anon1236_correct))))))
(let ((anon1234_correct  (=> (and (state ExhaleHeap@2 Mask@56) (state ExhaleHeap@2 Mask@56)) (and (=> (= (ControlFlow 0 21) 18) anon1885_Then_correct) (=> (= (ControlFlow 0 21) 20) anon1885_Else_correct)))))
(let ((anon1884_Else_correct  (=> (and (= temp1@4 null) (= (ControlFlow 0 23) 21)) anon1234_correct)))
(let ((anon1884_Then_correct  (=> (and (and (not (= temp1@4 null)) (state ExhaleHeap@2 Mask@56)) (and (= (segParent ExhaleHeap@2 arg_a_4@0 null) (segParent Heap@24 temp1@4 null)) (= (ControlFlow 0 22) 21))) anon1234_correct)))
(let ((anon1883_Else_correct  (=> (= arg_a_4@0 temp1@4) (and (=> (= (ControlFlow 0 25) 22) anon1884_Then_correct) (=> (= (ControlFlow 0 25) 23) anon1884_Else_correct)))))
(let ((anon1883_Then_correct  (=> (not (= arg_a_4@0 temp1@4)) (=> (and (state ExhaleHeap@2 Mask@56) (= (segParent ExhaleHeap@2 arg_a_4@0 null) (segParent Heap@24 arg_a_4@0 temp1@4))) (and (=> (= (ControlFlow 0 24) 22) anon1884_Then_correct) (=> (= (ControlFlow 0 24) 23) anon1884_Else_correct))))))
(let ((anon1230_correct  (=> (and (state ExhaleHeap@2 Mask@56) (= (segSize ExhaleHeap@2 arg_a_4@0 null) (+ (segSize Heap@24 arg_a_4@0 temp1@4) (segSize Heap@24 temp1@4 null)))) (and (=> (= (ControlFlow 0 26) 24) anon1883_Then_correct) (=> (= (ControlFlow 0 26) 25) anon1883_Else_correct)))))
(let ((anon1882_Else_correct  (=> (and (not (and (validChildren Heap@24 arg_a_4@0 temp1@4) (and (validChildren Heap@24 temp1@4 null) (=> (and (< 0 (segLength Heap@24 arg_a_4@0 temp1@4)) (< 0 (segLength Heap@24 temp1@4 null))) (= (segDegree Heap@24 arg_a_4@0 temp1@4 (- (segLength Heap@24 arg_a_4@0 temp1@4) 1)) (+ (segDegree Heap@24 temp1@4 null 0) 1)))))) (= (ControlFlow 0 28) 26)) anon1230_correct)))
(let ((anon1882_Then_correct  (=> (and (and (and (validChildren Heap@24 arg_a_4@0 temp1@4) (and (validChildren Heap@24 temp1@4 null) (=> (and (< 0 (segLength Heap@24 arg_a_4@0 temp1@4)) (< 0 (segLength Heap@24 temp1@4 null))) (= (segDegree Heap@24 arg_a_4@0 temp1@4 (- (segLength Heap@24 arg_a_4@0 temp1@4) 1)) (+ (segDegree Heap@24 temp1@4 null 0) 1))))) (state ExhaleHeap@2 Mask@56)) (and (validChildren ExhaleHeap@2 arg_a_4@0 null) (= (ControlFlow 0 27) 26))) anon1230_correct)))
(let ((anon1881_Else_correct  (=> (not (and (presorted Heap@24 arg_a_4@0 temp1@4) (and (presorted Heap@24 temp1@4 null) (=> (and (< 0 (segLength Heap@24 arg_a_4@0 temp1@4)) (< 0 (segLength Heap@24 temp1@4 null))) (and (<= (segDegree Heap@24 arg_a_4@0 temp1@4 (- (segLength Heap@24 arg_a_4@0 temp1@4) 1)) (segDegree Heap@24 temp1@4 null 0)) (and (=> (and (<= 2 (segLength Heap@24 arg_a_4@0 temp1@4)) (= (segDegree Heap@24 arg_a_4@0 temp1@4 (- (segLength Heap@24 arg_a_4@0 temp1@4) 1)) (segDegree Heap@24 arg_a_4@0 temp1@4 (- (segLength Heap@24 arg_a_4@0 temp1@4) 2)))) (< (segDegree Heap@24 arg_a_4@0 temp1@4 (- (segLength Heap@24 arg_a_4@0 temp1@4) 1)) (segDegree Heap@24 temp1@4 null 0))) (=> (and (<= 2 (segLength Heap@24 temp1@4 null)) (= (segDegree Heap@24 temp1@4 null 0) (segDegree Heap@24 temp1@4 null 1))) (< (segDegree Heap@24 arg_a_4@0 temp1@4 (- (segLength Heap@24 arg_a_4@0 temp1@4) 1)) (segDegree Heap@24 temp1@4 null 0))))))))) (and (=> (= (ControlFlow 0 30) 27) anon1882_Then_correct) (=> (= (ControlFlow 0 30) 28) anon1882_Else_correct)))))
(let ((anon1881_Then_correct  (=> (and (and (presorted Heap@24 arg_a_4@0 temp1@4) (and (presorted Heap@24 temp1@4 null) (=> (and (< 0 (segLength Heap@24 arg_a_4@0 temp1@4)) (< 0 (segLength Heap@24 temp1@4 null))) (and (<= (segDegree Heap@24 arg_a_4@0 temp1@4 (- (segLength Heap@24 arg_a_4@0 temp1@4) 1)) (segDegree Heap@24 temp1@4 null 0)) (and (=> (and (<= 2 (segLength Heap@24 arg_a_4@0 temp1@4)) (= (segDegree Heap@24 arg_a_4@0 temp1@4 (- (segLength Heap@24 arg_a_4@0 temp1@4) 1)) (segDegree Heap@24 arg_a_4@0 temp1@4 (- (segLength Heap@24 arg_a_4@0 temp1@4) 2)))) (< (segDegree Heap@24 arg_a_4@0 temp1@4 (- (segLength Heap@24 arg_a_4@0 temp1@4) 1)) (segDegree Heap@24 temp1@4 null 0))) (=> (and (<= 2 (segLength Heap@24 temp1@4 null)) (= (segDegree Heap@24 temp1@4 null 0) (segDegree Heap@24 temp1@4 null 1))) (< (segDegree Heap@24 arg_a_4@0 temp1@4 (- (segLength Heap@24 arg_a_4@0 temp1@4) 1)) (segDegree Heap@24 temp1@4 null 0)))))))) (and (state ExhaleHeap@2 Mask@56) (presorted ExhaleHeap@2 arg_a_4@0 null))) (and (=> (= (ControlFlow 0 29) 27) anon1882_Then_correct) (=> (= (ControlFlow 0 29) 28) anon1882_Else_correct)))))
(let ((anon1880_Else_correct  (=> (not (and (sorted Heap@24 arg_a_4@0 temp1@4) (and (sorted Heap@24 temp1@4 null) (=> (and (< 0 (segLength Heap@24 arg_a_4@0 temp1@4)) (< 0 (segLength Heap@24 temp1@4 null))) (< (segDegree Heap@24 arg_a_4@0 temp1@4 (- (segLength Heap@24 arg_a_4@0 temp1@4) 1)) (segDegree Heap@24 temp1@4 null 0)))))) (and (=> (= (ControlFlow 0 32) 29) anon1881_Then_correct) (=> (= (ControlFlow 0 32) 30) anon1881_Else_correct)))))
(let ((anon1880_Then_correct  (=> (and (and (sorted Heap@24 arg_a_4@0 temp1@4) (and (sorted Heap@24 temp1@4 null) (=> (and (< 0 (segLength Heap@24 arg_a_4@0 temp1@4)) (< 0 (segLength Heap@24 temp1@4 null))) (< (segDegree Heap@24 arg_a_4@0 temp1@4 (- (segLength Heap@24 arg_a_4@0 temp1@4) 1)) (segDegree Heap@24 temp1@4 null 0))))) (and (state ExhaleHeap@2 Mask@56) (sorted ExhaleHeap@2 arg_a_4@0 null))) (and (=> (= (ControlFlow 0 31) 29) anon1881_Then_correct) (=> (= (ControlFlow 0 31) 30) anon1881_Else_correct)))))
(let ((anon1879_Else_correct  (=> (and (= null null) (= Mask@56 Mask@54)) (and (=> (= (ControlFlow 0 34) 31) anon1880_Then_correct) (=> (= (ControlFlow 0 34) 32) anon1880_Else_correct)))))
(let ((anon1879_Then_correct  (=> (and (not (= null null)) (= Mask@55 (MapType1Store Mask@54 null (tree null) (real_2_U (+ (U_2_real (MapType1Select Mask@54 null (tree null))) FullPerm))))) (=> (and (and (and (state ExhaleHeap@2 Mask@55) (state ExhaleHeap@2 Mask@55)) (and (= (treeDegree ExhaleHeap@2 null) (treeDegree Heap@24 null)) (state ExhaleHeap@2 Mask@55))) (and (and (= (treeSize ExhaleHeap@2 null) (treeSize Heap@24 null)) (state ExhaleHeap@2 Mask@55)) (and (= (treeParent ExhaleHeap@2 null) (treeParent Heap@24 null)) (= Mask@56 Mask@55)))) (and (=> (= (ControlFlow 0 33) 31) anon1880_Then_correct) (=> (= (ControlFlow 0 33) 32) anon1880_Else_correct))))))
(let ((anon1222_correct  (=> (IdenticalOnKnownLocations Heap@24 ExhaleHeap@2 Mask@53) (=> (and (and (and (= Mask@54 (MapType1Store Mask@53 null (heapseg arg_a_4@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@53 null (heapseg arg_a_4@0 null))) FullPerm)))) (state ExhaleHeap@2 Mask@54)) (and (state ExhaleHeap@2 Mask@54) (= (segLength ExhaleHeap@2 arg_a_4@0 null) (+ (segLength Heap@24 arg_a_4@0 temp1@4) (segLength Heap@24 temp1@4 null))))) (and (and (state ExhaleHeap@2 Mask@54) (forall ((i_8 Int) ) (!  (=> (and (<= 0 i_8) (< i_8 (segLength Heap@24 arg_a_4@0 temp1@4))) (= (segDegree ExhaleHeap@2 arg_a_4@0 null i_8) (segDegree Heap@24 arg_a_4@0 temp1@4 i_8)))
 :qid |stdinbpl.13067:22|
 :skolemid |209|
 :pattern ( (|segDegree#frame| (MapType0Select ExhaleHeap@2 null (heapseg arg_a_4@0 null)) arg_a_4@0 null i_8))
 :pattern ( (|segDegree#frame| (MapType0Select Heap@24 null (heapseg arg_a_4@0 temp1@4)) arg_a_4@0 temp1@4 i_8))
))) (and (state ExhaleHeap@2 Mask@54) (forall ((i_9 Int) ) (!  (=> (and (<= (segLength Heap@24 arg_a_4@0 temp1@4) i_9) (< i_9 (segLength ExhaleHeap@2 arg_a_4@0 null))) (= (segDegree ExhaleHeap@2 arg_a_4@0 null i_9) (segDegree Heap@24 temp1@4 null (- i_9 (segLength Heap@24 arg_a_4@0 temp1@4)))))
 :qid |stdinbpl.13072:22|
 :skolemid |210|
 :pattern ( (|segDegree#frame| (MapType0Select ExhaleHeap@2 null (heapseg arg_a_4@0 null)) arg_a_4@0 null i_9))
))))) (and (=> (= (ControlFlow 0 35) 33) anon1879_Then_correct) (=> (= (ControlFlow 0 35) 34) anon1879_Else_correct))))))
(let ((anon1878_Else_correct  (=> (and (not (and (not (= arg_a_4@0 temp1@4)) (not (= temp1@4 null)))) (= (ControlFlow 0 38) 35)) anon1222_correct)))
(let ((anon1878_Then_correct  (=> (and (not (= arg_a_4@0 temp1@4)) (not (= temp1@4 null))) (and (=> (= (ControlFlow 0 36) (- 0 37)) (= (segParent Heap@24 arg_a_4@0 temp1@4) (segParent Heap@24 temp1@4 null))) (=> (= (segParent Heap@24 arg_a_4@0 temp1@4) (segParent Heap@24 temp1@4 null)) (=> (= (ControlFlow 0 36) 35) anon1222_correct))))))
(let ((anon1219_correct  (=> (and (= Mask@52 (MapType1Store Mask@51 null (tree null) (real_2_U (- (U_2_real (MapType1Select Mask@51 null (tree null))) FullPerm)))) (= Mask@53 Mask@52)) (and (=> (= (ControlFlow 0 40) 36) anon1878_Then_correct) (=> (= (ControlFlow 0 40) 38) anon1878_Else_correct)))))
(let ((anon1877_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 43) 40)) anon1219_correct)))
(let ((anon1877_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 41) (- 0 42)) (<= FullPerm (U_2_real (MapType1Select Mask@51 null (tree null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@51 null (tree null)))) (=> (= (ControlFlow 0 41) 40) anon1219_correct))))))
(let ((anon1876_Then_correct  (=> (not (= null null)) (and (=> (= (ControlFlow 0 44) 41) anon1877_Then_correct) (=> (= (ControlFlow 0 44) 43) anon1877_Else_correct)))))
(let ((anon1876_Else_correct  (=> (and (= null null) (= Mask@53 Mask@51)) (and (=> (= (ControlFlow 0 39) 36) anon1878_Then_correct) (=> (= (ControlFlow 0 39) 38) anon1878_Else_correct)))))
(let ((anon1216_correct  (=> (= Mask@51 (MapType1Store Mask@50 null (heapseg temp1@4 null) (real_2_U (- (U_2_real (MapType1Select Mask@50 null (heapseg temp1@4 null))) FullPerm)))) (and (=> (= (ControlFlow 0 45) 44) anon1876_Then_correct) (=> (= (ControlFlow 0 45) 39) anon1876_Else_correct)))))
(let ((anon1875_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 48) 45)) anon1216_correct)))
(let ((anon1875_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 46) (- 0 47)) (<= FullPerm (U_2_real (MapType1Select Mask@50 null (heapseg temp1@4 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@50 null (heapseg temp1@4 null)))) (=> (= (ControlFlow 0 46) 45) anon1216_correct))))))
(let ((anon1214_correct  (=> (= Mask@50 (MapType1Store Mask@49 null (heapseg arg_a_4@0 temp1@4) (real_2_U (- (U_2_real (MapType1Select Mask@49 null (heapseg arg_a_4@0 temp1@4))) FullPerm)))) (and (=> (= (ControlFlow 0 49) 46) anon1875_Then_correct) (=> (= (ControlFlow 0 49) 48) anon1875_Else_correct)))))
(let ((anon1874_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 52) 49)) anon1214_correct)))
(let ((anon1874_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 50) (- 0 51)) (<= FullPerm (U_2_real (MapType1Select Mask@49 null (heapseg arg_a_4@0 temp1@4))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@49 null (heapseg arg_a_4@0 temp1@4)))) (=> (= (ControlFlow 0 50) 49) anon1214_correct))))))
(let ((anon1212_correct  (=> (state Heap@24 Mask@49) (and (=> (= (ControlFlow 0 53) (- 0 54)) (HasDirectPerm Mask@49 this@@66 Nodes)) (=> (HasDirectPerm Mask@49 this@@66 Nodes) (=> (= arg_a_4@0 (MapType0Select Heap@24 this@@66 Nodes)) (and (=> (= (ControlFlow 0 53) 50) anon1874_Then_correct) (=> (= (ControlFlow 0 53) 52) anon1874_Else_correct))))))))
(let ((anon1211_correct  (=> (and (state Heap@23 Mask@48) (state Heap@23 Mask@48)) (=> (and (and (= Mask@49 Mask@48) (= temp1@4 temp1@3)) (and (= Heap@24 Heap@23) (= (ControlFlow 0 60) 53))) anon1212_correct))))
(let ((anon1873_Else_correct  (=> (= temp1@3 null) (=> (and (= Heap@23 Heap@19) (= (ControlFlow 0 62) 60)) anon1211_correct))))
(let ((anon1873_Then_correct  (=> (and (and (and (not (= temp1@3 null)) (forall ((o_103 T@U) (f_107 T@U) ) (! (let ((B@@62 (FieldTypeInv1 (type f_107))))
(let ((A@@63 (FieldTypeInv0 (type f_107))))
 (=> (and (and (= (type o_103) RefType) (= (type f_107) (FieldType A@@63 B@@62))) (or (U_2_bool (MapType1Select (MapType0Select Heap@19 null (|heapseg#sm| temp1@3 null)) o_103 f_107)) (U_2_bool (MapType1Select (MapType0Select Heap@19 null (|tree#sm| temp1@3)) o_103 f_107)))) (U_2_bool (MapType1Select newPMask@4 o_103 f_107)))))
 :qid |stdinbpl.13001:33|
 :skolemid |207|
 :pattern ( (MapType1Select newPMask@4 o_103 f_107))
))) (and (= Heap@20 (MapType0Store Heap@19 null (|heapseg#sm| temp1@3 null) newPMask@4)) (= Heap@21 (MapType0Store Heap@20 null (|heapseg#sm| temp1@3 null) (MapType1Store (MapType0Select Heap@20 null (|heapseg#sm| temp1@3 null)) temp1@3 sibling (bool_2_U true)))))) (and (and (forall ((o_104 T@U) (f_108 T@U) ) (! (let ((B@@63 (FieldTypeInv1 (type f_108))))
(let ((A@@64 (FieldTypeInv0 (type f_108))))
 (=> (and (and (= (type o_104) RefType) (= (type f_108) (FieldType A@@64 B@@63))) (or (U_2_bool (MapType1Select (MapType0Select Heap@21 null (|heapseg#sm| temp1@3 null)) o_104 f_108)) (U_2_bool (MapType1Select (MapType0Select Heap@21 null (|heapseg#sm| (MapType0Select Heap@21 temp1@3 sibling) null)) o_104 f_108)))) (U_2_bool (MapType1Select newPMask@5 o_104 f_108)))))
 :qid |stdinbpl.13008:33|
 :skolemid |208|
 :pattern ( (MapType1Select newPMask@5 o_104 f_108))
)) (= Heap@22 (MapType0Store Heap@21 null (|heapseg#sm| temp1@3 null) newPMask@5))) (and (= Heap@23 Heap@22) (= (ControlFlow 0 61) 60)))) anon1211_correct)))
(let ((anon1872_Else_correct  (=> (and (HasDirectPerm Mask@48 null (heapseg temp1@3 null)) (= Heap@19 Heap@16)) (and (=> (= (ControlFlow 0 64) 61) anon1873_Then_correct) (=> (= (ControlFlow 0 64) 62) anon1873_Else_correct)))))
(let ((anon1872_Then_correct  (=> (and (and (not (HasDirectPerm Mask@48 null (heapseg temp1@3 null))) (= Heap@17 (MapType0Store Heap@16 null (|heapseg#sm| temp1@3 null) ZeroPMask))) (and (= Heap@18 (MapType0Store Heap@17 null (heapseg temp1@3 null) freshVersion@2)) (= Heap@19 Heap@18))) (and (=> (= (ControlFlow 0 63) 61) anon1873_Then_correct) (=> (= (ControlFlow 0 63) 62) anon1873_Else_correct)))))
(let ((anon1207_correct  (=> (= Mask@48 (MapType1Store Mask@47 null (heapseg temp1@3 null) (real_2_U (+ (U_2_real (MapType1Select Mask@47 null (heapseg temp1@3 null))) FullPerm)))) (=> (and (and (state Heap@16 Mask@48) (state Heap@16 Mask@48)) (and (|heapseg#trigger| Heap@16 (heapseg temp1@3 null)) (= (MapType0Select Heap@16 null (heapseg temp1@3 null)) (FrameFragment (ite (not (= temp1@3 null)) (CombineFrames (MapType0Select Heap@16 null (tree temp1@3)) (CombineFrames (FrameFragment (MapType0Select Heap@16 temp1@3 sibling)) (CombineFrames (MapType0Select Heap@16 null (heapseg (MapType0Select Heap@16 temp1@3 sibling) null)) (FrameFragment (ite (not (= (MapType0Select Heap@16 temp1@3 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 65) 63) anon1872_Then_correct) (=> (= (ControlFlow 0 65) 64) anon1872_Else_correct))))))
(let ((anon1871_Else_correct  (=> (= (MapType0Select Heap@16 temp1@3 sibling) null) (=> (and (= Mask@47 Mask@46) (= (ControlFlow 0 69) 65)) anon1207_correct))))
(let ((anon1871_Then_correct  (=> (not (= (MapType0Select Heap@16 temp1@3 sibling) null)) (and (=> (= (ControlFlow 0 67) (- 0 68)) (= (treeParent Heap@16 temp1@3) (segParent Heap@16 (MapType0Select Heap@16 temp1@3 sibling) null))) (=> (= (treeParent Heap@16 temp1@3) (segParent Heap@16 (MapType0Select Heap@16 temp1@3 sibling) null)) (=> (and (= Mask@47 Mask@46) (= (ControlFlow 0 67) 65)) anon1207_correct))))))
(let ((anon1205_correct  (=> (and (= Mask@46 (MapType1Store Mask@45 null (heapseg (MapType0Select Heap@16 temp1@3 sibling) null) (real_2_U (- (U_2_real (MapType1Select Mask@45 null (heapseg (MapType0Select Heap@16 temp1@3 sibling) null))) FullPerm)))) (InsidePredicate (heapseg temp1@3 null) (MapType0Select Heap@16 null (heapseg temp1@3 null)) (heapseg (MapType0Select Heap@16 temp1@3 sibling) null) (MapType0Select Heap@16 null (heapseg (MapType0Select Heap@16 temp1@3 sibling) null)))) (and (=> (= (ControlFlow 0 70) 67) anon1871_Then_correct) (=> (= (ControlFlow 0 70) 69) anon1871_Else_correct)))))
(let ((anon1870_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 73) 70)) anon1205_correct)))
(let ((anon1870_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 71) (- 0 72)) (<= FullPerm (U_2_real (MapType1Select Mask@45 null (heapseg (MapType0Select Heap@16 temp1@3 sibling) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@45 null (heapseg (MapType0Select Heap@16 temp1@3 sibling) null)))) (=> (= (ControlFlow 0 71) 70) anon1205_correct))))))
(let ((anon1203_correct  (=> (= Mask@45 (MapType1Store Mask@44 temp1@3 sibling (real_2_U (- (U_2_real (MapType1Select Mask@44 temp1@3 sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 74) 71) anon1870_Then_correct) (=> (= (ControlFlow 0 74) 73) anon1870_Else_correct)))))
(let ((anon1869_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 77) 74)) anon1203_correct)))
(let ((anon1869_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 75) (- 0 76)) (<= FullPerm (U_2_real (MapType1Select Mask@44 temp1@3 sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@44 temp1@3 sibling))) (=> (= (ControlFlow 0 75) 74) anon1203_correct))))))
(let ((anon1201_correct  (=> (and (= Mask@44 (MapType1Store Mask@43 null (tree temp1@3) (real_2_U (- (U_2_real (MapType1Select Mask@43 null (tree temp1@3))) FullPerm)))) (InsidePredicate (heapseg temp1@3 null) (MapType0Select Heap@16 null (heapseg temp1@3 null)) (tree temp1@3) (MapType0Select Heap@16 null (tree temp1@3)))) (and (=> (= (ControlFlow 0 78) 75) anon1869_Then_correct) (=> (= (ControlFlow 0 78) 77) anon1869_Else_correct)))))
(let ((anon1868_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 81) 78)) anon1201_correct)))
(let ((anon1868_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 79) (- 0 80)) (<= FullPerm (U_2_real (MapType1Select Mask@43 null (tree temp1@3))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@43 null (tree temp1@3)))) (=> (= (ControlFlow 0 79) 78) anon1201_correct))))))
(let ((anon1867_Then_correct  (=> (not (= temp1@3 null)) (and (=> (= (ControlFlow 0 82) 79) anon1868_Then_correct) (=> (= (ControlFlow 0 82) 81) anon1868_Else_correct)))))
(let ((anon1867_Else_correct  (=> (= temp1@3 null) (=> (and (= Mask@47 Mask@43) (= (ControlFlow 0 66) 65)) anon1207_correct))))
(let ((anon1198_correct  (=> (state Heap@15 Mask@43) (and (=> (= (ControlFlow 0 83) (- 0 84)) (= FullPerm (U_2_real (MapType1Select Mask@43 temp1@3 sibling)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@43 temp1@3 sibling))) (=> (and (= Heap@16 (MapType0Store Heap@15 temp1@3 sibling temp2@0)) (state Heap@16 Mask@43)) (and (=> (= (ControlFlow 0 83) 82) anon1867_Then_correct) (=> (= (ControlFlow 0 83) 66) anon1867_Else_correct))))))))
(let ((anon1865_Else_correct  (and (=> (= (ControlFlow 0 86) (- 0 87)) (< (segDegree Heap@15 temp2@0 null 0) (segDegree Heap@15 temp2@0 null 1))) (=> (< (segDegree Heap@15 temp2@0 null 0) (segDegree Heap@15 temp2@0 null 1)) (=> (= (ControlFlow 0 86) 83) anon1198_correct)))))
(let ((anon1862_Then_correct  (=> (< 1 (segLength Heap@15 temp2@0 null)) (and (and (and (and (=> (= (ControlFlow 0 98) 86) anon1865_Else_correct) (=> (= (ControlFlow 0 98) 95) anon1866_Then_correct)) (=> (= (ControlFlow 0 98) 97) anon1866_Else_correct)) (=> (= (ControlFlow 0 98) 90) anon1864_Then_correct)) (=> (= (ControlFlow 0 98) 92) anon1864_Else_correct)))))
(let ((anon1862_Else_correct  (=> (and (<= (segLength Heap@15 temp2@0 null) 1) (= (ControlFlow 0 85) 83)) anon1198_correct)))
(let ((anon1184_correct  (=> (and (state Heap@15 Mask@43) (state Heap@15 Mask@43)) (and (and (and (=> (= (ControlFlow 0 99) 98) anon1862_Then_correct) (=> (= (ControlFlow 0 99) 85) anon1862_Else_correct)) (=> (= (ControlFlow 0 99) 57) anon1861_Then_correct)) (=> (= (ControlFlow 0 99) 59) anon1861_Else_correct)))))
(let ((anon1859_Else_correct  (=> (= (MapType0Select Heap@15 temp1@3 sibling) null) (=> (and (= Mask@43 Mask@42) (= (ControlFlow 0 102) 99)) anon1184_correct))))
(let ((anon1859_Then_correct  (=> (not (= (MapType0Select Heap@15 temp1@3 sibling) null)) (=> (and (and (state Heap@15 Mask@42) (= (treeParent Heap@15 temp1@3) (segParent Heap@15 (MapType0Select Heap@15 temp1@3 sibling) null))) (and (= Mask@43 Mask@42) (= (ControlFlow 0 101) 99))) anon1184_correct))))
(let ((anon1858_Then_correct  (=> (and (not (= temp1@3 null)) (= Mask@40 (MapType1Store Mask@39 null (tree temp1@3) (real_2_U (+ (U_2_real (MapType1Select Mask@39 null (tree temp1@3))) FullPerm))))) (=> (and (and (and (InsidePredicate (heapseg temp1@3 null) (MapType0Select Heap@15 null (heapseg temp1@3 null)) (tree temp1@3) (MapType0Select Heap@15 null (tree temp1@3))) (state Heap@15 Mask@40)) (and (not (= temp1@3 null)) (= Mask@41 (MapType1Store Mask@40 temp1@3 sibling (real_2_U (+ (U_2_real (MapType1Select Mask@40 temp1@3 sibling)) FullPerm)))))) (and (and (state Heap@15 Mask@41) (= Mask@42 (MapType1Store Mask@41 null (heapseg (MapType0Select Heap@15 temp1@3 sibling) null) (real_2_U (+ (U_2_real (MapType1Select Mask@41 null (heapseg (MapType0Select Heap@15 temp1@3 sibling) null))) FullPerm))))) (and (InsidePredicate (heapseg temp1@3 null) (MapType0Select Heap@15 null (heapseg temp1@3 null)) (heapseg (MapType0Select Heap@15 temp1@3 sibling) null) (MapType0Select Heap@15 null (heapseg (MapType0Select Heap@15 temp1@3 sibling) null))) (state Heap@15 Mask@42)))) (and (=> (= (ControlFlow 0 103) 101) anon1859_Then_correct) (=> (= (ControlFlow 0 103) 102) anon1859_Else_correct))))))
(let ((anon1858_Else_correct  (=> (= temp1@3 null) (=> (and (= Mask@43 Mask@39) (= (ControlFlow 0 100) 99)) anon1184_correct))))
(let ((anon1857_Else_correct  (=> (and (HasDirectPerm Mask@39 null (heapseg temp1@3 null)) (= Heap@15 ExhaleHeap@1)) (and (=> (= (ControlFlow 0 105) 103) anon1858_Then_correct) (=> (= (ControlFlow 0 105) 100) anon1858_Else_correct)))))
(let ((anon1857_Then_correct  (=> (not (HasDirectPerm Mask@39 null (heapseg temp1@3 null))) (=> (and (= Heap@14 (MapType0Store ExhaleHeap@1 null (heapseg temp1@3 null) newVersion@0)) (= Heap@15 Heap@14)) (and (=> (= (ControlFlow 0 104) 103) anon1858_Then_correct) (=> (= (ControlFlow 0 104) 100) anon1858_Else_correct))))))
(let ((anon1179_correct  (=> (= Mask@39 (MapType1Store Mask@38 null (heapseg temp1@3 null) (real_2_U (- (U_2_real (MapType1Select Mask@38 null (heapseg temp1@3 null))) FullPerm)))) (and (=> (= (ControlFlow 0 106) 104) anon1857_Then_correct) (=> (= (ControlFlow 0 106) 105) anon1857_Else_correct)))))
(let ((anon1856_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 109) 106)) anon1179_correct)))
(let ((anon1856_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 107) (- 0 108)) (<= FullPerm (U_2_real (MapType1Select Mask@38 null (heapseg temp1@3 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@38 null (heapseg temp1@3 null)))) (=> (= (ControlFlow 0 107) 106) anon1179_correct))))))
(let ((anon1177_correct  (=> (and (and (state ExhaleHeap@1 Mask@38) (state ExhaleHeap@1 Mask@38)) (and (|heapseg#trigger| ExhaleHeap@1 (heapseg temp1@3 null)) (= (MapType0Select ExhaleHeap@1 null (heapseg temp1@3 null)) (FrameFragment (ite (not (= temp1@3 null)) (CombineFrames (MapType0Select ExhaleHeap@1 null (tree temp1@3)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@1 temp1@3 sibling)) (CombineFrames (MapType0Select ExhaleHeap@1 null (heapseg (MapType0Select ExhaleHeap@1 temp1@3 sibling) null)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@1 temp1@3 sibling) null)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 110) 107) anon1856_Then_correct) (=> (= (ControlFlow 0 110) 109) anon1856_Else_correct)))))
(let ((anon1855_Else_correct  (=> (and (= temp2@0 null) (= (ControlFlow 0 112) 110)) anon1177_correct)))
(let ((anon1855_Then_correct  (=> (and (and (not (= temp2@0 null)) (state ExhaleHeap@1 Mask@38)) (and (= (segParent ExhaleHeap@1 temp2@0 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (= (ControlFlow 0 111) 110))) anon1177_correct)))
(let ((anon1175_correct  (=> (and (state ExhaleHeap@1 Mask@38) (= (segParent ExhaleHeap@1 temp1@3 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (and (=> (= (ControlFlow 0 113) 111) anon1855_Then_correct) (=> (= (ControlFlow 0 113) 112) anon1855_Else_correct)))))
(let ((anon1854_Else_correct  (=> (and (not (and (not (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)) (not (= temp2@0 null)))) (= (ControlFlow 0 115) 113)) anon1175_correct)))
(let ((anon1854_Then_correct  (=> (and (and (and (not (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)) (not (= temp2@0 null))) (state ExhaleHeap@1 Mask@38)) (and (= (segParent ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (segParent ExhaleHeap@1 temp2@0 null)) (= (ControlFlow 0 114) 113))) anon1175_correct)))
(let ((anon1853_Else_correct  (=> (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (and (=> (= (ControlFlow 0 117) 114) anon1854_Then_correct) (=> (= (ControlFlow 0 117) 115) anon1854_Else_correct)))))
(let ((anon1853_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)) (=> (and (state ExhaleHeap@1 Mask@38) (= (segParent ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (segParent ExhaleHeap@1 temp1@3 null))) (and (=> (= (ControlFlow 0 116) 114) anon1854_Then_correct) (=> (= (ControlFlow 0 116) 115) anon1854_Else_correct))))))
(let ((anon1852_Else_correct  (=> (= temp2@0 null) (and (=> (= (ControlFlow 0 119) 116) anon1853_Then_correct) (=> (= (ControlFlow 0 119) 117) anon1853_Else_correct)))))
(let ((anon1852_Then_correct  (=> (not (= temp2@0 null)) (=> (and (state ExhaleHeap@1 Mask@38) (= (segParent ExhaleHeap@1 temp1@3 null) (segParent ExhaleHeap@1 temp2@0 null))) (and (=> (= (ControlFlow 0 118) 116) anon1853_Then_correct) (=> (= (ControlFlow 0 118) 117) anon1853_Else_correct))))))
(let ((anon1169_correct  (=> (and (state ExhaleHeap@1 Mask@38) (= (+ (+ (segSize ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (segSize ExhaleHeap@1 temp1@3 null)) (segSize ExhaleHeap@1 temp2@0 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null)))) (and (=> (= (ControlFlow 0 120) 118) anon1852_Then_correct) (=> (= (ControlFlow 0 120) 119) anon1852_Else_correct)))))
(let ((anon1851_Else_correct  (=> (and (not (and (<= 2 (+ (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (segLength ExhaleHeap@1 temp1@3 null))) (= (ite (<= 2 (segLength ExhaleHeap@1 temp1@3 null)) (segDegree ExhaleHeap@1 temp1@3 null (- (segLength ExhaleHeap@1 temp1@3 null) 2)) (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1))) (segDegree ExhaleHeap@1 temp1@3 null (- (segLength ExhaleHeap@1 temp1@3 null) 1))))) (= (ControlFlow 0 123) 120)) anon1169_correct)))
(let ((anon1851_Then_correct  (=> (and (and (and (<= 2 (+ (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (segLength ExhaleHeap@1 temp1@3 null))) (= (ite (<= 2 (segLength ExhaleHeap@1 temp1@3 null)) (segDegree ExhaleHeap@1 temp1@3 null (- (segLength ExhaleHeap@1 temp1@3 null) 2)) (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1))) (segDegree ExhaleHeap@1 temp1@3 null (- (segLength ExhaleHeap@1 temp1@3 null) 1)))) (state ExhaleHeap@1 Mask@38)) (and (< (segDegree ExhaleHeap@1 temp1@3 null (- (segLength ExhaleHeap@1 temp1@3 null) 1)) (segDegree ExhaleHeap@1 temp2@0 null 0)) (= (ControlFlow 0 122) 120))) anon1169_correct)))
(let ((anon1850_Then_correct  (=> (< 0 (segLength ExhaleHeap@1 temp2@0 null)) (=> (and (state ExhaleHeap@1 Mask@38) (<= (segDegree ExhaleHeap@1 temp1@3 null (- (segLength ExhaleHeap@1 temp1@3 null) 1)) (segDegree ExhaleHeap@1 temp2@0 null 0))) (and (=> (= (ControlFlow 0 124) 122) anon1851_Then_correct) (=> (= (ControlFlow 0 124) 123) anon1851_Else_correct))))))
(let ((anon1850_Else_correct  (=> (and (<= (segLength ExhaleHeap@1 temp2@0 null) 0) (= (ControlFlow 0 121) 120)) anon1169_correct)))
(let ((anon1849_Else_correct  (=> (not (and (<= 2 (segLength ExhaleHeap@1 temp1@3 null)) (= (segDegree ExhaleHeap@1 temp1@3 null 0) (segDegree ExhaleHeap@1 temp1@3 null 1)))) (and (=> (= (ControlFlow 0 127) 124) anon1850_Then_correct) (=> (= (ControlFlow 0 127) 121) anon1850_Else_correct)))))
(let ((anon1849_Then_correct  (=> (and (and (<= 2 (segLength ExhaleHeap@1 temp1@3 null)) (= (segDegree ExhaleHeap@1 temp1@3 null 0) (segDegree ExhaleHeap@1 temp1@3 null 1))) (and (state ExhaleHeap@1 Mask@38) (< (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1)) (segDegree ExhaleHeap@1 temp1@3 null 0)))) (and (=> (= (ControlFlow 0 126) 124) anon1850_Then_correct) (=> (= (ControlFlow 0 126) 121) anon1850_Else_correct)))))
(let ((anon1848_Else_correct  (=> (not (and (<= 2 (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)) (= (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1)) (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 2))))) (and (=> (= (ControlFlow 0 129) 126) anon1849_Then_correct) (=> (= (ControlFlow 0 129) 127) anon1849_Else_correct)))))
(let ((anon1848_Then_correct  (=> (and (and (<= 2 (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)) (= (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1)) (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 2)))) (and (state ExhaleHeap@1 Mask@38) (< (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1)) (segDegree ExhaleHeap@1 temp1@3 null 0)))) (and (=> (= (ControlFlow 0 128) 126) anon1849_Then_correct) (=> (= (ControlFlow 0 128) 127) anon1849_Else_correct)))))
(let ((anon1847_Then_correct  (=> (< 0 (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)) (=> (and (state ExhaleHeap@1 Mask@38) (<= (segDegree ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3 (- (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 1)) (segDegree ExhaleHeap@1 temp1@3 null 0))) (and (=> (= (ControlFlow 0 130) 128) anon1848_Then_correct) (=> (= (ControlFlow 0 130) 129) anon1848_Else_correct))))))
(let ((anon1847_Else_correct  (=> (<= (segLength ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) 0) (and (=> (= (ControlFlow 0 125) 124) anon1850_Then_correct) (=> (= (ControlFlow 0 125) 121) anon1850_Else_correct)))))
(let ((anon1769_Else_correct  (=> (not (not (= (MapType0Select ExhaleHeap@1 temp1@3 sibling) null))) (=> (and (and (state ExhaleHeap@1 Mask@29) (not (= temp1@3 null))) (and (= Mask@35 (MapType1Store Mask@29 null (heapseg temp1@3 null) (real_2_U (+ (U_2_real (MapType1Select Mask@29 null (heapseg temp1@3 null))) FullPerm)))) (state ExhaleHeap@1 Mask@35))) (=> (and (and (and (and (state ExhaleHeap@1 Mask@35) (presorted ExhaleHeap@1 temp1@3 null)) (and (= Mask@36 (MapType1Store Mask@35 null (heapseg temp2@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@35 null (heapseg temp2@0 null))) FullPerm)))) (state ExhaleHeap@1 Mask@36))) (and (and (state ExhaleHeap@1 Mask@36) (sorted ExhaleHeap@1 temp2@0 null)) (and (not (= this@@66 null)) (= Mask@37 (MapType1Store Mask@36 this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select Mask@36 this@@66 Nodes)) FullPerm))))))) (and (and (and (state ExhaleHeap@1 Mask@37) (not (= (MapType0Select ExhaleHeap@1 this@@66 Nodes) null))) (and (= Mask@38 (MapType1Store Mask@37 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3) (real_2_U (+ (U_2_real (MapType1Select Mask@37 null (heapseg (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3))) FullPerm)))) (state ExhaleHeap@1 Mask@38))) (and (and (state ExhaleHeap@1 Mask@38) (presorted ExhaleHeap@1 (MapType0Select ExhaleHeap@1 this@@66 Nodes) temp1@3)) (and (state ExhaleHeap@1 Mask@38) (< 0 (segLength ExhaleHeap@1 temp1@3 null)))))) (and (=> (= (ControlFlow 0 131) 130) anon1847_Then_correct) (=> (= (ControlFlow 0 131) 125) anon1847_Else_correct)))))))
(let ((anon782_correct  (=> (and (IdenticalOnKnownLocations Heap@13 ExhaleHeap@1 Mask@29) (U_2_bool (MapType0Select ExhaleHeap@1 temp1@3 $allocated))) (and (and (=> (= (ControlFlow 0 709) 708) anon1649_Then_correct) (=> (= (ControlFlow 0 709) 381) anon1769_Then_correct)) (=> (= (ControlFlow 0 709) 131) anon1769_Else_correct)))))
(let ((anon1648_Else_correct  (=> (and (= temp2@0 null) (= (ControlFlow 0 712) 709)) anon782_correct)))
(let ((anon1648_Then_correct  (=> (not (= temp2@0 null)) (and (=> (= (ControlFlow 0 710) (- 0 711)) (= (segParent Heap@13 temp2@0 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (=> (= (segParent Heap@13 temp2@0 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (=> (= (ControlFlow 0 710) 709) anon782_correct))))))
(let ((anon780_correct  (and (=> (= (ControlFlow 0 713) (- 0 714)) (= (segParent Heap@13 temp1@2 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (=> (= (segParent Heap@13 temp1@2 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (and (=> (= (ControlFlow 0 713) 710) anon1648_Then_correct) (=> (= (ControlFlow 0 713) 712) anon1648_Else_correct))))))
(let ((anon1647_Else_correct  (=> (and (not (and (not (= (MapType0Select Heap@13 this@@66 Nodes) temp1@2)) (not (= temp2@0 null)))) (= (ControlFlow 0 717) 713)) anon780_correct)))
(let ((anon1647_Then_correct  (=> (and (not (= (MapType0Select Heap@13 this@@66 Nodes) temp1@2)) (not (= temp2@0 null))) (and (=> (= (ControlFlow 0 715) (- 0 716)) (= (segParent Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2) (segParent Heap@13 temp2@0 null))) (=> (= (segParent Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2) (segParent Heap@13 temp2@0 null)) (=> (= (ControlFlow 0 715) 713) anon780_correct))))))
(let ((anon1646_Else_correct  (=> (= (MapType0Select Heap@13 this@@66 Nodes) temp1@2) (and (=> (= (ControlFlow 0 720) 715) anon1647_Then_correct) (=> (= (ControlFlow 0 720) 717) anon1647_Else_correct)))))
(let ((anon1646_Then_correct  (=> (not (= (MapType0Select Heap@13 this@@66 Nodes) temp1@2)) (and (=> (= (ControlFlow 0 718) (- 0 719)) (= (segParent Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2) (segParent Heap@13 temp1@2 null))) (=> (= (segParent Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2) (segParent Heap@13 temp1@2 null)) (and (=> (= (ControlFlow 0 718) 715) anon1647_Then_correct) (=> (= (ControlFlow 0 718) 717) anon1647_Else_correct)))))))
(let ((anon1645_Else_correct  (=> (= temp2@0 null) (and (=> (= (ControlFlow 0 723) 718) anon1646_Then_correct) (=> (= (ControlFlow 0 723) 720) anon1646_Else_correct)))))
(let ((anon1645_Then_correct  (=> (not (= temp2@0 null)) (and (=> (= (ControlFlow 0 721) (- 0 722)) (= (segParent Heap@13 temp1@2 null) (segParent Heap@13 temp2@0 null))) (=> (= (segParent Heap@13 temp1@2 null) (segParent Heap@13 temp2@0 null)) (and (=> (= (ControlFlow 0 721) 718) anon1646_Then_correct) (=> (= (ControlFlow 0 721) 720) anon1646_Else_correct)))))))
(let ((anon774_correct  (and (=> (= (ControlFlow 0 724) (- 0 725)) (= (+ (+ (segSize Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2) (segSize Heap@13 temp1@2 null)) (segSize Heap@13 temp2@0 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null)))) (=> (= (+ (+ (segSize Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2) (segSize Heap@13 temp1@2 null)) (segSize Heap@13 temp2@0 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null))) (and (=> (= (ControlFlow 0 724) 721) anon1645_Then_correct) (=> (= (ControlFlow 0 724) 723) anon1645_Else_correct))))))
(let ((anon1644_Else_correct  (=> (and (not (and (<= 2 (+ (segLength Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2) (segLength Heap@13 temp1@2 null))) (= (ite (<= 2 (segLength Heap@13 temp1@2 null)) (segDegree Heap@13 temp1@2 null (- (segLength Heap@13 temp1@2 null) 2)) (segDegree Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2 (- (segLength Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2) 1))) (segDegree Heap@13 temp1@2 null (- (segLength Heap@13 temp1@2 null) 1))))) (= (ControlFlow 0 729) 724)) anon774_correct)))
(let ((anon1644_Then_correct  (=> (and (<= 2 (+ (segLength Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2) (segLength Heap@13 temp1@2 null))) (= (ite (<= 2 (segLength Heap@13 temp1@2 null)) (segDegree Heap@13 temp1@2 null (- (segLength Heap@13 temp1@2 null) 2)) (segDegree Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2 (- (segLength Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2) 1))) (segDegree Heap@13 temp1@2 null (- (segLength Heap@13 temp1@2 null) 1)))) (and (=> (= (ControlFlow 0 727) (- 0 728)) (< (segDegree Heap@13 temp1@2 null (- (segLength Heap@13 temp1@2 null) 1)) (segDegree Heap@13 temp2@0 null 0))) (=> (< (segDegree Heap@13 temp1@2 null (- (segLength Heap@13 temp1@2 null) 1)) (segDegree Heap@13 temp2@0 null 0)) (=> (= (ControlFlow 0 727) 724) anon774_correct))))))
(let ((anon1643_Then_correct  (=> (< 0 (segLength Heap@13 temp2@0 null)) (and (=> (= (ControlFlow 0 730) (- 0 731)) (<= (segDegree Heap@13 temp1@2 null (- (segLength Heap@13 temp1@2 null) 1)) (segDegree Heap@13 temp2@0 null 0))) (=> (<= (segDegree Heap@13 temp1@2 null (- (segLength Heap@13 temp1@2 null) 1)) (segDegree Heap@13 temp2@0 null 0)) (and (=> (= (ControlFlow 0 730) 727) anon1644_Then_correct) (=> (= (ControlFlow 0 730) 729) anon1644_Else_correct)))))))
(let ((anon1643_Else_correct  (=> (and (<= (segLength Heap@13 temp2@0 null) 0) (= (ControlFlow 0 726) 724)) anon774_correct)))
(let ((anon1642_Else_correct  (=> (not (and (<= 2 (segLength Heap@13 temp1@2 null)) (= (segDegree Heap@13 temp1@2 null 0) (segDegree Heap@13 temp1@2 null 1)))) (and (=> (= (ControlFlow 0 735) 730) anon1643_Then_correct) (=> (= (ControlFlow 0 735) 726) anon1643_Else_correct)))))
(let ((anon1642_Then_correct  (=> (and (<= 2 (segLength Heap@13 temp1@2 null)) (= (segDegree Heap@13 temp1@2 null 0) (segDegree Heap@13 temp1@2 null 1))) (and (=> (= (ControlFlow 0 733) (- 0 734)) (< (segDegree Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2 (- (segLength Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2) 1)) (segDegree Heap@13 temp1@2 null 0))) (=> (< (segDegree Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2 (- (segLength Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2) 1)) (segDegree Heap@13 temp1@2 null 0)) (and (=> (= (ControlFlow 0 733) 730) anon1643_Then_correct) (=> (= (ControlFlow 0 733) 726) anon1643_Else_correct)))))))
(let ((anon1641_Else_correct  (=> (not (and (<= 2 (segLength Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2)) (= (segDegree Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2 (- (segLength Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2) 1)) (segDegree Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2 (- (segLength Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2) 2))))) (and (=> (= (ControlFlow 0 738) 733) anon1642_Then_correct) (=> (= (ControlFlow 0 738) 735) anon1642_Else_correct)))))
(let ((anon1641_Then_correct  (=> (and (<= 2 (segLength Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2)) (= (segDegree Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2 (- (segLength Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2) 1)) (segDegree Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2 (- (segLength Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2) 2)))) (and (=> (= (ControlFlow 0 736) (- 0 737)) (< (segDegree Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2 (- (segLength Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2) 1)) (segDegree Heap@13 temp1@2 null 0))) (=> (< (segDegree Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2 (- (segLength Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2) 1)) (segDegree Heap@13 temp1@2 null 0)) (and (=> (= (ControlFlow 0 736) 733) anon1642_Then_correct) (=> (= (ControlFlow 0 736) 735) anon1642_Else_correct)))))))
(let ((anon1640_Then_correct  (=> (< 0 (segLength Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2)) (and (=> (= (ControlFlow 0 739) (- 0 740)) (<= (segDegree Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2 (- (segLength Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2) 1)) (segDegree Heap@13 temp1@2 null 0))) (=> (<= (segDegree Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2 (- (segLength Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2) 1)) (segDegree Heap@13 temp1@2 null 0)) (and (=> (= (ControlFlow 0 739) 736) anon1641_Then_correct) (=> (= (ControlFlow 0 739) 738) anon1641_Else_correct)))))))
(let ((anon1640_Else_correct  (=> (<= (segLength Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2) 0) (and (=> (= (ControlFlow 0 732) 730) anon1643_Then_correct) (=> (= (ControlFlow 0 732) 726) anon1643_Else_correct)))))
(let ((anon766_correct  (=> (= Mask@29 (MapType1Store Mask@28 null (heapseg (MapType0Select Heap@13 this@@66 Nodes) temp1@2) (real_2_U (- (U_2_real (MapType1Select Mask@28 null (heapseg (MapType0Select Heap@13 this@@66 Nodes) temp1@2))) FullPerm)))) (and (=> (= (ControlFlow 0 741) (- 0 743)) (presorted Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2)) (=> (presorted Heap@13 (MapType0Select Heap@13 this@@66 Nodes) temp1@2) (and (=> (= (ControlFlow 0 741) (- 0 742)) (< 0 (segLength Heap@13 temp1@2 null))) (=> (< 0 (segLength Heap@13 temp1@2 null)) (and (=> (= (ControlFlow 0 741) 739) anon1640_Then_correct) (=> (= (ControlFlow 0 741) 732) anon1640_Else_correct)))))))))
(let ((anon1639_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 746) 741)) anon766_correct)))
(let ((anon1639_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 744) (- 0 745)) (<= FullPerm (U_2_real (MapType1Select Mask@28 null (heapseg (MapType0Select Heap@13 this@@66 Nodes) temp1@2))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@28 null (heapseg (MapType0Select Heap@13 this@@66 Nodes) temp1@2)))) (=> (= (ControlFlow 0 744) 741) anon766_correct))))))
(let ((anon764_correct  (=> (= Mask@28 (MapType1Store Mask@27 this@@66 Nodes (real_2_U (- (U_2_real (MapType1Select Mask@27 this@@66 Nodes)) FullPerm)))) (and (=> (= (ControlFlow 0 747) (- 0 748)) (not (= (MapType0Select Heap@13 this@@66 Nodes) null))) (=> (not (= (MapType0Select Heap@13 this@@66 Nodes) null)) (and (=> (= (ControlFlow 0 747) 744) anon1639_Then_correct) (=> (= (ControlFlow 0 747) 746) anon1639_Else_correct)))))))
(let ((anon1638_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 751) 747)) anon764_correct)))
(let ((anon1638_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 749) (- 0 750)) (<= FullPerm (U_2_real (MapType1Select Mask@27 this@@66 Nodes)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@27 this@@66 Nodes))) (=> (= (ControlFlow 0 749) 747) anon764_correct))))))
(let ((anon762_correct  (=> (= Mask@27 (MapType1Store Mask@26 null (heapseg temp2@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@26 null (heapseg temp2@0 null))) FullPerm)))) (and (=> (= (ControlFlow 0 752) (- 0 753)) (sorted Heap@13 temp2@0 null)) (=> (sorted Heap@13 temp2@0 null) (and (=> (= (ControlFlow 0 752) 749) anon1638_Then_correct) (=> (= (ControlFlow 0 752) 751) anon1638_Else_correct)))))))
(let ((anon1637_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 756) 752)) anon762_correct)))
(let ((anon1637_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 754) (- 0 755)) (<= FullPerm (U_2_real (MapType1Select Mask@26 null (heapseg temp2@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@26 null (heapseg temp2@0 null)))) (=> (= (ControlFlow 0 754) 752) anon762_correct))))))
(let ((anon760_correct  (=> (= Mask@26 (MapType1Store Mask@25 null (heapseg temp1@2 null) (real_2_U (- (U_2_real (MapType1Select Mask@25 null (heapseg temp1@2 null))) FullPerm)))) (and (=> (= (ControlFlow 0 757) (- 0 758)) (presorted Heap@13 temp1@2 null)) (=> (presorted Heap@13 temp1@2 null) (and (=> (= (ControlFlow 0 757) 754) anon1637_Then_correct) (=> (= (ControlFlow 0 757) 756) anon1637_Else_correct)))))))
(let ((anon1636_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 761) 757)) anon760_correct)))
(let ((anon1636_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 759) (- 0 760)) (<= FullPerm (U_2_real (MapType1Select Mask@25 null (heapseg temp1@2 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@25 null (heapseg temp1@2 null)))) (=> (= (ControlFlow 0 759) 757) anon760_correct))))))
(let ((anon758_correct  (=> (and (state Heap@13 Mask@25) (state Heap@13 Mask@25)) (and (=> (= (ControlFlow 0 762) (- 0 763)) (not (= temp1@2 null))) (=> (not (= temp1@2 null)) (and (=> (= (ControlFlow 0 762) 759) anon1636_Then_correct) (=> (= (ControlFlow 0 762) 761) anon1636_Else_correct)))))))
(let ((anon1635_Else_correct  (=> (= (MapType0Select Heap@9 this@@66 Nodes) temp1@2) (=> (and (= Heap@13 Heap@9) (= (ControlFlow 0 765) 762)) anon758_correct))))
(let ((anon1635_Then_correct  (=> (and (and (and (not (= (MapType0Select Heap@9 this@@66 Nodes) temp1@2)) (forall ((o_82 T@U) (f_86 T@U) ) (! (let ((B@@64 (FieldTypeInv1 (type f_86))))
(let ((A@@65 (FieldTypeInv0 (type f_86))))
 (=> (and (and (= (type o_82) RefType) (= (type f_86) (FieldType A@@65 B@@64))) (or (U_2_bool (MapType1Select (MapType0Select Heap@9 null (|heapseg#sm| (MapType0Select Heap@9 this@@66 Nodes) temp1@2)) o_82 f_86)) (U_2_bool (MapType1Select (MapType0Select Heap@9 null (|tree#sm| (MapType0Select Heap@9 this@@66 Nodes))) o_82 f_86)))) (U_2_bool (MapType1Select newPMask@2 o_82 f_86)))))
 :qid |stdinbpl.10653:33|
 :skolemid |184|
 :pattern ( (MapType1Select newPMask@2 o_82 f_86))
))) (and (= Heap@10 (MapType0Store Heap@9 null (|heapseg#sm| (MapType0Select Heap@9 this@@66 Nodes) temp1@2) newPMask@2)) (= Heap@11 (MapType0Store Heap@10 null (|heapseg#sm| (MapType0Select Heap@10 this@@66 Nodes) temp1@2) (MapType1Store (MapType0Select Heap@10 null (|heapseg#sm| (MapType0Select Heap@10 this@@66 Nodes) temp1@2)) (MapType0Select Heap@10 this@@66 Nodes) sibling (bool_2_U true)))))) (and (and (forall ((o_83 T@U) (f_87 T@U) ) (! (let ((B@@65 (FieldTypeInv1 (type f_87))))
(let ((A@@66 (FieldTypeInv0 (type f_87))))
 (=> (and (and (= (type o_83) RefType) (= (type f_87) (FieldType A@@66 B@@65))) (or (U_2_bool (MapType1Select (MapType0Select Heap@11 null (|heapseg#sm| (MapType0Select Heap@11 this@@66 Nodes) temp1@2)) o_83 f_87)) (U_2_bool (MapType1Select (MapType0Select Heap@11 null (|heapseg#sm| (MapType0Select Heap@11 (MapType0Select Heap@11 this@@66 Nodes) sibling) temp1@2)) o_83 f_87)))) (U_2_bool (MapType1Select newPMask@3 o_83 f_87)))))
 :qid |stdinbpl.10660:33|
 :skolemid |185|
 :pattern ( (MapType1Select newPMask@3 o_83 f_87))
)) (= Heap@12 (MapType0Store Heap@11 null (|heapseg#sm| (MapType0Select Heap@11 this@@66 Nodes) temp1@2) newPMask@3))) (and (= Heap@13 Heap@12) (= (ControlFlow 0 764) 762)))) anon758_correct)))
(let ((anon1634_Else_correct  (=> (and (HasDirectPerm Mask@25 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@2)) (= Heap@9 ExhaleHeap@0)) (and (=> (= (ControlFlow 0 767) 764) anon1635_Then_correct) (=> (= (ControlFlow 0 767) 765) anon1635_Else_correct)))))
(let ((anon1634_Then_correct  (=> (and (and (not (HasDirectPerm Mask@25 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@2))) (= Heap@7 (MapType0Store ExhaleHeap@0 null (|heapseg#sm| (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@2) ZeroPMask))) (and (= Heap@8 (MapType0Store Heap@7 null (heapseg (MapType0Select Heap@7 this@@66 Nodes) temp1@2) freshVersion@1)) (= Heap@9 Heap@8))) (and (=> (= (ControlFlow 0 766) 764) anon1635_Then_correct) (=> (= (ControlFlow 0 766) 765) anon1635_Else_correct)))))
(let ((anon754_correct  (=> (= Mask@25 (MapType1Store Mask@24 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@2) (real_2_U (+ (U_2_real (MapType1Select Mask@24 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@2))) FullPerm)))) (=> (and (and (state ExhaleHeap@0 Mask@25) (state ExhaleHeap@0 Mask@25)) (and (|heapseg#trigger| ExhaleHeap@0 (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@2)) (= (MapType0Select ExhaleHeap@0 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@2)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@2)) (CombineFrames (MapType0Select ExhaleHeap@0 null (tree (MapType0Select ExhaleHeap@0 this@@66 Nodes))) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) sibling)) (CombineFrames (MapType0Select ExhaleHeap@0 null (heapseg (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) sibling) temp1@2)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) sibling) temp1@2)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 768) 766) anon1634_Then_correct) (=> (= (ControlFlow 0 768) 767) anon1634_Else_correct))))))
(let ((anon1633_Else_correct  (=> (= (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) sibling) temp1@2) (=> (and (= Mask@24 Mask@23) (= (ControlFlow 0 772) 768)) anon754_correct))))
(let ((anon1633_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) sibling) temp1@2)) (and (=> (= (ControlFlow 0 770) (- 0 771)) (= (treeParent ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes)) (segParent ExhaleHeap@0 (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) sibling) temp1@2))) (=> (= (treeParent ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes)) (segParent ExhaleHeap@0 (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) sibling) temp1@2)) (=> (and (= Mask@24 Mask@23) (= (ControlFlow 0 770) 768)) anon754_correct))))))
(let ((anon752_correct  (=> (and (= Mask@23 (MapType1Store Mask@22 null (heapseg (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) sibling) temp1@2) (real_2_U (- (U_2_real (MapType1Select Mask@22 null (heapseg (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) sibling) temp1@2))) FullPerm)))) (InsidePredicate (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@2) (MapType0Select ExhaleHeap@0 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@2)) (heapseg (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) sibling) temp1@2) (MapType0Select ExhaleHeap@0 null (heapseg (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) sibling) temp1@2)))) (and (=> (= (ControlFlow 0 773) 770) anon1633_Then_correct) (=> (= (ControlFlow 0 773) 772) anon1633_Else_correct)))))
(let ((anon1632_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 776) 773)) anon752_correct)))
(let ((anon1632_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 774) (- 0 775)) (<= FullPerm (U_2_real (MapType1Select Mask@22 null (heapseg (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) sibling) temp1@2))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@22 null (heapseg (MapType0Select ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) sibling) temp1@2)))) (=> (= (ControlFlow 0 774) 773) anon752_correct))))))
(let ((anon750_correct  (=> (= Mask@22 (MapType1Store Mask@21 (MapType0Select ExhaleHeap@0 this@@66 Nodes) sibling (real_2_U (- (U_2_real (MapType1Select Mask@21 (MapType0Select ExhaleHeap@0 this@@66 Nodes) sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 777) 774) anon1632_Then_correct) (=> (= (ControlFlow 0 777) 776) anon1632_Else_correct)))))
(let ((anon1631_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 780) 777)) anon750_correct)))
(let ((anon1631_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 778) (- 0 779)) (<= FullPerm (U_2_real (MapType1Select Mask@21 (MapType0Select ExhaleHeap@0 this@@66 Nodes) sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@21 (MapType0Select ExhaleHeap@0 this@@66 Nodes) sibling))) (=> (= (ControlFlow 0 778) 777) anon750_correct))))))
(let ((anon748_correct  (=> (and (= Mask@21 (MapType1Store Mask@20 null (tree (MapType0Select ExhaleHeap@0 this@@66 Nodes)) (real_2_U (- (U_2_real (MapType1Select Mask@20 null (tree (MapType0Select ExhaleHeap@0 this@@66 Nodes)))) FullPerm)))) (InsidePredicate (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@2) (MapType0Select ExhaleHeap@0 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@2)) (tree (MapType0Select ExhaleHeap@0 this@@66 Nodes)) (MapType0Select ExhaleHeap@0 null (tree (MapType0Select ExhaleHeap@0 this@@66 Nodes))))) (and (=> (= (ControlFlow 0 781) 778) anon1631_Then_correct) (=> (= (ControlFlow 0 781) 780) anon1631_Else_correct)))))
(let ((anon1630_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 784) 781)) anon748_correct)))
(let ((anon1630_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 782) (- 0 783)) (<= FullPerm (U_2_real (MapType1Select Mask@20 null (tree (MapType0Select ExhaleHeap@0 this@@66 Nodes)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@20 null (tree (MapType0Select ExhaleHeap@0 this@@66 Nodes))))) (=> (= (ControlFlow 0 782) 781) anon748_correct))))))
(let ((anon1629_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@2)) (and (=> (= (ControlFlow 0 785) 782) anon1630_Then_correct) (=> (= (ControlFlow 0 785) 784) anon1630_Else_correct)))))
(let ((anon1629_Else_correct  (=> (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@2) (=> (and (= Mask@24 Mask@20) (= (ControlFlow 0 769) 768)) anon754_correct))))
(let ((anon1628_Then_correct  (=> (= temp1@1 null) (and (=> (= (ControlFlow 0 786) (- 0 788)) (HasDirectPerm Mask@20 this@@66 Nodes)) (=> (HasDirectPerm Mask@20 this@@66 Nodes) (=> (and (= temp1@2 (MapType0Select ExhaleHeap@0 this@@66 Nodes)) (state ExhaleHeap@0 Mask@20)) (and (=> (= (ControlFlow 0 786) (- 0 787)) (HasDirectPerm Mask@20 this@@66 Nodes)) (=> (HasDirectPerm Mask@20 this@@66 Nodes) (and (=> (= (ControlFlow 0 786) 785) anon1629_Then_correct) (=> (= (ControlFlow 0 786) 769) anon1629_Else_correct))))))))))
(let ((anon1628_Else_correct  (=> (not (= temp1@1 null)) (=> (and (and (= Mask@49 Mask@20) (= temp1@4 temp1@1)) (and (= Heap@24 ExhaleHeap@0) (= (ControlFlow 0 55) 53))) anon1212_correct))))
(let ((anon744_correct  (=> (and (state ExhaleHeap@0 Mask@20) (state ExhaleHeap@0 Mask@20)) (and (=> (= (ControlFlow 0 789) 786) anon1628_Then_correct) (=> (= (ControlFlow 0 789) 55) anon1628_Else_correct)))))
(let ((anon1627_Else_correct  (=> (and (= temp2@0 null) (= (ControlFlow 0 791) 789)) anon744_correct)))
(let ((anon1627_Then_correct  (=> (and (and (not (= temp2@0 null)) (state ExhaleHeap@0 Mask@20)) (and (= (segParent ExhaleHeap@0 temp2@0 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (= (ControlFlow 0 790) 789))) anon744_correct)))
(let ((anon1626_Else_correct  (=> (= temp1@1 null) (and (=> (= (ControlFlow 0 793) 790) anon1627_Then_correct) (=> (= (ControlFlow 0 793) 791) anon1627_Else_correct)))))
(let ((anon1626_Then_correct  (=> (not (= temp1@1 null)) (=> (and (state ExhaleHeap@0 Mask@20) (= (segParent ExhaleHeap@0 temp1@1 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (and (=> (= (ControlFlow 0 792) 790) anon1627_Then_correct) (=> (= (ControlFlow 0 792) 791) anon1627_Else_correct))))))
(let ((anon1625_Else_correct  (=> (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (and (=> (= (ControlFlow 0 795) 792) anon1626_Then_correct) (=> (= (ControlFlow 0 795) 793) anon1626_Else_correct)))))
(let ((anon1625_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (=> (and (state ExhaleHeap@0 Mask@20) (= (segParent ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (and (=> (= (ControlFlow 0 794) 792) anon1626_Then_correct) (=> (= (ControlFlow 0 794) 793) anon1626_Else_correct))))))
(let ((anon1624_Else_correct  (=> (not (and (not (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (not (= temp2@0 null)))) (and (=> (= (ControlFlow 0 797) 794) anon1625_Then_correct) (=> (= (ControlFlow 0 797) 795) anon1625_Else_correct)))))
(let ((anon1624_Then_correct  (=> (and (and (not (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (not (= temp2@0 null))) (and (state ExhaleHeap@0 Mask@20) (= (segParent ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (segParent ExhaleHeap@0 temp2@0 null)))) (and (=> (= (ControlFlow 0 796) 794) anon1625_Then_correct) (=> (= (ControlFlow 0 796) 795) anon1625_Else_correct)))))
(let ((anon1623_Else_correct  (=> (not (and (not (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (not (= temp1@1 null)))) (and (=> (= (ControlFlow 0 799) 796) anon1624_Then_correct) (=> (= (ControlFlow 0 799) 797) anon1624_Else_correct)))))
(let ((anon1623_Then_correct  (=> (and (and (not (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (not (= temp1@1 null))) (and (state ExhaleHeap@0 Mask@20) (= (segParent ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (segParent ExhaleHeap@0 temp1@1 null)))) (and (=> (= (ControlFlow 0 798) 796) anon1624_Then_correct) (=> (= (ControlFlow 0 798) 797) anon1624_Else_correct)))))
(let ((anon1622_Else_correct  (=> (not (and (not (= temp1@1 null)) (not (= temp2@0 null)))) (and (=> (= (ControlFlow 0 801) 798) anon1623_Then_correct) (=> (= (ControlFlow 0 801) 799) anon1623_Else_correct)))))
(let ((anon1622_Then_correct  (=> (and (and (not (= temp1@1 null)) (not (= temp2@0 null))) (and (state ExhaleHeap@0 Mask@20) (= (segParent ExhaleHeap@0 temp1@1 null) (segParent ExhaleHeap@0 temp2@0 null)))) (and (=> (= (ControlFlow 0 800) 798) anon1623_Then_correct) (=> (= (ControlFlow 0 800) 799) anon1623_Else_correct)))))
(let ((anon732_correct  (=> (and (state ExhaleHeap@0 Mask@20) (= (+ (+ (segSize ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (segSize ExhaleHeap@0 temp1@1 null)) (segSize ExhaleHeap@0 temp2@0 null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null)))) (and (=> (= (ControlFlow 0 802) 800) anon1622_Then_correct) (=> (= (ControlFlow 0 802) 801) anon1622_Else_correct)))))
(let ((anon1621_Else_correct  (=> (and (not (and (not (= temp1@1 (MapType0Select ExhaleHeap@0 this@@66 Nodes))) (and (< 0 (segLength ExhaleHeap@0 temp1@1 null)) (< 0 (segLength ExhaleHeap@0 temp2@0 null))))) (= (ControlFlow 0 804) 802)) anon732_correct)))
(let ((anon1621_Then_correct  (=> (and (and (and (not (= temp1@1 (MapType0Select ExhaleHeap@0 this@@66 Nodes))) (and (< 0 (segLength ExhaleHeap@0 temp1@1 null)) (< 0 (segLength ExhaleHeap@0 temp2@0 null)))) (state ExhaleHeap@0 Mask@20)) (and (<= (segDegree ExhaleHeap@0 temp1@1 null 0) (segDegree ExhaleHeap@0 temp2@0 null 0)) (= (ControlFlow 0 803) 802))) anon732_correct)))
(let ((anon1620_Else_correct  (=> (not (and (< 0 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (and (< 0 (segLength ExhaleHeap@0 temp1@1 null)) (< 0 (segLength ExhaleHeap@0 temp2@0 null))))) (and (=> (= (ControlFlow 0 806) 803) anon1621_Then_correct) (=> (= (ControlFlow 0 806) 804) anon1621_Else_correct)))))
(let ((anon1620_Then_correct  (=> (and (and (< 0 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (and (< 0 (segLength ExhaleHeap@0 temp1@1 null)) (< 0 (segLength ExhaleHeap@0 temp2@0 null)))) (and (state ExhaleHeap@0 Mask@20) (or (< (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 temp1@1 null 0)) (< (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 temp2@0 null 0))))) (and (=> (= (ControlFlow 0 805) 803) anon1621_Then_correct) (=> (= (ControlFlow 0 805) 804) anon1621_Else_correct)))))
(let ((anon1619_Else_correct  (=> (not (and (<= 2 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (= (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 2))))) (and (=> (= (ControlFlow 0 809) 805) anon1620_Then_correct) (=> (= (ControlFlow 0 809) 806) anon1620_Else_correct)))))
(let ((anon1619_Then_correct  (=> (and (and (<= 2 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (= (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 2)))) (and (state ExhaleHeap@0 Mask@20) (< (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 temp2@0 null 0)))) (and (=> (= (ControlFlow 0 808) 805) anon1620_Then_correct) (=> (= (ControlFlow 0 808) 806) anon1620_Else_correct)))))
(let ((anon1618_Then_correct  (=> (and (and (< 0 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (< 0 (segLength ExhaleHeap@0 temp2@0 null))) (and (state ExhaleHeap@0 Mask@20) (<= (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 temp2@0 null 0)))) (and (=> (= (ControlFlow 0 810) 808) anon1619_Then_correct) (=> (= (ControlFlow 0 810) 809) anon1619_Else_correct)))))
(let ((anon1618_Else_correct  (=> (not (and (< 0 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (< 0 (segLength ExhaleHeap@0 temp2@0 null)))) (and (=> (= (ControlFlow 0 807) 805) anon1620_Then_correct) (=> (= (ControlFlow 0 807) 806) anon1620_Else_correct)))))
(let ((anon1617_Else_correct  (=> (not (and (<= 2 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (= (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 2))))) (and (=> (= (ControlFlow 0 813) 810) anon1618_Then_correct) (=> (= (ControlFlow 0 813) 807) anon1618_Else_correct)))))
(let ((anon1617_Then_correct  (=> (and (and (<= 2 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (= (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 2)))) (and (state ExhaleHeap@0 Mask@20) (< (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 temp1@1 null 0)))) (and (=> (= (ControlFlow 0 812) 810) anon1618_Then_correct) (=> (= (ControlFlow 0 812) 807) anon1618_Else_correct)))))
(let ((anon1616_Then_correct  (=> (and (and (< 0 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (< 0 (segLength ExhaleHeap@0 temp1@1 null))) (and (state ExhaleHeap@0 Mask@20) (<= (segDegree ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1 (- (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) 1)) (segDegree ExhaleHeap@0 temp1@1 null 0)))) (and (=> (= (ControlFlow 0 814) 812) anon1617_Then_correct) (=> (= (ControlFlow 0 814) 813) anon1617_Else_correct)))))
(let ((anon1616_Else_correct  (=> (not (and (< 0 (segLength ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1)) (< 0 (segLength ExhaleHeap@0 temp1@1 null)))) (and (=> (= (ControlFlow 0 811) 810) anon1618_Then_correct) (=> (= (ControlFlow 0 811) 807) anon1618_Else_correct)))))
(let ((anon1424_Else_correct  (=> (and (not (and (not (= temp1@1 null)) (not (= temp2@0 null)))) (state ExhaleHeap@0 Mask@11)) (=> (and (and (and (and (= Mask@17 (MapType1Store Mask@11 null (heapseg temp1@1 null) (real_2_U (+ (U_2_real (MapType1Select Mask@11 null (heapseg temp1@1 null))) FullPerm)))) (state ExhaleHeap@0 Mask@17)) (and (state ExhaleHeap@0 Mask@17) (sorted ExhaleHeap@0 temp1@1 null))) (and (and (= Mask@18 (MapType1Store Mask@17 null (heapseg temp2@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@17 null (heapseg temp2@0 null))) FullPerm)))) (state ExhaleHeap@0 Mask@18)) (and (state ExhaleHeap@0 Mask@18) (sorted ExhaleHeap@0 temp2@0 null)))) (and (and (and (not (= this@@66 null)) (= Mask@19 (MapType1Store Mask@18 this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select Mask@18 this@@66 Nodes)) FullPerm))))) (and (state ExhaleHeap@0 Mask@19) (not (= (MapType0Select ExhaleHeap@0 this@@66 Nodes) null)))) (and (and (= Mask@20 (MapType1Store Mask@19 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1) (real_2_U (+ (U_2_real (MapType1Select Mask@19 null (heapseg (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))) FullPerm)))) (state ExhaleHeap@0 Mask@20)) (and (state ExhaleHeap@0 Mask@20) (presorted ExhaleHeap@0 (MapType0Select ExhaleHeap@0 this@@66 Nodes) temp1@1))))) (and (=> (= (ControlFlow 0 815) 814) anon1616_Then_correct) (=> (= (ControlFlow 0 815) 811) anon1616_Else_correct))))))
(let ((anon87_correct  (=> (IdenticalOnKnownLocations Heap@6 ExhaleHeap@0 Mask@11) (=> (and (U_2_bool (MapType0Select ExhaleHeap@0 temp2@0 $allocated)) (U_2_bool (MapType0Select ExhaleHeap@0 temp1@1 $allocated))) (and (and (=> (= (ControlFlow 0 1807) 1806) anon1284_Then_correct) (=> (= (ControlFlow 0 1807) 1415) anon1424_Then_correct)) (=> (= (ControlFlow 0 1807) 815) anon1424_Else_correct))))))
(let ((anon1283_Else_correct  (=> (and (= binHeap null) (= (ControlFlow 0 1810) 1807)) anon87_correct)))
(let ((anon1283_Then_correct  (=> (not (= binHeap null)) (and (=> (= (ControlFlow 0 1808) (- 0 1809)) (= (segParent Heap@6 binHeap null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (=> (= (segParent Heap@6 binHeap null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (=> (= (ControlFlow 0 1808) 1807) anon87_correct))))))
(let ((anon1282_Else_correct  (=> (= temp1@0 null) (and (=> (= (ControlFlow 0 1813) 1808) anon1283_Then_correct) (=> (= (ControlFlow 0 1813) 1810) anon1283_Else_correct)))))
(let ((anon1282_Then_correct  (=> (not (= temp1@0 null)) (and (=> (= (ControlFlow 0 1811) (- 0 1812)) (= (segParent Heap@6 temp1@0 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (=> (= (segParent Heap@6 temp1@0 null) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (and (=> (= (ControlFlow 0 1811) 1808) anon1283_Then_correct) (=> (= (ControlFlow 0 1811) 1810) anon1283_Else_correct)))))))
(let ((anon1281_Else_correct  (=> (= (MapType0Select Heap@6 this@@66 Nodes) temp1@0) (and (=> (= (ControlFlow 0 1816) 1811) anon1282_Then_correct) (=> (= (ControlFlow 0 1816) 1813) anon1282_Else_correct)))))
(let ((anon1281_Then_correct  (=> (not (= (MapType0Select Heap@6 this@@66 Nodes) temp1@0)) (and (=> (= (ControlFlow 0 1814) (- 0 1815)) (= (segParent Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null))) (=> (= (segParent Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null)) (and (=> (= (ControlFlow 0 1814) 1811) anon1282_Then_correct) (=> (= (ControlFlow 0 1814) 1813) anon1282_Else_correct)))))))
(let ((anon1280_Else_correct  (=> (not (and (not (= (MapType0Select Heap@6 this@@66 Nodes) temp1@0)) (not (= binHeap null)))) (and (=> (= (ControlFlow 0 1819) 1814) anon1281_Then_correct) (=> (= (ControlFlow 0 1819) 1816) anon1281_Else_correct)))))
(let ((anon1280_Then_correct  (=> (and (not (= (MapType0Select Heap@6 this@@66 Nodes) temp1@0)) (not (= binHeap null))) (and (=> (= (ControlFlow 0 1817) (- 0 1818)) (= (segParent Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) (segParent Heap@6 binHeap null))) (=> (= (segParent Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) (segParent Heap@6 binHeap null)) (and (=> (= (ControlFlow 0 1817) 1814) anon1281_Then_correct) (=> (= (ControlFlow 0 1817) 1816) anon1281_Else_correct)))))))
(let ((anon1279_Else_correct  (=> (not (and (not (= (MapType0Select Heap@6 this@@66 Nodes) temp1@0)) (not (= temp1@0 null)))) (and (=> (= (ControlFlow 0 1822) 1817) anon1280_Then_correct) (=> (= (ControlFlow 0 1822) 1819) anon1280_Else_correct)))))
(let ((anon1279_Then_correct  (=> (and (not (= (MapType0Select Heap@6 this@@66 Nodes) temp1@0)) (not (= temp1@0 null))) (and (=> (= (ControlFlow 0 1820) (- 0 1821)) (= (segParent Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) (segParent Heap@6 temp1@0 null))) (=> (= (segParent Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) (segParent Heap@6 temp1@0 null)) (and (=> (= (ControlFlow 0 1820) 1817) anon1280_Then_correct) (=> (= (ControlFlow 0 1820) 1819) anon1280_Else_correct)))))))
(let ((anon1278_Else_correct  (=> (not (and (not (= temp1@0 null)) (not (= binHeap null)))) (and (=> (= (ControlFlow 0 1825) 1820) anon1279_Then_correct) (=> (= (ControlFlow 0 1825) 1822) anon1279_Else_correct)))))
(let ((anon1278_Then_correct  (=> (and (not (= temp1@0 null)) (not (= binHeap null))) (and (=> (= (ControlFlow 0 1823) (- 0 1824)) (= (segParent Heap@6 temp1@0 null) (segParent Heap@6 binHeap null))) (=> (= (segParent Heap@6 temp1@0 null) (segParent Heap@6 binHeap null)) (and (=> (= (ControlFlow 0 1823) 1820) anon1279_Then_correct) (=> (= (ControlFlow 0 1823) 1822) anon1279_Else_correct)))))))
(let ((anon75_correct  (and (=> (= (ControlFlow 0 1826) (- 0 1827)) (= (+ (+ (segSize Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) (segSize Heap@6 temp1@0 null)) (segSize Heap@6 binHeap null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null)))) (=> (= (+ (+ (segSize Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) (segSize Heap@6 temp1@0 null)) (segSize Heap@6 binHeap null)) (+ (segSize Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segSize Heap@@61 binHeap null))) (and (=> (= (ControlFlow 0 1826) 1823) anon1278_Then_correct) (=> (= (ControlFlow 0 1826) 1825) anon1278_Else_correct))))))
(let ((anon1277_Else_correct  (=> (and (not (and (not (= temp1@0 (MapType0Select Heap@6 this@@66 Nodes))) (and (< 0 (segLength Heap@6 temp1@0 null)) (< 0 (segLength Heap@6 binHeap null))))) (= (ControlFlow 0 1830) 1826)) anon75_correct)))
(let ((anon1277_Then_correct  (=> (and (not (= temp1@0 (MapType0Select Heap@6 this@@66 Nodes))) (and (< 0 (segLength Heap@6 temp1@0 null)) (< 0 (segLength Heap@6 binHeap null)))) (and (=> (= (ControlFlow 0 1828) (- 0 1829)) (<= (segDegree Heap@6 temp1@0 null 0) (segDegree Heap@6 binHeap null 0))) (=> (<= (segDegree Heap@6 temp1@0 null 0) (segDegree Heap@6 binHeap null 0)) (=> (= (ControlFlow 0 1828) 1826) anon75_correct))))))
(let ((anon1276_Else_correct  (=> (not (and (< 0 (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0)) (and (< 0 (segLength Heap@6 temp1@0 null)) (< 0 (segLength Heap@6 binHeap null))))) (and (=> (= (ControlFlow 0 1833) 1828) anon1277_Then_correct) (=> (= (ControlFlow 0 1833) 1830) anon1277_Else_correct)))))
(let ((anon1276_Then_correct  (=> (and (< 0 (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0)) (and (< 0 (segLength Heap@6 temp1@0 null)) (< 0 (segLength Heap@6 binHeap null)))) (and (=> (= (ControlFlow 0 1831) (- 0 1832)) (or (< (segDegree Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0 (- (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) 1)) (segDegree Heap@6 temp1@0 null 0)) (< (segDegree Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0 (- (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) 1)) (segDegree Heap@6 binHeap null 0)))) (=> (or (< (segDegree Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0 (- (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) 1)) (segDegree Heap@6 temp1@0 null 0)) (< (segDegree Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0 (- (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) 1)) (segDegree Heap@6 binHeap null 0))) (and (=> (= (ControlFlow 0 1831) 1828) anon1277_Then_correct) (=> (= (ControlFlow 0 1831) 1830) anon1277_Else_correct)))))))
(let ((anon1275_Else_correct  (=> (not (and (<= 2 (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0)) (= (segDegree Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0 (- (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) 1)) (segDegree Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0 (- (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) 2))))) (and (=> (= (ControlFlow 0 1837) 1831) anon1276_Then_correct) (=> (= (ControlFlow 0 1837) 1833) anon1276_Else_correct)))))
(let ((anon1275_Then_correct  (=> (and (<= 2 (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0)) (= (segDegree Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0 (- (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) 1)) (segDegree Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0 (- (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) 2)))) (and (=> (= (ControlFlow 0 1835) (- 0 1836)) (< (segDegree Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0 (- (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) 1)) (segDegree Heap@6 binHeap null 0))) (=> (< (segDegree Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0 (- (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) 1)) (segDegree Heap@6 binHeap null 0)) (and (=> (= (ControlFlow 0 1835) 1831) anon1276_Then_correct) (=> (= (ControlFlow 0 1835) 1833) anon1276_Else_correct)))))))
(let ((anon1274_Then_correct  (=> (and (< 0 (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0)) (< 0 (segLength Heap@6 binHeap null))) (and (=> (= (ControlFlow 0 1838) (- 0 1839)) (<= (segDegree Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0 (- (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) 1)) (segDegree Heap@6 binHeap null 0))) (=> (<= (segDegree Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0 (- (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) 1)) (segDegree Heap@6 binHeap null 0)) (and (=> (= (ControlFlow 0 1838) 1835) anon1275_Then_correct) (=> (= (ControlFlow 0 1838) 1837) anon1275_Else_correct)))))))
(let ((anon1274_Else_correct  (=> (not (and (< 0 (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0)) (< 0 (segLength Heap@6 binHeap null)))) (and (=> (= (ControlFlow 0 1834) 1831) anon1276_Then_correct) (=> (= (ControlFlow 0 1834) 1833) anon1276_Else_correct)))))
(let ((anon1273_Else_correct  (=> (not (and (<= 2 (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0)) (= (segDegree Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0 (- (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) 1)) (segDegree Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0 (- (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) 2))))) (and (=> (= (ControlFlow 0 1843) 1838) anon1274_Then_correct) (=> (= (ControlFlow 0 1843) 1834) anon1274_Else_correct)))))
(let ((anon1273_Then_correct  (=> (and (<= 2 (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0)) (= (segDegree Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0 (- (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) 1)) (segDegree Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0 (- (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) 2)))) (and (=> (= (ControlFlow 0 1841) (- 0 1842)) (< (segDegree Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0 (- (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) 1)) (segDegree Heap@6 temp1@0 null 0))) (=> (< (segDegree Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0 (- (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) 1)) (segDegree Heap@6 temp1@0 null 0)) (and (=> (= (ControlFlow 0 1841) 1838) anon1274_Then_correct) (=> (= (ControlFlow 0 1841) 1834) anon1274_Else_correct)))))))
(let ((anon1272_Then_correct  (=> (and (< 0 (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0)) (< 0 (segLength Heap@6 temp1@0 null))) (and (=> (= (ControlFlow 0 1844) (- 0 1845)) (<= (segDegree Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0 (- (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) 1)) (segDegree Heap@6 temp1@0 null 0))) (=> (<= (segDegree Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0 (- (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) 1)) (segDegree Heap@6 temp1@0 null 0)) (and (=> (= (ControlFlow 0 1844) 1841) anon1273_Then_correct) (=> (= (ControlFlow 0 1844) 1843) anon1273_Else_correct)))))))
(let ((anon1272_Else_correct  (=> (not (and (< 0 (segLength Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0)) (< 0 (segLength Heap@6 temp1@0 null)))) (and (=> (= (ControlFlow 0 1840) 1838) anon1274_Then_correct) (=> (= (ControlFlow 0 1840) 1834) anon1274_Else_correct)))))
(let ((anon65_correct  (=> (= Mask@11 (MapType1Store Mask@10 null (heapseg (MapType0Select Heap@6 this@@66 Nodes) temp1@0) (real_2_U (- (U_2_real (MapType1Select Mask@10 null (heapseg (MapType0Select Heap@6 this@@66 Nodes) temp1@0))) FullPerm)))) (and (=> (= (ControlFlow 0 1846) (- 0 1847)) (presorted Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0)) (=> (presorted Heap@6 (MapType0Select Heap@6 this@@66 Nodes) temp1@0) (and (=> (= (ControlFlow 0 1846) 1844) anon1272_Then_correct) (=> (= (ControlFlow 0 1846) 1840) anon1272_Else_correct)))))))
(let ((anon1271_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1850) 1846)) anon65_correct)))
(let ((anon1271_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1848) (- 0 1849)) (<= FullPerm (U_2_real (MapType1Select Mask@10 null (heapseg (MapType0Select Heap@6 this@@66 Nodes) temp1@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@10 null (heapseg (MapType0Select Heap@6 this@@66 Nodes) temp1@0)))) (=> (= (ControlFlow 0 1848) 1846) anon65_correct))))))
(let ((anon63_correct  (=> (= Mask@10 (MapType1Store Mask@9 this@@66 Nodes (real_2_U (- (U_2_real (MapType1Select Mask@9 this@@66 Nodes)) FullPerm)))) (and (=> (= (ControlFlow 0 1851) (- 0 1852)) (not (= (MapType0Select Heap@6 this@@66 Nodes) null))) (=> (not (= (MapType0Select Heap@6 this@@66 Nodes) null)) (and (=> (= (ControlFlow 0 1851) 1848) anon1271_Then_correct) (=> (= (ControlFlow 0 1851) 1850) anon1271_Else_correct)))))))
(let ((anon1270_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1855) 1851)) anon63_correct)))
(let ((anon1270_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1853) (- 0 1854)) (<= FullPerm (U_2_real (MapType1Select Mask@9 this@@66 Nodes)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@9 this@@66 Nodes))) (=> (= (ControlFlow 0 1853) 1851) anon63_correct))))))
(let ((anon61_correct  (=> (= Mask@9 (MapType1Store Mask@8 null (heapseg binHeap null) (real_2_U (- (U_2_real (MapType1Select Mask@8 null (heapseg binHeap null))) FullPerm)))) (and (=> (= (ControlFlow 0 1856) (- 0 1857)) (sorted Heap@6 binHeap null)) (=> (sorted Heap@6 binHeap null) (and (=> (= (ControlFlow 0 1856) 1853) anon1270_Then_correct) (=> (= (ControlFlow 0 1856) 1855) anon1270_Else_correct)))))))
(let ((anon1269_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1860) 1856)) anon61_correct)))
(let ((anon1269_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1858) (- 0 1859)) (<= FullPerm (U_2_real (MapType1Select Mask@8 null (heapseg binHeap null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@8 null (heapseg binHeap null)))) (=> (= (ControlFlow 0 1858) 1856) anon61_correct))))))
(let ((anon59_correct  (=> (= Mask@8 (MapType1Store Mask@7 null (heapseg temp1@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@7 null (heapseg temp1@0 null))) FullPerm)))) (and (=> (= (ControlFlow 0 1861) (- 0 1862)) (sorted Heap@6 temp1@0 null)) (=> (sorted Heap@6 temp1@0 null) (and (=> (= (ControlFlow 0 1861) 1858) anon1269_Then_correct) (=> (= (ControlFlow 0 1861) 1860) anon1269_Else_correct)))))))
(let ((anon1268_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1865) 1861)) anon59_correct)))
(let ((anon1268_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1863) (- 0 1864)) (<= FullPerm (U_2_real (MapType1Select Mask@7 null (heapseg temp1@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@7 null (heapseg temp1@0 null)))) (=> (= (ControlFlow 0 1863) 1861) anon59_correct))))))
(let ((anon57_correct  (=> (and (state Heap@6 Mask@7) (state Heap@6 Mask@7)) (and (=> (= (ControlFlow 0 1866) 1863) anon1268_Then_correct) (=> (= (ControlFlow 0 1866) 1865) anon1268_Else_correct)))))
(let ((anon1267_Else_correct  (=> (= (MapType0Select Heap@2 this@@66 Nodes) temp1@0) (=> (and (= Heap@6 Heap@2) (= (ControlFlow 0 1868) 1866)) anon57_correct))))
(let ((anon1267_Then_correct  (=> (and (and (and (not (= (MapType0Select Heap@2 this@@66 Nodes) temp1@0)) (forall ((o_48 T@U) (f_52 T@U) ) (! (let ((B@@66 (FieldTypeInv1 (type f_52))))
(let ((A@@67 (FieldTypeInv0 (type f_52))))
 (=> (and (and (= (type o_48) RefType) (= (type f_52) (FieldType A@@67 B@@66))) (or (U_2_bool (MapType1Select (MapType0Select Heap@2 null (|heapseg#sm| (MapType0Select Heap@2 this@@66 Nodes) temp1@0)) o_48 f_52)) (U_2_bool (MapType1Select (MapType0Select Heap@2 null (|tree#sm| (MapType0Select Heap@2 this@@66 Nodes))) o_48 f_52)))) (U_2_bool (MapType1Select newPMask@0 o_48 f_52)))))
 :qid |stdinbpl.7313:29|
 :skolemid |144|
 :pattern ( (MapType1Select newPMask@0 o_48 f_52))
))) (and (= Heap@3 (MapType0Store Heap@2 null (|heapseg#sm| (MapType0Select Heap@2 this@@66 Nodes) temp1@0) newPMask@0)) (= Heap@4 (MapType0Store Heap@3 null (|heapseg#sm| (MapType0Select Heap@3 this@@66 Nodes) temp1@0) (MapType1Store (MapType0Select Heap@3 null (|heapseg#sm| (MapType0Select Heap@3 this@@66 Nodes) temp1@0)) (MapType0Select Heap@3 this@@66 Nodes) sibling (bool_2_U true)))))) (and (and (forall ((o_49 T@U) (f_53 T@U) ) (! (let ((B@@67 (FieldTypeInv1 (type f_53))))
(let ((A@@68 (FieldTypeInv0 (type f_53))))
 (=> (and (and (= (type o_49) RefType) (= (type f_53) (FieldType A@@68 B@@67))) (or (U_2_bool (MapType1Select (MapType0Select Heap@4 null (|heapseg#sm| (MapType0Select Heap@4 this@@66 Nodes) temp1@0)) o_49 f_53)) (U_2_bool (MapType1Select (MapType0Select Heap@4 null (|heapseg#sm| (MapType0Select Heap@4 (MapType0Select Heap@4 this@@66 Nodes) sibling) temp1@0)) o_49 f_53)))) (U_2_bool (MapType1Select newPMask@1 o_49 f_53)))))
 :qid |stdinbpl.7320:29|
 :skolemid |145|
 :pattern ( (MapType1Select newPMask@1 o_49 f_53))
)) (= Heap@5 (MapType0Store Heap@4 null (|heapseg#sm| (MapType0Select Heap@4 this@@66 Nodes) temp1@0) newPMask@1))) (and (= Heap@6 Heap@5) (= (ControlFlow 0 1867) 1866)))) anon57_correct)))
(let ((anon1266_Else_correct  (=> (and (HasDirectPerm Mask@7 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) temp1@0)) (= Heap@2 Heap@@61)) (and (=> (= (ControlFlow 0 1870) 1867) anon1267_Then_correct) (=> (= (ControlFlow 0 1870) 1868) anon1267_Else_correct)))))
(let ((anon1266_Then_correct  (=> (and (and (not (HasDirectPerm Mask@7 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) temp1@0))) (= Heap@0 (MapType0Store Heap@@61 null (|heapseg#sm| (MapType0Select Heap@@61 this@@66 Nodes) temp1@0) ZeroPMask))) (and (= Heap@1 (MapType0Store Heap@0 null (heapseg (MapType0Select Heap@0 this@@66 Nodes) temp1@0) freshVersion@0)) (= Heap@2 Heap@1))) (and (=> (= (ControlFlow 0 1869) 1867) anon1267_Then_correct) (=> (= (ControlFlow 0 1869) 1868) anon1267_Else_correct)))))
(let ((anon53_correct  (=> (= Mask@7 (MapType1Store Mask@6 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) temp1@0) (real_2_U (+ (U_2_real (MapType1Select Mask@6 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) temp1@0))) FullPerm)))) (=> (and (and (state Heap@@61 Mask@7) (state Heap@@61 Mask@7)) (and (|heapseg#trigger| Heap@@61 (heapseg (MapType0Select Heap@@61 this@@66 Nodes) temp1@0)) (= (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) temp1@0)) (FrameFragment (ite (not (= (MapType0Select Heap@@61 this@@66 Nodes) temp1@0)) (CombineFrames (MapType0Select Heap@@61 null (tree (MapType0Select Heap@@61 this@@66 Nodes))) (CombineFrames (FrameFragment (MapType0Select Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) sibling)) (CombineFrames (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) sibling) temp1@0)) (FrameFragment (ite (not (= (MapType0Select Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) sibling) temp1@0)) EmptyFrame EmptyFrame))))) EmptyFrame))))) (and (=> (= (ControlFlow 0 1871) 1869) anon1266_Then_correct) (=> (= (ControlFlow 0 1871) 1870) anon1266_Else_correct))))))
(let ((anon1265_Else_correct  (=> (= (MapType0Select Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) sibling) temp1@0) (=> (and (= Mask@6 Mask@5) (= (ControlFlow 0 1875) 1871)) anon53_correct))))
(let ((anon1265_Then_correct  (=> (not (= (MapType0Select Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) sibling) temp1@0)) (and (=> (= (ControlFlow 0 1873) (- 0 1874)) (= (treeParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes)) (segParent Heap@@61 (MapType0Select Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) sibling) temp1@0))) (=> (= (treeParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes)) (segParent Heap@@61 (MapType0Select Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) sibling) temp1@0)) (=> (and (= Mask@6 Mask@5) (= (ControlFlow 0 1873) 1871)) anon53_correct))))))
(let ((anon51_correct  (=> (and (= Mask@5 (MapType1Store Mask@4 null (heapseg (MapType0Select Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) sibling) temp1@0) (real_2_U (- (U_2_real (MapType1Select Mask@4 null (heapseg (MapType0Select Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) sibling) temp1@0))) FullPerm)))) (InsidePredicate (heapseg (MapType0Select Heap@@61 this@@66 Nodes) temp1@0) (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) temp1@0)) (heapseg (MapType0Select Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) sibling) temp1@0) (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) sibling) temp1@0)))) (and (=> (= (ControlFlow 0 1876) 1873) anon1265_Then_correct) (=> (= (ControlFlow 0 1876) 1875) anon1265_Else_correct)))))
(let ((anon1264_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1879) 1876)) anon51_correct)))
(let ((anon1264_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1877) (- 0 1878)) (<= FullPerm (U_2_real (MapType1Select Mask@4 null (heapseg (MapType0Select Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) sibling) temp1@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@4 null (heapseg (MapType0Select Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) sibling) temp1@0)))) (=> (= (ControlFlow 0 1877) 1876) anon51_correct))))))
(let ((anon49_correct  (=> (= Mask@4 (MapType1Store Mask@3 (MapType0Select Heap@@61 this@@66 Nodes) sibling (real_2_U (- (U_2_real (MapType1Select Mask@3 (MapType0Select Heap@@61 this@@66 Nodes) sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 1880) 1877) anon1264_Then_correct) (=> (= (ControlFlow 0 1880) 1879) anon1264_Else_correct)))))
(let ((anon1263_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1883) 1880)) anon49_correct)))
(let ((anon1263_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1881) (- 0 1882)) (<= FullPerm (U_2_real (MapType1Select Mask@3 (MapType0Select Heap@@61 this@@66 Nodes) sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@3 (MapType0Select Heap@@61 this@@66 Nodes) sibling))) (=> (= (ControlFlow 0 1881) 1880) anon49_correct))))))
(let ((anon47_correct  (=> (and (= Mask@3 (MapType1Store Mask@2 null (tree (MapType0Select Heap@@61 this@@66 Nodes)) (real_2_U (- (U_2_real (MapType1Select Mask@2 null (tree (MapType0Select Heap@@61 this@@66 Nodes)))) FullPerm)))) (InsidePredicate (heapseg (MapType0Select Heap@@61 this@@66 Nodes) temp1@0) (MapType0Select Heap@@61 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) temp1@0)) (tree (MapType0Select Heap@@61 this@@66 Nodes)) (MapType0Select Heap@@61 null (tree (MapType0Select Heap@@61 this@@66 Nodes))))) (and (=> (= (ControlFlow 0 1884) 1881) anon1263_Then_correct) (=> (= (ControlFlow 0 1884) 1883) anon1263_Else_correct)))))
(let ((anon1262_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 1887) 1884)) anon47_correct)))
(let ((anon1262_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 1885) (- 0 1886)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (tree (MapType0Select Heap@@61 this@@66 Nodes)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (tree (MapType0Select Heap@@61 this@@66 Nodes))))) (=> (= (ControlFlow 0 1885) 1884) anon47_correct))))))
(let ((anon1261_Then_correct  (=> (not (= (MapType0Select Heap@@61 this@@66 Nodes) temp1@0)) (and (=> (= (ControlFlow 0 1888) 1885) anon1262_Then_correct) (=> (= (ControlFlow 0 1888) 1887) anon1262_Else_correct)))))
(let ((anon1261_Else_correct  (=> (= (MapType0Select Heap@@61 this@@66 Nodes) temp1@0) (=> (and (= Mask@6 Mask@2) (= (ControlFlow 0 1872) 1871)) anon53_correct))))
(let ((anon1248_Else_correct  (=> (and (U_2_bool (MapType0Select Heap@@61 temp1 $allocated)) (U_2_bool (MapType0Select Heap@@61 temp2 $allocated))) (and (=> (= (ControlFlow 0 1889) (- 0 1891)) (HasDirectPerm Mask@2 this@@66 Nodes)) (=> (HasDirectPerm Mask@2 this@@66 Nodes) (=> (= temp1@0 (MapType0Select Heap@@61 this@@66 Nodes)) (=> (and (state Heap@@61 Mask@2) (state Heap@@61 Mask@2)) (and (=> (= (ControlFlow 0 1889) (- 0 1890)) (HasDirectPerm Mask@2 this@@66 Nodes)) (=> (HasDirectPerm Mask@2 this@@66 Nodes) (and (=> (= (ControlFlow 0 1889) 1888) anon1261_Then_correct) (=> (= (ControlFlow 0 1889) 1872) anon1261_Else_correct)))))))))))
(let ((anon18_correct  (=> (state Heap@@61 Mask@2) (and (=> (= (ControlFlow 0 1931) 1927) anon1248_Then_correct) (=> (= (ControlFlow 0 1931) 1889) anon1248_Else_correct)))))
(let ((anon1246_Else_correct  (=> (and (= (segParent Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (segParent Heap@@61 binHeap null)) (= (ControlFlow 0 1933) 1931)) anon18_correct)))
(let ((anon1243_Then_correct  (=> (and (not (= binHeap null)) (state Heap@@61 Mask@2)) (and (=> (= (ControlFlow 0 1944) (- 0 1945)) (HasDirectPerm Mask@2 this@@66 Nodes)) (=> (HasDirectPerm Mask@2 this@@66 Nodes) (and (and (and (and (=> (= (ControlFlow 0 1944) 1933) anon1246_Else_correct) (=> (= (ControlFlow 0 1944) 1941) anon1247_Then_correct)) (=> (= (ControlFlow 0 1944) 1943) anon1247_Else_correct)) (=> (= (ControlFlow 0 1944) 1936) anon1245_Then_correct)) (=> (= (ControlFlow 0 1944) 1938) anon1245_Else_correct)))))))
(let ((anon1243_Else_correct  (=> (and (= binHeap null) (= (ControlFlow 0 1932) 1931)) anon18_correct)))
(let ((anon1241_Else_correct  (=> (and (sorted Heap@@61 binHeap null) (state Heap@@61 Mask@2)) (and (=> (= (ControlFlow 0 1946) 1944) anon1243_Then_correct) (=> (= (ControlFlow 0 1946) 1932) anon1243_Else_correct)))))
(let ((anon7_correct true))
(let ((anon1242_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 8) 5)) anon7_correct)))
(let ((anon1242_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 6) (- 0 7)) (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg binHeap null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@2 null (heapseg binHeap null)))) (=> (= (ControlFlow 0 6) 5) anon7_correct))))))
(let ((anon1239_Else_correct  (=> (and (sorted Heap@@61 (MapType0Select Heap@@61 this@@66 Nodes) null) (state Heap@@61 Mask@1)) (and (=> (= (ControlFlow 0 1947) (- 0 1948)) (HasDirectPerm Mask@1 this@@66 Nodes)) (=> (HasDirectPerm Mask@1 this@@66 Nodes) (=> (not (= (MapType0Select Heap@@61 this@@66 Nodes) null)) (=> (and (and (state Heap@@61 Mask@1) (= Mask@2 (MapType1Store Mask@1 null (heapseg binHeap null) (real_2_U (+ (U_2_real (MapType1Select Mask@1 null (heapseg binHeap null))) FullPerm))))) (and (state Heap@@61 Mask@2) (state Heap@@61 Mask@2))) (and (and (=> (= (ControlFlow 0 1947) 1946) anon1241_Else_correct) (=> (= (ControlFlow 0 1947) 6) anon1242_Then_correct)) (=> (= (ControlFlow 0 1947) 8) anon1242_Else_correct)))))))))
(let ((anon3_correct true))
(let ((anon1240_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 4) 1)) anon3_correct)))
(let ((anon1240_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= FullPerm (U_2_real (MapType1Select Mask@1 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@1 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null)))) (=> (= (ControlFlow 0 2) 1) anon3_correct))))))
(let ((anon0_correct  (=> (state Heap@@61 ZeroMask) (=> (and (= AssumeFunctionsAbove (- 0 1)) (U_2_bool (MapType0Select Heap@@61 this@@66 $allocated))) (=> (and (and (U_2_bool (MapType0Select Heap@@61 binHeap $allocated)) (not (= this@@66 null))) (and (= Mask@0 (MapType1Store ZeroMask this@@66 Nodes (real_2_U (+ (U_2_real (MapType1Select ZeroMask this@@66 Nodes)) FullPerm)))) (state Heap@@61 Mask@0))) (and (=> (= (ControlFlow 0 1949) (- 0 1951)) (HasDirectPerm Mask@0 this@@66 Nodes)) (=> (HasDirectPerm Mask@0 this@@66 Nodes) (=> (= Mask@1 (MapType1Store Mask@0 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null) (real_2_U (+ (U_2_real (MapType1Select Mask@0 null (heapseg (MapType0Select Heap@@61 this@@66 Nodes) null))) FullPerm)))) (=> (and (state Heap@@61 Mask@1) (state Heap@@61 Mask@1)) (and (=> (= (ControlFlow 0 1949) (- 0 1950)) (HasDirectPerm Mask@1 this@@66 Nodes)) (=> (HasDirectPerm Mask@1 this@@66 Nodes) (and (and (=> (= (ControlFlow 0 1949) 1947) anon1239_Else_correct) (=> (= (ControlFlow 0 1949) 2) anon1240_Then_correct)) (=> (= (ControlFlow 0 1949) 4) anon1240_Else_correct)))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 1952) 1949) anon0_correct)))
PreconditionGeneratedEntry_correct
))
(check-sat)
