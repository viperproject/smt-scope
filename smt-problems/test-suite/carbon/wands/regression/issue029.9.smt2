(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $allocated () T@U)
(declare-fun val () T@U)
(declare-fun next () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun NormalFieldType () T@T)
(declare-fun RefType () T@T)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun state (T@U T@U) Bool)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun GoodMask (T@U) Bool)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun wand_3 (Bool Bool Real) T@U)
(declare-fun IsWandField (T@U) Bool)
(declare-fun WandType_wand_3Type () T@T)
(declare-fun |wand_3#ft| (Bool Bool Real) T@U)
(declare-fun FrameTypeType () T@T)
(declare-fun getPredWandId (T@U) Int)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun LLC (T@U Int) T@U)
(declare-fun PredicateType_LLCType () T@T)
(declare-fun |LLC#trigger| (T@U T@U) Bool)
(declare-fun |LLC#everUsed| (T@U) Bool)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun P () T@U)
(declare-fun PredicateType_PType () T@T)
(declare-fun Q (Bool) T@U)
(declare-fun PredicateType_QType () T@T)
(declare-fun LL (T@U) T@U)
(declare-fun PredicateType_LLType () T@T)
(declare-fun |Q#trigger| (T@U T@U) Bool)
(declare-fun |Q#everUsed| (T@U) Bool)
(declare-fun |LL#trigger| (T@U T@U) Bool)
(declare-fun |LL#everUsed| (T@U) Bool)
(declare-fun |wand_2#ft| (T@U Real T@U Real T@U Int T@U Real T@U T@U T@U Real T@U Int T@U Real T@U Real T@U T@U T@U Real T@U T@U) T@U)
(declare-fun |wand_2#sm| (T@U Real T@U Real T@U Int T@U Real T@U T@U T@U Real T@U Int T@U Real T@U Real T@U T@U T@U Real T@U T@U) T@U)
(declare-fun WandType_wand_2Type () T@T)
(declare-fun |wand#ft| (Bool Real Bool Real Bool Bool) T@U)
(declare-fun |wand#sm| (Bool Real Bool Real Bool Bool) T@U)
(declare-fun WandType_wandType () T@T)
(declare-fun |wand_3#sm| (Bool Bool Real) T@U)
(declare-fun wand_2 (T@U Real T@U Real T@U Int T@U Real T@U T@U T@U Real T@U Int T@U Real T@U Real T@U T@U T@U Real T@U T@U) T@U)
(declare-fun |Q#sm| (Bool) T@U)
(declare-fun |LLC#sm| (T@U Int) T@U)
(declare-fun |LL#sm| (T@U) T@U)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun wand_4 (T@U Int Real T@U Int Real T@U Int Real T@U T@U T@U Int Real T@U Int) T@U)
(declare-fun WandType_wand_4Type () T@T)
(declare-fun wand_1 (T@U Real T@U Real T@U Int T@U Real T@U T@U T@U Real T@U Int T@U Real) T@U)
(declare-fun WandType_wand_1Type () T@T)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun |wand_4#ft| (T@U Int Real T@U Int Real T@U Int Real T@U T@U T@U Int Real T@U Int) T@U)
(declare-fun |wand_1#ft| (T@U Real T@U Real T@U Int T@U Real T@U T@U T@U Real T@U Int T@U Real) T@U)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun wand (Bool Real Bool Real Bool Bool) T@U)
(declare-fun FullPerm () Real)
(declare-fun |P#trigger| (T@U T@U) Bool)
(declare-fun |P#everUsed| (T@U) Bool)
(declare-fun |wand_4#sm| (T@U Int Real T@U Int Real T@U Int Real T@U T@U T@U Int Real T@U Int) T@U)
(declare-fun |wand_1#sm| (T@U Real T@U Real T@U Int T@U Real T@U T@U T@U Real T@U Int T@U Real) T@U)
(declare-fun |P#sm| () T@U)
(declare-fun ZeroPMask () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@11 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@11 arg1)) 6)
 :qid |ctor:FieldType|
)) (forall ((arg0@@12 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12 arg1@@0)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12 arg1@@0))
))) (forall ((arg0@@13 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@13 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@13 arg1@@1))
))) (= (Ctor NormalFieldType) 7)) (= (type $allocated) (FieldType NormalFieldType boolType))) (= (type val) (FieldType NormalFieldType intType))) (= (Ctor RefType) 8)) (= (type next) (FieldType NormalFieldType RefType))))
(assert (distinct $allocated val next)
)
(assert  (and (and (and (and (and (forall ((arg0@@14 T@T) ) (! (= (Ctor (MapType0Type arg0@@14)) 9)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@15 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@15)) arg0@@15)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@15))
))) (forall ((arg0@@16 T@U) (arg1@@2 T@U) (arg2 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2))))
(= (type (MapType0Select arg0@@16 arg1@@2 arg2)) B))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@16 arg1@@2 arg2))
))) (forall ((arg0@@17 T@U) (arg1@@3 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@3)))
(= (type (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val@@0 T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1))))
 (=> (= (type val@@0) B@@0) (= (MapType0Select (MapType0Store m x0 x1 val@@0) x0 x1) val@@0)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@1 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@1) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@2 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@2) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@3 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@3) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType0Type RefType)) (= (type Heap1) (MapType0Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert  (and (and (and (and (and (and (forall ((arg0@@18 T@T) (arg1@@4 T@T) ) (! (= (Ctor (MapType1Type arg0@@18 arg1@@4)) 10)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@19 T@T) (arg1@@5 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@19 arg1@@5)) arg0@@19)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@19 arg1@@5))
))) (forall ((arg0@@20 T@T) (arg1@@6 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@20 arg1@@6)) arg1@@6)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@20 arg1@@6))
))) (forall ((arg0@@21 T@U) (arg1@@7 T@U) (arg2@@1 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@21))))
(= (type (MapType1Select arg0@@21 arg1@@7 arg2@@1)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@21 arg1@@7 arg2@@1))
))) (forall ((arg0@@22 T@U) (arg1@@8 T@U) (arg2@@2 T@U) (arg3@@0 T@U) ) (! (let ((aVar1@@0 (type arg3@@0)))
(let ((aVar0@@0 (type arg1@@8)))
(= (type (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@4 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@4) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@4) x0@@3 x1@@3) val@@4)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@5 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@5) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@6 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@6) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@7 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@7) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))))
(assert (forall ((Heap T@U) (Mask T@U) ) (!  (=> (and (and (= (type Heap) (MapType0Type RefType)) (= (type Mask) (MapType1Type RefType realType))) (state Heap Mask)) (GoodMask Mask))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap Mask))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType0Type RefType)) (= (type Heap1@@0) (MapType0Type RefType))) (= (type Heap2) (MapType0Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert  (and (= (Ctor WandType_wand_3Type) 11) (forall ((arg0@@23 Bool) (arg1@@9 Bool) (arg2@@3 Real) ) (! (= (type (wand_3 arg0@@23 arg1@@9 arg2@@3)) (FieldType WandType_wand_3Type intType))
 :qid |funType:wand_3|
 :pattern ( (wand_3 arg0@@23 arg1@@9 arg2@@3))
))))
(assert (forall ((arg1@@10 Bool) (arg2@@4 Bool) (arg3@@1 Real) ) (! (IsWandField (wand_3 arg1@@10 arg2@@4 arg3@@1))
 :qid |stdinbpl.215:15|
 :skolemid |29|
 :pattern ( (wand_3 arg1@@10 arg2@@4 arg3@@1))
)))
(assert  (and (= (Ctor FrameTypeType) 12) (forall ((arg0@@24 Bool) (arg1@@11 Bool) (arg2@@5 Real) ) (! (= (type (|wand_3#ft| arg0@@24 arg1@@11 arg2@@5)) (FieldType WandType_wand_3Type FrameTypeType))
 :qid |funType:wand_3#ft|
 :pattern ( (|wand_3#ft| arg0@@24 arg1@@11 arg2@@5))
))))
(assert (forall ((arg1@@12 Bool) (arg2@@6 Bool) (arg3@@2 Real) ) (! (IsWandField (|wand_3#ft| arg1@@12 arg2@@6 arg3@@2))
 :qid |stdinbpl.219:15|
 :skolemid |30|
 :pattern ( (|wand_3#ft| arg1@@12 arg2@@6 arg3@@2))
)))
(assert (forall ((arg1@@13 Bool) (arg2@@7 Bool) (arg3@@3 Real) ) (! (= (getPredWandId (wand_3 arg1@@13 arg2@@7 arg3@@3)) 5)
 :qid |stdinbpl.235:15|
 :skolemid |34|
 :pattern ( (wand_3 arg1@@13 arg2@@7 arg3@@3))
)))
(assert (forall ((arg1@@14 Bool) (arg2@@8 Bool) (arg3@@4 Real) ) (!  (not (IsPredicateField (wand_3 arg1@@14 arg2@@8 arg3@@4)))
 :qid |stdinbpl.223:15|
 :skolemid |31|
 :pattern ( (wand_3 arg1@@14 arg2@@8 arg3@@4))
)))
(assert (forall ((arg1@@15 Bool) (arg2@@9 Bool) (arg3@@5 Real) ) (!  (not (IsPredicateField (|wand_3#ft| arg1@@15 arg2@@9 arg3@@5)))
 :qid |stdinbpl.227:15|
 :skolemid |32|
 :pattern ( (|wand_3#ft| arg1@@15 arg2@@9 arg3@@5))
)))
(assert  (and (= (Ctor PredicateType_LLCType) 13) (forall ((arg0@@25 T@U) (arg1@@16 Int) ) (! (= (type (LLC arg0@@25 arg1@@16)) (FieldType PredicateType_LLCType FrameTypeType))
 :qid |funType:LLC|
 :pattern ( (LLC arg0@@25 arg1@@16))
))))
(assert (forall ((x@@8 T@U) (i Int) ) (!  (=> (= (type x@@8) RefType) (IsPredicateField (LLC x@@8 i)))
 :qid |stdinbpl.503:15|
 :skolemid |71|
 :pattern ( (LLC x@@8 i))
)))
(assert (forall ((Heap@@0 T@U) (x@@9 T@U) (i@@0 Int) ) (!  (=> (and (= (type Heap@@0) (MapType0Type RefType)) (= (type x@@9) RefType)) (|LLC#everUsed| (LLC x@@9 i@@0)))
 :qid |stdinbpl.522:15|
 :skolemid |75|
 :pattern ( (|LLC#trigger| Heap@@0 (LLC x@@9 i@@0)))
)))
(assert  (and (= (type null) RefType) (forall ((arg0@@26 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@26))))
(= (type (PredicateMaskField arg0@@26)) (FieldType A (MapType1Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@26))
))))
(assert (forall ((Heap@@1 T@U) (ExhaleHeap T@U) (Mask@@0 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@1) (MapType0Type RefType)) (= (type ExhaleHeap) (MapType0Type RefType))) (= (type Mask@@0) (MapType1Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@1 ExhaleHeap Mask@@0)) (and (HasDirectPerm Mask@@0 null pm_f) (IsPredicateField pm_f))) (= (MapType0Select Heap@@1 null (PredicateMaskField pm_f)) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@1 ExhaleHeap Mask@@0) (IsPredicateField pm_f) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((arg0@@27 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@27))))
(= (type (WandMaskField arg0@@27)) (FieldType A@@0 (MapType1Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@27))
)))
(assert (forall ((Heap@@2 T@U) (ExhaleHeap@@0 T@U) (Mask@@1 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@2) (MapType0Type RefType)) (= (type ExhaleHeap@@0) (MapType0Type RefType))) (= (type Mask@@1) (MapType1Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@2 ExhaleHeap@@0 Mask@@1)) (and (HasDirectPerm Mask@@1 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType0Select Heap@@2 null (WandMaskField pm_f@@0)) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@2 ExhaleHeap@@0 Mask@@1) (IsWandField pm_f@@0) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert  (and (= (Ctor PredicateType_PType) 14) (= (type P) (FieldType PredicateType_PType FrameTypeType))))
(assert (IsPredicateField P))
(assert (= (getPredWandId P) 0))
(assert  (and (= (Ctor PredicateType_QType) 15) (forall ((arg0@@28 Bool) ) (! (= (type (Q arg0@@28)) (FieldType PredicateType_QType FrameTypeType))
 :qid |funType:Q|
 :pattern ( (Q arg0@@28))
))))
(assert (forall ((b_2 Bool) ) (! (IsPredicateField (Q b_2))
 :qid |stdinbpl.380:15|
 :skolemid |59|
 :pattern ( (Q b_2))
)))
(assert  (and (= (Ctor PredicateType_LLType) 16) (forall ((arg0@@29 T@U) ) (! (= (type (LL arg0@@29)) (FieldType PredicateType_LLType FrameTypeType))
 :qid |funType:LL|
 :pattern ( (LL arg0@@29))
))))
(assert (forall ((x@@10 T@U) ) (!  (=> (= (type x@@10) RefType) (IsPredicateField (LL x@@10)))
 :qid |stdinbpl.433:15|
 :skolemid |65|
 :pattern ( (LL x@@10))
)))
(assert (forall ((Heap@@3 T@U) (b_2@@0 Bool) ) (!  (=> (= (type Heap@@3) (MapType0Type RefType)) (|Q#everUsed| (Q b_2@@0)))
 :qid |stdinbpl.399:15|
 :skolemid |63|
 :pattern ( (|Q#trigger| Heap@@3 (Q b_2@@0)))
)))
(assert (forall ((Heap@@4 T@U) (x@@11 T@U) ) (!  (=> (and (= (type Heap@@4) (MapType0Type RefType)) (= (type x@@11) RefType)) (|LL#everUsed| (LL x@@11)))
 :qid |stdinbpl.452:15|
 :skolemid |69|
 :pattern ( (|LL#trigger| Heap@@4 (LL x@@11)))
)))
(assert  (and (and (= (Ctor WandType_wand_2Type) 17) (forall ((arg0@@30 T@U) (arg1@@17 Real) (arg2@@10 T@U) (arg3@@6 Real) (arg4 T@U) (arg5 Int) (arg6 T@U) (arg7 Real) (arg8 T@U) (arg9 T@U) (arg10 T@U) (arg11 Real) (arg12 T@U) (arg13 Int) (arg14 T@U) (arg15 Real) (arg16 T@U) (arg17 Real) (arg18 T@U) (arg19 T@U) (arg20 T@U) (arg21 Real) (arg22 T@U) (arg23 T@U) ) (! (= (type (|wand_2#ft| arg0@@30 arg1@@17 arg2@@10 arg3@@6 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23)) (FieldType WandType_wand_2Type FrameTypeType))
 :qid |funType:wand_2#ft|
 :pattern ( (|wand_2#ft| arg0@@30 arg1@@17 arg2@@10 arg3@@6 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22 arg23))
))) (forall ((arg0@@31 T@U) (arg1@@18 Real) (arg2@@11 T@U) (arg3@@7 Real) (arg4@@0 T@U) (arg5@@0 Int) (arg6@@0 T@U) (arg7@@0 Real) (arg8@@0 T@U) (arg9@@0 T@U) (arg10@@0 T@U) (arg11@@0 Real) (arg12@@0 T@U) (arg13@@0 Int) (arg14@@0 T@U) (arg15@@0 Real) (arg16@@0 T@U) (arg17@@0 Real) (arg18@@0 T@U) (arg19@@0 T@U) (arg20@@0 T@U) (arg21@@0 Real) (arg22@@0 T@U) (arg23@@0 T@U) ) (! (= (type (|wand_2#sm| arg0@@31 arg1@@18 arg2@@11 arg3@@7 arg4@@0 arg5@@0 arg6@@0 arg7@@0 arg8@@0 arg9@@0 arg10@@0 arg11@@0 arg12@@0 arg13@@0 arg14@@0 arg15@@0 arg16@@0 arg17@@0 arg18@@0 arg19@@0 arg20@@0 arg21@@0 arg22@@0 arg23@@0)) (FieldType WandType_wand_2Type (MapType1Type RefType boolType)))
 :qid |funType:wand_2#sm|
 :pattern ( (|wand_2#sm| arg0@@31 arg1@@18 arg2@@11 arg3@@7 arg4@@0 arg5@@0 arg6@@0 arg7@@0 arg8@@0 arg9@@0 arg10@@0 arg11@@0 arg12@@0 arg13@@0 arg14@@0 arg15@@0 arg16@@0 arg17@@0 arg18@@0 arg19@@0 arg20@@0 arg21@@0 arg22@@0 arg23@@0))
))))
(assert (forall ((arg1@@19 T@U) (arg2@@12 Real) (arg3@@8 T@U) (arg4@@1 Real) (arg5@@1 T@U) (arg6@@1 Int) (arg7@@1 T@U) (arg8@@1 Real) (arg9@@1 T@U) (arg10@@1 T@U) (arg11@@1 T@U) (arg12@@1 Real) (arg13@@1 T@U) (arg14@@1 Int) (arg15@@1 T@U) (arg16@@1 Real) (arg17@@1 T@U) (arg18@@1 Real) (arg19@@1 T@U) (arg20@@1 T@U) (arg21@@1 T@U) (arg22@@1 Real) (arg23@@1 T@U) (arg24 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type arg1@@19) RefType) (= (type arg3@@8) RefType)) (= (type arg5@@1) RefType)) (= (type arg7@@1) RefType)) (= (type arg9@@1) RefType)) (= (type arg10@@1) RefType)) (= (type arg11@@1) RefType)) (= (type arg13@@1) RefType)) (= (type arg15@@1) RefType)) (= (type arg17@@1) RefType)) (= (type arg19@@1) RefType)) (= (type arg20@@1) RefType)) (= (type arg21@@1) RefType)) (= (type arg23@@1) RefType)) (= (type arg24) RefType)) (= (|wand_2#sm| arg1@@19 arg2@@12 arg3@@8 arg4@@1 arg5@@1 arg6@@1 arg7@@1 arg8@@1 arg9@@1 arg10@@1 arg11@@1 arg12@@1 arg13@@1 arg14@@1 arg15@@1 arg16@@1 arg17@@1 arg18@@1 arg19@@1 arg20@@1 arg21@@1 arg22@@1 arg23@@1 arg24) (WandMaskField (|wand_2#ft| arg1@@19 arg2@@12 arg3@@8 arg4@@1 arg5@@1 arg6@@1 arg7@@1 arg8@@1 arg9@@1 arg10@@1 arg11@@1 arg12@@1 arg13@@1 arg14@@1 arg15@@1 arg16@@1 arg17@@1 arg18@@1 arg19@@1 arg20@@1 arg21@@1 arg22@@1 arg23@@1 arg24))))
 :qid |stdinbpl.263:15|
 :skolemid |40|
 :pattern ( (WandMaskField (|wand_2#ft| arg1@@19 arg2@@12 arg3@@8 arg4@@1 arg5@@1 arg6@@1 arg7@@1 arg8@@1 arg9@@1 arg10@@1 arg11@@1 arg12@@1 arg13@@1 arg14@@1 arg15@@1 arg16@@1 arg17@@1 arg18@@1 arg19@@1 arg20@@1 arg21@@1 arg22@@1 arg23@@1 arg24)))
)))
(assert  (and (and (= (Ctor WandType_wandType) 18) (forall ((arg0@@32 Bool) (arg1@@20 Real) (arg2@@13 Bool) (arg3@@9 Real) (arg4@@2 Bool) (arg5@@2 Bool) ) (! (= (type (|wand#ft| arg0@@32 arg1@@20 arg2@@13 arg3@@9 arg4@@2 arg5@@2)) (FieldType WandType_wandType FrameTypeType))
 :qid |funType:wand#ft|
 :pattern ( (|wand#ft| arg0@@32 arg1@@20 arg2@@13 arg3@@9 arg4@@2 arg5@@2))
))) (forall ((arg0@@33 Bool) (arg1@@21 Real) (arg2@@14 Bool) (arg3@@10 Real) (arg4@@3 Bool) (arg5@@3 Bool) ) (! (= (type (|wand#sm| arg0@@33 arg1@@21 arg2@@14 arg3@@10 arg4@@3 arg5@@3)) (FieldType WandType_wandType (MapType1Type RefType boolType)))
 :qid |funType:wand#sm|
 :pattern ( (|wand#sm| arg0@@33 arg1@@21 arg2@@14 arg3@@10 arg4@@3 arg5@@3))
))))
(assert (forall ((arg1@@22 Bool) (arg2@@15 Real) (arg3@@11 Bool) (arg4@@4 Real) (arg5@@4 Bool) (arg6@@2 Bool) ) (! (= (|wand#sm| arg1@@22 arg2@@15 arg3@@11 arg4@@4 arg5@@4 arg6@@2) (WandMaskField (|wand#ft| arg1@@22 arg2@@15 arg3@@11 arg4@@4 arg5@@4 arg6@@2)))
 :qid |stdinbpl.199:15|
 :skolemid |26|
 :pattern ( (WandMaskField (|wand#ft| arg1@@22 arg2@@15 arg3@@11 arg4@@4 arg5@@4 arg6@@2)))
)))
(assert (forall ((arg0@@34 Bool) (arg1@@23 Bool) (arg2@@16 Real) ) (! (= (type (|wand_3#sm| arg0@@34 arg1@@23 arg2@@16)) (FieldType WandType_wand_3Type (MapType1Type RefType boolType)))
 :qid |funType:wand_3#sm|
 :pattern ( (|wand_3#sm| arg0@@34 arg1@@23 arg2@@16))
)))
(assert (forall ((arg1@@24 Bool) (arg2@@17 Bool) (arg3@@12 Real) ) (! (= (|wand_3#sm| arg1@@24 arg2@@17 arg3@@12) (WandMaskField (|wand_3#ft| arg1@@24 arg2@@17 arg3@@12)))
 :qid |stdinbpl.231:15|
 :skolemid |33|
 :pattern ( (WandMaskField (|wand_3#ft| arg1@@24 arg2@@17 arg3@@12)))
)))
(assert (forall ((arg1@@25 Bool) (arg2@@18 Bool) (arg3@@13 Real) (arg1_2 Bool) (arg2_2 Bool) (arg3_2 Real) ) (!  (=> (= (wand_3 arg1@@25 arg2@@18 arg3@@13) (wand_3 arg1_2 arg2_2 arg3_2)) (and (= arg1@@25 arg1_2) (and (= arg2@@18 arg2_2) (= arg3@@13 arg3_2))))
 :qid |stdinbpl.239:15|
 :skolemid |35|
 :pattern ( (wand_3 arg1@@25 arg2@@18 arg3@@13) (wand_3 arg1_2 arg2_2 arg3_2))
)))
(assert (forall ((arg0@@35 T@U) (arg1@@26 Real) (arg2@@19 T@U) (arg3@@14 Real) (arg4@@5 T@U) (arg5@@5 Int) (arg6@@3 T@U) (arg7@@2 Real) (arg8@@2 T@U) (arg9@@2 T@U) (arg10@@2 T@U) (arg11@@2 Real) (arg12@@2 T@U) (arg13@@2 Int) (arg14@@2 T@U) (arg15@@2 Real) (arg16@@2 T@U) (arg17@@2 Real) (arg18@@2 T@U) (arg19@@2 T@U) (arg20@@2 T@U) (arg21@@2 Real) (arg22@@2 T@U) (arg23@@2 T@U) ) (! (= (type (wand_2 arg0@@35 arg1@@26 arg2@@19 arg3@@14 arg4@@5 arg5@@5 arg6@@3 arg7@@2 arg8@@2 arg9@@2 arg10@@2 arg11@@2 arg12@@2 arg13@@2 arg14@@2 arg15@@2 arg16@@2 arg17@@2 arg18@@2 arg19@@2 arg20@@2 arg21@@2 arg22@@2 arg23@@2)) (FieldType WandType_wand_2Type intType))
 :qid |funType:wand_2|
 :pattern ( (wand_2 arg0@@35 arg1@@26 arg2@@19 arg3@@14 arg4@@5 arg5@@5 arg6@@3 arg7@@2 arg8@@2 arg9@@2 arg10@@2 arg11@@2 arg12@@2 arg13@@2 arg14@@2 arg15@@2 arg16@@2 arg17@@2 arg18@@2 arg19@@2 arg20@@2 arg21@@2 arg22@@2 arg23@@2))
)))
(assert (forall ((arg1@@27 T@U) (arg2@@20 Real) (arg3@@15 T@U) (arg4@@6 Real) (arg5@@6 T@U) (arg6@@4 Int) (arg7@@3 T@U) (arg8@@3 Real) (arg9@@3 T@U) (arg10@@3 T@U) (arg11@@3 T@U) (arg12@@3 Real) (arg13@@3 T@U) (arg14@@3 Int) (arg15@@3 T@U) (arg16@@3 Real) (arg17@@3 T@U) (arg18@@3 Real) (arg19@@3 T@U) (arg20@@3 T@U) (arg21@@3 T@U) (arg22@@3 Real) (arg23@@3 T@U) (arg24@@0 T@U) (arg1_2@@0 T@U) (arg2_2@@0 Real) (arg3_2@@0 T@U) (arg4_2 Real) (arg5_2 T@U) (arg6_2 Int) (arg7_2 T@U) (arg8_2 Real) (arg9_2 T@U) (arg10_2 T@U) (arg11_2 T@U) (arg12_2 Real) (arg13_2 T@U) (arg14_2 Int) (arg15_2 T@U) (arg16_2 Real) (arg17_2 T@U) (arg18_2 Real) (arg19_2 T@U) (arg20_2 T@U) (arg21_2 T@U) (arg22_2 Real) (arg23_2 T@U) (arg24_2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type arg1@@27) RefType) (= (type arg3@@15) RefType)) (= (type arg5@@6) RefType)) (= (type arg7@@3) RefType)) (= (type arg9@@3) RefType)) (= (type arg10@@3) RefType)) (= (type arg11@@3) RefType)) (= (type arg13@@3) RefType)) (= (type arg15@@3) RefType)) (= (type arg17@@3) RefType)) (= (type arg19@@3) RefType)) (= (type arg20@@3) RefType)) (= (type arg21@@3) RefType)) (= (type arg23@@3) RefType)) (= (type arg24@@0) RefType)) (= (type arg1_2@@0) RefType)) (= (type arg3_2@@0) RefType)) (= (type arg5_2) RefType)) (= (type arg7_2) RefType)) (= (type arg9_2) RefType)) (= (type arg10_2) RefType)) (= (type arg11_2) RefType)) (= (type arg13_2) RefType)) (= (type arg15_2) RefType)) (= (type arg17_2) RefType)) (= (type arg19_2) RefType)) (= (type arg20_2) RefType)) (= (type arg21_2) RefType)) (= (type arg23_2) RefType)) (= (type arg24_2) RefType)) (= (wand_2 arg1@@27 arg2@@20 arg3@@15 arg4@@6 arg5@@6 arg6@@4 arg7@@3 arg8@@3 arg9@@3 arg10@@3 arg11@@3 arg12@@3 arg13@@3 arg14@@3 arg15@@3 arg16@@3 arg17@@3 arg18@@3 arg19@@3 arg20@@3 arg21@@3 arg22@@3 arg23@@3 arg24@@0) (wand_2 arg1_2@@0 arg2_2@@0 arg3_2@@0 arg4_2 arg5_2 arg6_2 arg7_2 arg8_2 arg9_2 arg10_2 arg11_2 arg12_2 arg13_2 arg14_2 arg15_2 arg16_2 arg17_2 arg18_2 arg19_2 arg20_2 arg21_2 arg22_2 arg23_2 arg24_2))) (and (= arg1@@27 arg1_2@@0) (and (= arg2@@20 arg2_2@@0) (and (= arg3@@15 arg3_2@@0) (and (= arg4@@6 arg4_2) (and (= arg5@@6 arg5_2) (and (= arg6@@4 arg6_2) (and (= arg7@@3 arg7_2) (and (= arg8@@3 arg8_2) (and (= arg9@@3 arg9_2) (and (= arg10@@3 arg10_2) (and (= arg11@@3 arg11_2) (and (= arg12@@3 arg12_2) (and (= arg13@@3 arg13_2) (and (= arg14@@3 arg14_2) (and (= arg15@@3 arg15_2) (and (= arg16@@3 arg16_2) (and (= arg17@@3 arg17_2) (and (= arg18@@3 arg18_2) (and (= arg19@@3 arg19_2) (and (= arg20@@3 arg20_2) (and (= arg21@@3 arg21_2) (and (= arg22@@3 arg22_2) (and (= arg23@@3 arg23_2) (= arg24@@0 arg24_2)))))))))))))))))))))))))
 :qid |stdinbpl.271:15|
 :skolemid |42|
 :pattern ( (wand_2 arg1@@27 arg2@@20 arg3@@15 arg4@@6 arg5@@6 arg6@@4 arg7@@3 arg8@@3 arg9@@3 arg10@@3 arg11@@3 arg12@@3 arg13@@3 arg14@@3 arg15@@3 arg16@@3 arg17@@3 arg18@@3 arg19@@3 arg20@@3 arg21@@3 arg22@@3 arg23@@3 arg24@@0) (wand_2 arg1_2@@0 arg2_2@@0 arg3_2@@0 arg4_2 arg5_2 arg6_2 arg7_2 arg8_2 arg9_2 arg10_2 arg11_2 arg12_2 arg13_2 arg14_2 arg15_2 arg16_2 arg17_2 arg18_2 arg19_2 arg20_2 arg21_2 arg22_2 arg23_2 arg24_2))
)))
(assert (forall ((b_2@@1 Bool) (b2 Bool) ) (!  (=> (= (Q b_2@@1) (Q b2)) (= b_2@@1 b2))
 :qid |stdinbpl.390:15|
 :skolemid |61|
 :pattern ( (Q b_2@@1) (Q b2))
)))
(assert (forall ((arg0@@36 Bool) ) (! (= (type (|Q#sm| arg0@@36)) (FieldType PredicateType_QType (MapType1Type RefType boolType)))
 :qid |funType:Q#sm|
 :pattern ( (|Q#sm| arg0@@36))
)))
(assert (forall ((b_2@@2 Bool) (b2@@0 Bool) ) (!  (=> (= (|Q#sm| b_2@@2) (|Q#sm| b2@@0)) (= b_2@@2 b2@@0))
 :qid |stdinbpl.394:15|
 :skolemid |62|
 :pattern ( (|Q#sm| b_2@@2) (|Q#sm| b2@@0))
)))
(assert (forall ((Heap@@5 T@U) (ExhaleHeap@@1 T@U) (Mask@@2 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@5) (MapType0Type RefType)) (= (type ExhaleHeap@@1) (MapType0Type RefType))) (= (type Mask@@2) (MapType1Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@1 Mask@@2)) (U_2_bool (MapType0Select Heap@@5 o_1 $allocated))) (U_2_bool (MapType0Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@1 Mask@@2) (MapType0Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((x@@12 T@U) (i@@1 Int) (x2 T@U) (i2 Int) ) (!  (=> (and (and (= (type x@@12) RefType) (= (type x2) RefType)) (= (LLC x@@12 i@@1) (LLC x2 i2))) (and (= x@@12 x2) (= i@@1 i2)))
 :qid |stdinbpl.513:15|
 :skolemid |73|
 :pattern ( (LLC x@@12 i@@1) (LLC x2 i2))
)))
(assert (forall ((arg0@@37 T@U) (arg1@@28 Int) ) (! (= (type (|LLC#sm| arg0@@37 arg1@@28)) (FieldType PredicateType_LLCType (MapType1Type RefType boolType)))
 :qid |funType:LLC#sm|
 :pattern ( (|LLC#sm| arg0@@37 arg1@@28))
)))
(assert (forall ((x@@13 T@U) (i@@2 Int) (x2@@0 T@U) (i2@@0 Int) ) (!  (=> (and (and (= (type x@@13) RefType) (= (type x2@@0) RefType)) (= (|LLC#sm| x@@13 i@@2) (|LLC#sm| x2@@0 i2@@0))) (and (= x@@13 x2@@0) (= i@@2 i2@@0)))
 :qid |stdinbpl.517:15|
 :skolemid |74|
 :pattern ( (|LLC#sm| x@@13 i@@2) (|LLC#sm| x2@@0 i2@@0))
)))
(assert (forall ((x@@14 T@U) (x2@@1 T@U) ) (!  (=> (and (and (= (type x@@14) RefType) (= (type x2@@1) RefType)) (= (LL x@@14) (LL x2@@1))) (= x@@14 x2@@1))
 :qid |stdinbpl.443:15|
 :skolemid |67|
 :pattern ( (LL x@@14) (LL x2@@1))
)))
(assert (forall ((arg0@@38 T@U) ) (! (= (type (|LL#sm| arg0@@38)) (FieldType PredicateType_LLType (MapType1Type RefType boolType)))
 :qid |funType:LL#sm|
 :pattern ( (|LL#sm| arg0@@38))
)))
(assert (forall ((x@@15 T@U) (x2@@2 T@U) ) (!  (=> (and (and (= (type x@@15) RefType) (= (type x2@@2) RefType)) (= (|LL#sm| x@@15) (|LL#sm| x2@@2))) (= x@@15 x2@@2))
 :qid |stdinbpl.447:15|
 :skolemid |68|
 :pattern ( (|LL#sm| x@@15) (|LL#sm| x2@@2))
)))
(assert (forall ((Heap@@6 T@U) (ExhaleHeap@@2 T@U) (Mask@@3 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@6) (MapType0Type RefType)) (= (type ExhaleHeap@@2) (MapType0Type RefType))) (= (type Mask@@3) (MapType1Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@2 Mask@@3)) (HasDirectPerm Mask@@3 o_1@@0 f_2)) (= (MapType0Select Heap@@6 o_1@@0 f_2) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@2 Mask@@3) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert (forall ((arg1@@29 T@U) (arg2@@21 Real) (arg3@@16 T@U) (arg4@@7 Real) (arg5@@7 T@U) (arg6@@5 Int) (arg7@@4 T@U) (arg8@@4 Real) (arg9@@4 T@U) (arg10@@4 T@U) (arg11@@4 T@U) (arg12@@4 Real) (arg13@@4 T@U) (arg14@@4 Int) (arg15@@4 T@U) (arg16@@4 Real) (arg17@@4 T@U) (arg18@@4 Real) (arg19@@4 T@U) (arg20@@4 T@U) (arg21@@4 T@U) (arg22@@4 Real) (arg23@@4 T@U) (arg24@@1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type arg1@@29) RefType) (= (type arg3@@16) RefType)) (= (type arg5@@7) RefType)) (= (type arg7@@4) RefType)) (= (type arg9@@4) RefType)) (= (type arg10@@4) RefType)) (= (type arg11@@4) RefType)) (= (type arg13@@4) RefType)) (= (type arg15@@4) RefType)) (= (type arg17@@4) RefType)) (= (type arg19@@4) RefType)) (= (type arg20@@4) RefType)) (= (type arg21@@4) RefType)) (= (type arg23@@4) RefType)) (= (type arg24@@1) RefType)) (IsWandField (wand_2 arg1@@29 arg2@@21 arg3@@16 arg4@@7 arg5@@7 arg6@@5 arg7@@4 arg8@@4 arg9@@4 arg10@@4 arg11@@4 arg12@@4 arg13@@4 arg14@@4 arg15@@4 arg16@@4 arg17@@4 arg18@@4 arg19@@4 arg20@@4 arg21@@4 arg22@@4 arg23@@4 arg24@@1)))
 :qid |stdinbpl.247:15|
 :skolemid |36|
 :pattern ( (wand_2 arg1@@29 arg2@@21 arg3@@16 arg4@@7 arg5@@7 arg6@@5 arg7@@4 arg8@@4 arg9@@4 arg10@@4 arg11@@4 arg12@@4 arg13@@4 arg14@@4 arg15@@4 arg16@@4 arg17@@4 arg18@@4 arg19@@4 arg20@@4 arg21@@4 arg22@@4 arg23@@4 arg24@@1))
)))
(assert (forall ((arg1@@30 T@U) (arg2@@22 Real) (arg3@@17 T@U) (arg4@@8 Real) (arg5@@8 T@U) (arg6@@6 Int) (arg7@@5 T@U) (arg8@@5 Real) (arg9@@5 T@U) (arg10@@5 T@U) (arg11@@5 T@U) (arg12@@5 Real) (arg13@@5 T@U) (arg14@@5 Int) (arg15@@5 T@U) (arg16@@5 Real) (arg17@@5 T@U) (arg18@@5 Real) (arg19@@5 T@U) (arg20@@5 T@U) (arg21@@5 T@U) (arg22@@5 Real) (arg23@@5 T@U) (arg24@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type arg1@@30) RefType) (= (type arg3@@17) RefType)) (= (type arg5@@8) RefType)) (= (type arg7@@5) RefType)) (= (type arg9@@5) RefType)) (= (type arg10@@5) RefType)) (= (type arg11@@5) RefType)) (= (type arg13@@5) RefType)) (= (type arg15@@5) RefType)) (= (type arg17@@5) RefType)) (= (type arg19@@5) RefType)) (= (type arg20@@5) RefType)) (= (type arg21@@5) RefType)) (= (type arg23@@5) RefType)) (= (type arg24@@2) RefType)) (IsWandField (|wand_2#ft| arg1@@30 arg2@@22 arg3@@17 arg4@@8 arg5@@8 arg6@@6 arg7@@5 arg8@@5 arg9@@5 arg10@@5 arg11@@5 arg12@@5 arg13@@5 arg14@@5 arg15@@5 arg16@@5 arg17@@5 arg18@@5 arg19@@5 arg20@@5 arg21@@5 arg22@@5 arg23@@5 arg24@@2)))
 :qid |stdinbpl.251:15|
 :skolemid |37|
 :pattern ( (|wand_2#ft| arg1@@30 arg2@@22 arg3@@17 arg4@@8 arg5@@8 arg6@@6 arg7@@5 arg8@@5 arg9@@5 arg10@@5 arg11@@5 arg12@@5 arg13@@5 arg14@@5 arg15@@5 arg16@@5 arg17@@5 arg18@@5 arg19@@5 arg20@@5 arg21@@5 arg22@@5 arg23@@5 arg24@@2))
)))
(assert (forall ((arg1@@31 T@U) (arg2@@23 Real) (arg3@@18 T@U) (arg4@@9 Real) (arg5@@9 T@U) (arg6@@7 Int) (arg7@@6 T@U) (arg8@@6 Real) (arg9@@6 T@U) (arg10@@6 T@U) (arg11@@6 T@U) (arg12@@6 Real) (arg13@@6 T@U) (arg14@@6 Int) (arg15@@6 T@U) (arg16@@6 Real) (arg17@@6 T@U) (arg18@@6 Real) (arg19@@6 T@U) (arg20@@6 T@U) (arg21@@6 T@U) (arg22@@6 Real) (arg23@@6 T@U) (arg24@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type arg1@@31) RefType) (= (type arg3@@18) RefType)) (= (type arg5@@9) RefType)) (= (type arg7@@6) RefType)) (= (type arg9@@6) RefType)) (= (type arg10@@6) RefType)) (= (type arg11@@6) RefType)) (= (type arg13@@6) RefType)) (= (type arg15@@6) RefType)) (= (type arg17@@6) RefType)) (= (type arg19@@6) RefType)) (= (type arg20@@6) RefType)) (= (type arg21@@6) RefType)) (= (type arg23@@6) RefType)) (= (type arg24@@3) RefType)) (not (IsPredicateField (wand_2 arg1@@31 arg2@@23 arg3@@18 arg4@@9 arg5@@9 arg6@@7 arg7@@6 arg8@@6 arg9@@6 arg10@@6 arg11@@6 arg12@@6 arg13@@6 arg14@@6 arg15@@6 arg16@@6 arg17@@6 arg18@@6 arg19@@6 arg20@@6 arg21@@6 arg22@@6 arg23@@6 arg24@@3))))
 :qid |stdinbpl.255:15|
 :skolemid |38|
 :pattern ( (wand_2 arg1@@31 arg2@@23 arg3@@18 arg4@@9 arg5@@9 arg6@@7 arg7@@6 arg8@@6 arg9@@6 arg10@@6 arg11@@6 arg12@@6 arg13@@6 arg14@@6 arg15@@6 arg16@@6 arg17@@6 arg18@@6 arg19@@6 arg20@@6 arg21@@6 arg22@@6 arg23@@6 arg24@@3))
)))
(assert (forall ((arg1@@32 T@U) (arg2@@24 Real) (arg3@@19 T@U) (arg4@@10 Real) (arg5@@10 T@U) (arg6@@8 Int) (arg7@@7 T@U) (arg8@@7 Real) (arg9@@7 T@U) (arg10@@7 T@U) (arg11@@7 T@U) (arg12@@7 Real) (arg13@@7 T@U) (arg14@@7 Int) (arg15@@7 T@U) (arg16@@7 Real) (arg17@@7 T@U) (arg18@@7 Real) (arg19@@7 T@U) (arg20@@7 T@U) (arg21@@7 T@U) (arg22@@7 Real) (arg23@@7 T@U) (arg24@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type arg1@@32) RefType) (= (type arg3@@19) RefType)) (= (type arg5@@10) RefType)) (= (type arg7@@7) RefType)) (= (type arg9@@7) RefType)) (= (type arg10@@7) RefType)) (= (type arg11@@7) RefType)) (= (type arg13@@7) RefType)) (= (type arg15@@7) RefType)) (= (type arg17@@7) RefType)) (= (type arg19@@7) RefType)) (= (type arg20@@7) RefType)) (= (type arg21@@7) RefType)) (= (type arg23@@7) RefType)) (= (type arg24@@4) RefType)) (not (IsPredicateField (|wand_2#ft| arg1@@32 arg2@@24 arg3@@19 arg4@@10 arg5@@10 arg6@@8 arg7@@7 arg8@@7 arg9@@7 arg10@@7 arg11@@7 arg12@@7 arg13@@7 arg14@@7 arg15@@7 arg16@@7 arg17@@7 arg18@@7 arg19@@7 arg20@@7 arg21@@7 arg22@@7 arg23@@7 arg24@@4))))
 :qid |stdinbpl.259:15|
 :skolemid |39|
 :pattern ( (|wand_2#ft| arg1@@32 arg2@@24 arg3@@19 arg4@@10 arg5@@10 arg6@@8 arg7@@7 arg8@@7 arg9@@7 arg10@@7 arg11@@7 arg12@@7 arg13@@7 arg14@@7 arg15@@7 arg16@@7 arg17@@7 arg18@@7 arg19@@7 arg20@@7 arg21@@7 arg22@@7 arg23@@7 arg24@@4))
)))
(assert  (and (= (type dummyHeap) (MapType0Type RefType)) (= (type ZeroMask) (MapType1Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert  (and (= (Ctor WandType_wand_4Type) 19) (forall ((arg0@@39 T@U) (arg1@@33 Int) (arg2@@25 Real) (arg3@@20 T@U) (arg4@@11 Int) (arg5@@11 Real) (arg6@@9 T@U) (arg7@@8 Int) (arg8@@8 Real) (arg9@@8 T@U) (arg10@@8 T@U) (arg11@@8 T@U) (arg12@@8 Int) (arg13@@8 Real) (arg14@@8 T@U) (arg15@@8 Int) ) (! (= (type (wand_4 arg0@@39 arg1@@33 arg2@@25 arg3@@20 arg4@@11 arg5@@11 arg6@@9 arg7@@8 arg8@@8 arg9@@8 arg10@@8 arg11@@8 arg12@@8 arg13@@8 arg14@@8 arg15@@8)) (FieldType WandType_wand_4Type intType))
 :qid |funType:wand_4|
 :pattern ( (wand_4 arg0@@39 arg1@@33 arg2@@25 arg3@@20 arg4@@11 arg5@@11 arg6@@9 arg7@@8 arg8@@8 arg9@@8 arg10@@8 arg11@@8 arg12@@8 arg13@@8 arg14@@8 arg15@@8))
))))
(assert (forall ((arg1@@34 T@U) (arg2@@26 Int) (arg3@@21 Real) (arg4@@12 T@U) (arg5@@12 Int) (arg6@@10 Real) (arg7@@9 T@U) (arg8@@9 Int) (arg9@@9 Real) (arg10@@9 T@U) (arg11@@9 T@U) (arg12@@9 T@U) (arg13@@9 Int) (arg14@@9 Real) (arg15@@9 T@U) (arg16@@8 Int) ) (!  (=> (and (and (and (and (and (and (= (type arg1@@34) RefType) (= (type arg4@@12) RefType)) (= (type arg7@@9) RefType)) (= (type arg10@@9) RefType)) (= (type arg11@@9) RefType)) (= (type arg12@@9) RefType)) (= (type arg15@@9) RefType)) (= (getPredWandId (wand_4 arg1@@34 arg2@@26 arg3@@21 arg4@@12 arg5@@12 arg6@@10 arg7@@9 arg8@@9 arg9@@9 arg10@@9 arg11@@9 arg12@@9 arg13@@9 arg14@@9 arg15@@9 arg16@@8)) 7))
 :qid |stdinbpl.299:15|
 :skolemid |48|
 :pattern ( (wand_4 arg1@@34 arg2@@26 arg3@@21 arg4@@12 arg5@@12 arg6@@10 arg7@@9 arg8@@9 arg9@@9 arg10@@9 arg11@@9 arg12@@9 arg13@@9 arg14@@9 arg15@@9 arg16@@8))
)))
(assert  (and (= (Ctor WandType_wand_1Type) 20) (forall ((arg0@@40 T@U) (arg1@@35 Real) (arg2@@27 T@U) (arg3@@22 Real) (arg4@@13 T@U) (arg5@@13 Int) (arg6@@11 T@U) (arg7@@10 Real) (arg8@@10 T@U) (arg9@@10 T@U) (arg10@@10 T@U) (arg11@@10 Real) (arg12@@10 T@U) (arg13@@10 Int) (arg14@@10 T@U) (arg15@@10 Real) ) (! (= (type (wand_1 arg0@@40 arg1@@35 arg2@@27 arg3@@22 arg4@@13 arg5@@13 arg6@@11 arg7@@10 arg8@@10 arg9@@10 arg10@@10 arg11@@10 arg12@@10 arg13@@10 arg14@@10 arg15@@10)) (FieldType WandType_wand_1Type intType))
 :qid |funType:wand_1|
 :pattern ( (wand_1 arg0@@40 arg1@@35 arg2@@27 arg3@@22 arg4@@13 arg5@@13 arg6@@11 arg7@@10 arg8@@10 arg9@@10 arg10@@10 arg11@@10 arg12@@10 arg13@@10 arg14@@10 arg15@@10))
))))
(assert (forall ((arg1@@36 T@U) (arg2@@28 Real) (arg3@@23 T@U) (arg4@@14 Real) (arg5@@14 T@U) (arg6@@12 Int) (arg7@@11 T@U) (arg8@@11 Real) (arg9@@11 T@U) (arg10@@11 T@U) (arg11@@11 T@U) (arg12@@11 Real) (arg13@@11 T@U) (arg14@@11 Int) (arg15@@11 T@U) (arg16@@9 Real) ) (!  (=> (and (and (and (and (and (and (and (and (= (type arg1@@36) RefType) (= (type arg3@@23) RefType)) (= (type arg5@@14) RefType)) (= (type arg7@@11) RefType)) (= (type arg9@@11) RefType)) (= (type arg10@@11) RefType)) (= (type arg11@@11) RefType)) (= (type arg13@@11) RefType)) (= (type arg15@@11) RefType)) (= (getPredWandId (wand_1 arg1@@36 arg2@@28 arg3@@23 arg4@@14 arg5@@14 arg6@@12 arg7@@11 arg8@@11 arg9@@11 arg10@@11 arg11@@11 arg12@@11 arg13@@11 arg14@@11 arg15@@11 arg16@@9)) 8))
 :qid |stdinbpl.331:15|
 :skolemid |55|
 :pattern ( (wand_1 arg1@@36 arg2@@28 arg3@@23 arg4@@14 arg5@@14 arg6@@12 arg7@@11 arg8@@11 arg9@@11 arg10@@11 arg11@@11 arg12@@11 arg13@@11 arg14@@11 arg15@@11 arg16@@9))
)))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.170:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert (forall ((arg1@@37 T@U) (arg2@@29 Int) (arg3@@24 Real) (arg4@@15 T@U) (arg5@@15 Int) (arg6@@13 Real) (arg7@@12 T@U) (arg8@@12 Int) (arg9@@12 Real) (arg10@@12 T@U) (arg11@@12 T@U) (arg12@@12 T@U) (arg13@@12 Int) (arg14@@12 Real) (arg15@@12 T@U) (arg16@@10 Int) ) (!  (=> (and (and (and (and (and (and (= (type arg1@@37) RefType) (= (type arg4@@15) RefType)) (= (type arg7@@12) RefType)) (= (type arg10@@12) RefType)) (= (type arg11@@12) RefType)) (= (type arg12@@12) RefType)) (= (type arg15@@12) RefType)) (IsWandField (wand_4 arg1@@37 arg2@@29 arg3@@24 arg4@@15 arg5@@15 arg6@@13 arg7@@12 arg8@@12 arg9@@12 arg10@@12 arg11@@12 arg12@@12 arg13@@12 arg14@@12 arg15@@12 arg16@@10)))
 :qid |stdinbpl.279:15|
 :skolemid |43|
 :pattern ( (wand_4 arg1@@37 arg2@@29 arg3@@24 arg4@@15 arg5@@15 arg6@@13 arg7@@12 arg8@@12 arg9@@12 arg10@@12 arg11@@12 arg12@@12 arg13@@12 arg14@@12 arg15@@12 arg16@@10))
)))
(assert (forall ((arg0@@41 T@U) (arg1@@38 Int) (arg2@@30 Real) (arg3@@25 T@U) (arg4@@16 Int) (arg5@@16 Real) (arg6@@14 T@U) (arg7@@13 Int) (arg8@@13 Real) (arg9@@13 T@U) (arg10@@13 T@U) (arg11@@13 T@U) (arg12@@13 Int) (arg13@@13 Real) (arg14@@13 T@U) (arg15@@13 Int) ) (! (= (type (|wand_4#ft| arg0@@41 arg1@@38 arg2@@30 arg3@@25 arg4@@16 arg5@@16 arg6@@14 arg7@@13 arg8@@13 arg9@@13 arg10@@13 arg11@@13 arg12@@13 arg13@@13 arg14@@13 arg15@@13)) (FieldType WandType_wand_4Type FrameTypeType))
 :qid |funType:wand_4#ft|
 :pattern ( (|wand_4#ft| arg0@@41 arg1@@38 arg2@@30 arg3@@25 arg4@@16 arg5@@16 arg6@@14 arg7@@13 arg8@@13 arg9@@13 arg10@@13 arg11@@13 arg12@@13 arg13@@13 arg14@@13 arg15@@13))
)))
(assert (forall ((arg1@@39 T@U) (arg2@@31 Int) (arg3@@26 Real) (arg4@@17 T@U) (arg5@@17 Int) (arg6@@15 Real) (arg7@@14 T@U) (arg8@@14 Int) (arg9@@14 Real) (arg10@@14 T@U) (arg11@@14 T@U) (arg12@@14 T@U) (arg13@@14 Int) (arg14@@14 Real) (arg15@@14 T@U) (arg16@@11 Int) ) (!  (=> (and (and (and (and (and (and (= (type arg1@@39) RefType) (= (type arg4@@17) RefType)) (= (type arg7@@14) RefType)) (= (type arg10@@14) RefType)) (= (type arg11@@14) RefType)) (= (type arg12@@14) RefType)) (= (type arg15@@14) RefType)) (IsWandField (|wand_4#ft| arg1@@39 arg2@@31 arg3@@26 arg4@@17 arg5@@17 arg6@@15 arg7@@14 arg8@@14 arg9@@14 arg10@@14 arg11@@14 arg12@@14 arg13@@14 arg14@@14 arg15@@14 arg16@@11)))
 :qid |stdinbpl.283:15|
 :skolemid |44|
 :pattern ( (|wand_4#ft| arg1@@39 arg2@@31 arg3@@26 arg4@@17 arg5@@17 arg6@@15 arg7@@14 arg8@@14 arg9@@14 arg10@@14 arg11@@14 arg12@@14 arg13@@14 arg14@@14 arg15@@14 arg16@@11))
)))
(assert (forall ((arg1@@40 T@U) (arg2@@32 Real) (arg3@@27 T@U) (arg4@@18 Real) (arg5@@18 T@U) (arg6@@16 Int) (arg7@@15 T@U) (arg8@@15 Real) (arg9@@15 T@U) (arg10@@15 T@U) (arg11@@15 T@U) (arg12@@15 Real) (arg13@@15 T@U) (arg14@@15 Int) (arg15@@15 T@U) (arg16@@12 Real) ) (!  (=> (and (and (and (and (and (and (and (and (= (type arg1@@40) RefType) (= (type arg3@@27) RefType)) (= (type arg5@@18) RefType)) (= (type arg7@@15) RefType)) (= (type arg9@@15) RefType)) (= (type arg10@@15) RefType)) (= (type arg11@@15) RefType)) (= (type arg13@@15) RefType)) (= (type arg15@@15) RefType)) (IsWandField (wand_1 arg1@@40 arg2@@32 arg3@@27 arg4@@18 arg5@@18 arg6@@16 arg7@@15 arg8@@15 arg9@@15 arg10@@15 arg11@@15 arg12@@15 arg13@@15 arg14@@15 arg15@@15 arg16@@12)))
 :qid |stdinbpl.311:15|
 :skolemid |50|
 :pattern ( (wand_1 arg1@@40 arg2@@32 arg3@@27 arg4@@18 arg5@@18 arg6@@16 arg7@@15 arg8@@15 arg9@@15 arg10@@15 arg11@@15 arg12@@15 arg13@@15 arg14@@15 arg15@@15 arg16@@12))
)))
(assert (forall ((arg0@@42 T@U) (arg1@@41 Real) (arg2@@33 T@U) (arg3@@28 Real) (arg4@@19 T@U) (arg5@@19 Int) (arg6@@17 T@U) (arg7@@16 Real) (arg8@@16 T@U) (arg9@@16 T@U) (arg10@@16 T@U) (arg11@@16 Real) (arg12@@16 T@U) (arg13@@16 Int) (arg14@@16 T@U) (arg15@@16 Real) ) (! (= (type (|wand_1#ft| arg0@@42 arg1@@41 arg2@@33 arg3@@28 arg4@@19 arg5@@19 arg6@@17 arg7@@16 arg8@@16 arg9@@16 arg10@@16 arg11@@16 arg12@@16 arg13@@16 arg14@@16 arg15@@16)) (FieldType WandType_wand_1Type FrameTypeType))
 :qid |funType:wand_1#ft|
 :pattern ( (|wand_1#ft| arg0@@42 arg1@@41 arg2@@33 arg3@@28 arg4@@19 arg5@@19 arg6@@17 arg7@@16 arg8@@16 arg9@@16 arg10@@16 arg11@@16 arg12@@16 arg13@@16 arg14@@16 arg15@@16))
)))
(assert (forall ((arg1@@42 T@U) (arg2@@34 Real) (arg3@@29 T@U) (arg4@@20 Real) (arg5@@20 T@U) (arg6@@18 Int) (arg7@@17 T@U) (arg8@@17 Real) (arg9@@17 T@U) (arg10@@17 T@U) (arg11@@17 T@U) (arg12@@17 Real) (arg13@@17 T@U) (arg14@@17 Int) (arg15@@17 T@U) (arg16@@13 Real) ) (!  (=> (and (and (and (and (and (and (and (and (= (type arg1@@42) RefType) (= (type arg3@@29) RefType)) (= (type arg5@@20) RefType)) (= (type arg7@@17) RefType)) (= (type arg9@@17) RefType)) (= (type arg10@@17) RefType)) (= (type arg11@@17) RefType)) (= (type arg13@@17) RefType)) (= (type arg15@@17) RefType)) (IsWandField (|wand_1#ft| arg1@@42 arg2@@34 arg3@@29 arg4@@20 arg5@@20 arg6@@18 arg7@@17 arg8@@17 arg9@@17 arg10@@17 arg11@@17 arg12@@17 arg13@@17 arg14@@17 arg15@@17 arg16@@13)))
 :qid |stdinbpl.315:15|
 :skolemid |51|
 :pattern ( (|wand_1#ft| arg1@@42 arg2@@34 arg3@@29 arg4@@20 arg5@@20 arg6@@18 arg7@@17 arg8@@17 arg9@@17 arg10@@17 arg11@@17 arg12@@17 arg13@@17 arg14@@17 arg15@@17 arg16@@13))
)))
(assert  (not (IsPredicateField val)))
(assert  (not (IsWandField val)))
(assert  (not (IsPredicateField next)))
(assert  (not (IsWandField next)))
(assert (forall ((Heap@@7 T@U) (ExhaleHeap@@3 T@U) (Mask@@4 T@U) ) (!  (=> (and (and (and (= (type Heap@@7) (MapType0Type RefType)) (= (type ExhaleHeap@@3) (MapType0Type RefType))) (= (type Mask@@4) (MapType1Type RefType realType))) (IdenticalOnKnownLocations Heap@@7 ExhaleHeap@@3 Mask@@4)) (succHeap Heap@@7 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@7 ExhaleHeap@@3 Mask@@4))
)))
(assert (forall ((arg1@@43 T@U) (arg2@@35 Int) (arg3@@30 Real) (arg4@@21 T@U) (arg5@@21 Int) (arg6@@19 Real) (arg7@@18 T@U) (arg8@@18 Int) (arg9@@18 Real) (arg10@@18 T@U) (arg11@@18 T@U) (arg12@@18 T@U) (arg13@@18 Int) (arg14@@18 Real) (arg15@@18 T@U) (arg16@@14 Int) ) (!  (=> (and (and (and (and (and (and (= (type arg1@@43) RefType) (= (type arg4@@21) RefType)) (= (type arg7@@18) RefType)) (= (type arg10@@18) RefType)) (= (type arg11@@18) RefType)) (= (type arg12@@18) RefType)) (= (type arg15@@18) RefType)) (not (IsPredicateField (wand_4 arg1@@43 arg2@@35 arg3@@30 arg4@@21 arg5@@21 arg6@@19 arg7@@18 arg8@@18 arg9@@18 arg10@@18 arg11@@18 arg12@@18 arg13@@18 arg14@@18 arg15@@18 arg16@@14))))
 :qid |stdinbpl.287:15|
 :skolemid |45|
 :pattern ( (wand_4 arg1@@43 arg2@@35 arg3@@30 arg4@@21 arg5@@21 arg6@@19 arg7@@18 arg8@@18 arg9@@18 arg10@@18 arg11@@18 arg12@@18 arg13@@18 arg14@@18 arg15@@18 arg16@@14))
)))
(assert (forall ((arg1@@44 T@U) (arg2@@36 Int) (arg3@@31 Real) (arg4@@22 T@U) (arg5@@22 Int) (arg6@@20 Real) (arg7@@19 T@U) (arg8@@19 Int) (arg9@@19 Real) (arg10@@19 T@U) (arg11@@19 T@U) (arg12@@19 T@U) (arg13@@19 Int) (arg14@@19 Real) (arg15@@19 T@U) (arg16@@15 Int) ) (!  (=> (and (and (and (and (and (and (= (type arg1@@44) RefType) (= (type arg4@@22) RefType)) (= (type arg7@@19) RefType)) (= (type arg10@@19) RefType)) (= (type arg11@@19) RefType)) (= (type arg12@@19) RefType)) (= (type arg15@@19) RefType)) (not (IsPredicateField (|wand_4#ft| arg1@@44 arg2@@36 arg3@@31 arg4@@22 arg5@@22 arg6@@20 arg7@@19 arg8@@19 arg9@@19 arg10@@19 arg11@@19 arg12@@19 arg13@@19 arg14@@19 arg15@@19 arg16@@15))))
 :qid |stdinbpl.291:15|
 :skolemid |46|
 :pattern ( (|wand_4#ft| arg1@@44 arg2@@36 arg3@@31 arg4@@22 arg5@@22 arg6@@20 arg7@@19 arg8@@19 arg9@@19 arg10@@19 arg11@@19 arg12@@19 arg13@@19 arg14@@19 arg15@@19 arg16@@15))
)))
(assert (forall ((arg1@@45 T@U) (arg2@@37 Real) (arg3@@32 T@U) (arg4@@23 Real) (arg5@@23 T@U) (arg6@@21 Int) (arg7@@20 T@U) (arg8@@20 Real) (arg9@@20 T@U) (arg10@@20 T@U) (arg11@@20 T@U) (arg12@@20 Real) (arg13@@20 T@U) (arg14@@20 Int) (arg15@@20 T@U) (arg16@@16 Real) ) (!  (=> (and (and (and (and (and (and (and (and (= (type arg1@@45) RefType) (= (type arg3@@32) RefType)) (= (type arg5@@23) RefType)) (= (type arg7@@20) RefType)) (= (type arg9@@20) RefType)) (= (type arg10@@20) RefType)) (= (type arg11@@20) RefType)) (= (type arg13@@20) RefType)) (= (type arg15@@20) RefType)) (not (IsPredicateField (wand_1 arg1@@45 arg2@@37 arg3@@32 arg4@@23 arg5@@23 arg6@@21 arg7@@20 arg8@@20 arg9@@20 arg10@@20 arg11@@20 arg12@@20 arg13@@20 arg14@@20 arg15@@20 arg16@@16))))
 :qid |stdinbpl.319:15|
 :skolemid |52|
 :pattern ( (wand_1 arg1@@45 arg2@@37 arg3@@32 arg4@@23 arg5@@23 arg6@@21 arg7@@20 arg8@@20 arg9@@20 arg10@@20 arg11@@20 arg12@@20 arg13@@20 arg14@@20 arg15@@20 arg16@@16))
)))
(assert (forall ((arg1@@46 T@U) (arg2@@38 Real) (arg3@@33 T@U) (arg4@@24 Real) (arg5@@24 T@U) (arg6@@22 Int) (arg7@@21 T@U) (arg8@@21 Real) (arg9@@21 T@U) (arg10@@21 T@U) (arg11@@21 T@U) (arg12@@21 Real) (arg13@@21 T@U) (arg14@@21 Int) (arg15@@21 T@U) (arg16@@17 Real) ) (!  (=> (and (and (and (and (and (and (and (and (= (type arg1@@46) RefType) (= (type arg3@@33) RefType)) (= (type arg5@@24) RefType)) (= (type arg7@@21) RefType)) (= (type arg9@@21) RefType)) (= (type arg10@@21) RefType)) (= (type arg11@@21) RefType)) (= (type arg13@@21) RefType)) (= (type arg15@@21) RefType)) (not (IsPredicateField (|wand_1#ft| arg1@@46 arg2@@38 arg3@@33 arg4@@24 arg5@@24 arg6@@22 arg7@@21 arg8@@21 arg9@@21 arg10@@21 arg11@@21 arg12@@21 arg13@@21 arg14@@21 arg15@@21 arg16@@17))))
 :qid |stdinbpl.323:15|
 :skolemid |53|
 :pattern ( (|wand_1#ft| arg1@@46 arg2@@38 arg3@@33 arg4@@24 arg5@@24 arg6@@22 arg7@@21 arg8@@21 arg9@@21 arg10@@21 arg11@@21 arg12@@21 arg13@@21 arg14@@21 arg15@@21 arg16@@17))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType1Type RefType realType)) (= (type SummandMask1) (MapType1Type RefType realType))) (= (type SummandMask2) (MapType1Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType1Select ResultMask o_2 f_4)) (+ (U_2_real (MapType1Select SummandMask1 o_2 f_4)) (U_2_real (MapType1Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask2 o_2 f_4))
)))
(assert  (and (forall ((arg0@@43 Real) (arg1@@47 T@U) ) (! (= (type (ConditionalFrame arg0@@43 arg1@@47)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@43 arg1@@47))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.158:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((Mask@@5 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@5) (MapType1Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@5 o_2@@0 f_4@@0) (> (U_2_real (MapType1Select Mask@@5 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@5 o_2@@0 f_4@@0))
)))
(assert (forall ((arg1@@48 T@U) (arg2@@39 Int) (arg3@@34 Real) (arg4@@25 T@U) (arg5@@25 Int) (arg6@@23 Real) (arg7@@22 T@U) (arg8@@22 Int) (arg9@@22 Real) (arg10@@22 T@U) (arg11@@22 T@U) (arg12@@22 T@U) (arg13@@22 Int) (arg14@@22 Real) (arg15@@22 T@U) (arg16@@18 Int) (arg1_2@@1 T@U) (arg2_2@@1 Int) (arg3_2@@1 Real) (arg4_2@@0 T@U) (arg5_2@@0 Int) (arg6_2@@0 Real) (arg7_2@@0 T@U) (arg8_2@@0 Int) (arg9_2@@0 Real) (arg10_2@@0 T@U) (arg11_2@@0 T@U) (arg12_2@@0 T@U) (arg13_2@@0 Int) (arg14_2@@0 Real) (arg15_2@@0 T@U) (arg16_2@@0 Int) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type arg1@@48) RefType) (= (type arg4@@25) RefType)) (= (type arg7@@22) RefType)) (= (type arg10@@22) RefType)) (= (type arg11@@22) RefType)) (= (type arg12@@22) RefType)) (= (type arg15@@22) RefType)) (= (type arg1_2@@1) RefType)) (= (type arg4_2@@0) RefType)) (= (type arg7_2@@0) RefType)) (= (type arg10_2@@0) RefType)) (= (type arg11_2@@0) RefType)) (= (type arg12_2@@0) RefType)) (= (type arg15_2@@0) RefType)) (= (wand_4 arg1@@48 arg2@@39 arg3@@34 arg4@@25 arg5@@25 arg6@@23 arg7@@22 arg8@@22 arg9@@22 arg10@@22 arg11@@22 arg12@@22 arg13@@22 arg14@@22 arg15@@22 arg16@@18) (wand_4 arg1_2@@1 arg2_2@@1 arg3_2@@1 arg4_2@@0 arg5_2@@0 arg6_2@@0 arg7_2@@0 arg8_2@@0 arg9_2@@0 arg10_2@@0 arg11_2@@0 arg12_2@@0 arg13_2@@0 arg14_2@@0 arg15_2@@0 arg16_2@@0))) (and (= arg1@@48 arg1_2@@1) (and (= arg2@@39 arg2_2@@1) (and (= arg3@@34 arg3_2@@1) (and (= arg4@@25 arg4_2@@0) (and (= arg5@@25 arg5_2@@0) (and (= arg6@@23 arg6_2@@0) (and (= arg7@@22 arg7_2@@0) (and (= arg8@@22 arg8_2@@0) (and (= arg9@@22 arg9_2@@0) (and (= arg10@@22 arg10_2@@0) (and (= arg11@@22 arg11_2@@0) (and (= arg12@@22 arg12_2@@0) (and (= arg13@@22 arg13_2@@0) (and (= arg14@@22 arg14_2@@0) (and (= arg15@@22 arg15_2@@0) (= arg16@@18 arg16_2@@0)))))))))))))))))
 :qid |stdinbpl.303:15|
 :skolemid |49|
 :pattern ( (wand_4 arg1@@48 arg2@@39 arg3@@34 arg4@@25 arg5@@25 arg6@@23 arg7@@22 arg8@@22 arg9@@22 arg10@@22 arg11@@22 arg12@@22 arg13@@22 arg14@@22 arg15@@22 arg16@@18) (wand_4 arg1_2@@1 arg2_2@@1 arg3_2@@1 arg4_2@@0 arg5_2@@0 arg6_2@@0 arg7_2@@0 arg8_2@@0 arg9_2@@0 arg10_2@@0 arg11_2@@0 arg12_2@@0 arg13_2@@0 arg14_2@@0 arg15_2@@0 arg16_2@@0))
)))
(assert (forall ((arg1@@49 T@U) (arg2@@40 Real) (arg3@@35 T@U) (arg4@@26 Real) (arg5@@26 T@U) (arg6@@24 Int) (arg7@@23 T@U) (arg8@@23 Real) (arg9@@23 T@U) (arg10@@23 T@U) (arg11@@23 T@U) (arg12@@23 Real) (arg13@@23 T@U) (arg14@@23 Int) (arg15@@23 T@U) (arg16@@19 Real) (arg1_2@@2 T@U) (arg2_2@@2 Real) (arg3_2@@2 T@U) (arg4_2@@1 Real) (arg5_2@@1 T@U) (arg6_2@@1 Int) (arg7_2@@1 T@U) (arg8_2@@1 Real) (arg9_2@@1 T@U) (arg10_2@@1 T@U) (arg11_2@@1 T@U) (arg12_2@@1 Real) (arg13_2@@1 T@U) (arg14_2@@1 Int) (arg15_2@@1 T@U) (arg16_2@@1 Real) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type arg1@@49) RefType) (= (type arg3@@35) RefType)) (= (type arg5@@26) RefType)) (= (type arg7@@23) RefType)) (= (type arg9@@23) RefType)) (= (type arg10@@23) RefType)) (= (type arg11@@23) RefType)) (= (type arg13@@23) RefType)) (= (type arg15@@23) RefType)) (= (type arg1_2@@2) RefType)) (= (type arg3_2@@2) RefType)) (= (type arg5_2@@1) RefType)) (= (type arg7_2@@1) RefType)) (= (type arg9_2@@1) RefType)) (= (type arg10_2@@1) RefType)) (= (type arg11_2@@1) RefType)) (= (type arg13_2@@1) RefType)) (= (type arg15_2@@1) RefType)) (= (wand_1 arg1@@49 arg2@@40 arg3@@35 arg4@@26 arg5@@26 arg6@@24 arg7@@23 arg8@@23 arg9@@23 arg10@@23 arg11@@23 arg12@@23 arg13@@23 arg14@@23 arg15@@23 arg16@@19) (wand_1 arg1_2@@2 arg2_2@@2 arg3_2@@2 arg4_2@@1 arg5_2@@1 arg6_2@@1 arg7_2@@1 arg8_2@@1 arg9_2@@1 arg10_2@@1 arg11_2@@1 arg12_2@@1 arg13_2@@1 arg14_2@@1 arg15_2@@1 arg16_2@@1))) (and (= arg1@@49 arg1_2@@2) (and (= arg2@@40 arg2_2@@2) (and (= arg3@@35 arg3_2@@2) (and (= arg4@@26 arg4_2@@1) (and (= arg5@@26 arg5_2@@1) (and (= arg6@@24 arg6_2@@1) (and (= arg7@@23 arg7_2@@1) (and (= arg8@@23 arg8_2@@1) (and (= arg9@@23 arg9_2@@1) (and (= arg10@@23 arg10_2@@1) (and (= arg11@@23 arg11_2@@1) (and (= arg12@@23 arg12_2@@1) (and (= arg13@@23 arg13_2@@1) (and (= arg14@@23 arg14_2@@1) (and (= arg15@@23 arg15_2@@1) (= arg16@@19 arg16_2@@1)))))))))))))))))
 :qid |stdinbpl.335:15|
 :skolemid |56|
 :pattern ( (wand_1 arg1@@49 arg2@@40 arg3@@35 arg4@@26 arg5@@26 arg6@@24 arg7@@23 arg8@@23 arg9@@23 arg10@@23 arg11@@23 arg12@@23 arg13@@23 arg14@@23 arg15@@23 arg16@@19) (wand_1 arg1_2@@2 arg2_2@@2 arg3_2@@2 arg4_2@@1 arg5_2@@1 arg6_2@@1 arg7_2@@1 arg8_2@@1 arg9_2@@1 arg10_2@@1 arg11_2@@1 arg12_2@@1 arg13_2@@1 arg14_2@@1 arg15_2@@1 arg16_2@@1))
)))
(assert (forall ((arg0@@44 Bool) (arg1@@50 Real) (arg2@@41 Bool) (arg3@@36 Real) (arg4@@27 Bool) (arg5@@27 Bool) ) (! (= (type (wand arg0@@44 arg1@@50 arg2@@41 arg3@@36 arg4@@27 arg5@@27)) (FieldType WandType_wandType intType))
 :qid |funType:wand|
 :pattern ( (wand arg0@@44 arg1@@50 arg2@@41 arg3@@36 arg4@@27 arg5@@27))
)))
(assert (forall ((arg1@@51 Bool) (arg2@@42 Real) (arg3@@37 Bool) (arg4@@28 Real) (arg5@@28 Bool) (arg6@@25 Bool) ) (! (= (getPredWandId (wand arg1@@51 arg2@@42 arg3@@37 arg4@@28 arg5@@28 arg6@@25)) 4)
 :qid |stdinbpl.203:15|
 :skolemid |27|
 :pattern ( (wand arg1@@51 arg2@@42 arg3@@37 arg4@@28 arg5@@28 arg6@@25))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType1Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType1Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((arg1@@52 Bool) (arg2@@43 Real) (arg3@@38 Bool) (arg4@@29 Real) (arg5@@29 Bool) (arg6@@26 Bool) ) (! (IsWandField (wand arg1@@52 arg2@@43 arg3@@38 arg4@@29 arg5@@29 arg6@@26))
 :qid |stdinbpl.183:15|
 :skolemid |22|
 :pattern ( (wand arg1@@52 arg2@@43 arg3@@38 arg4@@29 arg5@@29 arg6@@26))
)))
(assert (forall ((arg1@@53 Bool) (arg2@@44 Real) (arg3@@39 Bool) (arg4@@30 Real) (arg5@@30 Bool) (arg6@@27 Bool) ) (! (IsWandField (|wand#ft| arg1@@53 arg2@@44 arg3@@39 arg4@@30 arg5@@30 arg6@@27))
 :qid |stdinbpl.187:15|
 :skolemid |23|
 :pattern ( (|wand#ft| arg1@@53 arg2@@44 arg3@@39 arg4@@30 arg5@@30 arg6@@27))
)))
(assert (forall ((arg1@@54 Bool) (arg2@@45 Real) (arg3@@40 Bool) (arg4@@31 Real) (arg5@@31 Bool) (arg6@@28 Bool) ) (!  (not (IsPredicateField (wand arg1@@54 arg2@@45 arg3@@40 arg4@@31 arg5@@31 arg6@@28)))
 :qid |stdinbpl.191:15|
 :skolemid |24|
 :pattern ( (wand arg1@@54 arg2@@45 arg3@@40 arg4@@31 arg5@@31 arg6@@28))
)))
(assert (forall ((arg1@@55 Bool) (arg2@@46 Real) (arg3@@41 Bool) (arg4@@32 Real) (arg5@@32 Bool) (arg6@@29 Bool) ) (!  (not (IsPredicateField (|wand#ft| arg1@@55 arg2@@46 arg3@@41 arg4@@32 arg5@@32 arg6@@29)))
 :qid |stdinbpl.195:15|
 :skolemid |25|
 :pattern ( (|wand#ft| arg1@@55 arg2@@46 arg3@@41 arg4@@32 arg5@@32 arg6@@29))
)))
(assert (forall ((x@@16 T@U) (i@@3 Int) ) (!  (=> (= (type x@@16) RefType) (= (getPredWandId (LLC x@@16 i@@3)) 3))
 :qid |stdinbpl.507:15|
 :skolemid |72|
 :pattern ( (LLC x@@16 i@@3))
)))
(assert (forall ((Heap@@8 T@U) (ExhaleHeap@@4 T@U) (Mask@@6 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@8) (MapType0Type RefType)) (= (type ExhaleHeap@@4) (MapType0Type RefType))) (= (type Mask@@6) (MapType1Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@8 ExhaleHeap@@4 Mask@@6)) (and (HasDirectPerm Mask@@6 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType1Select (MapType0Select Heap@@8 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType0Select Heap@@8 o2 f_2@@0) (MapType0Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType0Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@8 ExhaleHeap@@4 Mask@@6) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@9 T@U) (ExhaleHeap@@5 T@U) (Mask@@7 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@9) (MapType0Type RefType)) (= (type ExhaleHeap@@5) (MapType0Type RefType))) (= (type Mask@@7) (MapType1Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@9 ExhaleHeap@@5 Mask@@7)) (and (HasDirectPerm Mask@@7 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType1Select (MapType0Select Heap@@9 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType0Select Heap@@9 o2@@0 f_2@@1) (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@9 ExhaleHeap@@5 Mask@@7) (IsWandField pm_f@@2))
)))
(assert (forall ((b_2@@3 Bool) ) (! (= (getPredWandId (Q b_2@@3)) 1)
 :qid |stdinbpl.384:15|
 :skolemid |60|
 :pattern ( (Q b_2@@3))
)))
(assert (forall ((x@@17 T@U) ) (!  (=> (= (type x@@17) RefType) (= (getPredWandId (LL x@@17)) 2))
 :qid |stdinbpl.437:15|
 :skolemid |66|
 :pattern ( (LL x@@17))
)))
(assert (forall ((Mask@@8 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@8) (MapType1Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@8)) (and (>= (U_2_real (MapType1Select Mask@@8 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@8) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType1Select Mask@@8 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@8) (MapType1Select Mask@@8 o_2@@2 f_4@@2))
)))
(assert (forall ((Heap@@10 T@U) ) (!  (=> (= (type Heap@@10) (MapType0Type RefType)) (|P#everUsed| P))
 :qid |stdinbpl.364:15|
 :skolemid |57|
 :pattern ( (|P#trigger| Heap@@10 P))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@11 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@11) (MapType0Type RefType))) (U_2_bool (MapType0Select Heap@@11 o $allocated))) (U_2_bool (MapType0Select Heap@@11 (MapType0Select Heap@@11 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType0Select Heap@@11 o f))
)))
(assert (forall ((x@@18 T@U) (i@@4 Int) ) (!  (=> (= (type x@@18) RefType) (= (PredicateMaskField (LLC x@@18 i@@4)) (|LLC#sm| x@@18 i@@4)))
 :qid |stdinbpl.499:15|
 :skolemid |70|
 :pattern ( (PredicateMaskField (LLC x@@18 i@@4)))
)))
(assert (forall ((arg0@@45 T@U) (arg1@@56 Int) (arg2@@47 Real) (arg3@@42 T@U) (arg4@@33 Int) (arg5@@33 Real) (arg6@@30 T@U) (arg7@@24 Int) (arg8@@24 Real) (arg9@@24 T@U) (arg10@@24 T@U) (arg11@@24 T@U) (arg12@@24 Int) (arg13@@24 Real) (arg14@@24 T@U) (arg15@@24 Int) ) (! (= (type (|wand_4#sm| arg0@@45 arg1@@56 arg2@@47 arg3@@42 arg4@@33 arg5@@33 arg6@@30 arg7@@24 arg8@@24 arg9@@24 arg10@@24 arg11@@24 arg12@@24 arg13@@24 arg14@@24 arg15@@24)) (FieldType WandType_wand_4Type (MapType1Type RefType boolType)))
 :qid |funType:wand_4#sm|
 :pattern ( (|wand_4#sm| arg0@@45 arg1@@56 arg2@@47 arg3@@42 arg4@@33 arg5@@33 arg6@@30 arg7@@24 arg8@@24 arg9@@24 arg10@@24 arg11@@24 arg12@@24 arg13@@24 arg14@@24 arg15@@24))
)))
(assert (forall ((arg1@@57 T@U) (arg2@@48 Int) (arg3@@43 Real) (arg4@@34 T@U) (arg5@@34 Int) (arg6@@31 Real) (arg7@@25 T@U) (arg8@@25 Int) (arg9@@25 Real) (arg10@@25 T@U) (arg11@@25 T@U) (arg12@@25 T@U) (arg13@@25 Int) (arg14@@25 Real) (arg15@@25 T@U) (arg16@@20 Int) ) (!  (=> (and (and (and (and (and (and (= (type arg1@@57) RefType) (= (type arg4@@34) RefType)) (= (type arg7@@25) RefType)) (= (type arg10@@25) RefType)) (= (type arg11@@25) RefType)) (= (type arg12@@25) RefType)) (= (type arg15@@25) RefType)) (= (|wand_4#sm| arg1@@57 arg2@@48 arg3@@43 arg4@@34 arg5@@34 arg6@@31 arg7@@25 arg8@@25 arg9@@25 arg10@@25 arg11@@25 arg12@@25 arg13@@25 arg14@@25 arg15@@25 arg16@@20) (WandMaskField (|wand_4#ft| arg1@@57 arg2@@48 arg3@@43 arg4@@34 arg5@@34 arg6@@31 arg7@@25 arg8@@25 arg9@@25 arg10@@25 arg11@@25 arg12@@25 arg13@@25 arg14@@25 arg15@@25 arg16@@20))))
 :qid |stdinbpl.295:15|
 :skolemid |47|
 :pattern ( (WandMaskField (|wand_4#ft| arg1@@57 arg2@@48 arg3@@43 arg4@@34 arg5@@34 arg6@@31 arg7@@25 arg8@@25 arg9@@25 arg10@@25 arg11@@25 arg12@@25 arg13@@25 arg14@@25 arg15@@25 arg16@@20)))
)))
(assert (forall ((arg0@@46 T@U) (arg1@@58 Real) (arg2@@49 T@U) (arg3@@44 Real) (arg4@@35 T@U) (arg5@@35 Int) (arg6@@32 T@U) (arg7@@26 Real) (arg8@@26 T@U) (arg9@@26 T@U) (arg10@@26 T@U) (arg11@@26 Real) (arg12@@26 T@U) (arg13@@26 Int) (arg14@@26 T@U) (arg15@@26 Real) ) (! (= (type (|wand_1#sm| arg0@@46 arg1@@58 arg2@@49 arg3@@44 arg4@@35 arg5@@35 arg6@@32 arg7@@26 arg8@@26 arg9@@26 arg10@@26 arg11@@26 arg12@@26 arg13@@26 arg14@@26 arg15@@26)) (FieldType WandType_wand_1Type (MapType1Type RefType boolType)))
 :qid |funType:wand_1#sm|
 :pattern ( (|wand_1#sm| arg0@@46 arg1@@58 arg2@@49 arg3@@44 arg4@@35 arg5@@35 arg6@@32 arg7@@26 arg8@@26 arg9@@26 arg10@@26 arg11@@26 arg12@@26 arg13@@26 arg14@@26 arg15@@26))
)))
(assert (forall ((arg1@@59 T@U) (arg2@@50 Real) (arg3@@45 T@U) (arg4@@36 Real) (arg5@@36 T@U) (arg6@@33 Int) (arg7@@27 T@U) (arg8@@27 Real) (arg9@@27 T@U) (arg10@@27 T@U) (arg11@@27 T@U) (arg12@@27 Real) (arg13@@27 T@U) (arg14@@27 Int) (arg15@@27 T@U) (arg16@@21 Real) ) (!  (=> (and (and (and (and (and (and (and (and (= (type arg1@@59) RefType) (= (type arg3@@45) RefType)) (= (type arg5@@36) RefType)) (= (type arg7@@27) RefType)) (= (type arg9@@27) RefType)) (= (type arg10@@27) RefType)) (= (type arg11@@27) RefType)) (= (type arg13@@27) RefType)) (= (type arg15@@27) RefType)) (= (|wand_1#sm| arg1@@59 arg2@@50 arg3@@45 arg4@@36 arg5@@36 arg6@@33 arg7@@27 arg8@@27 arg9@@27 arg10@@27 arg11@@27 arg12@@27 arg13@@27 arg14@@27 arg15@@27 arg16@@21) (WandMaskField (|wand_1#ft| arg1@@59 arg2@@50 arg3@@45 arg4@@36 arg5@@36 arg6@@33 arg7@@27 arg8@@27 arg9@@27 arg10@@27 arg11@@27 arg12@@27 arg13@@27 arg14@@27 arg15@@27 arg16@@21))))
 :qid |stdinbpl.327:15|
 :skolemid |54|
 :pattern ( (WandMaskField (|wand_1#ft| arg1@@59 arg2@@50 arg3@@45 arg4@@36 arg5@@36 arg6@@33 arg7@@27 arg8@@27 arg9@@27 arg10@@27 arg11@@27 arg12@@27 arg13@@27 arg14@@27 arg15@@27 arg16@@21)))
)))
(assert (forall ((arg1@@60 Bool) (arg2@@51 Real) (arg3@@46 Bool) (arg4@@37 Real) (arg5@@37 Bool) (arg6@@34 Bool) (arg1_2@@3 Bool) (arg2_2@@3 Real) (arg3_2@@3 Bool) (arg4_2@@2 Real) (arg5_2@@2 Bool) (arg6_2@@2 Bool) ) (!  (=> (= (wand arg1@@60 arg2@@51 arg3@@46 arg4@@37 arg5@@37 arg6@@34) (wand arg1_2@@3 arg2_2@@3 arg3_2@@3 arg4_2@@2 arg5_2@@2 arg6_2@@2)) (and (= arg1@@60 arg1_2@@3) (and (= arg2@@51 arg2_2@@3) (and (= arg3@@46 arg3_2@@3) (and (= arg4@@37 arg4_2@@2) (and (= arg5@@37 arg5_2@@2) (= arg6@@34 arg6_2@@2)))))))
 :qid |stdinbpl.207:15|
 :skolemid |28|
 :pattern ( (wand arg1@@60 arg2@@51 arg3@@46 arg4@@37 arg5@@37 arg6@@34) (wand arg1_2@@3 arg2_2@@3 arg3_2@@3 arg4_2@@2 arg5_2@@2 arg6_2@@2))
)))
(assert (forall ((arg1@@61 T@U) (arg2@@52 Real) (arg3@@47 T@U) (arg4@@38 Real) (arg5@@38 T@U) (arg6@@35 Int) (arg7@@28 T@U) (arg8@@28 Real) (arg9@@28 T@U) (arg10@@28 T@U) (arg11@@28 T@U) (arg12@@28 Real) (arg13@@28 T@U) (arg14@@28 Int) (arg15@@28 T@U) (arg16@@22 Real) (arg17@@8 T@U) (arg18@@8 Real) (arg19@@8 T@U) (arg20@@8 T@U) (arg21@@8 T@U) (arg22@@8 Real) (arg23@@8 T@U) (arg24@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type arg1@@61) RefType) (= (type arg3@@47) RefType)) (= (type arg5@@38) RefType)) (= (type arg7@@28) RefType)) (= (type arg9@@28) RefType)) (= (type arg10@@28) RefType)) (= (type arg11@@28) RefType)) (= (type arg13@@28) RefType)) (= (type arg15@@28) RefType)) (= (type arg17@@8) RefType)) (= (type arg19@@8) RefType)) (= (type arg20@@8) RefType)) (= (type arg21@@8) RefType)) (= (type arg23@@8) RefType)) (= (type arg24@@5) RefType)) (= (getPredWandId (wand_2 arg1@@61 arg2@@52 arg3@@47 arg4@@38 arg5@@38 arg6@@35 arg7@@28 arg8@@28 arg9@@28 arg10@@28 arg11@@28 arg12@@28 arg13@@28 arg14@@28 arg15@@28 arg16@@22 arg17@@8 arg18@@8 arg19@@8 arg20@@8 arg21@@8 arg22@@8 arg23@@8 arg24@@5)) 6))
 :qid |stdinbpl.267:15|
 :skolemid |41|
 :pattern ( (wand_2 arg1@@61 arg2@@52 arg3@@47 arg4@@38 arg5@@38 arg6@@35 arg7@@28 arg8@@28 arg9@@28 arg10@@28 arg11@@28 arg12@@28 arg13@@28 arg14@@28 arg15@@28 arg16@@22 arg17@@8 arg18@@8 arg19@@8 arg20@@8 arg21@@8 arg22@@8 arg23@@8 arg24@@5))
)))
(assert (forall ((b_2@@4 Bool) ) (! (= (PredicateMaskField (Q b_2@@4)) (|Q#sm| b_2@@4))
 :qid |stdinbpl.376:15|
 :skolemid |58|
 :pattern ( (PredicateMaskField (Q b_2@@4)))
)))
(assert (forall ((x@@19 T@U) ) (!  (=> (= (type x@@19) RefType) (= (PredicateMaskField (LL x@@19)) (|LL#sm| x@@19)))
 :qid |stdinbpl.429:15|
 :skolemid |64|
 :pattern ( (PredicateMaskField (LL x@@19)))
)))
(assert (= (type |P#sm|) (FieldType PredicateType_PType (MapType1Type RefType boolType))))
(assert (= (PredicateMaskField P) |P#sm|))
(assert (forall ((Heap@@12 T@U) (o@@0 T@U) (f_3 T@U) (v T@U) ) (! (let ((B@@8 (type v)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@12) (MapType0Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@12 (MapType0Store Heap@@12 o@@0 f_3 v)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType0Store Heap@@12 o@@0 f_3 v))
)))
(assert (= (type ZeroPMask) (MapType1Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType1Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType1Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.165:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun Heap@31 () T@U)
(declare-fun freshObj@0 () T@U)
(declare-fun Heap@33 () T@U)
(declare-fun newPMask@12 () T@U)
(declare-fun Heap@32 () T@U)
(declare-fun Heap@29 () T@U)
(declare-fun Mask@18 () T@U)
(declare-fun Heap@30 () T@U)
(declare-fun Heap@27 () T@U)
(declare-fun newPMask@11 () T@U)
(declare-fun Heap@28 () T@U)
(declare-fun Heap@25 () T@U)
(declare-fun Heap@26 () T@U)
(declare-fun Heap@23 () T@U)
(declare-fun newPMask@10 () T@U)
(declare-fun Heap@24 () T@U)
(declare-fun Heap@22 () T@U)
(declare-fun Heap@21 () T@U)
(declare-fun Unfolding1Mask@9 () T@U)
(declare-fun Unfolding1Mask@7 () T@U)
(declare-fun Unfolding1Mask@8 () T@U)
(declare-fun Unfolding1Mask@5 () T@U)
(declare-fun UnfoldingMask@29 () T@U)
(declare-fun Unfolding1Mask@6 () T@U)
(declare-fun CombineFrames (T@U T@U) T@U)
(declare-fun FrameFragment (T@U) T@U)
(declare-fun UnfoldingMask@27 () T@U)
(declare-fun UnfoldingMask@28 () T@U)
(declare-fun UnfoldingMask@25 () T@U)
(declare-fun Mask@17 () T@U)
(declare-fun UnfoldingMask@26 () T@U)
(declare-fun UnfoldingMask@24 () T@U)
(declare-fun UnfoldingMask@22 () T@U)
(declare-fun UnfoldingMask@23 () T@U)
(declare-fun UnfoldingMask@20 () T@U)
(declare-fun UnfoldingMask@21 () T@U)
(declare-fun b_8@82 () Bool)
(declare-fun b_9@6 () Bool)
(declare-fun neededTransfer@3 () Real)
(declare-fun Used_5Mask@3 () T@U)
(declare-fun initNeededTransfer@0 () Real)
(declare-fun b_10@0 () Bool)
(declare-fun b_10@1 () Bool)
(declare-fun Result_1Heap () T@U)
(declare-fun Result_1Mask () T@U)
(declare-fun b_10@2 () Bool)
(declare-fun Ops_5Mask () T@U)
(declare-fun b_10@3 () Bool)
(declare-fun Ops_5Heap@28 () T@U)
(declare-fun Used_5Heap@0 () T@U)
(declare-fun b_10@4 () Bool)
(declare-fun b_8@83 () Bool)
(declare-fun Mask@16 () T@U)
(declare-fun Mask@15 () T@U)
(declare-fun takeTransfer@1 () Real)
(declare-fun Heap@19 () T@U)
(declare-fun Mask@13 () T@U)
(declare-fun neededTransfer@1 () Real)
(declare-fun b_9@3 () Bool)
(declare-fun Used_5Mask@1 () T@U)
(declare-fun neededTransfer@2 () Real)
(declare-fun Used_5Mask@2 () T@U)
(declare-fun b_9@4 () Bool)
(declare-fun TempMask@1 () T@U)
(declare-fun b_9@5 () Bool)
(declare-fun Mask@14 () T@U)
(declare-fun newPMask@9 () T@U)
(declare-fun Heap@20 () T@U)
(declare-fun maskTransfer@1 () Real)
(declare-fun takeTransfer@0 () Real)
(declare-fun b_9@0 () Bool)
(declare-fun neededTransfer@0 () Real)
(declare-fun Used_5Mask@0 () T@U)
(declare-fun b_9@1 () Bool)
(declare-fun TempMask@0 () T@U)
(declare-fun b_9@2 () Bool)
(declare-fun Ops_5Mask@3 () T@U)
(declare-fun Ops_5Mask@2 () T@U)
(declare-fun maskTransfer@0 () Real)
(declare-fun b_8@81 () Bool)
(declare-fun b_8@80 () Bool)
(declare-fun b_9 () Bool)
(declare-fun b_8@79 () Bool)
(declare-fun b_8@78 () Bool)
(declare-fun Ops_5Heap@27 () T@U)
(declare-fun Ops_5Mask@1 () T@U)
(declare-fun Ops_5Heap@25 () T@U)
(declare-fun b_8@76 () Bool)
(declare-fun b_8@77 () Bool)
(declare-fun newPMask@8 () T@U)
(declare-fun Ops_5Heap@26 () T@U)
(declare-fun b_8@75 () Bool)
(declare-fun Ops_5Heap@23 () T@U)
(declare-fun Ops_5Heap@24 () T@U)
(declare-fun Ops_5Heap@21 () T@U)
(declare-fun b_8@73 () Bool)
(declare-fun b_8@74 () Bool)
(declare-fun newPMask@7 () T@U)
(declare-fun Ops_5Heap@22 () T@U)
(declare-fun b_8@72 () Bool)
(declare-fun b_8@71 () Bool)
(declare-fun Ops_5Heap@19 () T@U)
(declare-fun UnfoldingMask@19 () T@U)
(declare-fun Ops_5Heap@20 () T@U)
(declare-fun b_8@68 () Bool)
(declare-fun UnfoldingMask@17 () T@U)
(declare-fun UnfoldingMask@18 () T@U)
(declare-fun b_8@69 () Bool)
(declare-fun b_8@70 () Bool)
(declare-fun b_8@63 () Bool)
(declare-fun b_8@62 () Bool)
(declare-fun b_8@64 () Bool)
(declare-fun UnfoldingMask@15 () T@U)
(declare-fun b_8@65 () Bool)
(declare-fun UnfoldingMask@16 () T@U)
(declare-fun b_8@66 () Bool)
(declare-fun b_8@67 () Bool)
(declare-fun b_8@61 () Bool)
(declare-fun b_8@60 () Bool)
(declare-fun Ops_5Heap@18 () T@U)
(declare-fun Ops_5Heap@16 () T@U)
(declare-fun b_8@58 () Bool)
(declare-fun b_8@59 () Bool)
(declare-fun newPMask@6 () T@U)
(declare-fun Ops_5Heap@17 () T@U)
(declare-fun b_8@57 () Bool)
(declare-fun Ops_5Heap@14 () T@U)
(declare-fun Ops_5Heap@15 () T@U)
(declare-fun Ops_5Heap@12 () T@U)
(declare-fun b_8@55 () Bool)
(declare-fun b_8@56 () Bool)
(declare-fun newPMask@5 () T@U)
(declare-fun Ops_5Heap@13 () T@U)
(declare-fun Ops_5Heap@11 () T@U)
(declare-fun Ops_5Heap@10 () T@U)
(declare-fun b_8@54 () Bool)
(declare-fun b_8@53 () Bool)
(declare-fun UnfoldingHeap@3 () T@U)
(declare-fun UnfoldingMask@14 () T@U)
(declare-fun UnfoldingHeap@1 () T@U)
(declare-fun b_8@51 () Bool)
(declare-fun b_8@52 () Bool)
(declare-fun newPMask@4 () T@U)
(declare-fun UnfoldingHeap@2 () T@U)
(declare-fun b_8@50 () Bool)
(declare-fun Unfolding1Mask@4 () T@U)
(declare-fun UnfoldingHeap@0 () T@U)
(declare-fun b_8@47 () Bool)
(declare-fun Unfolding1Mask@2 () T@U)
(declare-fun Unfolding1Mask@3 () T@U)
(declare-fun b_8@48 () Bool)
(declare-fun b_8@49 () Bool)
(declare-fun Unfolding1Mask@0 () T@U)
(declare-fun b_8@44 () Bool)
(declare-fun b_8@43 () Bool)
(declare-fun Unfolding1Mask@1 () T@U)
(declare-fun b_8@45 () Bool)
(declare-fun b_8@46 () Bool)
(declare-fun b_8@42 () Bool)
(declare-fun b_8@41 () Bool)
(declare-fun b_8@40 () Bool)
(declare-fun b_8@37 () Bool)
(declare-fun UnfoldingMask@12 () T@U)
(declare-fun UnfoldingMask@13 () T@U)
(declare-fun b_8@38 () Bool)
(declare-fun b_8@39 () Bool)
(declare-fun UnfoldingMask@10 () T@U)
(declare-fun b_8@34 () Bool)
(declare-fun b_8@33 () Bool)
(declare-fun UnfoldingMask@11 () T@U)
(declare-fun b_8@35 () Bool)
(declare-fun b_8@36 () Bool)
(declare-fun b_8@31 () Bool)
(declare-fun b_8@32 () Bool)
(declare-fun b_8@30 () Bool)
(declare-fun b_8@29 () Bool)
(declare-fun Ops_5Heap@9 () T@U)
(declare-fun Ops_5Heap@7 () T@U)
(declare-fun b_8@27 () Bool)
(declare-fun b_8@28 () Bool)
(declare-fun newPMask@3 () T@U)
(declare-fun Ops_5Heap@8 () T@U)
(declare-fun b_8@26 () Bool)
(declare-fun b_8@25 () Bool)
(declare-fun Ops_5Heap@5 () T@U)
(declare-fun UnfoldingMask@9 () T@U)
(declare-fun Ops_5Heap@6 () T@U)
(declare-fun UnfoldingMask@7 () T@U)
(declare-fun b_8@22 () Bool)
(declare-fun UnfoldingMask@8 () T@U)
(declare-fun b_8@23 () Bool)
(declare-fun b_8@24 () Bool)
(declare-fun b_8@17 () Bool)
(declare-fun b_8@16 () Bool)
(declare-fun b_8@18 () Bool)
(declare-fun UnfoldingMask@5 () T@U)
(declare-fun b_8@19 () Bool)
(declare-fun UnfoldingMask@6 () T@U)
(declare-fun b_8@20 () Bool)
(declare-fun b_8@21 () Bool)
(declare-fun b_8@15 () Bool)
(declare-fun b_8@14 () Bool)
(declare-fun Ops_5Heap@4 () T@U)
(declare-fun Ops_5Heap@2 () T@U)
(declare-fun b_8@12 () Bool)
(declare-fun b_8@13 () Bool)
(declare-fun newPMask@2 () T@U)
(declare-fun Ops_5Heap@3 () T@U)
(declare-fun b_8@11 () Bool)
(declare-fun Ops_5Heap@0 () T@U)
(declare-fun UnfoldingMask@4 () T@U)
(declare-fun Ops_5Heap@1 () T@U)
(declare-fun b_8@8 () Bool)
(declare-fun UnfoldingMask@2 () T@U)
(declare-fun UnfoldingMask@3 () T@U)
(declare-fun b_8@9 () Bool)
(declare-fun b_8@10 () Bool)
(declare-fun UnfoldingMask@0 () T@U)
(declare-fun b_8@5 () Bool)
(declare-fun b_8@4 () Bool)
(declare-fun UnfoldingMask@1 () T@U)
(declare-fun b_8@6 () Bool)
(declare-fun b_8@7 () Bool)
(declare-fun b_8@2 () Bool)
(declare-fun b_8@3 () Bool)
(declare-fun b_8@0 () Bool)
(declare-fun Ops_5Mask@0 () T@U)
(declare-fun b_8@1 () Bool)
(declare-fun b_8 () Bool)
(declare-fun b_7@0 () Bool)
(declare-fun b_7 () Bool)
(declare-fun Used_4Heap@0 () T@U)
(declare-fun Heap@17 () T@U)
(declare-fun newPMask@1 () T@U)
(declare-fun Heap@18 () T@U)
(declare-fun Heap@16 () T@U)
(declare-fun Heap@15 () T@U)
(declare-fun Heap@12 () T@U)
(declare-fun Heap@13 () T@U)
(declare-fun Heap@14 () T@U)
(declare-fun freshVersion@1 () T@U)
(declare-fun Mask@12 () T@U)
(declare-fun Mask@11 () T@U)
(declare-fun Mask@10 () T@U)
(declare-fun Mask@9 () T@U)
(declare-fun Mask@8 () T@U)
(declare-fun Heap@10 () T@U)
(declare-fun newPMask@0 () T@U)
(declare-fun Heap@11 () T@U)
(declare-fun Heap@9 () T@U)
(declare-fun Heap@8 () T@U)
(declare-fun Heap@5 () T@U)
(declare-fun Heap@6 () T@U)
(declare-fun Heap@7 () T@U)
(declare-fun freshVersion@0 () T@U)
(declare-fun Mask@7 () T@U)
(declare-fun Mask@6 () T@U)
(declare-fun Mask@5 () T@U)
(declare-fun Mask@4 () T@U)
(declare-fun Mask@3 () T@U)
(declare-fun Heap@@13 () T@U)
(declare-fun x@@20 () T@U)
(declare-fun y@@1 () T@U)
(declare-fun Heap@0 () T@U)
(declare-fun Mask@0 () T@U)
(declare-fun Mask@1 () T@U)
(declare-fun freshObj@1 () T@U)
(declare-fun Heap@1 () T@U)
(declare-fun Mask@2 () T@U)
(declare-fun Heap@2 () T@U)
(declare-fun Heap@3 () T@U)
(declare-fun Heap@4 () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type Heap@31) (MapType0Type RefType)) (= (type freshObj@0) RefType)) (= (type newPMask@12) (MapType1Type RefType boolType))) (= (type Heap@32) (MapType0Type RefType))) (= (type Heap@33) (MapType0Type RefType))) (= (type Heap@29) (MapType0Type RefType))) (= (type Mask@18) (MapType1Type RefType realType))) (= (type Heap@30) (MapType0Type RefType))) (= (type Heap@27) (MapType0Type RefType))) (= (type newPMask@11) (MapType1Type RefType boolType))) (= (type Heap@28) (MapType0Type RefType))) (= (type Heap@25) (MapType0Type RefType))) (= (type Heap@26) (MapType0Type RefType))) (= (type Heap@23) (MapType0Type RefType))) (= (type newPMask@10) (MapType1Type RefType boolType))) (= (type Heap@24) (MapType0Type RefType))) (= (type Heap@22) (MapType0Type RefType))) (= (type Heap@21) (MapType0Type RefType))) (= (type Unfolding1Mask@9) (MapType1Type RefType realType))) (= (type Unfolding1Mask@8) (MapType1Type RefType realType))) (= (type Unfolding1Mask@7) (MapType1Type RefType realType))) (= (type Unfolding1Mask@5) (MapType1Type RefType realType))) (= (type UnfoldingMask@29) (MapType1Type RefType realType))) (= (type Unfolding1Mask@6) (MapType1Type RefType realType))) (forall ((arg0@@47 T@U) (arg1@@62 T@U) ) (! (= (type (CombineFrames arg0@@47 arg1@@62)) FrameTypeType)
 :qid |funType:CombineFrames|
 :pattern ( (CombineFrames arg0@@47 arg1@@62))
))) (forall ((arg0@@48 T@U) ) (! (= (type (FrameFragment arg0@@48)) FrameTypeType)
 :qid |funType:FrameFragment|
 :pattern ( (FrameFragment arg0@@48))
))) (= (type UnfoldingMask@28) (MapType1Type RefType realType))) (= (type UnfoldingMask@27) (MapType1Type RefType realType))) (= (type UnfoldingMask@25) (MapType1Type RefType realType))) (= (type Mask@17) (MapType1Type RefType realType))) (= (type UnfoldingMask@26) (MapType1Type RefType realType))) (= (type UnfoldingMask@24) (MapType1Type RefType realType))) (= (type UnfoldingMask@23) (MapType1Type RefType realType))) (= (type UnfoldingMask@22) (MapType1Type RefType realType))) (= (type UnfoldingMask@20) (MapType1Type RefType realType))) (= (type UnfoldingMask@21) (MapType1Type RefType realType))) (= (type Used_5Mask@3) (MapType1Type RefType realType))) (= (type Result_1Heap) (MapType0Type RefType))) (= (type Result_1Mask) (MapType1Type RefType realType))) (= (type Ops_5Mask) (MapType1Type RefType realType))) (= (type Ops_5Heap@28) (MapType0Type RefType))) (= (type Used_5Heap@0) (MapType0Type RefType))) (= (type Mask@16) (MapType1Type RefType realType))) (= (type Mask@15) (MapType1Type RefType realType))) (= (type Heap@19) (MapType0Type RefType))) (= (type Mask@13) (MapType1Type RefType realType))) (= (type Used_5Mask@1) (MapType1Type RefType realType))) (= (type Used_5Mask@2) (MapType1Type RefType realType))) (= (type TempMask@1) (MapType1Type RefType realType))) (= (type Mask@14) (MapType1Type RefType realType))) (= (type newPMask@9) (MapType1Type RefType boolType))) (= (type Heap@20) (MapType0Type RefType))) (= (type Used_5Mask@0) (MapType1Type RefType realType))) (= (type TempMask@0) (MapType1Type RefType realType))) (= (type Ops_5Mask@3) (MapType1Type RefType realType))) (= (type Ops_5Mask@2) (MapType1Type RefType realType))) (= (type Ops_5Heap@0) (MapType0Type RefType))) (= (type Ops_5Mask@1) (MapType1Type RefType realType))) (= (type Ops_5Heap@10) (MapType0Type RefType))) (= (type Ops_5Heap@27) (MapType0Type RefType))) (= (type Ops_5Heap@25) (MapType0Type RefType))) (= (type newPMask@8) (MapType1Type RefType boolType))) (= (type Ops_5Heap@26) (MapType0Type RefType))) (= (type Ops_5Heap@23) (MapType0Type RefType))) (= (type Ops_5Heap@24) (MapType0Type RefType))) (= (type Ops_5Heap@21) (MapType0Type RefType))) (= (type newPMask@7) (MapType1Type RefType boolType))) (= (type Ops_5Heap@22) (MapType0Type RefType))) (= (type Ops_5Heap@19) (MapType0Type RefType))) (= (type UnfoldingMask@19) (MapType1Type RefType realType))) (= (type Ops_5Heap@20) (MapType0Type RefType))) (= (type UnfoldingMask@18) (MapType1Type RefType realType))) (= (type UnfoldingMask@17) (MapType1Type RefType realType))) (= (type UnfoldingMask@15) (MapType1Type RefType realType))) (= (type UnfoldingMask@16) (MapType1Type RefType realType))) (= (type Ops_5Heap@18) (MapType0Type RefType))) (= (type Ops_5Heap@16) (MapType0Type RefType))) (= (type newPMask@6) (MapType1Type RefType boolType))) (= (type Ops_5Heap@17) (MapType0Type RefType))) (= (type Ops_5Heap@14) (MapType0Type RefType))) (= (type Ops_5Heap@15) (MapType0Type RefType))) (= (type Ops_5Heap@12) (MapType0Type RefType))) (= (type newPMask@5) (MapType1Type RefType boolType))) (= (type Ops_5Heap@13) (MapType0Type RefType))) (= (type Ops_5Heap@11) (MapType0Type RefType))) (= (type UnfoldingHeap@3) (MapType0Type RefType))) (= (type UnfoldingMask@14) (MapType1Type RefType realType))) (= (type UnfoldingHeap@1) (MapType0Type RefType))) (= (type newPMask@4) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@2) (MapType0Type RefType))) (= (type Unfolding1Mask@4) (MapType1Type RefType realType))) (= (type UnfoldingHeap@0) (MapType0Type RefType))) (= (type Unfolding1Mask@3) (MapType1Type RefType realType))) (= (type Unfolding1Mask@2) (MapType1Type RefType realType))) (= (type Unfolding1Mask@0) (MapType1Type RefType realType))) (= (type Unfolding1Mask@1) (MapType1Type RefType realType))) (= (type UnfoldingMask@13) (MapType1Type RefType realType))) (= (type UnfoldingMask@12) (MapType1Type RefType realType))) (= (type UnfoldingMask@10) (MapType1Type RefType realType))) (= (type UnfoldingMask@11) (MapType1Type RefType realType))) (= (type Ops_5Heap@9) (MapType0Type RefType))) (= (type Ops_5Heap@7) (MapType0Type RefType))) (= (type newPMask@3) (MapType1Type RefType boolType))) (= (type Ops_5Heap@8) (MapType0Type RefType))) (= (type Ops_5Heap@5) (MapType0Type RefType))) (= (type UnfoldingMask@9) (MapType1Type RefType realType))) (= (type Ops_5Heap@6) (MapType0Type RefType))) (= (type UnfoldingMask@8) (MapType1Type RefType realType))) (= (type UnfoldingMask@7) (MapType1Type RefType realType))) (= (type UnfoldingMask@5) (MapType1Type RefType realType))) (= (type UnfoldingMask@6) (MapType1Type RefType realType))) (= (type Ops_5Heap@4) (MapType0Type RefType))) (= (type Ops_5Heap@2) (MapType0Type RefType))) (= (type newPMask@2) (MapType1Type RefType boolType))) (= (type Ops_5Heap@3) (MapType0Type RefType))) (= (type UnfoldingMask@4) (MapType1Type RefType realType))) (= (type Ops_5Heap@1) (MapType0Type RefType))) (= (type UnfoldingMask@3) (MapType1Type RefType realType))) (= (type UnfoldingMask@2) (MapType1Type RefType realType))) (= (type UnfoldingMask@0) (MapType1Type RefType realType))) (= (type UnfoldingMask@1) (MapType1Type RefType realType))) (= (type Ops_5Mask@0) (MapType1Type RefType realType))) (= (type Used_4Heap@0) (MapType0Type RefType))) (= (type Heap@17) (MapType0Type RefType))) (= (type newPMask@1) (MapType1Type RefType boolType))) (= (type Heap@18) (MapType0Type RefType))) (= (type Heap@16) (MapType0Type RefType))) (= (type Heap@15) (MapType0Type RefType))) (= (type Heap@13) (MapType0Type RefType))) (= (type Heap@12) (MapType0Type RefType))) (= (type Heap@14) (MapType0Type RefType))) (= (type freshVersion@1) FrameTypeType)) (= (type Mask@12) (MapType1Type RefType realType))) (= (type Mask@10) (MapType1Type RefType realType))) (= (type Mask@11) (MapType1Type RefType realType))) (= (type Mask@9) (MapType1Type RefType realType))) (= (type Mask@8) (MapType1Type RefType realType))) (= (type Heap@10) (MapType0Type RefType))) (= (type newPMask@0) (MapType1Type RefType boolType))) (= (type Heap@11) (MapType0Type RefType))) (= (type Heap@9) (MapType0Type RefType))) (= (type Heap@8) (MapType0Type RefType))) (= (type Heap@5) (MapType0Type RefType))) (= (type Heap@6) (MapType0Type RefType))) (= (type Heap@7) (MapType0Type RefType))) (= (type freshVersion@0) FrameTypeType)) (= (type Mask@7) (MapType1Type RefType realType))) (= (type Mask@5) (MapType1Type RefType realType))) (= (type Mask@6) (MapType1Type RefType realType))) (= (type Mask@4) (MapType1Type RefType realType))) (= (type Mask@3) (MapType1Type RefType realType))) (= (type Heap@@13) (MapType0Type RefType))) (= (type x@@20) RefType)) (= (type y@@1) RefType)) (= (type Heap@0) (MapType0Type RefType))) (= (type Mask@0) (MapType1Type RefType realType))) (= (type Mask@1) (MapType1Type RefType realType))) (= (type freshObj@1) RefType)) (= (type Heap@1) (MapType0Type RefType))) (= (type Mask@2) (MapType1Type RefType realType))) (= (type Heap@2) (MapType0Type RefType))) (= (type Heap@3) (MapType0Type RefType))) (= (type Heap@4) (MapType0Type RefType))))
(set-info :boogie-vc-id test05)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 179) (let ((anon102_correct true))
(let ((anon154_Else_correct  (=> (= (MapType0Select Heap@31 (MapType0Select Heap@31 freshObj@0 next) next) null) (=> (and (= Heap@33 Heap@31) (= (ControlFlow 0 3) 1)) anon102_correct))))
(let ((anon154_Then_correct  (=> (not (= (MapType0Select Heap@31 (MapType0Select Heap@31 freshObj@0 next) next) null)) (=> (and (and (forall ((o_28 T@U) (f_32 T@U) ) (! (let ((B@@11 (FieldTypeInv1 (type f_32))))
(let ((A@@12 (FieldTypeInv0 (type f_32))))
 (=> (and (and (= (type o_28) RefType) (= (type f_32) (FieldType A@@12 B@@11))) (or (U_2_bool (MapType1Select (MapType0Select Heap@31 null (|LL#sm| (MapType0Select Heap@31 freshObj@0 next))) o_28 f_32)) (U_2_bool (MapType1Select (MapType0Select Heap@31 null (|LL#sm| (MapType0Select Heap@31 (MapType0Select Heap@31 freshObj@0 next) next))) o_28 f_32)))) (U_2_bool (MapType1Select newPMask@12 o_28 f_32)))))
 :qid |stdinbpl.2035:33|
 :skolemid |101|
 :pattern ( (MapType1Select newPMask@12 o_28 f_32))
)) (= Heap@32 (MapType0Store Heap@31 null (|LL#sm| (MapType0Select Heap@31 freshObj@0 next)) newPMask@12))) (and (= Heap@33 Heap@32) (= (ControlFlow 0 2) 1))) anon102_correct))))
(let ((anon100_correct  (=> (state Heap@29 Mask@18) (=> (and (= Heap@30 (MapType0Store Heap@29 null (|LL#sm| (MapType0Select Heap@29 freshObj@0 next)) (MapType1Store (MapType0Select Heap@29 null (|LL#sm| (MapType0Select Heap@29 freshObj@0 next))) (MapType0Select Heap@29 freshObj@0 next) val (bool_2_U true)))) (= Heap@31 (MapType0Store Heap@30 null (|LL#sm| (MapType0Select Heap@30 freshObj@0 next)) (MapType1Store (MapType0Select Heap@30 null (|LL#sm| (MapType0Select Heap@30 freshObj@0 next))) (MapType0Select Heap@30 freshObj@0 next) next (bool_2_U true))))) (and (=> (= (ControlFlow 0 4) 2) anon154_Then_correct) (=> (= (ControlFlow 0 4) 3) anon154_Else_correct))))))
(let ((anon153_Else_correct  (=> (= (MapType0Select Heap@27 freshObj@0 next) null) (=> (and (= Heap@29 Heap@27) (= (ControlFlow 0 6) 4)) anon100_correct))))
(let ((anon153_Then_correct  (=> (not (= (MapType0Select Heap@27 freshObj@0 next) null)) (=> (and (and (forall ((o_27 T@U) (f_31 T@U) ) (! (let ((B@@12 (FieldTypeInv1 (type f_31))))
(let ((A@@13 (FieldTypeInv0 (type f_31))))
 (=> (and (and (= (type o_27) RefType) (= (type f_31) (FieldType A@@13 B@@12))) (or (U_2_bool (MapType1Select (MapType0Select Heap@27 null (|LL#sm| freshObj@0)) o_27 f_31)) (U_2_bool (MapType1Select (MapType0Select Heap@27 null (|LL#sm| (MapType0Select Heap@27 freshObj@0 next))) o_27 f_31)))) (U_2_bool (MapType1Select newPMask@11 o_27 f_31)))))
 :qid |stdinbpl.2024:33|
 :skolemid |100|
 :pattern ( (MapType1Select newPMask@11 o_27 f_31))
)) (= Heap@28 (MapType0Store Heap@27 null (|LL#sm| freshObj@0) newPMask@11))) (and (= Heap@29 Heap@28) (= (ControlFlow 0 5) 4))) anon100_correct))))
(let ((anon98_correct  (=> (state Heap@25 Mask@18) (=> (and (= Heap@26 (MapType0Store Heap@25 null (|LL#sm| freshObj@0) (MapType1Store (MapType0Select Heap@25 null (|LL#sm| freshObj@0)) freshObj@0 val (bool_2_U true)))) (= Heap@27 (MapType0Store Heap@26 null (|LL#sm| freshObj@0) (MapType1Store (MapType0Select Heap@26 null (|LL#sm| freshObj@0)) freshObj@0 next (bool_2_U true))))) (and (=> (= (ControlFlow 0 7) 5) anon153_Then_correct) (=> (= (ControlFlow 0 7) 6) anon153_Else_correct))))))
(let ((anon152_Else_correct  (=> (= (MapType0Select Heap@23 freshObj@0 next) null) (=> (and (= Heap@25 Heap@23) (= (ControlFlow 0 9) 7)) anon98_correct))))
(let ((anon152_Then_correct  (=> (not (= (MapType0Select Heap@23 freshObj@0 next) null)) (=> (and (and (forall ((o_26 T@U) (f_30 T@U) ) (! (let ((B@@13 (FieldTypeInv1 (type f_30))))
(let ((A@@14 (FieldTypeInv0 (type f_30))))
 (=> (and (and (= (type o_26) RefType) (= (type f_30) (FieldType A@@14 B@@13))) (or (U_2_bool (MapType1Select (MapType0Select Heap@23 null (|LL#sm| freshObj@0)) o_26 f_30)) (U_2_bool (MapType1Select (MapType0Select Heap@23 null (|LL#sm| (MapType0Select Heap@23 freshObj@0 next))) o_26 f_30)))) (U_2_bool (MapType1Select newPMask@10 o_26 f_30)))))
 :qid |stdinbpl.2013:33|
 :skolemid |99|
 :pattern ( (MapType1Select newPMask@10 o_26 f_30))
)) (= Heap@24 (MapType0Store Heap@23 null (|LL#sm| freshObj@0) newPMask@10))) (and (= Heap@25 Heap@24) (= (ControlFlow 0 8) 7))) anon98_correct))))
(let ((anon96_correct  (=> (and (= Heap@22 (MapType0Store Heap@21 null (|LL#sm| freshObj@0) (MapType1Store (MapType0Select Heap@21 null (|LL#sm| freshObj@0)) freshObj@0 val (bool_2_U true)))) (= Heap@23 (MapType0Store Heap@22 null (|LL#sm| freshObj@0) (MapType1Store (MapType0Select Heap@22 null (|LL#sm| freshObj@0)) freshObj@0 next (bool_2_U true))))) (and (=> (= (ControlFlow 0 10) 8) anon152_Then_correct) (=> (= (ControlFlow 0 10) 9) anon152_Else_correct)))))
(let ((anon95_correct  (=> (state Heap@21 Unfolding1Mask@9) (and (=> (= (ControlFlow 0 12) (- 0 13)) (= (U_2_int (MapType0Select Heap@21 (MapType0Select Heap@21 freshObj@0 next) val)) 20)) (=> (= (U_2_int (MapType0Select Heap@21 (MapType0Select Heap@21 freshObj@0 next) val)) 20) (=> (= (ControlFlow 0 12) 10) anon96_correct))))))
(let ((anon151_Else_correct  (=> (= (MapType0Select Heap@21 (MapType0Select Heap@21 freshObj@0 next) next) null) (=> (and (= Unfolding1Mask@9 Unfolding1Mask@7) (= (ControlFlow 0 15) 12)) anon95_correct))))
(let ((anon151_Then_correct  (=> (and (not (= (MapType0Select Heap@21 (MapType0Select Heap@21 freshObj@0 next) next) null)) (= Unfolding1Mask@8 (MapType1Store Unfolding1Mask@7 null (LL (MapType0Select Heap@21 (MapType0Select Heap@21 freshObj@0 next) next)) (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@7 null (LL (MapType0Select Heap@21 (MapType0Select Heap@21 freshObj@0 next) next)))) FullPerm))))) (=> (and (and (InsidePredicate (LL (MapType0Select Heap@21 freshObj@0 next)) (MapType0Select Heap@21 null (LL (MapType0Select Heap@21 freshObj@0 next))) (LL (MapType0Select Heap@21 (MapType0Select Heap@21 freshObj@0 next) next)) (MapType0Select Heap@21 null (LL (MapType0Select Heap@21 (MapType0Select Heap@21 freshObj@0 next) next)))) (state Heap@21 Unfolding1Mask@8)) (and (= Unfolding1Mask@9 Unfolding1Mask@8) (= (ControlFlow 0 14) 12))) anon95_correct))))
(let ((anon93_correct  (=> (= Unfolding1Mask@5 (MapType1Store UnfoldingMask@29 null (LL (MapType0Select Heap@21 freshObj@0 next)) (real_2_U (- (U_2_real (MapType1Select UnfoldingMask@29 null (LL (MapType0Select Heap@21 freshObj@0 next)))) FullPerm)))) (=> (and (not (= (MapType0Select Heap@21 freshObj@0 next) null)) (= Unfolding1Mask@6 (MapType1Store Unfolding1Mask@5 (MapType0Select Heap@21 freshObj@0 next) val (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@5 (MapType0Select Heap@21 freshObj@0 next) val)) FullPerm))))) (=> (and (and (state Heap@21 Unfolding1Mask@6) (not (= (MapType0Select Heap@21 freshObj@0 next) null))) (and (= Unfolding1Mask@7 (MapType1Store Unfolding1Mask@6 (MapType0Select Heap@21 freshObj@0 next) next (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@6 (MapType0Select Heap@21 freshObj@0 next) next)) FullPerm)))) (state Heap@21 Unfolding1Mask@7))) (and (=> (= (ControlFlow 0 16) 14) anon151_Then_correct) (=> (= (ControlFlow 0 16) 15) anon151_Else_correct)))))))
(let ((anon150_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 19) 16)) anon93_correct)))
(let ((anon150_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 17) (- 0 18)) (<= FullPerm (U_2_real (MapType1Select UnfoldingMask@29 null (LL (MapType0Select Heap@21 freshObj@0 next)))))) (=> (<= FullPerm (U_2_real (MapType1Select UnfoldingMask@29 null (LL (MapType0Select Heap@21 freshObj@0 next))))) (=> (= (ControlFlow 0 17) 16) anon93_correct))))))
(let ((anon149_Then_correct  (=> (not (= (MapType0Select Heap@21 freshObj@0 next) null)) (=> (and (|LL#trigger| Heap@21 (LL (MapType0Select Heap@21 freshObj@0 next))) (= (MapType0Select Heap@21 null (LL (MapType0Select Heap@21 freshObj@0 next))) (CombineFrames (FrameFragment (MapType0Select Heap@21 (MapType0Select Heap@21 freshObj@0 next) val)) (CombineFrames (FrameFragment (MapType0Select Heap@21 (MapType0Select Heap@21 freshObj@0 next) next)) (FrameFragment (ite (not (= (MapType0Select Heap@21 (MapType0Select Heap@21 freshObj@0 next) next) null)) (MapType0Select Heap@21 null (LL (MapType0Select Heap@21 (MapType0Select Heap@21 freshObj@0 next) next))) EmptyFrame)))))) (and (=> (= (ControlFlow 0 20) 17) anon150_Then_correct) (=> (= (ControlFlow 0 20) 19) anon150_Else_correct))))))
(let ((anon149_Else_correct  (=> (and (= (MapType0Select Heap@21 freshObj@0 next) null) (= (ControlFlow 0 11) 10)) anon96_correct)))
(let ((anon90_correct  (=> (state Heap@21 UnfoldingMask@29) (and (=> (= (ControlFlow 0 21) 20) anon149_Then_correct) (=> (= (ControlFlow 0 21) 11) anon149_Else_correct)))))
(let ((anon148_Else_correct  (=> (= (MapType0Select Heap@21 freshObj@0 next) null) (=> (and (= UnfoldingMask@29 UnfoldingMask@27) (= (ControlFlow 0 23) 21)) anon90_correct))))
(let ((anon148_Then_correct  (=> (and (not (= (MapType0Select Heap@21 freshObj@0 next) null)) (= UnfoldingMask@28 (MapType1Store UnfoldingMask@27 null (LL (MapType0Select Heap@21 freshObj@0 next)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@27 null (LL (MapType0Select Heap@21 freshObj@0 next)))) FullPerm))))) (=> (and (and (InsidePredicate (LL freshObj@0) (MapType0Select Heap@21 null (LL freshObj@0)) (LL (MapType0Select Heap@21 freshObj@0 next)) (MapType0Select Heap@21 null (LL (MapType0Select Heap@21 freshObj@0 next)))) (state Heap@21 UnfoldingMask@28)) (and (= UnfoldingMask@29 UnfoldingMask@28) (= (ControlFlow 0 22) 21))) anon90_correct))))
(let ((anon88_correct  (=> (= UnfoldingMask@25 (MapType1Store Mask@17 null (LL freshObj@0) (real_2_U (- (U_2_real (MapType1Select Mask@17 null (LL freshObj@0))) FullPerm)))) (=> (and (not (= freshObj@0 null)) (= UnfoldingMask@26 (MapType1Store UnfoldingMask@25 freshObj@0 val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@25 freshObj@0 val)) FullPerm))))) (=> (and (and (state Heap@21 UnfoldingMask@26) (not (= freshObj@0 null))) (and (= UnfoldingMask@27 (MapType1Store UnfoldingMask@26 freshObj@0 next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@26 freshObj@0 next)) FullPerm)))) (state Heap@21 UnfoldingMask@27))) (and (=> (= (ControlFlow 0 24) 22) anon148_Then_correct) (=> (= (ControlFlow 0 24) 23) anon148_Else_correct)))))))
(let ((anon147_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 27) 24)) anon88_correct)))
(let ((anon147_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 25) (- 0 26)) (<= FullPerm (U_2_real (MapType1Select Mask@17 null (LL freshObj@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@17 null (LL freshObj@0)))) (=> (= (ControlFlow 0 25) 24) anon88_correct))))))
(let ((anon86_correct  (=> (state Heap@21 UnfoldingMask@24) (and (=> (= (ControlFlow 0 28) (- 0 29)) (= (U_2_int (MapType0Select Heap@21 freshObj@0 val)) 10)) (=> (= (U_2_int (MapType0Select Heap@21 freshObj@0 val)) 10) (=> (and (|LL#trigger| Heap@21 (LL freshObj@0)) (= (MapType0Select Heap@21 null (LL freshObj@0)) (CombineFrames (FrameFragment (MapType0Select Heap@21 freshObj@0 val)) (CombineFrames (FrameFragment (MapType0Select Heap@21 freshObj@0 next)) (FrameFragment (ite (not (= (MapType0Select Heap@21 freshObj@0 next) null)) (MapType0Select Heap@21 null (LL (MapType0Select Heap@21 freshObj@0 next))) EmptyFrame)))))) (and (=> (= (ControlFlow 0 28) 25) anon147_Then_correct) (=> (= (ControlFlow 0 28) 27) anon147_Else_correct))))))))
(let ((anon146_Else_correct  (=> (= (MapType0Select Heap@21 freshObj@0 next) null) (=> (and (= UnfoldingMask@24 UnfoldingMask@22) (= (ControlFlow 0 31) 28)) anon86_correct))))
(let ((anon146_Then_correct  (=> (and (not (= (MapType0Select Heap@21 freshObj@0 next) null)) (= UnfoldingMask@23 (MapType1Store UnfoldingMask@22 null (LL (MapType0Select Heap@21 freshObj@0 next)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@22 null (LL (MapType0Select Heap@21 freshObj@0 next)))) FullPerm))))) (=> (and (and (InsidePredicate (LL freshObj@0) (MapType0Select Heap@21 null (LL freshObj@0)) (LL (MapType0Select Heap@21 freshObj@0 next)) (MapType0Select Heap@21 null (LL (MapType0Select Heap@21 freshObj@0 next)))) (state Heap@21 UnfoldingMask@23)) (and (= UnfoldingMask@24 UnfoldingMask@23) (= (ControlFlow 0 30) 28))) anon86_correct))))
(let ((anon84_correct  (=> (= UnfoldingMask@20 (MapType1Store Mask@17 null (LL freshObj@0) (real_2_U (- (U_2_real (MapType1Select Mask@17 null (LL freshObj@0))) FullPerm)))) (=> (and (not (= freshObj@0 null)) (= UnfoldingMask@21 (MapType1Store UnfoldingMask@20 freshObj@0 val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@20 freshObj@0 val)) FullPerm))))) (=> (and (and (state Heap@21 UnfoldingMask@21) (not (= freshObj@0 null))) (and (= UnfoldingMask@22 (MapType1Store UnfoldingMask@21 freshObj@0 next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@21 freshObj@0 next)) FullPerm)))) (state Heap@21 UnfoldingMask@22))) (and (=> (= (ControlFlow 0 32) 30) anon146_Then_correct) (=> (= (ControlFlow 0 32) 31) anon146_Else_correct)))))))
(let ((anon145_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 35) 32)) anon84_correct)))
(let ((anon145_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 33) (- 0 34)) (<= FullPerm (U_2_real (MapType1Select Mask@17 null (LL freshObj@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@17 null (LL freshObj@0)))) (=> (= (ControlFlow 0 33) 32) anon84_correct))))))
(let ((anon82_correct  (=> (= Mask@18 (MapType1Store Mask@17 null (LL freshObj@0) (real_2_U (- (U_2_real (MapType1Select Mask@17 null (LL freshObj@0))) FullPerm)))) (=> (and (|LL#trigger| Heap@21 (LL freshObj@0)) (= (MapType0Select Heap@21 null (LL freshObj@0)) (CombineFrames (FrameFragment (MapType0Select Heap@21 freshObj@0 val)) (CombineFrames (FrameFragment (MapType0Select Heap@21 freshObj@0 next)) (FrameFragment (ite (not (= (MapType0Select Heap@21 freshObj@0 next) null)) (MapType0Select Heap@21 null (LL (MapType0Select Heap@21 freshObj@0 next))) EmptyFrame)))))) (and (=> (= (ControlFlow 0 36) 33) anon145_Then_correct) (=> (= (ControlFlow 0 36) 35) anon145_Else_correct))))))
(let ((anon144_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 39) 36)) anon82_correct)))
(let ((anon144_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 37) (- 0 38)) (<= FullPerm (U_2_real (MapType1Select Mask@17 null (LL freshObj@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@17 null (LL freshObj@0)))) (=> (= (ControlFlow 0 37) 36) anon82_correct))))))
(let ((anon80_correct  (and (=> (= (ControlFlow 0 40) (- 0 42)) (=> (and (and b_8@82 b_8@82) b_9@6) (and (= neededTransfer@3 0.0) (= (U_2_real (MapType1Select Used_5Mask@3 null (LL freshObj@0))) initNeededTransfer@0)))) (=> (=> (and (and b_8@82 b_8@82) b_9@6) (and (= neededTransfer@3 0.0) (= (U_2_real (MapType1Select Used_5Mask@3 null (LL freshObj@0))) initNeededTransfer@0))) (=> (and (= b_10@0  (and b_8@82 b_9@6)) (= b_10@1  (and b_10@0 (state Result_1Heap Result_1Mask)))) (=> (and (and (and (= b_10@2  (and b_10@1 (sumMask Result_1Mask Ops_5Mask Used_5Mask@3))) (= b_10@3  (and (and b_10@2 (IdenticalOnKnownLocations Ops_5Heap@28 Result_1Heap Ops_5Mask)) (IdenticalOnKnownLocations Used_5Heap@0 Result_1Heap Used_5Mask@3)))) (and (= b_10@4  (and b_10@3 (state Result_1Heap Result_1Mask))) (= b_8@83  (and b_8@82 b_10@4)))) (and (and (= Mask@16 (MapType1Store Mask@15 null (wand_1 freshObj@0 FullPerm freshObj@0 FullPerm freshObj@0 10 freshObj@0 FullPerm freshObj@0 null freshObj@0 FullPerm freshObj@0 20 freshObj@0 FullPerm) (real_2_U (+ (U_2_real (MapType1Select Mask@15 null (wand_1 freshObj@0 FullPerm freshObj@0 FullPerm freshObj@0 10 freshObj@0 FullPerm freshObj@0 null freshObj@0 FullPerm freshObj@0 20 freshObj@0 FullPerm))) FullPerm)))) (state Heap@21 Mask@16)) (and (state Heap@21 Mask@16) (state Heap@21 Mask@16)))) (and (=> (= (ControlFlow 0 40) (- 0 41)) (<= FullPerm (U_2_real (MapType1Select Mask@16 null (wand_1 freshObj@0 FullPerm freshObj@0 FullPerm freshObj@0 10 freshObj@0 FullPerm freshObj@0 null freshObj@0 FullPerm freshObj@0 20 freshObj@0 FullPerm))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@16 null (wand_1 freshObj@0 FullPerm freshObj@0 FullPerm freshObj@0 10 freshObj@0 FullPerm freshObj@0 null freshObj@0 FullPerm freshObj@0 20 freshObj@0 FullPerm)))) (=> (and (= Mask@17 (MapType1Store Mask@16 null (wand_1 freshObj@0 FullPerm freshObj@0 FullPerm freshObj@0 10 freshObj@0 FullPerm freshObj@0 null freshObj@0 FullPerm freshObj@0 20 freshObj@0 FullPerm) (real_2_U (- (U_2_real (MapType1Select Mask@16 null (wand_1 freshObj@0 FullPerm freshObj@0 FullPerm freshObj@0 10 freshObj@0 FullPerm freshObj@0 null freshObj@0 FullPerm freshObj@0 20 freshObj@0 FullPerm))) FullPerm)))) (state Heap@21 Mask@17)) (and (=> (= (ControlFlow 0 40) 37) anon144_Then_correct) (=> (= (ControlFlow 0 40) 39) anon144_Else_correct)))))))))))
(let ((anon143_Else_correct  (=> (>= 0.0 takeTransfer@1) (=> (and (= Heap@21 Heap@19) (= Mask@15 Mask@13)) (=> (and (and (= neededTransfer@3 neededTransfer@1) (= b_9@6 b_9@3)) (and (= Used_5Mask@3 Used_5Mask@1) (= (ControlFlow 0 45) 40))) anon80_correct)))))
(let ((anon143_Then_correct  (=> (> takeTransfer@1 0.0) (=> (and (= neededTransfer@2 (- neededTransfer@1 takeTransfer@1)) (= Used_5Mask@2 (MapType1Store Used_5Mask@1 null (LL freshObj@0) (real_2_U (+ (U_2_real (MapType1Select Used_5Mask@1 null (LL freshObj@0))) takeTransfer@1))))) (=> (and (and (= b_9@4  (and b_9@3 (state Used_5Heap@0 Used_5Mask@2))) (= TempMask@1 (MapType1Store ZeroMask null (LL freshObj@0) (real_2_U FullPerm)))) (and (= b_9@5  (and b_9@4 (IdenticalOnKnownLocations Heap@19 Used_5Heap@0 TempMask@1))) (= Mask@14 (MapType1Store Mask@13 null (LL freshObj@0) (real_2_U (- (U_2_real (MapType1Select Mask@13 null (LL freshObj@0))) takeTransfer@1)))))) (=> (and (and (and (forall ((o_25 T@U) (f_29 T@U) ) (! (let ((B@@14 (FieldTypeInv1 (type f_29))))
(let ((A@@15 (FieldTypeInv0 (type f_29))))
 (=> (and (and (= (type o_25) RefType) (= (type f_29) (FieldType A@@15 B@@14))) (or (U_2_bool (MapType1Select (MapType0Select Heap@19 null (|wand_1#sm| freshObj@0 FullPerm freshObj@0 FullPerm freshObj@0 10 freshObj@0 FullPerm freshObj@0 null freshObj@0 FullPerm freshObj@0 20 freshObj@0 FullPerm)) o_25 f_29)) (U_2_bool (MapType1Select (MapType0Select Heap@19 null (|LL#sm| freshObj@0)) o_25 f_29)))) (U_2_bool (MapType1Select newPMask@9 o_25 f_29)))))
 :qid |stdinbpl.1861:35|
 :skolemid |98|
 :pattern ( (MapType1Select newPMask@9 o_25 f_29))
)) (= Heap@20 (MapType0Store Heap@19 null (|wand_1#sm| freshObj@0 FullPerm freshObj@0 FullPerm freshObj@0 10 freshObj@0 FullPerm freshObj@0 null freshObj@0 FullPerm freshObj@0 20 freshObj@0 FullPerm) newPMask@9))) (and (= Heap@21 Heap@20) (= Mask@15 Mask@14))) (and (and (= neededTransfer@3 neededTransfer@2) (= b_9@6 b_9@5)) (and (= Used_5Mask@3 Used_5Mask@2) (= (ControlFlow 0 44) 40)))) anon80_correct))))))
(let ((anon142_Else_correct  (=> (and (< maskTransfer@1 neededTransfer@1) (= takeTransfer@1 maskTransfer@1)) (and (=> (= (ControlFlow 0 47) 44) anon143_Then_correct) (=> (= (ControlFlow 0 47) 45) anon143_Else_correct)))))
(let ((anon142_Then_correct  (=> (and (<= neededTransfer@1 maskTransfer@1) (= takeTransfer@1 neededTransfer@1)) (and (=> (= (ControlFlow 0 46) 44) anon143_Then_correct) (=> (= (ControlFlow 0 46) 45) anon143_Else_correct)))))
(let ((anon141_Then_correct  (=> (and (and (and (and (and b_8@82 b_8@82) b_9@3) true) (> neededTransfer@1 0.0)) (= maskTransfer@1 (U_2_real (MapType1Select Mask@13 null (LL freshObj@0))))) (and (=> (= (ControlFlow 0 48) 46) anon142_Then_correct) (=> (= (ControlFlow 0 48) 47) anon142_Else_correct)))))
(let ((anon141_Else_correct  (=> (not (and (and (and (and b_8@82 b_8@82) b_9@3) true) (> neededTransfer@1 0.0))) (=> (and (= Heap@21 Heap@19) (= Mask@15 Mask@13)) (=> (and (and (= neededTransfer@3 neededTransfer@1) (= b_9@6 b_9@3)) (and (= Used_5Mask@3 Used_5Mask@1) (= (ControlFlow 0 43) 40))) anon80_correct)))))
(let ((anon140_Else_correct  (=> (and (and (>= 0.0 takeTransfer@0) (= Used_5Mask@1 ZeroMask)) (and (= b_9@3 b_9@0) (= neededTransfer@1 FullPerm))) (and (=> (= (ControlFlow 0 51) 48) anon141_Then_correct) (=> (= (ControlFlow 0 51) 43) anon141_Else_correct)))))
(let ((anon140_Then_correct  (=> (and (> takeTransfer@0 0.0) (= neededTransfer@0 (- FullPerm takeTransfer@0))) (=> (and (and (and (= Used_5Mask@0 (MapType1Store ZeroMask null (LL freshObj@0) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (LL freshObj@0))) takeTransfer@0)))) (= b_9@1  (and b_9@0 (state Used_5Heap@0 Used_5Mask@0)))) (and (= TempMask@0 (MapType1Store ZeroMask null (LL freshObj@0) (real_2_U FullPerm))) (= b_9@2  (and b_9@1 (IdenticalOnKnownLocations Ops_5Heap@28 Used_5Heap@0 TempMask@0))))) (and (and (= Ops_5Mask@3 (MapType1Store Ops_5Mask@2 null (LL freshObj@0) (real_2_U (- (U_2_real (MapType1Select Ops_5Mask@2 null (LL freshObj@0))) takeTransfer@0)))) (= Used_5Mask@1 Used_5Mask@0)) (and (= b_9@3 b_9@2) (= neededTransfer@1 neededTransfer@0)))) (and (=> (= (ControlFlow 0 50) 48) anon141_Then_correct) (=> (= (ControlFlow 0 50) 43) anon141_Else_correct))))))
(let ((anon139_Else_correct  (=> (and (< maskTransfer@0 FullPerm) (= takeTransfer@0 maskTransfer@0)) (and (=> (= (ControlFlow 0 53) 50) anon140_Then_correct) (=> (= (ControlFlow 0 53) 51) anon140_Else_correct)))))
(let ((anon139_Then_correct  (=> (and (<= FullPerm maskTransfer@0) (= takeTransfer@0 FullPerm)) (and (=> (= (ControlFlow 0 52) 50) anon140_Then_correct) (=> (= (ControlFlow 0 52) 51) anon140_Else_correct)))))
(let ((anon138_Then_correct  (=> (and (and (and (and (and b_8@82 b_8@82) b_9@0) true) (> FullPerm 0.0)) (= maskTransfer@0 (U_2_real (MapType1Select Ops_5Mask@2 null (LL freshObj@0))))) (and (=> (= (ControlFlow 0 54) 52) anon139_Then_correct) (=> (= (ControlFlow 0 54) 53) anon139_Else_correct)))))
(let ((anon138_Else_correct  (=> (and (and (not (and (and (and (and b_8@82 b_8@82) b_9@0) true) (> FullPerm 0.0))) (= Used_5Mask@1 ZeroMask)) (and (= b_9@3 b_9@0) (= neededTransfer@1 FullPerm))) (and (=> (= (ControlFlow 0 49) 48) anon141_Then_correct) (=> (= (ControlFlow 0 49) 43) anon141_Else_correct)))))
(let ((anon68_correct  (=> (and (and (= b_8@81  (and b_8@80 (state Ops_5Heap@28 Ops_5Mask@2))) (= b_8@82  (and b_8@81 (state Ops_5Heap@28 Ops_5Mask@2)))) (and (= b_9@0  (and b_9 (state Used_5Heap@0 ZeroMask))) (= initNeededTransfer@0 (+ (U_2_real (MapType1Select ZeroMask null (LL freshObj@0))) FullPerm)))) (and (=> (= (ControlFlow 0 55) (- 0 56)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 55) 54) anon138_Then_correct) (=> (= (ControlFlow 0 55) 49) anon138_Else_correct)))))))
(let ((anon67_correct  (=> (= b_8@79  (and b_8@78 (state Ops_5Heap@27 Ops_5Mask@1))) (=> (and (and (= b_8@80 b_8@79) (= Ops_5Mask@2 Ops_5Mask@1)) (and (= Ops_5Heap@28 Ops_5Heap@27) (= (ControlFlow 0 60) 55))) anon68_correct))))
(let ((anon137_Else_correct  (=> (and (and (= (MapType0Select Ops_5Heap@25 (MapType0Select Ops_5Heap@25 freshObj@0 next) next) null) (= b_8@78 b_8@76)) (and (= Ops_5Heap@27 Ops_5Heap@25) (= (ControlFlow 0 62) 60))) anon67_correct)))
(let ((anon137_Then_correct  (=> (and (not (= (MapType0Select Ops_5Heap@25 (MapType0Select Ops_5Heap@25 freshObj@0 next) next) null)) (= b_8@77  (and b_8@76 (forall ((o_24 T@U) (f_28 T@U) ) (! (let ((B@@15 (FieldTypeInv1 (type f_28))))
(let ((A@@16 (FieldTypeInv0 (type f_28))))
 (=> (and (and (= (type o_24) RefType) (= (type f_28) (FieldType A@@16 B@@15))) (or (U_2_bool (MapType1Select (MapType0Select Ops_5Heap@25 null (|LL#sm| (MapType0Select Ops_5Heap@25 freshObj@0 next))) o_24 f_28)) (U_2_bool (MapType1Select (MapType0Select Ops_5Heap@25 null (|LL#sm| (MapType0Select Ops_5Heap@25 (MapType0Select Ops_5Heap@25 freshObj@0 next) next))) o_24 f_28)))) (U_2_bool (MapType1Select newPMask@8 o_24 f_28)))))
 :qid |stdinbpl.1791:44|
 :skolemid |97|
 :pattern ( (MapType1Select newPMask@8 o_24 f_28))
))))) (=> (and (and (= Ops_5Heap@26 (MapType0Store Ops_5Heap@25 null (|LL#sm| (MapType0Select Ops_5Heap@25 freshObj@0 next)) newPMask@8)) (= b_8@78 b_8@77)) (and (= Ops_5Heap@27 Ops_5Heap@26) (= (ControlFlow 0 61) 60))) anon67_correct))))
(let ((anon65_correct  (=> (= b_8@76  (and b_8@75 (state Ops_5Heap@23 Ops_5Mask@1))) (=> (and (= Ops_5Heap@24 (MapType0Store Ops_5Heap@23 null (|LL#sm| (MapType0Select Ops_5Heap@23 freshObj@0 next)) (MapType1Store (MapType0Select Ops_5Heap@23 null (|LL#sm| (MapType0Select Ops_5Heap@23 freshObj@0 next))) (MapType0Select Ops_5Heap@23 freshObj@0 next) val (bool_2_U true)))) (= Ops_5Heap@25 (MapType0Store Ops_5Heap@24 null (|LL#sm| (MapType0Select Ops_5Heap@24 freshObj@0 next)) (MapType1Store (MapType0Select Ops_5Heap@24 null (|LL#sm| (MapType0Select Ops_5Heap@24 freshObj@0 next))) (MapType0Select Ops_5Heap@24 freshObj@0 next) next (bool_2_U true))))) (and (=> (= (ControlFlow 0 63) 61) anon137_Then_correct) (=> (= (ControlFlow 0 63) 62) anon137_Else_correct))))))
(let ((anon136_Else_correct  (=> (and (and (= (MapType0Select Ops_5Heap@21 freshObj@0 next) null) (= Ops_5Heap@23 Ops_5Heap@21)) (and (= b_8@75 b_8@73) (= (ControlFlow 0 65) 63))) anon65_correct)))
(let ((anon136_Then_correct  (=> (and (not (= (MapType0Select Ops_5Heap@21 freshObj@0 next) null)) (= b_8@74  (and b_8@73 (forall ((o_23 T@U) (f_27 T@U) ) (! (let ((B@@16 (FieldTypeInv1 (type f_27))))
(let ((A@@17 (FieldTypeInv0 (type f_27))))
 (=> (and (and (= (type o_23) RefType) (= (type f_27) (FieldType A@@17 B@@16))) (or (U_2_bool (MapType1Select (MapType0Select Ops_5Heap@21 null (|LL#sm| freshObj@0)) o_23 f_27)) (U_2_bool (MapType1Select (MapType0Select Ops_5Heap@21 null (|LL#sm| (MapType0Select Ops_5Heap@21 freshObj@0 next))) o_23 f_27)))) (U_2_bool (MapType1Select newPMask@7 o_23 f_27)))))
 :qid |stdinbpl.1780:44|
 :skolemid |96|
 :pattern ( (MapType1Select newPMask@7 o_23 f_27))
))))) (=> (and (and (= Ops_5Heap@22 (MapType0Store Ops_5Heap@21 null (|LL#sm| freshObj@0) newPMask@7)) (= Ops_5Heap@23 Ops_5Heap@22)) (and (= b_8@75 b_8@74) (= (ControlFlow 0 64) 63))) anon65_correct))))
(let ((anon63_correct  (=> (and (and (= b_8@72  (and b_8@71 (state Ops_5Heap@19 UnfoldingMask@19))) (= b_8@73  (and b_8@72 (=> (not (= (MapType0Select Ops_5Heap@19 freshObj@0 next) null)) (= (U_2_int (MapType0Select Ops_5Heap@19 (MapType0Select Ops_5Heap@19 freshObj@0 next) val)) 20))))) (and (= Ops_5Heap@20 (MapType0Store Ops_5Heap@19 null (|LL#sm| freshObj@0) (MapType1Store (MapType0Select Ops_5Heap@19 null (|LL#sm| freshObj@0)) freshObj@0 val (bool_2_U true)))) (= Ops_5Heap@21 (MapType0Store Ops_5Heap@20 null (|LL#sm| freshObj@0) (MapType1Store (MapType0Select Ops_5Heap@20 null (|LL#sm| freshObj@0)) freshObj@0 next (bool_2_U true)))))) (and (=> (= (ControlFlow 0 66) 64) anon136_Then_correct) (=> (= (ControlFlow 0 66) 65) anon136_Else_correct)))))
(let ((anon135_Else_correct  (=> (and (and (= (MapType0Select Ops_5Heap@19 freshObj@0 next) null) (= b_8@71 b_8@68)) (and (= UnfoldingMask@19 UnfoldingMask@17) (= (ControlFlow 0 68) 66))) anon63_correct)))
(let ((anon135_Then_correct  (=> (not (= (MapType0Select Ops_5Heap@19 freshObj@0 next) null)) (=> (and (= UnfoldingMask@18 (MapType1Store UnfoldingMask@17 null (LL (MapType0Select Ops_5Heap@19 freshObj@0 next)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@17 null (LL (MapType0Select Ops_5Heap@19 freshObj@0 next)))) FullPerm)))) (= b_8@69  (and b_8@68 (InsidePredicate (LL freshObj@0) (MapType0Select Ops_5Heap@19 null (LL freshObj@0)) (LL (MapType0Select Ops_5Heap@19 freshObj@0 next)) (MapType0Select Ops_5Heap@19 null (LL (MapType0Select Ops_5Heap@19 freshObj@0 next))))))) (=> (and (and (= b_8@70  (and b_8@69 (state Ops_5Heap@19 UnfoldingMask@18))) (= b_8@71 b_8@70)) (and (= UnfoldingMask@19 UnfoldingMask@18) (= (ControlFlow 0 67) 66))) anon63_correct)))))
(let ((anon61_correct  (=> (= b_8@63  (and b_8@62 (|LL#trigger| Ops_5Heap@19 (LL freshObj@0)))) (=> (and (and (and (= b_8@64  (and b_8@63 (= (MapType0Select Ops_5Heap@19 null (LL freshObj@0)) (CombineFrames (FrameFragment (MapType0Select Ops_5Heap@19 freshObj@0 val)) (CombineFrames (FrameFragment (MapType0Select Ops_5Heap@19 freshObj@0 next)) (FrameFragment (ite (not (= (MapType0Select Ops_5Heap@19 freshObj@0 next) null)) (MapType0Select Ops_5Heap@19 null (LL (MapType0Select Ops_5Heap@19 freshObj@0 next))) EmptyFrame))))))) (= UnfoldingMask@15 (MapType1Store Ops_5Mask@1 null (LL freshObj@0) (real_2_U (- (U_2_real (MapType1Select Ops_5Mask@1 null (LL freshObj@0))) FullPerm))))) (and (= b_8@65  (and b_8@64 (not (= freshObj@0 null)))) (= UnfoldingMask@16 (MapType1Store UnfoldingMask@15 freshObj@0 val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@15 freshObj@0 val)) FullPerm)))))) (and (and (= b_8@66  (and b_8@65 (state Ops_5Heap@19 UnfoldingMask@16))) (= b_8@67  (and b_8@66 (not (= freshObj@0 null))))) (and (= UnfoldingMask@17 (MapType1Store UnfoldingMask@16 freshObj@0 next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@16 freshObj@0 next)) FullPerm)))) (= b_8@68  (and b_8@67 (state Ops_5Heap@19 UnfoldingMask@17)))))) (and (=> (= (ControlFlow 0 69) 67) anon135_Then_correct) (=> (= (ControlFlow 0 69) 68) anon135_Else_correct))))))
(let ((anon60_correct  (=> (and (and (= b_8@61  (and b_8@60 (state Ops_5Heap@18 Ops_5Mask@1))) (= Ops_5Heap@19 Ops_5Heap@18)) (and (= b_8@62 b_8@61) (= (ControlFlow 0 71) 69))) anon61_correct)))
(let ((anon134_Else_correct  (=> (and (and (= (MapType0Select Ops_5Heap@16 (MapType0Select Ops_5Heap@16 freshObj@0 next) next) null) (= b_8@60 b_8@58)) (and (= Ops_5Heap@18 Ops_5Heap@16) (= (ControlFlow 0 73) 71))) anon60_correct)))
(let ((anon134_Then_correct  (=> (and (not (= (MapType0Select Ops_5Heap@16 (MapType0Select Ops_5Heap@16 freshObj@0 next) next) null)) (= b_8@59  (and b_8@58 (forall ((o_22 T@U) (f_26 T@U) ) (! (let ((B@@17 (FieldTypeInv1 (type f_26))))
(let ((A@@18 (FieldTypeInv0 (type f_26))))
 (=> (and (and (= (type o_22) RefType) (= (type f_26) (FieldType A@@18 B@@17))) (or (U_2_bool (MapType1Select (MapType0Select Ops_5Heap@16 null (|LL#sm| (MapType0Select Ops_5Heap@16 freshObj@0 next))) o_22 f_26)) (U_2_bool (MapType1Select (MapType0Select Ops_5Heap@16 null (|LL#sm| (MapType0Select Ops_5Heap@16 (MapType0Select Ops_5Heap@16 freshObj@0 next) next))) o_22 f_26)))) (U_2_bool (MapType1Select newPMask@6 o_22 f_26)))))
 :qid |stdinbpl.1737:48|
 :skolemid |95|
 :pattern ( (MapType1Select newPMask@6 o_22 f_26))
))))) (=> (and (and (= Ops_5Heap@17 (MapType0Store Ops_5Heap@16 null (|LL#sm| (MapType0Select Ops_5Heap@16 freshObj@0 next)) newPMask@6)) (= b_8@60 b_8@59)) (and (= Ops_5Heap@18 Ops_5Heap@17) (= (ControlFlow 0 72) 71))) anon60_correct))))
(let ((anon58_correct  (=> (= b_8@58  (and b_8@57 (state Ops_5Heap@14 Ops_5Mask@1))) (=> (and (= Ops_5Heap@15 (MapType0Store Ops_5Heap@14 null (|LL#sm| (MapType0Select Ops_5Heap@14 freshObj@0 next)) (MapType1Store (MapType0Select Ops_5Heap@14 null (|LL#sm| (MapType0Select Ops_5Heap@14 freshObj@0 next))) (MapType0Select Ops_5Heap@14 freshObj@0 next) val (bool_2_U true)))) (= Ops_5Heap@16 (MapType0Store Ops_5Heap@15 null (|LL#sm| (MapType0Select Ops_5Heap@15 freshObj@0 next)) (MapType1Store (MapType0Select Ops_5Heap@15 null (|LL#sm| (MapType0Select Ops_5Heap@15 freshObj@0 next))) (MapType0Select Ops_5Heap@15 freshObj@0 next) next (bool_2_U true))))) (and (=> (= (ControlFlow 0 74) 72) anon134_Then_correct) (=> (= (ControlFlow 0 74) 73) anon134_Else_correct))))))
(let ((anon133_Else_correct  (=> (and (and (= (MapType0Select Ops_5Heap@12 freshObj@0 next) null) (= Ops_5Heap@14 Ops_5Heap@12)) (and (= b_8@57 b_8@55) (= (ControlFlow 0 76) 74))) anon58_correct)))
(let ((anon133_Then_correct  (=> (and (not (= (MapType0Select Ops_5Heap@12 freshObj@0 next) null)) (= b_8@56  (and b_8@55 (forall ((o_21 T@U) (f_25 T@U) ) (! (let ((B@@18 (FieldTypeInv1 (type f_25))))
(let ((A@@19 (FieldTypeInv0 (type f_25))))
 (=> (and (and (= (type o_21) RefType) (= (type f_25) (FieldType A@@19 B@@18))) (or (U_2_bool (MapType1Select (MapType0Select Ops_5Heap@12 null (|LL#sm| freshObj@0)) o_21 f_25)) (U_2_bool (MapType1Select (MapType0Select Ops_5Heap@12 null (|LL#sm| (MapType0Select Ops_5Heap@12 freshObj@0 next))) o_21 f_25)))) (U_2_bool (MapType1Select newPMask@5 o_21 f_25)))))
 :qid |stdinbpl.1726:48|
 :skolemid |94|
 :pattern ( (MapType1Select newPMask@5 o_21 f_25))
))))) (=> (and (and (= Ops_5Heap@13 (MapType0Store Ops_5Heap@12 null (|LL#sm| freshObj@0) newPMask@5)) (= Ops_5Heap@14 Ops_5Heap@13)) (and (= b_8@57 b_8@56) (= (ControlFlow 0 75) 74))) anon58_correct))))
(let ((anon56_correct  (=> (and (= Ops_5Heap@11 (MapType0Store Ops_5Heap@10 null (|LL#sm| freshObj@0) (MapType1Store (MapType0Select Ops_5Heap@10 null (|LL#sm| freshObj@0)) freshObj@0 val (bool_2_U true)))) (= Ops_5Heap@12 (MapType0Store Ops_5Heap@11 null (|LL#sm| freshObj@0) (MapType1Store (MapType0Select Ops_5Heap@11 null (|LL#sm| freshObj@0)) freshObj@0 next (bool_2_U true))))) (and (=> (= (ControlFlow 0 77) 75) anon133_Then_correct) (=> (= (ControlFlow 0 77) 76) anon133_Else_correct)))))
(let ((anon55_correct  (=> (= b_8@54  (and b_8@53 (state UnfoldingHeap@3 UnfoldingMask@14))) (=> (and (= b_8@55 b_8@54) (= (ControlFlow 0 79) 77)) anon56_correct))))
(let ((anon132_Else_correct  (=> (and (and (= (MapType0Select UnfoldingHeap@1 (MapType0Select UnfoldingHeap@1 freshObj@0 next) next) null) (= UnfoldingHeap@3 UnfoldingHeap@1)) (and (= b_8@53 b_8@51) (= (ControlFlow 0 81) 79))) anon55_correct)))
(let ((anon132_Then_correct  (=> (and (not (= (MapType0Select UnfoldingHeap@1 (MapType0Select UnfoldingHeap@1 freshObj@0 next) next) null)) (= b_8@52  (and b_8@51 (forall ((o_20 T@U) (f_24 T@U) ) (! (let ((B@@19 (FieldTypeInv1 (type f_24))))
(let ((A@@20 (FieldTypeInv0 (type f_24))))
 (=> (and (and (= (type o_20) RefType) (= (type f_24) (FieldType A@@20 B@@19))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@1 null (|LL#sm| (MapType0Select UnfoldingHeap@1 freshObj@0 next))) o_20 f_24)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@1 null (|LL#sm| (MapType0Select UnfoldingHeap@1 (MapType0Select UnfoldingHeap@1 freshObj@0 next) next))) o_20 f_24)))) (U_2_bool (MapType1Select newPMask@4 o_20 f_24)))))
 :qid |stdinbpl.1712:50|
 :skolemid |93|
 :pattern ( (MapType1Select newPMask@4 o_20 f_24))
))))) (=> (and (and (= UnfoldingHeap@2 (MapType0Store UnfoldingHeap@1 null (|LL#sm| (MapType0Select UnfoldingHeap@1 freshObj@0 next)) newPMask@4)) (= UnfoldingHeap@3 UnfoldingHeap@2)) (and (= b_8@53 b_8@52) (= (ControlFlow 0 80) 79))) anon55_correct))))
(let ((anon53_correct  (=> (= b_8@51  (and b_8@50 (state Ops_5Heap@10 Unfolding1Mask@4))) (and (=> (= (ControlFlow 0 82) (- 0 85)) (HasDirectPerm Unfolding1Mask@4 freshObj@0 next)) (=> (HasDirectPerm Unfolding1Mask@4 freshObj@0 next) (and (=> (= (ControlFlow 0 82) (- 0 84)) (HasDirectPerm Unfolding1Mask@4 freshObj@0 next)) (=> (HasDirectPerm Unfolding1Mask@4 freshObj@0 next) (and (=> (= (ControlFlow 0 82) (- 0 83)) (HasDirectPerm Unfolding1Mask@4 (MapType0Select Ops_5Heap@10 freshObj@0 next) val)) (=> (HasDirectPerm Unfolding1Mask@4 (MapType0Select Ops_5Heap@10 freshObj@0 next) val) (=> (and (= UnfoldingHeap@0 (MapType0Store Ops_5Heap@10 null (|LL#sm| (MapType0Select Ops_5Heap@10 freshObj@0 next)) (MapType1Store (MapType0Select Ops_5Heap@10 null (|LL#sm| (MapType0Select Ops_5Heap@10 freshObj@0 next))) (MapType0Select Ops_5Heap@10 freshObj@0 next) val (bool_2_U true)))) (= UnfoldingHeap@1 (MapType0Store UnfoldingHeap@0 null (|LL#sm| (MapType0Select UnfoldingHeap@0 freshObj@0 next)) (MapType1Store (MapType0Select UnfoldingHeap@0 null (|LL#sm| (MapType0Select UnfoldingHeap@0 freshObj@0 next))) (MapType0Select UnfoldingHeap@0 freshObj@0 next) next (bool_2_U true))))) (and (=> (= (ControlFlow 0 82) 80) anon132_Then_correct) (=> (= (ControlFlow 0 82) 81) anon132_Else_correct))))))))))))
(let ((anon131_Else_correct  (=> (and (and (= (MapType0Select Ops_5Heap@10 (MapType0Select Ops_5Heap@10 freshObj@0 next) next) null) (= b_8@50 b_8@47)) (and (= Unfolding1Mask@4 Unfolding1Mask@2) (= (ControlFlow 0 87) 82))) anon53_correct)))
(let ((anon131_Then_correct  (=> (not (= (MapType0Select Ops_5Heap@10 (MapType0Select Ops_5Heap@10 freshObj@0 next) next) null)) (=> (and (= Unfolding1Mask@3 (MapType1Store Unfolding1Mask@2 null (LL (MapType0Select Ops_5Heap@10 (MapType0Select Ops_5Heap@10 freshObj@0 next) next)) (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@2 null (LL (MapType0Select Ops_5Heap@10 (MapType0Select Ops_5Heap@10 freshObj@0 next) next)))) FullPerm)))) (= b_8@48  (and b_8@47 (InsidePredicate (LL (MapType0Select Ops_5Heap@10 freshObj@0 next)) (MapType0Select Ops_5Heap@10 null (LL (MapType0Select Ops_5Heap@10 freshObj@0 next))) (LL (MapType0Select Ops_5Heap@10 (MapType0Select Ops_5Heap@10 freshObj@0 next) next)) (MapType0Select Ops_5Heap@10 null (LL (MapType0Select Ops_5Heap@10 (MapType0Select Ops_5Heap@10 freshObj@0 next) next))))))) (=> (and (and (= b_8@49  (and b_8@48 (state Ops_5Heap@10 Unfolding1Mask@3))) (= b_8@50 b_8@49)) (and (= Unfolding1Mask@4 Unfolding1Mask@3) (= (ControlFlow 0 86) 82))) anon53_correct)))))
(let ((anon51_correct  (=> (= Unfolding1Mask@0 (MapType1Store UnfoldingMask@14 null (LL (MapType0Select Ops_5Heap@10 freshObj@0 next)) (real_2_U (- (U_2_real (MapType1Select UnfoldingMask@14 null (LL (MapType0Select Ops_5Heap@10 freshObj@0 next)))) FullPerm)))) (=> (and (= b_8@44  (and b_8@43 (not (= (MapType0Select Ops_5Heap@10 freshObj@0 next) null)))) (= Unfolding1Mask@1 (MapType1Store Unfolding1Mask@0 (MapType0Select Ops_5Heap@10 freshObj@0 next) val (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@0 (MapType0Select Ops_5Heap@10 freshObj@0 next) val)) FullPerm))))) (=> (and (and (= b_8@45  (and b_8@44 (state Ops_5Heap@10 Unfolding1Mask@1))) (= b_8@46  (and b_8@45 (not (= (MapType0Select Ops_5Heap@10 freshObj@0 next) null))))) (and (= Unfolding1Mask@2 (MapType1Store Unfolding1Mask@1 (MapType0Select Ops_5Heap@10 freshObj@0 next) next (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@1 (MapType0Select Ops_5Heap@10 freshObj@0 next) next)) FullPerm)))) (= b_8@47  (and b_8@46 (state Ops_5Heap@10 Unfolding1Mask@2))))) (and (=> (= (ControlFlow 0 88) 86) anon131_Then_correct) (=> (= (ControlFlow 0 88) 87) anon131_Else_correct)))))))
(let ((anon130_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 91) 88)) anon51_correct)))
(let ((anon130_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 89) (- 0 90)) (<= FullPerm (U_2_real (MapType1Select UnfoldingMask@14 null (LL (MapType0Select Ops_5Heap@10 freshObj@0 next)))))) (=> (<= FullPerm (U_2_real (MapType1Select UnfoldingMask@14 null (LL (MapType0Select Ops_5Heap@10 freshObj@0 next))))) (=> (= (ControlFlow 0 89) 88) anon51_correct))))))
(let ((anon129_Then_correct  (=> (not (= (MapType0Select Ops_5Heap@10 freshObj@0 next) null)) (=> (and (= b_8@42  (and b_8@41 (|LL#trigger| Ops_5Heap@10 (LL (MapType0Select Ops_5Heap@10 freshObj@0 next))))) (= b_8@43  (and b_8@42 (= (MapType0Select Ops_5Heap@10 null (LL (MapType0Select Ops_5Heap@10 freshObj@0 next))) (CombineFrames (FrameFragment (MapType0Select Ops_5Heap@10 (MapType0Select Ops_5Heap@10 freshObj@0 next) val)) (CombineFrames (FrameFragment (MapType0Select Ops_5Heap@10 (MapType0Select Ops_5Heap@10 freshObj@0 next) next)) (FrameFragment (ite (not (= (MapType0Select Ops_5Heap@10 (MapType0Select Ops_5Heap@10 freshObj@0 next) next) null)) (MapType0Select Ops_5Heap@10 null (LL (MapType0Select Ops_5Heap@10 (MapType0Select Ops_5Heap@10 freshObj@0 next) next))) EmptyFrame)))))))) (and (=> (= (ControlFlow 0 92) 89) anon130_Then_correct) (=> (= (ControlFlow 0 92) 91) anon130_Else_correct))))))
(let ((anon129_Else_correct  (=> (= (MapType0Select Ops_5Heap@10 freshObj@0 next) null) (=> (and (= b_8@55 b_8@41) (= (ControlFlow 0 78) 77)) anon56_correct))))
(let ((anon48_correct  (=> (= b_8@41  (and b_8@40 (state Ops_5Heap@10 UnfoldingMask@14))) (and (=> (= (ControlFlow 0 93) (- 0 94)) (HasDirectPerm UnfoldingMask@14 freshObj@0 next)) (=> (HasDirectPerm UnfoldingMask@14 freshObj@0 next) (and (=> (= (ControlFlow 0 93) 92) anon129_Then_correct) (=> (= (ControlFlow 0 93) 78) anon129_Else_correct)))))))
(let ((anon128_Else_correct  (=> (and (and (= (MapType0Select Ops_5Heap@10 freshObj@0 next) null) (= b_8@40 b_8@37)) (and (= UnfoldingMask@14 UnfoldingMask@12) (= (ControlFlow 0 96) 93))) anon48_correct)))
(let ((anon128_Then_correct  (=> (not (= (MapType0Select Ops_5Heap@10 freshObj@0 next) null)) (=> (and (= UnfoldingMask@13 (MapType1Store UnfoldingMask@12 null (LL (MapType0Select Ops_5Heap@10 freshObj@0 next)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@12 null (LL (MapType0Select Ops_5Heap@10 freshObj@0 next)))) FullPerm)))) (= b_8@38  (and b_8@37 (InsidePredicate (LL freshObj@0) (MapType0Select Ops_5Heap@10 null (LL freshObj@0)) (LL (MapType0Select Ops_5Heap@10 freshObj@0 next)) (MapType0Select Ops_5Heap@10 null (LL (MapType0Select Ops_5Heap@10 freshObj@0 next))))))) (=> (and (and (= b_8@39  (and b_8@38 (state Ops_5Heap@10 UnfoldingMask@13))) (= b_8@40 b_8@39)) (and (= UnfoldingMask@14 UnfoldingMask@13) (= (ControlFlow 0 95) 93))) anon48_correct)))))
(let ((anon46_correct  (=> (= UnfoldingMask@10 (MapType1Store Ops_5Mask@1 null (LL freshObj@0) (real_2_U (- (U_2_real (MapType1Select Ops_5Mask@1 null (LL freshObj@0))) FullPerm)))) (=> (and (= b_8@34  (and b_8@33 (not (= freshObj@0 null)))) (= UnfoldingMask@11 (MapType1Store UnfoldingMask@10 freshObj@0 val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@10 freshObj@0 val)) FullPerm))))) (=> (and (and (= b_8@35  (and b_8@34 (state Ops_5Heap@10 UnfoldingMask@11))) (= b_8@36  (and b_8@35 (not (= freshObj@0 null))))) (and (= UnfoldingMask@12 (MapType1Store UnfoldingMask@11 freshObj@0 next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@11 freshObj@0 next)) FullPerm)))) (= b_8@37  (and b_8@36 (state Ops_5Heap@10 UnfoldingMask@12))))) (and (=> (= (ControlFlow 0 97) 95) anon128_Then_correct) (=> (= (ControlFlow 0 97) 96) anon128_Else_correct)))))))
(let ((anon127_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 100) 97)) anon46_correct)))
(let ((anon127_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 98) (- 0 99)) (<= FullPerm (U_2_real (MapType1Select Ops_5Mask@1 null (LL freshObj@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Ops_5Mask@1 null (LL freshObj@0)))) (=> (= (ControlFlow 0 98) 97) anon46_correct))))))
(let ((anon126_Then_correct  (=> b_8@31 (=> (and (= b_8@32  (and b_8@31 (|LL#trigger| Ops_5Heap@10 (LL freshObj@0)))) (= b_8@33  (and b_8@32 (= (MapType0Select Ops_5Heap@10 null (LL freshObj@0)) (CombineFrames (FrameFragment (MapType0Select Ops_5Heap@10 freshObj@0 val)) (CombineFrames (FrameFragment (MapType0Select Ops_5Heap@10 freshObj@0 next)) (FrameFragment (ite (not (= (MapType0Select Ops_5Heap@10 freshObj@0 next) null)) (MapType0Select Ops_5Heap@10 null (LL (MapType0Select Ops_5Heap@10 freshObj@0 next))) EmptyFrame)))))))) (and (=> (= (ControlFlow 0 101) 98) anon127_Then_correct) (=> (= (ControlFlow 0 101) 100) anon127_Else_correct))))))
(let ((anon126_Else_correct  (=> (and (and (not b_8@31) (= Ops_5Heap@19 Ops_5Heap@10)) (and (= b_8@62 b_8@31) (= (ControlFlow 0 70) 69))) anon61_correct)))
(let ((anon125_Then_correct  (=> b_8@31 (and (=> (= (ControlFlow 0 102) 101) anon126_Then_correct) (=> (= (ControlFlow 0 102) 70) anon126_Else_correct)))))
(let ((anon125_Else_correct  (=> (not b_8@31) (=> (and (and (= b_8@80 b_8@31) (= Ops_5Mask@2 Ops_5Mask@1)) (and (= Ops_5Heap@28 Ops_5Heap@10) (= (ControlFlow 0 59) 55))) anon68_correct))))
(let ((anon41_correct  (=> (= b_8@30  (and b_8@29 (state Ops_5Heap@9 Ops_5Mask@1))) (=> (and (= Ops_5Heap@10 Ops_5Heap@9) (= b_8@31 b_8@30)) (and (=> (= (ControlFlow 0 104) 102) anon125_Then_correct) (=> (= (ControlFlow 0 104) 59) anon125_Else_correct))))))
(let ((anon124_Else_correct  (=> (and (and (= (MapType0Select Ops_5Heap@7 freshObj@0 next) null) (= b_8@29 b_8@27)) (and (= Ops_5Heap@9 Ops_5Heap@7) (= (ControlFlow 0 106) 104))) anon41_correct)))
(let ((anon124_Then_correct  (=> (and (not (= (MapType0Select Ops_5Heap@7 freshObj@0 next) null)) (= b_8@28  (and b_8@27 (forall ((o_19 T@U) (f_23 T@U) ) (! (let ((B@@20 (FieldTypeInv1 (type f_23))))
(let ((A@@21 (FieldTypeInv0 (type f_23))))
 (=> (and (and (= (type o_19) RefType) (= (type f_23) (FieldType A@@21 B@@20))) (or (U_2_bool (MapType1Select (MapType0Select Ops_5Heap@7 null (|LL#sm| freshObj@0)) o_19 f_23)) (U_2_bool (MapType1Select (MapType0Select Ops_5Heap@7 null (|LL#sm| (MapType0Select Ops_5Heap@7 freshObj@0 next))) o_19 f_23)))) (U_2_bool (MapType1Select newPMask@3 o_19 f_23)))))
 :qid |stdinbpl.1627:44|
 :skolemid |92|
 :pattern ( (MapType1Select newPMask@3 o_19 f_23))
))))) (=> (and (and (= Ops_5Heap@8 (MapType0Store Ops_5Heap@7 null (|LL#sm| freshObj@0) newPMask@3)) (= b_8@29 b_8@28)) (and (= Ops_5Heap@9 Ops_5Heap@8) (= (ControlFlow 0 105) 104))) anon41_correct))))
(let ((anon39_correct  (=> (and (and (= b_8@26  (and b_8@25 (state Ops_5Heap@5 UnfoldingMask@9))) (= b_8@27  (and b_8@26 (= (U_2_int (MapType0Select Ops_5Heap@5 freshObj@0 val)) 10)))) (and (= Ops_5Heap@6 (MapType0Store Ops_5Heap@5 null (|LL#sm| freshObj@0) (MapType1Store (MapType0Select Ops_5Heap@5 null (|LL#sm| freshObj@0)) freshObj@0 val (bool_2_U true)))) (= Ops_5Heap@7 (MapType0Store Ops_5Heap@6 null (|LL#sm| freshObj@0) (MapType1Store (MapType0Select Ops_5Heap@6 null (|LL#sm| freshObj@0)) freshObj@0 next (bool_2_U true)))))) (and (=> (= (ControlFlow 0 107) 105) anon124_Then_correct) (=> (= (ControlFlow 0 107) 106) anon124_Else_correct)))))
(let ((anon123_Else_correct  (=> (and (and (= (MapType0Select Ops_5Heap@5 freshObj@0 next) null) (= UnfoldingMask@9 UnfoldingMask@7)) (and (= b_8@25 b_8@22) (= (ControlFlow 0 109) 107))) anon39_correct)))
(let ((anon123_Then_correct  (=> (not (= (MapType0Select Ops_5Heap@5 freshObj@0 next) null)) (=> (and (= UnfoldingMask@8 (MapType1Store UnfoldingMask@7 null (LL (MapType0Select Ops_5Heap@5 freshObj@0 next)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@7 null (LL (MapType0Select Ops_5Heap@5 freshObj@0 next)))) FullPerm)))) (= b_8@23  (and b_8@22 (InsidePredicate (LL freshObj@0) (MapType0Select Ops_5Heap@5 null (LL freshObj@0)) (LL (MapType0Select Ops_5Heap@5 freshObj@0 next)) (MapType0Select Ops_5Heap@5 null (LL (MapType0Select Ops_5Heap@5 freshObj@0 next))))))) (=> (and (and (= b_8@24  (and b_8@23 (state Ops_5Heap@5 UnfoldingMask@8))) (= UnfoldingMask@9 UnfoldingMask@8)) (and (= b_8@25 b_8@24) (= (ControlFlow 0 108) 107))) anon39_correct)))))
(let ((anon37_correct  (=> (= b_8@17  (and b_8@16 (|LL#trigger| Ops_5Heap@5 (LL freshObj@0)))) (=> (and (and (and (= b_8@18  (and b_8@17 (= (MapType0Select Ops_5Heap@5 null (LL freshObj@0)) (CombineFrames (FrameFragment (MapType0Select Ops_5Heap@5 freshObj@0 val)) (CombineFrames (FrameFragment (MapType0Select Ops_5Heap@5 freshObj@0 next)) (FrameFragment (ite (not (= (MapType0Select Ops_5Heap@5 freshObj@0 next) null)) (MapType0Select Ops_5Heap@5 null (LL (MapType0Select Ops_5Heap@5 freshObj@0 next))) EmptyFrame))))))) (= UnfoldingMask@5 (MapType1Store Ops_5Mask@1 null (LL freshObj@0) (real_2_U (- (U_2_real (MapType1Select Ops_5Mask@1 null (LL freshObj@0))) FullPerm))))) (and (= b_8@19  (and b_8@18 (not (= freshObj@0 null)))) (= UnfoldingMask@6 (MapType1Store UnfoldingMask@5 freshObj@0 val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@5 freshObj@0 val)) FullPerm)))))) (and (and (= b_8@20  (and b_8@19 (state Ops_5Heap@5 UnfoldingMask@6))) (= b_8@21  (and b_8@20 (not (= freshObj@0 null))))) (and (= UnfoldingMask@7 (MapType1Store UnfoldingMask@6 freshObj@0 next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@6 freshObj@0 next)) FullPerm)))) (= b_8@22  (and b_8@21 (state Ops_5Heap@5 UnfoldingMask@7)))))) (and (=> (= (ControlFlow 0 110) 108) anon123_Then_correct) (=> (= (ControlFlow 0 110) 109) anon123_Else_correct))))))
(let ((anon36_correct  (=> (and (and (= b_8@15  (and b_8@14 (state Ops_5Heap@4 Ops_5Mask@1))) (= b_8@16 b_8@15)) (and (= Ops_5Heap@5 Ops_5Heap@4) (= (ControlFlow 0 112) 110))) anon37_correct)))
(let ((anon122_Else_correct  (=> (and (and (= (MapType0Select Ops_5Heap@2 freshObj@0 next) null) (= Ops_5Heap@4 Ops_5Heap@2)) (and (= b_8@14 b_8@12) (= (ControlFlow 0 114) 112))) anon36_correct)))
(let ((anon122_Then_correct  (=> (and (not (= (MapType0Select Ops_5Heap@2 freshObj@0 next) null)) (= b_8@13  (and b_8@12 (forall ((o_18 T@U) (f_22 T@U) ) (! (let ((B@@21 (FieldTypeInv1 (type f_22))))
(let ((A@@22 (FieldTypeInv0 (type f_22))))
 (=> (and (and (= (type o_18) RefType) (= (type f_22) (FieldType A@@22 B@@21))) (or (U_2_bool (MapType1Select (MapType0Select Ops_5Heap@2 null (|LL#sm| freshObj@0)) o_18 f_22)) (U_2_bool (MapType1Select (MapType0Select Ops_5Heap@2 null (|LL#sm| (MapType0Select Ops_5Heap@2 freshObj@0 next))) o_18 f_22)))) (U_2_bool (MapType1Select newPMask@2 o_18 f_22)))))
 :qid |stdinbpl.1584:48|
 :skolemid |91|
 :pattern ( (MapType1Select newPMask@2 o_18 f_22))
))))) (=> (and (and (= Ops_5Heap@3 (MapType0Store Ops_5Heap@2 null (|LL#sm| freshObj@0) newPMask@2)) (= Ops_5Heap@4 Ops_5Heap@3)) (and (= b_8@14 b_8@13) (= (ControlFlow 0 113) 112))) anon36_correct))))
(let ((anon34_correct  (=> (= b_8@12  (and b_8@11 (state Ops_5Heap@0 UnfoldingMask@4))) (and (=> (= (ControlFlow 0 115) (- 0 116)) (HasDirectPerm UnfoldingMask@4 freshObj@0 val)) (=> (HasDirectPerm UnfoldingMask@4 freshObj@0 val) (=> (and (= Ops_5Heap@1 (MapType0Store Ops_5Heap@0 null (|LL#sm| freshObj@0) (MapType1Store (MapType0Select Ops_5Heap@0 null (|LL#sm| freshObj@0)) freshObj@0 val (bool_2_U true)))) (= Ops_5Heap@2 (MapType0Store Ops_5Heap@1 null (|LL#sm| freshObj@0) (MapType1Store (MapType0Select Ops_5Heap@1 null (|LL#sm| freshObj@0)) freshObj@0 next (bool_2_U true))))) (and (=> (= (ControlFlow 0 115) 113) anon122_Then_correct) (=> (= (ControlFlow 0 115) 114) anon122_Else_correct))))))))
(let ((anon121_Else_correct  (=> (and (and (= (MapType0Select Ops_5Heap@0 freshObj@0 next) null) (= b_8@11 b_8@8)) (and (= UnfoldingMask@4 UnfoldingMask@2) (= (ControlFlow 0 118) 115))) anon34_correct)))
(let ((anon121_Then_correct  (=> (not (= (MapType0Select Ops_5Heap@0 freshObj@0 next) null)) (=> (and (= UnfoldingMask@3 (MapType1Store UnfoldingMask@2 null (LL (MapType0Select Ops_5Heap@0 freshObj@0 next)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@2 null (LL (MapType0Select Ops_5Heap@0 freshObj@0 next)))) FullPerm)))) (= b_8@9  (and b_8@8 (InsidePredicate (LL freshObj@0) (MapType0Select Ops_5Heap@0 null (LL freshObj@0)) (LL (MapType0Select Ops_5Heap@0 freshObj@0 next)) (MapType0Select Ops_5Heap@0 null (LL (MapType0Select Ops_5Heap@0 freshObj@0 next))))))) (=> (and (and (= b_8@10  (and b_8@9 (state Ops_5Heap@0 UnfoldingMask@3))) (= b_8@11 b_8@10)) (and (= UnfoldingMask@4 UnfoldingMask@3) (= (ControlFlow 0 117) 115))) anon34_correct)))))
(let ((anon32_correct  (=> (= UnfoldingMask@0 (MapType1Store Ops_5Mask@1 null (LL freshObj@0) (real_2_U (- (U_2_real (MapType1Select Ops_5Mask@1 null (LL freshObj@0))) FullPerm)))) (=> (and (= b_8@5  (and b_8@4 (not (= freshObj@0 null)))) (= UnfoldingMask@1 (MapType1Store UnfoldingMask@0 freshObj@0 val (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@0 freshObj@0 val)) FullPerm))))) (=> (and (and (= b_8@6  (and b_8@5 (state Ops_5Heap@0 UnfoldingMask@1))) (= b_8@7  (and b_8@6 (not (= freshObj@0 null))))) (and (= UnfoldingMask@2 (MapType1Store UnfoldingMask@1 freshObj@0 next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@1 freshObj@0 next)) FullPerm)))) (= b_8@8  (and b_8@7 (state Ops_5Heap@0 UnfoldingMask@2))))) (and (=> (= (ControlFlow 0 119) 117) anon121_Then_correct) (=> (= (ControlFlow 0 119) 118) anon121_Else_correct)))))))
(let ((anon120_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 122) 119)) anon32_correct)))
(let ((anon120_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 120) (- 0 121)) (<= FullPerm (U_2_real (MapType1Select Ops_5Mask@1 null (LL freshObj@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Ops_5Mask@1 null (LL freshObj@0)))) (=> (= (ControlFlow 0 120) 119) anon32_correct))))))
(let ((anon119_Then_correct  (=> b_8@2 (=> (and (= b_8@3  (and b_8@2 (|LL#trigger| Ops_5Heap@0 (LL freshObj@0)))) (= b_8@4  (and b_8@3 (= (MapType0Select Ops_5Heap@0 null (LL freshObj@0)) (CombineFrames (FrameFragment (MapType0Select Ops_5Heap@0 freshObj@0 val)) (CombineFrames (FrameFragment (MapType0Select Ops_5Heap@0 freshObj@0 next)) (FrameFragment (ite (not (= (MapType0Select Ops_5Heap@0 freshObj@0 next) null)) (MapType0Select Ops_5Heap@0 null (LL (MapType0Select Ops_5Heap@0 freshObj@0 next))) EmptyFrame)))))))) (and (=> (= (ControlFlow 0 123) 120) anon120_Then_correct) (=> (= (ControlFlow 0 123) 122) anon120_Else_correct))))))
(let ((anon119_Else_correct  (=> (and (and (not b_8@2) (= b_8@16 b_8@2)) (and (= Ops_5Heap@5 Ops_5Heap@0) (= (ControlFlow 0 111) 110))) anon37_correct)))
(let ((anon118_Then_correct  (=> b_8@2 (and (=> (= (ControlFlow 0 124) 123) anon119_Then_correct) (=> (= (ControlFlow 0 124) 111) anon119_Else_correct)))))
(let ((anon118_Else_correct  (=> (not b_8@2) (=> (and (= Ops_5Heap@10 Ops_5Heap@0) (= b_8@31 b_8@2)) (and (=> (= (ControlFlow 0 103) 102) anon125_Then_correct) (=> (= (ControlFlow 0 103) 59) anon125_Else_correct))))))
(let ((anon117_Then_correct  (=> b_8@2 (and (=> (= (ControlFlow 0 125) 124) anon118_Then_correct) (=> (= (ControlFlow 0 125) 103) anon118_Else_correct)))))
(let ((anon117_Else_correct  (=> (not b_8@2) (=> (and (and (= b_8@80 b_8@2) (= Ops_5Mask@2 Ops_5Mask@1)) (and (= Ops_5Heap@28 Ops_5Heap@0) (= (ControlFlow 0 58) 55))) anon68_correct))))
(let ((anon116_Else_correct  (=> (not b_8@0) (=> (and (= Ops_5Mask@1 ZeroMask) (= b_8@2 b_8@0)) (and (=> (= (ControlFlow 0 127) 125) anon117_Then_correct) (=> (= (ControlFlow 0 127) 58) anon117_Else_correct))))))
(let ((anon116_Then_correct  (=> b_8@0 (=> (and (and (= Ops_5Mask@0 (MapType1Store ZeroMask null (LL freshObj@0) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (LL freshObj@0))) FullPerm)))) (= b_8@1  (and b_8@0 (state Ops_5Heap@0 Ops_5Mask@0)))) (and (= Ops_5Mask@1 Ops_5Mask@0) (= b_8@2 b_8@1))) (and (=> (= (ControlFlow 0 126) 125) anon117_Then_correct) (=> (= (ControlFlow 0 126) 58) anon117_Else_correct))))))
(let ((anon115_Then_correct  (=> b_8@0 (and (=> (= (ControlFlow 0 128) 126) anon116_Then_correct) (=> (= (ControlFlow 0 128) 127) anon116_Else_correct)))))
(let ((anon115_Else_correct  (=> (not b_8@0) (=> (and (and (= b_8@80 b_8@0) (= Ops_5Mask@2 ZeroMask)) (and (= Ops_5Heap@28 Ops_5Heap@0) (= (ControlFlow 0 57) 55))) anon68_correct))))
(let ((anon24_correct  (=> (and (and (state Heap@19 Mask@13) (state Heap@19 Mask@13)) (and (= b_8@0  (and b_8 (state Ops_5Heap@0 ZeroMask))) (= b_7@0  (and b_7 (state Used_4Heap@0 ZeroMask))))) (and (=> (= (ControlFlow 0 129) 128) anon115_Then_correct) (=> (= (ControlFlow 0 129) 57) anon115_Else_correct)))))
(let ((anon114_Else_correct  (=> (= (MapType0Select Heap@17 freshObj@0 next) null) (=> (and (= Heap@19 Heap@17) (= (ControlFlow 0 131) 129)) anon24_correct))))
(let ((anon114_Then_correct  (=> (not (= (MapType0Select Heap@17 freshObj@0 next) null)) (=> (and (and (forall ((o_17 T@U) (f_21 T@U) ) (! (let ((B@@22 (FieldTypeInv1 (type f_21))))
(let ((A@@23 (FieldTypeInv0 (type f_21))))
 (=> (and (and (= (type o_17) RefType) (= (type f_21) (FieldType A@@23 B@@22))) (or (U_2_bool (MapType1Select (MapType0Select Heap@17 null (|LL#sm| freshObj@0)) o_17 f_21)) (U_2_bool (MapType1Select (MapType0Select Heap@17 null (|LL#sm| (MapType0Select Heap@17 freshObj@0 next))) o_17 f_21)))) (U_2_bool (MapType1Select newPMask@1 o_17 f_21)))))
 :qid |stdinbpl.1513:29|
 :skolemid |90|
 :pattern ( (MapType1Select newPMask@1 o_17 f_21))
)) (= Heap@18 (MapType0Store Heap@17 null (|LL#sm| freshObj@0) newPMask@1))) (and (= Heap@19 Heap@18) (= (ControlFlow 0 130) 129))) anon24_correct))))
(let ((anon22_correct  (=> (and (= Heap@16 (MapType0Store Heap@15 null (|LL#sm| freshObj@0) (MapType1Store (MapType0Select Heap@15 null (|LL#sm| freshObj@0)) freshObj@0 val (bool_2_U true)))) (= Heap@17 (MapType0Store Heap@16 null (|LL#sm| freshObj@0) (MapType1Store (MapType0Select Heap@16 null (|LL#sm| freshObj@0)) freshObj@0 next (bool_2_U true))))) (and (=> (= (ControlFlow 0 132) 130) anon114_Then_correct) (=> (= (ControlFlow 0 132) 131) anon114_Else_correct)))))
(let ((anon113_Else_correct  (=> (HasDirectPerm Mask@13 null (LL freshObj@0)) (=> (and (= Heap@15 Heap@12) (= (ControlFlow 0 134) 132)) anon22_correct))))
(let ((anon113_Then_correct  (=> (not (HasDirectPerm Mask@13 null (LL freshObj@0))) (=> (and (and (= Heap@13 (MapType0Store Heap@12 null (|LL#sm| freshObj@0) ZeroPMask)) (= Heap@14 (MapType0Store Heap@13 null (LL freshObj@0) freshVersion@1))) (and (= Heap@15 Heap@14) (= (ControlFlow 0 133) 132))) anon22_correct))))
(let ((anon20_correct  (=> (= Mask@13 (MapType1Store Mask@12 null (LL freshObj@0) (real_2_U (+ (U_2_real (MapType1Select Mask@12 null (LL freshObj@0))) FullPerm)))) (=> (and (and (state Heap@12 Mask@13) (state Heap@12 Mask@13)) (and (|LL#trigger| Heap@12 (LL freshObj@0)) (= (MapType0Select Heap@12 null (LL freshObj@0)) (CombineFrames (FrameFragment (MapType0Select Heap@12 freshObj@0 val)) (CombineFrames (FrameFragment (MapType0Select Heap@12 freshObj@0 next)) (FrameFragment (ite (not (= (MapType0Select Heap@12 freshObj@0 next) null)) (MapType0Select Heap@12 null (LL (MapType0Select Heap@12 freshObj@0 next))) EmptyFrame))))))) (and (=> (= (ControlFlow 0 135) 133) anon113_Then_correct) (=> (= (ControlFlow 0 135) 134) anon113_Else_correct))))))
(let ((anon19_correct  (=> (and (and (= Mask@11 (MapType1Store Mask@10 null (LL (MapType0Select Heap@12 freshObj@0 next)) (real_2_U (- (U_2_real (MapType1Select Mask@10 null (LL (MapType0Select Heap@12 freshObj@0 next)))) FullPerm)))) (InsidePredicate (LL freshObj@0) (MapType0Select Heap@12 null (LL freshObj@0)) (LL (MapType0Select Heap@12 freshObj@0 next)) (MapType0Select Heap@12 null (LL (MapType0Select Heap@12 freshObj@0 next))))) (and (= Mask@12 Mask@11) (= (ControlFlow 0 137) 135))) anon20_correct)))
(let ((anon112_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 140) 137)) anon19_correct)))
(let ((anon112_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 138) (- 0 139)) (<= FullPerm (U_2_real (MapType1Select Mask@10 null (LL (MapType0Select Heap@12 freshObj@0 next)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@10 null (LL (MapType0Select Heap@12 freshObj@0 next))))) (=> (= (ControlFlow 0 138) 137) anon19_correct))))))
(let ((anon111_Then_correct  (=> (not (= (MapType0Select Heap@12 freshObj@0 next) null)) (and (=> (= (ControlFlow 0 141) 138) anon112_Then_correct) (=> (= (ControlFlow 0 141) 140) anon112_Else_correct)))))
(let ((anon111_Else_correct  (=> (= (MapType0Select Heap@12 freshObj@0 next) null) (=> (and (= Mask@12 Mask@10) (= (ControlFlow 0 136) 135)) anon20_correct))))
(let ((anon16_correct  (=> (= Mask@10 (MapType1Store Mask@9 freshObj@0 next (real_2_U (- (U_2_real (MapType1Select Mask@9 freshObj@0 next)) FullPerm)))) (and (=> (= (ControlFlow 0 142) 141) anon111_Then_correct) (=> (= (ControlFlow 0 142) 136) anon111_Else_correct)))))
(let ((anon110_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 145) 142)) anon16_correct)))
(let ((anon110_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 143) (- 0 144)) (<= FullPerm (U_2_real (MapType1Select Mask@9 freshObj@0 next)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@9 freshObj@0 next))) (=> (= (ControlFlow 0 143) 142) anon16_correct))))))
(let ((anon14_correct  (=> (= Mask@9 (MapType1Store Mask@8 freshObj@0 val (real_2_U (- (U_2_real (MapType1Select Mask@8 freshObj@0 val)) FullPerm)))) (and (=> (= (ControlFlow 0 146) 143) anon110_Then_correct) (=> (= (ControlFlow 0 146) 145) anon110_Else_correct)))))
(let ((anon109_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 149) 146)) anon14_correct)))
(let ((anon109_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 147) (- 0 148)) (<= FullPerm (U_2_real (MapType1Select Mask@8 freshObj@0 val)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@8 freshObj@0 val))) (=> (= (ControlFlow 0 147) 146) anon14_correct))))))
(let ((anon12_correct  (=> (and (state Heap@12 Mask@8) (state Heap@12 Mask@8)) (and (=> (= (ControlFlow 0 150) 147) anon109_Then_correct) (=> (= (ControlFlow 0 150) 149) anon109_Else_correct)))))
(let ((anon108_Else_correct  (=> (= (MapType0Select Heap@10 (MapType0Select Heap@10 freshObj@0 next) next) null) (=> (and (= Heap@12 Heap@10) (= (ControlFlow 0 152) 150)) anon12_correct))))
(let ((anon108_Then_correct  (=> (not (= (MapType0Select Heap@10 (MapType0Select Heap@10 freshObj@0 next) next) null)) (=> (and (and (forall ((o_16 T@U) (f_20 T@U) ) (! (let ((B@@23 (FieldTypeInv1 (type f_20))))
(let ((A@@24 (FieldTypeInv0 (type f_20))))
 (=> (and (and (= (type o_16) RefType) (= (type f_20) (FieldType A@@24 B@@23))) (or (U_2_bool (MapType1Select (MapType0Select Heap@10 null (|LL#sm| (MapType0Select Heap@10 freshObj@0 next))) o_16 f_20)) (U_2_bool (MapType1Select (MapType0Select Heap@10 null (|LL#sm| (MapType0Select Heap@10 (MapType0Select Heap@10 freshObj@0 next) next))) o_16 f_20)))) (U_2_bool (MapType1Select newPMask@0 o_16 f_20)))))
 :qid |stdinbpl.1463:29|
 :skolemid |89|
 :pattern ( (MapType1Select newPMask@0 o_16 f_20))
)) (= Heap@11 (MapType0Store Heap@10 null (|LL#sm| (MapType0Select Heap@10 freshObj@0 next)) newPMask@0))) (and (= Heap@12 Heap@11) (= (ControlFlow 0 151) 150))) anon12_correct))))
(let ((anon10_correct  (=> (and (= Heap@9 (MapType0Store Heap@8 null (|LL#sm| (MapType0Select Heap@8 freshObj@0 next)) (MapType1Store (MapType0Select Heap@8 null (|LL#sm| (MapType0Select Heap@8 freshObj@0 next))) (MapType0Select Heap@8 freshObj@0 next) val (bool_2_U true)))) (= Heap@10 (MapType0Store Heap@9 null (|LL#sm| (MapType0Select Heap@9 freshObj@0 next)) (MapType1Store (MapType0Select Heap@9 null (|LL#sm| (MapType0Select Heap@9 freshObj@0 next))) (MapType0Select Heap@9 freshObj@0 next) next (bool_2_U true))))) (and (=> (= (ControlFlow 0 153) 151) anon108_Then_correct) (=> (= (ControlFlow 0 153) 152) anon108_Else_correct)))))
(let ((anon107_Else_correct  (=> (HasDirectPerm Mask@8 null (LL (MapType0Select Heap@5 freshObj@0 next))) (=> (and (= Heap@8 Heap@5) (= (ControlFlow 0 155) 153)) anon10_correct))))
(let ((anon107_Then_correct  (=> (not (HasDirectPerm Mask@8 null (LL (MapType0Select Heap@5 freshObj@0 next)))) (=> (and (and (= Heap@6 (MapType0Store Heap@5 null (|LL#sm| (MapType0Select Heap@5 freshObj@0 next)) ZeroPMask)) (= Heap@7 (MapType0Store Heap@6 null (LL (MapType0Select Heap@6 freshObj@0 next)) freshVersion@0))) (and (= Heap@8 Heap@7) (= (ControlFlow 0 154) 153))) anon10_correct))))
(let ((anon8_correct  (=> (= Mask@8 (MapType1Store Mask@7 null (LL (MapType0Select Heap@5 freshObj@0 next)) (real_2_U (+ (U_2_real (MapType1Select Mask@7 null (LL (MapType0Select Heap@5 freshObj@0 next)))) FullPerm)))) (=> (and (and (state Heap@5 Mask@8) (state Heap@5 Mask@8)) (and (|LL#trigger| Heap@5 (LL (MapType0Select Heap@5 freshObj@0 next))) (= (MapType0Select Heap@5 null (LL (MapType0Select Heap@5 freshObj@0 next))) (CombineFrames (FrameFragment (MapType0Select Heap@5 (MapType0Select Heap@5 freshObj@0 next) val)) (CombineFrames (FrameFragment (MapType0Select Heap@5 (MapType0Select Heap@5 freshObj@0 next) next)) (FrameFragment (ite (not (= (MapType0Select Heap@5 (MapType0Select Heap@5 freshObj@0 next) next) null)) (MapType0Select Heap@5 null (LL (MapType0Select Heap@5 (MapType0Select Heap@5 freshObj@0 next) next))) EmptyFrame))))))) (and (=> (= (ControlFlow 0 156) 154) anon107_Then_correct) (=> (= (ControlFlow 0 156) 155) anon107_Else_correct))))))
(let ((anon7_correct  (=> (and (and (= Mask@6 (MapType1Store Mask@5 null (LL (MapType0Select Heap@5 (MapType0Select Heap@5 freshObj@0 next) next)) (real_2_U (- (U_2_real (MapType1Select Mask@5 null (LL (MapType0Select Heap@5 (MapType0Select Heap@5 freshObj@0 next) next)))) FullPerm)))) (InsidePredicate (LL (MapType0Select Heap@5 freshObj@0 next)) (MapType0Select Heap@5 null (LL (MapType0Select Heap@5 freshObj@0 next))) (LL (MapType0Select Heap@5 (MapType0Select Heap@5 freshObj@0 next) next)) (MapType0Select Heap@5 null (LL (MapType0Select Heap@5 (MapType0Select Heap@5 freshObj@0 next) next))))) (and (= Mask@7 Mask@6) (= (ControlFlow 0 158) 156))) anon8_correct)))
(let ((anon106_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 161) 158)) anon7_correct)))
(let ((anon106_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 159) (- 0 160)) (<= FullPerm (U_2_real (MapType1Select Mask@5 null (LL (MapType0Select Heap@5 (MapType0Select Heap@5 freshObj@0 next) next)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@5 null (LL (MapType0Select Heap@5 (MapType0Select Heap@5 freshObj@0 next) next))))) (=> (= (ControlFlow 0 159) 158) anon7_correct))))))
(let ((anon105_Then_correct  (=> (not (= (MapType0Select Heap@5 (MapType0Select Heap@5 freshObj@0 next) next) null)) (and (=> (= (ControlFlow 0 162) 159) anon106_Then_correct) (=> (= (ControlFlow 0 162) 161) anon106_Else_correct)))))
(let ((anon105_Else_correct  (=> (= (MapType0Select Heap@5 (MapType0Select Heap@5 freshObj@0 next) next) null) (=> (and (= Mask@7 Mask@5) (= (ControlFlow 0 157) 156)) anon8_correct))))
(let ((anon4_correct  (=> (= Mask@5 (MapType1Store Mask@4 (MapType0Select Heap@5 freshObj@0 next) next (real_2_U (- (U_2_real (MapType1Select Mask@4 (MapType0Select Heap@5 freshObj@0 next) next)) FullPerm)))) (and (=> (= (ControlFlow 0 163) 162) anon105_Then_correct) (=> (= (ControlFlow 0 163) 157) anon105_Else_correct)))))
(let ((anon104_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 166) 163)) anon4_correct)))
(let ((anon104_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 164) (- 0 165)) (<= FullPerm (U_2_real (MapType1Select Mask@4 (MapType0Select Heap@5 freshObj@0 next) next)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@4 (MapType0Select Heap@5 freshObj@0 next) next))) (=> (= (ControlFlow 0 164) 163) anon4_correct))))))
(let ((anon2_correct  (=> (= Mask@4 (MapType1Store Mask@3 (MapType0Select Heap@5 freshObj@0 next) val (real_2_U (- (U_2_real (MapType1Select Mask@3 (MapType0Select Heap@5 freshObj@0 next) val)) FullPerm)))) (and (=> (= (ControlFlow 0 167) 164) anon104_Then_correct) (=> (= (ControlFlow 0 167) 166) anon104_Else_correct)))))
(let ((anon103_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 170) 167)) anon2_correct)))
(let ((anon103_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 168) (- 0 169)) (<= FullPerm (U_2_real (MapType1Select Mask@3 (MapType0Select Heap@5 freshObj@0 next) val)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@3 (MapType0Select Heap@5 freshObj@0 next) val))) (=> (= (ControlFlow 0 168) 167) anon2_correct))))))
(let ((anon0_correct  (=> (state Heap@@13 ZeroMask) (=> (and (U_2_bool (MapType0Select Heap@@13 x@@20 $allocated)) (U_2_bool (MapType0Select Heap@@13 y@@1 $allocated))) (=> (and (and (not (= freshObj@0 null)) (not (U_2_bool (MapType0Select Heap@@13 freshObj@0 $allocated)))) (and (= Heap@0 (MapType0Store Heap@@13 freshObj@0 $allocated (bool_2_U true))) (= Mask@0 (MapType1Store ZeroMask freshObj@0 val (real_2_U (+ (U_2_real (MapType1Select ZeroMask freshObj@0 val)) FullPerm)))))) (=> (and (and (and (= Mask@1 (MapType1Store Mask@0 freshObj@0 next (real_2_U (+ (U_2_real (MapType1Select Mask@0 freshObj@0 next)) FullPerm)))) (state Heap@0 Mask@1)) (and (not (= freshObj@1 null)) (not (U_2_bool (MapType0Select Heap@0 freshObj@1 $allocated))))) (and (and (= Heap@1 (MapType0Store Heap@0 freshObj@1 $allocated (bool_2_U true))) (= Mask@2 (MapType1Store Mask@1 freshObj@1 val (real_2_U (+ (U_2_real (MapType1Select Mask@1 freshObj@1 val)) FullPerm))))) (and (= Mask@3 (MapType1Store Mask@2 freshObj@1 next (real_2_U (+ (U_2_real (MapType1Select Mask@2 freshObj@1 next)) FullPerm)))) (state Heap@1 Mask@3)))) (and (=> (= (ControlFlow 0 171) (- 0 178)) (= FullPerm (U_2_real (MapType1Select Mask@3 freshObj@0 next)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@3 freshObj@0 next))) (=> (and (= Heap@2 (MapType0Store Heap@1 freshObj@0 next freshObj@1)) (state Heap@2 Mask@3)) (and (=> (= (ControlFlow 0 171) (- 0 177)) (= FullPerm (U_2_real (MapType1Select Mask@3 freshObj@0 val)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@3 freshObj@0 val))) (=> (and (= Heap@3 (MapType0Store Heap@2 freshObj@0 val (int_2_U 10))) (state Heap@3 Mask@3)) (and (=> (= (ControlFlow 0 171) (- 0 176)) (HasDirectPerm Mask@3 freshObj@0 next)) (=> (HasDirectPerm Mask@3 freshObj@0 next) (and (=> (= (ControlFlow 0 171) (- 0 175)) (= FullPerm (U_2_real (MapType1Select Mask@3 (MapType0Select Heap@3 freshObj@0 next) val)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@3 (MapType0Select Heap@3 freshObj@0 next) val))) (=> (and (= Heap@4 (MapType0Store Heap@3 (MapType0Select Heap@3 freshObj@0 next) val (int_2_U 20))) (state Heap@4 Mask@3)) (and (=> (= (ControlFlow 0 171) (- 0 174)) (HasDirectPerm Mask@3 freshObj@0 next)) (=> (HasDirectPerm Mask@3 freshObj@0 next) (and (=> (= (ControlFlow 0 171) (- 0 173)) (= FullPerm (U_2_real (MapType1Select Mask@3 (MapType0Select Heap@4 freshObj@0 next) next)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@3 (MapType0Select Heap@4 freshObj@0 next) next))) (=> (and (= Heap@5 (MapType0Store Heap@4 (MapType0Select Heap@4 freshObj@0 next) next null)) (state Heap@5 Mask@3)) (and (=> (= (ControlFlow 0 171) (- 0 172)) (HasDirectPerm Mask@3 freshObj@0 next)) (=> (HasDirectPerm Mask@3 freshObj@0 next) (and (=> (= (ControlFlow 0 171) 168) anon103_Then_correct) (=> (= (ControlFlow 0 171) 170) anon103_Else_correct))))))))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 179) 171) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(pop 1)
; Valid
(get-info :rlimit)
