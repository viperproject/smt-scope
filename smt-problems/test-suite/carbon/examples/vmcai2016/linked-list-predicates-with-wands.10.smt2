(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $allocated () T@U)
(declare-fun data () T@U)
(declare-fun next () T@U)
(declare-fun head () T@U)
(declare-fun held () T@U)
(declare-fun changed () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun NormalFieldType () T@T)
(declare-fun RefType () T@T)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun SeqType (T@T) T@T)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun wand (T@U T@U Real T@U T@U Int Int T@U T@U Real T@U T@U T@U T@U T@U) T@U)
(declare-fun getPredWandId (T@U) Int)
(declare-fun WandType_wandType () T@T)
(declare-fun state (T@U T@U) Bool)
(declare-fun lengthNodes (T@U T@U T@U) Int)
(declare-fun |lengthNodes#triggerStateless| (T@U T@U) Int)
(declare-fun |lseg#trigger| (T@U T@U) Bool)
(declare-fun lseg (T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun AssumeFunctionsAbove () Int)
(declare-fun |lengthNodes'| (T@U T@U T@U) Int)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun PredicateType_lsegType () T@T)
(declare-fun FrameTypeType () T@T)
(declare-fun GoodMask (T@U) Bool)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun |contentNodes'| (T@U T@U T@U) T@U)
(declare-fun dummyFunction (T@U) Bool)
(declare-fun |contentNodes#triggerStateless| (T@U T@U) T@U)
(declare-fun |lseg#everUsed| (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Sub| (Int Int) Int)
(declare-fun |Seq#Add| (Int Int) Int)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun IsWandField (T@U) Bool)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun List (T@U) T@U)
(declare-fun PredicateType_ListType () T@T)
(declare-fun |content'| (T@U T@U) T@U)
(declare-fun |content#triggerStateless| (T@U) T@U)
(declare-fun |length'| (T@U T@U) Int)
(declare-fun |length#triggerStateless| (T@U) Int)
(declare-fun |peek'| (T@U T@U) Int)
(declare-fun |peek#triggerStateless| (T@U) Int)
(declare-fun |List#trigger| (T@U T@U) Bool)
(declare-fun |List#everUsed| (T@U) Bool)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun peek (T@U T@U) Int)
(declare-fun length (T@U T@U) Int)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |length#trigger| (T@U T@U) Bool)
(declare-fun content (T@U T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Range| (Int Int) T@U)
(declare-fun |Seq#Skolem| (T@U T@U) Int)
(declare-fun contentNodes (T@U T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |lengthNodes#trigger| (T@U T@U T@U) Bool)
(declare-fun |contentNodes#trigger| (T@U T@U T@U) Bool)
(declare-fun |lseg#sm| (T@U T@U) T@U)
(declare-fun |List#sm| (T@U) T@U)
(declare-fun |contentNodes#frame| (T@U T@U T@U) T@U)
(declare-fun |lengthNodes#frame| (T@U T@U T@U) Int)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun |peek#trigger| (T@U T@U) Bool)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#ContainsTrigger| (T@U T@U) Bool)
(declare-fun FullPerm () Real)
(declare-fun |content#frame| (T@U T@U) T@U)
(declare-fun |length#frame| (T@U T@U) Int)
(declare-fun |peek#frame| (T@U T@U) Int)
(declare-fun |content#trigger| (T@U T@U) Bool)
(declare-fun ZeroPMask () T@U)
(declare-fun |Seq#SkolemDiff| (T@U T@U) Int)
(declare-fun |wand#ft| (T@U T@U Real T@U T@U Int Int T@U T@U Real T@U T@U T@U T@U T@U) T@U)
(declare-fun |wand#sm| (T@U T@U Real T@U T@U Int Int T@U T@U Real T@U T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@11 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@11 arg1)) 6)
 :qid |ctor:FieldType|
)) (forall ((arg0@@12 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12 arg1@@0)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12 arg1@@0))
))) (forall ((arg0@@13 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@13 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@13 arg1@@1))
))) (= (Ctor NormalFieldType) 7)) (= (type $allocated) (FieldType NormalFieldType boolType))) (= (type data) (FieldType NormalFieldType intType))) (= (Ctor RefType) 8)) (= (type next) (FieldType NormalFieldType RefType))) (= (type head) (FieldType NormalFieldType RefType))) (= (type held) (FieldType NormalFieldType intType))) (= (type changed) (FieldType NormalFieldType boolType))))
(assert (distinct $allocated data next head held changed)
)
(assert  (and (and (forall ((arg0@@14 T@T) ) (! (= (Ctor (SeqType arg0@@14)) 9)
 :qid |ctor:SeqType|
)) (forall ((arg0@@15 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@15)) arg0@@15)
 :qid |typeInv:SeqTypeInv0|
 :pattern ( (SeqType arg0@@15))
))) (forall ((arg0@@16 T@U) (arg1@@2 Int) ) (! (let ((T (SeqTypeInv0 (type arg0@@16))))
(= (type (|Seq#Drop| arg0@@16 arg1@@2)) (SeqType T)))
 :qid |funType:Seq#Drop|
 :pattern ( (|Seq#Drop| arg0@@16 arg1@@2))
))))
(assert (forall ((s T@U) (n Int) ) (! (let ((T@@0 (SeqTypeInv0 (type s))))
 (=> (= (type s) (SeqType T@@0)) (and (=> (<= 0 n) (and (=> (<= n (|Seq#Length| s)) (= (|Seq#Length| (|Seq#Drop| s n)) (- (|Seq#Length| s) n))) (=> (< (|Seq#Length| s) n) (= (|Seq#Length| (|Seq#Drop| s n)) 0)))) (=> (< n 0) (= (|Seq#Length| (|Seq#Drop| s n)) (|Seq#Length| s))))))
 :qid |stdinbpl.278:18|
 :skolemid |38|
 :pattern ( (|Seq#Length| (|Seq#Drop| s n)))
 :pattern ( (|Seq#Length| s) (|Seq#Drop| s n))
)))
(assert  (and (and (and (and (and (forall ((arg0@@17 T@T) ) (! (= (Ctor (MapType0Type arg0@@17)) 10)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@18 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@18)) arg0@@18)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@18))
))) (forall ((arg0@@19 T@U) (arg1@@3 T@U) (arg2 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2))))
(= (type (MapType0Select arg0@@19 arg1@@3 arg2)) B))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@19 arg1@@3 arg2))
))) (forall ((arg0@@20 T@U) (arg1@@4 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@4)))
(= (type (MapType0Store arg0@@20 arg1@@4 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@20 arg1@@4 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1))))
 (=> (= (type val) B@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType0Type RefType)) (= (type Heap1) (MapType0Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert  (and (= (Ctor WandType_wandType) 11) (forall ((arg0@@21 T@U) (arg1@@5 T@U) (arg2@@1 Real) (arg3@@0 T@U) (arg4 T@U) (arg5 Int) (arg6 Int) (arg7 T@U) (arg8 T@U) (arg9 Real) (arg10 T@U) (arg11 T@U) (arg12 T@U) (arg13 T@U) (arg14 T@U) ) (! (= (type (wand arg0@@21 arg1@@5 arg2@@1 arg3@@0 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14)) (FieldType WandType_wandType intType))
 :qid |funType:wand|
 :pattern ( (wand arg0@@21 arg1@@5 arg2@@1 arg3@@0 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14))
))))
(assert (forall ((arg1@@6 T@U) (arg2@@2 T@U) (arg3@@1 Real) (arg4@@0 T@U) (arg5@@0 T@U) (arg6@@0 Int) (arg7@@0 Int) (arg8@@0 T@U) (arg9@@0 T@U) (arg10@@0 Real) (arg11@@0 T@U) (arg12@@0 T@U) (arg13@@0 T@U) (arg14@@0 T@U) (arg15 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type arg1@@6) RefType) (= (type arg2@@2) RefType)) (= (type arg4@@0) RefType)) (= (type arg5@@0) RefType)) (= (type arg8@@0) RefType)) (= (type arg9@@0) RefType)) (= (type arg11@@0) RefType)) (= (type arg12@@0) RefType)) (= (type arg13@@0) (SeqType intType))) (= (type arg14@@0) RefType)) (= (type arg15) RefType)) (= (getPredWandId (wand arg1@@6 arg2@@2 arg3@@1 arg4@@0 arg5@@0 arg6@@0 arg7@@0 arg8@@0 arg9@@0 arg10@@0 arg11@@0 arg12@@0 arg13@@0 arg14@@0 arg15)) 2))
 :qid |stdinbpl.572:15|
 :skolemid |63|
 :pattern ( (wand arg1@@6 arg2@@2 arg3@@1 arg4@@0 arg5@@0 arg6@@0 arg7@@0 arg8@@0 arg9@@0 arg10@@0 arg11@@0 arg12@@0 arg13@@0 arg14@@0 arg15))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((arg0@@22 T@T) (arg1@@7 T@T) ) (! (= (Ctor (MapType1Type arg0@@22 arg1@@7)) 12)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@23 T@T) (arg1@@8 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@23 arg1@@8)) arg0@@23)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@23 arg1@@8))
))) (forall ((arg0@@24 T@T) (arg1@@9 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@24 arg1@@9)) arg1@@9)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@24 arg1@@9))
))) (forall ((arg0@@25 T@U) (arg1@@10 T@U) (arg2@@3 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@25))))
(= (type (MapType1Select arg0@@25 arg1@@10 arg2@@3)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@25 arg1@@10 arg2@@3))
))) (forall ((arg0@@26 T@U) (arg1@@11 T@U) (arg2@@4 T@U) (arg3@@2 T@U) ) (! (let ((aVar1@@0 (type arg3@@2)))
(let ((aVar0@@0 (type arg1@@11)))
(= (type (MapType1Store arg0@@26 arg1@@11 arg2@@4 arg3@@2)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@26 arg1@@11 arg2@@4 arg3@@2))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@3) x0@@3 x1@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@4) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@5) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@6) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))) (= (Ctor PredicateType_lsegType) 13)) (= (Ctor FrameTypeType) 14)) (forall ((arg0@@27 T@U) (arg1@@12 T@U) ) (! (= (type (lseg arg0@@27 arg1@@12)) (FieldType PredicateType_lsegType FrameTypeType))
 :qid |funType:lseg|
 :pattern ( (lseg arg0@@27 arg1@@12))
))))
(assert (forall ((Heap T@U) (Mask T@U) (this T@U) (end T@U) ) (!  (=> (and (and (and (and (= (type Heap) (MapType0Type RefType)) (= (type Mask) (MapType1Type RefType realType))) (= (type this) RefType)) (= (type end) RefType)) (and (state Heap Mask) (< AssumeFunctionsAbove 3))) (= (lengthNodes Heap this end) (ite (= this end) 0 (+ 1 (|lengthNodes'| Heap (MapType0Select Heap this next) end)))))
 :qid |stdinbpl.1004:15|
 :skolemid |84|
 :pattern ( (state Heap Mask) (lengthNodes Heap this end))
 :pattern ( (state Heap Mask) (|lengthNodes#triggerStateless| this end) (|lseg#trigger| Heap (lseg this end)))
)))
(assert (forall ((Heap@@0 T@U) (Mask@@0 T@U) ) (!  (=> (and (and (= (type Heap@@0) (MapType0Type RefType)) (= (type Mask@@0) (MapType1Type RefType realType))) (state Heap@@0 Mask@@0)) (GoodMask Mask@@0))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap@@0 Mask@@0))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType0Type RefType)) (= (type Heap1@@0) (MapType0Type RefType))) (= (type Heap2) (MapType0Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert (forall ((this@@0 T@U) (end@@0 T@U) ) (!  (=> (and (= (type this@@0) RefType) (= (type end@@0) RefType)) (IsPredicateField (lseg this@@0 end@@0)))
 :qid |stdinbpl.1812:15|
 :skolemid |115|
 :pattern ( (lseg this@@0 end@@0))
)))
(assert  (and (forall ((arg0@@28 T@U) (arg1@@13 T@U) (arg2@@5 T@U) ) (! (= (type (|contentNodes'| arg0@@28 arg1@@13 arg2@@5)) (SeqType intType))
 :qid |funType:contentNodes'|
 :pattern ( (|contentNodes'| arg0@@28 arg1@@13 arg2@@5))
)) (forall ((arg0@@29 T@U) (arg1@@14 T@U) ) (! (= (type (|contentNodes#triggerStateless| arg0@@29 arg1@@14)) (SeqType intType))
 :qid |funType:contentNodes#triggerStateless|
 :pattern ( (|contentNodes#triggerStateless| arg0@@29 arg1@@14))
))))
(assert (forall ((Heap@@1 T@U) (this@@1 T@U) (end@@1 T@U) ) (!  (=> (and (and (= (type Heap@@1) (MapType0Type RefType)) (= (type this@@1) RefType)) (= (type end@@1) RefType)) (dummyFunction (|contentNodes#triggerStateless| this@@1 end@@1)))
 :qid |stdinbpl.612:15|
 :skolemid |66|
 :pattern ( (|contentNodes'| Heap@@1 this@@1 end@@1))
)))
(assert (forall ((Heap@@2 T@U) (this@@2 T@U) (end@@2 T@U) ) (!  (=> (and (and (= (type Heap@@2) (MapType0Type RefType)) (= (type this@@2) RefType)) (= (type end@@2) RefType)) (dummyFunction (int_2_U (|lengthNodes#triggerStateless| this@@2 end@@2))))
 :qid |stdinbpl.998:15|
 :skolemid |83|
 :pattern ( (|lengthNodes'| Heap@@2 this@@2 end@@2))
)))
(assert (forall ((Heap@@3 T@U) (this@@3 T@U) (end@@3 T@U) ) (!  (=> (and (and (= (type Heap@@3) (MapType0Type RefType)) (= (type this@@3) RefType)) (= (type end@@3) RefType)) (|lseg#everUsed| (lseg this@@3 end@@3)))
 :qid |stdinbpl.1831:15|
 :skolemid |119|
 :pattern ( (|lseg#trigger| Heap@@3 (lseg this@@3 end@@3)))
)))
(assert (forall ((arg0@@30 T@U) (arg1@@15 Int) ) (! (let ((T@@1 (SeqTypeInv0 (type arg0@@30))))
(= (type (|Seq#Index| arg0@@30 arg1@@15)) T@@1))
 :qid |funType:Seq#Index|
 :pattern ( (|Seq#Index| arg0@@30 arg1@@15))
)))
(assert (forall ((s@@0 T@U) (n@@0 Int) (j Int) ) (! (let ((T@@2 (SeqTypeInv0 (type s@@0))))
 (=> (= (type s@@0) (SeqType T@@2)) (=> (and (and (< 0 n@@0) (<= 0 j)) (< j (- (|Seq#Length| s@@0) n@@0))) (and (= (|Seq#Sub| (|Seq#Add| j n@@0) n@@0) j) (= (|Seq#Index| (|Seq#Drop| s@@0 n@@0) j) (|Seq#Index| s@@0 (|Seq#Add| j n@@0)))))))
 :qid |stdinbpl.299:18|
 :skolemid |39|
 :pattern ( (|Seq#Index| (|Seq#Drop| s@@0 n@@0) j))
)))
(assert  (and (= (type null) RefType) (forall ((arg0@@31 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@31))))
(= (type (PredicateMaskField arg0@@31)) (FieldType A (MapType1Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@31))
))))
(assert (forall ((Heap@@4 T@U) (ExhaleHeap T@U) (Mask@@1 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@4) (MapType0Type RefType)) (= (type ExhaleHeap) (MapType0Type RefType))) (= (type Mask@@1) (MapType1Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@4 ExhaleHeap Mask@@1)) (and (HasDirectPerm Mask@@1 null pm_f) (IsPredicateField pm_f))) (= (MapType0Select Heap@@4 null (PredicateMaskField pm_f)) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@4 ExhaleHeap Mask@@1) (IsPredicateField pm_f) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((arg0@@32 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@32))))
(= (type (WandMaskField arg0@@32)) (FieldType A@@0 (MapType1Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@32))
)))
(assert (forall ((Heap@@5 T@U) (ExhaleHeap@@0 T@U) (Mask@@2 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@5) (MapType0Type RefType)) (= (type ExhaleHeap@@0) (MapType0Type RefType))) (= (type Mask@@2) (MapType1Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@0 Mask@@2)) (and (HasDirectPerm Mask@@2 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType0Select Heap@@5 null (WandMaskField pm_f@@0)) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@0 Mask@@2) (IsWandField pm_f@@0) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert  (and (= (Ctor PredicateType_ListType) 15) (forall ((arg0@@33 T@U) ) (! (= (type (List arg0@@33)) (FieldType PredicateType_ListType FrameTypeType))
 :qid |funType:List|
 :pattern ( (List arg0@@33))
))))
(assert (forall ((this@@4 T@U) ) (!  (=> (= (type this@@4) RefType) (IsPredicateField (List this@@4)))
 :qid |stdinbpl.2040:15|
 :skolemid |125|
 :pattern ( (List this@@4))
)))
(assert  (and (forall ((arg0@@34 T@U) (arg1@@16 T@U) ) (! (= (type (|content'| arg0@@34 arg1@@16)) (SeqType intType))
 :qid |funType:content'|
 :pattern ( (|content'| arg0@@34 arg1@@16))
)) (forall ((arg0@@35 T@U) ) (! (= (type (|content#triggerStateless| arg0@@35)) (SeqType intType))
 :qid |funType:content#triggerStateless|
 :pattern ( (|content#triggerStateless| arg0@@35))
))))
(assert (forall ((Heap@@6 T@U) (this@@5 T@U) ) (!  (=> (and (= (type Heap@@6) (MapType0Type RefType)) (= (type this@@5) RefType)) (dummyFunction (|content#triggerStateless| this@@5)))
 :qid |stdinbpl.1223:15|
 :skolemid |91|
 :pattern ( (|content'| Heap@@6 this@@5))
)))
(assert (forall ((Heap@@7 T@U) (this@@6 T@U) ) (!  (=> (and (= (type Heap@@7) (MapType0Type RefType)) (= (type this@@6) RefType)) (dummyFunction (int_2_U (|length#triggerStateless| this@@6))))
 :qid |stdinbpl.1385:15|
 :skolemid |99|
 :pattern ( (|length'| Heap@@7 this@@6))
)))
(assert (forall ((Heap@@8 T@U) (this@@7 T@U) ) (!  (=> (and (= (type Heap@@8) (MapType0Type RefType)) (= (type this@@7) RefType)) (dummyFunction (int_2_U (|peek#triggerStateless| this@@7))))
 :qid |stdinbpl.1537:15|
 :skolemid |105|
 :pattern ( (|peek'| Heap@@8 this@@7))
)))
(assert (forall ((Heap@@9 T@U) (this@@8 T@U) ) (!  (=> (and (= (type Heap@@9) (MapType0Type RefType)) (= (type this@@8) RefType)) (|List#everUsed| (List this@@8)))
 :qid |stdinbpl.2059:15|
 :skolemid |129|
 :pattern ( (|List#trigger| Heap@@9 (List this@@8)))
)))
(assert (forall ((arg0@@36 T@U) (arg1@@17 Int) (arg2@@6 T@U) ) (! (let ((T@@3 (type arg2@@6)))
(= (type (|Seq#Update| arg0@@36 arg1@@17 arg2@@6)) (SeqType T@@3)))
 :qid |funType:Seq#Update|
 :pattern ( (|Seq#Update| arg0@@36 arg1@@17 arg2@@6))
)))
(assert (forall ((s@@1 T@U) (i Int) (v T@U) (n@@1 Int) ) (! (let ((T@@4 (type v)))
 (=> (= (type s@@1) (SeqType T@@4)) (=> (and (<= 0 n@@1) (< n@@1 (|Seq#Length| s@@1))) (and (=> (= i n@@1) (= (|Seq#Index| (|Seq#Update| s@@1 i v) n@@1) v)) (=> (not (= i n@@1)) (= (|Seq#Index| (|Seq#Update| s@@1 i v) n@@1) (|Seq#Index| s@@1 n@@1)))))))
 :qid |stdinbpl.254:18|
 :skolemid |35|
 :pattern ( (|Seq#Index| (|Seq#Update| s@@1 i v) n@@1))
 :pattern ( (|Seq#Index| s@@1 n@@1) (|Seq#Update| s@@1 i v))
)))
(assert (forall ((Heap@@10 T@U) (Mask@@3 T@U) (this@@9 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@10) (MapType0Type RefType)) (= (type Mask@@3) (MapType1Type RefType realType))) (= (type this@@9) RefType)) (and (state Heap@@10 Mask@@3) (< AssumeFunctionsAbove 0))) (< 0 (length Heap@@10 this@@9))) (= (peek Heap@@10 this@@9) (U_2_int (MapType0Select Heap@@10 (MapType0Select Heap@@10 this@@9 head) data))))
 :qid |stdinbpl.1543:15|
 :skolemid |106|
 :pattern ( (state Heap@@10 Mask@@3) (peek Heap@@10 this@@9))
 :pattern ( (state Heap@@10 Mask@@3) (|peek#triggerStateless| this@@9) (|List#trigger| Heap@@10 (List this@@9)))
)))
(assert (forall ((arg0@@37 T@U) (arg1@@18 Int) ) (! (let ((T@@5 (SeqTypeInv0 (type arg0@@37))))
(= (type (|Seq#Take| arg0@@37 arg1@@18)) (SeqType T@@5)))
 :qid |funType:Seq#Take|
 :pattern ( (|Seq#Take| arg0@@37 arg1@@18))
)))
(assert (forall ((s@@2 T@U) (n@@2 Int) ) (! (let ((T@@6 (SeqTypeInv0 (type s@@2))))
 (=> (= (type s@@2) (SeqType T@@6)) (and (=> (<= 0 n@@2) (and (=> (<= n@@2 (|Seq#Length| s@@2)) (= (|Seq#Length| (|Seq#Take| s@@2 n@@2)) n@@2)) (=> (< (|Seq#Length| s@@2) n@@2) (= (|Seq#Length| (|Seq#Take| s@@2 n@@2)) (|Seq#Length| s@@2))))) (=> (< n@@2 0) (= (|Seq#Length| (|Seq#Take| s@@2 n@@2)) 0)))))
 :qid |stdinbpl.265:18|
 :skolemid |36|
 :pattern ( (|Seq#Length| (|Seq#Take| s@@2 n@@2)))
 :pattern ( (|Seq#Take| s@@2 n@@2) (|Seq#Length| s@@2))
)))
(assert (forall ((arg0@@38 T@U) (arg1@@19 T@U) ) (! (= (type (content arg0@@38 arg1@@19)) (SeqType intType))
 :qid |funType:content|
 :pattern ( (content arg0@@38 arg1@@19))
)))
(assert (forall ((Heap@@11 T@U) (Mask@@4 T@U) (this@@10 T@U) ) (!  (=> (and (and (and (= (type Heap@@11) (MapType0Type RefType)) (= (type Mask@@4) (MapType1Type RefType realType))) (= (type this@@10) RefType)) (and (state Heap@@11 Mask@@4) (or (< AssumeFunctionsAbove 1) (|length#trigger| (MapType0Select Heap@@11 null (List this@@10)) this@@10)))) (= (|length'| Heap@@11 this@@10) (|Seq#Length| (content Heap@@11 this@@10))))
 :qid |stdinbpl.1404:15|
 :skolemid |102|
 :pattern ( (state Heap@@11 Mask@@4) (|length'| Heap@@11 this@@10))
)))
(assert (forall ((arg0@@39 Int) (arg1@@20 Int) ) (! (= (type (|Seq#Range| arg0@@39 arg1@@20)) (SeqType intType))
 :qid |funType:Seq#Range|
 :pattern ( (|Seq#Range| arg0@@39 arg1@@20))
)))
(assert (forall ((q@min Int) (q@max Int) (v@@0 T@U) ) (!  (=> (= (type v@@0) intType) (= (|Seq#Contains| (|Seq#Range| q@min q@max) v@@0)  (and (<= q@min (U_2_int v@@0)) (< (U_2_int v@@0) q@max))))
 :qid |stdinbpl.538:15|
 :skolemid |57|
 :pattern ( (|Seq#Contains| (|Seq#Range| q@min q@max) v@@0))
)))
(assert (forall ((s@@3 T@U) (x@@8 T@U) ) (! (let ((T@@7 (type x@@8)))
 (=> (and (= (type s@@3) (SeqType T@@7)) (|Seq#Contains| s@@3 x@@8)) (and (and (<= 0 (|Seq#Skolem| s@@3 x@@8)) (< (|Seq#Skolem| s@@3 x@@8) (|Seq#Length| s@@3))) (= (|Seq#Index| s@@3 (|Seq#Skolem| s@@3 x@@8)) x@@8))))
 :qid |stdinbpl.396:18|
 :skolemid |47|
 :pattern ( (|Seq#Contains| s@@3 x@@8))
)))
(assert (forall ((Heap@@12 T@U) (ExhaleHeap@@1 T@U) (Mask@@5 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@12) (MapType0Type RefType)) (= (type ExhaleHeap@@1) (MapType0Type RefType))) (= (type Mask@@5) (MapType1Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@12 ExhaleHeap@@1 Mask@@5)) (U_2_bool (MapType0Select Heap@@12 o_1 $allocated))) (U_2_bool (MapType0Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@12 ExhaleHeap@@1 Mask@@5) (MapType0Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((Heap@@13 T@U) (this@@11 T@U) ) (!  (=> (and (= (type Heap@@13) (MapType0Type RefType)) (= (type this@@11) RefType)) (and (= (content Heap@@13 this@@11) (|content'| Heap@@13 this@@11)) (dummyFunction (|content#triggerStateless| this@@11))))
 :qid |stdinbpl.1219:15|
 :skolemid |90|
 :pattern ( (content Heap@@13 this@@11))
)))
(assert (forall ((Heap@@14 T@U) (this@@12 T@U) ) (!  (=> (and (= (type Heap@@14) (MapType0Type RefType)) (= (type this@@12) RefType)) (and (= (length Heap@@14 this@@12) (|length'| Heap@@14 this@@12)) (dummyFunction (int_2_U (|length#triggerStateless| this@@12)))))
 :qid |stdinbpl.1381:15|
 :skolemid |98|
 :pattern ( (length Heap@@14 this@@12))
)))
(assert (forall ((Heap@@15 T@U) (this@@13 T@U) ) (!  (=> (and (= (type Heap@@15) (MapType0Type RefType)) (= (type this@@13) RefType)) (and (= (peek Heap@@15 this@@13) (|peek'| Heap@@15 this@@13)) (dummyFunction (int_2_U (|peek#triggerStateless| this@@13)))))
 :qid |stdinbpl.1533:15|
 :skolemid |104|
 :pattern ( (peek Heap@@15 this@@13))
)))
(assert (forall ((s@@4 T@U) (n@@3 Int) ) (! (let ((T@@8 (SeqTypeInv0 (type s@@4))))
 (=> (and (= (type s@@4) (SeqType T@@8)) (<= n@@3 0)) (= (|Seq#Drop| s@@4 n@@3) s@@4)))
 :qid |stdinbpl.380:18|
 :skolemid |45|
 :pattern ( (|Seq#Drop| s@@4 n@@3))
)))
(assert (forall ((i@@0 Int) (j@@0 Int) ) (! (= (|Seq#Sub| i@@0 j@@0) (- i@@0 j@@0))
 :qid |stdinbpl.234:15|
 :skolemid |30|
 :pattern ( (|Seq#Sub| i@@0 j@@0))
)))
(assert (forall ((i@@1 Int) (j@@1 Int) ) (! (= (|Seq#Add| i@@1 j@@1) (+ i@@1 j@@1))
 :qid |stdinbpl.232:15|
 :skolemid |29|
 :pattern ( (|Seq#Add| i@@1 j@@1))
)))
(assert  (and (and (and (forall ((arg0@@40 T@U) (arg1@@21 T@U) (arg2@@7 T@U) ) (! (= (type (contentNodes arg0@@40 arg1@@21 arg2@@7)) (SeqType intType))
 :qid |funType:contentNodes|
 :pattern ( (contentNodes arg0@@40 arg1@@21 arg2@@7))
)) (forall ((T@@9 T@T) ) (! (= (type (|Seq#Empty| T@@9)) (SeqType T@@9))
 :qid |funType:Seq#Empty|
 :pattern ( (|Seq#Empty| T@@9))
))) (forall ((arg0@@41 T@U) (arg1@@22 T@U) ) (! (let ((T@@10 (SeqTypeInv0 (type arg0@@41))))
(= (type (|Seq#Append| arg0@@41 arg1@@22)) (SeqType T@@10)))
 :qid |funType:Seq#Append|
 :pattern ( (|Seq#Append| arg0@@41 arg1@@22))
))) (forall ((arg0@@42 T@U) ) (! (let ((T@@11 (type arg0@@42)))
(= (type (|Seq#Singleton| arg0@@42)) (SeqType T@@11)))
 :qid |funType:Seq#Singleton|
 :pattern ( (|Seq#Singleton| arg0@@42))
))))
(assert (forall ((Heap@@16 T@U) (Mask@@6 T@U) (this@@14 T@U) (end@@4 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@16) (MapType0Type RefType)) (= (type Mask@@6) (MapType1Type RefType realType))) (= (type this@@14) RefType)) (= (type end@@4) RefType)) (and (state Heap@@16 Mask@@6) (< AssumeFunctionsAbove 4))) (= (contentNodes Heap@@16 this@@14 end@@4) (ite (= this@@14 end@@4) (|Seq#Empty| intType) (|Seq#Append| (|Seq#Singleton| (MapType0Select Heap@@16 this@@14 data)) (|contentNodes'| Heap@@16 (MapType0Select Heap@@16 this@@14 next) end@@4)))))
 :qid |stdinbpl.618:15|
 :skolemid |67|
 :pattern ( (state Heap@@16 Mask@@6) (contentNodes Heap@@16 this@@14 end@@4))
 :pattern ( (state Heap@@16 Mask@@6) (|contentNodes#triggerStateless| this@@14 end@@4) (|lseg#trigger| Heap@@16 (lseg this@@14 end@@4)))
)))
(assert (forall ((x@@9 T@U) (y@@1 T@U) ) (! (let ((T@@12 (type x@@9)))
 (=> (= (type y@@1) T@@12) (= (|Seq#Contains| (|Seq#Singleton| x@@9) y@@1) (= x@@9 y@@1))))
 :qid |stdinbpl.521:18|
 :skolemid |54|
 :pattern ( (|Seq#Contains| (|Seq#Singleton| x@@9) y@@1))
)))
(assert (forall ((Heap@@17 T@U) (Mask@@7 T@U) (this@@15 T@U) (end@@5 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@17) (MapType0Type RefType)) (= (type Mask@@7) (MapType1Type RefType realType))) (= (type this@@15) RefType)) (= (type end@@5) RefType)) (and (state Heap@@17 Mask@@7) (or (< AssumeFunctionsAbove 3) (|lengthNodes#trigger| (MapType0Select Heap@@17 null (lseg this@@15 end@@5)) this@@15 end@@5)))) (= (|lengthNodes'| Heap@@17 this@@15 end@@5) (|Seq#Length| (contentNodes Heap@@17 this@@15 end@@5))))
 :qid |stdinbpl.1017:15|
 :skolemid |86|
 :pattern ( (state Heap@@17 Mask@@7) (|lengthNodes'| Heap@@17 this@@15 end@@5))
)))
(assert (forall ((Heap@@18 T@U) (Mask@@8 T@U) (this@@16 T@U) (end@@6 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@18) (MapType0Type RefType)) (= (type Mask@@8) (MapType1Type RefType realType))) (= (type this@@16) RefType)) (= (type end@@6) RefType)) (and (state Heap@@18 Mask@@8) (or (< AssumeFunctionsAbove 4) (|contentNodes#trigger| (MapType0Select Heap@@18 null (lseg this@@16 end@@6)) this@@16 end@@6)))) (forall ((i@@2 Int) (j@@2 Int) ) (!  (=> (and (<= 0 i@@2) (and (< i@@2 j@@2) (< j@@2 (|Seq#Length| (|contentNodes'| Heap@@18 this@@16 end@@6))))) (<= (U_2_int (|Seq#Index| (|contentNodes'| Heap@@18 this@@16 end@@6) i@@2)) (U_2_int (|Seq#Index| (|contentNodes'| Heap@@18 this@@16 end@@6) j@@2))))
 :qid |stdinbpl.641:127|
 :skolemid |71|
 :pattern ( (|Seq#Index| (|contentNodes'| Heap@@18 this@@16 end@@6) i@@2) (|Seq#Index| (|contentNodes'| Heap@@18 this@@16 end@@6) j@@2))
)))
 :qid |stdinbpl.639:15|
 :skolemid |72|
 :pattern ( (state Heap@@18 Mask@@8) (|contentNodes'| Heap@@18 this@@16 end@@6))
)))
(assert (forall ((this@@17 T@U) (end@@7 T@U) (this2 T@U) (end2 T@U) ) (!  (=> (and (and (and (and (= (type this@@17) RefType) (= (type end@@7) RefType)) (= (type this2) RefType)) (= (type end2) RefType)) (= (lseg this@@17 end@@7) (lseg this2 end2))) (and (= this@@17 this2) (= end@@7 end2)))
 :qid |stdinbpl.1822:15|
 :skolemid |117|
 :pattern ( (lseg this@@17 end@@7) (lseg this2 end2))
)))
(assert (forall ((arg0@@43 T@U) (arg1@@23 T@U) ) (! (= (type (|lseg#sm| arg0@@43 arg1@@23)) (FieldType PredicateType_lsegType (MapType1Type RefType boolType)))
 :qid |funType:lseg#sm|
 :pattern ( (|lseg#sm| arg0@@43 arg1@@23))
)))
(assert (forall ((this@@18 T@U) (end@@8 T@U) (this2@@0 T@U) (end2@@0 T@U) ) (!  (=> (and (and (and (and (= (type this@@18) RefType) (= (type end@@8) RefType)) (= (type this2@@0) RefType)) (= (type end2@@0) RefType)) (= (|lseg#sm| this@@18 end@@8) (|lseg#sm| this2@@0 end2@@0))) (and (= this@@18 this2@@0) (= end@@8 end2@@0)))
 :qid |stdinbpl.1826:15|
 :skolemid |118|
 :pattern ( (|lseg#sm| this@@18 end@@8) (|lseg#sm| this2@@0 end2@@0))
)))
(assert (forall ((s@@5 T@U) (n@@4 Int) (j@@3 Int) ) (! (let ((T@@13 (SeqTypeInv0 (type s@@5))))
 (=> (= (type s@@5) (SeqType T@@13)) (=> (and (and (<= 0 j@@3) (< j@@3 n@@4)) (< j@@3 (|Seq#Length| s@@5))) (= (|Seq#Index| (|Seq#Take| s@@5 n@@4) j@@3) (|Seq#Index| s@@5 j@@3)))))
 :qid |stdinbpl.273:18|
 :skolemid |37|
 :pattern ( (|Seq#Index| (|Seq#Take| s@@5 n@@4) j@@3))
 :pattern ( (|Seq#Index| s@@5 j@@3) (|Seq#Take| s@@5 n@@4))
)))
(assert (forall ((this@@19 T@U) (this2@@1 T@U) ) (!  (=> (and (and (= (type this@@19) RefType) (= (type this2@@1) RefType)) (= (List this@@19) (List this2@@1))) (= this@@19 this2@@1))
 :qid |stdinbpl.2050:15|
 :skolemid |127|
 :pattern ( (List this@@19) (List this2@@1))
)))
(assert (forall ((arg0@@44 T@U) ) (! (= (type (|List#sm| arg0@@44)) (FieldType PredicateType_ListType (MapType1Type RefType boolType)))
 :qid |funType:List#sm|
 :pattern ( (|List#sm| arg0@@44))
)))
(assert (forall ((this@@20 T@U) (this2@@2 T@U) ) (!  (=> (and (and (= (type this@@20) RefType) (= (type this2@@2) RefType)) (= (|List#sm| this@@20) (|List#sm| this2@@2))) (= this@@20 this2@@2))
 :qid |stdinbpl.2054:15|
 :skolemid |128|
 :pattern ( (|List#sm| this@@20) (|List#sm| this2@@2))
)))
(assert (forall ((arg0@@45 T@U) (arg1@@24 T@U) (arg2@@8 T@U) ) (! (= (type (|contentNodes#frame| arg0@@45 arg1@@24 arg2@@8)) (SeqType intType))
 :qid |funType:contentNodes#frame|
 :pattern ( (|contentNodes#frame| arg0@@45 arg1@@24 arg2@@8))
)))
(assert (forall ((Heap@@19 T@U) (Mask@@9 T@U) (this@@21 T@U) (end@@9 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@19) (MapType0Type RefType)) (= (type Mask@@9) (MapType1Type RefType realType))) (= (type this@@21) RefType)) (= (type end@@9) RefType)) (state Heap@@19 Mask@@9)) (= (|contentNodes'| Heap@@19 this@@21 end@@9) (|contentNodes#frame| (MapType0Select Heap@@19 null (lseg this@@21 end@@9)) this@@21 end@@9)))
 :qid |stdinbpl.625:15|
 :skolemid |68|
 :pattern ( (state Heap@@19 Mask@@9) (|contentNodes'| Heap@@19 this@@21 end@@9))
 :pattern ( (state Heap@@19 Mask@@9) (|contentNodes#triggerStateless| this@@21 end@@9) (|lseg#trigger| Heap@@19 (lseg this@@21 end@@9)))
)))
(assert (forall ((Heap@@20 T@U) (Mask@@10 T@U) (this@@22 T@U) (end@@10 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@20) (MapType0Type RefType)) (= (type Mask@@10) (MapType1Type RefType realType))) (= (type this@@22) RefType)) (= (type end@@10) RefType)) (state Heap@@20 Mask@@10)) (= (|lengthNodes'| Heap@@20 this@@22 end@@10) (|lengthNodes#frame| (MapType0Select Heap@@20 null (lseg this@@22 end@@10)) this@@22 end@@10)))
 :qid |stdinbpl.1011:15|
 :skolemid |85|
 :pattern ( (state Heap@@20 Mask@@10) (|lengthNodes'| Heap@@20 this@@22 end@@10))
 :pattern ( (state Heap@@20 Mask@@10) (|lengthNodes#triggerStateless| this@@22 end@@10) (|lseg#trigger| Heap@@20 (lseg this@@22 end@@10)))
)))
(assert (forall ((Heap@@21 T@U) (ExhaleHeap@@2 T@U) (Mask@@11 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@21) (MapType0Type RefType)) (= (type ExhaleHeap@@2) (MapType0Type RefType))) (= (type Mask@@11) (MapType1Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@21 ExhaleHeap@@2 Mask@@11)) (HasDirectPerm Mask@@11 o_1@@0 f_2)) (= (MapType0Select Heap@@21 o_1@@0 f_2) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@21 ExhaleHeap@@2 Mask@@11) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert (forall ((T@@14 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@14)) 0)
 :skolemid |23|
)))
(assert (forall ((Heap@@22 T@U) (Mask@@12 T@U) (this@@23 T@U) (end@@11 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@22) (MapType0Type RefType)) (= (type Mask@@12) (MapType1Type RefType realType))) (= (type this@@23) RefType)) (= (type end@@11) RefType)) (and (state Heap@@22 Mask@@12) (or (< AssumeFunctionsAbove 4) (|contentNodes#trigger| (MapType0Select Heap@@22 null (lseg this@@23 end@@11)) this@@23 end@@11)))) (not (= this@@23 end@@11))) (and (> (|Seq#Length| (|contentNodes'| Heap@@22 this@@23 end@@11)) 0) (= (U_2_int (|Seq#Index| (|contentNodes'| Heap@@22 this@@23 end@@11) 0)) (U_2_int (MapType0Select Heap@@22 this@@23 data)))))
 :qid |stdinbpl.635:15|
 :skolemid |70|
 :pattern ( (state Heap@@22 Mask@@12) (|contentNodes'| Heap@@22 this@@23 end@@11))
)))
(assert  (and (= (type dummyHeap) (MapType0Type RefType)) (= (type ZeroMask) (MapType1Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.177:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert (forall ((s0 T@U) (s1 T@U) (n@@5 Int) ) (! (let ((T@@15 (SeqTypeInv0 (type s0))))
 (=> (and (= (type s0) (SeqType T@@15)) (= (type s1) (SeqType T@@15))) (=> (and (and (and (not (= s0 (|Seq#Empty| T@@15))) (not (= s1 (|Seq#Empty| T@@15)))) (<= (|Seq#Length| s0) n@@5)) (< n@@5 (|Seq#Length| (|Seq#Append| s0 s1)))) (and (= (|Seq#Add| (|Seq#Sub| n@@5 (|Seq#Length| s0)) (|Seq#Length| s0)) n@@5) (= (|Seq#Index| (|Seq#Append| s0 s1) n@@5) (|Seq#Index| s1 (|Seq#Sub| n@@5 (|Seq#Length| s0))))))))
 :qid |stdinbpl.245:18|
 :skolemid |32|
 :pattern ( (|Seq#Index| (|Seq#Append| s0 s1) n@@5))
)))
(assert  (not (IsPredicateField data)))
(assert  (not (IsWandField data)))
(assert  (not (IsPredicateField next)))
(assert  (not (IsWandField next)))
(assert  (not (IsPredicateField head)))
(assert  (not (IsWandField head)))
(assert  (not (IsPredicateField held)))
(assert  (not (IsWandField held)))
(assert  (not (IsPredicateField changed)))
(assert  (not (IsWandField changed)))
(assert (forall ((Heap@@23 T@U) (ExhaleHeap@@3 T@U) (Mask@@13 T@U) ) (!  (=> (and (and (and (= (type Heap@@23) (MapType0Type RefType)) (= (type ExhaleHeap@@3) (MapType0Type RefType))) (= (type Mask@@13) (MapType1Type RefType realType))) (IdenticalOnKnownLocations Heap@@23 ExhaleHeap@@3 Mask@@13)) (succHeap Heap@@23 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@23 ExhaleHeap@@3 Mask@@13))
)))
(assert (forall ((Heap@@24 T@U) (Mask@@14 T@U) (this@@24 T@U) ) (!  (=> (and (and (and (and (= (type Heap@@24) (MapType0Type RefType)) (= (type Mask@@14) (MapType1Type RefType realType))) (= (type this@@24) RefType)) (and (state Heap@@24 Mask@@14) (or (< AssumeFunctionsAbove 0) (|peek#trigger| (MapType0Select Heap@@24 null (List this@@24)) this@@24)))) (< 0 (length Heap@@24 this@@24))) (= (|peek'| Heap@@24 this@@24) (U_2_int (|Seq#Index| (content Heap@@24 this@@24) 0))))
 :qid |stdinbpl.1556:15|
 :skolemid |108|
 :pattern ( (state Heap@@24 Mask@@14) (|peek'| Heap@@24 this@@24))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType1Type RefType realType)) (= (type SummandMask1) (MapType1Type RefType realType))) (= (type SummandMask2) (MapType1Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType1Select ResultMask o_2 f_4)) (+ (U_2_real (MapType1Select SummandMask1 o_2 f_4)) (U_2_real (MapType1Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask2 o_2 f_4))
)))
(assert  (and (forall ((arg0@@46 Real) (arg1@@25 T@U) ) (! (= (type (ConditionalFrame arg0@@46 arg1@@25)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@46 arg1@@25))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.165:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((q@min@@0 Int) (q@max@@0 Int) (j@@4 Int) ) (!  (=> (and (<= 0 j@@4) (< j@@4 (- q@max@@0 q@min@@0))) (= (U_2_int (|Seq#Index| (|Seq#Range| q@min@@0 q@max@@0) j@@4)) (+ q@min@@0 j@@4)))
 :qid |stdinbpl.536:15|
 :skolemid |56|
 :pattern ( (|Seq#Index| (|Seq#Range| q@min@@0 q@max@@0) j@@4))
)))
(assert (forall ((Mask@@15 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@15) (MapType1Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@15 o_2@@0 f_4@@0) (> (U_2_real (MapType1Select Mask@@15 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@15 o_2@@0 f_4@@0))
)))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) ) (! (let ((T@@16 (SeqTypeInv0 (type s0@@0))))
 (=> (and (and (= (type s0@@0) (SeqType T@@16)) (= (type s1@@0) (SeqType T@@16))) (and (not (= s0@@0 (|Seq#Empty| T@@16))) (not (= s1@@0 (|Seq#Empty| T@@16))))) (= (|Seq#Length| (|Seq#Append| s0@@0 s1@@0)) (+ (|Seq#Length| s0@@0) (|Seq#Length| s1@@0)))))
 :qid |stdinbpl.214:18|
 :skolemid |26|
 :pattern ( (|Seq#Length| (|Seq#Append| s0@@0 s1@@0)))
)))
(assert (forall ((s@@6 T@U) (t T@U) (n@@6 Int) ) (! (let ((T@@17 (SeqTypeInv0 (type s@@6))))
 (=> (and (and (= (type s@@6) (SeqType T@@17)) (= (type t) (SeqType T@@17))) (and (> n@@6 0) (> n@@6 (|Seq#Length| s@@6)))) (and (= (|Seq#Add| (|Seq#Sub| n@@6 (|Seq#Length| s@@6)) (|Seq#Length| s@@6)) n@@6) (= (|Seq#Drop| (|Seq#Append| s@@6 t) n@@6) (|Seq#Drop| t (|Seq#Sub| n@@6 (|Seq#Length| s@@6)))))))
 :qid |stdinbpl.370:18|
 :skolemid |44|
 :pattern ( (|Seq#Drop| (|Seq#Append| s@@6 t) n@@6))
)))
(assert (forall ((Heap@@25 T@U) (this@@25 T@U) (end@@12 T@U) ) (!  (=> (and (and (= (type Heap@@25) (MapType0Type RefType)) (= (type this@@25) RefType)) (= (type end@@12) RefType)) (and (= (contentNodes Heap@@25 this@@25 end@@12) (|contentNodes'| Heap@@25 this@@25 end@@12)) (dummyFunction (|contentNodes#triggerStateless| this@@25 end@@12))))
 :qid |stdinbpl.608:15|
 :skolemid |65|
 :pattern ( (contentNodes Heap@@25 this@@25 end@@12))
)))
(assert (forall ((Heap@@26 T@U) (this@@26 T@U) (end@@13 T@U) ) (!  (=> (and (and (= (type Heap@@26) (MapType0Type RefType)) (= (type this@@26) RefType)) (= (type end@@13) RefType)) (and (= (lengthNodes Heap@@26 this@@26 end@@13) (|lengthNodes'| Heap@@26 this@@26 end@@13)) (dummyFunction (int_2_U (|lengthNodes#triggerStateless| this@@26 end@@13)))))
 :qid |stdinbpl.994:15|
 :skolemid |82|
 :pattern ( (lengthNodes Heap@@26 this@@26 end@@13))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType1Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType1Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((s@@7 T@U) (t@@0 T@U) (n@@7 Int) ) (! (let ((T@@18 (SeqTypeInv0 (type s@@7))))
 (=> (and (and (= (type s@@7) (SeqType T@@18)) (= (type t@@0) (SeqType T@@18))) (and (> n@@7 0) (> n@@7 (|Seq#Length| s@@7)))) (and (= (|Seq#Add| (|Seq#Sub| n@@7 (|Seq#Length| s@@7)) (|Seq#Length| s@@7)) n@@7) (= (|Seq#Take| (|Seq#Append| s@@7 t@@0) n@@7) (|Seq#Append| s@@7 (|Seq#Take| t@@0 (|Seq#Sub| n@@7 (|Seq#Length| s@@7))))))))
 :qid |stdinbpl.357:18|
 :skolemid |42|
 :pattern ( (|Seq#Take| (|Seq#Append| s@@7 t@@0) n@@7))
)))
(assert (forall ((q@min@@1 Int) (q@max@@1 Int) ) (!  (and (=> (< q@min@@1 q@max@@1) (= (|Seq#Length| (|Seq#Range| q@min@@1 q@max@@1)) (- q@max@@1 q@min@@1))) (=> (<= q@max@@1 q@min@@1) (= (|Seq#Length| (|Seq#Range| q@min@@1 q@max@@1)) 0)))
 :qid |stdinbpl.535:15|
 :skolemid |55|
 :pattern ( (|Seq#Length| (|Seq#Range| q@min@@1 q@max@@1)))
)))
(assert (forall ((a T@U) (b T@U) ) (! (let ((T@@19 (SeqTypeInv0 (type a))))
 (=> (and (and (= (type a) (SeqType T@@19)) (= (type b) (SeqType T@@19))) (|Seq#Equal| a b)) (= a b)))
 :qid |stdinbpl.508:18|
 :skolemid |53|
 :pattern ( (|Seq#Equal| a b))
)))
(assert (forall ((s@@8 T@U) (i@@3 Int) ) (! (let ((T@@20 (SeqTypeInv0 (type s@@8))))
 (=> (= (type s@@8) (SeqType T@@20)) (=> (and (<= 0 i@@3) (< i@@3 (|Seq#Length| s@@8))) (|Seq#ContainsTrigger| s@@8 (|Seq#Index| s@@8 i@@3)))))
 :qid |stdinbpl.401:18|
 :skolemid |49|
 :pattern ( (|Seq#Index| s@@8 i@@3))
)))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) ) (! (let ((T@@21 (SeqTypeInv0 (type s0@@1))))
 (=> (and (= (type s0@@1) (SeqType T@@21)) (= (type s1@@1) (SeqType T@@21))) (and (=> (= s0@@1 (|Seq#Empty| T@@21)) (= (|Seq#Append| s0@@1 s1@@1) s1@@1)) (=> (= s1@@1 (|Seq#Empty| T@@21)) (= (|Seq#Append| s0@@1 s1@@1) s0@@1)))))
 :qid |stdinbpl.220:18|
 :skolemid |27|
 :pattern ( (|Seq#Append| s0@@1 s1@@1))
)))
(assert (forall ((t@@1 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@1) 0) t@@1)
 :qid |stdinbpl.224:18|
 :skolemid |28|
 :pattern ( (|Seq#Singleton| t@@1))
)))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@22 (SeqTypeInv0 (type s@@9))))
 (=> (= (type s@@9) (SeqType T@@22)) (<= 0 (|Seq#Length| s@@9))))
 :qid |stdinbpl.203:18|
 :skolemid |22|
 :pattern ( (|Seq#Length| s@@9))
)))
(assert (forall ((this@@27 T@U) (end@@14 T@U) ) (!  (=> (and (= (type this@@27) RefType) (= (type end@@14) RefType)) (= (getPredWandId (lseg this@@27 end@@14)) 0))
 :qid |stdinbpl.1816:15|
 :skolemid |116|
 :pattern ( (lseg this@@27 end@@14))
)))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) ) (! (let ((T@@23 (SeqTypeInv0 (type s0@@2))))
 (=> (and (and (= (type s0@@2) (SeqType T@@23)) (= (type s1@@2) (SeqType T@@23))) (|Seq#Equal| s0@@2 s1@@2)) (and (= (|Seq#Length| s0@@2) (|Seq#Length| s1@@2)) (forall ((j@@5 Int) ) (!  (=> (and (<= 0 j@@5) (< j@@5 (|Seq#Length| s0@@2))) (= (|Seq#Index| s0@@2 j@@5) (|Seq#Index| s1@@2 j@@5)))
 :qid |stdinbpl.498:13|
 :skolemid |50|
 :pattern ( (|Seq#Index| s0@@2 j@@5))
 :pattern ( (|Seq#Index| s1@@2 j@@5))
)))))
 :qid |stdinbpl.495:18|
 :skolemid |51|
 :pattern ( (|Seq#Equal| s0@@2 s1@@2))
)))
(assert (forall ((Heap@@27 T@U) (ExhaleHeap@@4 T@U) (Mask@@16 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@27) (MapType0Type RefType)) (= (type ExhaleHeap@@4) (MapType0Type RefType))) (= (type Mask@@16) (MapType1Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@27 ExhaleHeap@@4 Mask@@16)) (and (HasDirectPerm Mask@@16 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType1Select (MapType0Select Heap@@27 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType0Select Heap@@27 o2 f_2@@0) (MapType0Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType0Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@27 ExhaleHeap@@4 Mask@@16) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@28 T@U) (ExhaleHeap@@5 T@U) (Mask@@17 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@28) (MapType0Type RefType)) (= (type ExhaleHeap@@5) (MapType0Type RefType))) (= (type Mask@@17) (MapType1Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@28 ExhaleHeap@@5 Mask@@17)) (and (HasDirectPerm Mask@@17 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType1Select (MapType0Select Heap@@28 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType0Select Heap@@28 o2@@0 f_2@@1) (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@28 ExhaleHeap@@5 Mask@@17) (IsWandField pm_f@@2))
)))
(assert (forall ((this@@28 T@U) ) (!  (=> (= (type this@@28) RefType) (= (getPredWandId (List this@@28)) 1))
 :qid |stdinbpl.2044:15|
 :skolemid |126|
 :pattern ( (List this@@28))
)))
(assert (forall ((t@@2 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@2)) 1)
 :qid |stdinbpl.211:18|
 :skolemid |25|
 :pattern ( (|Seq#Singleton| t@@2))
)))
(assert (forall ((Mask@@18 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@18) (MapType1Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@18)) (and (>= (U_2_real (MapType1Select Mask@@18 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@18) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType1Select Mask@@18 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@18) (MapType1Select Mask@@18 o_2@@2 f_4@@2))
)))
(assert (forall ((arg0@@47 T@U) (arg1@@26 T@U) ) (! (= (type (|content#frame| arg0@@47 arg1@@26)) (SeqType intType))
 :qid |funType:content#frame|
 :pattern ( (|content#frame| arg0@@47 arg1@@26))
)))
(assert (forall ((Heap@@29 T@U) (Mask@@19 T@U) (this@@29 T@U) ) (!  (=> (and (and (and (= (type Heap@@29) (MapType0Type RefType)) (= (type Mask@@19) (MapType1Type RefType realType))) (= (type this@@29) RefType)) (state Heap@@29 Mask@@19)) (= (|content'| Heap@@29 this@@29) (|content#frame| (MapType0Select Heap@@29 null (List this@@29)) this@@29)))
 :qid |stdinbpl.1236:15|
 :skolemid |93|
 :pattern ( (state Heap@@29 Mask@@19) (|content'| Heap@@29 this@@29))
 :pattern ( (state Heap@@29 Mask@@19) (|content#triggerStateless| this@@29) (|List#trigger| Heap@@29 (List this@@29)))
)))
(assert (forall ((Heap@@30 T@U) (Mask@@20 T@U) (this@@30 T@U) ) (!  (=> (and (and (and (= (type Heap@@30) (MapType0Type RefType)) (= (type Mask@@20) (MapType1Type RefType realType))) (= (type this@@30) RefType)) (state Heap@@30 Mask@@20)) (= (|length'| Heap@@30 this@@30) (|length#frame| (MapType0Select Heap@@30 null (List this@@30)) this@@30)))
 :qid |stdinbpl.1398:15|
 :skolemid |101|
 :pattern ( (state Heap@@30 Mask@@20) (|length'| Heap@@30 this@@30))
 :pattern ( (state Heap@@30 Mask@@20) (|length#triggerStateless| this@@30) (|List#trigger| Heap@@30 (List this@@30)))
)))
(assert (forall ((Heap@@31 T@U) (Mask@@21 T@U) (this@@31 T@U) ) (!  (=> (and (and (and (= (type Heap@@31) (MapType0Type RefType)) (= (type Mask@@21) (MapType1Type RefType realType))) (= (type this@@31) RefType)) (state Heap@@31 Mask@@21)) (= (|peek'| Heap@@31 this@@31) (|peek#frame| (MapType0Select Heap@@31 null (List this@@31)) this@@31)))
 :qid |stdinbpl.1550:15|
 :skolemid |107|
 :pattern ( (state Heap@@31 Mask@@21) (|peek'| Heap@@31 this@@31))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@32 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@32) (MapType0Type RefType))) (U_2_bool (MapType0Select Heap@@32 o $allocated))) (U_2_bool (MapType0Select Heap@@32 (MapType0Select Heap@@32 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType0Select Heap@@32 o f))
)))
(assert (forall ((this@@32 T@U) (end@@15 T@U) ) (!  (=> (and (= (type this@@32) RefType) (= (type end@@15) RefType)) (= (PredicateMaskField (lseg this@@32 end@@15)) (|lseg#sm| this@@32 end@@15)))
 :qid |stdinbpl.1808:15|
 :skolemid |114|
 :pattern ( (PredicateMaskField (lseg this@@32 end@@15)))
)))
(assert (forall ((s@@10 T@U) (t@@3 T@U) (n@@8 Int) ) (! (let ((T@@24 (SeqTypeInv0 (type s@@10))))
 (=> (and (and (= (type s@@10) (SeqType T@@24)) (= (type t@@3) (SeqType T@@24))) (and (< 0 n@@8) (<= n@@8 (|Seq#Length| s@@10)))) (= (|Seq#Take| (|Seq#Append| s@@10 t@@3) n@@8) (|Seq#Take| s@@10 n@@8))))
 :qid |stdinbpl.353:18|
 :skolemid |41|
 :pattern ( (|Seq#Take| (|Seq#Append| s@@10 t@@3) n@@8))
)))
(assert (forall ((s@@11 T@U) (i@@4 Int) (v@@1 T@U) ) (! (let ((T@@25 (type v@@1)))
 (=> (= (type s@@11) (SeqType T@@25)) (=> (and (<= 0 i@@4) (< i@@4 (|Seq#Length| s@@11))) (= (|Seq#Length| (|Seq#Update| s@@11 i@@4 v@@1)) (|Seq#Length| s@@11)))))
 :qid |stdinbpl.252:18|
 :skolemid |34|
 :pattern ( (|Seq#Length| (|Seq#Update| s@@11 i@@4 v@@1)))
 :pattern ( (|Seq#Length| s@@11) (|Seq#Update| s@@11 i@@4 v@@1))
)))
(assert (forall ((this@@33 T@U) ) (!  (=> (= (type this@@33) RefType) (= (PredicateMaskField (List this@@33)) (|List#sm| this@@33)))
 :qid |stdinbpl.2036:15|
 :skolemid |124|
 :pattern ( (PredicateMaskField (List this@@33)))
)))
(assert (forall ((s@@12 T@U) (t@@4 T@U) (n@@9 Int) ) (! (let ((T@@26 (SeqTypeInv0 (type s@@12))))
 (=> (and (and (= (type s@@12) (SeqType T@@26)) (= (type t@@4) (SeqType T@@26))) (and (< 0 n@@9) (<= n@@9 (|Seq#Length| s@@12)))) (= (|Seq#Drop| (|Seq#Append| s@@12 t@@4) n@@9) (|Seq#Append| (|Seq#Drop| s@@12 n@@9) t@@4))))
 :qid |stdinbpl.366:18|
 :skolemid |43|
 :pattern ( (|Seq#Drop| (|Seq#Append| s@@12 t@@4) n@@9))
)))
(assert (forall ((s@@13 T@U) (n@@10 Int) (i@@5 Int) ) (! (let ((T@@27 (SeqTypeInv0 (type s@@13))))
 (=> (= (type s@@13) (SeqType T@@27)) (=> (and (and (< 0 n@@10) (<= n@@10 i@@5)) (< i@@5 (|Seq#Length| s@@13))) (and (= (|Seq#Add| (|Seq#Sub| i@@5 n@@10) n@@10) i@@5) (= (|Seq#Index| (|Seq#Drop| s@@13 n@@10) (|Seq#Sub| i@@5 n@@10)) (|Seq#Index| s@@13 i@@5))))))
 :qid |stdinbpl.303:18|
 :skolemid |40|
 :pattern ( (|Seq#Drop| s@@13 n@@10) (|Seq#Index| s@@13 i@@5))
)))
(assert (forall ((Heap@@33 T@U) (Mask@@22 T@U) (this@@34 T@U) ) (!  (=> (and (and (and (= (type Heap@@33) (MapType0Type RefType)) (= (type Mask@@22) (MapType1Type RefType realType))) (= (type this@@34) RefType)) (and (state Heap@@33 Mask@@22) (or (< AssumeFunctionsAbove 2) (|content#trigger| (MapType0Select Heap@@33 null (List this@@34)) this@@34)))) (forall ((i@@6 Int) (j@@6 Int) ) (!  (=> (and (<= 0 i@@6) (and (< i@@6 j@@6) (< j@@6 (|Seq#Length| (|content'| Heap@@33 this@@34))))) (<= (U_2_int (|Seq#Index| (|content'| Heap@@33 this@@34) i@@6)) (U_2_int (|Seq#Index| (|content'| Heap@@33 this@@34) j@@6))))
 :qid |stdinbpl.1244:112|
 :skolemid |94|
 :pattern ( (|Seq#Index| (|content'| Heap@@33 this@@34) i@@6) (|Seq#Index| (|content'| Heap@@33 this@@34) j@@6))
)))
 :qid |stdinbpl.1242:15|
 :skolemid |95|
 :pattern ( (state Heap@@33 Mask@@22) (|content'| Heap@@33 this@@34))
)))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) (n@@11 Int) ) (! (let ((T@@28 (SeqTypeInv0 (type s0@@3))))
 (=> (and (= (type s0@@3) (SeqType T@@28)) (= (type s1@@3) (SeqType T@@28))) (=> (and (and (and (not (= s0@@3 (|Seq#Empty| T@@28))) (not (= s1@@3 (|Seq#Empty| T@@28)))) (<= 0 n@@11)) (< n@@11 (|Seq#Length| s0@@3))) (= (|Seq#Index| (|Seq#Append| s0@@3 s1@@3) n@@11) (|Seq#Index| s0@@3 n@@11)))))
 :qid |stdinbpl.243:18|
 :skolemid |31|
 :pattern ( (|Seq#Index| (|Seq#Append| s0@@3 s1@@3) n@@11))
 :pattern ( (|Seq#Index| s0@@3 n@@11) (|Seq#Append| s0@@3 s1@@3))
)))
(assert (forall ((Heap@@34 T@U) (Mask@@23 T@U) (this@@35 T@U) (end@@16 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@34) (MapType0Type RefType)) (= (type Mask@@23) (MapType1Type RefType realType))) (= (type this@@35) RefType)) (= (type end@@16) RefType)) (and (state Heap@@34 Mask@@23) (or (< AssumeFunctionsAbove 4) (|contentNodes#trigger| (MapType0Select Heap@@34 null (lseg this@@35 end@@16)) this@@35 end@@16)))) (= this@@35 end@@16)) (|Seq#Equal| (|contentNodes'| Heap@@34 this@@35 end@@16) (|Seq#Empty| intType)))
 :qid |stdinbpl.631:15|
 :skolemid |69|
 :pattern ( (state Heap@@34 Mask@@23) (|contentNodes'| Heap@@34 this@@35 end@@16))
)))
(assert (forall ((Heap@@35 T@U) (o@@0 T@U) (f_3 T@U) (v@@2 T@U) ) (! (let ((B@@8 (type v@@2)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@35) (MapType0Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@35 (MapType0Store Heap@@35 o@@0 f_3 v@@2)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType0Store Heap@@35 o@@0 f_3 v@@2))
)))
(assert (forall ((s0@@4 T@U) (s1@@4 T@U) (m@@7 Int) ) (! (let ((T@@29 (SeqTypeInv0 (type s0@@4))))
 (=> (and (= (type s0@@4) (SeqType T@@29)) (= (type s1@@4) (SeqType T@@29))) (=> (and (and (and (not (= s0@@4 (|Seq#Empty| T@@29))) (not (= s1@@4 (|Seq#Empty| T@@29)))) (<= 0 m@@7)) (< m@@7 (|Seq#Length| s1@@4))) (and (= (|Seq#Sub| (|Seq#Add| m@@7 (|Seq#Length| s0@@4)) (|Seq#Length| s0@@4)) m@@7) (= (|Seq#Index| (|Seq#Append| s0@@4 s1@@4) (|Seq#Add| m@@7 (|Seq#Length| s0@@4))) (|Seq#Index| s1@@4 m@@7))))))
 :qid |stdinbpl.248:18|
 :skolemid |33|
 :pattern ( (|Seq#Index| s1@@4 m@@7) (|Seq#Append| s0@@4 s1@@4))
)))
(assert (= (type ZeroPMask) (MapType1Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType1Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType1Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((s@@14 T@U) (x@@10 T@U) (i@@7 Int) ) (! (let ((T@@30 (type x@@10)))
 (=> (= (type s@@14) (SeqType T@@30)) (=> (and (and (<= 0 i@@7) (< i@@7 (|Seq#Length| s@@14))) (= (|Seq#Index| s@@14 i@@7) x@@10)) (|Seq#Contains| s@@14 x@@10))))
 :qid |stdinbpl.399:18|
 :skolemid |48|
 :pattern ( (|Seq#Contains| s@@14 x@@10) (|Seq#Index| s@@14 i@@7))
)))
(assert (forall ((s0@@5 T@U) (s1@@5 T@U) ) (! (let ((T@@31 (SeqTypeInv0 (type s0@@5))))
 (=> (and (= (type s0@@5) (SeqType T@@31)) (= (type s1@@5) (SeqType T@@31))) (or (or (and (= s0@@5 s1@@5) (|Seq#Equal| s0@@5 s1@@5)) (and (and (not (= s0@@5 s1@@5)) (not (|Seq#Equal| s0@@5 s1@@5))) (not (= (|Seq#Length| s0@@5) (|Seq#Length| s1@@5))))) (and (and (and (and (and (and (not (= s0@@5 s1@@5)) (not (|Seq#Equal| s0@@5 s1@@5))) (= (|Seq#Length| s0@@5) (|Seq#Length| s1@@5))) (= (|Seq#SkolemDiff| s0@@5 s1@@5) (|Seq#SkolemDiff| s1@@5 s0@@5))) (<= 0 (|Seq#SkolemDiff| s0@@5 s1@@5))) (< (|Seq#SkolemDiff| s0@@5 s1@@5) (|Seq#Length| s0@@5))) (not (= (|Seq#Index| s0@@5 (|Seq#SkolemDiff| s0@@5 s1@@5)) (|Seq#Index| s1@@5 (|Seq#SkolemDiff| s0@@5 s1@@5))))))))
 :qid |stdinbpl.503:18|
 :skolemid |52|
 :pattern ( (|Seq#Equal| s0@@5 s1@@5))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.172:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (forall ((arg1@@27 T@U) (arg2@@9 T@U) (arg3@@3 Real) (arg4@@1 T@U) (arg5@@1 T@U) (arg6@@1 Int) (arg7@@1 Int) (arg8@@1 T@U) (arg9@@1 T@U) (arg10@@1 Real) (arg11@@1 T@U) (arg12@@1 T@U) (arg13@@1 T@U) (arg14@@1 T@U) (arg15@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type arg1@@27) RefType) (= (type arg2@@9) RefType)) (= (type arg4@@1) RefType)) (= (type arg5@@1) RefType)) (= (type arg8@@1) RefType)) (= (type arg9@@1) RefType)) (= (type arg11@@1) RefType)) (= (type arg12@@1) RefType)) (= (type arg13@@1) (SeqType intType))) (= (type arg14@@1) RefType)) (= (type arg15@@0) RefType)) (IsWandField (wand arg1@@27 arg2@@9 arg3@@3 arg4@@1 arg5@@1 arg6@@1 arg7@@1 arg8@@1 arg9@@1 arg10@@1 arg11@@1 arg12@@1 arg13@@1 arg14@@1 arg15@@0)))
 :qid |stdinbpl.552:15|
 :skolemid |58|
 :pattern ( (wand arg1@@27 arg2@@9 arg3@@3 arg4@@1 arg5@@1 arg6@@1 arg7@@1 arg8@@1 arg9@@1 arg10@@1 arg11@@1 arg12@@1 arg13@@1 arg14@@1 arg15@@0))
)))
(assert (forall ((arg0@@48 T@U) (arg1@@28 T@U) (arg2@@10 Real) (arg3@@4 T@U) (arg4@@2 T@U) (arg5@@2 Int) (arg6@@2 Int) (arg7@@2 T@U) (arg8@@2 T@U) (arg9@@2 Real) (arg10@@2 T@U) (arg11@@2 T@U) (arg12@@2 T@U) (arg13@@2 T@U) (arg14@@2 T@U) ) (! (= (type (|wand#ft| arg0@@48 arg1@@28 arg2@@10 arg3@@4 arg4@@2 arg5@@2 arg6@@2 arg7@@2 arg8@@2 arg9@@2 arg10@@2 arg11@@2 arg12@@2 arg13@@2 arg14@@2)) (FieldType WandType_wandType FrameTypeType))
 :qid |funType:wand#ft|
 :pattern ( (|wand#ft| arg0@@48 arg1@@28 arg2@@10 arg3@@4 arg4@@2 arg5@@2 arg6@@2 arg7@@2 arg8@@2 arg9@@2 arg10@@2 arg11@@2 arg12@@2 arg13@@2 arg14@@2))
)))
(assert (forall ((arg1@@29 T@U) (arg2@@11 T@U) (arg3@@5 Real) (arg4@@3 T@U) (arg5@@3 T@U) (arg6@@3 Int) (arg7@@3 Int) (arg8@@3 T@U) (arg9@@3 T@U) (arg10@@3 Real) (arg11@@3 T@U) (arg12@@3 T@U) (arg13@@3 T@U) (arg14@@3 T@U) (arg15@@1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type arg1@@29) RefType) (= (type arg2@@11) RefType)) (= (type arg4@@3) RefType)) (= (type arg5@@3) RefType)) (= (type arg8@@3) RefType)) (= (type arg9@@3) RefType)) (= (type arg11@@3) RefType)) (= (type arg12@@3) RefType)) (= (type arg13@@3) (SeqType intType))) (= (type arg14@@3) RefType)) (= (type arg15@@1) RefType)) (IsWandField (|wand#ft| arg1@@29 arg2@@11 arg3@@5 arg4@@3 arg5@@3 arg6@@3 arg7@@3 arg8@@3 arg9@@3 arg10@@3 arg11@@3 arg12@@3 arg13@@3 arg14@@3 arg15@@1)))
 :qid |stdinbpl.556:15|
 :skolemid |59|
 :pattern ( (|wand#ft| arg1@@29 arg2@@11 arg3@@5 arg4@@3 arg5@@3 arg6@@3 arg7@@3 arg8@@3 arg9@@3 arg10@@3 arg11@@3 arg12@@3 arg13@@3 arg14@@3 arg15@@1))
)))
(assert (forall ((arg1@@30 T@U) (arg2@@12 T@U) (arg3@@6 Real) (arg4@@4 T@U) (arg5@@4 T@U) (arg6@@4 Int) (arg7@@4 Int) (arg8@@4 T@U) (arg9@@4 T@U) (arg10@@4 Real) (arg11@@4 T@U) (arg12@@4 T@U) (arg13@@4 T@U) (arg14@@4 T@U) (arg15@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type arg1@@30) RefType) (= (type arg2@@12) RefType)) (= (type arg4@@4) RefType)) (= (type arg5@@4) RefType)) (= (type arg8@@4) RefType)) (= (type arg9@@4) RefType)) (= (type arg11@@4) RefType)) (= (type arg12@@4) RefType)) (= (type arg13@@4) (SeqType intType))) (= (type arg14@@4) RefType)) (= (type arg15@@2) RefType)) (not (IsPredicateField (wand arg1@@30 arg2@@12 arg3@@6 arg4@@4 arg5@@4 arg6@@4 arg7@@4 arg8@@4 arg9@@4 arg10@@4 arg11@@4 arg12@@4 arg13@@4 arg14@@4 arg15@@2))))
 :qid |stdinbpl.560:15|
 :skolemid |60|
 :pattern ( (wand arg1@@30 arg2@@12 arg3@@6 arg4@@4 arg5@@4 arg6@@4 arg7@@4 arg8@@4 arg9@@4 arg10@@4 arg11@@4 arg12@@4 arg13@@4 arg14@@4 arg15@@2))
)))
(assert (forall ((arg1@@31 T@U) (arg2@@13 T@U) (arg3@@7 Real) (arg4@@5 T@U) (arg5@@5 T@U) (arg6@@5 Int) (arg7@@5 Int) (arg8@@5 T@U) (arg9@@5 T@U) (arg10@@5 Real) (arg11@@5 T@U) (arg12@@5 T@U) (arg13@@5 T@U) (arg14@@5 T@U) (arg15@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type arg1@@31) RefType) (= (type arg2@@13) RefType)) (= (type arg4@@5) RefType)) (= (type arg5@@5) RefType)) (= (type arg8@@5) RefType)) (= (type arg9@@5) RefType)) (= (type arg11@@5) RefType)) (= (type arg12@@5) RefType)) (= (type arg13@@5) (SeqType intType))) (= (type arg14@@5) RefType)) (= (type arg15@@3) RefType)) (not (IsPredicateField (|wand#ft| arg1@@31 arg2@@13 arg3@@7 arg4@@5 arg5@@5 arg6@@5 arg7@@5 arg8@@5 arg9@@5 arg10@@5 arg11@@5 arg12@@5 arg13@@5 arg14@@5 arg15@@3))))
 :qid |stdinbpl.564:15|
 :skolemid |61|
 :pattern ( (|wand#ft| arg1@@31 arg2@@13 arg3@@7 arg4@@5 arg5@@5 arg6@@5 arg7@@5 arg8@@5 arg9@@5 arg10@@5 arg11@@5 arg12@@5 arg13@@5 arg14@@5 arg15@@3))
)))
(assert (forall ((Heap@@36 T@U) (Mask@@24 T@U) (this@@36 T@U) ) (!  (=> (and (and (and (= (type Heap@@36) (MapType0Type RefType)) (= (type Mask@@24) (MapType1Type RefType realType))) (= (type this@@36) RefType)) (and (state Heap@@36 Mask@@24) (< AssumeFunctionsAbove 1))) (= (length Heap@@36 this@@36) (lengthNodes Heap@@36 (MapType0Select Heap@@36 this@@36 head) null)))
 :qid |stdinbpl.1391:15|
 :skolemid |100|
 :pattern ( (state Heap@@36 Mask@@24) (length Heap@@36 this@@36))
 :pattern ( (state Heap@@36 Mask@@24) (|length#triggerStateless| this@@36) (|List#trigger| Heap@@36 (List this@@36)))
)))
(assert (forall ((Heap@@37 T@U) (Mask@@25 T@U) (this@@37 T@U) ) (!  (=> (and (and (and (= (type Heap@@37) (MapType0Type RefType)) (= (type Mask@@25) (MapType1Type RefType realType))) (= (type this@@37) RefType)) (and (state Heap@@37 Mask@@25) (< AssumeFunctionsAbove 2))) (= (content Heap@@37 this@@37) (contentNodes Heap@@37 (MapType0Select Heap@@37 this@@37 head) null)))
 :qid |stdinbpl.1229:15|
 :skolemid |92|
 :pattern ( (state Heap@@37 Mask@@25) (content Heap@@37 this@@37))
 :pattern ( (state Heap@@37 Mask@@25) (|content#triggerStateless| this@@37) (|List#trigger| Heap@@37 (List this@@37)))
)))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@32 (SeqTypeInv0 (type s@@15))))
 (=> (and (= (type s@@15) (SeqType T@@32)) (= (|Seq#Length| s@@15) 0)) (= s@@15 (|Seq#Empty| T@@32))))
 :qid |stdinbpl.207:18|
 :skolemid |24|
 :pattern ( (|Seq#Length| s@@15))
)))
(assert (forall ((s@@16 T@U) (n@@12 Int) ) (! (let ((T@@33 (SeqTypeInv0 (type s@@16))))
 (=> (and (= (type s@@16) (SeqType T@@33)) (<= n@@12 0)) (= (|Seq#Take| s@@16 n@@12) (|Seq#Empty| T@@33))))
 :qid |stdinbpl.382:18|
 :skolemid |46|
 :pattern ( (|Seq#Take| s@@16 n@@12))
)))
(assert (forall ((arg0@@49 T@U) (arg1@@32 T@U) (arg2@@14 Real) (arg3@@8 T@U) (arg4@@6 T@U) (arg5@@6 Int) (arg6@@6 Int) (arg7@@6 T@U) (arg8@@6 T@U) (arg9@@6 Real) (arg10@@6 T@U) (arg11@@6 T@U) (arg12@@6 T@U) (arg13@@6 T@U) (arg14@@6 T@U) ) (! (= (type (|wand#sm| arg0@@49 arg1@@32 arg2@@14 arg3@@8 arg4@@6 arg5@@6 arg6@@6 arg7@@6 arg8@@6 arg9@@6 arg10@@6 arg11@@6 arg12@@6 arg13@@6 arg14@@6)) (FieldType WandType_wandType (MapType1Type RefType boolType)))
 :qid |funType:wand#sm|
 :pattern ( (|wand#sm| arg0@@49 arg1@@32 arg2@@14 arg3@@8 arg4@@6 arg5@@6 arg6@@6 arg7@@6 arg8@@6 arg9@@6 arg10@@6 arg11@@6 arg12@@6 arg13@@6 arg14@@6))
)))
(assert (forall ((arg1@@33 T@U) (arg2@@15 T@U) (arg3@@9 Real) (arg4@@7 T@U) (arg5@@7 T@U) (arg6@@7 Int) (arg7@@7 Int) (arg8@@7 T@U) (arg9@@7 T@U) (arg10@@7 Real) (arg11@@7 T@U) (arg12@@7 T@U) (arg13@@7 T@U) (arg14@@7 T@U) (arg15@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type arg1@@33) RefType) (= (type arg2@@15) RefType)) (= (type arg4@@7) RefType)) (= (type arg5@@7) RefType)) (= (type arg8@@7) RefType)) (= (type arg9@@7) RefType)) (= (type arg11@@7) RefType)) (= (type arg12@@7) RefType)) (= (type arg13@@7) (SeqType intType))) (= (type arg14@@7) RefType)) (= (type arg15@@4) RefType)) (= (|wand#sm| arg1@@33 arg2@@15 arg3@@9 arg4@@7 arg5@@7 arg6@@7 arg7@@7 arg8@@7 arg9@@7 arg10@@7 arg11@@7 arg12@@7 arg13@@7 arg14@@7 arg15@@4) (WandMaskField (|wand#ft| arg1@@33 arg2@@15 arg3@@9 arg4@@7 arg5@@7 arg6@@7 arg7@@7 arg8@@7 arg9@@7 arg10@@7 arg11@@7 arg12@@7 arg13@@7 arg14@@7 arg15@@4))))
 :qid |stdinbpl.568:15|
 :skolemid |62|
 :pattern ( (WandMaskField (|wand#ft| arg1@@33 arg2@@15 arg3@@9 arg4@@7 arg5@@7 arg6@@7 arg7@@7 arg8@@7 arg9@@7 arg10@@7 arg11@@7 arg12@@7 arg13@@7 arg14@@7 arg15@@4)))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(assert (forall ((arg1@@34 T@U) (arg2@@16 T@U) (arg3@@10 Real) (arg4@@8 T@U) (arg5@@8 T@U) (arg6@@8 Int) (arg7@@8 Int) (arg8@@8 T@U) (arg9@@8 T@U) (arg10@@8 Real) (arg11@@8 T@U) (arg12@@8 T@U) (arg13@@8 T@U) (arg14@@8 T@U) (arg15@@5 T@U) (arg1_2 T@U) (arg2_2 T@U) (arg3_2 Real) (arg4_2 T@U) (arg5_2 T@U) (arg6_2 Int) (arg7_2 Int) (arg8_2 T@U) (arg9_2 T@U) (arg10_2 Real) (arg11_2 T@U) (arg12_2 T@U) (arg13_2 T@U) (arg14_2 T@U) (arg15_2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type arg1@@34) RefType) (= (type arg2@@16) RefType)) (= (type arg4@@8) RefType)) (= (type arg5@@8) RefType)) (= (type arg8@@8) RefType)) (= (type arg9@@8) RefType)) (= (type arg11@@8) RefType)) (= (type arg12@@8) RefType)) (= (type arg13@@8) (SeqType intType))) (= (type arg14@@8) RefType)) (= (type arg15@@5) RefType)) (= (type arg1_2) RefType)) (= (type arg2_2) RefType)) (= (type arg4_2) RefType)) (= (type arg5_2) RefType)) (= (type arg8_2) RefType)) (= (type arg9_2) RefType)) (= (type arg11_2) RefType)) (= (type arg12_2) RefType)) (= (type arg13_2) (SeqType intType))) (= (type arg14_2) RefType)) (= (type arg15_2) RefType)) (= (wand arg1@@34 arg2@@16 arg3@@10 arg4@@8 arg5@@8 arg6@@8 arg7@@8 arg8@@8 arg9@@8 arg10@@8 arg11@@8 arg12@@8 arg13@@8 arg14@@8 arg15@@5) (wand arg1_2 arg2_2 arg3_2 arg4_2 arg5_2 arg6_2 arg7_2 arg8_2 arg9_2 arg10_2 arg11_2 arg12_2 arg13_2 arg14_2 arg15_2))) (and (= arg1@@34 arg1_2) (and (= arg2@@16 arg2_2) (and (= arg3@@10 arg3_2) (and (= arg4@@8 arg4_2) (and (= arg5@@8 arg5_2) (and (= arg6@@8 arg6_2) (and (= arg7@@8 arg7_2) (and (= arg8@@8 arg8_2) (and (= arg9@@8 arg9_2) (and (= arg10@@8 arg10_2) (and (= arg11@@8 arg11_2) (and (= arg12@@8 arg12_2) (and (= arg13@@8 arg13_2) (and (= arg14@@8 arg14_2) (= arg15@@5 arg15_2))))))))))))))))
 :qid |stdinbpl.576:15|
 :skolemid |64|
 :pattern ( (wand arg1@@34 arg2@@16 arg3@@10 arg4@@8 arg5@@8 arg6@@8 arg7@@8 arg8@@8 arg9@@8 arg10@@8 arg11@@8 arg12@@8 arg13@@8 arg14@@8 arg15@@5) (wand arg1_2 arg2_2 arg3_2 arg4_2 arg5_2 arg6_2 arg7_2 arg8_2 arg9_2 arg10_2 arg11_2 arg12_2 arg13_2 arg14_2 arg15_2))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun Mask@0 () T@U)
(declare-fun this@@38 () T@U)
(declare-fun PostMask@0 () T@U)
(declare-fun index () Int)
(declare-fun Heap@@38 () T@U)
(declare-fun PostHeap@0 () T@U)
(declare-fun Ops_1Mask@5 () T@U)
(declare-fun hd@0 () T@U)
(declare-fun ResultMask@@0 () T@U)
(declare-fun Mask@29 () T@U)
(declare-fun ExhaleHeap@1 () T@U)
(declare-fun ptr@0 () T@U)
(declare-fun WandDefLHSMask@4 () T@U)
(declare-fun WandDefRHSMask@4 () T@U)
(declare-fun index@1 () Int)
(declare-fun WandDefLHSHeap@2 () T@U)
(declare-fun WandDefRHSHeap@2 () T@U)
(declare-fun Heap@139 () T@U)
(declare-fun Heap@138 () T@U)
(declare-fun Heap@134 () T@U)
(declare-fun Heap@135 () T@U)
(declare-fun Heap@136 () T@U)
(declare-fun newPMask@48 () T@U)
(declare-fun Heap@137 () T@U)
(declare-fun Heap@131 () T@U)
(declare-fun Heap@132 () T@U)
(declare-fun newPMask@47 () T@U)
(declare-fun Heap@133 () T@U)
(declare-fun UnfoldingHeap@59 () T@U)
(declare-fun UnfoldingMask@59 () T@U)
(declare-fun UnfoldingHeap@58 () T@U)
(declare-fun UnfoldingMask@58 () T@U)
(declare-fun UnfoldingHeap@55 () T@U)
(declare-fun UnfoldingHeap@56 () T@U)
(declare-fun newPMask@46 () T@U)
(declare-fun UnfoldingHeap@57 () T@U)
(declare-fun Unfolding1Heap@34 () T@U)
(declare-fun Unfolding1Mask@34 () T@U)
(declare-fun Unfolding1Heap@33 () T@U)
(declare-fun Unfolding1Mask@33 () T@U)
(declare-fun Unfolding1Heap@30 () T@U)
(declare-fun Unfolding1Heap@31 () T@U)
(declare-fun newPMask@45 () T@U)
(declare-fun Unfolding1Heap@32 () T@U)
(declare-fun Unfolding1Mask@31 () T@U)
(declare-fun Unfolding1Mask@30 () T@U)
(declare-fun Unfolding1Mask@32 () T@U)
(declare-fun UnfoldingMask@56 () T@U)
(declare-fun UnfoldingMask@55 () T@U)
(declare-fun UnfoldingMask@57 () T@U)
(declare-fun FrameFragment (T@U) T@U)
(declare-fun CombineFrames (T@U T@U) T@U)
(declare-fun elem () Int)
(declare-fun Mask@27 () T@U)
(declare-fun Mask@26 () T@U)
(declare-fun Mask@28 () T@U)
(declare-fun WandDefLHSMask@0 () T@U)
(declare-fun WandDefRHSMask@2 () T@U)
(declare-fun WandDefLHSHeap@0 () T@U)
(declare-fun WandDefRHSHeap@1 () T@U)
(declare-fun WandDefLHSMask@1 () T@U)
(declare-fun WandDefRHSMask@0 () T@U)
(declare-fun index@2 () Int)
(declare-fun WandDefLHSHeap@1 () T@U)
(declare-fun WandDefRHSHeap@0 () T@U)
(declare-fun Result_6Mask () T@U)
(declare-fun Ops_3Mask@5 () T@U)
(declare-fun ptr@1 () T@U)
(declare-fun Result_7Mask () T@U)
(declare-fun Heap@126 () T@U)
(declare-fun Heap@130 () T@U)
(declare-fun Heap@127 () T@U)
(declare-fun Heap@128 () T@U)
(declare-fun newPMask@44 () T@U)
(declare-fun Heap@129 () T@U)
(declare-fun Mask@79 () T@U)
(declare-fun Mask@80 () T@U)
(declare-fun Mask@78 () T@U)
(declare-fun Mask@77 () T@U)
(declare-fun Mask@76 () T@U)
(declare-fun Heap@125 () T@U)
(declare-fun Heap@121 () T@U)
(declare-fun Heap@122 () T@U)
(declare-fun Heap@123 () T@U)
(declare-fun newPMask@43 () T@U)
(declare-fun Heap@124 () T@U)
(declare-fun Heap@117 () T@U)
(declare-fun Heap@118 () T@U)
(declare-fun Heap@119 () T@U)
(declare-fun newPMask@42 () T@U)
(declare-fun Heap@120 () T@U)
(declare-fun UnfoldingHeap@54 () T@U)
(declare-fun UnfoldingMask@54 () T@U)
(declare-fun UnfoldingHeap@53 () T@U)
(declare-fun UnfoldingMask@53 () T@U)
(declare-fun UnfoldingHeap@50 () T@U)
(declare-fun UnfoldingHeap@51 () T@U)
(declare-fun newPMask@41 () T@U)
(declare-fun UnfoldingHeap@52 () T@U)
(declare-fun Unfolding1Heap@29 () T@U)
(declare-fun Unfolding1Mask@29 () T@U)
(declare-fun Unfolding1Heap@28 () T@U)
(declare-fun Unfolding1Mask@28 () T@U)
(declare-fun Unfolding1Heap@25 () T@U)
(declare-fun Unfolding1Heap@26 () T@U)
(declare-fun newPMask@40 () T@U)
(declare-fun Unfolding1Heap@27 () T@U)
(declare-fun Unfolding1Mask@26 () T@U)
(declare-fun Unfolding1Mask@25 () T@U)
(declare-fun Unfolding1Mask@27 () T@U)
(declare-fun UnfoldingMask@51 () T@U)
(declare-fun UnfoldingMask@50 () T@U)
(declare-fun UnfoldingMask@52 () T@U)
(declare-fun b_5@46 () Bool)
(declare-fun b_15@6 () Bool)
(declare-fun Result_7Heap () T@U)
(declare-fun Ops_3Heap@3 () T@U)
(declare-fun Mask@75 () T@U)
(declare-fun b_5@45 () Bool)
(declare-fun neededTransfer@27 () Real)
(declare-fun Used_6Mask@3 () T@U)
(declare-fun initNeededTransfer@6 () Real)
(declare-fun b_16@0 () Bool)
(declare-fun b_16@1 () Bool)
(declare-fun b_16@2 () Bool)
(declare-fun Ops_3Mask@22 () T@U)
(declare-fun b_16@3 () Bool)
(declare-fun Ops_3Heap@12 () T@U)
(declare-fun Used_6Heap@0 () T@U)
(declare-fun b_16@4 () Bool)
(declare-fun takeTransfer@13 () Real)
(declare-fun Heap@115 () T@U)
(declare-fun neededTransfer@25 () Real)
(declare-fun Mask@73 () T@U)
(declare-fun b_15@3 () Bool)
(declare-fun Used_6Mask@1 () T@U)
(declare-fun neededTransfer@26 () Real)
(declare-fun Used_6Mask@2 () T@U)
(declare-fun b_15@4 () Bool)
(declare-fun TempMask@7 () T@U)
(declare-fun b_15@5 () Bool)
(declare-fun Mask@74 () T@U)
(declare-fun newPMask@39 () T@U)
(declare-fun Heap@116 () T@U)
(declare-fun maskTransfer@13 () Real)
(declare-fun takeTransfer@12 () Real)
(declare-fun Ops_3Mask@20 () T@U)
(declare-fun b_15@0 () Bool)
(declare-fun neededTransfer@24 () Real)
(declare-fun Used_6Mask@0 () T@U)
(declare-fun b_15@1 () Bool)
(declare-fun TempMask@6 () T@U)
(declare-fun b_15@2 () Bool)
(declare-fun Ops_3Mask@21 () T@U)
(declare-fun maskTransfer@12 () Real)
(declare-fun b_15 () Bool)
(declare-fun b_5@35 () Bool)
(declare-fun b_13@6 () Bool)
(declare-fun Result_6Heap () T@U)
(declare-fun b_5@36 () Bool)
(declare-fun b_5@37 () Bool)
(declare-fun Used_5Heap@0 () T@U)
(declare-fun Ops_3Heap@11 () T@U)
(declare-fun b_5@38 () Bool)
(declare-fun Ops_3Mask@18 () T@U)
(declare-fun Ops_3Mask@19 () T@U)
(declare-fun b_5@39 () Bool)
(declare-fun b_5@40 () Bool)
(declare-fun b_5@41 () Bool)
(declare-fun Labellhs7Heap () T@U)
(declare-fun b_5@42 () Bool)
(declare-fun ExhaleHeap@4 () T@U)
(declare-fun b_5@43 () Bool)
(declare-fun b_5@44 () Bool)
(declare-fun Mask@72 () T@U)
(declare-fun Heap@114 () T@U)
(declare-fun b_5@32 () Bool)
(declare-fun neededTransfer@23 () Real)
(declare-fun Used_5Mask@3 () T@U)
(declare-fun initNeededTransfer@5 () Real)
(declare-fun b_14@0 () Bool)
(declare-fun b_14@1 () Bool)
(declare-fun b_14@2 () Bool)
(declare-fun b_14@3 () Bool)
(declare-fun b_14@4 () Bool)
(declare-fun b_5@33 () Bool)
(declare-fun b_5@34 () Bool)
(declare-fun takeTransfer@11 () Real)
(declare-fun Heap@112 () T@U)
(declare-fun Mask@70 () T@U)
(declare-fun b_13@3 () Bool)
(declare-fun Used_5Mask@1 () T@U)
(declare-fun neededTransfer@21 () Real)
(declare-fun neededTransfer@22 () Real)
(declare-fun Used_5Mask@2 () T@U)
(declare-fun b_13@4 () Bool)
(declare-fun TempMask@5 () T@U)
(declare-fun b_13@5 () Bool)
(declare-fun Mask@71 () T@U)
(declare-fun newPMask@38 () T@U)
(declare-fun Heap@113 () T@U)
(declare-fun maskTransfer@11 () Real)
(declare-fun takeTransfer@10 () Real)
(declare-fun Ops_3Mask@16 () T@U)
(declare-fun b_13@0 () Bool)
(declare-fun neededTransfer@20 () Real)
(declare-fun Used_5Mask@0 () T@U)
(declare-fun b_13@1 () Bool)
(declare-fun TempMask@4 () T@U)
(declare-fun b_13@2 () Bool)
(declare-fun Ops_3Mask@17 () T@U)
(declare-fun maskTransfer@10 () Real)
(declare-fun b_5@28 () Bool)
(declare-fun b_11@4 () Bool)
(declare-fun neededTransfer@19 () Real)
(declare-fun Used_4Mask@3 () T@U)
(declare-fun initNeededTransfer@4 () Real)
(declare-fun b_12@0 () Bool)
(declare-fun b_12@1 () Bool)
(declare-fun Result_5Heap () T@U)
(declare-fun Result_5Mask () T@U)
(declare-fun b_12@2 () Bool)
(declare-fun b_12@3 () Bool)
(declare-fun Used_4Heap@0 () T@U)
(declare-fun b_12@4 () Bool)
(declare-fun b_5@29 () Bool)
(declare-fun b_5@30 () Bool)
(declare-fun b_5@31 () Bool)
(declare-fun b_13 () Bool)
(declare-fun takeTransfer@9 () Real)
(declare-fun neededTransfer@17 () Real)
(declare-fun Mask@68 () T@U)
(declare-fun b_11@2 () Bool)
(declare-fun Used_4Mask@1 () T@U)
(declare-fun neededTransfer@18 () Real)
(declare-fun Used_4Mask@2 () T@U)
(declare-fun b_11@3 () Bool)
(declare-fun Mask@69 () T@U)
(declare-fun maskTransfer@9 () Real)
(declare-fun takeTransfer@8 () Real)
(declare-fun Ops_3Mask@14 () T@U)
(declare-fun b_11@0 () Bool)
(declare-fun neededTransfer@16 () Real)
(declare-fun Used_4Mask@0 () T@U)
(declare-fun b_11@1 () Bool)
(declare-fun Ops_3Mask@15 () T@U)
(declare-fun maskTransfer@8 () Real)
(declare-fun b_11 () Bool)
(declare-fun Ops_3Heap@10 () T@U)
(declare-fun Ops_3Mask@13 () T@U)
(declare-fun b_5@27 () Bool)
(declare-fun b_5@26 () Bool)
(declare-fun Heap@111 () T@U)
(declare-fun Mask@67 () T@U)
(declare-fun Ops_3Heap@6 () T@U)
(declare-fun Ops_3Heap@7 () T@U)
(declare-fun Ops_3Heap@8 () T@U)
(declare-fun newPMask@37 () T@U)
(declare-fun Ops_3Heap@9 () T@U)
(declare-fun Ops_3Heap@4 () T@U)
(declare-fun Ops_3Heap@5 () T@U)
(declare-fun freshVersion@3 () T@U)
(declare-fun Used_3Heap@4 () T@U)
(declare-fun Used_3Mask@12 () T@U)
(declare-fun Ops_3Mask@12 () T@U)
(declare-fun b_5@25 () Bool)
(declare-fun b_5@24 () Bool)
(declare-fun Used_3Heap@0 () T@U)
(declare-fun Used_3Heap@1 () T@U)
(declare-fun Used_3Heap@2 () T@U)
(declare-fun newPMask@36 () T@U)
(declare-fun Used_3Heap@3 () T@U)
(declare-fun b_10@0 () Bool)
(declare-fun b_5@23 () Bool)
(declare-fun b_6@19 () Bool)
(declare-fun b_10@1 () Bool)
(declare-fun Result_4Heap () T@U)
(declare-fun Result_4Mask () T@U)
(declare-fun b_10@2 () Bool)
(declare-fun b_10@3 () Bool)
(declare-fun b_10@4 () Bool)
(declare-fun b_5@20 () Bool)
(declare-fun b_6@18 () Bool)
(declare-fun Result_3Heap@4 () T@U)
(declare-fun b_5@21 () Bool)
(declare-fun b_5@22 () Bool)
(declare-fun Ops_3Mask@11 () T@U)
(declare-fun Mask@66 () T@U)
(declare-fun Used_3Mask@11 () T@U)
(declare-fun Heap@110 () T@U)
(declare-fun Result_3Heap@3 () T@U)
(declare-fun Result_3Mask () T@U)
(declare-fun Result_3Heap () T@U)
(declare-fun Result_3Heap@0 () T@U)
(declare-fun Result_3Heap@1 () T@U)
(declare-fun newPMask@35 () T@U)
(declare-fun Result_3Heap@2 () T@U)
(declare-fun UnfoldingHeap@49 () T@U)
(declare-fun UnfoldingMask@49 () T@U)
(declare-fun UnfoldingHeap@48 () T@U)
(declare-fun UnfoldingMask@48 () T@U)
(declare-fun UnfoldingHeap@45 () T@U)
(declare-fun UnfoldingHeap@46 () T@U)
(declare-fun newPMask@34 () T@U)
(declare-fun UnfoldingHeap@47 () T@U)
(declare-fun Unfolding1Heap@24 () T@U)
(declare-fun Unfolding1Mask@24 () T@U)
(declare-fun Unfolding1Heap@23 () T@U)
(declare-fun Unfolding1Mask@23 () T@U)
(declare-fun Unfolding1Heap@20 () T@U)
(declare-fun Unfolding1Heap@21 () T@U)
(declare-fun newPMask@33 () T@U)
(declare-fun Unfolding1Heap@22 () T@U)
(declare-fun Unfolding1Mask@21 () T@U)
(declare-fun Unfolding1Mask@20 () T@U)
(declare-fun Unfolding1Mask@22 () T@U)
(declare-fun UnfoldingMask@46 () T@U)
(declare-fun UnfoldingMask@45 () T@U)
(declare-fun UnfoldingMask@47 () T@U)
(declare-fun b_5@17 () Bool)
(declare-fun neededTransfer@15 () Real)
(declare-fun arg_2@0 () T@U)
(declare-fun initNeededTransfer@3 () Real)
(declare-fun b_9@0 () Bool)
(declare-fun b_9@1 () Bool)
(declare-fun b_9@2 () Bool)
(declare-fun b_9@3 () Bool)
(declare-fun b_9@4 () Bool)
(declare-fun b_5@18 () Bool)
(declare-fun b_5@19 () Bool)
(declare-fun takeTransfer@7 () Real)
(declare-fun b_6@15 () Bool)
(declare-fun Heap@108 () T@U)
(declare-fun Used_3Mask@9 () T@U)
(declare-fun Mask@64 () T@U)
(declare-fun neededTransfer@13 () Real)
(declare-fun neededTransfer@14 () Real)
(declare-fun Used_3Mask@10 () T@U)
(declare-fun b_6@16 () Bool)
(declare-fun TempMask@3 () T@U)
(declare-fun b_6@17 () Bool)
(declare-fun Mask@65 () T@U)
(declare-fun newPMask@32 () T@U)
(declare-fun Heap@109 () T@U)
(declare-fun maskTransfer@7 () Real)
(declare-fun takeTransfer@6 () Real)
(declare-fun Used_3Mask@7 () T@U)
(declare-fun Ops_3Mask@9 () T@U)
(declare-fun b_6@12 () Bool)
(declare-fun neededTransfer@12 () Real)
(declare-fun Used_3Mask@8 () T@U)
(declare-fun b_6@13 () Bool)
(declare-fun TempMask@2 () T@U)
(declare-fun b_6@14 () Bool)
(declare-fun Ops_3Mask@10 () T@U)
(declare-fun maskTransfer@6 () Real)
(declare-fun Result_2Heap () T@U)
(declare-fun Result_2Mask () T@U)
(declare-fun b_5@14 () Bool)
(declare-fun neededTransfer@11 () Real)
(declare-fun initNeededTransfer@2 () Real)
(declare-fun b_8@0 () Bool)
(declare-fun b_8@1 () Bool)
(declare-fun b_8@2 () Bool)
(declare-fun b_8@3 () Bool)
(declare-fun b_8@4 () Bool)
(declare-fun b_5@15 () Bool)
(declare-fun b_5@16 () Bool)
(declare-fun takeTransfer@5 () Real)
(declare-fun b_6@9 () Bool)
(declare-fun Mask@62 () T@U)
(declare-fun Heap@106 () T@U)
(declare-fun Used_3Mask@5 () T@U)
(declare-fun neededTransfer@9 () Real)
(declare-fun neededTransfer@10 () Real)
(declare-fun Used_3Mask@6 () T@U)
(declare-fun b_6@10 () Bool)
(declare-fun b_6@11 () Bool)
(declare-fun Mask@63 () T@U)
(declare-fun Heap@107 () T@U)
(declare-fun maskTransfer@5 () Real)
(declare-fun takeTransfer@4 () Real)
(declare-fun Used_3Mask@3 () T@U)
(declare-fun Ops_3Mask@7 () T@U)
(declare-fun b_6@6 () Bool)
(declare-fun neededTransfer@8 () Real)
(declare-fun Used_3Mask@4 () T@U)
(declare-fun b_6@7 () Bool)
(declare-fun b_6@8 () Bool)
(declare-fun Ops_3Mask@8 () T@U)
(declare-fun maskTransfer@4 () Real)
(declare-fun b_5@11 () Bool)
(declare-fun neededTransfer@7 () Real)
(declare-fun initNeededTransfer@1 () Real)
(declare-fun b_7@0 () Bool)
(declare-fun b_7@1 () Bool)
(declare-fun Result_1Heap () T@U)
(declare-fun Result_1Mask () T@U)
(declare-fun b_7@2 () Bool)
(declare-fun b_7@3 () Bool)
(declare-fun b_7@4 () Bool)
(declare-fun b_5@12 () Bool)
(declare-fun b_5@13 () Bool)
(declare-fun takeTransfer@3 () Real)
(declare-fun b_6@3 () Bool)
(declare-fun Used_3Mask@1 () T@U)
(declare-fun Heap@104 () T@U)
(declare-fun Mask@60 () T@U)
(declare-fun neededTransfer@5 () Real)
(declare-fun neededTransfer@6 () Real)
(declare-fun Used_3Mask@2 () T@U)
(declare-fun b_6@4 () Bool)
(declare-fun b_6@5 () Bool)
(declare-fun Mask@61 () T@U)
(declare-fun Heap@105 () T@U)
(declare-fun maskTransfer@3 () Real)
(declare-fun takeTransfer@2 () Real)
(declare-fun b_6@0 () Bool)
(declare-fun neededTransfer@4 () Real)
(declare-fun Used_3Mask@0 () T@U)
(declare-fun b_6@1 () Bool)
(declare-fun b_6@2 () Bool)
(declare-fun Ops_3Mask@6 () T@U)
(declare-fun maskTransfer@2 () Real)
(declare-fun b_6 () Bool)
(declare-fun b_5@10 () Bool)
(declare-fun b_5@9 () Bool)
(declare-fun b_5@8 () Bool)
(declare-fun b_5@7 () Bool)
(declare-fun Ops_3Heap@2 () T@U)
(declare-fun Ops_3Mask@4 () T@U)
(declare-fun Ops_3Mask@3 () T@U)
(declare-fun Ops_3Heap@1 () T@U)
(declare-fun b_5@6 () Bool)
(declare-fun b_5@5 () Bool)
(declare-fun Ops_3Mask@2 () T@U)
(declare-fun Ops_3Mask@1 () T@U)
(declare-fun b_5@4 () Bool)
(declare-fun b_5@3 () Bool)
(declare-fun Ops_3Heap@0 () T@U)
(declare-fun ExhaleHeap@3 () T@U)
(declare-fun b_5@2 () Bool)
(declare-fun b_5@0 () Bool)
(declare-fun Ops_3Mask@0 () T@U)
(declare-fun b_5@1 () Bool)
(declare-fun b_5 () Bool)
(declare-fun b_4@0 () Bool)
(declare-fun b_4 () Bool)
(declare-fun Used_2Heap@0 () T@U)
(declare-fun Heap@103 () T@U)
(declare-fun Mask@59 () T@U)
(declare-fun Heap@99 () T@U)
(declare-fun Heap@100 () T@U)
(declare-fun Heap@101 () T@U)
(declare-fun newPMask@31 () T@U)
(declare-fun Heap@102 () T@U)
(declare-fun UnfoldingHeap@44 () T@U)
(declare-fun UnfoldingMask@44 () T@U)
(declare-fun UnfoldingHeap@43 () T@U)
(declare-fun UnfoldingMask@43 () T@U)
(declare-fun UnfoldingHeap@40 () T@U)
(declare-fun UnfoldingHeap@41 () T@U)
(declare-fun newPMask@30 () T@U)
(declare-fun UnfoldingHeap@42 () T@U)
(declare-fun UnfoldingMask@41 () T@U)
(declare-fun UnfoldingMask@40 () T@U)
(declare-fun UnfoldingMask@42 () T@U)
(declare-fun Mask@57 () T@U)
(declare-fun Mask@56 () T@U)
(declare-fun Mask@58 () T@U)
(declare-fun Heap@97 () T@U)
(declare-fun Heap@98 () T@U)
(declare-fun newVersion@2 () T@U)
(declare-fun Mask@55 () T@U)
(declare-fun AssertMask@0 () T@U)
(declare-fun prev () T@U)
(declare-fun Heap@96 () T@U)
(declare-fun Heap@92 () T@U)
(declare-fun Heap@93 () T@U)
(declare-fun Heap@94 () T@U)
(declare-fun newPMask@29 () T@U)
(declare-fun Heap@95 () T@U)
(declare-fun UnfoldingHeap@39 () T@U)
(declare-fun UnfoldingMask@39 () T@U)
(declare-fun UnfoldingHeap@38 () T@U)
(declare-fun UnfoldingMask@38 () T@U)
(declare-fun UnfoldingHeap@35 () T@U)
(declare-fun UnfoldingHeap@36 () T@U)
(declare-fun newPMask@28 () T@U)
(declare-fun UnfoldingHeap@37 () T@U)
(declare-fun Unfolding1Heap@19 () T@U)
(declare-fun Unfolding1Mask@19 () T@U)
(declare-fun Unfolding1Heap@18 () T@U)
(declare-fun Unfolding1Mask@18 () T@U)
(declare-fun Unfolding1Heap@15 () T@U)
(declare-fun Unfolding1Heap@16 () T@U)
(declare-fun newPMask@27 () T@U)
(declare-fun Unfolding1Heap@17 () T@U)
(declare-fun Unfolding1Mask@16 () T@U)
(declare-fun Unfolding1Mask@15 () T@U)
(declare-fun Unfolding1Mask@17 () T@U)
(declare-fun UnfoldingMask@36 () T@U)
(declare-fun UnfoldingMask@35 () T@U)
(declare-fun UnfoldingMask@37 () T@U)
(declare-fun Heap@91 () T@U)
(declare-fun Heap@87 () T@U)
(declare-fun Heap@88 () T@U)
(declare-fun Heap@89 () T@U)
(declare-fun newPMask@26 () T@U)
(declare-fun Heap@90 () T@U)
(declare-fun Heap@83 () T@U)
(declare-fun Heap@84 () T@U)
(declare-fun Heap@85 () T@U)
(declare-fun newPMask@25 () T@U)
(declare-fun Heap@86 () T@U)
(declare-fun UnfoldingHeap@34 () T@U)
(declare-fun UnfoldingMask@34 () T@U)
(declare-fun UnfoldingHeap@33 () T@U)
(declare-fun UnfoldingMask@33 () T@U)
(declare-fun UnfoldingHeap@30 () T@U)
(declare-fun UnfoldingHeap@31 () T@U)
(declare-fun newPMask@24 () T@U)
(declare-fun UnfoldingHeap@32 () T@U)
(declare-fun Unfolding1Heap@14 () T@U)
(declare-fun Unfolding1Mask@14 () T@U)
(declare-fun Unfolding1Heap@13 () T@U)
(declare-fun Unfolding1Mask@13 () T@U)
(declare-fun Unfolding1Heap@10 () T@U)
(declare-fun Unfolding1Heap@11 () T@U)
(declare-fun newPMask@23 () T@U)
(declare-fun Unfolding1Heap@12 () T@U)
(declare-fun Unfolding1Mask@11 () T@U)
(declare-fun Unfolding1Mask@10 () T@U)
(declare-fun Unfolding1Mask@12 () T@U)
(declare-fun UnfoldingMask@31 () T@U)
(declare-fun UnfoldingMask@30 () T@U)
(declare-fun UnfoldingMask@32 () T@U)
(declare-fun Mask@32 () T@U)
(declare-fun Heap@82 () T@U)
(declare-fun Heap@79 () T@U)
(declare-fun Heap@80 () T@U)
(declare-fun newPMask@22 () T@U)
(declare-fun Heap@81 () T@U)
(declare-fun Mask@30 () T@U)
(declare-fun Mask@31 () T@U)
(declare-fun Mask@97 () T@U)
(declare-fun Mask@96 () T@U)
(declare-fun index@3 () Int)
(declare-fun Heap@168 () T@U)
(declare-fun Heap@167 () T@U)
(declare-fun Heap@166 () T@U)
(declare-fun newPMask@55 () T@U)
(declare-fun Heap@163 () T@U)
(declare-fun Heap@164 () T@U)
(declare-fun Heap@165 () T@U)
(declare-fun freshVersion@6 () T@U)
(declare-fun Mask@95 () T@U)
(declare-fun Mask@94 () T@U)
(declare-fun Mask@93 () T@U)
(declare-fun Heap@161 () T@U)
(declare-fun Mask@92 () T@U)
(declare-fun Heap@162 () T@U)
(declare-fun freshObj@0 () T@U)
(declare-fun Heap@157 () T@U)
(declare-fun Heap@158 () T@U)
(declare-fun Heap@159 () T@U)
(declare-fun newPMask@54 () T@U)
(declare-fun Heap@160 () T@U)
(declare-fun Heap@154 () T@U)
(declare-fun Heap@155 () T@U)
(declare-fun Heap@156 () T@U)
(declare-fun freshVersion@5 () T@U)
(declare-fun Mask@91 () T@U)
(declare-fun Heap@150 () T@U)
(declare-fun Heap@151 () T@U)
(declare-fun Heap@152 () T@U)
(declare-fun newPMask@53 () T@U)
(declare-fun Heap@153 () T@U)
(declare-fun Mask@90 () T@U)
(declare-fun UnfoldingHeap@69 () T@U)
(declare-fun UnfoldingMask@69 () T@U)
(declare-fun UnfoldingHeap@68 () T@U)
(declare-fun UnfoldingMask@68 () T@U)
(declare-fun UnfoldingHeap@65 () T@U)
(declare-fun UnfoldingHeap@66 () T@U)
(declare-fun newPMask@52 () T@U)
(declare-fun UnfoldingHeap@67 () T@U)
(declare-fun UnfoldingMask@66 () T@U)
(declare-fun UnfoldingMask@65 () T@U)
(declare-fun UnfoldingMask@67 () T@U)
(declare-fun Mask@87 () T@U)
(declare-fun Mask@89 () T@U)
(declare-fun Mask@88 () T@U)
(declare-fun Heap@146 () T@U)
(declare-fun Heap@147 () T@U)
(declare-fun Heap@148 () T@U)
(declare-fun newPMask@51 () T@U)
(declare-fun Heap@149 () T@U)
(declare-fun Heap@143 () T@U)
(declare-fun Heap@144 () T@U)
(declare-fun Heap@145 () T@U)
(declare-fun freshVersion@4 () T@U)
(declare-fun Mask@86 () T@U)
(declare-fun Heap@12 () T@U)
(declare-fun Heap@140 () T@U)
(declare-fun Heap@141 () T@U)
(declare-fun newPMask@50 () T@U)
(declare-fun Heap@142 () T@U)
(declare-fun Mask@85 () T@U)
(declare-fun UnfoldingHeap@64 () T@U)
(declare-fun UnfoldingMask@64 () T@U)
(declare-fun UnfoldingHeap@63 () T@U)
(declare-fun UnfoldingMask@63 () T@U)
(declare-fun UnfoldingHeap@60 () T@U)
(declare-fun UnfoldingHeap@61 () T@U)
(declare-fun newPMask@49 () T@U)
(declare-fun UnfoldingHeap@62 () T@U)
(declare-fun UnfoldingMask@61 () T@U)
(declare-fun UnfoldingMask@60 () T@U)
(declare-fun UnfoldingMask@62 () T@U)
(declare-fun Mask@14 () T@U)
(declare-fun Mask@84 () T@U)
(declare-fun Mask@83 () T@U)
(declare-fun Heap@9 () T@U)
(declare-fun Heap@10 () T@U)
(declare-fun Mask@10 () T@U)
(declare-fun Mask@9 () T@U)
(declare-fun Mask@11 () T@U)
(declare-fun Mask@12 () T@U)
(declare-fun Mask@13 () T@U)
(declare-fun Heap@11 () T@U)
(declare-fun Mask@53 () T@U)
(declare-fun Mask@52 () T@U)
(declare-fun Heap@78 () T@U)
(declare-fun Mask@54 () T@U)
(declare-fun Labellhs9Heap () T@U)
(declare-fun ExhaleHeap@2 () T@U)
(declare-fun Mask@51 () T@U)
(declare-fun Heap@74 () T@U)
(declare-fun Heap@75 () T@U)
(declare-fun Heap@76 () T@U)
(declare-fun newPMask@21 () T@U)
(declare-fun Heap@77 () T@U)
(declare-fun Heap@71 () T@U)
(declare-fun Heap@72 () T@U)
(declare-fun Heap@73 () T@U)
(declare-fun freshVersion@2 () T@U)
(declare-fun Mask@50 () T@U)
(declare-fun Heap@67 () T@U)
(declare-fun Heap@68 () T@U)
(declare-fun Heap@69 () T@U)
(declare-fun newPMask@20 () T@U)
(declare-fun Heap@70 () T@U)
(declare-fun Mask@49 () T@U)
(declare-fun UnfoldingHeap@29 () T@U)
(declare-fun UnfoldingMask@29 () T@U)
(declare-fun UnfoldingHeap@28 () T@U)
(declare-fun UnfoldingMask@28 () T@U)
(declare-fun UnfoldingHeap@25 () T@U)
(declare-fun UnfoldingHeap@26 () T@U)
(declare-fun newPMask@19 () T@U)
(declare-fun UnfoldingHeap@27 () T@U)
(declare-fun UnfoldingMask@26 () T@U)
(declare-fun UnfoldingMask@25 () T@U)
(declare-fun UnfoldingMask@27 () T@U)
(declare-fun Mask@46 () T@U)
(declare-fun Mask@48 () T@U)
(declare-fun Mask@47 () T@U)
(declare-fun Heap@63 () T@U)
(declare-fun Heap@64 () T@U)
(declare-fun Heap@65 () T@U)
(declare-fun newPMask@18 () T@U)
(declare-fun Heap@66 () T@U)
(declare-fun Heap@60 () T@U)
(declare-fun Heap@61 () T@U)
(declare-fun Heap@62 () T@U)
(declare-fun freshVersion@1 () T@U)
(declare-fun Mask@45 () T@U)
(declare-fun Heap@56 () T@U)
(declare-fun Heap@57 () T@U)
(declare-fun Heap@58 () T@U)
(declare-fun newPMask@17 () T@U)
(declare-fun Heap@59 () T@U)
(declare-fun Mask@44 () T@U)
(declare-fun UnfoldingHeap@24 () T@U)
(declare-fun UnfoldingMask@24 () T@U)
(declare-fun UnfoldingHeap@23 () T@U)
(declare-fun UnfoldingMask@23 () T@U)
(declare-fun UnfoldingHeap@20 () T@U)
(declare-fun UnfoldingHeap@21 () T@U)
(declare-fun newPMask@16 () T@U)
(declare-fun UnfoldingHeap@22 () T@U)
(declare-fun UnfoldingMask@21 () T@U)
(declare-fun UnfoldingMask@20 () T@U)
(declare-fun UnfoldingMask@22 () T@U)
(declare-fun Mask@41 () T@U)
(declare-fun Mask@43 () T@U)
(declare-fun Mask@42 () T@U)
(declare-fun Heap@52 () T@U)
(declare-fun Mask@36 () T@U)
(declare-fun freshObj@1 () T@U)
(declare-fun Heap@53 () T@U)
(declare-fun Mask@37 () T@U)
(declare-fun Mask@38 () T@U)
(declare-fun Mask@39 () T@U)
(declare-fun Mask@40 () T@U)
(declare-fun Heap@54 () T@U)
(declare-fun Heap@55 () T@U)
(declare-fun Heap@51 () T@U)
(declare-fun Heap@47 () T@U)
(declare-fun Heap@48 () T@U)
(declare-fun Heap@49 () T@U)
(declare-fun newPMask@15 () T@U)
(declare-fun Heap@50 () T@U)
(declare-fun Heap@43 () T@U)
(declare-fun Heap@44 () T@U)
(declare-fun Heap@45 () T@U)
(declare-fun newPMask@14 () T@U)
(declare-fun Heap@46 () T@U)
(declare-fun UnfoldingHeap@19 () T@U)
(declare-fun UnfoldingMask@19 () T@U)
(declare-fun UnfoldingHeap@18 () T@U)
(declare-fun UnfoldingMask@18 () T@U)
(declare-fun UnfoldingHeap@15 () T@U)
(declare-fun UnfoldingHeap@16 () T@U)
(declare-fun newPMask@13 () T@U)
(declare-fun UnfoldingHeap@17 () T@U)
(declare-fun Unfolding1Heap@9 () T@U)
(declare-fun Unfolding1Mask@9 () T@U)
(declare-fun Unfolding1Heap@8 () T@U)
(declare-fun Unfolding1Mask@8 () T@U)
(declare-fun Unfolding1Heap@5 () T@U)
(declare-fun Unfolding1Heap@6 () T@U)
(declare-fun newPMask@12 () T@U)
(declare-fun Unfolding1Heap@7 () T@U)
(declare-fun Unfolding1Mask@6 () T@U)
(declare-fun Unfolding1Mask@5 () T@U)
(declare-fun Unfolding1Mask@7 () T@U)
(declare-fun UnfoldingMask@16 () T@U)
(declare-fun UnfoldingMask@15 () T@U)
(declare-fun UnfoldingMask@17 () T@U)
(declare-fun Mask@35 () T@U)
(declare-fun Heap@42 () T@U)
(declare-fun Heap@39 () T@U)
(declare-fun Heap@40 () T@U)
(declare-fun newPMask@11 () T@U)
(declare-fun Heap@41 () T@U)
(declare-fun Mask@33 () T@U)
(declare-fun Mask@34 () T@U)
(declare-fun Heap@38 () T@U)
(declare-fun Heap@34 () T@U)
(declare-fun Heap@35 () T@U)
(declare-fun Heap@36 () T@U)
(declare-fun newPMask@10 () T@U)
(declare-fun Heap@37 () T@U)
(declare-fun Mask@25 () T@U)
(declare-fun index@0 () Int)
(declare-fun Mask@24 () T@U)
(declare-fun Mask@23 () T@U)
(declare-fun Mask@22 () T@U)
(declare-fun Heap@33 () T@U)
(declare-fun Heap@29 () T@U)
(declare-fun Heap@30 () T@U)
(declare-fun Heap@31 () T@U)
(declare-fun newPMask@9 () T@U)
(declare-fun Heap@32 () T@U)
(declare-fun Heap@25 () T@U)
(declare-fun Heap@26 () T@U)
(declare-fun Heap@27 () T@U)
(declare-fun newPMask@8 () T@U)
(declare-fun Heap@28 () T@U)
(declare-fun UnfoldingHeap@14 () T@U)
(declare-fun UnfoldingMask@14 () T@U)
(declare-fun UnfoldingHeap@13 () T@U)
(declare-fun UnfoldingMask@13 () T@U)
(declare-fun UnfoldingHeap@10 () T@U)
(declare-fun UnfoldingHeap@11 () T@U)
(declare-fun newPMask@7 () T@U)
(declare-fun UnfoldingHeap@12 () T@U)
(declare-fun Unfolding1Heap@4 () T@U)
(declare-fun Unfolding1Mask@4 () T@U)
(declare-fun Unfolding1Heap@3 () T@U)
(declare-fun Unfolding1Mask@3 () T@U)
(declare-fun Unfolding1Heap@0 () T@U)
(declare-fun Unfolding1Heap@1 () T@U)
(declare-fun newPMask@6 () T@U)
(declare-fun Unfolding1Heap@2 () T@U)
(declare-fun Unfolding1Mask@1 () T@U)
(declare-fun Unfolding1Mask@0 () T@U)
(declare-fun Unfolding1Mask@2 () T@U)
(declare-fun UnfoldingMask@11 () T@U)
(declare-fun UnfoldingMask@10 () T@U)
(declare-fun UnfoldingMask@12 () T@U)
(declare-fun b_1_1@12 () Bool)
(declare-fun b_2_1@6 () Bool)
(declare-fun ResultHeap () T@U)
(declare-fun Ops_1Heap@3 () T@U)
(declare-fun Mask@21 () T@U)
(declare-fun b_1_1@11 () Bool)
(declare-fun neededTransfer@3 () Real)
(declare-fun Used_1Mask@3 () T@U)
(declare-fun initNeededTransfer@0 () Real)
(declare-fun b_3@0 () Bool)
(declare-fun b_3@1 () Bool)
(declare-fun b_3@2 () Bool)
(declare-fun Ops_1Mask@7 () T@U)
(declare-fun b_3@3 () Bool)
(declare-fun Used_1Heap@0 () T@U)
(declare-fun b_3@4 () Bool)
(declare-fun takeTransfer@1 () Real)
(declare-fun Heap@23 () T@U)
(declare-fun Mask@19 () T@U)
(declare-fun neededTransfer@1 () Real)
(declare-fun b_2_1@3 () Bool)
(declare-fun Used_1Mask@1 () T@U)
(declare-fun neededTransfer@2 () Real)
(declare-fun Used_1Mask@2 () T@U)
(declare-fun b_2_1@4 () Bool)
(declare-fun TempMask@1 () T@U)
(declare-fun b_2_1@5 () Bool)
(declare-fun Mask@20 () T@U)
(declare-fun newPMask@5 () T@U)
(declare-fun Heap@24 () T@U)
(declare-fun maskTransfer@1 () Real)
(declare-fun takeTransfer@0 () Real)
(declare-fun b_2_1@0 () Bool)
(declare-fun neededTransfer@0 () Real)
(declare-fun Used_1Mask@0 () T@U)
(declare-fun b_2_1@1 () Bool)
(declare-fun TempMask@0 () T@U)
(declare-fun b_2_1@2 () Bool)
(declare-fun Ops_1Mask@6 () T@U)
(declare-fun maskTransfer@0 () Real)
(declare-fun b_1_1@10 () Bool)
(declare-fun b_1_1@9 () Bool)
(declare-fun b_2_1 () Bool)
(declare-fun b_1_1@8 () Bool)
(declare-fun b_1_1@7 () Bool)
(declare-fun Ops_1Heap@2 () T@U)
(declare-fun Ops_1Mask@4 () T@U)
(declare-fun Ops_1Mask@3 () T@U)
(declare-fun b_1_1@6 () Bool)
(declare-fun Ops_1Heap@1 () T@U)
(declare-fun b_1_1@5 () Bool)
(declare-fun Ops_1Mask@2 () T@U)
(declare-fun Ops_1Mask@1 () T@U)
(declare-fun b_1_1@4 () Bool)
(declare-fun b_1_1@3 () Bool)
(declare-fun Ops_1Heap@0 () T@U)
(declare-fun ExhaleHeap@0 () T@U)
(declare-fun b_1_1@2 () Bool)
(declare-fun b_1_1@0 () Bool)
(declare-fun Ops_1Mask@0 () T@U)
(declare-fun b_1_1@1 () Bool)
(declare-fun b_1_1 () Bool)
(declare-fun b_2@0 () Bool)
(declare-fun b_2 () Bool)
(declare-fun UsedHeap@0 () T@U)
(declare-fun Heap@19 () T@U)
(declare-fun Heap@20 () T@U)
(declare-fun Heap@21 () T@U)
(declare-fun newPMask@4 () T@U)
(declare-fun Heap@22 () T@U)
(declare-fun Heap@16 () T@U)
(declare-fun Heap@17 () T@U)
(declare-fun Heap@18 () T@U)
(declare-fun freshVersion@0 () T@U)
(declare-fun Mask@18 () T@U)
(declare-fun Heap@13 () T@U)
(declare-fun Heap@14 () T@U)
(declare-fun newPMask@3 () T@U)
(declare-fun Heap@15 () T@U)
(declare-fun Mask@17 () T@U)
(declare-fun UnfoldingHeap@9 () T@U)
(declare-fun UnfoldingMask@9 () T@U)
(declare-fun UnfoldingHeap@8 () T@U)
(declare-fun UnfoldingMask@8 () T@U)
(declare-fun UnfoldingHeap@5 () T@U)
(declare-fun UnfoldingHeap@6 () T@U)
(declare-fun newPMask@2 () T@U)
(declare-fun UnfoldingHeap@7 () T@U)
(declare-fun UnfoldingMask@6 () T@U)
(declare-fun UnfoldingMask@5 () T@U)
(declare-fun UnfoldingMask@7 () T@U)
(declare-fun Mask@16 () T@U)
(declare-fun Mask@15 () T@U)
(declare-fun hd () T@U)
(declare-fun ptr () T@U)
(declare-fun Heap@8 () T@U)
(declare-fun Mask@8 () T@U)
(declare-fun Heap@7 () T@U)
(declare-fun Mask@7 () T@U)
(declare-fun Heap@3 () T@U)
(declare-fun Heap@4 () T@U)
(declare-fun Heap@5 () T@U)
(declare-fun newPMask@1 () T@U)
(declare-fun Heap@6 () T@U)
(declare-fun UnfoldingHeap@4 () T@U)
(declare-fun UnfoldingMask@4 () T@U)
(declare-fun UnfoldingHeap@3 () T@U)
(declare-fun UnfoldingMask@3 () T@U)
(declare-fun UnfoldingHeap@0 () T@U)
(declare-fun UnfoldingHeap@1 () T@U)
(declare-fun newPMask@0 () T@U)
(declare-fun UnfoldingHeap@2 () T@U)
(declare-fun UnfoldingMask@1 () T@U)
(declare-fun UnfoldingMask@0 () T@U)
(declare-fun UnfoldingMask@2 () T@U)
(declare-fun Mask@5 () T@U)
(declare-fun Mask@4 () T@U)
(declare-fun Mask@6 () T@U)
(declare-fun Heap@1 () T@U)
(declare-fun Heap@2 () T@U)
(declare-fun newVersion@1 () T@U)
(declare-fun Mask@3 () T@U)
(declare-fun Mask@2 () T@U)
(declare-fun Mask@1 () T@U)
(declare-fun Heap@0 () T@U)
(declare-fun newVersion@0 () T@U)
(declare-fun tmp () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type Mask@97) (MapType1Type RefType realType)) (= (type Mask@96) (MapType1Type RefType realType))) (= (type this@@38) RefType)) (= (type Heap@@38) (MapType0Type RefType))) (= (type Heap@168) (MapType0Type RefType))) (= (type Heap@167) (MapType0Type RefType))) (= (type Heap@166) (MapType0Type RefType))) (= (type newPMask@55) (MapType1Type RefType boolType))) (= (type Heap@164) (MapType0Type RefType))) (= (type Heap@163) (MapType0Type RefType))) (= (type Heap@165) (MapType0Type RefType))) (= (type freshVersion@6) FrameTypeType)) (= (type Mask@95) (MapType1Type RefType realType))) (= (type Mask@94) (MapType1Type RefType realType))) (forall ((arg0@@50 T@U) (arg1@@35 T@U) ) (! (= (type (CombineFrames arg0@@50 arg1@@35)) FrameTypeType)
 :qid |funType:CombineFrames|
 :pattern ( (CombineFrames arg0@@50 arg1@@35))
))) (forall ((arg0@@51 T@U) ) (! (= (type (FrameFragment arg0@@51)) FrameTypeType)
 :qid |funType:FrameFragment|
 :pattern ( (FrameFragment arg0@@51))
))) (= (type Mask@93) (MapType1Type RefType realType))) (= (type Mask@53) (MapType1Type RefType realType))) (= (type Mask@52) (MapType1Type RefType realType))) (= (type ptr@0) RefType)) (= (type Heap@78) (MapType0Type RefType))) (= (type Mask@54) (MapType1Type RefType realType))) (= (type hd@0) RefType)) (= (type Labellhs9Heap) (MapType0Type RefType))) (= (type ExhaleHeap@2) (MapType0Type RefType))) (= (type Mask@51) (MapType1Type RefType realType))) (= (type Heap@75) (MapType0Type RefType))) (= (type Heap@74) (MapType0Type RefType))) (= (type Heap@76) (MapType0Type RefType))) (= (type newPMask@21) (MapType1Type RefType boolType))) (= (type Heap@77) (MapType0Type RefType))) (= (type Heap@72) (MapType0Type RefType))) (= (type Heap@71) (MapType0Type RefType))) (= (type Heap@73) (MapType0Type RefType))) (= (type freshVersion@2) FrameTypeType)) (= (type Mask@50) (MapType1Type RefType realType))) (= (type Heap@67) (MapType0Type RefType))) (= (type Heap@68) (MapType0Type RefType))) (= (type Heap@69) (MapType0Type RefType))) (= (type newPMask@20) (MapType1Type RefType boolType))) (= (type Heap@70) (MapType0Type RefType))) (= (type Mask@46) (MapType1Type RefType realType))) (= (type Mask@49) (MapType1Type RefType realType))) (= (type UnfoldingHeap@29) (MapType0Type RefType))) (= (type UnfoldingMask@29) (MapType1Type RefType realType))) (= (type UnfoldingMask@25) (MapType1Type RefType realType))) (= (type UnfoldingHeap@28) (MapType0Type RefType))) (= (type UnfoldingMask@28) (MapType1Type RefType realType))) (= (type UnfoldingHeap@25) (MapType0Type RefType))) (= (type UnfoldingHeap@26) (MapType0Type RefType))) (= (type newPMask@19) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@27) (MapType0Type RefType))) (= (type UnfoldingMask@26) (MapType1Type RefType realType))) (= (type UnfoldingMask@27) (MapType1Type RefType realType))) (= (type Mask@48) (MapType1Type RefType realType))) (= (type Mask@47) (MapType1Type RefType realType))) (= (type Heap@63) (MapType0Type RefType))) (= (type Heap@64) (MapType0Type RefType))) (= (type Heap@65) (MapType0Type RefType))) (= (type newPMask@18) (MapType1Type RefType boolType))) (= (type Heap@66) (MapType0Type RefType))) (= (type Heap@60) (MapType0Type RefType))) (= (type Heap@61) (MapType0Type RefType))) (= (type Heap@62) (MapType0Type RefType))) (= (type freshVersion@1) FrameTypeType)) (= (type Mask@45) (MapType1Type RefType realType))) (= (type Heap@56) (MapType0Type RefType))) (= (type Heap@57) (MapType0Type RefType))) (= (type Heap@58) (MapType0Type RefType))) (= (type newPMask@17) (MapType1Type RefType boolType))) (= (type Heap@59) (MapType0Type RefType))) (= (type Mask@41) (MapType1Type RefType realType))) (= (type Mask@44) (MapType1Type RefType realType))) (= (type UnfoldingHeap@24) (MapType0Type RefType))) (= (type UnfoldingMask@24) (MapType1Type RefType realType))) (= (type UnfoldingMask@20) (MapType1Type RefType realType))) (= (type UnfoldingHeap@23) (MapType0Type RefType))) (= (type UnfoldingMask@23) (MapType1Type RefType realType))) (= (type UnfoldingHeap@20) (MapType0Type RefType))) (= (type UnfoldingHeap@21) (MapType0Type RefType))) (= (type newPMask@16) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@22) (MapType0Type RefType))) (= (type UnfoldingMask@21) (MapType1Type RefType realType))) (= (type UnfoldingMask@22) (MapType1Type RefType realType))) (= (type Mask@43) (MapType1Type RefType realType))) (= (type Mask@42) (MapType1Type RefType realType))) (= (type Heap@52) (MapType0Type RefType))) (= (type Mask@36) (MapType1Type RefType realType))) (= (type freshObj@1) RefType)) (= (type Heap@53) (MapType0Type RefType))) (= (type Mask@37) (MapType1Type RefType realType))) (= (type Mask@38) (MapType1Type RefType realType))) (= (type Mask@39) (MapType1Type RefType realType))) (= (type Mask@40) (MapType1Type RefType realType))) (= (type Heap@54) (MapType0Type RefType))) (= (type Heap@55) (MapType0Type RefType))) (= (type Heap@43) (MapType0Type RefType))) (= (type Heap@51) (MapType0Type RefType))) (= (type Heap@47) (MapType0Type RefType))) (= (type Heap@48) (MapType0Type RefType))) (= (type Heap@49) (MapType0Type RefType))) (= (type newPMask@15) (MapType1Type RefType boolType))) (= (type Heap@50) (MapType0Type RefType))) (= (type Heap@44) (MapType0Type RefType))) (= (type Heap@45) (MapType0Type RefType))) (= (type newPMask@14) (MapType1Type RefType boolType))) (= (type Heap@46) (MapType0Type RefType))) (= (type UnfoldingHeap@19) (MapType0Type RefType))) (= (type UnfoldingMask@19) (MapType1Type RefType realType))) (= (type UnfoldingMask@15) (MapType1Type RefType realType))) (= (type UnfoldingHeap@18) (MapType0Type RefType))) (= (type UnfoldingMask@18) (MapType1Type RefType realType))) (= (type UnfoldingHeap@15) (MapType0Type RefType))) (= (type UnfoldingHeap@16) (MapType0Type RefType))) (= (type newPMask@13) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@17) (MapType0Type RefType))) (= (type Unfolding1Heap@9) (MapType0Type RefType))) (= (type Unfolding1Mask@9) (MapType1Type RefType realType))) (= (type Unfolding1Mask@5) (MapType1Type RefType realType))) (= (type Unfolding1Heap@8) (MapType0Type RefType))) (= (type Unfolding1Mask@8) (MapType1Type RefType realType))) (= (type Unfolding1Heap@5) (MapType0Type RefType))) (= (type Unfolding1Heap@6) (MapType0Type RefType))) (= (type newPMask@12) (MapType1Type RefType boolType))) (= (type Unfolding1Heap@7) (MapType0Type RefType))) (= (type Unfolding1Mask@6) (MapType1Type RefType realType))) (= (type Unfolding1Mask@7) (MapType1Type RefType realType))) (= (type UnfoldingMask@16) (MapType1Type RefType realType))) (= (type UnfoldingMask@17) (MapType1Type RefType realType))) (= (type Mask@35) (MapType1Type RefType realType))) (= (type ExhaleHeap@1) (MapType0Type RefType))) (= (type Heap@42) (MapType0Type RefType))) (= (type Heap@39) (MapType0Type RefType))) (= (type Heap@40) (MapType0Type RefType))) (= (type newPMask@11) (MapType1Type RefType boolType))) (= (type Heap@41) (MapType0Type RefType))) (= (type Mask@26) (MapType1Type RefType realType))) (= (type Mask@33) (MapType1Type RefType realType))) (= (type Mask@34) (MapType1Type RefType realType))) (= (type Heap@126) (MapType0Type RefType))) (= (type ptr@1) RefType)) (= (type Heap@127) (MapType0Type RefType))) (= (type Heap@128) (MapType0Type RefType))) (= (type newPMask@44) (MapType1Type RefType boolType))) (= (type Heap@129) (MapType0Type RefType))) (= (type Heap@130) (MapType0Type RefType))) (= (type Mask@79) (MapType1Type RefType realType))) (= (type Mask@80) (MapType1Type RefType realType))) (= (type Mask@78) (MapType1Type RefType realType))) (= (type Mask@77) (MapType1Type RefType realType))) (= (type Mask@76) (MapType1Type RefType realType))) (= (type Heap@117) (MapType0Type RefType))) (= (type Heap@125) (MapType0Type RefType))) (= (type Heap@121) (MapType0Type RefType))) (= (type Heap@122) (MapType0Type RefType))) (= (type Heap@123) (MapType0Type RefType))) (= (type newPMask@43) (MapType1Type RefType boolType))) (= (type Heap@124) (MapType0Type RefType))) (= (type Heap@118) (MapType0Type RefType))) (= (type Heap@119) (MapType0Type RefType))) (= (type newPMask@42) (MapType1Type RefType boolType))) (= (type Heap@120) (MapType0Type RefType))) (= (type UnfoldingHeap@54) (MapType0Type RefType))) (= (type UnfoldingMask@54) (MapType1Type RefType realType))) (= (type UnfoldingMask@50) (MapType1Type RefType realType))) (= (type UnfoldingHeap@53) (MapType0Type RefType))) (= (type UnfoldingMask@53) (MapType1Type RefType realType))) (= (type UnfoldingHeap@50) (MapType0Type RefType))) (= (type UnfoldingHeap@51) (MapType0Type RefType))) (= (type newPMask@41) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@52) (MapType0Type RefType))) (= (type Unfolding1Heap@29) (MapType0Type RefType))) (= (type Unfolding1Mask@29) (MapType1Type RefType realType))) (= (type Unfolding1Mask@25) (MapType1Type RefType realType))) (= (type Unfolding1Heap@28) (MapType0Type RefType))) (= (type Unfolding1Mask@28) (MapType1Type RefType realType))) (= (type Unfolding1Heap@25) (MapType0Type RefType))) (= (type Unfolding1Heap@26) (MapType0Type RefType))) (= (type newPMask@40) (MapType1Type RefType boolType))) (= (type Unfolding1Heap@27) (MapType0Type RefType))) (= (type Unfolding1Mask@26) (MapType1Type RefType realType))) (= (type Unfolding1Mask@27) (MapType1Type RefType realType))) (= (type UnfoldingMask@51) (MapType1Type RefType realType))) (= (type UnfoldingMask@52) (MapType1Type RefType realType))) (= (type Result_7Heap) (MapType0Type RefType))) (= (type Ops_3Heap@3) (MapType0Type RefType))) (= (type Mask@75) (MapType1Type RefType realType))) (= (type Result_7Mask) (MapType1Type RefType realType))) (= (type Mask@0) (MapType1Type RefType realType))) (= (type Ops_3Mask@5) (MapType1Type RefType realType))) (= (type Used_6Mask@3) (MapType1Type RefType realType))) (= (type Ops_3Mask@22) (MapType1Type RefType realType))) (= (type Ops_3Heap@12) (MapType0Type RefType))) (= (type Used_6Heap@0) (MapType0Type RefType))) (= (type Heap@115) (MapType0Type RefType))) (= (type Mask@73) (MapType1Type RefType realType))) (= (type Used_6Mask@1) (MapType1Type RefType realType))) (= (type Used_6Mask@2) (MapType1Type RefType realType))) (= (type TempMask@7) (MapType1Type RefType realType))) (= (type Mask@74) (MapType1Type RefType realType))) (= (type newPMask@39) (MapType1Type RefType boolType))) (= (type Heap@116) (MapType0Type RefType))) (= (type Ops_3Mask@20) (MapType1Type RefType realType))) (= (type Used_6Mask@0) (MapType1Type RefType realType))) (= (type TempMask@6) (MapType1Type RefType realType))) (= (type Ops_3Mask@21) (MapType1Type RefType realType))) (= (type Ops_3Heap@11) (MapType0Type RefType))) (= (type Mask@68) (MapType1Type RefType realType))) (= (type Ops_3Mask@14) (MapType1Type RefType realType))) (= (type Heap@112) (MapType0Type RefType))) (= (type Result_6Heap) (MapType0Type RefType))) (= (type Used_5Heap@0) (MapType0Type RefType))) (= (type Ops_3Mask@18) (MapType1Type RefType realType))) (= (type Ops_3Mask@19) (MapType1Type RefType realType))) (= (type Labellhs7Heap) (MapType0Type RefType))) (= (type ExhaleHeap@4) (MapType0Type RefType))) (= (type Mask@72) (MapType1Type RefType realType))) (= (type Heap@114) (MapType0Type RefType))) (= (type Result_6Mask) (MapType1Type RefType realType))) (= (type Used_5Mask@3) (MapType1Type RefType realType))) (= (type Mask@70) (MapType1Type RefType realType))) (= (type Used_5Mask@1) (MapType1Type RefType realType))) (= (type Used_5Mask@2) (MapType1Type RefType realType))) (= (type TempMask@5) (MapType1Type RefType realType))) (= (type Mask@71) (MapType1Type RefType realType))) (= (type newPMask@38) (MapType1Type RefType boolType))) (= (type Heap@113) (MapType0Type RefType))) (= (type Ops_3Mask@16) (MapType1Type RefType realType))) (= (type Used_5Mask@0) (MapType1Type RefType realType))) (= (type TempMask@4) (MapType1Type RefType realType))) (= (type Ops_3Mask@17) (MapType1Type RefType realType))) (= (type Used_4Mask@3) (MapType1Type RefType realType))) (= (type Result_5Heap) (MapType0Type RefType))) (= (type Result_5Mask) (MapType1Type RefType realType))) (= (type Used_4Heap@0) (MapType0Type RefType))) (= (type Used_4Mask@1) (MapType1Type RefType realType))) (= (type Used_4Mask@2) (MapType1Type RefType realType))) (= (type Mask@69) (MapType1Type RefType realType))) (= (type Used_4Mask@0) (MapType1Type RefType realType))) (= (type Ops_3Mask@15) (MapType1Type RefType realType))) (= (type WandDefLHSMask@1) (MapType1Type RefType realType))) (= (type WandDefRHSMask@0) (MapType1Type RefType realType))) (= (type WandDefLHSHeap@1) (MapType0Type RefType))) (= (type WandDefRHSHeap@0) (MapType0Type RefType))) (= (type Heap@104) (MapType0Type RefType))) (= (type Mask@60) (MapType1Type RefType realType))) (= (type Ops_3Heap@10) (MapType0Type RefType))) (= (type Ops_3Mask@13) (MapType1Type RefType realType))) (= (type Heap@111) (MapType0Type RefType))) (= (type Mask@67) (MapType1Type RefType realType))) (= (type Ops_3Heap@7) (MapType0Type RefType))) (= (type Ops_3Heap@6) (MapType0Type RefType))) (= (type Ops_3Heap@8) (MapType0Type RefType))) (= (type newPMask@37) (MapType1Type RefType boolType))) (= (type Ops_3Heap@9) (MapType0Type RefType))) (= (type Ops_3Heap@4) (MapType0Type RefType))) (= (type Ops_3Heap@5) (MapType0Type RefType))) (= (type freshVersion@3) FrameTypeType)) (= (type Used_3Heap@4) (MapType0Type RefType))) (= (type Used_3Mask@12) (MapType1Type RefType realType))) (= (type Ops_3Mask@12) (MapType1Type RefType realType))) (= (type Used_3Heap@0) (MapType0Type RefType))) (= (type Used_3Heap@1) (MapType0Type RefType))) (= (type Used_3Heap@2) (MapType0Type RefType))) (= (type newPMask@36) (MapType1Type RefType boolType))) (= (type Used_3Heap@3) (MapType0Type RefType))) (= (type Result_4Heap) (MapType0Type RefType))) (= (type Result_4Mask) (MapType1Type RefType realType))) (= (type Result_3Heap@4) (MapType0Type RefType))) (= (type Ops_3Mask@11) (MapType1Type RefType realType))) (= (type Mask@66) (MapType1Type RefType realType))) (= (type Used_3Mask@11) (MapType1Type RefType realType))) (= (type Heap@110) (MapType0Type RefType))) (= (type Result_3Heap) (MapType0Type RefType))) (= (type Result_3Heap@3) (MapType0Type RefType))) (= (type Result_3Mask) (MapType1Type RefType realType))) (= (type Result_3Heap@0) (MapType0Type RefType))) (= (type Result_3Heap@1) (MapType0Type RefType))) (= (type newPMask@35) (MapType1Type RefType boolType))) (= (type Result_3Heap@2) (MapType0Type RefType))) (= (type UnfoldingHeap@49) (MapType0Type RefType))) (= (type UnfoldingMask@49) (MapType1Type RefType realType))) (= (type UnfoldingMask@45) (MapType1Type RefType realType))) (= (type UnfoldingHeap@48) (MapType0Type RefType))) (= (type UnfoldingMask@48) (MapType1Type RefType realType))) (= (type UnfoldingHeap@45) (MapType0Type RefType))) (= (type UnfoldingHeap@46) (MapType0Type RefType))) (= (type newPMask@34) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@47) (MapType0Type RefType))) (= (type Unfolding1Heap@24) (MapType0Type RefType))) (= (type Unfolding1Mask@24) (MapType1Type RefType realType))) (= (type Unfolding1Mask@20) (MapType1Type RefType realType))) (= (type Unfolding1Heap@23) (MapType0Type RefType))) (= (type Unfolding1Mask@23) (MapType1Type RefType realType))) (= (type Unfolding1Heap@20) (MapType0Type RefType))) (= (type Unfolding1Heap@21) (MapType0Type RefType))) (= (type newPMask@33) (MapType1Type RefType boolType))) (= (type Unfolding1Heap@22) (MapType0Type RefType))) (= (type Unfolding1Mask@21) (MapType1Type RefType realType))) (= (type Unfolding1Mask@22) (MapType1Type RefType realType))) (= (type UnfoldingMask@46) (MapType1Type RefType realType))) (= (type UnfoldingMask@47) (MapType1Type RefType realType))) (= (type arg_2@0) RefType)) (= (type Heap@108) (MapType0Type RefType))) (= (type Used_3Mask@9) (MapType1Type RefType realType))) (= (type Mask@64) (MapType1Type RefType realType))) (= (type Used_3Mask@10) (MapType1Type RefType realType))) (= (type TempMask@3) (MapType1Type RefType realType))) (= (type Mask@65) (MapType1Type RefType realType))) (= (type newPMask@32) (MapType1Type RefType boolType))) (= (type Heap@109) (MapType0Type RefType))) (= (type Used_3Mask@7) (MapType1Type RefType realType))) (= (type Ops_3Mask@9) (MapType1Type RefType realType))) (= (type Used_3Mask@8) (MapType1Type RefType realType))) (= (type TempMask@2) (MapType1Type RefType realType))) (= (type Ops_3Mask@10) (MapType1Type RefType realType))) (= (type Result_2Heap) (MapType0Type RefType))) (= (type Result_2Mask) (MapType1Type RefType realType))) (= (type Mask@62) (MapType1Type RefType realType))) (= (type Heap@106) (MapType0Type RefType))) (= (type Used_3Mask@5) (MapType1Type RefType realType))) (= (type Used_3Mask@6) (MapType1Type RefType realType))) (= (type Mask@63) (MapType1Type RefType realType))) (= (type Heap@107) (MapType0Type RefType))) (= (type Used_3Mask@3) (MapType1Type RefType realType))) (= (type Ops_3Mask@7) (MapType1Type RefType realType))) (= (type Used_3Mask@4) (MapType1Type RefType realType))) (= (type Ops_3Mask@8) (MapType1Type RefType realType))) (= (type Result_1Heap) (MapType0Type RefType))) (= (type Result_1Mask) (MapType1Type RefType realType))) (= (type Used_3Mask@1) (MapType1Type RefType realType))) (= (type Used_3Mask@2) (MapType1Type RefType realType))) (= (type Mask@61) (MapType1Type RefType realType))) (= (type Heap@105) (MapType0Type RefType))) (= (type Used_3Mask@0) (MapType1Type RefType realType))) (= (type Ops_3Mask@6) (MapType1Type RefType realType))) (= (type Ops_3Heap@0) (MapType0Type RefType))) (= (type Ops_3Mask@1) (MapType1Type RefType realType))) (= (type Ops_3Heap@2) (MapType0Type RefType))) (= (type Ops_3Mask@4) (MapType1Type RefType realType))) (= (type Ops_3Mask@3) (MapType1Type RefType realType))) (= (type Ops_3Heap@1) (MapType0Type RefType))) (= (type Ops_3Mask@2) (MapType1Type RefType realType))) (= (type ExhaleHeap@3) (MapType0Type RefType))) (= (type Ops_3Mask@0) (MapType1Type RefType realType))) (= (type Used_2Heap@0) (MapType0Type RefType))) (= (type Heap@99) (MapType0Type RefType))) (= (type Mask@56) (MapType1Type RefType realType))) (= (type Heap@103) (MapType0Type RefType))) (= (type Mask@59) (MapType1Type RefType realType))) (= (type Heap@100) (MapType0Type RefType))) (= (type Heap@101) (MapType0Type RefType))) (= (type newPMask@31) (MapType1Type RefType boolType))) (= (type Heap@102) (MapType0Type RefType))) (= (type UnfoldingHeap@44) (MapType0Type RefType))) (= (type UnfoldingMask@44) (MapType1Type RefType realType))) (= (type UnfoldingMask@40) (MapType1Type RefType realType))) (= (type UnfoldingHeap@43) (MapType0Type RefType))) (= (type UnfoldingMask@43) (MapType1Type RefType realType))) (= (type UnfoldingHeap@40) (MapType0Type RefType))) (= (type UnfoldingHeap@41) (MapType0Type RefType))) (= (type newPMask@30) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@42) (MapType0Type RefType))) (= (type UnfoldingMask@41) (MapType1Type RefType realType))) (= (type UnfoldingMask@42) (MapType1Type RefType realType))) (= (type Mask@57) (MapType1Type RefType realType))) (= (type Mask@58) (MapType1Type RefType realType))) (= (type Heap@97) (MapType0Type RefType))) (= (type Heap@98) (MapType0Type RefType))) (= (type newVersion@2) FrameTypeType)) (= (type Mask@55) (MapType1Type RefType realType))) (= (type AssertMask@0) (MapType1Type RefType realType))) (= (type WandDefLHSMask@0) (MapType1Type RefType realType))) (= (type WandDefRHSMask@2) (MapType1Type RefType realType))) (= (type WandDefLHSHeap@0) (MapType0Type RefType))) (= (type WandDefRHSHeap@1) (MapType0Type RefType))) (= (type prev) RefType)) (= (type Heap@92) (MapType0Type RefType))) (= (type Heap@96) (MapType0Type RefType))) (= (type Heap@93) (MapType0Type RefType))) (= (type Heap@94) (MapType0Type RefType))) (= (type newPMask@29) (MapType1Type RefType boolType))) (= (type Heap@95) (MapType0Type RefType))) (= (type UnfoldingHeap@39) (MapType0Type RefType))) (= (type UnfoldingMask@39) (MapType1Type RefType realType))) (= (type UnfoldingMask@35) (MapType1Type RefType realType))) (= (type UnfoldingHeap@38) (MapType0Type RefType))) (= (type UnfoldingMask@38) (MapType1Type RefType realType))) (= (type UnfoldingHeap@35) (MapType0Type RefType))) (= (type UnfoldingHeap@36) (MapType0Type RefType))) (= (type newPMask@28) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@37) (MapType0Type RefType))) (= (type Unfolding1Heap@19) (MapType0Type RefType))) (= (type Unfolding1Mask@19) (MapType1Type RefType realType))) (= (type Unfolding1Mask@15) (MapType1Type RefType realType))) (= (type Unfolding1Heap@18) (MapType0Type RefType))) (= (type Unfolding1Mask@18) (MapType1Type RefType realType))) (= (type Unfolding1Heap@15) (MapType0Type RefType))) (= (type Unfolding1Heap@16) (MapType0Type RefType))) (= (type newPMask@27) (MapType1Type RefType boolType))) (= (type Unfolding1Heap@17) (MapType0Type RefType))) (= (type Unfolding1Mask@16) (MapType1Type RefType realType))) (= (type Unfolding1Mask@17) (MapType1Type RefType realType))) (= (type UnfoldingMask@36) (MapType1Type RefType realType))) (= (type UnfoldingMask@37) (MapType1Type RefType realType))) (= (type Heap@83) (MapType0Type RefType))) (= (type Heap@91) (MapType0Type RefType))) (= (type Heap@87) (MapType0Type RefType))) (= (type Heap@88) (MapType0Type RefType))) (= (type Heap@89) (MapType0Type RefType))) (= (type newPMask@26) (MapType1Type RefType boolType))) (= (type Heap@90) (MapType0Type RefType))) (= (type Heap@84) (MapType0Type RefType))) (= (type Heap@85) (MapType0Type RefType))) (= (type newPMask@25) (MapType1Type RefType boolType))) (= (type Heap@86) (MapType0Type RefType))) (= (type UnfoldingHeap@34) (MapType0Type RefType))) (= (type UnfoldingMask@34) (MapType1Type RefType realType))) (= (type UnfoldingMask@30) (MapType1Type RefType realType))) (= (type UnfoldingHeap@33) (MapType0Type RefType))) (= (type UnfoldingMask@33) (MapType1Type RefType realType))) (= (type UnfoldingHeap@30) (MapType0Type RefType))) (= (type UnfoldingHeap@31) (MapType0Type RefType))) (= (type newPMask@24) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@32) (MapType0Type RefType))) (= (type Unfolding1Heap@14) (MapType0Type RefType))) (= (type Unfolding1Mask@14) (MapType1Type RefType realType))) (= (type Unfolding1Mask@10) (MapType1Type RefType realType))) (= (type Unfolding1Heap@13) (MapType0Type RefType))) (= (type Unfolding1Mask@13) (MapType1Type RefType realType))) (= (type Unfolding1Heap@10) (MapType0Type RefType))) (= (type Unfolding1Heap@11) (MapType0Type RefType))) (= (type newPMask@23) (MapType1Type RefType boolType))) (= (type Unfolding1Heap@12) (MapType0Type RefType))) (= (type Unfolding1Mask@11) (MapType1Type RefType realType))) (= (type Unfolding1Mask@12) (MapType1Type RefType realType))) (= (type UnfoldingMask@31) (MapType1Type RefType realType))) (= (type UnfoldingMask@32) (MapType1Type RefType realType))) (= (type Mask@32) (MapType1Type RefType realType))) (= (type Heap@82) (MapType0Type RefType))) (= (type Heap@79) (MapType0Type RefType))) (= (type Heap@80) (MapType0Type RefType))) (= (type newPMask@22) (MapType1Type RefType boolType))) (= (type Heap@81) (MapType0Type RefType))) (= (type Mask@30) (MapType1Type RefType realType))) (= (type Mask@31) (MapType1Type RefType realType))) (= (type WandDefLHSMask@4) (MapType1Type RefType realType))) (= (type WandDefRHSMask@4) (MapType1Type RefType realType))) (= (type WandDefLHSHeap@2) (MapType0Type RefType))) (= (type WandDefRHSHeap@2) (MapType0Type RefType))) (= (type Heap@139) (MapType0Type RefType))) (= (type Mask@29) (MapType1Type RefType realType))) (= (type Heap@138) (MapType0Type RefType))) (= (type Heap@134) (MapType0Type RefType))) (= (type Heap@135) (MapType0Type RefType))) (= (type Heap@136) (MapType0Type RefType))) (= (type newPMask@48) (MapType1Type RefType boolType))) (= (type Heap@137) (MapType0Type RefType))) (= (type Heap@131) (MapType0Type RefType))) (= (type Heap@132) (MapType0Type RefType))) (= (type newPMask@47) (MapType1Type RefType boolType))) (= (type Heap@133) (MapType0Type RefType))) (= (type UnfoldingHeap@59) (MapType0Type RefType))) (= (type UnfoldingMask@59) (MapType1Type RefType realType))) (= (type UnfoldingMask@55) (MapType1Type RefType realType))) (= (type UnfoldingHeap@58) (MapType0Type RefType))) (= (type UnfoldingMask@58) (MapType1Type RefType realType))) (= (type UnfoldingHeap@55) (MapType0Type RefType))) (= (type UnfoldingHeap@56) (MapType0Type RefType))) (= (type newPMask@46) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@57) (MapType0Type RefType))) (= (type Unfolding1Heap@34) (MapType0Type RefType))) (= (type Unfolding1Mask@34) (MapType1Type RefType realType))) (= (type Unfolding1Mask@30) (MapType1Type RefType realType))) (= (type Unfolding1Heap@33) (MapType0Type RefType))) (= (type Unfolding1Mask@33) (MapType1Type RefType realType))) (= (type Unfolding1Heap@30) (MapType0Type RefType))) (= (type Unfolding1Heap@31) (MapType0Type RefType))) (= (type newPMask@45) (MapType1Type RefType boolType))) (= (type Unfolding1Heap@32) (MapType0Type RefType))) (= (type Unfolding1Mask@31) (MapType1Type RefType realType))) (= (type Unfolding1Mask@32) (MapType1Type RefType realType))) (= (type UnfoldingMask@56) (MapType1Type RefType realType))) (= (type UnfoldingMask@57) (MapType1Type RefType realType))) (= (type Mask@27) (MapType1Type RefType realType))) (= (type Mask@28) (MapType1Type RefType realType))) (= (type Heap@38) (MapType0Type RefType))) (= (type Heap@34) (MapType0Type RefType))) (= (type Heap@35) (MapType0Type RefType))) (= (type Heap@36) (MapType0Type RefType))) (= (type newPMask@10) (MapType1Type RefType boolType))) (= (type Heap@37) (MapType0Type RefType))) (= (type Mask@25) (MapType1Type RefType realType))) (= (type Mask@24) (MapType1Type RefType realType))) (= (type Mask@23) (MapType1Type RefType realType))) (= (type Mask@22) (MapType1Type RefType realType))) (= (type Heap@25) (MapType0Type RefType))) (= (type Heap@33) (MapType0Type RefType))) (= (type Heap@29) (MapType0Type RefType))) (= (type Heap@30) (MapType0Type RefType))) (= (type Heap@31) (MapType0Type RefType))) (= (type newPMask@9) (MapType1Type RefType boolType))) (= (type Heap@32) (MapType0Type RefType))) (= (type Heap@26) (MapType0Type RefType))) (= (type Heap@27) (MapType0Type RefType))) (= (type newPMask@8) (MapType1Type RefType boolType))) (= (type Heap@28) (MapType0Type RefType))) (= (type UnfoldingHeap@14) (MapType0Type RefType))) (= (type UnfoldingMask@14) (MapType1Type RefType realType))) (= (type UnfoldingMask@10) (MapType1Type RefType realType))) (= (type UnfoldingHeap@13) (MapType0Type RefType))) (= (type UnfoldingMask@13) (MapType1Type RefType realType))) (= (type UnfoldingHeap@10) (MapType0Type RefType))) (= (type UnfoldingHeap@11) (MapType0Type RefType))) (= (type newPMask@7) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@12) (MapType0Type RefType))) (= (type Unfolding1Heap@4) (MapType0Type RefType))) (= (type Unfolding1Mask@4) (MapType1Type RefType realType))) (= (type Unfolding1Mask@0) (MapType1Type RefType realType))) (= (type Unfolding1Heap@3) (MapType0Type RefType))) (= (type Unfolding1Mask@3) (MapType1Type RefType realType))) (= (type Unfolding1Heap@0) (MapType0Type RefType))) (= (type Unfolding1Heap@1) (MapType0Type RefType))) (= (type newPMask@6) (MapType1Type RefType boolType))) (= (type Unfolding1Heap@2) (MapType0Type RefType))) (= (type Unfolding1Mask@1) (MapType1Type RefType realType))) (= (type Unfolding1Mask@2) (MapType1Type RefType realType))) (= (type UnfoldingMask@11) (MapType1Type RefType realType))) (= (type UnfoldingMask@12) (MapType1Type RefType realType))) (= (type ResultHeap) (MapType0Type RefType))) (= (type Ops_1Heap@3) (MapType0Type RefType))) (= (type Mask@21) (MapType1Type RefType realType))) (= (type ResultMask@@0) (MapType1Type RefType realType))) (= (type Ops_1Mask@5) (MapType1Type RefType realType))) (= (type Used_1Mask@3) (MapType1Type RefType realType))) (= (type Ops_1Mask@7) (MapType1Type RefType realType))) (= (type Used_1Heap@0) (MapType0Type RefType))) (= (type Heap@23) (MapType0Type RefType))) (= (type Mask@19) (MapType1Type RefType realType))) (= (type Used_1Mask@1) (MapType1Type RefType realType))) (= (type Used_1Mask@2) (MapType1Type RefType realType))) (= (type TempMask@1) (MapType1Type RefType realType))) (= (type Mask@20) (MapType1Type RefType realType))) (= (type newPMask@5) (MapType1Type RefType boolType))) (= (type Heap@24) (MapType0Type RefType))) (= (type Used_1Mask@0) (MapType1Type RefType realType))) (= (type TempMask@0) (MapType1Type RefType realType))) (= (type Ops_1Mask@6) (MapType1Type RefType realType))) (= (type Ops_1Heap@0) (MapType0Type RefType))) (= (type Ops_1Mask@1) (MapType1Type RefType realType))) (= (type Ops_1Heap@2) (MapType0Type RefType))) (= (type Ops_1Mask@4) (MapType1Type RefType realType))) (= (type Ops_1Mask@3) (MapType1Type RefType realType))) (= (type Ops_1Heap@1) (MapType0Type RefType))) (= (type Ops_1Mask@2) (MapType1Type RefType realType))) (= (type ExhaleHeap@0) (MapType0Type RefType))) (= (type Ops_1Mask@0) (MapType1Type RefType realType))) (= (type UsedHeap@0) (MapType0Type RefType))) (= (type Heap@19) (MapType0Type RefType))) (= (type Heap@20) (MapType0Type RefType))) (= (type Heap@21) (MapType0Type RefType))) (= (type newPMask@4) (MapType1Type RefType boolType))) (= (type Heap@22) (MapType0Type RefType))) (= (type Heap@16) (MapType0Type RefType))) (= (type Heap@17) (MapType0Type RefType))) (= (type Heap@18) (MapType0Type RefType))) (= (type freshVersion@0) FrameTypeType)) (= (type Mask@18) (MapType1Type RefType realType))) (= (type Heap@9) (MapType0Type RefType))) (= (type Heap@13) (MapType0Type RefType))) (= (type Heap@14) (MapType0Type RefType))) (= (type newPMask@3) (MapType1Type RefType boolType))) (= (type Heap@15) (MapType0Type RefType))) (= (type Mask@9) (MapType1Type RefType realType))) (= (type Mask@17) (MapType1Type RefType realType))) (= (type UnfoldingHeap@9) (MapType0Type RefType))) (= (type UnfoldingMask@9) (MapType1Type RefType realType))) (= (type UnfoldingMask@5) (MapType1Type RefType realType))) (= (type UnfoldingHeap@8) (MapType0Type RefType))) (= (type UnfoldingMask@8) (MapType1Type RefType realType))) (= (type UnfoldingHeap@5) (MapType0Type RefType))) (= (type UnfoldingHeap@6) (MapType0Type RefType))) (= (type newPMask@2) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@7) (MapType0Type RefType))) (= (type UnfoldingMask@6) (MapType1Type RefType realType))) (= (type UnfoldingMask@7) (MapType1Type RefType realType))) (= (type Mask@16) (MapType1Type RefType realType))) (= (type Mask@15) (MapType1Type RefType realType))) (= (type hd) RefType)) (= (type ptr) RefType)) (= (type Heap@161) (MapType0Type RefType))) (= (type Mask@92) (MapType1Type RefType realType))) (= (type Heap@162) (MapType0Type RefType))) (= (type freshObj@0) RefType)) (= (type Heap@158) (MapType0Type RefType))) (= (type Heap@157) (MapType0Type RefType))) (= (type Heap@159) (MapType0Type RefType))) (= (type newPMask@54) (MapType1Type RefType boolType))) (= (type Heap@160) (MapType0Type RefType))) (= (type Heap@155) (MapType0Type RefType))) (= (type Heap@154) (MapType0Type RefType))) (= (type Heap@156) (MapType0Type RefType))) (= (type freshVersion@5) FrameTypeType)) (= (type Mask@91) (MapType1Type RefType realType))) (= (type Heap@150) (MapType0Type RefType))) (= (type Heap@151) (MapType0Type RefType))) (= (type Heap@152) (MapType0Type RefType))) (= (type newPMask@53) (MapType1Type RefType boolType))) (= (type Heap@153) (MapType0Type RefType))) (= (type Mask@87) (MapType1Type RefType realType))) (= (type Mask@90) (MapType1Type RefType realType))) (= (type UnfoldingHeap@69) (MapType0Type RefType))) (= (type UnfoldingMask@69) (MapType1Type RefType realType))) (= (type UnfoldingMask@65) (MapType1Type RefType realType))) (= (type UnfoldingHeap@68) (MapType0Type RefType))) (= (type UnfoldingMask@68) (MapType1Type RefType realType))) (= (type UnfoldingHeap@65) (MapType0Type RefType))) (= (type UnfoldingHeap@66) (MapType0Type RefType))) (= (type newPMask@52) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@67) (MapType0Type RefType))) (= (type UnfoldingMask@66) (MapType1Type RefType realType))) (= (type UnfoldingMask@67) (MapType1Type RefType realType))) (= (type Mask@89) (MapType1Type RefType realType))) (= (type Mask@88) (MapType1Type RefType realType))) (= (type Heap@146) (MapType0Type RefType))) (= (type Heap@147) (MapType0Type RefType))) (= (type Heap@148) (MapType0Type RefType))) (= (type newPMask@51) (MapType1Type RefType boolType))) (= (type Heap@149) (MapType0Type RefType))) (= (type Heap@143) (MapType0Type RefType))) (= (type Heap@144) (MapType0Type RefType))) (= (type Heap@145) (MapType0Type RefType))) (= (type freshVersion@4) FrameTypeType)) (= (type Mask@86) (MapType1Type RefType realType))) (= (type Heap@12) (MapType0Type RefType))) (= (type Heap@140) (MapType0Type RefType))) (= (type Heap@141) (MapType0Type RefType))) (= (type newPMask@50) (MapType1Type RefType boolType))) (= (type Heap@142) (MapType0Type RefType))) (= (type Mask@14) (MapType1Type RefType realType))) (= (type Mask@85) (MapType1Type RefType realType))) (= (type UnfoldingHeap@64) (MapType0Type RefType))) (= (type UnfoldingMask@64) (MapType1Type RefType realType))) (= (type UnfoldingMask@60) (MapType1Type RefType realType))) (= (type UnfoldingHeap@63) (MapType0Type RefType))) (= (type UnfoldingMask@63) (MapType1Type RefType realType))) (= (type UnfoldingHeap@60) (MapType0Type RefType))) (= (type UnfoldingHeap@61) (MapType0Type RefType))) (= (type newPMask@49) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@62) (MapType0Type RefType))) (= (type UnfoldingMask@61) (MapType1Type RefType realType))) (= (type UnfoldingMask@62) (MapType1Type RefType realType))) (= (type Mask@84) (MapType1Type RefType realType))) (= (type Mask@83) (MapType1Type RefType realType))) (= (type Heap@10) (MapType0Type RefType))) (= (type Mask@10) (MapType1Type RefType realType))) (= (type Mask@11) (MapType1Type RefType realType))) (= (type Mask@12) (MapType1Type RefType realType))) (= (type Mask@13) (MapType1Type RefType realType))) (= (type Heap@11) (MapType0Type RefType))) (= (type Heap@1) (MapType0Type RefType))) (= (type Mask@3) (MapType1Type RefType realType))) (= (type Heap@8) (MapType0Type RefType))) (= (type Mask@8) (MapType1Type RefType realType))) (= (type Heap@3) (MapType0Type RefType))) (= (type Mask@4) (MapType1Type RefType realType))) (= (type Heap@7) (MapType0Type RefType))) (= (type Mask@7) (MapType1Type RefType realType))) (= (type Heap@4) (MapType0Type RefType))) (= (type Heap@5) (MapType0Type RefType))) (= (type newPMask@1) (MapType1Type RefType boolType))) (= (type Heap@6) (MapType0Type RefType))) (= (type UnfoldingHeap@4) (MapType0Type RefType))) (= (type UnfoldingMask@4) (MapType1Type RefType realType))) (= (type UnfoldingMask@0) (MapType1Type RefType realType))) (= (type UnfoldingHeap@3) (MapType0Type RefType))) (= (type UnfoldingMask@3) (MapType1Type RefType realType))) (= (type UnfoldingHeap@0) (MapType0Type RefType))) (= (type UnfoldingHeap@1) (MapType0Type RefType))) (= (type newPMask@0) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@2) (MapType0Type RefType))) (= (type UnfoldingMask@1) (MapType1Type RefType realType))) (= (type UnfoldingMask@2) (MapType1Type RefType realType))) (= (type Mask@5) (MapType1Type RefType realType))) (= (type Mask@6) (MapType1Type RefType realType))) (= (type Heap@2) (MapType0Type RefType))) (= (type newVersion@1) FrameTypeType)) (= (type Mask@2) (MapType1Type RefType realType))) (= (type Mask@1) (MapType1Type RefType realType))) (= (type Heap@0) (MapType0Type RefType))) (= (type newVersion@0) FrameTypeType)) (= (type tmp) RefType)) (= (type PostMask@0) (MapType1Type RefType realType))) (= (type PostHeap@0) (MapType0Type RefType))))
(set-info :boogie-vc-id insert)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 927) (let ((anon16_correct true))
(let ((anon596_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 923) 920)) anon16_correct)))
(let ((anon596_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 921) (- 0 922)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38)))) (=> (= (ControlFlow 0 921) 920) anon16_correct))))))
(let ((anon12_correct true))
(let ((anon594_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 919) 916)) anon12_correct)))
(let ((anon594_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 917) (- 0 918)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38)))) (=> (= (ControlFlow 0 917) 916) anon12_correct))))))
(let ((anon8_correct true))
(let ((anon592_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 915) 912)) anon8_correct)))
(let ((anon592_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 913) (- 0 914)) (<= FullPerm (U_2_real (MapType1Select PostMask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select PostMask@0 null (List this@@38)))) (=> (= (ControlFlow 0 913) 912) anon8_correct))))))
(let ((anon595_Else_correct true))
(let ((anon589_Else_correct  (=> (<= index (|Seq#Length| (content Heap@@38 this@@38))) (=> (and (state PostHeap@0 PostMask@0) (state PostHeap@0 PostMask@0)) (and (and (and (and (and (and (=> (= (ControlFlow 0 924) 911) anon595_Else_correct) (=> (= (ControlFlow 0 924) 921) anon596_Then_correct)) (=> (= (ControlFlow 0 924) 923) anon596_Else_correct)) (=> (= (ControlFlow 0 924) 917) anon594_Then_correct)) (=> (= (ControlFlow 0 924) 919) anon594_Else_correct)) (=> (= (ControlFlow 0 924) 913) anon592_Then_correct)) (=> (= (ControlFlow 0 924) 915) anon592_Else_correct))))))
(let ((anon4_correct true))
(let ((anon590_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 910) 907)) anon4_correct)))
(let ((anon590_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 908) (- 0 909)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38)))) (=> (= (ControlFlow 0 908) 907) anon4_correct))))))
(let ((anon588_Then_correct  (=> (and (state PostHeap@0 ZeroMask) (= PostMask@0 (MapType1Store ZeroMask null (List this@@38) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (List this@@38))) FullPerm))))) (=> (and (and (state PostHeap@0 PostMask@0) (state PostHeap@0 PostMask@0)) (and (<= 0 index) (state PostHeap@0 PostMask@0))) (and (and (=> (= (ControlFlow 0 925) 924) anon589_Else_correct) (=> (= (ControlFlow 0 925) 908) anon590_Then_correct)) (=> (= (ControlFlow 0 925) 910) anon590_Else_correct))))))
(let ((anon143_correct true))
(let ((anon662_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 714) 711)) anon143_correct)))
(let ((anon662_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 712) (- 0 713)) (<= FullPerm (U_2_real (MapType1Select Ops_1Mask@5 null (lseg hd@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Ops_1Mask@5 null (lseg hd@0 null)))) (=> (= (ControlFlow 0 712) 711) anon143_correct))))))
(let ((anon139_correct true))
(let ((anon660_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 710) 707)) anon139_correct)))
(let ((anon660_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 708) (- 0 709)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38)))) (=> (= (ControlFlow 0 708) 707) anon139_correct))))))
(let ((anon135_correct true))
(let ((anon658_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 706) 703)) anon135_correct)))
(let ((anon658_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 704) (- 0 705)) (<= FullPerm (U_2_real (MapType1Select ResultMask@@0 null (lseg hd@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select ResultMask@@0 null (lseg hd@0 null)))) (=> (= (ControlFlow 0 704) 703) anon135_correct))))))
(let ((anon183_correct true))
(let ((anon683_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 637) 634)) anon183_correct)))
(let ((anon683_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 635) (- 0 636)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38)))) (=> (= (ControlFlow 0 635) 634) anon183_correct))))))
(let ((anon197_correct true))
(let ((anon690_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 623) 620)) anon197_correct)))
(let ((anon690_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 621) (- 0 622)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38)))) (=> (= (ControlFlow 0 621) 620) anon197_correct))))))
(let ((anon193_correct true))
(let ((anon688_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 619) 616)) anon193_correct)))
(let ((anon688_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 617) (- 0 618)) (<= FullPerm (U_2_real (MapType1Select Mask@29 null (lseg (MapType0Select ExhaleHeap@1 ptr@0 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@29 null (lseg (MapType0Select ExhaleHeap@1 ptr@0 next) null)))) (=> (= (ControlFlow 0 617) 616) anon193_correct))))))
(let ((anon235_correct true))
(let ((anon709_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 575) 572)) anon235_correct)))
(let ((anon709_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 573) (- 0 574)) (<= FullPerm (U_2_real (MapType1Select WandDefLHSMask@4 null (lseg ptr@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select WandDefLHSMask@4 null (lseg ptr@0 null)))) (=> (= (ControlFlow 0 573) 572) anon235_correct))))))
(let ((anon231_correct true))
(let ((anon707_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 571) 568)) anon231_correct)))
(let ((anon707_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 569) (- 0 570)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38)))) (=> (= (ControlFlow 0 569) 568) anon231_correct))))))
(let ((anon227_correct true))
(let ((anon705_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 567) 564)) anon227_correct)))
(let ((anon705_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 565) (- 0 566)) (<= FullPerm (U_2_real (MapType1Select WandDefRHSMask@4 null (lseg hd@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select WandDefRHSMask@4 null (lseg hd@0 null)))) (=> (= (ControlFlow 0 565) 564) anon227_correct))))))
(let ((anon708_Else_correct true))
(let ((anon702_Else_correct  (and (=> (= (ControlFlow 0 576) (- 0 578)) (>= (- index@1 1) 0)) (=> (>= (- index@1 1) 0) (and (=> (= (ControlFlow 0 576) (- 0 577)) (< (- index@1 1) (|Seq#Length| (content Heap@@38 this@@38)))) (=> (< (- index@1 1) (|Seq#Length| (content Heap@@38 this@@38))) (=> (and (= (U_2_int (|Seq#Index| (contentNodes WandDefLHSHeap@2 ptr@0 null) 0)) (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@1 1)))) (state WandDefLHSHeap@2 WandDefLHSMask@4)) (=> (and (and (state WandDefLHSHeap@2 WandDefLHSMask@4) (= WandDefRHSMask@4 (MapType1Store ZeroMask null (lseg hd@0 null) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (lseg hd@0 null))) FullPerm))))) (and (state WandDefRHSHeap@2 WandDefRHSMask@4) (state WandDefRHSHeap@2 WandDefRHSMask@4))) (and (and (and (and (and (and (=> (= (ControlFlow 0 576) 563) anon708_Else_correct) (=> (= (ControlFlow 0 576) 573) anon709_Then_correct)) (=> (= (ControlFlow 0 576) 575) anon709_Else_correct)) (=> (= (ControlFlow 0 576) 569) anon707_Then_correct)) (=> (= (ControlFlow 0 576) 571) anon707_Else_correct)) (=> (= (ControlFlow 0 576) 565) anon705_Then_correct)) (=> (= (ControlFlow 0 576) 567) anon705_Else_correct))))))))))
(let ((anon223_correct true))
(let ((anon703_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 562) 559)) anon223_correct)))
(let ((anon703_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 560) (- 0 561)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38)))) (=> (= (ControlFlow 0 560) 559) anon223_correct))))))
(let ((anon700_Else_correct  (and (=> (= (ControlFlow 0 579) (- 0 580)) (< 0 (|Seq#Length| (contentNodes WandDefLHSHeap@2 ptr@0 null)))) (=> (< 0 (|Seq#Length| (contentNodes WandDefLHSHeap@2 ptr@0 null))) (and (and (=> (= (ControlFlow 0 579) 576) anon702_Else_correct) (=> (= (ControlFlow 0 579) 560) anon703_Then_correct)) (=> (= (ControlFlow 0 579) 562) anon703_Else_correct))))))
(let ((anon219_correct true))
(let ((anon701_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 558) 555)) anon219_correct)))
(let ((anon701_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 556) (- 0 557)) (<= FullPerm (U_2_real (MapType1Select WandDefLHSMask@4 null (lseg ptr@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select WandDefLHSMask@4 null (lseg ptr@0 null)))) (=> (= (ControlFlow 0 556) 555) anon219_correct))))))
(let ((anon699_Then_correct  (=> (= WandDefLHSMask@4 (MapType1Store ZeroMask null (lseg ptr@0 null) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (lseg ptr@0 null))) FullPerm)))) (=> (and (state WandDefLHSHeap@2 WandDefLHSMask@4) (state WandDefLHSHeap@2 WandDefLHSMask@4)) (and (and (=> (= (ControlFlow 0 581) 579) anon700_Else_correct) (=> (= (ControlFlow 0 581) 556) anon701_Then_correct)) (=> (= (ControlFlow 0 581) 558) anon701_Else_correct))))))
(let ((anon699_Else_correct true))
(let ((anon215_correct  (=> (and (state Heap@139 Mask@29) (state Heap@139 Mask@29)) (and (=> (= (ControlFlow 0 582) 581) anon699_Then_correct) (=> (= (ControlFlow 0 582) 554) anon699_Else_correct)))))
(let ((anon214_correct  (=> (and (and (state Heap@138 Mask@29) (<= (U_2_int (MapType0Select Heap@138 ptr@0 data)) (U_2_int (MapType0Select Heap@138 (MapType0Select Heap@138 ptr@0 next) data)))) (and (= Heap@139 Heap@138) (= (ControlFlow 0 584) 582))) anon215_correct)))
(let ((anon698_Else_correct  (=> (= (MapType0Select Heap@134 ptr@0 next) null) (=> (and (= Heap@138 Heap@134) (= (ControlFlow 0 586) 584)) anon214_correct))))
(let ((anon698_Then_correct  (=> (not (= (MapType0Select Heap@134 ptr@0 next) null)) (=> (and (= Heap@135 (MapType0Store Heap@134 null (|lseg#sm| (MapType0Select Heap@134 ptr@0 next) null) (MapType1Store (MapType0Select Heap@134 null (|lseg#sm| (MapType0Select Heap@134 ptr@0 next) null)) (MapType0Select Heap@134 ptr@0 next) data (bool_2_U true)))) (= Heap@136 (MapType0Store Heap@135 null (|lseg#sm| (MapType0Select Heap@135 ptr@0 next) null) (MapType1Store (MapType0Select Heap@135 null (|lseg#sm| (MapType0Select Heap@135 ptr@0 next) null)) (MapType0Select Heap@135 ptr@0 next) next (bool_2_U true))))) (=> (and (and (forall ((o_49 T@U) (f_53 T@U) ) (! (let ((B@@11 (FieldTypeInv1 (type f_53))))
(let ((A@@12 (FieldTypeInv0 (type f_53))))
 (=> (and (and (= (type o_49) RefType) (= (type f_53) (FieldType A@@12 B@@11))) (or (U_2_bool (MapType1Select (MapType0Select Heap@136 null (|lseg#sm| (MapType0Select Heap@136 ptr@0 next) null)) o_49 f_53)) (U_2_bool (MapType1Select (MapType0Select Heap@136 null (|lseg#sm| (MapType0Select Heap@136 (MapType0Select Heap@136 ptr@0 next) next) null)) o_49 f_53)))) (U_2_bool (MapType1Select newPMask@48 o_49 f_53)))))
 :qid |stdinbpl.3759:43|
 :skolemid |154|
 :pattern ( (MapType1Select newPMask@48 o_49 f_53))
)) (= Heap@137 (MapType0Store Heap@136 null (|lseg#sm| (MapType0Select Heap@136 ptr@0 next) null) newPMask@48))) (and (= Heap@138 Heap@137) (= (ControlFlow 0 585) 584))) anon214_correct)))))
(let ((anon212_correct  (=> (state Heap@134 Mask@29) (and (=> (= (ControlFlow 0 587) 585) anon698_Then_correct) (=> (= (ControlFlow 0 587) 586) anon698_Else_correct)))))
(let ((anon697_Else_correct  (=> (= (MapType0Select ExhaleHeap@1 ptr@0 next) null) (=> (and (= Heap@134 ExhaleHeap@1) (= (ControlFlow 0 589) 587)) anon212_correct))))
(let ((anon697_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@1 ptr@0 next) null)) (=> (and (= Heap@131 (MapType0Store ExhaleHeap@1 null (|lseg#sm| (MapType0Select ExhaleHeap@1 ptr@0 next) null) (MapType1Store (MapType0Select ExhaleHeap@1 null (|lseg#sm| (MapType0Select ExhaleHeap@1 ptr@0 next) null)) (MapType0Select ExhaleHeap@1 ptr@0 next) data (bool_2_U true)))) (= Heap@132 (MapType0Store Heap@131 null (|lseg#sm| (MapType0Select Heap@131 ptr@0 next) null) (MapType1Store (MapType0Select Heap@131 null (|lseg#sm| (MapType0Select Heap@131 ptr@0 next) null)) (MapType0Select Heap@131 ptr@0 next) next (bool_2_U true))))) (=> (and (and (forall ((o_48 T@U) (f_52 T@U) ) (! (let ((B@@12 (FieldTypeInv1 (type f_52))))
(let ((A@@13 (FieldTypeInv0 (type f_52))))
 (=> (and (and (= (type o_48) RefType) (= (type f_52) (FieldType A@@13 B@@12))) (or (U_2_bool (MapType1Select (MapType0Select Heap@132 null (|lseg#sm| (MapType0Select Heap@132 ptr@0 next) null)) o_48 f_52)) (U_2_bool (MapType1Select (MapType0Select Heap@132 null (|lseg#sm| (MapType0Select Heap@132 (MapType0Select Heap@132 ptr@0 next) next) null)) o_48 f_52)))) (U_2_bool (MapType1Select newPMask@47 o_48 f_52)))))
 :qid |stdinbpl.3746:43|
 :skolemid |153|
 :pattern ( (MapType1Select newPMask@47 o_48 f_52))
)) (= Heap@133 (MapType0Store Heap@132 null (|lseg#sm| (MapType0Select Heap@132 ptr@0 next) null) newPMask@47))) (and (= Heap@134 Heap@133) (= (ControlFlow 0 588) 587))) anon212_correct)))))
(let ((anon210_correct  (=> (state UnfoldingHeap@59 UnfoldingMask@59) (and (=> (= (ControlFlow 0 590) (- 0 593)) (HasDirectPerm UnfoldingMask@59 ptr@0 next)) (=> (HasDirectPerm UnfoldingMask@59 ptr@0 next) (and (=> (= (ControlFlow 0 590) (- 0 592)) (HasDirectPerm UnfoldingMask@59 ptr@0 next)) (=> (HasDirectPerm UnfoldingMask@59 ptr@0 next) (and (=> (= (ControlFlow 0 590) (- 0 591)) (HasDirectPerm UnfoldingMask@59 (MapType0Select UnfoldingHeap@59 ptr@0 next) data)) (=> (HasDirectPerm UnfoldingMask@59 (MapType0Select UnfoldingHeap@59 ptr@0 next) data) (and (=> (= (ControlFlow 0 590) 588) anon697_Then_correct) (=> (= (ControlFlow 0 590) 589) anon697_Else_correct)))))))))))
(let ((anon209_correct  (=> (and (and (state UnfoldingHeap@58 UnfoldingMask@58) (= UnfoldingHeap@59 UnfoldingHeap@58)) (and (= UnfoldingMask@59 UnfoldingMask@58) (= (ControlFlow 0 595) 590))) anon210_correct)))
(let ((anon696_Else_correct  (=> (= (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) null) (=> (and (= UnfoldingHeap@58 ExhaleHeap@1) (= (ControlFlow 0 597) 595)) anon209_correct))))
(let ((anon696_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) null)) (=> (and (= UnfoldingHeap@55 (MapType0Store ExhaleHeap@1 null (|lseg#sm| (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) null) (MapType1Store (MapType0Select ExhaleHeap@1 null (|lseg#sm| (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) null)) (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) data (bool_2_U true)))) (= UnfoldingHeap@56 (MapType0Store UnfoldingHeap@55 null (|lseg#sm| (MapType0Select UnfoldingHeap@55 (MapType0Select UnfoldingHeap@55 ptr@0 next) next) null) (MapType1Store (MapType0Select UnfoldingHeap@55 null (|lseg#sm| (MapType0Select UnfoldingHeap@55 (MapType0Select UnfoldingHeap@55 ptr@0 next) next) null)) (MapType0Select UnfoldingHeap@55 (MapType0Select UnfoldingHeap@55 ptr@0 next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_47 T@U) (f_51 T@U) ) (! (let ((B@@13 (FieldTypeInv1 (type f_51))))
(let ((A@@14 (FieldTypeInv0 (type f_51))))
 (=> (and (and (= (type o_47) RefType) (= (type f_51) (FieldType A@@14 B@@13))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@56 null (|lseg#sm| (MapType0Select UnfoldingHeap@56 (MapType0Select UnfoldingHeap@56 ptr@0 next) next) null)) o_47 f_51)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@56 null (|lseg#sm| (MapType0Select UnfoldingHeap@56 (MapType0Select UnfoldingHeap@56 (MapType0Select UnfoldingHeap@56 ptr@0 next) next) next) null)) o_47 f_51)))) (U_2_bool (MapType1Select newPMask@46 o_47 f_51)))))
 :qid |stdinbpl.3725:45|
 :skolemid |152|
 :pattern ( (MapType1Select newPMask@46 o_47 f_51))
)) (= UnfoldingHeap@57 (MapType0Store UnfoldingHeap@56 null (|lseg#sm| (MapType0Select UnfoldingHeap@56 (MapType0Select UnfoldingHeap@56 ptr@0 next) next) null) newPMask@46))) (and (= UnfoldingHeap@58 UnfoldingHeap@57) (= (ControlFlow 0 596) 595))) anon209_correct)))))
(let ((anon207_correct  (=> (and (state Unfolding1Heap@34 Unfolding1Mask@34) (=> (not (= (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) null)) (<= (U_2_int (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) data)) (U_2_int (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) data))))) (and (=> (= (ControlFlow 0 598) 596) anon696_Then_correct) (=> (= (ControlFlow 0 598) 597) anon696_Else_correct)))))
(let ((anon206_correct  (=> (and (and (state Unfolding1Heap@33 Unfolding1Mask@33) (= Unfolding1Heap@34 Unfolding1Heap@33)) (and (= Unfolding1Mask@34 Unfolding1Mask@33) (= (ControlFlow 0 600) 598))) anon207_correct)))
(let ((anon695_Else_correct  (=> (= (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) next) null) (=> (and (= Unfolding1Heap@33 ExhaleHeap@1) (= (ControlFlow 0 602) 600)) anon206_correct))))
(let ((anon695_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) next) null)) (=> (and (= Unfolding1Heap@30 (MapType0Store ExhaleHeap@1 null (|lseg#sm| (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) next) null) (MapType1Store (MapType0Select ExhaleHeap@1 null (|lseg#sm| (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) next) null)) (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) next) data (bool_2_U true)))) (= Unfolding1Heap@31 (MapType0Store Unfolding1Heap@30 null (|lseg#sm| (MapType0Select Unfolding1Heap@30 (MapType0Select Unfolding1Heap@30 (MapType0Select Unfolding1Heap@30 ptr@0 next) next) next) null) (MapType1Store (MapType0Select Unfolding1Heap@30 null (|lseg#sm| (MapType0Select Unfolding1Heap@30 (MapType0Select Unfolding1Heap@30 (MapType0Select Unfolding1Heap@30 ptr@0 next) next) next) null)) (MapType0Select Unfolding1Heap@30 (MapType0Select Unfolding1Heap@30 (MapType0Select Unfolding1Heap@30 ptr@0 next) next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_46 T@U) (f_50 T@U) ) (! (let ((B@@14 (FieldTypeInv1 (type f_50))))
(let ((A@@15 (FieldTypeInv0 (type f_50))))
 (=> (and (and (= (type o_46) RefType) (= (type f_50) (FieldType A@@15 B@@14))) (or (U_2_bool (MapType1Select (MapType0Select Unfolding1Heap@31 null (|lseg#sm| (MapType0Select Unfolding1Heap@31 (MapType0Select Unfolding1Heap@31 (MapType0Select Unfolding1Heap@31 ptr@0 next) next) next) null)) o_46 f_50)) (U_2_bool (MapType1Select (MapType0Select Unfolding1Heap@31 null (|lseg#sm| (MapType0Select Unfolding1Heap@31 (MapType0Select Unfolding1Heap@31 (MapType0Select Unfolding1Heap@31 (MapType0Select Unfolding1Heap@31 ptr@0 next) next) next) next) null)) o_46 f_50)))) (U_2_bool (MapType1Select newPMask@45 o_46 f_50)))))
 :qid |stdinbpl.3709:49|
 :skolemid |151|
 :pattern ( (MapType1Select newPMask@45 o_46 f_50))
)) (= Unfolding1Heap@32 (MapType0Store Unfolding1Heap@31 null (|lseg#sm| (MapType0Select Unfolding1Heap@31 (MapType0Select Unfolding1Heap@31 (MapType0Select Unfolding1Heap@31 ptr@0 next) next) next) null) newPMask@45))) (and (= Unfolding1Heap@33 Unfolding1Heap@32) (= (ControlFlow 0 601) 600))) anon206_correct)))))
(let ((anon694_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) null)) (=> (and (not (= (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) null)) (= Unfolding1Mask@31 (MapType1Store Unfolding1Mask@30 (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) data (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@30 (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) data)) FullPerm))))) (=> (and (and (and (state ExhaleHeap@1 Unfolding1Mask@31) (not (= (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) null))) (and (= Unfolding1Mask@32 (MapType1Store Unfolding1Mask@31 (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) next (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@31 (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) next)) FullPerm)))) (state ExhaleHeap@1 Unfolding1Mask@32))) (and (and (= Unfolding1Mask@33 (MapType1Store Unfolding1Mask@32 null (lseg (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) next) null) (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@32 null (lseg (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) null) (MapType0Select ExhaleHeap@1 null (lseg (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) null)) (lseg (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) next) null) (MapType0Select ExhaleHeap@1 null (lseg (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) next) null)))) (and (state ExhaleHeap@1 Unfolding1Mask@33) (=> (not (= (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) next) null)) (<= (U_2_int (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) data)) (U_2_int (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) next) data))))))) (and (=> (= (ControlFlow 0 603) 601) anon695_Then_correct) (=> (= (ControlFlow 0 603) 602) anon695_Else_correct)))))))
(let ((anon694_Else_correct  (=> (and (and (= (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) null) (= Unfolding1Heap@34 ExhaleHeap@1)) (and (= Unfolding1Mask@34 Unfolding1Mask@30) (= (ControlFlow 0 599) 598))) anon207_correct)))
(let ((anon693_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@1 ptr@0 next) null)) (=> (and (and (not (= (MapType0Select ExhaleHeap@1 ptr@0 next) null)) (= UnfoldingMask@56 (MapType1Store UnfoldingMask@55 (MapType0Select ExhaleHeap@1 ptr@0 next) data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@55 (MapType0Select ExhaleHeap@1 ptr@0 next) data)) FullPerm))))) (and (state ExhaleHeap@1 UnfoldingMask@56) (not (= (MapType0Select ExhaleHeap@1 ptr@0 next) null)))) (=> (and (and (and (= UnfoldingMask@57 (MapType1Store UnfoldingMask@56 (MapType0Select ExhaleHeap@1 ptr@0 next) next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@56 (MapType0Select ExhaleHeap@1 ptr@0 next) next)) FullPerm)))) (state ExhaleHeap@1 UnfoldingMask@57)) (and (= UnfoldingMask@58 (MapType1Store UnfoldingMask@57 null (lseg (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@57 null (lseg (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select ExhaleHeap@1 ptr@0 next) null) (MapType0Select ExhaleHeap@1 null (lseg (MapType0Select ExhaleHeap@1 ptr@0 next) null)) (lseg (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) null) (MapType0Select ExhaleHeap@1 null (lseg (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) null))))) (and (and (state ExhaleHeap@1 UnfoldingMask@58) (|lseg#trigger| ExhaleHeap@1 (lseg (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) null))) (and (= (MapType0Select ExhaleHeap@1 null (lseg (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) null)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) null)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) data)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) next)) (MapType0Select ExhaleHeap@1 null (lseg (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) next) null)))) EmptyFrame))) (= Unfolding1Mask@30 (MapType1Store UnfoldingMask@58 null (lseg (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) null) (real_2_U (- (U_2_real (MapType1Select UnfoldingMask@58 null (lseg (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) null))) FullPerm))))))) (and (=> (= (ControlFlow 0 604) 603) anon694_Then_correct) (=> (= (ControlFlow 0 604) 599) anon694_Else_correct)))))))
(let ((anon693_Else_correct  (=> (and (and (= (MapType0Select ExhaleHeap@1 ptr@0 next) null) (= UnfoldingHeap@59 ExhaleHeap@1)) (and (= UnfoldingMask@59 UnfoldingMask@55) (= (ControlFlow 0 594) 590))) anon210_correct)))
(let ((anon202_correct  (=> (= UnfoldingMask@55 (MapType1Store Mask@29 null (lseg (MapType0Select ExhaleHeap@1 ptr@0 next) null) (real_2_U (- (U_2_real (MapType1Select Mask@29 null (lseg (MapType0Select ExhaleHeap@1 ptr@0 next) null))) FullPerm)))) (and (=> (= (ControlFlow 0 605) 604) anon693_Then_correct) (=> (= (ControlFlow 0 605) 594) anon693_Else_correct)))))
(let ((anon692_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 608) 605)) anon202_correct)))
(let ((anon692_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 606) (- 0 607)) (<= FullPerm (U_2_real (MapType1Select Mask@29 null (lseg (MapType0Select ExhaleHeap@1 ptr@0 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@29 null (lseg (MapType0Select ExhaleHeap@1 ptr@0 next) null)))) (=> (= (ControlFlow 0 606) 605) anon202_correct))))))
(let ((anon691_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@1 ptr@0 next) null)) (and (=> (= (ControlFlow 0 609) (- 0 610)) (HasDirectPerm Mask@29 ptr@0 data)) (=> (HasDirectPerm Mask@29 ptr@0 data) (=> (and (|lseg#trigger| ExhaleHeap@1 (lseg (MapType0Select ExhaleHeap@1 ptr@0 next) null)) (= (MapType0Select ExhaleHeap@1 null (lseg (MapType0Select ExhaleHeap@1 ptr@0 next) null)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@1 ptr@0 next) null)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) data)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next)) (MapType0Select ExhaleHeap@1 null (lseg (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) next) null)))) EmptyFrame)))) (and (=> (= (ControlFlow 0 609) 606) anon692_Then_correct) (=> (= (ControlFlow 0 609) 608) anon692_Else_correct))))))))
(let ((anon691_Else_correct  (=> (= (MapType0Select ExhaleHeap@1 ptr@0 next) null) (=> (and (= Heap@139 ExhaleHeap@1) (= (ControlFlow 0 583) 582)) anon215_correct))))
(let ((anon199_correct  (=> (state ExhaleHeap@1 Mask@29) (and (=> (= (ControlFlow 0 611) (- 0 613)) (HasDirectPerm Mask@29 ptr@0 data)) (=> (HasDirectPerm Mask@29 ptr@0 data) (=> (and (< (U_2_int (MapType0Select ExhaleHeap@1 ptr@0 data)) elem) (state ExhaleHeap@1 Mask@29)) (and (=> (= (ControlFlow 0 611) (- 0 612)) (HasDirectPerm Mask@29 ptr@0 next)) (=> (HasDirectPerm Mask@29 ptr@0 next) (and (=> (= (ControlFlow 0 611) 609) anon691_Then_correct) (=> (= (ControlFlow 0 611) 583) anon691_Else_correct))))))))))
(let ((anon689_Else_correct  (=> (and (|Seq#Equal| (contentNodes ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) null) (|Seq#Drop| (content Heap@@38 this@@38) index@1)) (= (ControlFlow 0 615) 611)) anon199_correct)))
(let ((anon686_Then_correct  (=> (and (not (= (MapType0Select ExhaleHeap@1 ptr@0 next) null)) (state ExhaleHeap@1 Mask@29)) (and (=> (= (ControlFlow 0 624) (- 0 625)) (HasDirectPerm Mask@29 ptr@0 next)) (=> (HasDirectPerm Mask@29 ptr@0 next) (and (and (and (and (=> (= (ControlFlow 0 624) 615) anon689_Else_correct) (=> (= (ControlFlow 0 624) 621) anon690_Then_correct)) (=> (= (ControlFlow 0 624) 623) anon690_Else_correct)) (=> (= (ControlFlow 0 624) 617) anon688_Then_correct)) (=> (= (ControlFlow 0 624) 619) anon688_Else_correct)))))))
(let ((anon686_Else_correct  (=> (and (= (MapType0Select ExhaleHeap@1 ptr@0 next) null) (= (ControlFlow 0 614) 611)) anon199_correct)))
(let ((anon684_Else_correct  (and (=> (= (ControlFlow 0 626) (- 0 629)) (>= (- index@1 1) 0)) (=> (>= (- index@1 1) 0) (and (=> (= (ControlFlow 0 626) (- 0 628)) (< (- index@1 1) (|Seq#Length| (content Heap@@38 this@@38)))) (=> (< (- index@1 1) (|Seq#Length| (content Heap@@38 this@@38))) (=> (and (= (U_2_int (MapType0Select ExhaleHeap@1 ptr@0 data)) (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@1 1)))) (state ExhaleHeap@1 Mask@29)) (and (=> (= (ControlFlow 0 626) (- 0 627)) (HasDirectPerm Mask@29 ptr@0 next)) (=> (HasDirectPerm Mask@29 ptr@0 next) (and (=> (= (ControlFlow 0 626) 624) anon686_Then_correct) (=> (= (ControlFlow 0 626) 614) anon686_Else_correct)))))))))))
(let ((anon188_correct true))
(let ((anon685_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 553) 550)) anon188_correct)))
(let ((anon685_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 551) (- 0 552)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38)))) (=> (= (ControlFlow 0 551) 550) anon188_correct))))))
(let ((anon185_correct  (=> (and (state ExhaleHeap@1 Mask@29) (state ExhaleHeap@1 Mask@29)) (and (=> (= (ControlFlow 0 630) (- 0 631)) (HasDirectPerm Mask@29 ptr@0 data)) (=> (HasDirectPerm Mask@29 ptr@0 data) (and (and (=> (= (ControlFlow 0 630) 626) anon684_Else_correct) (=> (= (ControlFlow 0 630) 551) anon685_Then_correct)) (=> (= (ControlFlow 0 630) 553) anon685_Else_correct)))))))
(let ((anon682_Else_correct  (=> (and (= index@1 (|Seq#Length| (content Heap@@38 this@@38))) (= (ControlFlow 0 633) 630)) anon185_correct)))
(let ((anon681_Then_correct  (=> (and (= (MapType0Select ExhaleHeap@1 ptr@0 next) null) (state ExhaleHeap@1 Mask@29)) (and (and (=> (= (ControlFlow 0 638) 633) anon682_Else_correct) (=> (= (ControlFlow 0 638) 635) anon683_Then_correct)) (=> (= (ControlFlow 0 638) 637) anon683_Else_correct)))))
(let ((anon681_Else_correct  (=> (and (not (= (MapType0Select ExhaleHeap@1 ptr@0 next) null)) (= (ControlFlow 0 632) 630)) anon185_correct)))
(let ((anon679_Else_correct  (=> (and (<= index@1 (|Seq#Length| (content Heap@@38 this@@38))) (state ExhaleHeap@1 Mask@29)) (and (=> (= (ControlFlow 0 639) (- 0 640)) (HasDirectPerm Mask@29 ptr@0 next)) (=> (HasDirectPerm Mask@29 ptr@0 next) (and (=> (= (ControlFlow 0 639) 638) anon681_Then_correct) (=> (= (ControlFlow 0 639) 632) anon681_Else_correct)))))))
(let ((anon178_correct true))
(let ((anon680_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 549) 546)) anon178_correct)))
(let ((anon680_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 547) (- 0 548)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38)))) (=> (= (ControlFlow 0 547) 546) anon178_correct))))))
(let ((anon678_Then_correct  (=> (and (not (= ptr@0 null)) (= Mask@27 (MapType1Store Mask@26 ptr@0 next (real_2_U (+ (U_2_real (MapType1Select Mask@26 ptr@0 next)) FullPerm))))) (=> (and (and (state ExhaleHeap@1 Mask@27) (not (= ptr@0 null))) (and (= Mask@28 (MapType1Store Mask@27 ptr@0 data (real_2_U (+ (U_2_real (MapType1Select Mask@27 ptr@0 data)) FullPerm)))) (state ExhaleHeap@1 Mask@28))) (and (=> (= (ControlFlow 0 641) (- 0 642)) (HasDirectPerm Mask@28 ptr@0 next)) (=> (HasDirectPerm Mask@28 ptr@0 next) (=> (= Mask@29 (MapType1Store Mask@28 null (lseg (MapType0Select ExhaleHeap@1 ptr@0 next) null) (real_2_U (+ (U_2_real (MapType1Select Mask@28 null (lseg (MapType0Select ExhaleHeap@1 ptr@0 next) null))) FullPerm)))) (=> (and (and (state ExhaleHeap@1 Mask@29) (state ExhaleHeap@1 Mask@29)) (and (<= 1 index@1) (state ExhaleHeap@1 Mask@29))) (and (and (=> (= (ControlFlow 0 641) 639) anon679_Else_correct) (=> (= (ControlFlow 0 641) 547) anon680_Then_correct)) (=> (= (ControlFlow 0 641) 549) anon680_Else_correct))))))))))
(let ((anon297_correct true))
(let ((anon740_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 475) 472)) anon297_correct)))
(let ((anon740_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 473) (- 0 474)) (<= FullPerm (U_2_real (MapType1Select WandDefLHSMask@0 null (lseg ptr@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select WandDefLHSMask@0 null (lseg ptr@0 null)))) (=> (= (ControlFlow 0 473) 472) anon297_correct))))))
(let ((anon293_correct true))
(let ((anon738_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 471) 468)) anon293_correct)))
(let ((anon738_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 469) (- 0 470)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38)))) (=> (= (ControlFlow 0 469) 468) anon293_correct))))))
(let ((anon289_correct true))
(let ((anon736_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 467) 464)) anon289_correct)))
(let ((anon736_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 465) (- 0 466)) (<= FullPerm (U_2_real (MapType1Select WandDefRHSMask@2 null (lseg hd@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select WandDefRHSMask@2 null (lseg hd@0 null)))) (=> (= (ControlFlow 0 465) 464) anon289_correct))))))
(let ((anon739_Else_correct true))
(let ((anon733_Else_correct  (and (=> (= (ControlFlow 0 476) (- 0 478)) (>= (- index@1 1) 0)) (=> (>= (- index@1 1) 0) (and (=> (= (ControlFlow 0 476) (- 0 477)) (< (- index@1 1) (|Seq#Length| (content Heap@@38 this@@38)))) (=> (< (- index@1 1) (|Seq#Length| (content Heap@@38 this@@38))) (=> (and (= (U_2_int (|Seq#Index| (contentNodes WandDefLHSHeap@0 ptr@0 null) 0)) (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@1 1)))) (state WandDefLHSHeap@0 WandDefLHSMask@0)) (=> (and (and (state WandDefLHSHeap@0 WandDefLHSMask@0) (= WandDefRHSMask@2 (MapType1Store ZeroMask null (lseg hd@0 null) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (lseg hd@0 null))) FullPerm))))) (and (state WandDefRHSHeap@1 WandDefRHSMask@2) (state WandDefRHSHeap@1 WandDefRHSMask@2))) (and (and (and (and (and (and (=> (= (ControlFlow 0 476) 463) anon739_Else_correct) (=> (= (ControlFlow 0 476) 473) anon740_Then_correct)) (=> (= (ControlFlow 0 476) 475) anon740_Else_correct)) (=> (= (ControlFlow 0 476) 469) anon738_Then_correct)) (=> (= (ControlFlow 0 476) 471) anon738_Else_correct)) (=> (= (ControlFlow 0 476) 465) anon736_Then_correct)) (=> (= (ControlFlow 0 476) 467) anon736_Else_correct))))))))))
(let ((anon285_correct true))
(let ((anon734_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 462) 459)) anon285_correct)))
(let ((anon734_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 460) (- 0 461)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38)))) (=> (= (ControlFlow 0 460) 459) anon285_correct))))))
(let ((anon731_Else_correct  (and (=> (= (ControlFlow 0 479) (- 0 480)) (< 0 (|Seq#Length| (contentNodes WandDefLHSHeap@0 ptr@0 null)))) (=> (< 0 (|Seq#Length| (contentNodes WandDefLHSHeap@0 ptr@0 null))) (and (and (=> (= (ControlFlow 0 479) 476) anon733_Else_correct) (=> (= (ControlFlow 0 479) 460) anon734_Then_correct)) (=> (= (ControlFlow 0 479) 462) anon734_Else_correct))))))
(let ((anon281_correct true))
(let ((anon732_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 458) 455)) anon281_correct)))
(let ((anon732_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 456) (- 0 457)) (<= FullPerm (U_2_real (MapType1Select WandDefLHSMask@0 null (lseg ptr@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select WandDefLHSMask@0 null (lseg ptr@0 null)))) (=> (= (ControlFlow 0 456) 455) anon281_correct))))))
(let ((anon730_Then_correct  (=> (= WandDefLHSMask@0 (MapType1Store ZeroMask null (lseg ptr@0 null) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (lseg ptr@0 null))) FullPerm)))) (=> (and (state WandDefLHSHeap@0 WandDefLHSMask@0) (state WandDefLHSHeap@0 WandDefLHSMask@0)) (and (and (=> (= (ControlFlow 0 481) 479) anon731_Else_correct) (=> (= (ControlFlow 0 481) 456) anon732_Then_correct)) (=> (= (ControlFlow 0 481) 458) anon732_Else_correct))))))
(let ((anon415_correct true))
(let ((anon802_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 302) 299)) anon415_correct)))
(let ((anon802_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 300) (- 0 301)) (<= FullPerm (U_2_real (MapType1Select WandDefLHSMask@1 null (lseg ptr@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select WandDefLHSMask@1 null (lseg ptr@0 null)))) (=> (= (ControlFlow 0 300) 299) anon415_correct))))))
(let ((anon411_correct true))
(let ((anon800_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 298) 295)) anon411_correct)))
(let ((anon800_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 296) (- 0 297)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38)))) (=> (= (ControlFlow 0 296) 295) anon411_correct))))))
(let ((anon407_correct true))
(let ((anon798_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 294) 291)) anon407_correct)))
(let ((anon798_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 292) (- 0 293)) (<= FullPerm (U_2_real (MapType1Select WandDefRHSMask@0 null (lseg hd@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select WandDefRHSMask@0 null (lseg hd@0 null)))) (=> (= (ControlFlow 0 292) 291) anon407_correct))))))
(let ((anon801_Else_correct true))
(let ((anon795_Else_correct  (and (=> (= (ControlFlow 0 303) (- 0 305)) (>= (- index@2 2) 0)) (=> (>= (- index@2 2) 0) (and (=> (= (ControlFlow 0 303) (- 0 304)) (< (- index@2 2) (|Seq#Length| (content Heap@@38 this@@38)))) (=> (< (- index@2 2) (|Seq#Length| (content Heap@@38 this@@38))) (=> (and (= (U_2_int (|Seq#Index| (contentNodes WandDefLHSHeap@1 ptr@0 null) 0)) (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 2)))) (state WandDefLHSHeap@1 WandDefLHSMask@1)) (=> (and (and (state WandDefLHSHeap@1 WandDefLHSMask@1) (= WandDefRHSMask@0 (MapType1Store ZeroMask null (lseg hd@0 null) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (lseg hd@0 null))) FullPerm))))) (and (state WandDefRHSHeap@0 WandDefRHSMask@0) (state WandDefRHSHeap@0 WandDefRHSMask@0))) (and (and (and (and (and (and (=> (= (ControlFlow 0 303) 290) anon801_Else_correct) (=> (= (ControlFlow 0 303) 300) anon802_Then_correct)) (=> (= (ControlFlow 0 303) 302) anon802_Else_correct)) (=> (= (ControlFlow 0 303) 296) anon800_Then_correct)) (=> (= (ControlFlow 0 303) 298) anon800_Else_correct)) (=> (= (ControlFlow 0 303) 292) anon798_Then_correct)) (=> (= (ControlFlow 0 303) 294) anon798_Else_correct))))))))))
(let ((anon403_correct true))
(let ((anon796_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 289) 286)) anon403_correct)))
(let ((anon796_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 287) (- 0 288)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38)))) (=> (= (ControlFlow 0 287) 286) anon403_correct))))))
(let ((anon793_Else_correct  (and (=> (= (ControlFlow 0 306) (- 0 307)) (< 0 (|Seq#Length| (contentNodes WandDefLHSHeap@1 ptr@0 null)))) (=> (< 0 (|Seq#Length| (contentNodes WandDefLHSHeap@1 ptr@0 null))) (and (and (=> (= (ControlFlow 0 306) 303) anon795_Else_correct) (=> (= (ControlFlow 0 306) 287) anon796_Then_correct)) (=> (= (ControlFlow 0 306) 289) anon796_Else_correct))))))
(let ((anon399_correct true))
(let ((anon794_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 285) 282)) anon399_correct)))
(let ((anon794_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 283) (- 0 284)) (<= FullPerm (U_2_real (MapType1Select WandDefLHSMask@1 null (lseg ptr@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select WandDefLHSMask@1 null (lseg ptr@0 null)))) (=> (= (ControlFlow 0 283) 282) anon399_correct))))))
(let ((anon792_Then_correct  (=> (= WandDefLHSMask@1 (MapType1Store ZeroMask null (lseg ptr@0 null) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (lseg ptr@0 null))) FullPerm)))) (=> (and (state WandDefLHSHeap@1 WandDefLHSMask@1) (state WandDefLHSHeap@1 WandDefLHSMask@1)) (and (and (=> (= (ControlFlow 0 308) 306) anon793_Else_correct) (=> (= (ControlFlow 0 308) 283) anon794_Then_correct)) (=> (= (ControlFlow 0 308) 285) anon794_Else_correct))))))
(let ((anon450_correct true))
(let ((anon820_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 244) 241)) anon450_correct)))
(let ((anon820_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 242) (- 0 243)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38)))) (=> (= (ControlFlow 0 242) 241) anon450_correct))))))
(let ((anon446_correct true))
(let ((anon818_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 237) 234)) anon446_correct)))
(let ((anon818_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 235) (- 0 236)) (<= FullPerm (U_2_real (MapType1Select Result_6Mask null (lseg ptr@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Result_6Mask null (lseg ptr@0 null)))) (=> (= (ControlFlow 0 235) 234) anon446_correct))))))
(let ((anon478_correct true))
(let ((anon834_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 210) 207)) anon478_correct)))
(let ((anon834_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 208) (- 0 209)) (<= FullPerm (U_2_real (MapType1Select Ops_3Mask@5 null (lseg ptr@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Ops_3Mask@5 null (lseg ptr@1 null)))) (=> (= (ControlFlow 0 208) 207) anon478_correct))))))
(let ((anon474_correct true))
(let ((anon832_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 206) 203)) anon474_correct)))
(let ((anon832_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 204) (- 0 205)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38)))) (=> (= (ControlFlow 0 204) 203) anon474_correct))))))
(let ((anon470_correct true))
(let ((anon830_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 202) 199)) anon470_correct)))
(let ((anon830_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 200) (- 0 201)) (<= FullPerm (U_2_real (MapType1Select Result_7Mask null (lseg hd@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Result_7Mask null (lseg hd@0 null)))) (=> (= (ControlFlow 0 200) 199) anon470_correct))))))
(let ((anon509_correct true))
(let ((anon849_Else_correct  (=> (= (MapType0Select Heap@126 ptr@1 next) null) (=> (and (= Heap@130 Heap@126) (= (ControlFlow 0 141) 139)) anon509_correct))))
(let ((anon849_Then_correct  (=> (not (= (MapType0Select Heap@126 ptr@1 next) null)) (=> (and (= Heap@127 (MapType0Store Heap@126 null (|lseg#sm| (MapType0Select Heap@126 ptr@1 next) null) (MapType1Store (MapType0Select Heap@126 null (|lseg#sm| (MapType0Select Heap@126 ptr@1 next) null)) (MapType0Select Heap@126 ptr@1 next) data (bool_2_U true)))) (= Heap@128 (MapType0Store Heap@127 null (|lseg#sm| (MapType0Select Heap@127 ptr@1 next) null) (MapType1Store (MapType0Select Heap@127 null (|lseg#sm| (MapType0Select Heap@127 ptr@1 next) null)) (MapType0Select Heap@127 ptr@1 next) next (bool_2_U true))))) (=> (and (and (forall ((o_72 T@U) (f_76 T@U) ) (! (let ((B@@15 (FieldTypeInv1 (type f_76))))
(let ((A@@16 (FieldTypeInv0 (type f_76))))
 (=> (and (and (= (type o_72) RefType) (= (type f_76) (FieldType A@@16 B@@15))) (or (U_2_bool (MapType1Select (MapType0Select Heap@128 null (|lseg#sm| (MapType0Select Heap@128 ptr@1 next) null)) o_72 f_76)) (U_2_bool (MapType1Select (MapType0Select Heap@128 null (|lseg#sm| (MapType0Select Heap@128 (MapType0Select Heap@128 ptr@1 next) next) null)) o_72 f_76)))) (U_2_bool (MapType1Select newPMask@44 o_72 f_76)))))
 :qid |stdinbpl.5490:39|
 :skolemid |177|
 :pattern ( (MapType1Select newPMask@44 o_72 f_76))
)) (= Heap@129 (MapType0Store Heap@128 null (|lseg#sm| (MapType0Select Heap@128 ptr@1 next) null) newPMask@44))) (and (= Heap@130 Heap@129) (= (ControlFlow 0 140) 139))) anon509_correct)))))
(let ((anon507_correct  (and (=> (= (ControlFlow 0 142) (- 0 143)) (<= FullPerm (U_2_real (MapType1Select Mask@79 null (wand ptr@1 null FullPerm ptr@1 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 1)) 0) ptr@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@79 null (wand ptr@1 null FullPerm ptr@1 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 1)) 0) ptr@1 null)))) (=> (= Mask@80 (MapType1Store Mask@79 null (wand ptr@1 null FullPerm ptr@1 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 1)) 0) ptr@1 null) (real_2_U (- (U_2_real (MapType1Select Mask@79 null (wand ptr@1 null FullPerm ptr@1 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 1)) 0) ptr@1 null))) FullPerm)))) (and (=> (= (ControlFlow 0 142) 140) anon849_Then_correct) (=> (= (ControlFlow 0 142) 141) anon849_Else_correct)))))))
(let ((anon848_Else_correct  (=> (and (= (MapType0Select Heap@126 ptr@1 next) null) (= (ControlFlow 0 146) 142)) anon507_correct)))
(let ((anon848_Then_correct  (=> (not (= (MapType0Select Heap@126 ptr@1 next) null)) (and (=> (= (ControlFlow 0 144) (- 0 145)) (<= (U_2_int (MapType0Select Heap@126 ptr@1 data)) (U_2_int (MapType0Select Heap@126 (MapType0Select Heap@126 ptr@1 next) data)))) (=> (<= (U_2_int (MapType0Select Heap@126 ptr@1 data)) (U_2_int (MapType0Select Heap@126 (MapType0Select Heap@126 ptr@1 next) data))) (=> (= (ControlFlow 0 144) 142) anon507_correct))))))
(let ((anon505_correct  (and (=> (= (ControlFlow 0 147) (- 0 148)) (< (U_2_int (MapType0Select Heap@126 ptr@1 data)) elem)) (=> (< (U_2_int (MapType0Select Heap@126 ptr@1 data)) elem) (and (=> (= (ControlFlow 0 147) 144) anon848_Then_correct) (=> (= (ControlFlow 0 147) 146) anon848_Else_correct))))))
(let ((anon847_Else_correct  (=> (and (= (MapType0Select Heap@126 ptr@1 next) null) (= (ControlFlow 0 151) 147)) anon505_correct)))
(let ((anon847_Then_correct  (=> (not (= (MapType0Select Heap@126 ptr@1 next) null)) (and (=> (= (ControlFlow 0 149) (- 0 150)) (|Seq#Equal| (contentNodes Heap@126 (MapType0Select Heap@126 ptr@1 next) null) (|Seq#Drop| (content Heap@@38 this@@38) index@2))) (=> (|Seq#Equal| (contentNodes Heap@126 (MapType0Select Heap@126 ptr@1 next) null) (|Seq#Drop| (content Heap@@38 this@@38) index@2)) (=> (= (ControlFlow 0 149) 147) anon505_correct))))))
(let ((anon503_correct  (and (=> (= (ControlFlow 0 152) (- 0 153)) (= (U_2_int (MapType0Select Heap@126 ptr@1 data)) (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 1))))) (=> (= (U_2_int (MapType0Select Heap@126 ptr@1 data)) (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 1)))) (and (=> (= (ControlFlow 0 152) 149) anon847_Then_correct) (=> (= (ControlFlow 0 152) 151) anon847_Else_correct))))))
(let ((anon846_Else_correct  (=> (and (not (= (MapType0Select Heap@126 ptr@1 next) null)) (= (ControlFlow 0 156) 152)) anon503_correct)))
(let ((anon846_Then_correct  (=> (= (MapType0Select Heap@126 ptr@1 next) null) (and (=> (= (ControlFlow 0 154) (- 0 155)) (= index@2 (|Seq#Length| (content Heap@@38 this@@38)))) (=> (= index@2 (|Seq#Length| (content Heap@@38 this@@38))) (=> (= (ControlFlow 0 154) 152) anon503_correct))))))
(let ((anon501_correct  (=> (= Mask@79 (MapType1Store Mask@78 null (lseg (MapType0Select Heap@126 ptr@1 next) null) (real_2_U (- (U_2_real (MapType1Select Mask@78 null (lseg (MapType0Select Heap@126 ptr@1 next) null))) FullPerm)))) (and (=> (= (ControlFlow 0 157) (- 0 159)) (<= 1 index@2)) (=> (<= 1 index@2) (and (=> (= (ControlFlow 0 157) (- 0 158)) (<= index@2 (|Seq#Length| (content Heap@@38 this@@38)))) (=> (<= index@2 (|Seq#Length| (content Heap@@38 this@@38))) (and (=> (= (ControlFlow 0 157) 154) anon846_Then_correct) (=> (= (ControlFlow 0 157) 156) anon846_Else_correct)))))))))
(let ((anon845_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 162) 157)) anon501_correct)))
(let ((anon845_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 160) (- 0 161)) (<= FullPerm (U_2_real (MapType1Select Mask@78 null (lseg (MapType0Select Heap@126 ptr@1 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@78 null (lseg (MapType0Select Heap@126 ptr@1 next) null)))) (=> (= (ControlFlow 0 160) 157) anon501_correct))))))
(let ((anon499_correct  (=> (= Mask@78 (MapType1Store Mask@77 ptr@1 data (real_2_U (- (U_2_real (MapType1Select Mask@77 ptr@1 data)) FullPerm)))) (and (=> (= (ControlFlow 0 163) 160) anon845_Then_correct) (=> (= (ControlFlow 0 163) 162) anon845_Else_correct)))))
(let ((anon844_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 166) 163)) anon499_correct)))
(let ((anon844_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 164) (- 0 165)) (<= FullPerm (U_2_real (MapType1Select Mask@77 ptr@1 data)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@77 ptr@1 data))) (=> (= (ControlFlow 0 164) 163) anon499_correct))))))
(let ((anon497_correct  (=> (= Mask@77 (MapType1Store Mask@76 ptr@1 next (real_2_U (- (U_2_real (MapType1Select Mask@76 ptr@1 next)) FullPerm)))) (and (=> (= (ControlFlow 0 167) 164) anon844_Then_correct) (=> (= (ControlFlow 0 167) 166) anon844_Else_correct)))))
(let ((anon843_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 170) 167)) anon497_correct)))
(let ((anon843_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 168) (- 0 169)) (<= FullPerm (U_2_real (MapType1Select Mask@76 ptr@1 next)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@76 ptr@1 next))) (=> (= (ControlFlow 0 168) 167) anon497_correct))))))
(let ((anon494_correct  (=> (and (state Heap@125 Mask@76) (= Heap@126 Heap@125)) (and (=> (= (ControlFlow 0 172) 168) anon843_Then_correct) (=> (= (ControlFlow 0 172) 170) anon843_Else_correct)))))
(let ((anon842_Else_correct  (=> (= (MapType0Select Heap@121 ptr@1 next) null) (=> (and (= Heap@125 Heap@121) (= (ControlFlow 0 174) 172)) anon494_correct))))
(let ((anon842_Then_correct  (=> (not (= (MapType0Select Heap@121 ptr@1 next) null)) (=> (and (= Heap@122 (MapType0Store Heap@121 null (|lseg#sm| (MapType0Select Heap@121 ptr@1 next) null) (MapType1Store (MapType0Select Heap@121 null (|lseg#sm| (MapType0Select Heap@121 ptr@1 next) null)) (MapType0Select Heap@121 ptr@1 next) data (bool_2_U true)))) (= Heap@123 (MapType0Store Heap@122 null (|lseg#sm| (MapType0Select Heap@122 ptr@1 next) null) (MapType1Store (MapType0Select Heap@122 null (|lseg#sm| (MapType0Select Heap@122 ptr@1 next) null)) (MapType0Select Heap@122 ptr@1 next) next (bool_2_U true))))) (=> (and (and (forall ((o_71 T@U) (f_75 T@U) ) (! (let ((B@@16 (FieldTypeInv1 (type f_75))))
(let ((A@@17 (FieldTypeInv0 (type f_75))))
 (=> (and (and (= (type o_71) RefType) (= (type f_75) (FieldType A@@17 B@@16))) (or (U_2_bool (MapType1Select (MapType0Select Heap@123 null (|lseg#sm| (MapType0Select Heap@123 ptr@1 next) null)) o_71 f_75)) (U_2_bool (MapType1Select (MapType0Select Heap@123 null (|lseg#sm| (MapType0Select Heap@123 (MapType0Select Heap@123 ptr@1 next) next) null)) o_71 f_75)))) (U_2_bool (MapType1Select newPMask@43 o_71 f_75)))))
 :qid |stdinbpl.5432:43|
 :skolemid |176|
 :pattern ( (MapType1Select newPMask@43 o_71 f_75))
)) (= Heap@124 (MapType0Store Heap@123 null (|lseg#sm| (MapType0Select Heap@123 ptr@1 next) null) newPMask@43))) (and (= Heap@125 Heap@124) (= (ControlFlow 0 173) 172))) anon494_correct)))))
(let ((anon492_correct  (=> (state Heap@121 Mask@76) (and (=> (= (ControlFlow 0 175) 173) anon842_Then_correct) (=> (= (ControlFlow 0 175) 174) anon842_Else_correct)))))
(let ((anon841_Else_correct  (=> (= (MapType0Select Heap@117 ptr@1 next) null) (=> (and (= Heap@121 Heap@117) (= (ControlFlow 0 177) 175)) anon492_correct))))
(let ((anon841_Then_correct  (=> (not (= (MapType0Select Heap@117 ptr@1 next) null)) (=> (and (= Heap@118 (MapType0Store Heap@117 null (|lseg#sm| (MapType0Select Heap@117 ptr@1 next) null) (MapType1Store (MapType0Select Heap@117 null (|lseg#sm| (MapType0Select Heap@117 ptr@1 next) null)) (MapType0Select Heap@117 ptr@1 next) data (bool_2_U true)))) (= Heap@119 (MapType0Store Heap@118 null (|lseg#sm| (MapType0Select Heap@118 ptr@1 next) null) (MapType1Store (MapType0Select Heap@118 null (|lseg#sm| (MapType0Select Heap@118 ptr@1 next) null)) (MapType0Select Heap@118 ptr@1 next) next (bool_2_U true))))) (=> (and (and (forall ((o_70 T@U) (f_74 T@U) ) (! (let ((B@@17 (FieldTypeInv1 (type f_74))))
(let ((A@@18 (FieldTypeInv0 (type f_74))))
 (=> (and (and (= (type o_70) RefType) (= (type f_74) (FieldType A@@18 B@@17))) (or (U_2_bool (MapType1Select (MapType0Select Heap@119 null (|lseg#sm| (MapType0Select Heap@119 ptr@1 next) null)) o_70 f_74)) (U_2_bool (MapType1Select (MapType0Select Heap@119 null (|lseg#sm| (MapType0Select Heap@119 (MapType0Select Heap@119 ptr@1 next) next) null)) o_70 f_74)))) (U_2_bool (MapType1Select newPMask@42 o_70 f_74)))))
 :qid |stdinbpl.5419:43|
 :skolemid |175|
 :pattern ( (MapType1Select newPMask@42 o_70 f_74))
)) (= Heap@120 (MapType0Store Heap@119 null (|lseg#sm| (MapType0Select Heap@119 ptr@1 next) null) newPMask@42))) (and (= Heap@121 Heap@120) (= (ControlFlow 0 176) 175))) anon492_correct)))))
(let ((anon490_correct  (=> (state UnfoldingHeap@54 UnfoldingMask@54) (and (=> (= (ControlFlow 0 178) 176) anon841_Then_correct) (=> (= (ControlFlow 0 178) 177) anon841_Else_correct)))))
(let ((anon489_correct  (=> (and (and (state UnfoldingHeap@53 UnfoldingMask@53) (= UnfoldingHeap@54 UnfoldingHeap@53)) (and (= UnfoldingMask@54 UnfoldingMask@53) (= (ControlFlow 0 180) 178))) anon490_correct)))
(let ((anon840_Else_correct  (=> (= (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) null) (=> (and (= UnfoldingHeap@53 Heap@117) (= (ControlFlow 0 182) 180)) anon489_correct))))
(let ((anon840_Then_correct  (=> (not (= (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) null)) (=> (and (= UnfoldingHeap@50 (MapType0Store Heap@117 null (|lseg#sm| (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) null) (MapType1Store (MapType0Select Heap@117 null (|lseg#sm| (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) null)) (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) data (bool_2_U true)))) (= UnfoldingHeap@51 (MapType0Store UnfoldingHeap@50 null (|lseg#sm| (MapType0Select UnfoldingHeap@50 (MapType0Select UnfoldingHeap@50 ptr@1 next) next) null) (MapType1Store (MapType0Select UnfoldingHeap@50 null (|lseg#sm| (MapType0Select UnfoldingHeap@50 (MapType0Select UnfoldingHeap@50 ptr@1 next) next) null)) (MapType0Select UnfoldingHeap@50 (MapType0Select UnfoldingHeap@50 ptr@1 next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_69 T@U) (f_73 T@U) ) (! (let ((B@@18 (FieldTypeInv1 (type f_73))))
(let ((A@@19 (FieldTypeInv0 (type f_73))))
 (=> (and (and (= (type o_69) RefType) (= (type f_73) (FieldType A@@19 B@@18))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@51 null (|lseg#sm| (MapType0Select UnfoldingHeap@51 (MapType0Select UnfoldingHeap@51 ptr@1 next) next) null)) o_69 f_73)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@51 null (|lseg#sm| (MapType0Select UnfoldingHeap@51 (MapType0Select UnfoldingHeap@51 (MapType0Select UnfoldingHeap@51 ptr@1 next) next) next) null)) o_69 f_73)))) (U_2_bool (MapType1Select newPMask@41 o_69 f_73)))))
 :qid |stdinbpl.5404:45|
 :skolemid |174|
 :pattern ( (MapType1Select newPMask@41 o_69 f_73))
)) (= UnfoldingHeap@52 (MapType0Store UnfoldingHeap@51 null (|lseg#sm| (MapType0Select UnfoldingHeap@51 (MapType0Select UnfoldingHeap@51 ptr@1 next) next) null) newPMask@41))) (and (= UnfoldingHeap@53 UnfoldingHeap@52) (= (ControlFlow 0 181) 180))) anon489_correct)))))
(let ((anon487_correct  (=> (and (state Unfolding1Heap@29 Unfolding1Mask@29) (=> (not (= (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) null)) (<= (U_2_int (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) data)) (U_2_int (MapType0Select Heap@117 (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) data))))) (and (=> (= (ControlFlow 0 183) 181) anon840_Then_correct) (=> (= (ControlFlow 0 183) 182) anon840_Else_correct)))))
(let ((anon486_correct  (=> (and (and (state Unfolding1Heap@28 Unfolding1Mask@28) (= Unfolding1Heap@29 Unfolding1Heap@28)) (and (= Unfolding1Mask@29 Unfolding1Mask@28) (= (ControlFlow 0 185) 183))) anon487_correct)))
(let ((anon839_Else_correct  (=> (= (MapType0Select Heap@117 (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) next) null) (=> (and (= Unfolding1Heap@28 Heap@117) (= (ControlFlow 0 187) 185)) anon486_correct))))
(let ((anon839_Then_correct  (=> (not (= (MapType0Select Heap@117 (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) next) null)) (=> (and (= Unfolding1Heap@25 (MapType0Store Heap@117 null (|lseg#sm| (MapType0Select Heap@117 (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) next) null) (MapType1Store (MapType0Select Heap@117 null (|lseg#sm| (MapType0Select Heap@117 (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) next) null)) (MapType0Select Heap@117 (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) next) data (bool_2_U true)))) (= Unfolding1Heap@26 (MapType0Store Unfolding1Heap@25 null (|lseg#sm| (MapType0Select Unfolding1Heap@25 (MapType0Select Unfolding1Heap@25 (MapType0Select Unfolding1Heap@25 ptr@1 next) next) next) null) (MapType1Store (MapType0Select Unfolding1Heap@25 null (|lseg#sm| (MapType0Select Unfolding1Heap@25 (MapType0Select Unfolding1Heap@25 (MapType0Select Unfolding1Heap@25 ptr@1 next) next) next) null)) (MapType0Select Unfolding1Heap@25 (MapType0Select Unfolding1Heap@25 (MapType0Select Unfolding1Heap@25 ptr@1 next) next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_68 T@U) (f_72 T@U) ) (! (let ((B@@19 (FieldTypeInv1 (type f_72))))
(let ((A@@20 (FieldTypeInv0 (type f_72))))
 (=> (and (and (= (type o_68) RefType) (= (type f_72) (FieldType A@@20 B@@19))) (or (U_2_bool (MapType1Select (MapType0Select Unfolding1Heap@26 null (|lseg#sm| (MapType0Select Unfolding1Heap@26 (MapType0Select Unfolding1Heap@26 (MapType0Select Unfolding1Heap@26 ptr@1 next) next) next) null)) o_68 f_72)) (U_2_bool (MapType1Select (MapType0Select Unfolding1Heap@26 null (|lseg#sm| (MapType0Select Unfolding1Heap@26 (MapType0Select Unfolding1Heap@26 (MapType0Select Unfolding1Heap@26 (MapType0Select Unfolding1Heap@26 ptr@1 next) next) next) next) null)) o_68 f_72)))) (U_2_bool (MapType1Select newPMask@40 o_68 f_72)))))
 :qid |stdinbpl.5388:49|
 :skolemid |173|
 :pattern ( (MapType1Select newPMask@40 o_68 f_72))
)) (= Unfolding1Heap@27 (MapType0Store Unfolding1Heap@26 null (|lseg#sm| (MapType0Select Unfolding1Heap@26 (MapType0Select Unfolding1Heap@26 (MapType0Select Unfolding1Heap@26 ptr@1 next) next) next) null) newPMask@40))) (and (= Unfolding1Heap@28 Unfolding1Heap@27) (= (ControlFlow 0 186) 185))) anon486_correct)))))
(let ((anon838_Then_correct  (=> (not (= (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) null)) (=> (and (not (= (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) null)) (= Unfolding1Mask@26 (MapType1Store Unfolding1Mask@25 (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) data (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@25 (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) data)) FullPerm))))) (=> (and (and (and (state Heap@117 Unfolding1Mask@26) (not (= (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) null))) (and (= Unfolding1Mask@27 (MapType1Store Unfolding1Mask@26 (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) next (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@26 (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) next)) FullPerm)))) (state Heap@117 Unfolding1Mask@27))) (and (and (= Unfolding1Mask@28 (MapType1Store Unfolding1Mask@27 null (lseg (MapType0Select Heap@117 (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) next) null) (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@27 null (lseg (MapType0Select Heap@117 (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) null) (MapType0Select Heap@117 null (lseg (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) null)) (lseg (MapType0Select Heap@117 (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) next) null) (MapType0Select Heap@117 null (lseg (MapType0Select Heap@117 (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) next) null)))) (and (state Heap@117 Unfolding1Mask@28) (=> (not (= (MapType0Select Heap@117 (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) next) null)) (<= (U_2_int (MapType0Select Heap@117 (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) data)) (U_2_int (MapType0Select Heap@117 (MapType0Select Heap@117 (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) next) data))))))) (and (=> (= (ControlFlow 0 188) 186) anon839_Then_correct) (=> (= (ControlFlow 0 188) 187) anon839_Else_correct)))))))
(let ((anon838_Else_correct  (=> (and (and (= (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) null) (= Unfolding1Heap@29 Heap@117)) (and (= Unfolding1Mask@29 Unfolding1Mask@25) (= (ControlFlow 0 184) 183))) anon487_correct)))
(let ((anon837_Then_correct  (=> (not (= (MapType0Select Heap@117 ptr@1 next) null)) (=> (and (and (not (= (MapType0Select Heap@117 ptr@1 next) null)) (= UnfoldingMask@51 (MapType1Store UnfoldingMask@50 (MapType0Select Heap@117 ptr@1 next) data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@50 (MapType0Select Heap@117 ptr@1 next) data)) FullPerm))))) (and (state Heap@117 UnfoldingMask@51) (not (= (MapType0Select Heap@117 ptr@1 next) null)))) (=> (and (and (and (= UnfoldingMask@52 (MapType1Store UnfoldingMask@51 (MapType0Select Heap@117 ptr@1 next) next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@51 (MapType0Select Heap@117 ptr@1 next) next)) FullPerm)))) (state Heap@117 UnfoldingMask@52)) (and (= UnfoldingMask@53 (MapType1Store UnfoldingMask@52 null (lseg (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@52 null (lseg (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@117 ptr@1 next) null) (MapType0Select Heap@117 null (lseg (MapType0Select Heap@117 ptr@1 next) null)) (lseg (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) null) (MapType0Select Heap@117 null (lseg (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) null))))) (and (and (state Heap@117 UnfoldingMask@53) (|lseg#trigger| Heap@117 (lseg (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) null))) (and (= (MapType0Select Heap@117 null (lseg (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@117 (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@117 (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) next)) (MapType0Select Heap@117 null (lseg (MapType0Select Heap@117 (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) next) null)))) EmptyFrame))) (= Unfolding1Mask@25 (MapType1Store UnfoldingMask@53 null (lseg (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) null) (real_2_U (- (U_2_real (MapType1Select UnfoldingMask@53 null (lseg (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) null))) FullPerm))))))) (and (=> (= (ControlFlow 0 189) 188) anon838_Then_correct) (=> (= (ControlFlow 0 189) 184) anon838_Else_correct)))))))
(let ((anon837_Else_correct  (=> (and (and (= (MapType0Select Heap@117 ptr@1 next) null) (= UnfoldingHeap@54 Heap@117)) (and (= UnfoldingMask@54 UnfoldingMask@50) (= (ControlFlow 0 179) 178))) anon490_correct)))
(let ((anon482_correct  (=> (= UnfoldingMask@50 (MapType1Store Mask@76 null (lseg (MapType0Select Heap@117 ptr@1 next) null) (real_2_U (- (U_2_real (MapType1Select Mask@76 null (lseg (MapType0Select Heap@117 ptr@1 next) null))) FullPerm)))) (and (=> (= (ControlFlow 0 190) 189) anon837_Then_correct) (=> (= (ControlFlow 0 190) 179) anon837_Else_correct)))))
(let ((anon836_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 193) 190)) anon482_correct)))
(let ((anon836_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 191) (- 0 192)) (<= FullPerm (U_2_real (MapType1Select Mask@76 null (lseg (MapType0Select Heap@117 ptr@1 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@76 null (lseg (MapType0Select Heap@117 ptr@1 next) null)))) (=> (= (ControlFlow 0 191) 190) anon482_correct))))))
(let ((anon835_Then_correct  (=> (not (= (MapType0Select Heap@117 ptr@1 next) null)) (=> (and (|lseg#trigger| Heap@117 (lseg (MapType0Select Heap@117 ptr@1 next) null)) (= (MapType0Select Heap@117 null (lseg (MapType0Select Heap@117 ptr@1 next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@117 ptr@1 next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next)) (MapType0Select Heap@117 null (lseg (MapType0Select Heap@117 (MapType0Select Heap@117 ptr@1 next) next) null)))) EmptyFrame)))) (and (=> (= (ControlFlow 0 194) 191) anon836_Then_correct) (=> (= (ControlFlow 0 194) 193) anon836_Else_correct))))))
(let ((anon835_Else_correct  (=> (and (= (MapType0Select Heap@117 ptr@1 next) null) (= Heap@126 Heap@117)) (and (=> (= (ControlFlow 0 171) 168) anon843_Then_correct) (=> (= (ControlFlow 0 171) 170) anon843_Else_correct)))))
(let ((anon479_correct  (and (=> (= (ControlFlow 0 195) (- 0 196)) (=> (and (and b_5@46 b_5@46) b_15@6) (|Seq#Equal| (contentNodes Result_7Heap hd@0 null) (|Seq#Append| (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 1)) 0) (contentNodes Ops_3Heap@3 ptr@1 null))))) (=> (=> (and (and b_5@46 b_5@46) b_15@6) (|Seq#Equal| (contentNodes Result_7Heap hd@0 null) (|Seq#Append| (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 1)) 0) (contentNodes Ops_3Heap@3 ptr@1 null)))) (=> (state Heap@117 Mask@75) (=> (and (and (= Mask@76 (MapType1Store Mask@75 null (wand ptr@1 null FullPerm ptr@1 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 1)) 0) ptr@1 null) (real_2_U (+ (U_2_real (MapType1Select Mask@75 null (wand ptr@1 null FullPerm ptr@1 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 1)) 0) ptr@1 null))) FullPerm)))) (state Heap@117 Mask@76)) (and (state Heap@117 Mask@76) (state Heap@117 Mask@76))) (and (=> (= (ControlFlow 0 195) 194) anon835_Then_correct) (=> (= (ControlFlow 0 195) 171) anon835_Else_correct))))))))
(let ((anon828_Then_correct  (=> b_5@46 (and (and (and (and (and (and (=> (= (ControlFlow 0 211) 195) anon479_correct) (=> (= (ControlFlow 0 211) 208) anon834_Then_correct)) (=> (= (ControlFlow 0 211) 210) anon834_Else_correct)) (=> (= (ControlFlow 0 211) 204) anon832_Then_correct)) (=> (= (ControlFlow 0 211) 206) anon832_Else_correct)) (=> (= (ControlFlow 0 211) 200) anon830_Then_correct)) (=> (= (ControlFlow 0 211) 202) anon830_Else_correct)))))
(let ((anon828_Else_correct  (=> (and (not b_5@46) (= (ControlFlow 0 198) 195)) anon479_correct)))
(let ((anon827_Then_correct  (=> (and (and b_5@46 b_5@46) b_15@6) (and (=> (= (ControlFlow 0 212) 211) anon828_Then_correct) (=> (= (ControlFlow 0 212) 198) anon828_Else_correct)))))
(let ((anon827_Else_correct  (=> (and (not (and (and b_5@46 b_5@46) b_15@6)) (= (ControlFlow 0 197) 195)) anon479_correct)))
(let ((anon465_correct  (and (=> (= (ControlFlow 0 213) (- 0 214)) (=> (and (and b_5@45 b_5@45) b_15@6) (and (= neededTransfer@27 0.0) (= (U_2_real (MapType1Select Used_6Mask@3 null (lseg hd@0 null))) initNeededTransfer@6)))) (=> (=> (and (and b_5@45 b_5@45) b_15@6) (and (= neededTransfer@27 0.0) (= (U_2_real (MapType1Select Used_6Mask@3 null (lseg hd@0 null))) initNeededTransfer@6))) (=> (and (= b_16@0  (and b_5@45 b_15@6)) (= b_16@1  (and b_16@0 (state Result_7Heap Result_7Mask)))) (=> (and (and (= b_16@2  (and b_16@1 (sumMask Result_7Mask Ops_3Mask@22 Used_6Mask@3))) (= b_16@3  (and (and b_16@2 (IdenticalOnKnownLocations Ops_3Heap@12 Result_7Heap Ops_3Mask@22)) (IdenticalOnKnownLocations Used_6Heap@0 Result_7Heap Used_6Mask@3)))) (and (= b_16@4  (and b_16@3 (state Result_7Heap Result_7Mask))) (= b_5@46  (and b_5@45 b_16@4)))) (and (=> (= (ControlFlow 0 213) 212) anon827_Then_correct) (=> (= (ControlFlow 0 213) 197) anon827_Else_correct))))))))
(let ((anon826_Else_correct  (=> (>= 0.0 takeTransfer@13) (=> (and (= Heap@117 Heap@115) (= neededTransfer@27 neededTransfer@25)) (=> (and (and (= Mask@75 Mask@73) (= b_15@6 b_15@3)) (and (= Used_6Mask@3 Used_6Mask@1) (= (ControlFlow 0 217) 213))) anon465_correct)))))
(let ((anon826_Then_correct  (=> (> takeTransfer@13 0.0) (=> (and (= neededTransfer@26 (- neededTransfer@25 takeTransfer@13)) (= Used_6Mask@2 (MapType1Store Used_6Mask@1 null (lseg hd@0 null) (real_2_U (+ (U_2_real (MapType1Select Used_6Mask@1 null (lseg hd@0 null))) takeTransfer@13))))) (=> (and (and (= b_15@4  (and b_15@3 (state Used_6Heap@0 Used_6Mask@2))) (= TempMask@7 (MapType1Store ZeroMask null (lseg hd@0 null) (real_2_U FullPerm)))) (and (= b_15@5  (and b_15@4 (IdenticalOnKnownLocations Heap@115 Used_6Heap@0 TempMask@7))) (= Mask@74 (MapType1Store Mask@73 null (lseg hd@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@73 null (lseg hd@0 null))) takeTransfer@13)))))) (=> (and (and (and (forall ((o_67 T@U) (f_71 T@U) ) (! (let ((B@@20 (FieldTypeInv1 (type f_71))))
(let ((A@@21 (FieldTypeInv0 (type f_71))))
 (=> (and (and (= (type o_67) RefType) (= (type f_71) (FieldType A@@21 B@@20))) (or (U_2_bool (MapType1Select (MapType0Select Heap@115 null (|wand#sm| ptr@1 null FullPerm ptr@1 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 1)) 0) ptr@1 null)) o_67 f_71)) (U_2_bool (MapType1Select (MapType0Select Heap@115 null (|lseg#sm| hd@0 null)) o_67 f_71)))) (U_2_bool (MapType1Select newPMask@39 o_67 f_71)))))
 :qid |stdinbpl.5248:47|
 :skolemid |172|
 :pattern ( (MapType1Select newPMask@39 o_67 f_71))
)) (= Heap@116 (MapType0Store Heap@115 null (|wand#sm| ptr@1 null FullPerm ptr@1 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 1)) 0) ptr@1 null) newPMask@39))) (and (= Heap@117 Heap@116) (= neededTransfer@27 neededTransfer@26))) (and (and (= Mask@75 Mask@74) (= b_15@6 b_15@5)) (and (= Used_6Mask@3 Used_6Mask@2) (= (ControlFlow 0 216) 213)))) anon465_correct))))))
(let ((anon825_Else_correct  (=> (and (< maskTransfer@13 neededTransfer@25) (= takeTransfer@13 maskTransfer@13)) (and (=> (= (ControlFlow 0 219) 216) anon826_Then_correct) (=> (= (ControlFlow 0 219) 217) anon826_Else_correct)))))
(let ((anon825_Then_correct  (=> (and (<= neededTransfer@25 maskTransfer@13) (= takeTransfer@13 neededTransfer@25)) (and (=> (= (ControlFlow 0 218) 216) anon826_Then_correct) (=> (= (ControlFlow 0 218) 217) anon826_Else_correct)))))
(let ((anon824_Then_correct  (=> (and (and (and (and (and b_5@45 b_5@45) b_15@3) true) (> neededTransfer@25 0.0)) (= maskTransfer@13 (U_2_real (MapType1Select Mask@73 null (lseg hd@0 null))))) (and (=> (= (ControlFlow 0 220) 218) anon825_Then_correct) (=> (= (ControlFlow 0 220) 219) anon825_Else_correct)))))
(let ((anon824_Else_correct  (=> (not (and (and (and (and b_5@45 b_5@45) b_15@3) true) (> neededTransfer@25 0.0))) (=> (and (= Heap@117 Heap@115) (= neededTransfer@27 neededTransfer@25)) (=> (and (and (= Mask@75 Mask@73) (= b_15@6 b_15@3)) (and (= Used_6Mask@3 Used_6Mask@1) (= (ControlFlow 0 215) 213))) anon465_correct)))))
(let ((anon823_Else_correct  (=> (>= 0.0 takeTransfer@12) (=> (and (and (= Ops_3Mask@22 Ops_3Mask@20) (= Used_6Mask@1 ZeroMask)) (and (= b_15@3 b_15@0) (= neededTransfer@25 FullPerm))) (and (=> (= (ControlFlow 0 223) 220) anon824_Then_correct) (=> (= (ControlFlow 0 223) 215) anon824_Else_correct))))))
(let ((anon823_Then_correct  (=> (> takeTransfer@12 0.0) (=> (and (= neededTransfer@24 (- FullPerm takeTransfer@12)) (= Used_6Mask@0 (MapType1Store ZeroMask null (lseg hd@0 null) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (lseg hd@0 null))) takeTransfer@12))))) (=> (and (and (and (= b_15@1  (and b_15@0 (state Used_6Heap@0 Used_6Mask@0))) (= TempMask@6 (MapType1Store ZeroMask null (lseg hd@0 null) (real_2_U FullPerm)))) (and (= b_15@2  (and b_15@1 (IdenticalOnKnownLocations Ops_3Heap@12 Used_6Heap@0 TempMask@6))) (= Ops_3Mask@21 (MapType1Store Ops_3Mask@20 null (lseg hd@0 null) (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@20 null (lseg hd@0 null))) takeTransfer@12)))))) (and (and (= Ops_3Mask@22 Ops_3Mask@21) (= Used_6Mask@1 Used_6Mask@0)) (and (= b_15@3 b_15@2) (= neededTransfer@25 neededTransfer@24)))) (and (=> (= (ControlFlow 0 222) 220) anon824_Then_correct) (=> (= (ControlFlow 0 222) 215) anon824_Else_correct)))))))
(let ((anon822_Else_correct  (=> (and (< maskTransfer@12 FullPerm) (= takeTransfer@12 maskTransfer@12)) (and (=> (= (ControlFlow 0 225) 222) anon823_Then_correct) (=> (= (ControlFlow 0 225) 223) anon823_Else_correct)))))
(let ((anon822_Then_correct  (=> (and (<= FullPerm maskTransfer@12) (= takeTransfer@12 FullPerm)) (and (=> (= (ControlFlow 0 224) 222) anon823_Then_correct) (=> (= (ControlFlow 0 224) 223) anon823_Else_correct)))))
(let ((anon821_Then_correct  (=> (and (and (and (and (and b_5@45 b_5@45) b_15@0) true) (> FullPerm 0.0)) (= maskTransfer@12 (U_2_real (MapType1Select Ops_3Mask@20 null (lseg hd@0 null))))) (and (=> (= (ControlFlow 0 226) 224) anon822_Then_correct) (=> (= (ControlFlow 0 226) 225) anon822_Else_correct)))))
(let ((anon821_Else_correct  (=> (not (and (and (and (and b_5@45 b_5@45) b_15@0) true) (> FullPerm 0.0))) (=> (and (and (= Ops_3Mask@22 Ops_3Mask@20) (= Used_6Mask@1 ZeroMask)) (and (= b_15@3 b_15@0) (= neededTransfer@25 FullPerm))) (and (=> (= (ControlFlow 0 221) 220) anon824_Then_correct) (=> (= (ControlFlow 0 221) 215) anon824_Else_correct))))))
(let ((anon453_correct  (=> (and (= b_15@0  (and b_15 (state Used_6Heap@0 ZeroMask))) (= initNeededTransfer@6 (+ (U_2_real (MapType1Select ZeroMask null (lseg hd@0 null))) FullPerm))) (and (=> (= (ControlFlow 0 227) (- 0 228)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 227) 226) anon821_Then_correct) (=> (= (ControlFlow 0 227) 221) anon821_Else_correct)))))))
(let ((anon452_correct  (and (=> (= (ControlFlow 0 230) (- 0 231)) (=> (and b_5@35 b_13@6) (= (U_2_int (|Seq#Index| (contentNodes Result_6Heap ptr@0 null) 0)) (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 2)))))) (=> (=> (and b_5@35 b_13@6) (= (U_2_int (|Seq#Index| (contentNodes Result_6Heap ptr@0 null) 0)) (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 2))))) (=> (= b_5@36  (and b_5@35 b_13@6)) (=> (and (and (and (and (= b_5@37  (and b_5@36 (= Used_5Heap@0 Ops_3Heap@11))) (= b_5@38  (and b_5@37 (state Ops_3Heap@11 Ops_3Mask@18)))) (and (= Ops_3Mask@19 (MapType1Store Ops_3Mask@18 null (lseg hd@0 null) (real_2_U (+ (U_2_real (MapType1Select Ops_3Mask@18 null (lseg hd@0 null))) FullPerm)))) (= b_5@39  (and b_5@38 (state Ops_3Heap@11 Ops_3Mask@19))))) (and (and (= b_5@40  (and b_5@39 (state Ops_3Heap@11 Ops_3Mask@19))) (= b_5@41  (and b_5@40 (|Seq#Equal| (contentNodes Ops_3Heap@11 hd@0 null) (|Seq#Append| (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 2)) 0) (contentNodes Labellhs7Heap ptr@0 null)))))) (and (= b_5@42  (and b_5@41 (state Ops_3Heap@11 Ops_3Mask@19))) (IdenticalOnKnownLocations Ops_3Heap@11 ExhaleHeap@4 Ops_3Mask@19)))) (and (and (and (= b_5@43  (and b_5@42 (state ExhaleHeap@4 Ops_3Mask@19))) (= b_5@44  (and b_5@43 (state ExhaleHeap@4 Ops_3Mask@19)))) (and (= b_5@45 b_5@44) (= Ops_3Heap@12 ExhaleHeap@4))) (and (and (= Mask@73 Mask@72) (= Ops_3Mask@20 Ops_3Mask@19)) (and (= Heap@115 Heap@114) (= (ControlFlow 0 230) 227))))) anon453_correct))))))
(let ((anon819_Else_correct  (and (=> (= (ControlFlow 0 238) (- 0 240)) (>= (- index@2 2) 0)) (=> (>= (- index@2 2) 0) (and (=> (= (ControlFlow 0 238) (- 0 239)) (< (- index@2 2) (|Seq#Length| (content Heap@@38 this@@38)))) (=> (< (- index@2 2) (|Seq#Length| (content Heap@@38 this@@38))) (=> (= (ControlFlow 0 238) 230) anon452_correct)))))))
(let ((anon817_Else_correct  (and (=> (= (ControlFlow 0 245) (- 0 246)) (< 0 (|Seq#Length| (contentNodes Result_6Heap ptr@0 null)))) (=> (< 0 (|Seq#Length| (contentNodes Result_6Heap ptr@0 null))) (and (and (=> (= (ControlFlow 0 245) 238) anon819_Else_correct) (=> (= (ControlFlow 0 245) 242) anon820_Then_correct)) (=> (= (ControlFlow 0 245) 244) anon820_Else_correct))))))
(let ((anon816_Then_correct  (=> b_5@35 (and (and (=> (= (ControlFlow 0 247) 245) anon817_Else_correct) (=> (= (ControlFlow 0 247) 235) anon818_Then_correct)) (=> (= (ControlFlow 0 247) 237) anon818_Else_correct)))))
(let ((anon816_Else_correct  (=> (and (not b_5@35) (= (ControlFlow 0 233) 230)) anon452_correct)))
(let ((anon815_Then_correct  (=> (and b_5@35 b_13@6) (and (=> (= (ControlFlow 0 248) 247) anon816_Then_correct) (=> (= (ControlFlow 0 248) 233) anon816_Else_correct)))))
(let ((anon815_Else_correct  (=> (and (not (and b_5@35 b_13@6)) (= (ControlFlow 0 232) 230)) anon452_correct)))
(let ((anon441_correct  (and (=> (= (ControlFlow 0 249) (- 0 250)) (=> (and b_5@32 b_13@6) (and (= neededTransfer@23 0.0) (= (U_2_real (MapType1Select Used_5Mask@3 null (lseg ptr@0 null))) initNeededTransfer@5)))) (=> (=> (and b_5@32 b_13@6) (and (= neededTransfer@23 0.0) (= (U_2_real (MapType1Select Used_5Mask@3 null (lseg ptr@0 null))) initNeededTransfer@5))) (=> (and (and (and (= b_14@0  (and b_5@32 b_13@6)) (= b_14@1  (and b_14@0 (state Result_6Heap Result_6Mask)))) (and (= b_14@2  (and b_14@1 (sumMask Result_6Mask Ops_3Mask@18 Used_5Mask@3))) (= b_14@3  (and (and b_14@2 (IdenticalOnKnownLocations Ops_3Heap@11 Result_6Heap Ops_3Mask@18)) (IdenticalOnKnownLocations Used_5Heap@0 Result_6Heap Used_5Mask@3))))) (and (and (= b_14@4  (and b_14@3 (state Result_6Heap Result_6Mask))) (= b_5@33  (and b_5@32 b_14@4))) (and (= b_5@34  (and b_5@33 b_13@6)) (= b_5@35  (and b_5@34 (= Used_5Heap@0 Ops_3Heap@11)))))) (and (=> (= (ControlFlow 0 249) 248) anon815_Then_correct) (=> (= (ControlFlow 0 249) 232) anon815_Else_correct)))))))
(let ((anon814_Else_correct  (=> (>= 0.0 takeTransfer@11) (=> (and (= Heap@114 Heap@112) (= Mask@72 Mask@70)) (=> (and (and (= b_13@6 b_13@3) (= Used_5Mask@3 Used_5Mask@1)) (and (= neededTransfer@23 neededTransfer@21) (= (ControlFlow 0 253) 249))) anon441_correct)))))
(let ((anon814_Then_correct  (=> (> takeTransfer@11 0.0) (=> (and (= neededTransfer@22 (- neededTransfer@21 takeTransfer@11)) (= Used_5Mask@2 (MapType1Store Used_5Mask@1 null (lseg ptr@0 null) (real_2_U (+ (U_2_real (MapType1Select Used_5Mask@1 null (lseg ptr@0 null))) takeTransfer@11))))) (=> (and (and (= b_13@4  (and b_13@3 (state Used_5Heap@0 Used_5Mask@2))) (= TempMask@5 (MapType1Store ZeroMask null (lseg ptr@0 null) (real_2_U FullPerm)))) (and (= b_13@5  (and b_13@4 (IdenticalOnKnownLocations Heap@112 Used_5Heap@0 TempMask@5))) (= Mask@71 (MapType1Store Mask@70 null (lseg ptr@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@70 null (lseg ptr@0 null))) takeTransfer@11)))))) (=> (and (and (and (forall ((o_66 T@U) (f_70 T@U) ) (! (let ((B@@21 (FieldTypeInv1 (type f_70))))
(let ((A@@22 (FieldTypeInv0 (type f_70))))
 (=> (and (and (= (type o_66) RefType) (= (type f_70) (FieldType A@@22 B@@21))) (or (U_2_bool (MapType1Select (MapType0Select Heap@112 null (|wand#sm| ptr@1 null FullPerm ptr@1 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 1)) 0) ptr@1 null)) o_66 f_70)) (U_2_bool (MapType1Select (MapType0Select Heap@112 null (|lseg#sm| ptr@0 null)) o_66 f_70)))) (U_2_bool (MapType1Select newPMask@38 o_66 f_70)))))
 :qid |stdinbpl.5114:53|
 :skolemid |171|
 :pattern ( (MapType1Select newPMask@38 o_66 f_70))
)) (= Heap@113 (MapType0Store Heap@112 null (|wand#sm| ptr@1 null FullPerm ptr@1 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 1)) 0) ptr@1 null) newPMask@38))) (and (= Heap@114 Heap@113) (= Mask@72 Mask@71))) (and (and (= b_13@6 b_13@5) (= Used_5Mask@3 Used_5Mask@2)) (and (= neededTransfer@23 neededTransfer@22) (= (ControlFlow 0 252) 249)))) anon441_correct))))))
(let ((anon813_Else_correct  (=> (and (< maskTransfer@11 neededTransfer@21) (= takeTransfer@11 maskTransfer@11)) (and (=> (= (ControlFlow 0 255) 252) anon814_Then_correct) (=> (= (ControlFlow 0 255) 253) anon814_Else_correct)))))
(let ((anon813_Then_correct  (=> (and (<= neededTransfer@21 maskTransfer@11) (= takeTransfer@11 neededTransfer@21)) (and (=> (= (ControlFlow 0 254) 252) anon814_Then_correct) (=> (= (ControlFlow 0 254) 253) anon814_Else_correct)))))
(let ((anon812_Then_correct  (=> (and (and (and (and b_5@32 b_13@3) true) (> neededTransfer@21 0.0)) (= maskTransfer@11 (U_2_real (MapType1Select Mask@70 null (lseg ptr@0 null))))) (and (=> (= (ControlFlow 0 256) 254) anon813_Then_correct) (=> (= (ControlFlow 0 256) 255) anon813_Else_correct)))))
(let ((anon812_Else_correct  (=> (not (and (and (and b_5@32 b_13@3) true) (> neededTransfer@21 0.0))) (=> (and (= Heap@114 Heap@112) (= Mask@72 Mask@70)) (=> (and (and (= b_13@6 b_13@3) (= Used_5Mask@3 Used_5Mask@1)) (and (= neededTransfer@23 neededTransfer@21) (= (ControlFlow 0 251) 249))) anon441_correct)))))
(let ((anon811_Else_correct  (=> (>= 0.0 takeTransfer@10) (=> (and (and (= neededTransfer@21 FullPerm) (= Ops_3Mask@18 Ops_3Mask@16)) (and (= Used_5Mask@1 ZeroMask) (= b_13@3 b_13@0))) (and (=> (= (ControlFlow 0 259) 256) anon812_Then_correct) (=> (= (ControlFlow 0 259) 251) anon812_Else_correct))))))
(let ((anon811_Then_correct  (=> (> takeTransfer@10 0.0) (=> (and (= neededTransfer@20 (- FullPerm takeTransfer@10)) (= Used_5Mask@0 (MapType1Store ZeroMask null (lseg ptr@0 null) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (lseg ptr@0 null))) takeTransfer@10))))) (=> (and (and (and (= b_13@1  (and b_13@0 (state Used_5Heap@0 Used_5Mask@0))) (= TempMask@4 (MapType1Store ZeroMask null (lseg ptr@0 null) (real_2_U FullPerm)))) (and (= b_13@2  (and b_13@1 (IdenticalOnKnownLocations Ops_3Heap@11 Used_5Heap@0 TempMask@4))) (= Ops_3Mask@17 (MapType1Store Ops_3Mask@16 null (lseg ptr@0 null) (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@16 null (lseg ptr@0 null))) takeTransfer@10)))))) (and (and (= neededTransfer@21 neededTransfer@20) (= Ops_3Mask@18 Ops_3Mask@17)) (and (= Used_5Mask@1 Used_5Mask@0) (= b_13@3 b_13@2)))) (and (=> (= (ControlFlow 0 258) 256) anon812_Then_correct) (=> (= (ControlFlow 0 258) 251) anon812_Else_correct)))))))
(let ((anon810_Else_correct  (=> (and (< maskTransfer@10 FullPerm) (= takeTransfer@10 maskTransfer@10)) (and (=> (= (ControlFlow 0 261) 258) anon811_Then_correct) (=> (= (ControlFlow 0 261) 259) anon811_Else_correct)))))
(let ((anon810_Then_correct  (=> (and (<= FullPerm maskTransfer@10) (= takeTransfer@10 FullPerm)) (and (=> (= (ControlFlow 0 260) 258) anon811_Then_correct) (=> (= (ControlFlow 0 260) 259) anon811_Else_correct)))))
(let ((anon809_Then_correct  (=> (and (and (and (and b_5@32 b_13@0) true) (> FullPerm 0.0)) (= maskTransfer@10 (U_2_real (MapType1Select Ops_3Mask@16 null (lseg ptr@0 null))))) (and (=> (= (ControlFlow 0 262) 260) anon810_Then_correct) (=> (= (ControlFlow 0 262) 261) anon810_Else_correct)))))
(let ((anon809_Else_correct  (=> (not (and (and (and b_5@32 b_13@0) true) (> FullPerm 0.0))) (=> (and (and (= neededTransfer@21 FullPerm) (= Ops_3Mask@18 Ops_3Mask@16)) (and (= Used_5Mask@1 ZeroMask) (= b_13@3 b_13@0))) (and (=> (= (ControlFlow 0 257) 256) anon812_Then_correct) (=> (= (ControlFlow 0 257) 251) anon812_Else_correct))))))
(let ((anon429_correct  (and (=> (= (ControlFlow 0 263) (- 0 265)) (=> (and b_5@28 b_11@4) (and (= neededTransfer@19 0.0) (= (U_2_real (MapType1Select Used_4Mask@3 null (wand ptr@0 null FullPerm ptr@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 2))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 2)) 0) ptr@0 null))) initNeededTransfer@4)))) (=> (=> (and b_5@28 b_11@4) (and (= neededTransfer@19 0.0) (= (U_2_real (MapType1Select Used_4Mask@3 null (wand ptr@0 null FullPerm ptr@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 2))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 2)) 0) ptr@0 null))) initNeededTransfer@4))) (=> (= b_12@0  (and b_5@28 b_11@4)) (=> (and (= b_12@1  (and b_12@0 (state Result_5Heap Result_5Mask))) (= b_12@2  (and b_12@1 (sumMask Result_5Mask Ops_3Mask@16 Used_4Mask@3)))) (=> (and (and (and (= b_12@3  (and (and b_12@2 (IdenticalOnKnownLocations Ops_3Heap@11 Result_5Heap Ops_3Mask@16)) (IdenticalOnKnownLocations Used_4Heap@0 Result_5Heap Used_4Mask@3))) (= b_12@4  (and b_12@3 (state Result_5Heap Result_5Mask)))) (and (= b_5@29  (and b_5@28 b_12@4)) (= b_5@30  (and b_5@29 b_11@4)))) (and (and (= b_5@31  (and b_5@30 (= Used_4Heap@0 Ops_3Heap@11))) (= b_5@32  (and b_5@31 (state Ops_3Heap@11 Ops_3Mask@16)))) (and (= b_13@0  (and b_13 (state Used_5Heap@0 ZeroMask))) (= initNeededTransfer@5 (+ (U_2_real (MapType1Select ZeroMask null (lseg ptr@0 null))) FullPerm))))) (and (=> (= (ControlFlow 0 263) (- 0 264)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 263) 262) anon809_Then_correct) (=> (= (ControlFlow 0 263) 257) anon809_Else_correct)))))))))))
(let ((anon808_Else_correct  (=> (and (>= 0.0 takeTransfer@9) (= neededTransfer@19 neededTransfer@17)) (=> (and (and (= Mask@70 Mask@68) (= b_11@4 b_11@2)) (and (= Used_4Mask@3 Used_4Mask@1) (= (ControlFlow 0 268) 263))) anon429_correct))))
(let ((anon808_Then_correct  (=> (and (> takeTransfer@9 0.0) (= neededTransfer@18 (- neededTransfer@17 takeTransfer@9))) (=> (and (and (and (= Used_4Mask@2 (MapType1Store Used_4Mask@1 null (wand ptr@0 null FullPerm ptr@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 2))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 2)) 0) ptr@0 null) (real_2_U (+ (U_2_real (MapType1Select Used_4Mask@1 null (wand ptr@0 null FullPerm ptr@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 2))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 2)) 0) ptr@0 null))) takeTransfer@9)))) (= b_11@3  (and b_11@2 (state Used_4Heap@0 Used_4Mask@2)))) (and (= Mask@69 (MapType1Store Mask@68 null (wand ptr@0 null FullPerm ptr@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 2))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 2)) 0) ptr@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@68 null (wand ptr@0 null FullPerm ptr@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 2))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 2)) 0) ptr@0 null))) takeTransfer@9)))) (= neededTransfer@19 neededTransfer@18))) (and (and (= Mask@70 Mask@69) (= b_11@4 b_11@3)) (and (= Used_4Mask@3 Used_4Mask@2) (= (ControlFlow 0 267) 263)))) anon429_correct))))
(let ((anon807_Else_correct  (=> (and (< maskTransfer@9 neededTransfer@17) (= takeTransfer@9 maskTransfer@9)) (and (=> (= (ControlFlow 0 270) 267) anon808_Then_correct) (=> (= (ControlFlow 0 270) 268) anon808_Else_correct)))))
(let ((anon807_Then_correct  (=> (and (<= neededTransfer@17 maskTransfer@9) (= takeTransfer@9 neededTransfer@17)) (and (=> (= (ControlFlow 0 269) 267) anon808_Then_correct) (=> (= (ControlFlow 0 269) 268) anon808_Else_correct)))))
(let ((anon806_Then_correct  (=> (and (and (and (and b_5@28 b_11@2) true) (> neededTransfer@17 0.0)) (= maskTransfer@9 (U_2_real (MapType1Select Mask@68 null (wand ptr@0 null FullPerm ptr@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 2))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 2)) 0) ptr@0 null))))) (and (=> (= (ControlFlow 0 271) 269) anon807_Then_correct) (=> (= (ControlFlow 0 271) 270) anon807_Else_correct)))))
(let ((anon806_Else_correct  (=> (and (not (and (and (and b_5@28 b_11@2) true) (> neededTransfer@17 0.0))) (= neededTransfer@19 neededTransfer@17)) (=> (and (and (= Mask@70 Mask@68) (= b_11@4 b_11@2)) (and (= Used_4Mask@3 Used_4Mask@1) (= (ControlFlow 0 266) 263))) anon429_correct))))
(let ((anon805_Else_correct  (=> (>= 0.0 takeTransfer@8) (=> (and (and (= Ops_3Mask@16 Ops_3Mask@14) (= Used_4Mask@1 ZeroMask)) (and (= b_11@2 b_11@0) (= neededTransfer@17 1.0))) (and (=> (= (ControlFlow 0 274) 271) anon806_Then_correct) (=> (= (ControlFlow 0 274) 266) anon806_Else_correct))))))
(let ((anon805_Then_correct  (=> (> takeTransfer@8 0.0) (=> (and (and (and (= neededTransfer@16 (- 1.0 takeTransfer@8)) (= Used_4Mask@0 (MapType1Store ZeroMask null (wand ptr@0 null FullPerm ptr@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 2))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 2)) 0) ptr@0 null) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (wand ptr@0 null FullPerm ptr@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 2))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 2)) 0) ptr@0 null))) takeTransfer@8))))) (and (= b_11@1  (and b_11@0 (state Used_4Heap@0 Used_4Mask@0))) (= Ops_3Mask@15 (MapType1Store Ops_3Mask@14 null (wand ptr@0 null FullPerm ptr@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 2))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 2)) 0) ptr@0 null) (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@14 null (wand ptr@0 null FullPerm ptr@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 2))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 2)) 0) ptr@0 null))) takeTransfer@8)))))) (and (and (= Ops_3Mask@16 Ops_3Mask@15) (= Used_4Mask@1 Used_4Mask@0)) (and (= b_11@2 b_11@1) (= neededTransfer@17 neededTransfer@16)))) (and (=> (= (ControlFlow 0 273) 271) anon806_Then_correct) (=> (= (ControlFlow 0 273) 266) anon806_Else_correct))))))
(let ((anon804_Else_correct  (=> (and (< maskTransfer@8 1.0) (= takeTransfer@8 maskTransfer@8)) (and (=> (= (ControlFlow 0 276) 273) anon805_Then_correct) (=> (= (ControlFlow 0 276) 274) anon805_Else_correct)))))
(let ((anon804_Then_correct  (=> (and (<= 1.0 maskTransfer@8) (= takeTransfer@8 1.0)) (and (=> (= (ControlFlow 0 275) 273) anon805_Then_correct) (=> (= (ControlFlow 0 275) 274) anon805_Else_correct)))))
(let ((anon803_Then_correct  (=> (and (and (and (and b_5@28 b_11@0) true) (> 1.0 0.0)) (= maskTransfer@8 (U_2_real (MapType1Select Ops_3Mask@14 null (wand ptr@0 null FullPerm ptr@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 2))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 2)) 0) ptr@0 null))))) (and (=> (= (ControlFlow 0 277) 275) anon804_Then_correct) (=> (= (ControlFlow 0 277) 276) anon804_Else_correct)))))
(let ((anon803_Else_correct  (=> (not (and (and (and b_5@28 b_11@0) true) (> 1.0 0.0))) (=> (and (and (= Ops_3Mask@16 Ops_3Mask@14) (= Used_4Mask@1 ZeroMask)) (and (= b_11@2 b_11@0) (= neededTransfer@17 1.0))) (and (=> (= (ControlFlow 0 272) 271) anon806_Then_correct) (=> (= (ControlFlow 0 272) 266) anon806_Else_correct))))))
(let ((anon417_correct  (=> (= initNeededTransfer@4 (+ (U_2_real (MapType1Select ZeroMask null (wand ptr@0 null FullPerm ptr@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 2))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 2)) 0) ptr@0 null))) 1.0)) (and (=> (= (ControlFlow 0 278) (- 0 279)) (>= 1.0 0.0)) (=> (>= 1.0 0.0) (and (=> (= (ControlFlow 0 278) 277) anon803_Then_correct) (=> (= (ControlFlow 0 278) 272) anon803_Else_correct)))))))
(let ((anon791_Then_correct  (=> b_5@28 (and (=> (= (ControlFlow 0 309) 308) anon792_Then_correct) (=> (= (ControlFlow 0 309) 278) anon417_correct)))))
(let ((anon791_Else_correct  (=> (and (not b_5@28) (= (ControlFlow 0 281) 278)) anon417_correct)))
(let ((anon790_Then_correct  (=> (and b_5@28 b_11@0) (and (=> (= (ControlFlow 0 310) 309) anon791_Then_correct) (=> (= (ControlFlow 0 310) 281) anon791_Else_correct)))))
(let ((anon790_Else_correct  (=> (and (not (and b_5@28 b_11@0)) (= (ControlFlow 0 280) 278)) anon417_correct)))
(let ((anon789_Then_correct  (=> (and b_5@28 (= b_11@0  (and b_11 (state Used_4Heap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 311) 310) anon790_Then_correct) (=> (= (ControlFlow 0 311) 280) anon790_Else_correct)))))
(let ((anon789_Else_correct  (=> (not b_5@28) (=> (and (= b_5@45 b_5@28) (= Ops_3Heap@12 Ops_3Heap@11)) (=> (and (and (= Mask@73 Mask@68) (= Ops_3Mask@20 Ops_3Mask@14)) (and (= Heap@115 Heap@112) (= (ControlFlow 0 229) 227))) anon453_correct)))))
(let ((anon391_correct  (=> (state Ops_3Heap@10 Ops_3Mask@13) (=> (and (= b_5@27  (and b_5@26 (state Ops_3Heap@10 Ops_3Mask@13))) (= Ops_3Heap@11 Ops_3Heap@10)) (=> (and (and (= Heap@112 Heap@111) (= Ops_3Mask@14 Ops_3Mask@13)) (and (= Mask@68 Mask@67) (= b_5@28 b_5@27))) (and (=> (= (ControlFlow 0 313) 311) anon789_Then_correct) (=> (= (ControlFlow 0 313) 229) anon789_Else_correct)))))))
(let ((anon788_Else_correct  (=> (= ptr@0 null) (=> (and (= Ops_3Heap@10 Ops_3Heap@6) (= (ControlFlow 0 315) 313)) anon391_correct))))
(let ((anon788_Then_correct  (=> (not (= ptr@0 null)) (=> (and (= Ops_3Heap@7 (MapType0Store Ops_3Heap@6 null (|lseg#sm| ptr@0 null) (MapType1Store (MapType0Select Ops_3Heap@6 null (|lseg#sm| ptr@0 null)) ptr@0 data (bool_2_U true)))) (= Ops_3Heap@8 (MapType0Store Ops_3Heap@7 null (|lseg#sm| ptr@0 null) (MapType1Store (MapType0Select Ops_3Heap@7 null (|lseg#sm| ptr@0 null)) ptr@0 next (bool_2_U true))))) (=> (and (and (forall ((o_65 T@U) (f_69 T@U) ) (! (let ((B@@22 (FieldTypeInv1 (type f_69))))
(let ((A@@23 (FieldTypeInv0 (type f_69))))
 (=> (and (and (= (type o_65) RefType) (= (type f_69) (FieldType A@@23 B@@22))) (or (U_2_bool (MapType1Select (MapType0Select Ops_3Heap@8 null (|lseg#sm| ptr@0 null)) o_65 f_69)) (U_2_bool (MapType1Select (MapType0Select Ops_3Heap@8 null (|lseg#sm| (MapType0Select Ops_3Heap@8 ptr@0 next) null)) o_65 f_69)))) (U_2_bool (MapType1Select newPMask@37 o_65 f_69)))))
 :qid |stdinbpl.4858:45|
 :skolemid |170|
 :pattern ( (MapType1Select newPMask@37 o_65 f_69))
)) (= Ops_3Heap@9 (MapType0Store Ops_3Heap@8 null (|lseg#sm| ptr@0 null) newPMask@37))) (and (= Ops_3Heap@10 Ops_3Heap@9) (= (ControlFlow 0 314) 313))) anon391_correct)))))
(let ((anon787_Else_correct  (=> (and (HasDirectPerm Ops_3Mask@13 null (lseg ptr@0 null)) (= Ops_3Heap@6 Ops_3Heap@3)) (and (=> (= (ControlFlow 0 317) 314) anon788_Then_correct) (=> (= (ControlFlow 0 317) 315) anon788_Else_correct)))))
(let ((anon787_Then_correct  (=> (and (and (not (HasDirectPerm Ops_3Mask@13 null (lseg ptr@0 null))) (= Ops_3Heap@4 (MapType0Store Ops_3Heap@3 null (|lseg#sm| ptr@0 null) ZeroPMask))) (and (= Ops_3Heap@5 (MapType0Store Ops_3Heap@4 null (lseg ptr@0 null) freshVersion@3)) (= Ops_3Heap@6 Ops_3Heap@5))) (and (=> (= (ControlFlow 0 316) 314) anon788_Then_correct) (=> (= (ControlFlow 0 316) 315) anon788_Else_correct)))))
(let ((anon387_correct  (=> (and (state Used_3Heap@4 Used_3Mask@12) (= Ops_3Mask@13 (MapType1Store Ops_3Mask@12 null (lseg ptr@0 null) (real_2_U (+ (U_2_real (MapType1Select Ops_3Mask@12 null (lseg ptr@0 null))) FullPerm))))) (=> (and (and (= b_5@25  (and b_5@24 (state Ops_3Heap@3 Ops_3Mask@13))) (= b_5@26  (and b_5@25 (state Ops_3Heap@3 Ops_3Mask@13)))) (and (|lseg#trigger| Ops_3Heap@3 (lseg ptr@0 null)) (= (MapType0Select Ops_3Heap@3 null (lseg ptr@0 null)) (FrameFragment (ite (not (= ptr@0 null)) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@3 ptr@0 data)) (CombineFrames (FrameFragment (MapType0Select Ops_3Heap@3 ptr@0 next)) (MapType0Select Ops_3Heap@3 null (lseg (MapType0Select Ops_3Heap@3 ptr@0 next) null)))) EmptyFrame))))) (and (=> (= (ControlFlow 0 318) 316) anon787_Then_correct) (=> (= (ControlFlow 0 318) 317) anon787_Else_correct))))))
(let ((anon786_Else_correct  (=> (= (MapType0Select Used_3Heap@0 ptr@0 next) null) (=> (and (= Used_3Heap@4 Used_3Heap@0) (= (ControlFlow 0 320) 318)) anon387_correct))))
(let ((anon786_Then_correct  (=> (not (= (MapType0Select Used_3Heap@0 ptr@0 next) null)) (=> (and (= Used_3Heap@1 (MapType0Store Used_3Heap@0 null (|lseg#sm| (MapType0Select Used_3Heap@0 ptr@0 next) null) (MapType1Store (MapType0Select Used_3Heap@0 null (|lseg#sm| (MapType0Select Used_3Heap@0 ptr@0 next) null)) (MapType0Select Used_3Heap@0 ptr@0 next) data (bool_2_U true)))) (= Used_3Heap@2 (MapType0Store Used_3Heap@1 null (|lseg#sm| (MapType0Select Used_3Heap@1 ptr@0 next) null) (MapType1Store (MapType0Select Used_3Heap@1 null (|lseg#sm| (MapType0Select Used_3Heap@1 ptr@0 next) null)) (MapType0Select Used_3Heap@1 ptr@0 next) next (bool_2_U true))))) (=> (and (and (forall ((o_64 T@U) (f_68 T@U) ) (! (let ((B@@23 (FieldTypeInv1 (type f_68))))
(let ((A@@24 (FieldTypeInv0 (type f_68))))
 (=> (and (and (= (type o_64) RefType) (= (type f_68) (FieldType A@@24 B@@23))) (or (U_2_bool (MapType1Select (MapType0Select Used_3Heap@2 null (|lseg#sm| (MapType0Select Used_3Heap@2 ptr@0 next) null)) o_64 f_68)) (U_2_bool (MapType1Select (MapType0Select Used_3Heap@2 null (|lseg#sm| (MapType0Select Used_3Heap@2 (MapType0Select Used_3Heap@2 ptr@0 next) next) null)) o_64 f_68)))) (U_2_bool (MapType1Select newPMask@36 o_64 f_68)))))
 :qid |stdinbpl.4835:47|
 :skolemid |169|
 :pattern ( (MapType1Select newPMask@36 o_64 f_68))
)) (= Used_3Heap@3 (MapType0Store Used_3Heap@2 null (|lseg#sm| (MapType0Select Used_3Heap@2 ptr@0 next) null) newPMask@36))) (and (= Used_3Heap@4 Used_3Heap@3) (= (ControlFlow 0 319) 318))) anon387_correct)))))
(let ((anon385_correct  (=> (and (= b_10@0  (and b_5@23 b_6@19)) (= b_10@1  (and b_10@0 (state Result_4Heap Result_4Mask)))) (=> (and (and (= b_10@2  (and b_10@1 (sumMask Result_4Mask Ops_3Mask@12 Used_3Mask@12))) (= b_10@3  (and (and b_10@2 (IdenticalOnKnownLocations Ops_3Heap@3 Result_4Heap Ops_3Mask@12)) (IdenticalOnKnownLocations Used_3Heap@0 Result_4Heap Used_3Mask@12)))) (and (= b_10@4  (and b_10@3 (state Result_4Heap Result_4Mask))) (= b_5@24  (and b_5@23 b_10@4)))) (and (=> (= (ControlFlow 0 321) 319) anon786_Then_correct) (=> (= (ControlFlow 0 321) 320) anon786_Else_correct))))))
(let ((anon384_correct  (and (=> (= (ControlFlow 0 323) (- 0 324)) (=> (and b_5@20 b_6@18) (=> (not (= (MapType0Select Result_3Heap@4 ptr@0 next) null)) (<= (U_2_int (MapType0Select Result_3Heap@4 ptr@0 data)) (U_2_int (MapType0Select Result_3Heap@4 (MapType0Select Result_3Heap@4 ptr@0 next) data)))))) (=> (=> (and b_5@20 b_6@18) (=> (not (= (MapType0Select Result_3Heap@4 ptr@0 next) null)) (<= (U_2_int (MapType0Select Result_3Heap@4 ptr@0 data)) (U_2_int (MapType0Select Result_3Heap@4 (MapType0Select Result_3Heap@4 ptr@0 next) data))))) (=> (= b_5@21  (and b_5@20 b_6@18)) (=> (and (and (and (= b_5@22  (and b_5@21 (= Used_3Heap@0 Ops_3Heap@3))) (= b_5@23 b_5@22)) (and (= Ops_3Mask@12 Ops_3Mask@11) (= Mask@67 Mask@66))) (and (and (= Used_3Mask@12 Used_3Mask@11) (= Heap@111 Heap@110)) (and (= b_6@19 b_6@18) (= (ControlFlow 0 323) 321)))) anon385_correct))))))
(let ((anon383_correct  (=> (state Result_3Heap@3 Result_3Mask) (=> (and (= Result_3Heap@4 Result_3Heap@3) (= (ControlFlow 0 327) 323)) anon384_correct))))
(let ((anon785_Else_correct  (=> (= (MapType0Select Result_3Heap ptr@0 next) null) (=> (and (= Result_3Heap@3 Result_3Heap) (= (ControlFlow 0 329) 327)) anon383_correct))))
(let ((anon785_Then_correct  (=> (not (= (MapType0Select Result_3Heap ptr@0 next) null)) (=> (and (= Result_3Heap@0 (MapType0Store Result_3Heap null (|lseg#sm| (MapType0Select Result_3Heap ptr@0 next) null) (MapType1Store (MapType0Select Result_3Heap null (|lseg#sm| (MapType0Select Result_3Heap ptr@0 next) null)) (MapType0Select Result_3Heap ptr@0 next) data (bool_2_U true)))) (= Result_3Heap@1 (MapType0Store Result_3Heap@0 null (|lseg#sm| (MapType0Select Result_3Heap@0 ptr@0 next) null) (MapType1Store (MapType0Select Result_3Heap@0 null (|lseg#sm| (MapType0Select Result_3Heap@0 ptr@0 next) null)) (MapType0Select Result_3Heap@0 ptr@0 next) next (bool_2_U true))))) (=> (and (and (forall ((o_63 T@U) (f_67 T@U) ) (! (let ((B@@24 (FieldTypeInv1 (type f_67))))
(let ((A@@25 (FieldTypeInv0 (type f_67))))
 (=> (and (and (= (type o_63) RefType) (= (type f_67) (FieldType A@@25 B@@24))) (or (U_2_bool (MapType1Select (MapType0Select Result_3Heap@1 null (|lseg#sm| (MapType0Select Result_3Heap@1 ptr@0 next) null)) o_63 f_67)) (U_2_bool (MapType1Select (MapType0Select Result_3Heap@1 null (|lseg#sm| (MapType0Select Result_3Heap@1 (MapType0Select Result_3Heap@1 ptr@0 next) next) null)) o_63 f_67)))) (U_2_bool (MapType1Select newPMask@35 o_63 f_67)))))
 :qid |stdinbpl.4807:55|
 :skolemid |168|
 :pattern ( (MapType1Select newPMask@35 o_63 f_67))
)) (= Result_3Heap@2 (MapType0Store Result_3Heap@1 null (|lseg#sm| (MapType0Select Result_3Heap@1 ptr@0 next) null) newPMask@35))) (and (= Result_3Heap@3 Result_3Heap@2) (= (ControlFlow 0 328) 327))) anon383_correct)))))
(let ((anon784_Else_correct  (=> (= (MapType0Select UnfoldingHeap@49 ptr@0 next) null) (and (=> (= (ControlFlow 0 334) 328) anon785_Then_correct) (=> (= (ControlFlow 0 334) 329) anon785_Else_correct)))))
(let ((anon784_Then_correct  (=> (not (= (MapType0Select UnfoldingHeap@49 ptr@0 next) null)) (and (=> (= (ControlFlow 0 330) (- 0 333)) (HasDirectPerm UnfoldingMask@49 ptr@0 data)) (=> (HasDirectPerm UnfoldingMask@49 ptr@0 data) (and (=> (= (ControlFlow 0 330) (- 0 332)) (HasDirectPerm UnfoldingMask@49 ptr@0 next)) (=> (HasDirectPerm UnfoldingMask@49 ptr@0 next) (and (=> (= (ControlFlow 0 330) (- 0 331)) (HasDirectPerm UnfoldingMask@49 (MapType0Select UnfoldingHeap@49 ptr@0 next) data)) (=> (HasDirectPerm UnfoldingMask@49 (MapType0Select UnfoldingHeap@49 ptr@0 next) data) (and (=> (= (ControlFlow 0 330) 328) anon785_Then_correct) (=> (= (ControlFlow 0 330) 329) anon785_Else_correct)))))))))))
(let ((anon379_correct  (=> (state UnfoldingHeap@49 UnfoldingMask@49) (and (=> (= (ControlFlow 0 335) (- 0 337)) (HasDirectPerm UnfoldingMask@49 ptr@0 next)) (=> (HasDirectPerm UnfoldingMask@49 ptr@0 next) (and (=> (= (ControlFlow 0 335) (- 0 336)) (HasDirectPerm UnfoldingMask@49 ptr@0 next)) (=> (HasDirectPerm UnfoldingMask@49 ptr@0 next) (and (=> (= (ControlFlow 0 335) 330) anon784_Then_correct) (=> (= (ControlFlow 0 335) 334) anon784_Else_correct)))))))))
(let ((anon378_correct  (=> (and (and (state UnfoldingHeap@48 UnfoldingMask@48) (= UnfoldingHeap@49 UnfoldingHeap@48)) (and (= UnfoldingMask@49 UnfoldingMask@48) (= (ControlFlow 0 339) 335))) anon379_correct)))
(let ((anon783_Else_correct  (=> (= (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) null) (=> (and (= UnfoldingHeap@48 Result_3Heap) (= (ControlFlow 0 341) 339)) anon378_correct))))
(let ((anon783_Then_correct  (=> (not (= (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) null)) (=> (and (= UnfoldingHeap@45 (MapType0Store Result_3Heap null (|lseg#sm| (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) null) (MapType1Store (MapType0Select Result_3Heap null (|lseg#sm| (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) null)) (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) data (bool_2_U true)))) (= UnfoldingHeap@46 (MapType0Store UnfoldingHeap@45 null (|lseg#sm| (MapType0Select UnfoldingHeap@45 (MapType0Select UnfoldingHeap@45 ptr@0 next) next) null) (MapType1Store (MapType0Select UnfoldingHeap@45 null (|lseg#sm| (MapType0Select UnfoldingHeap@45 (MapType0Select UnfoldingHeap@45 ptr@0 next) next) null)) (MapType0Select UnfoldingHeap@45 (MapType0Select UnfoldingHeap@45 ptr@0 next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_62 T@U) (f_66 T@U) ) (! (let ((B@@25 (FieldTypeInv1 (type f_66))))
(let ((A@@26 (FieldTypeInv0 (type f_66))))
 (=> (and (and (= (type o_62) RefType) (= (type f_66) (FieldType A@@26 B@@25))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@46 null (|lseg#sm| (MapType0Select UnfoldingHeap@46 (MapType0Select UnfoldingHeap@46 ptr@0 next) next) null)) o_62 f_66)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@46 null (|lseg#sm| (MapType0Select UnfoldingHeap@46 (MapType0Select UnfoldingHeap@46 (MapType0Select UnfoldingHeap@46 ptr@0 next) next) next) null)) o_62 f_66)))) (U_2_bool (MapType1Select newPMask@34 o_62 f_66)))))
 :qid |stdinbpl.4780:57|
 :skolemid |167|
 :pattern ( (MapType1Select newPMask@34 o_62 f_66))
)) (= UnfoldingHeap@47 (MapType0Store UnfoldingHeap@46 null (|lseg#sm| (MapType0Select UnfoldingHeap@46 (MapType0Select UnfoldingHeap@46 ptr@0 next) next) null) newPMask@34))) (and (= UnfoldingHeap@48 UnfoldingHeap@47) (= (ControlFlow 0 340) 339))) anon378_correct)))))
(let ((anon376_correct  (=> (and (state Unfolding1Heap@24 Unfolding1Mask@24) (=> (not (= (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) null)) (<= (U_2_int (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) data)) (U_2_int (MapType0Select Result_3Heap (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) data))))) (and (=> (= (ControlFlow 0 342) 340) anon783_Then_correct) (=> (= (ControlFlow 0 342) 341) anon783_Else_correct)))))
(let ((anon375_correct  (=> (and (and (state Unfolding1Heap@23 Unfolding1Mask@23) (= Unfolding1Heap@24 Unfolding1Heap@23)) (and (= Unfolding1Mask@24 Unfolding1Mask@23) (= (ControlFlow 0 344) 342))) anon376_correct)))
(let ((anon782_Else_correct  (=> (= (MapType0Select Result_3Heap (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) next) null) (=> (and (= Unfolding1Heap@23 Result_3Heap) (= (ControlFlow 0 346) 344)) anon375_correct))))
(let ((anon782_Then_correct  (=> (not (= (MapType0Select Result_3Heap (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) next) null)) (=> (and (= Unfolding1Heap@20 (MapType0Store Result_3Heap null (|lseg#sm| (MapType0Select Result_3Heap (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) next) null) (MapType1Store (MapType0Select Result_3Heap null (|lseg#sm| (MapType0Select Result_3Heap (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) next) null)) (MapType0Select Result_3Heap (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) next) data (bool_2_U true)))) (= Unfolding1Heap@21 (MapType0Store Unfolding1Heap@20 null (|lseg#sm| (MapType0Select Unfolding1Heap@20 (MapType0Select Unfolding1Heap@20 (MapType0Select Unfolding1Heap@20 ptr@0 next) next) next) null) (MapType1Store (MapType0Select Unfolding1Heap@20 null (|lseg#sm| (MapType0Select Unfolding1Heap@20 (MapType0Select Unfolding1Heap@20 (MapType0Select Unfolding1Heap@20 ptr@0 next) next) next) null)) (MapType0Select Unfolding1Heap@20 (MapType0Select Unfolding1Heap@20 (MapType0Select Unfolding1Heap@20 ptr@0 next) next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_61 T@U) (f_65 T@U) ) (! (let ((B@@26 (FieldTypeInv1 (type f_65))))
(let ((A@@27 (FieldTypeInv0 (type f_65))))
 (=> (and (and (= (type o_61) RefType) (= (type f_65) (FieldType A@@27 B@@26))) (or (U_2_bool (MapType1Select (MapType0Select Unfolding1Heap@21 null (|lseg#sm| (MapType0Select Unfolding1Heap@21 (MapType0Select Unfolding1Heap@21 (MapType0Select Unfolding1Heap@21 ptr@0 next) next) next) null)) o_61 f_65)) (U_2_bool (MapType1Select (MapType0Select Unfolding1Heap@21 null (|lseg#sm| (MapType0Select Unfolding1Heap@21 (MapType0Select Unfolding1Heap@21 (MapType0Select Unfolding1Heap@21 (MapType0Select Unfolding1Heap@21 ptr@0 next) next) next) next) null)) o_61 f_65)))) (U_2_bool (MapType1Select newPMask@33 o_61 f_65)))))
 :qid |stdinbpl.4764:61|
 :skolemid |166|
 :pattern ( (MapType1Select newPMask@33 o_61 f_65))
)) (= Unfolding1Heap@22 (MapType0Store Unfolding1Heap@21 null (|lseg#sm| (MapType0Select Unfolding1Heap@21 (MapType0Select Unfolding1Heap@21 (MapType0Select Unfolding1Heap@21 ptr@0 next) next) next) null) newPMask@33))) (and (= Unfolding1Heap@23 Unfolding1Heap@22) (= (ControlFlow 0 345) 344))) anon375_correct)))))
(let ((anon781_Then_correct  (=> (not (= (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) null)) (=> (and (not (= (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) null)) (= Unfolding1Mask@21 (MapType1Store Unfolding1Mask@20 (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) data (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@20 (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) data)) FullPerm))))) (=> (and (and (and (state Result_3Heap Unfolding1Mask@21) (not (= (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) null))) (and (= Unfolding1Mask@22 (MapType1Store Unfolding1Mask@21 (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) next (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@21 (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) next)) FullPerm)))) (state Result_3Heap Unfolding1Mask@22))) (and (and (= Unfolding1Mask@23 (MapType1Store Unfolding1Mask@22 null (lseg (MapType0Select Result_3Heap (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) next) null) (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@22 null (lseg (MapType0Select Result_3Heap (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) null) (MapType0Select Result_3Heap null (lseg (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) null)) (lseg (MapType0Select Result_3Heap (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) next) null) (MapType0Select Result_3Heap null (lseg (MapType0Select Result_3Heap (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) next) null)))) (and (state Result_3Heap Unfolding1Mask@23) (=> (not (= (MapType0Select Result_3Heap (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) next) null)) (<= (U_2_int (MapType0Select Result_3Heap (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) data)) (U_2_int (MapType0Select Result_3Heap (MapType0Select Result_3Heap (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) next) data))))))) (and (=> (= (ControlFlow 0 347) 345) anon782_Then_correct) (=> (= (ControlFlow 0 347) 346) anon782_Else_correct)))))))
(let ((anon781_Else_correct  (=> (and (and (= (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) null) (= Unfolding1Heap@24 Result_3Heap)) (and (= Unfolding1Mask@24 Unfolding1Mask@20) (= (ControlFlow 0 343) 342))) anon376_correct)))
(let ((anon780_Then_correct  (=> (not (= (MapType0Select Result_3Heap ptr@0 next) null)) (=> (and (and (not (= (MapType0Select Result_3Heap ptr@0 next) null)) (= UnfoldingMask@46 (MapType1Store UnfoldingMask@45 (MapType0Select Result_3Heap ptr@0 next) data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@45 (MapType0Select Result_3Heap ptr@0 next) data)) FullPerm))))) (and (state Result_3Heap UnfoldingMask@46) (not (= (MapType0Select Result_3Heap ptr@0 next) null)))) (=> (and (and (and (= UnfoldingMask@47 (MapType1Store UnfoldingMask@46 (MapType0Select Result_3Heap ptr@0 next) next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@46 (MapType0Select Result_3Heap ptr@0 next) next)) FullPerm)))) (state Result_3Heap UnfoldingMask@47)) (and (= UnfoldingMask@48 (MapType1Store UnfoldingMask@47 null (lseg (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@47 null (lseg (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Result_3Heap ptr@0 next) null) (MapType0Select Result_3Heap null (lseg (MapType0Select Result_3Heap ptr@0 next) null)) (lseg (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) null) (MapType0Select Result_3Heap null (lseg (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) null))))) (and (and (state Result_3Heap UnfoldingMask@48) (|lseg#trigger| Result_3Heap (lseg (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) null))) (and (= (MapType0Select Result_3Heap null (lseg (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) null)) (FrameFragment (ite (not (= (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) null)) (CombineFrames (FrameFragment (MapType0Select Result_3Heap (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) data)) (CombineFrames (FrameFragment (MapType0Select Result_3Heap (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) next)) (MapType0Select Result_3Heap null (lseg (MapType0Select Result_3Heap (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) next) null)))) EmptyFrame))) (= Unfolding1Mask@20 (MapType1Store UnfoldingMask@48 null (lseg (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) null) (real_2_U (- (U_2_real (MapType1Select UnfoldingMask@48 null (lseg (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) null))) FullPerm))))))) (and (=> (= (ControlFlow 0 348) 347) anon781_Then_correct) (=> (= (ControlFlow 0 348) 343) anon781_Else_correct)))))))
(let ((anon780_Else_correct  (=> (and (and (= (MapType0Select Result_3Heap ptr@0 next) null) (= UnfoldingHeap@49 Result_3Heap)) (and (= UnfoldingMask@49 UnfoldingMask@45) (= (ControlFlow 0 338) 335))) anon379_correct)))
(let ((anon371_correct  (=> (= UnfoldingMask@45 (MapType1Store Result_3Mask null (lseg (MapType0Select Result_3Heap ptr@0 next) null) (real_2_U (- (U_2_real (MapType1Select Result_3Mask null (lseg (MapType0Select Result_3Heap ptr@0 next) null))) FullPerm)))) (and (=> (= (ControlFlow 0 349) 348) anon780_Then_correct) (=> (= (ControlFlow 0 349) 338) anon780_Else_correct)))))
(let ((anon779_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 352) 349)) anon371_correct)))
(let ((anon779_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 350) (- 0 351)) (<= FullPerm (U_2_real (MapType1Select Result_3Mask null (lseg (MapType0Select Result_3Heap ptr@0 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Result_3Mask null (lseg (MapType0Select Result_3Heap ptr@0 next) null)))) (=> (= (ControlFlow 0 350) 349) anon371_correct))))))
(let ((anon778_Then_correct  (=> b_5@20 (=> (and (|lseg#trigger| Result_3Heap (lseg (MapType0Select Result_3Heap ptr@0 next) null)) (= (MapType0Select Result_3Heap null (lseg (MapType0Select Result_3Heap ptr@0 next) null)) (FrameFragment (ite (not (= (MapType0Select Result_3Heap ptr@0 next) null)) (CombineFrames (FrameFragment (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) data)) (CombineFrames (FrameFragment (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next)) (MapType0Select Result_3Heap null (lseg (MapType0Select Result_3Heap (MapType0Select Result_3Heap ptr@0 next) next) null)))) EmptyFrame)))) (and (=> (= (ControlFlow 0 353) 350) anon779_Then_correct) (=> (= (ControlFlow 0 353) 352) anon779_Else_correct))))))
(let ((anon778_Else_correct  (=> (not b_5@20) (=> (and (= Result_3Heap@4 Result_3Heap) (= (ControlFlow 0 326) 323)) anon384_correct))))
(let ((anon777_Then_correct  (=> (and b_5@20 b_6@18) (and (=> (= (ControlFlow 0 354) 353) anon778_Then_correct) (=> (= (ControlFlow 0 354) 326) anon778_Else_correct)))))
(let ((anon777_Else_correct  (=> (not (and b_5@20 b_6@18)) (=> (and (= Result_3Heap@4 Result_3Heap) (= (ControlFlow 0 325) 323)) anon384_correct))))
(let ((anon367_correct  (and (=> (= (ControlFlow 0 355) (- 0 356)) (=> (and b_5@17 b_6@18) (and (= neededTransfer@15 0.0) (= (U_2_real (MapType1Select Used_3Mask@11 null (lseg arg_2@0 null))) initNeededTransfer@3)))) (=> (=> (and b_5@17 b_6@18) (and (= neededTransfer@15 0.0) (= (U_2_real (MapType1Select Used_3Mask@11 null (lseg arg_2@0 null))) initNeededTransfer@3))) (=> (and (and (and (= b_9@0  (and b_5@17 b_6@18)) (= b_9@1  (and b_9@0 (state Result_3Heap Result_3Mask)))) (and (= b_9@2  (and b_9@1 (sumMask Result_3Mask Ops_3Mask@11 Used_3Mask@11))) (= b_9@3  (and (and b_9@2 (IdenticalOnKnownLocations Ops_3Heap@3 Result_3Heap Ops_3Mask@11)) (IdenticalOnKnownLocations Used_3Heap@0 Result_3Heap Used_3Mask@11))))) (and (and (= b_9@4  (and b_9@3 (state Result_3Heap Result_3Mask))) (= b_5@18  (and b_5@17 b_9@4))) (and (= b_5@19  (and b_5@18 b_6@18)) (= b_5@20  (and b_5@19 (= Used_3Heap@0 Ops_3Heap@3)))))) (and (=> (= (ControlFlow 0 355) 354) anon777_Then_correct) (=> (= (ControlFlow 0 355) 325) anon777_Else_correct)))))))
(let ((anon776_Else_correct  (=> (>= 0.0 takeTransfer@7) (=> (and (= b_6@18 b_6@15) (= Heap@110 Heap@108)) (=> (and (and (= Used_3Mask@11 Used_3Mask@9) (= Mask@66 Mask@64)) (and (= neededTransfer@15 neededTransfer@13) (= (ControlFlow 0 359) 355))) anon367_correct)))))
(let ((anon776_Then_correct  (=> (> takeTransfer@7 0.0) (=> (and (= neededTransfer@14 (- neededTransfer@13 takeTransfer@7)) (= Used_3Mask@10 (MapType1Store Used_3Mask@9 null (lseg arg_2@0 null) (real_2_U (+ (U_2_real (MapType1Select Used_3Mask@9 null (lseg arg_2@0 null))) takeTransfer@7))))) (=> (and (and (= b_6@16  (and b_6@15 (state Used_3Heap@0 Used_3Mask@10))) (= TempMask@3 (MapType1Store ZeroMask null (lseg arg_2@0 null) (real_2_U FullPerm)))) (and (= b_6@17  (and b_6@16 (IdenticalOnKnownLocations Heap@108 Used_3Heap@0 TempMask@3))) (= Mask@65 (MapType1Store Mask@64 null (lseg arg_2@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@64 null (lseg arg_2@0 null))) takeTransfer@7)))))) (=> (and (and (and (forall ((o_60 T@U) (f_64 T@U) ) (! (let ((B@@27 (FieldTypeInv1 (type f_64))))
(let ((A@@28 (FieldTypeInv0 (type f_64))))
 (=> (and (and (= (type o_60) RefType) (= (type f_64) (FieldType A@@28 B@@27))) (or (U_2_bool (MapType1Select (MapType0Select Heap@108 null (|wand#sm| ptr@1 null FullPerm ptr@1 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 1)) 0) ptr@1 null)) o_60 f_64)) (U_2_bool (MapType1Select (MapType0Select Heap@108 null (|lseg#sm| (MapType0Select Heap@108 ptr@0 next) null)) o_60 f_64)))) (U_2_bool (MapType1Select newPMask@32 o_60 f_64)))))
 :qid |stdinbpl.4682:53|
 :skolemid |165|
 :pattern ( (MapType1Select newPMask@32 o_60 f_64))
)) (= Heap@109 (MapType0Store Heap@108 null (|wand#sm| ptr@1 null FullPerm ptr@1 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 1)) 0) ptr@1 null) newPMask@32))) (and (= b_6@18 b_6@17) (= Heap@110 Heap@109))) (and (and (= Used_3Mask@11 Used_3Mask@10) (= Mask@66 Mask@65)) (and (= neededTransfer@15 neededTransfer@14) (= (ControlFlow 0 358) 355)))) anon367_correct))))))
(let ((anon775_Else_correct  (=> (and (< maskTransfer@7 neededTransfer@13) (= takeTransfer@7 maskTransfer@7)) (and (=> (= (ControlFlow 0 361) 358) anon776_Then_correct) (=> (= (ControlFlow 0 361) 359) anon776_Else_correct)))))
(let ((anon775_Then_correct  (=> (and (<= neededTransfer@13 maskTransfer@7) (= takeTransfer@7 neededTransfer@13)) (and (=> (= (ControlFlow 0 360) 358) anon776_Then_correct) (=> (= (ControlFlow 0 360) 359) anon776_Else_correct)))))
(let ((anon774_Then_correct  (=> (and (and (and (and b_5@17 b_6@15) true) (> neededTransfer@13 0.0)) (= maskTransfer@7 (U_2_real (MapType1Select Mask@64 null (lseg arg_2@0 null))))) (and (=> (= (ControlFlow 0 362) 360) anon775_Then_correct) (=> (= (ControlFlow 0 362) 361) anon775_Else_correct)))))
(let ((anon774_Else_correct  (=> (not (and (and (and b_5@17 b_6@15) true) (> neededTransfer@13 0.0))) (=> (and (= b_6@18 b_6@15) (= Heap@110 Heap@108)) (=> (and (and (= Used_3Mask@11 Used_3Mask@9) (= Mask@66 Mask@64)) (and (= neededTransfer@15 neededTransfer@13) (= (ControlFlow 0 357) 355))) anon367_correct)))))
(let ((anon773_Else_correct  (=> (>= 0.0 takeTransfer@6) (=> (and (and (= neededTransfer@13 FullPerm) (= Used_3Mask@9 Used_3Mask@7)) (and (= Ops_3Mask@11 Ops_3Mask@9) (= b_6@15 b_6@12))) (and (=> (= (ControlFlow 0 365) 362) anon774_Then_correct) (=> (= (ControlFlow 0 365) 357) anon774_Else_correct))))))
(let ((anon773_Then_correct  (=> (> takeTransfer@6 0.0) (=> (and (= neededTransfer@12 (- FullPerm takeTransfer@6)) (= Used_3Mask@8 (MapType1Store Used_3Mask@7 null (lseg arg_2@0 null) (real_2_U (+ (U_2_real (MapType1Select Used_3Mask@7 null (lseg arg_2@0 null))) takeTransfer@6))))) (=> (and (and (and (= b_6@13  (and b_6@12 (state Used_3Heap@0 Used_3Mask@8))) (= TempMask@2 (MapType1Store ZeroMask null (lseg arg_2@0 null) (real_2_U FullPerm)))) (and (= b_6@14  (and b_6@13 (IdenticalOnKnownLocations Ops_3Heap@3 Used_3Heap@0 TempMask@2))) (= Ops_3Mask@10 (MapType1Store Ops_3Mask@9 null (lseg arg_2@0 null) (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@9 null (lseg arg_2@0 null))) takeTransfer@6)))))) (and (and (= neededTransfer@13 neededTransfer@12) (= Used_3Mask@9 Used_3Mask@8)) (and (= Ops_3Mask@11 Ops_3Mask@10) (= b_6@15 b_6@14)))) (and (=> (= (ControlFlow 0 364) 362) anon774_Then_correct) (=> (= (ControlFlow 0 364) 357) anon774_Else_correct)))))))
(let ((anon772_Else_correct  (=> (and (< maskTransfer@6 FullPerm) (= takeTransfer@6 maskTransfer@6)) (and (=> (= (ControlFlow 0 367) 364) anon773_Then_correct) (=> (= (ControlFlow 0 367) 365) anon773_Else_correct)))))
(let ((anon772_Then_correct  (=> (and (<= FullPerm maskTransfer@6) (= takeTransfer@6 FullPerm)) (and (=> (= (ControlFlow 0 366) 364) anon773_Then_correct) (=> (= (ControlFlow 0 366) 365) anon773_Else_correct)))))
(let ((anon771_Then_correct  (=> (and (and (and (and b_5@17 b_6@12) true) (> FullPerm 0.0)) (= maskTransfer@6 (U_2_real (MapType1Select Ops_3Mask@9 null (lseg arg_2@0 null))))) (and (=> (= (ControlFlow 0 368) 366) anon772_Then_correct) (=> (= (ControlFlow 0 368) 367) anon772_Else_correct)))))
(let ((anon771_Else_correct  (=> (not (and (and (and b_5@17 b_6@12) true) (> FullPerm 0.0))) (=> (and (and (= neededTransfer@13 FullPerm) (= Used_3Mask@9 Used_3Mask@7)) (and (= Ops_3Mask@11 Ops_3Mask@9) (= b_6@15 b_6@12))) (and (=> (= (ControlFlow 0 363) 362) anon774_Then_correct) (=> (= (ControlFlow 0 363) 357) anon774_Else_correct))))))
(let ((anon355_correct  (=> (and (= arg_2@0 (MapType0Select Result_2Heap ptr@0 next)) (= initNeededTransfer@3 (+ (U_2_real (MapType1Select Used_3Mask@7 null (lseg arg_2@0 null))) FullPerm))) (and (=> (= (ControlFlow 0 369) (- 0 370)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 369) 368) anon771_Then_correct) (=> (= (ControlFlow 0 369) 363) anon771_Else_correct)))))))
(let ((anon770_Else_correct  (=> (and (not b_5@17) (= (ControlFlow 0 374) 369)) anon355_correct)))
(let ((anon770_Then_correct  (=> b_5@17 (and (=> (= (ControlFlow 0 372) (- 0 373)) (HasDirectPerm Result_2Mask ptr@0 next)) (=> (HasDirectPerm Result_2Mask ptr@0 next) (=> (= (ControlFlow 0 372) 369) anon355_correct))))))
(let ((anon769_Then_correct  (=> (and b_5@17 b_6@12) (and (=> (= (ControlFlow 0 375) 372) anon770_Then_correct) (=> (= (ControlFlow 0 375) 374) anon770_Else_correct)))))
(let ((anon769_Else_correct  (=> (and (not (and b_5@17 b_6@12)) (= (ControlFlow 0 371) 369)) anon355_correct)))
(let ((anon352_correct  (and (=> (= (ControlFlow 0 376) (- 0 377)) (=> (and b_5@14 b_6@12) (and (= neededTransfer@11 0.0) (= (U_2_real (MapType1Select Used_3Mask@7 ptr@0 next)) initNeededTransfer@2)))) (=> (=> (and b_5@14 b_6@12) (and (= neededTransfer@11 0.0) (= (U_2_real (MapType1Select Used_3Mask@7 ptr@0 next)) initNeededTransfer@2))) (=> (and (and (and (= b_8@0  (and b_5@14 b_6@12)) (= b_8@1  (and b_8@0 (state Result_2Heap Result_2Mask)))) (and (= b_8@2  (and b_8@1 (sumMask Result_2Mask Ops_3Mask@9 Used_3Mask@7))) (= b_8@3  (and (and b_8@2 (IdenticalOnKnownLocations Ops_3Heap@3 Result_2Heap Ops_3Mask@9)) (IdenticalOnKnownLocations Used_3Heap@0 Result_2Heap Used_3Mask@7))))) (and (and (= b_8@4  (and b_8@3 (state Result_2Heap Result_2Mask))) (= b_5@15  (and b_5@14 b_8@4))) (and (= b_5@16  (and b_5@15 b_6@12)) (= b_5@17  (and b_5@16 (= Used_3Heap@0 Ops_3Heap@3)))))) (and (=> (= (ControlFlow 0 376) 375) anon769_Then_correct) (=> (= (ControlFlow 0 376) 371) anon769_Else_correct)))))))
(let ((anon768_Else_correct  (=> (>= 0.0 takeTransfer@5) (=> (and (= b_6@12 b_6@9) (= Mask@64 Mask@62)) (=> (and (and (= Heap@108 Heap@106) (= Used_3Mask@7 Used_3Mask@5)) (and (= neededTransfer@11 neededTransfer@9) (= (ControlFlow 0 380) 376))) anon352_correct)))))
(let ((anon768_Then_correct  (=> (> takeTransfer@5 0.0) (=> (and (and (= neededTransfer@10 (- neededTransfer@9 takeTransfer@5)) (= Used_3Mask@6 (MapType1Store Used_3Mask@5 ptr@0 next (real_2_U (+ (U_2_real (MapType1Select Used_3Mask@5 ptr@0 next)) takeTransfer@5))))) (and (= b_6@10  (and b_6@9 (state Used_3Heap@0 Used_3Mask@6))) (= b_6@11  (and b_6@10 (= (MapType0Select Heap@106 ptr@0 next) (MapType0Select Used_3Heap@0 ptr@0 next)))))) (=> (and (and (and (= Mask@63 (MapType1Store Mask@62 ptr@0 next (real_2_U (- (U_2_real (MapType1Select Mask@62 ptr@0 next)) takeTransfer@5)))) (= Heap@107 (MapType0Store Heap@106 null (|wand#sm| ptr@1 null FullPerm ptr@1 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 1)) 0) ptr@1 null) (MapType1Store (MapType0Select Heap@106 null (|wand#sm| ptr@1 null FullPerm ptr@1 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 1)) 0) ptr@1 null)) ptr@0 next (bool_2_U true))))) (and (= b_6@12 b_6@11) (= Mask@64 Mask@63))) (and (and (= Heap@108 Heap@107) (= Used_3Mask@7 Used_3Mask@6)) (and (= neededTransfer@11 neededTransfer@10) (= (ControlFlow 0 379) 376)))) anon352_correct)))))
(let ((anon767_Else_correct  (=> (and (< maskTransfer@5 neededTransfer@9) (= takeTransfer@5 maskTransfer@5)) (and (=> (= (ControlFlow 0 382) 379) anon768_Then_correct) (=> (= (ControlFlow 0 382) 380) anon768_Else_correct)))))
(let ((anon767_Then_correct  (=> (and (<= neededTransfer@9 maskTransfer@5) (= takeTransfer@5 neededTransfer@9)) (and (=> (= (ControlFlow 0 381) 379) anon768_Then_correct) (=> (= (ControlFlow 0 381) 380) anon768_Else_correct)))))
(let ((anon766_Then_correct  (=> (and (and (and (and b_5@14 b_6@9) true) (> neededTransfer@9 0.0)) (= maskTransfer@5 (U_2_real (MapType1Select Mask@62 ptr@0 next)))) (and (=> (= (ControlFlow 0 383) 381) anon767_Then_correct) (=> (= (ControlFlow 0 383) 382) anon767_Else_correct)))))
(let ((anon766_Else_correct  (=> (not (and (and (and b_5@14 b_6@9) true) (> neededTransfer@9 0.0))) (=> (and (= b_6@12 b_6@9) (= Mask@64 Mask@62)) (=> (and (and (= Heap@108 Heap@106) (= Used_3Mask@7 Used_3Mask@5)) (and (= neededTransfer@11 neededTransfer@9) (= (ControlFlow 0 378) 376))) anon352_correct)))))
(let ((anon765_Else_correct  (=> (>= 0.0 takeTransfer@4) (=> (and (and (= neededTransfer@9 FullPerm) (= Used_3Mask@5 Used_3Mask@3)) (and (= Ops_3Mask@9 Ops_3Mask@7) (= b_6@9 b_6@6))) (and (=> (= (ControlFlow 0 386) 383) anon766_Then_correct) (=> (= (ControlFlow 0 386) 378) anon766_Else_correct))))))
(let ((anon765_Then_correct  (=> (and (> takeTransfer@4 0.0) (= neededTransfer@8 (- FullPerm takeTransfer@4))) (=> (and (and (and (= Used_3Mask@4 (MapType1Store Used_3Mask@3 ptr@0 next (real_2_U (+ (U_2_real (MapType1Select Used_3Mask@3 ptr@0 next)) takeTransfer@4)))) (= b_6@7  (and b_6@6 (state Used_3Heap@0 Used_3Mask@4)))) (and (= b_6@8  (and b_6@7 (= (MapType0Select Ops_3Heap@3 ptr@0 next) (MapType0Select Used_3Heap@0 ptr@0 next)))) (= Ops_3Mask@8 (MapType1Store Ops_3Mask@7 ptr@0 next (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@7 ptr@0 next)) takeTransfer@4)))))) (and (and (= neededTransfer@9 neededTransfer@8) (= Used_3Mask@5 Used_3Mask@4)) (and (= Ops_3Mask@9 Ops_3Mask@8) (= b_6@9 b_6@8)))) (and (=> (= (ControlFlow 0 385) 383) anon766_Then_correct) (=> (= (ControlFlow 0 385) 378) anon766_Else_correct))))))
(let ((anon764_Else_correct  (=> (and (< maskTransfer@4 FullPerm) (= takeTransfer@4 maskTransfer@4)) (and (=> (= (ControlFlow 0 388) 385) anon765_Then_correct) (=> (= (ControlFlow 0 388) 386) anon765_Else_correct)))))
(let ((anon764_Then_correct  (=> (and (<= FullPerm maskTransfer@4) (= takeTransfer@4 FullPerm)) (and (=> (= (ControlFlow 0 387) 385) anon765_Then_correct) (=> (= (ControlFlow 0 387) 386) anon765_Else_correct)))))
(let ((anon763_Then_correct  (=> (and (and (and (and b_5@14 b_6@6) true) (> FullPerm 0.0)) (= maskTransfer@4 (U_2_real (MapType1Select Ops_3Mask@7 ptr@0 next)))) (and (=> (= (ControlFlow 0 389) 387) anon764_Then_correct) (=> (= (ControlFlow 0 389) 388) anon764_Else_correct)))))
(let ((anon763_Else_correct  (=> (not (and (and (and b_5@14 b_6@6) true) (> FullPerm 0.0))) (=> (and (and (= neededTransfer@9 FullPerm) (= Used_3Mask@5 Used_3Mask@3)) (and (= Ops_3Mask@9 Ops_3Mask@7) (= b_6@9 b_6@6))) (and (=> (= (ControlFlow 0 384) 383) anon766_Then_correct) (=> (= (ControlFlow 0 384) 378) anon766_Else_correct))))))
(let ((anon340_correct  (and (=> (= (ControlFlow 0 390) (- 0 392)) (=> (and b_5@11 b_6@6) (and (= neededTransfer@7 0.0) (= (U_2_real (MapType1Select Used_3Mask@3 ptr@0 data)) initNeededTransfer@1)))) (=> (=> (and b_5@11 b_6@6) (and (= neededTransfer@7 0.0) (= (U_2_real (MapType1Select Used_3Mask@3 ptr@0 data)) initNeededTransfer@1))) (=> (= b_7@0  (and b_5@11 b_6@6)) (=> (and (and (and (= b_7@1  (and b_7@0 (state Result_1Heap Result_1Mask))) (= b_7@2  (and b_7@1 (sumMask Result_1Mask Ops_3Mask@7 Used_3Mask@3)))) (and (= b_7@3  (and (and b_7@2 (IdenticalOnKnownLocations Ops_3Heap@3 Result_1Heap Ops_3Mask@7)) (IdenticalOnKnownLocations Used_3Heap@0 Result_1Heap Used_3Mask@3))) (= b_7@4  (and b_7@3 (state Result_1Heap Result_1Mask))))) (and (and (= b_5@12  (and b_5@11 b_7@4)) (= b_5@13  (and b_5@12 b_6@6))) (and (= b_5@14  (and b_5@13 (= Used_3Heap@0 Ops_3Heap@3))) (= initNeededTransfer@2 (+ (U_2_real (MapType1Select Used_3Mask@3 ptr@0 next)) FullPerm))))) (and (=> (= (ControlFlow 0 390) (- 0 391)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 390) 389) anon763_Then_correct) (=> (= (ControlFlow 0 390) 384) anon763_Else_correct))))))))))
(let ((anon762_Else_correct  (=> (>= 0.0 takeTransfer@3) (=> (and (= b_6@6 b_6@3) (= Used_3Mask@3 Used_3Mask@1)) (=> (and (and (= Heap@106 Heap@104) (= Mask@62 Mask@60)) (and (= neededTransfer@7 neededTransfer@5) (= (ControlFlow 0 395) 390))) anon340_correct)))))
(let ((anon762_Then_correct  (=> (> takeTransfer@3 0.0) (=> (and (and (= neededTransfer@6 (- neededTransfer@5 takeTransfer@3)) (= Used_3Mask@2 (MapType1Store Used_3Mask@1 ptr@0 data (real_2_U (+ (U_2_real (MapType1Select Used_3Mask@1 ptr@0 data)) takeTransfer@3))))) (and (= b_6@4  (and b_6@3 (state Used_3Heap@0 Used_3Mask@2))) (= b_6@5  (and b_6@4 (= (U_2_int (MapType0Select Heap@104 ptr@0 data)) (U_2_int (MapType0Select Used_3Heap@0 ptr@0 data))))))) (=> (and (and (and (= Mask@61 (MapType1Store Mask@60 ptr@0 data (real_2_U (- (U_2_real (MapType1Select Mask@60 ptr@0 data)) takeTransfer@3)))) (= Heap@105 (MapType0Store Heap@104 null (|wand#sm| ptr@1 null FullPerm ptr@1 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 1)) 0) ptr@1 null) (MapType1Store (MapType0Select Heap@104 null (|wand#sm| ptr@1 null FullPerm ptr@1 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@2 1)) 0) ptr@1 null)) ptr@0 data (bool_2_U true))))) (and (= b_6@6 b_6@5) (= Used_3Mask@3 Used_3Mask@2))) (and (and (= Heap@106 Heap@105) (= Mask@62 Mask@61)) (and (= neededTransfer@7 neededTransfer@6) (= (ControlFlow 0 394) 390)))) anon340_correct)))))
(let ((anon761_Else_correct  (=> (and (< maskTransfer@3 neededTransfer@5) (= takeTransfer@3 maskTransfer@3)) (and (=> (= (ControlFlow 0 397) 394) anon762_Then_correct) (=> (= (ControlFlow 0 397) 395) anon762_Else_correct)))))
(let ((anon761_Then_correct  (=> (and (<= neededTransfer@5 maskTransfer@3) (= takeTransfer@3 neededTransfer@5)) (and (=> (= (ControlFlow 0 396) 394) anon762_Then_correct) (=> (= (ControlFlow 0 396) 395) anon762_Else_correct)))))
(let ((anon760_Then_correct  (=> (and (and (and (and b_5@11 b_6@3) true) (> neededTransfer@5 0.0)) (= maskTransfer@3 (U_2_real (MapType1Select Mask@60 ptr@0 data)))) (and (=> (= (ControlFlow 0 398) 396) anon761_Then_correct) (=> (= (ControlFlow 0 398) 397) anon761_Else_correct)))))
(let ((anon760_Else_correct  (=> (not (and (and (and b_5@11 b_6@3) true) (> neededTransfer@5 0.0))) (=> (and (= b_6@6 b_6@3) (= Used_3Mask@3 Used_3Mask@1)) (=> (and (and (= Heap@106 Heap@104) (= Mask@62 Mask@60)) (and (= neededTransfer@7 neededTransfer@5) (= (ControlFlow 0 393) 390))) anon340_correct)))))
(let ((anon759_Else_correct  (=> (>= 0.0 takeTransfer@2) (=> (and (and (= neededTransfer@5 FullPerm) (= Ops_3Mask@7 Ops_3Mask@5)) (and (= Used_3Mask@1 ZeroMask) (= b_6@3 b_6@0))) (and (=> (= (ControlFlow 0 401) 398) anon760_Then_correct) (=> (= (ControlFlow 0 401) 393) anon760_Else_correct))))))
(let ((anon759_Then_correct  (=> (and (> takeTransfer@2 0.0) (= neededTransfer@4 (- FullPerm takeTransfer@2))) (=> (and (and (and (= Used_3Mask@0 (MapType1Store ZeroMask ptr@0 data (real_2_U (+ (U_2_real (MapType1Select ZeroMask ptr@0 data)) takeTransfer@2)))) (= b_6@1  (and b_6@0 (state Used_3Heap@0 Used_3Mask@0)))) (and (= b_6@2  (and b_6@1 (= (U_2_int (MapType0Select Ops_3Heap@3 ptr@0 data)) (U_2_int (MapType0Select Used_3Heap@0 ptr@0 data))))) (= Ops_3Mask@6 (MapType1Store Ops_3Mask@5 ptr@0 data (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@5 ptr@0 data)) takeTransfer@2)))))) (and (and (= neededTransfer@5 neededTransfer@4) (= Ops_3Mask@7 Ops_3Mask@6)) (and (= Used_3Mask@1 Used_3Mask@0) (= b_6@3 b_6@2)))) (and (=> (= (ControlFlow 0 400) 398) anon760_Then_correct) (=> (= (ControlFlow 0 400) 393) anon760_Else_correct))))))
(let ((anon758_Else_correct  (=> (and (< maskTransfer@2 FullPerm) (= takeTransfer@2 maskTransfer@2)) (and (=> (= (ControlFlow 0 403) 400) anon759_Then_correct) (=> (= (ControlFlow 0 403) 401) anon759_Else_correct)))))
(let ((anon758_Then_correct  (=> (and (<= FullPerm maskTransfer@2) (= takeTransfer@2 FullPerm)) (and (=> (= (ControlFlow 0 402) 400) anon759_Then_correct) (=> (= (ControlFlow 0 402) 401) anon759_Else_correct)))))
(let ((anon757_Then_correct  (=> (and (and (and (and b_5@11 b_6@0) true) (> FullPerm 0.0)) (= maskTransfer@2 (U_2_real (MapType1Select Ops_3Mask@5 ptr@0 data)))) (and (=> (= (ControlFlow 0 404) 402) anon758_Then_correct) (=> (= (ControlFlow 0 404) 403) anon758_Else_correct)))))
(let ((anon757_Else_correct  (=> (not (and (and (and b_5@11 b_6@0) true) (> FullPerm 0.0))) (=> (and (and (= neededTransfer@5 FullPerm) (= Ops_3Mask@7 Ops_3Mask@5)) (and (= Used_3Mask@1 ZeroMask) (= b_6@3 b_6@0))) (and (=> (= (ControlFlow 0 399) 398) anon760_Then_correct) (=> (= (ControlFlow 0 399) 393) anon760_Else_correct))))))
(let ((anon756_Then_correct  (=> (and (=> b_5@11 (not (= ptr@0 null))) (= initNeededTransfer@1 (+ (U_2_real (MapType1Select ZeroMask ptr@0 data)) FullPerm))) (and (=> (= (ControlFlow 0 405) (- 0 406)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 405) 404) anon757_Then_correct) (=> (= (ControlFlow 0 405) 399) anon757_Else_correct)))))))
(let ((anon756_Else_correct  (=> (and (and (and (not (=> b_5@11 (not (= ptr@0 null)))) (= b_5@23 b_5@11)) (and (= Ops_3Mask@12 Ops_3Mask@5) (= Mask@67 Mask@60))) (and (and (= Used_3Mask@12 ZeroMask) (= Heap@111 Heap@104)) (and (= b_6@19 b_6@0) (= (ControlFlow 0 322) 321)))) anon385_correct)))
(let ((anon755_Then_correct  (=> (and b_5@11 (= b_6@0  (and b_6 (state Used_3Heap@0 ZeroMask)))) (and (=> (= (ControlFlow 0 407) 405) anon756_Then_correct) (=> (= (ControlFlow 0 407) 322) anon756_Else_correct)))))
(let ((anon755_Else_correct  (=> (and (not b_5@11) (= Ops_3Heap@11 Ops_3Heap@3)) (=> (and (and (= Heap@112 Heap@104) (= Ops_3Mask@14 Ops_3Mask@5)) (and (= Mask@68 Mask@60) (= b_5@28 b_5@11))) (and (=> (= (ControlFlow 0 312) 311) anon789_Then_correct) (=> (= (ControlFlow 0 312) 229) anon789_Else_correct))))))
(let ((anon326_correct  (=> (and (= b_5@10  (and b_5@9 (state Ops_3Heap@3 Ops_3Mask@5))) (= b_5@11  (and b_5@10 (state Ops_3Heap@3 Ops_3Mask@5)))) (and (=> (= (ControlFlow 0 408) 407) anon755_Then_correct) (=> (= (ControlFlow 0 408) 312) anon755_Else_correct)))))
(let ((anon325_correct  (=> (= b_5@8  (and b_5@7 (= (U_2_int (|Seq#Index| (contentNodes Ops_3Heap@2 ptr@1 null) 0)) (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@2 1)))))) (=> (and (and (= b_5@9 b_5@8) (= Ops_3Mask@5 Ops_3Mask@4)) (and (= Ops_3Heap@3 Ops_3Heap@2) (= (ControlFlow 0 411) 408))) anon326_correct))))
(let ((anon324_correct  (and (=> (= (ControlFlow 0 413) (- 0 415)) (>= (- index@2 1) 0)) (=> (>= (- index@2 1) 0) (and (=> (= (ControlFlow 0 413) (- 0 414)) (< (- index@2 1) (|Seq#Length| (content Heap@@38 this@@38)))) (=> (< (- index@2 1) (|Seq#Length| (content Heap@@38 this@@38))) (=> (and (and (= Ops_3Mask@4 Ops_3Mask@3) (= Ops_3Heap@2 Ops_3Heap@1)) (and (= b_5@7 b_5@6) (= (ControlFlow 0 413) 411))) anon325_correct)))))))
(let ((anon323_correct  (=> (and (= b_5@6 false) (= (ControlFlow 0 417) 413)) anon324_correct)))
(let ((anon754_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 420) 417)) anon323_correct)))
(let ((anon754_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 418) (- 0 419)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38)))) (=> (= (ControlFlow 0 418) 417) anon323_correct))))))
(let ((anon753_Else_correct  (=> (and (= b_5@6 b_5@5) (= (ControlFlow 0 416) 413)) anon324_correct)))
(let ((anon320_correct  (and (=> (= (ControlFlow 0 421) (- 0 422)) (< 0 (|Seq#Length| (contentNodes Ops_3Heap@1 ptr@1 null)))) (=> (< 0 (|Seq#Length| (contentNodes Ops_3Heap@1 ptr@1 null))) (and (and (=> (= (ControlFlow 0 421) 416) anon753_Else_correct) (=> (= (ControlFlow 0 421) 418) anon754_Then_correct)) (=> (= (ControlFlow 0 421) 420) anon754_Else_correct))))))
(let ((anon319_correct  (=> (and (= Ops_3Mask@2 (MapType1Store Ops_3Mask@1 null (lseg ptr@1 null) (real_2_U (- (U_2_real (MapType1Select Ops_3Mask@1 null (lseg ptr@1 null))) FullPerm)))) (= b_5@4  (and b_5@3 (IdenticalOnKnownLocations Ops_3Heap@0 ExhaleHeap@3 Ops_3Mask@2)))) (=> (and (and (= b_5@5 false) (= Ops_3Heap@1 ExhaleHeap@3)) (and (= Ops_3Mask@3 Ops_3Mask@2) (= (ControlFlow 0 424) 421))) anon320_correct))))
(let ((anon752_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 427) 424)) anon319_correct)))
(let ((anon752_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 425) (- 0 426)) (<= FullPerm (U_2_real (MapType1Select Ops_3Mask@1 null (lseg ptr@1 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Ops_3Mask@1 null (lseg ptr@1 null)))) (=> (= (ControlFlow 0 425) 424) anon319_correct))))))
(let ((anon751_Else_correct  (=> (and (and (= b_5@5 b_5@3) (= Ops_3Heap@1 Ops_3Heap@0)) (and (= Ops_3Mask@3 Ops_3Mask@1) (= (ControlFlow 0 423) 421))) anon320_correct)))
(let ((anon750_Then_correct  (=> b_5@3 (and (and (=> (= (ControlFlow 0 428) 423) anon751_Else_correct) (=> (= (ControlFlow 0 428) 425) anon752_Then_correct)) (=> (= (ControlFlow 0 428) 427) anon752_Else_correct)))))
(let ((anon750_Else_correct  (=> (not b_5@3) (=> (and (and (= Ops_3Mask@4 Ops_3Mask@1) (= Ops_3Heap@2 Ops_3Heap@0)) (and (= b_5@7 b_5@3) (= (ControlFlow 0 412) 411))) anon325_correct))))
(let ((anon749_Then_correct  (=> (and b_5@2 (= b_5@3  (and b_5@2 (state Ops_3Heap@0 Ops_3Mask@1)))) (and (=> (= (ControlFlow 0 429) 428) anon750_Then_correct) (=> (= (ControlFlow 0 429) 412) anon750_Else_correct)))))
(let ((anon749_Else_correct  (=> (not b_5@2) (=> (and (and (= b_5@9 b_5@2) (= Ops_3Mask@5 Ops_3Mask@1)) (and (= Ops_3Heap@3 Ops_3Heap@0) (= (ControlFlow 0 410) 408))) anon326_correct))))
(let ((anon748_Else_correct  (=> (not b_5@0) (=> (and (= Ops_3Mask@1 ZeroMask) (= b_5@2 b_5@0)) (and (=> (= (ControlFlow 0 431) 429) anon749_Then_correct) (=> (= (ControlFlow 0 431) 410) anon749_Else_correct))))))
(let ((anon748_Then_correct  (=> b_5@0 (=> (and (and (= Ops_3Mask@0 (MapType1Store ZeroMask null (lseg ptr@1 null) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (lseg ptr@1 null))) FullPerm)))) (= b_5@1  (and b_5@0 (state Ops_3Heap@0 Ops_3Mask@0)))) (and (= Ops_3Mask@1 Ops_3Mask@0) (= b_5@2 b_5@1))) (and (=> (= (ControlFlow 0 430) 429) anon749_Then_correct) (=> (= (ControlFlow 0 430) 410) anon749_Else_correct))))))
(let ((anon747_Then_correct  (=> b_5@0 (and (=> (= (ControlFlow 0 432) 430) anon748_Then_correct) (=> (= (ControlFlow 0 432) 431) anon748_Else_correct)))))
(let ((anon747_Else_correct  (=> (not b_5@0) (=> (and (and (= b_5@9 b_5@0) (= Ops_3Mask@5 ZeroMask)) (and (= Ops_3Heap@3 Ops_3Heap@0) (= (ControlFlow 0 409) 408))) anon326_correct))))
(let ((anon311_correct  (=> (and (and (state Heap@104 Mask@60) (state Heap@104 Mask@60)) (and (= index@2 (+ index@1 1)) (state Heap@104 Mask@60))) (and (=> (= (ControlFlow 0 433) (- 0 434)) (HasDirectPerm Mask@60 ptr@0 next)) (=> (HasDirectPerm Mask@60 ptr@0 next) (=> (and (and (= ptr@1 (MapType0Select Heap@104 ptr@0 next)) (state Heap@104 Mask@60)) (and (= b_5@0  (and b_5 (state Ops_3Heap@0 ZeroMask))) (= b_4@0  (and b_4 (state Used_2Heap@0 ZeroMask))))) (and (=> (= (ControlFlow 0 433) 432) anon747_Then_correct) (=> (= (ControlFlow 0 433) 409) anon747_Else_correct))))))))
(let ((anon310_correct  (=> (and (and (state Heap@103 Mask@59) (= Mask@60 Mask@59)) (and (= Heap@104 Heap@103) (= (ControlFlow 0 436) 433))) anon311_correct)))
(let ((anon746_Else_correct  (=> (= (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) null) (=> (and (= Heap@103 Heap@99) (= (ControlFlow 0 438) 436)) anon310_correct))))
(let ((anon746_Then_correct  (=> (not (= (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) null)) (=> (and (= Heap@100 (MapType0Store Heap@99 null (|lseg#sm| (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) null) (MapType1Store (MapType0Select Heap@99 null (|lseg#sm| (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) null)) (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) data (bool_2_U true)))) (= Heap@101 (MapType0Store Heap@100 null (|lseg#sm| (MapType0Select Heap@100 (MapType0Select Heap@100 ptr@0 next) next) null) (MapType1Store (MapType0Select Heap@100 null (|lseg#sm| (MapType0Select Heap@100 (MapType0Select Heap@100 ptr@0 next) next) null)) (MapType0Select Heap@100 (MapType0Select Heap@100 ptr@0 next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_59 T@U) (f_63 T@U) ) (! (let ((B@@28 (FieldTypeInv1 (type f_63))))
(let ((A@@29 (FieldTypeInv0 (type f_63))))
 (=> (and (and (= (type o_59) RefType) (= (type f_63) (FieldType A@@29 B@@28))) (or (U_2_bool (MapType1Select (MapType0Select Heap@101 null (|lseg#sm| (MapType0Select Heap@101 (MapType0Select Heap@101 ptr@0 next) next) null)) o_59 f_63)) (U_2_bool (MapType1Select (MapType0Select Heap@101 null (|lseg#sm| (MapType0Select Heap@101 (MapType0Select Heap@101 (MapType0Select Heap@101 ptr@0 next) next) next) null)) o_59 f_63)))) (U_2_bool (MapType1Select newPMask@31 o_59 f_63)))))
 :qid |stdinbpl.4392:45|
 :skolemid |164|
 :pattern ( (MapType1Select newPMask@31 o_59 f_63))
)) (= Heap@102 (MapType0Store Heap@101 null (|lseg#sm| (MapType0Select Heap@101 (MapType0Select Heap@101 ptr@0 next) next) null) newPMask@31))) (and (= Heap@103 Heap@102) (= (ControlFlow 0 437) 436))) anon310_correct)))))
(let ((anon308_correct  (=> (and (state UnfoldingHeap@44 UnfoldingMask@44) (=> (not (= (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) null)) (<= (U_2_int (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) data)) (U_2_int (MapType0Select Heap@99 (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) data))))) (and (=> (= (ControlFlow 0 439) 437) anon746_Then_correct) (=> (= (ControlFlow 0 439) 438) anon746_Else_correct)))))
(let ((anon307_correct  (=> (and (and (state UnfoldingHeap@43 UnfoldingMask@43) (= UnfoldingHeap@44 UnfoldingHeap@43)) (and (= UnfoldingMask@44 UnfoldingMask@43) (= (ControlFlow 0 441) 439))) anon308_correct)))
(let ((anon745_Else_correct  (=> (= (MapType0Select Heap@99 (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) next) null) (=> (and (= UnfoldingHeap@43 Heap@99) (= (ControlFlow 0 443) 441)) anon307_correct))))
(let ((anon745_Then_correct  (=> (not (= (MapType0Select Heap@99 (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) next) null)) (=> (and (= UnfoldingHeap@40 (MapType0Store Heap@99 null (|lseg#sm| (MapType0Select Heap@99 (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) next) null) (MapType1Store (MapType0Select Heap@99 null (|lseg#sm| (MapType0Select Heap@99 (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) next) null)) (MapType0Select Heap@99 (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) next) data (bool_2_U true)))) (= UnfoldingHeap@41 (MapType0Store UnfoldingHeap@40 null (|lseg#sm| (MapType0Select UnfoldingHeap@40 (MapType0Select UnfoldingHeap@40 (MapType0Select UnfoldingHeap@40 ptr@0 next) next) next) null) (MapType1Store (MapType0Select UnfoldingHeap@40 null (|lseg#sm| (MapType0Select UnfoldingHeap@40 (MapType0Select UnfoldingHeap@40 (MapType0Select UnfoldingHeap@40 ptr@0 next) next) next) null)) (MapType0Select UnfoldingHeap@40 (MapType0Select UnfoldingHeap@40 (MapType0Select UnfoldingHeap@40 ptr@0 next) next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_58 T@U) (f_62 T@U) ) (! (let ((B@@29 (FieldTypeInv1 (type f_62))))
(let ((A@@30 (FieldTypeInv0 (type f_62))))
 (=> (and (and (= (type o_58) RefType) (= (type f_62) (FieldType A@@30 B@@29))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@41 null (|lseg#sm| (MapType0Select UnfoldingHeap@41 (MapType0Select UnfoldingHeap@41 (MapType0Select UnfoldingHeap@41 ptr@0 next) next) next) null)) o_58 f_62)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@41 null (|lseg#sm| (MapType0Select UnfoldingHeap@41 (MapType0Select UnfoldingHeap@41 (MapType0Select UnfoldingHeap@41 (MapType0Select UnfoldingHeap@41 ptr@0 next) next) next) next) null)) o_58 f_62)))) (U_2_bool (MapType1Select newPMask@30 o_58 f_62)))))
 :qid |stdinbpl.4376:49|
 :skolemid |163|
 :pattern ( (MapType1Select newPMask@30 o_58 f_62))
)) (= UnfoldingHeap@42 (MapType0Store UnfoldingHeap@41 null (|lseg#sm| (MapType0Select UnfoldingHeap@41 (MapType0Select UnfoldingHeap@41 (MapType0Select UnfoldingHeap@41 ptr@0 next) next) next) null) newPMask@30))) (and (= UnfoldingHeap@43 UnfoldingHeap@42) (= (ControlFlow 0 442) 441))) anon307_correct)))))
(let ((anon744_Then_correct  (=> (not (= (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) null)) (=> (and (not (= (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) null)) (= UnfoldingMask@41 (MapType1Store UnfoldingMask@40 (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@40 (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) data)) FullPerm))))) (=> (and (and (and (state Heap@99 UnfoldingMask@41) (not (= (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) null))) (and (= UnfoldingMask@42 (MapType1Store UnfoldingMask@41 (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@41 (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) next)) FullPerm)))) (state Heap@99 UnfoldingMask@42))) (and (and (= UnfoldingMask@43 (MapType1Store UnfoldingMask@42 null (lseg (MapType0Select Heap@99 (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) next) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@42 null (lseg (MapType0Select Heap@99 (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) null) (MapType0Select Heap@99 null (lseg (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) null)) (lseg (MapType0Select Heap@99 (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) next) null) (MapType0Select Heap@99 null (lseg (MapType0Select Heap@99 (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) next) null)))) (and (state Heap@99 UnfoldingMask@43) (=> (not (= (MapType0Select Heap@99 (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) next) null)) (<= (U_2_int (MapType0Select Heap@99 (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) data)) (U_2_int (MapType0Select Heap@99 (MapType0Select Heap@99 (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) next) data))))))) (and (=> (= (ControlFlow 0 444) 442) anon745_Then_correct) (=> (= (ControlFlow 0 444) 443) anon745_Else_correct)))))))
(let ((anon744_Else_correct  (=> (and (and (= (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) null) (= UnfoldingHeap@44 Heap@99)) (and (= UnfoldingMask@44 UnfoldingMask@40) (= (ControlFlow 0 440) 439))) anon308_correct)))
(let ((anon743_Then_correct  (=> (not (= (MapType0Select Heap@99 ptr@0 next) null)) (=> (and (and (not (= (MapType0Select Heap@99 ptr@0 next) null)) (= Mask@57 (MapType1Store Mask@56 (MapType0Select Heap@99 ptr@0 next) data (real_2_U (+ (U_2_real (MapType1Select Mask@56 (MapType0Select Heap@99 ptr@0 next) data)) FullPerm))))) (and (state Heap@99 Mask@57) (not (= (MapType0Select Heap@99 ptr@0 next) null)))) (=> (and (and (and (= Mask@58 (MapType1Store Mask@57 (MapType0Select Heap@99 ptr@0 next) next (real_2_U (+ (U_2_real (MapType1Select Mask@57 (MapType0Select Heap@99 ptr@0 next) next)) FullPerm)))) (state Heap@99 Mask@58)) (and (= Mask@59 (MapType1Store Mask@58 null (lseg (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) null) (real_2_U (+ (U_2_real (MapType1Select Mask@58 null (lseg (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@99 ptr@0 next) null) (MapType0Select Heap@99 null (lseg (MapType0Select Heap@99 ptr@0 next) null)) (lseg (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) null) (MapType0Select Heap@99 null (lseg (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) null))))) (and (and (state Heap@99 Mask@59) (|lseg#trigger| Heap@99 (lseg (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) null))) (and (= (MapType0Select Heap@99 null (lseg (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@99 (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@99 (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) next)) (MapType0Select Heap@99 null (lseg (MapType0Select Heap@99 (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) next) null)))) EmptyFrame))) (= UnfoldingMask@40 (MapType1Store Mask@59 null (lseg (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) null) (real_2_U (- (U_2_real (MapType1Select Mask@59 null (lseg (MapType0Select Heap@99 (MapType0Select Heap@99 ptr@0 next) next) null))) FullPerm))))))) (and (=> (= (ControlFlow 0 445) 444) anon744_Then_correct) (=> (= (ControlFlow 0 445) 440) anon744_Else_correct)))))))
(let ((anon743_Else_correct  (=> (and (and (= (MapType0Select Heap@99 ptr@0 next) null) (= Mask@60 Mask@56)) (and (= Heap@104 Heap@99) (= (ControlFlow 0 435) 433))) anon311_correct)))
(let ((anon742_Else_correct  (=> (and (HasDirectPerm Mask@56 null (lseg (MapType0Select Heap@97 ptr@0 next) null)) (= Heap@99 Heap@97)) (and (=> (= (ControlFlow 0 447) 445) anon743_Then_correct) (=> (= (ControlFlow 0 447) 435) anon743_Else_correct)))))
(let ((anon742_Then_correct  (=> (not (HasDirectPerm Mask@56 null (lseg (MapType0Select Heap@97 ptr@0 next) null))) (=> (and (= Heap@98 (MapType0Store Heap@97 null (lseg (MapType0Select Heap@97 ptr@0 next) null) newVersion@2)) (= Heap@99 Heap@98)) (and (=> (= (ControlFlow 0 446) 445) anon743_Then_correct) (=> (= (ControlFlow 0 446) 435) anon743_Else_correct))))))
(let ((anon301_correct  (=> (= Mask@56 (MapType1Store Mask@55 null (lseg (MapType0Select Heap@97 ptr@0 next) null) (real_2_U (- (U_2_real (MapType1Select Mask@55 null (lseg (MapType0Select Heap@97 ptr@0 next) null))) FullPerm)))) (and (=> (= (ControlFlow 0 448) 446) anon742_Then_correct) (=> (= (ControlFlow 0 448) 447) anon742_Else_correct)))))
(let ((anon741_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 451) 448)) anon301_correct)))
(let ((anon741_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 449) (- 0 450)) (<= FullPerm (U_2_real (MapType1Select Mask@55 null (lseg (MapType0Select Heap@97 ptr@0 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@55 null (lseg (MapType0Select Heap@97 ptr@0 next) null)))) (=> (= (ControlFlow 0 449) 448) anon301_correct))))))
(let ((anon730_Else_correct  (and (=> (= (ControlFlow 0 452) (- 0 454)) (<= FullPerm (U_2_real (MapType1Select Mask@55 null (wand ptr@0 null FullPerm ptr@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@1 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@1 1)) 0) ptr@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@55 null (wand ptr@0 null FullPerm ptr@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@1 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@1 1)) 0) ptr@0 null)))) (=> (= AssertMask@0 (MapType1Store Mask@55 null (wand ptr@0 null FullPerm ptr@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@1 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@1 1)) 0) ptr@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@55 null (wand ptr@0 null FullPerm ptr@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@1 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@1 1)) 0) ptr@0 null))) FullPerm)))) (=> (and (state Heap@97 Mask@55) (state Heap@97 Mask@55)) (and (=> (= (ControlFlow 0 452) (- 0 453)) (HasDirectPerm Mask@55 ptr@0 next)) (=> (HasDirectPerm Mask@55 ptr@0 next) (=> (and (|lseg#trigger| Heap@97 (lseg (MapType0Select Heap@97 ptr@0 next) null)) (= (MapType0Select Heap@97 null (lseg (MapType0Select Heap@97 ptr@0 next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@97 ptr@0 next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@97 (MapType0Select Heap@97 ptr@0 next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@97 (MapType0Select Heap@97 ptr@0 next) next)) (MapType0Select Heap@97 null (lseg (MapType0Select Heap@97 (MapType0Select Heap@97 ptr@0 next) next) null)))) EmptyFrame)))) (and (=> (= (ControlFlow 0 452) 449) anon741_Then_correct) (=> (= (ControlFlow 0 452) 451) anon741_Else_correct)))))))))))
(let ((anon277_correct  (=> (and (and (not (= (MapType0Select Heap@97 ptr@0 next) null)) (< (U_2_int (MapType0Select Heap@97 (MapType0Select Heap@97 ptr@0 next) data)) elem)) (and (state Heap@97 Mask@55) (U_2_bool (MapType0Select Heap@97 prev $allocated)))) (and (=> (= (ControlFlow 0 482) 481) anon730_Then_correct) (=> (= (ControlFlow 0 482) 452) anon730_Else_correct)))))
(let ((anon276_correct  (=> (state Heap@96 Mask@55) (=> (and (= Heap@97 Heap@96) (= (ControlFlow 0 484) 482)) anon277_correct))))
(let ((anon729_Else_correct  (=> (= (MapType0Select Heap@92 ptr@0 next) null) (=> (and (= Heap@96 Heap@92) (= (ControlFlow 0 486) 484)) anon276_correct))))
(let ((anon729_Then_correct  (=> (not (= (MapType0Select Heap@92 ptr@0 next) null)) (=> (and (= Heap@93 (MapType0Store Heap@92 null (|lseg#sm| (MapType0Select Heap@92 ptr@0 next) null) (MapType1Store (MapType0Select Heap@92 null (|lseg#sm| (MapType0Select Heap@92 ptr@0 next) null)) (MapType0Select Heap@92 ptr@0 next) data (bool_2_U true)))) (= Heap@94 (MapType0Store Heap@93 null (|lseg#sm| (MapType0Select Heap@93 ptr@0 next) null) (MapType1Store (MapType0Select Heap@93 null (|lseg#sm| (MapType0Select Heap@93 ptr@0 next) null)) (MapType0Select Heap@93 ptr@0 next) next (bool_2_U true))))) (=> (and (and (forall ((o_57 T@U) (f_61 T@U) ) (! (let ((B@@30 (FieldTypeInv1 (type f_61))))
(let ((A@@31 (FieldTypeInv0 (type f_61))))
 (=> (and (and (= (type o_57) RefType) (= (type f_61) (FieldType A@@31 B@@30))) (or (U_2_bool (MapType1Select (MapType0Select Heap@94 null (|lseg#sm| (MapType0Select Heap@94 ptr@0 next) null)) o_57 f_61)) (U_2_bool (MapType1Select (MapType0Select Heap@94 null (|lseg#sm| (MapType0Select Heap@94 (MapType0Select Heap@94 ptr@0 next) next) null)) o_57 f_61)))) (U_2_bool (MapType1Select newPMask@29 o_57 f_61)))))
 :qid |stdinbpl.4159:43|
 :skolemid |162|
 :pattern ( (MapType1Select newPMask@29 o_57 f_61))
)) (= Heap@95 (MapType0Store Heap@94 null (|lseg#sm| (MapType0Select Heap@94 ptr@0 next) null) newPMask@29))) (and (= Heap@96 Heap@95) (= (ControlFlow 0 485) 484))) anon276_correct)))))
(let ((anon274_correct  (=> (state UnfoldingHeap@39 UnfoldingMask@39) (and (=> (= (ControlFlow 0 487) (- 0 490)) (HasDirectPerm UnfoldingMask@39 ptr@0 next)) (=> (HasDirectPerm UnfoldingMask@39 ptr@0 next) (and (=> (= (ControlFlow 0 487) (- 0 489)) (HasDirectPerm UnfoldingMask@39 ptr@0 next)) (=> (HasDirectPerm UnfoldingMask@39 ptr@0 next) (and (=> (= (ControlFlow 0 487) (- 0 488)) (HasDirectPerm UnfoldingMask@39 (MapType0Select UnfoldingHeap@39 ptr@0 next) data)) (=> (HasDirectPerm UnfoldingMask@39 (MapType0Select UnfoldingHeap@39 ptr@0 next) data) (and (=> (= (ControlFlow 0 487) 485) anon729_Then_correct) (=> (= (ControlFlow 0 487) 486) anon729_Else_correct)))))))))))
(let ((anon273_correct  (=> (and (and (state UnfoldingHeap@38 UnfoldingMask@38) (= UnfoldingHeap@39 UnfoldingHeap@38)) (and (= UnfoldingMask@39 UnfoldingMask@38) (= (ControlFlow 0 492) 487))) anon274_correct)))
(let ((anon728_Else_correct  (=> (= (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) null) (=> (and (= UnfoldingHeap@38 Heap@92) (= (ControlFlow 0 494) 492)) anon273_correct))))
(let ((anon728_Then_correct  (=> (not (= (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) null)) (=> (and (= UnfoldingHeap@35 (MapType0Store Heap@92 null (|lseg#sm| (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) null) (MapType1Store (MapType0Select Heap@92 null (|lseg#sm| (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) null)) (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) data (bool_2_U true)))) (= UnfoldingHeap@36 (MapType0Store UnfoldingHeap@35 null (|lseg#sm| (MapType0Select UnfoldingHeap@35 (MapType0Select UnfoldingHeap@35 ptr@0 next) next) null) (MapType1Store (MapType0Select UnfoldingHeap@35 null (|lseg#sm| (MapType0Select UnfoldingHeap@35 (MapType0Select UnfoldingHeap@35 ptr@0 next) next) null)) (MapType0Select UnfoldingHeap@35 (MapType0Select UnfoldingHeap@35 ptr@0 next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_56 T@U) (f_60 T@U) ) (! (let ((B@@31 (FieldTypeInv1 (type f_60))))
(let ((A@@32 (FieldTypeInv0 (type f_60))))
 (=> (and (and (= (type o_56) RefType) (= (type f_60) (FieldType A@@32 B@@31))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@36 null (|lseg#sm| (MapType0Select UnfoldingHeap@36 (MapType0Select UnfoldingHeap@36 ptr@0 next) next) null)) o_56 f_60)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@36 null (|lseg#sm| (MapType0Select UnfoldingHeap@36 (MapType0Select UnfoldingHeap@36 (MapType0Select UnfoldingHeap@36 ptr@0 next) next) next) null)) o_56 f_60)))) (U_2_bool (MapType1Select newPMask@28 o_56 f_60)))))
 :qid |stdinbpl.4138:45|
 :skolemid |161|
 :pattern ( (MapType1Select newPMask@28 o_56 f_60))
)) (= UnfoldingHeap@37 (MapType0Store UnfoldingHeap@36 null (|lseg#sm| (MapType0Select UnfoldingHeap@36 (MapType0Select UnfoldingHeap@36 ptr@0 next) next) null) newPMask@28))) (and (= UnfoldingHeap@38 UnfoldingHeap@37) (= (ControlFlow 0 493) 492))) anon273_correct)))))
(let ((anon271_correct  (=> (and (state Unfolding1Heap@19 Unfolding1Mask@19) (=> (not (= (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) null)) (<= (U_2_int (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) data)) (U_2_int (MapType0Select Heap@92 (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) data))))) (and (=> (= (ControlFlow 0 495) 493) anon728_Then_correct) (=> (= (ControlFlow 0 495) 494) anon728_Else_correct)))))
(let ((anon270_correct  (=> (and (and (state Unfolding1Heap@18 Unfolding1Mask@18) (= Unfolding1Heap@19 Unfolding1Heap@18)) (and (= Unfolding1Mask@19 Unfolding1Mask@18) (= (ControlFlow 0 497) 495))) anon271_correct)))
(let ((anon727_Else_correct  (=> (= (MapType0Select Heap@92 (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) next) null) (=> (and (= Unfolding1Heap@18 Heap@92) (= (ControlFlow 0 499) 497)) anon270_correct))))
(let ((anon727_Then_correct  (=> (not (= (MapType0Select Heap@92 (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) next) null)) (=> (and (= Unfolding1Heap@15 (MapType0Store Heap@92 null (|lseg#sm| (MapType0Select Heap@92 (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) next) null) (MapType1Store (MapType0Select Heap@92 null (|lseg#sm| (MapType0Select Heap@92 (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) next) null)) (MapType0Select Heap@92 (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) next) data (bool_2_U true)))) (= Unfolding1Heap@16 (MapType0Store Unfolding1Heap@15 null (|lseg#sm| (MapType0Select Unfolding1Heap@15 (MapType0Select Unfolding1Heap@15 (MapType0Select Unfolding1Heap@15 ptr@0 next) next) next) null) (MapType1Store (MapType0Select Unfolding1Heap@15 null (|lseg#sm| (MapType0Select Unfolding1Heap@15 (MapType0Select Unfolding1Heap@15 (MapType0Select Unfolding1Heap@15 ptr@0 next) next) next) null)) (MapType0Select Unfolding1Heap@15 (MapType0Select Unfolding1Heap@15 (MapType0Select Unfolding1Heap@15 ptr@0 next) next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_55 T@U) (f_59 T@U) ) (! (let ((B@@32 (FieldTypeInv1 (type f_59))))
(let ((A@@33 (FieldTypeInv0 (type f_59))))
 (=> (and (and (= (type o_55) RefType) (= (type f_59) (FieldType A@@33 B@@32))) (or (U_2_bool (MapType1Select (MapType0Select Unfolding1Heap@16 null (|lseg#sm| (MapType0Select Unfolding1Heap@16 (MapType0Select Unfolding1Heap@16 (MapType0Select Unfolding1Heap@16 ptr@0 next) next) next) null)) o_55 f_59)) (U_2_bool (MapType1Select (MapType0Select Unfolding1Heap@16 null (|lseg#sm| (MapType0Select Unfolding1Heap@16 (MapType0Select Unfolding1Heap@16 (MapType0Select Unfolding1Heap@16 (MapType0Select Unfolding1Heap@16 ptr@0 next) next) next) next) null)) o_55 f_59)))) (U_2_bool (MapType1Select newPMask@27 o_55 f_59)))))
 :qid |stdinbpl.4122:49|
 :skolemid |160|
 :pattern ( (MapType1Select newPMask@27 o_55 f_59))
)) (= Unfolding1Heap@17 (MapType0Store Unfolding1Heap@16 null (|lseg#sm| (MapType0Select Unfolding1Heap@16 (MapType0Select Unfolding1Heap@16 (MapType0Select Unfolding1Heap@16 ptr@0 next) next) next) null) newPMask@27))) (and (= Unfolding1Heap@18 Unfolding1Heap@17) (= (ControlFlow 0 498) 497))) anon270_correct)))))
(let ((anon726_Then_correct  (=> (not (= (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) null)) (=> (and (not (= (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) null)) (= Unfolding1Mask@16 (MapType1Store Unfolding1Mask@15 (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) data (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@15 (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) data)) FullPerm))))) (=> (and (and (and (state Heap@92 Unfolding1Mask@16) (not (= (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) null))) (and (= Unfolding1Mask@17 (MapType1Store Unfolding1Mask@16 (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) next (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@16 (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) next)) FullPerm)))) (state Heap@92 Unfolding1Mask@17))) (and (and (= Unfolding1Mask@18 (MapType1Store Unfolding1Mask@17 null (lseg (MapType0Select Heap@92 (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) next) null) (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@17 null (lseg (MapType0Select Heap@92 (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) null) (MapType0Select Heap@92 null (lseg (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) null)) (lseg (MapType0Select Heap@92 (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) next) null) (MapType0Select Heap@92 null (lseg (MapType0Select Heap@92 (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) next) null)))) (and (state Heap@92 Unfolding1Mask@18) (=> (not (= (MapType0Select Heap@92 (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) next) null)) (<= (U_2_int (MapType0Select Heap@92 (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) data)) (U_2_int (MapType0Select Heap@92 (MapType0Select Heap@92 (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) next) data))))))) (and (=> (= (ControlFlow 0 500) 498) anon727_Then_correct) (=> (= (ControlFlow 0 500) 499) anon727_Else_correct)))))))
(let ((anon726_Else_correct  (=> (and (and (= (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) null) (= Unfolding1Heap@19 Heap@92)) (and (= Unfolding1Mask@19 Unfolding1Mask@15) (= (ControlFlow 0 496) 495))) anon271_correct)))
(let ((anon725_Then_correct  (=> (not (= (MapType0Select Heap@92 ptr@0 next) null)) (=> (and (and (not (= (MapType0Select Heap@92 ptr@0 next) null)) (= UnfoldingMask@36 (MapType1Store UnfoldingMask@35 (MapType0Select Heap@92 ptr@0 next) data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@35 (MapType0Select Heap@92 ptr@0 next) data)) FullPerm))))) (and (state Heap@92 UnfoldingMask@36) (not (= (MapType0Select Heap@92 ptr@0 next) null)))) (=> (and (and (and (= UnfoldingMask@37 (MapType1Store UnfoldingMask@36 (MapType0Select Heap@92 ptr@0 next) next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@36 (MapType0Select Heap@92 ptr@0 next) next)) FullPerm)))) (state Heap@92 UnfoldingMask@37)) (and (= UnfoldingMask@38 (MapType1Store UnfoldingMask@37 null (lseg (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@37 null (lseg (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@92 ptr@0 next) null) (MapType0Select Heap@92 null (lseg (MapType0Select Heap@92 ptr@0 next) null)) (lseg (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) null) (MapType0Select Heap@92 null (lseg (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) null))))) (and (and (state Heap@92 UnfoldingMask@38) (|lseg#trigger| Heap@92 (lseg (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) null))) (and (= (MapType0Select Heap@92 null (lseg (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@92 (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@92 (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) next)) (MapType0Select Heap@92 null (lseg (MapType0Select Heap@92 (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) next) null)))) EmptyFrame))) (= Unfolding1Mask@15 (MapType1Store UnfoldingMask@38 null (lseg (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) null) (real_2_U (- (U_2_real (MapType1Select UnfoldingMask@38 null (lseg (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) null))) FullPerm))))))) (and (=> (= (ControlFlow 0 501) 500) anon726_Then_correct) (=> (= (ControlFlow 0 501) 496) anon726_Else_correct)))))))
(let ((anon725_Else_correct  (=> (and (and (= (MapType0Select Heap@92 ptr@0 next) null) (= UnfoldingHeap@39 Heap@92)) (and (= UnfoldingMask@39 UnfoldingMask@35) (= (ControlFlow 0 491) 487))) anon274_correct)))
(let ((anon266_correct  (=> (= UnfoldingMask@35 (MapType1Store Mask@55 null (lseg (MapType0Select Heap@92 ptr@0 next) null) (real_2_U (- (U_2_real (MapType1Select Mask@55 null (lseg (MapType0Select Heap@92 ptr@0 next) null))) FullPerm)))) (and (=> (= (ControlFlow 0 502) 501) anon725_Then_correct) (=> (= (ControlFlow 0 502) 491) anon725_Else_correct)))))
(let ((anon724_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 505) 502)) anon266_correct)))
(let ((anon724_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 503) (- 0 504)) (<= FullPerm (U_2_real (MapType1Select Mask@55 null (lseg (MapType0Select Heap@92 ptr@0 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@55 null (lseg (MapType0Select Heap@92 ptr@0 next) null)))) (=> (= (ControlFlow 0 503) 502) anon266_correct))))))
(let ((anon723_Then_correct  (=> (not (= (MapType0Select Heap@92 ptr@0 next) null)) (=> (and (|lseg#trigger| Heap@92 (lseg (MapType0Select Heap@92 ptr@0 next) null)) (= (MapType0Select Heap@92 null (lseg (MapType0Select Heap@92 ptr@0 next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@92 ptr@0 next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next)) (MapType0Select Heap@92 null (lseg (MapType0Select Heap@92 (MapType0Select Heap@92 ptr@0 next) next) null)))) EmptyFrame)))) (and (=> (= (ControlFlow 0 506) 503) anon724_Then_correct) (=> (= (ControlFlow 0 506) 505) anon724_Else_correct))))))
(let ((anon723_Else_correct  (=> (= (MapType0Select Heap@92 ptr@0 next) null) (=> (and (= Heap@97 Heap@92) (= (ControlFlow 0 483) 482)) anon277_correct))))
(let ((anon263_correct  (and (=> (= (ControlFlow 0 507) (- 0 508)) (HasDirectPerm Mask@55 ptr@0 next)) (=> (HasDirectPerm Mask@55 ptr@0 next) (and (=> (= (ControlFlow 0 507) 506) anon723_Then_correct) (=> (= (ControlFlow 0 507) 483) anon723_Else_correct))))))
(let ((anon262_correct  (=> (state Heap@91 Mask@55) (=> (and (= Heap@92 Heap@91) (= (ControlFlow 0 510) 507)) anon263_correct))))
(let ((anon722_Else_correct  (=> (= (MapType0Select Heap@87 ptr@0 next) null) (=> (and (= Heap@91 Heap@87) (= (ControlFlow 0 512) 510)) anon262_correct))))
(let ((anon722_Then_correct  (=> (not (= (MapType0Select Heap@87 ptr@0 next) null)) (=> (and (= Heap@88 (MapType0Store Heap@87 null (|lseg#sm| (MapType0Select Heap@87 ptr@0 next) null) (MapType1Store (MapType0Select Heap@87 null (|lseg#sm| (MapType0Select Heap@87 ptr@0 next) null)) (MapType0Select Heap@87 ptr@0 next) data (bool_2_U true)))) (= Heap@89 (MapType0Store Heap@88 null (|lseg#sm| (MapType0Select Heap@88 ptr@0 next) null) (MapType1Store (MapType0Select Heap@88 null (|lseg#sm| (MapType0Select Heap@88 ptr@0 next) null)) (MapType0Select Heap@88 ptr@0 next) next (bool_2_U true))))) (=> (and (and (forall ((o_54 T@U) (f_58 T@U) ) (! (let ((B@@33 (FieldTypeInv1 (type f_58))))
(let ((A@@34 (FieldTypeInv0 (type f_58))))
 (=> (and (and (= (type o_54) RefType) (= (type f_58) (FieldType A@@34 B@@33))) (or (U_2_bool (MapType1Select (MapType0Select Heap@89 null (|lseg#sm| (MapType0Select Heap@89 ptr@0 next) null)) o_54 f_58)) (U_2_bool (MapType1Select (MapType0Select Heap@89 null (|lseg#sm| (MapType0Select Heap@89 (MapType0Select Heap@89 ptr@0 next) next) null)) o_54 f_58)))) (U_2_bool (MapType1Select newPMask@26 o_54 f_58)))))
 :qid |stdinbpl.4049:43|
 :skolemid |159|
 :pattern ( (MapType1Select newPMask@26 o_54 f_58))
)) (= Heap@90 (MapType0Store Heap@89 null (|lseg#sm| (MapType0Select Heap@89 ptr@0 next) null) newPMask@26))) (and (= Heap@91 Heap@90) (= (ControlFlow 0 511) 510))) anon262_correct)))))
(let ((anon260_correct  (=> (state Heap@87 Mask@55) (and (=> (= (ControlFlow 0 513) 511) anon722_Then_correct) (=> (= (ControlFlow 0 513) 512) anon722_Else_correct)))))
(let ((anon721_Else_correct  (=> (= (MapType0Select Heap@83 ptr@0 next) null) (=> (and (= Heap@87 Heap@83) (= (ControlFlow 0 515) 513)) anon260_correct))))
(let ((anon721_Then_correct  (=> (not (= (MapType0Select Heap@83 ptr@0 next) null)) (=> (and (= Heap@84 (MapType0Store Heap@83 null (|lseg#sm| (MapType0Select Heap@83 ptr@0 next) null) (MapType1Store (MapType0Select Heap@83 null (|lseg#sm| (MapType0Select Heap@83 ptr@0 next) null)) (MapType0Select Heap@83 ptr@0 next) data (bool_2_U true)))) (= Heap@85 (MapType0Store Heap@84 null (|lseg#sm| (MapType0Select Heap@84 ptr@0 next) null) (MapType1Store (MapType0Select Heap@84 null (|lseg#sm| (MapType0Select Heap@84 ptr@0 next) null)) (MapType0Select Heap@84 ptr@0 next) next (bool_2_U true))))) (=> (and (and (forall ((o_53 T@U) (f_57 T@U) ) (! (let ((B@@34 (FieldTypeInv1 (type f_57))))
(let ((A@@35 (FieldTypeInv0 (type f_57))))
 (=> (and (and (= (type o_53) RefType) (= (type f_57) (FieldType A@@35 B@@34))) (or (U_2_bool (MapType1Select (MapType0Select Heap@85 null (|lseg#sm| (MapType0Select Heap@85 ptr@0 next) null)) o_53 f_57)) (U_2_bool (MapType1Select (MapType0Select Heap@85 null (|lseg#sm| (MapType0Select Heap@85 (MapType0Select Heap@85 ptr@0 next) next) null)) o_53 f_57)))) (U_2_bool (MapType1Select newPMask@25 o_53 f_57)))))
 :qid |stdinbpl.4036:43|
 :skolemid |158|
 :pattern ( (MapType1Select newPMask@25 o_53 f_57))
)) (= Heap@86 (MapType0Store Heap@85 null (|lseg#sm| (MapType0Select Heap@85 ptr@0 next) null) newPMask@25))) (and (= Heap@87 Heap@86) (= (ControlFlow 0 514) 513))) anon260_correct)))))
(let ((anon258_correct  (=> (state UnfoldingHeap@34 UnfoldingMask@34) (and (=> (= (ControlFlow 0 516) 514) anon721_Then_correct) (=> (= (ControlFlow 0 516) 515) anon721_Else_correct)))))
(let ((anon257_correct  (=> (and (and (state UnfoldingHeap@33 UnfoldingMask@33) (= UnfoldingHeap@34 UnfoldingHeap@33)) (and (= UnfoldingMask@34 UnfoldingMask@33) (= (ControlFlow 0 518) 516))) anon258_correct)))
(let ((anon720_Else_correct  (=> (= (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) null) (=> (and (= UnfoldingHeap@33 Heap@83) (= (ControlFlow 0 520) 518)) anon257_correct))))
(let ((anon720_Then_correct  (=> (not (= (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) null)) (=> (and (= UnfoldingHeap@30 (MapType0Store Heap@83 null (|lseg#sm| (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) null) (MapType1Store (MapType0Select Heap@83 null (|lseg#sm| (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) null)) (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) data (bool_2_U true)))) (= UnfoldingHeap@31 (MapType0Store UnfoldingHeap@30 null (|lseg#sm| (MapType0Select UnfoldingHeap@30 (MapType0Select UnfoldingHeap@30 ptr@0 next) next) null) (MapType1Store (MapType0Select UnfoldingHeap@30 null (|lseg#sm| (MapType0Select UnfoldingHeap@30 (MapType0Select UnfoldingHeap@30 ptr@0 next) next) null)) (MapType0Select UnfoldingHeap@30 (MapType0Select UnfoldingHeap@30 ptr@0 next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_52 T@U) (f_56 T@U) ) (! (let ((B@@35 (FieldTypeInv1 (type f_56))))
(let ((A@@36 (FieldTypeInv0 (type f_56))))
 (=> (and (and (= (type o_52) RefType) (= (type f_56) (FieldType A@@36 B@@35))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@31 null (|lseg#sm| (MapType0Select UnfoldingHeap@31 (MapType0Select UnfoldingHeap@31 ptr@0 next) next) null)) o_52 f_56)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@31 null (|lseg#sm| (MapType0Select UnfoldingHeap@31 (MapType0Select UnfoldingHeap@31 (MapType0Select UnfoldingHeap@31 ptr@0 next) next) next) null)) o_52 f_56)))) (U_2_bool (MapType1Select newPMask@24 o_52 f_56)))))
 :qid |stdinbpl.4021:45|
 :skolemid |157|
 :pattern ( (MapType1Select newPMask@24 o_52 f_56))
)) (= UnfoldingHeap@32 (MapType0Store UnfoldingHeap@31 null (|lseg#sm| (MapType0Select UnfoldingHeap@31 (MapType0Select UnfoldingHeap@31 ptr@0 next) next) null) newPMask@24))) (and (= UnfoldingHeap@33 UnfoldingHeap@32) (= (ControlFlow 0 519) 518))) anon257_correct)))))
(let ((anon255_correct  (=> (and (state Unfolding1Heap@14 Unfolding1Mask@14) (=> (not (= (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) null)) (<= (U_2_int (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) data)) (U_2_int (MapType0Select Heap@83 (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) data))))) (and (=> (= (ControlFlow 0 521) 519) anon720_Then_correct) (=> (= (ControlFlow 0 521) 520) anon720_Else_correct)))))
(let ((anon254_correct  (=> (and (and (state Unfolding1Heap@13 Unfolding1Mask@13) (= Unfolding1Heap@14 Unfolding1Heap@13)) (and (= Unfolding1Mask@14 Unfolding1Mask@13) (= (ControlFlow 0 523) 521))) anon255_correct)))
(let ((anon719_Else_correct  (=> (= (MapType0Select Heap@83 (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) next) null) (=> (and (= Unfolding1Heap@13 Heap@83) (= (ControlFlow 0 525) 523)) anon254_correct))))
(let ((anon719_Then_correct  (=> (not (= (MapType0Select Heap@83 (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) next) null)) (=> (and (= Unfolding1Heap@10 (MapType0Store Heap@83 null (|lseg#sm| (MapType0Select Heap@83 (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) next) null) (MapType1Store (MapType0Select Heap@83 null (|lseg#sm| (MapType0Select Heap@83 (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) next) null)) (MapType0Select Heap@83 (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) next) data (bool_2_U true)))) (= Unfolding1Heap@11 (MapType0Store Unfolding1Heap@10 null (|lseg#sm| (MapType0Select Unfolding1Heap@10 (MapType0Select Unfolding1Heap@10 (MapType0Select Unfolding1Heap@10 ptr@0 next) next) next) null) (MapType1Store (MapType0Select Unfolding1Heap@10 null (|lseg#sm| (MapType0Select Unfolding1Heap@10 (MapType0Select Unfolding1Heap@10 (MapType0Select Unfolding1Heap@10 ptr@0 next) next) next) null)) (MapType0Select Unfolding1Heap@10 (MapType0Select Unfolding1Heap@10 (MapType0Select Unfolding1Heap@10 ptr@0 next) next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_51 T@U) (f_55 T@U) ) (! (let ((B@@36 (FieldTypeInv1 (type f_55))))
(let ((A@@37 (FieldTypeInv0 (type f_55))))
 (=> (and (and (= (type o_51) RefType) (= (type f_55) (FieldType A@@37 B@@36))) (or (U_2_bool (MapType1Select (MapType0Select Unfolding1Heap@11 null (|lseg#sm| (MapType0Select Unfolding1Heap@11 (MapType0Select Unfolding1Heap@11 (MapType0Select Unfolding1Heap@11 ptr@0 next) next) next) null)) o_51 f_55)) (U_2_bool (MapType1Select (MapType0Select Unfolding1Heap@11 null (|lseg#sm| (MapType0Select Unfolding1Heap@11 (MapType0Select Unfolding1Heap@11 (MapType0Select Unfolding1Heap@11 (MapType0Select Unfolding1Heap@11 ptr@0 next) next) next) next) null)) o_51 f_55)))) (U_2_bool (MapType1Select newPMask@23 o_51 f_55)))))
 :qid |stdinbpl.4005:49|
 :skolemid |156|
 :pattern ( (MapType1Select newPMask@23 o_51 f_55))
)) (= Unfolding1Heap@12 (MapType0Store Unfolding1Heap@11 null (|lseg#sm| (MapType0Select Unfolding1Heap@11 (MapType0Select Unfolding1Heap@11 (MapType0Select Unfolding1Heap@11 ptr@0 next) next) next) null) newPMask@23))) (and (= Unfolding1Heap@13 Unfolding1Heap@12) (= (ControlFlow 0 524) 523))) anon254_correct)))))
(let ((anon718_Then_correct  (=> (not (= (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) null)) (=> (and (not (= (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) null)) (= Unfolding1Mask@11 (MapType1Store Unfolding1Mask@10 (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) data (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@10 (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) data)) FullPerm))))) (=> (and (and (and (state Heap@83 Unfolding1Mask@11) (not (= (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) null))) (and (= Unfolding1Mask@12 (MapType1Store Unfolding1Mask@11 (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) next (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@11 (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) next)) FullPerm)))) (state Heap@83 Unfolding1Mask@12))) (and (and (= Unfolding1Mask@13 (MapType1Store Unfolding1Mask@12 null (lseg (MapType0Select Heap@83 (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) next) null) (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@12 null (lseg (MapType0Select Heap@83 (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) null) (MapType0Select Heap@83 null (lseg (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) null)) (lseg (MapType0Select Heap@83 (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) next) null) (MapType0Select Heap@83 null (lseg (MapType0Select Heap@83 (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) next) null)))) (and (state Heap@83 Unfolding1Mask@13) (=> (not (= (MapType0Select Heap@83 (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) next) null)) (<= (U_2_int (MapType0Select Heap@83 (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) data)) (U_2_int (MapType0Select Heap@83 (MapType0Select Heap@83 (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) next) data))))))) (and (=> (= (ControlFlow 0 526) 524) anon719_Then_correct) (=> (= (ControlFlow 0 526) 525) anon719_Else_correct)))))))
(let ((anon718_Else_correct  (=> (and (and (= (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) null) (= Unfolding1Heap@14 Heap@83)) (and (= Unfolding1Mask@14 Unfolding1Mask@10) (= (ControlFlow 0 522) 521))) anon255_correct)))
(let ((anon717_Then_correct  (=> (not (= (MapType0Select Heap@83 ptr@0 next) null)) (=> (and (and (not (= (MapType0Select Heap@83 ptr@0 next) null)) (= UnfoldingMask@31 (MapType1Store UnfoldingMask@30 (MapType0Select Heap@83 ptr@0 next) data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@30 (MapType0Select Heap@83 ptr@0 next) data)) FullPerm))))) (and (state Heap@83 UnfoldingMask@31) (not (= (MapType0Select Heap@83 ptr@0 next) null)))) (=> (and (and (and (= UnfoldingMask@32 (MapType1Store UnfoldingMask@31 (MapType0Select Heap@83 ptr@0 next) next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@31 (MapType0Select Heap@83 ptr@0 next) next)) FullPerm)))) (state Heap@83 UnfoldingMask@32)) (and (= UnfoldingMask@33 (MapType1Store UnfoldingMask@32 null (lseg (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@32 null (lseg (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@83 ptr@0 next) null) (MapType0Select Heap@83 null (lseg (MapType0Select Heap@83 ptr@0 next) null)) (lseg (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) null) (MapType0Select Heap@83 null (lseg (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) null))))) (and (and (state Heap@83 UnfoldingMask@33) (|lseg#trigger| Heap@83 (lseg (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) null))) (and (= (MapType0Select Heap@83 null (lseg (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@83 (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@83 (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) next)) (MapType0Select Heap@83 null (lseg (MapType0Select Heap@83 (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) next) null)))) EmptyFrame))) (= Unfolding1Mask@10 (MapType1Store UnfoldingMask@33 null (lseg (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) null) (real_2_U (- (U_2_real (MapType1Select UnfoldingMask@33 null (lseg (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) null))) FullPerm))))))) (and (=> (= (ControlFlow 0 527) 526) anon718_Then_correct) (=> (= (ControlFlow 0 527) 522) anon718_Else_correct)))))))
(let ((anon717_Else_correct  (=> (and (and (= (MapType0Select Heap@83 ptr@0 next) null) (= UnfoldingHeap@34 Heap@83)) (and (= UnfoldingMask@34 UnfoldingMask@30) (= (ControlFlow 0 517) 516))) anon258_correct)))
(let ((anon250_correct  (=> (= UnfoldingMask@30 (MapType1Store Mask@55 null (lseg (MapType0Select Heap@83 ptr@0 next) null) (real_2_U (- (U_2_real (MapType1Select Mask@55 null (lseg (MapType0Select Heap@83 ptr@0 next) null))) FullPerm)))) (and (=> (= (ControlFlow 0 528) 527) anon717_Then_correct) (=> (= (ControlFlow 0 528) 517) anon717_Else_correct)))))
(let ((anon716_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 531) 528)) anon250_correct)))
(let ((anon716_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 529) (- 0 530)) (<= FullPerm (U_2_real (MapType1Select Mask@55 null (lseg (MapType0Select Heap@83 ptr@0 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@55 null (lseg (MapType0Select Heap@83 ptr@0 next) null)))) (=> (= (ControlFlow 0 529) 528) anon250_correct))))))
(let ((anon715_Then_correct  (=> (not (= (MapType0Select Heap@83 ptr@0 next) null)) (=> (and (|lseg#trigger| Heap@83 (lseg (MapType0Select Heap@83 ptr@0 next) null)) (= (MapType0Select Heap@83 null (lseg (MapType0Select Heap@83 ptr@0 next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@83 ptr@0 next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next)) (MapType0Select Heap@83 null (lseg (MapType0Select Heap@83 (MapType0Select Heap@83 ptr@0 next) next) null)))) EmptyFrame)))) (and (=> (= (ControlFlow 0 532) 529) anon716_Then_correct) (=> (= (ControlFlow 0 532) 531) anon716_Else_correct))))))
(let ((anon715_Else_correct  (=> (= (MapType0Select Heap@83 ptr@0 next) null) (=> (and (= Heap@92 Heap@83) (= (ControlFlow 0 509) 507)) anon263_correct))))
(let ((anon247_correct  (=> (and (and (state Heap@83 Mask@32) (= Mask@55 (MapType1Store Mask@32 null (wand ptr@0 null FullPerm ptr@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@1 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@1 1)) 0) ptr@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@32 null (wand ptr@0 null FullPerm ptr@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@1 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@1 1)) 0) ptr@0 null))) FullPerm))))) (and (state Heap@83 Mask@55) (state Heap@83 Mask@55))) (and (=> (= (ControlFlow 0 533) 532) anon715_Then_correct) (=> (= (ControlFlow 0 533) 509) anon715_Else_correct)))))
(let ((anon246_correct  (=> (state Heap@82 Mask@32) (=> (and (= Heap@83 Heap@82) (= (ControlFlow 0 535) 533)) anon247_correct))))
(let ((anon714_Else_correct  (=> (= (MapType0Select ExhaleHeap@1 ptr@0 next) null) (=> (and (= Heap@82 ExhaleHeap@1) (= (ControlFlow 0 537) 535)) anon246_correct))))
(let ((anon714_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@1 ptr@0 next) null)) (=> (and (= Heap@79 (MapType0Store ExhaleHeap@1 null (|lseg#sm| (MapType0Select ExhaleHeap@1 ptr@0 next) null) (MapType1Store (MapType0Select ExhaleHeap@1 null (|lseg#sm| (MapType0Select ExhaleHeap@1 ptr@0 next) null)) (MapType0Select ExhaleHeap@1 ptr@0 next) data (bool_2_U true)))) (= Heap@80 (MapType0Store Heap@79 null (|lseg#sm| (MapType0Select Heap@79 ptr@0 next) null) (MapType1Store (MapType0Select Heap@79 null (|lseg#sm| (MapType0Select Heap@79 ptr@0 next) null)) (MapType0Select Heap@79 ptr@0 next) next (bool_2_U true))))) (=> (and (and (forall ((o_50 T@U) (f_54 T@U) ) (! (let ((B@@37 (FieldTypeInv1 (type f_54))))
(let ((A@@38 (FieldTypeInv0 (type f_54))))
 (=> (and (and (= (type o_50) RefType) (= (type f_54) (FieldType A@@38 B@@37))) (or (U_2_bool (MapType1Select (MapType0Select Heap@80 null (|lseg#sm| (MapType0Select Heap@80 ptr@0 next) null)) o_50 f_54)) (U_2_bool (MapType1Select (MapType0Select Heap@80 null (|lseg#sm| (MapType0Select Heap@80 (MapType0Select Heap@80 ptr@0 next) next) null)) o_50 f_54)))) (U_2_bool (MapType1Select newPMask@22 o_50 f_54)))))
 :qid |stdinbpl.3931:41|
 :skolemid |155|
 :pattern ( (MapType1Select newPMask@22 o_50 f_54))
)) (= Heap@81 (MapType0Store Heap@80 null (|lseg#sm| (MapType0Select Heap@80 ptr@0 next) null) newPMask@22))) (and (= Heap@82 Heap@81) (= (ControlFlow 0 536) 535))) anon246_correct)))))
(let ((anon713_Then_correct  (=> (and (not (= (MapType0Select ExhaleHeap@1 ptr@0 next) null)) (<= (U_2_int (MapType0Select ExhaleHeap@1 ptr@0 data)) (U_2_int (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) data)))) (and (=> (= (ControlFlow 0 538) 536) anon714_Then_correct) (=> (= (ControlFlow 0 538) 537) anon714_Else_correct)))))
(let ((anon713_Else_correct  (=> (= (MapType0Select ExhaleHeap@1 ptr@0 next) null) (=> (and (= Heap@83 ExhaleHeap@1) (= (ControlFlow 0 534) 533)) anon247_correct))))
(let ((anon243_correct  (=> (< (U_2_int (MapType0Select ExhaleHeap@1 ptr@0 data)) elem) (and (=> (= (ControlFlow 0 539) 538) anon713_Then_correct) (=> (= (ControlFlow 0 539) 534) anon713_Else_correct)))))
(let ((anon712_Else_correct  (=> (and (= (MapType0Select ExhaleHeap@1 ptr@0 next) null) (= (ControlFlow 0 541) 539)) anon243_correct)))
(let ((anon712_Then_correct  (=> (and (and (not (= (MapType0Select ExhaleHeap@1 ptr@0 next) null)) (state ExhaleHeap@1 Mask@32)) (and (|Seq#Equal| (contentNodes ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) null) (|Seq#Drop| (content Heap@@38 this@@38) index@1)) (= (ControlFlow 0 540) 539))) anon243_correct)))
(let ((anon241_correct  (=> (and (state ExhaleHeap@1 Mask@32) (= (U_2_int (MapType0Select ExhaleHeap@1 ptr@0 data)) (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@1 1))))) (and (=> (= (ControlFlow 0 542) 540) anon712_Then_correct) (=> (= (ControlFlow 0 542) 541) anon712_Else_correct)))))
(let ((anon711_Else_correct  (=> (and (not (= (MapType0Select ExhaleHeap@1 ptr@0 next) null)) (= (ControlFlow 0 544) 542)) anon241_correct)))
(let ((anon711_Then_correct  (=> (and (and (= (MapType0Select ExhaleHeap@1 ptr@0 next) null) (state ExhaleHeap@1 Mask@32)) (and (= index@1 (|Seq#Length| (content Heap@@38 this@@38))) (= (ControlFlow 0 543) 542))) anon241_correct)))
(let ((anon710_Then_correct  (=> (and (and (state ExhaleHeap@1 ZeroMask) (not (= ptr@0 null))) (and (= Mask@30 (MapType1Store ZeroMask ptr@0 next (real_2_U (+ (U_2_real (MapType1Select ZeroMask ptr@0 next)) FullPerm)))) (state ExhaleHeap@1 Mask@30))) (=> (and (and (and (not (= ptr@0 null)) (= Mask@31 (MapType1Store Mask@30 ptr@0 data (real_2_U (+ (U_2_real (MapType1Select Mask@30 ptr@0 data)) FullPerm))))) (and (state ExhaleHeap@1 Mask@31) (= Mask@32 (MapType1Store Mask@31 null (lseg (MapType0Select ExhaleHeap@1 ptr@0 next) null) (real_2_U (+ (U_2_real (MapType1Select Mask@31 null (lseg (MapType0Select ExhaleHeap@1 ptr@0 next) null))) FullPerm)))))) (and (and (state ExhaleHeap@1 Mask@32) (<= 1 index@1)) (and (state ExhaleHeap@1 Mask@32) (<= index@1 (|Seq#Length| (content Heap@@38 this@@38)))))) (and (=> (= (ControlFlow 0 545) 543) anon711_Then_correct) (=> (= (ControlFlow 0 545) 544) anon711_Else_correct))))))
(let ((anon587_correct  (=> (= Mask@97 (MapType1Store Mask@96 null (List this@@38) (real_2_U (- (U_2_real (MapType1Select Mask@96 null (List this@@38))) FullPerm)))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (<= 0 index@3)) (=> (<= 0 index@3) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= index@3 (|Seq#Length| (content Heap@@38 this@@38)))) (=> (<= index@3 (|Seq#Length| (content Heap@@38 this@@38))) (=> (= (ControlFlow 0 2) (- 0 1)) (|Seq#Equal| (content Heap@168 this@@38) (|Seq#Append| (|Seq#Append| (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) index@3) 0) (|Seq#Singleton| (int_2_U elem))) (|Seq#Drop| (content Heap@@38 this@@38) index@3)))))))))))
(let ((anon888_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 7) 2)) anon587_correct)))
(let ((anon888_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 5) (- 0 6)) (<= FullPerm (U_2_real (MapType1Select Mask@96 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@96 null (List this@@38)))) (=> (= (ControlFlow 0 5) 2) anon587_correct))))))
(let ((anon585_correct  (=> (= Heap@167 (MapType0Store Heap@166 null (|List#sm| this@@38) (MapType1Store (MapType0Select Heap@166 null (|List#sm| this@@38)) this@@38 head (bool_2_U true)))) (=> (and (and (forall ((o_84 T@U) (f_88 T@U) ) (! (let ((B@@38 (FieldTypeInv1 (type f_88))))
(let ((A@@39 (FieldTypeInv0 (type f_88))))
 (=> (and (and (= (type o_84) RefType) (= (type f_88) (FieldType A@@39 B@@38))) (or (U_2_bool (MapType1Select (MapType0Select Heap@167 null (|List#sm| this@@38)) o_84 f_88)) (U_2_bool (MapType1Select (MapType0Select Heap@167 null (|lseg#sm| (MapType0Select Heap@167 this@@38 head) null)) o_84 f_88)))) (U_2_bool (MapType1Select newPMask@55 o_84 f_88)))))
 :qid |stdinbpl.6005:27|
 :skolemid |189|
 :pattern ( (MapType1Select newPMask@55 o_84 f_88))
)) (= Heap@168 (MapType0Store Heap@167 null (|List#sm| this@@38) newPMask@55))) (and (state Heap@168 Mask@96) (state Heap@168 Mask@96))) (and (=> (= (ControlFlow 0 8) 5) anon888_Then_correct) (=> (= (ControlFlow 0 8) 7) anon888_Else_correct))))))
(let ((anon887_Else_correct  (=> (HasDirectPerm Mask@96 null (List this@@38)) (=> (and (= Heap@166 Heap@163) (= (ControlFlow 0 10) 8)) anon585_correct))))
(let ((anon887_Then_correct  (=> (not (HasDirectPerm Mask@96 null (List this@@38))) (=> (and (and (= Heap@164 (MapType0Store Heap@163 null (|List#sm| this@@38) ZeroPMask)) (= Heap@165 (MapType0Store Heap@164 null (List this@@38) freshVersion@6))) (and (= Heap@166 Heap@165) (= (ControlFlow 0 9) 8))) anon585_correct))))
(let ((anon583_correct  (=> (= Mask@95 (MapType1Store Mask@94 null (lseg (MapType0Select Heap@163 this@@38 head) null) (real_2_U (- (U_2_real (MapType1Select Mask@94 null (lseg (MapType0Select Heap@163 this@@38 head) null))) FullPerm)))) (=> (and (InsidePredicate (List this@@38) (MapType0Select Heap@163 null (List this@@38)) (lseg (MapType0Select Heap@163 this@@38 head) null) (MapType0Select Heap@163 null (lseg (MapType0Select Heap@163 this@@38 head) null))) (= Mask@96 (MapType1Store Mask@95 null (List this@@38) (real_2_U (+ (U_2_real (MapType1Select Mask@95 null (List this@@38))) FullPerm))))) (=> (and (and (state Heap@163 Mask@96) (state Heap@163 Mask@96)) (and (|List#trigger| Heap@163 (List this@@38)) (= (MapType0Select Heap@163 null (List this@@38)) (CombineFrames (FrameFragment (MapType0Select Heap@163 this@@38 head)) (MapType0Select Heap@163 null (lseg (MapType0Select Heap@163 this@@38 head) null)))))) (and (=> (= (ControlFlow 0 11) 9) anon887_Then_correct) (=> (= (ControlFlow 0 11) 10) anon887_Else_correct)))))))
(let ((anon886_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 14) 11)) anon583_correct)))
(let ((anon886_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 12) (- 0 13)) (<= FullPerm (U_2_real (MapType1Select Mask@94 null (lseg (MapType0Select Heap@163 this@@38 head) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@94 null (lseg (MapType0Select Heap@163 this@@38 head) null)))) (=> (= (ControlFlow 0 12) 11) anon583_correct))))))
(let ((anon581_correct  (=> (= Mask@94 (MapType1Store Mask@93 this@@38 head (real_2_U (- (U_2_real (MapType1Select Mask@93 this@@38 head)) FullPerm)))) (and (=> (= (ControlFlow 0 15) 12) anon886_Then_correct) (=> (= (ControlFlow 0 15) 14) anon886_Else_correct)))))
(let ((anon885_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 18) 15)) anon581_correct)))
(let ((anon885_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 16) (- 0 17)) (<= FullPerm (U_2_real (MapType1Select Mask@93 this@@38 head)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@93 this@@38 head))) (=> (= (ControlFlow 0 16) 15) anon581_correct))))))
(let ((anon579_correct  (=> (state Heap@163 Mask@93) (and (=> (= (ControlFlow 0 19) 16) anon885_Then_correct) (=> (= (ControlFlow 0 19) 18) anon885_Else_correct)))))
(let ((anon81_correct  (=> (and (state Heap@161 Mask@92) (state Heap@161 Mask@92)) (and (=> (= (ControlFlow 0 795) (- 0 796)) (= FullPerm (U_2_real (MapType1Select Mask@92 this@@38 head)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@92 this@@38 head))) (=> (and (= Heap@162 (MapType0Store Heap@161 this@@38 head freshObj@0)) (state Heap@162 Mask@92)) (=> (and (and (= Heap@163 Heap@162) (= index@3 0)) (and (= Mask@93 Mask@92) (= (ControlFlow 0 795) 19))) anon579_correct)))))))
(let ((anon629_Else_correct  (=> (= freshObj@0 null) (=> (and (= Heap@161 Heap@157) (= (ControlFlow 0 798) 795)) anon81_correct))))
(let ((anon629_Then_correct  (=> (not (= freshObj@0 null)) (=> (and (= Heap@158 (MapType0Store Heap@157 null (|lseg#sm| freshObj@0 null) (MapType1Store (MapType0Select Heap@157 null (|lseg#sm| freshObj@0 null)) freshObj@0 data (bool_2_U true)))) (= Heap@159 (MapType0Store Heap@158 null (|lseg#sm| freshObj@0 null) (MapType1Store (MapType0Select Heap@158 null (|lseg#sm| freshObj@0 null)) freshObj@0 next (bool_2_U true))))) (=> (and (and (forall ((o_36 T@U) (f_40 T@U) ) (! (let ((B@@39 (FieldTypeInv1 (type f_40))))
(let ((A@@40 (FieldTypeInv0 (type f_40))))
 (=> (and (and (= (type o_36) RefType) (= (type f_40) (FieldType A@@40 B@@39))) (or (U_2_bool (MapType1Select (MapType0Select Heap@159 null (|lseg#sm| freshObj@0 null)) o_36 f_40)) (U_2_bool (MapType1Select (MapType0Select Heap@159 null (|lseg#sm| (MapType0Select Heap@159 freshObj@0 next) null)) o_36 f_40)))) (U_2_bool (MapType1Select newPMask@54 o_36 f_40)))))
 :qid |stdinbpl.2966:33|
 :skolemid |141|
 :pattern ( (MapType1Select newPMask@54 o_36 f_40))
)) (= Heap@160 (MapType0Store Heap@159 null (|lseg#sm| freshObj@0 null) newPMask@54))) (and (= Heap@161 Heap@160) (= (ControlFlow 0 797) 795))) anon81_correct)))))
(let ((anon628_Else_correct  (=> (and (HasDirectPerm Mask@92 null (lseg freshObj@0 null)) (= Heap@157 Heap@154)) (and (=> (= (ControlFlow 0 800) 797) anon629_Then_correct) (=> (= (ControlFlow 0 800) 798) anon629_Else_correct)))))
(let ((anon628_Then_correct  (=> (and (and (not (HasDirectPerm Mask@92 null (lseg freshObj@0 null))) (= Heap@155 (MapType0Store Heap@154 null (|lseg#sm| freshObj@0 null) ZeroPMask))) (and (= Heap@156 (MapType0Store Heap@155 null (lseg freshObj@0 null) freshVersion@5)) (= Heap@157 Heap@156))) (and (=> (= (ControlFlow 0 799) 797) anon629_Then_correct) (=> (= (ControlFlow 0 799) 798) anon629_Else_correct)))))
(let ((anon77_correct  (=> (and (state Heap@154 Mask@91) (= Mask@92 (MapType1Store Mask@91 null (lseg freshObj@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@91 null (lseg freshObj@0 null))) FullPerm))))) (=> (and (and (state Heap@154 Mask@92) (state Heap@154 Mask@92)) (and (|lseg#trigger| Heap@154 (lseg freshObj@0 null)) (= (MapType0Select Heap@154 null (lseg freshObj@0 null)) (FrameFragment (ite (not (= freshObj@0 null)) (CombineFrames (FrameFragment (MapType0Select Heap@154 freshObj@0 data)) (CombineFrames (FrameFragment (MapType0Select Heap@154 freshObj@0 next)) (MapType0Select Heap@154 null (lseg (MapType0Select Heap@154 freshObj@0 next) null)))) EmptyFrame))))) (and (=> (= (ControlFlow 0 801) 799) anon628_Then_correct) (=> (= (ControlFlow 0 801) 800) anon628_Else_correct))))))
(let ((anon627_Else_correct  (=> (= (MapType0Select Heap@150 freshObj@0 next) null) (=> (and (= Heap@154 Heap@150) (= (ControlFlow 0 803) 801)) anon77_correct))))
(let ((anon627_Then_correct  (=> (not (= (MapType0Select Heap@150 freshObj@0 next) null)) (=> (and (= Heap@151 (MapType0Store Heap@150 null (|lseg#sm| (MapType0Select Heap@150 freshObj@0 next) null) (MapType1Store (MapType0Select Heap@150 null (|lseg#sm| (MapType0Select Heap@150 freshObj@0 next) null)) (MapType0Select Heap@150 freshObj@0 next) data (bool_2_U true)))) (= Heap@152 (MapType0Store Heap@151 null (|lseg#sm| (MapType0Select Heap@151 freshObj@0 next) null) (MapType1Store (MapType0Select Heap@151 null (|lseg#sm| (MapType0Select Heap@151 freshObj@0 next) null)) (MapType0Select Heap@151 freshObj@0 next) next (bool_2_U true))))) (=> (and (and (forall ((o_35 T@U) (f_39 T@U) ) (! (let ((B@@40 (FieldTypeInv1 (type f_39))))
(let ((A@@41 (FieldTypeInv0 (type f_39))))
 (=> (and (and (= (type o_35) RefType) (= (type f_39) (FieldType A@@41 B@@40))) (or (U_2_bool (MapType1Select (MapType0Select Heap@152 null (|lseg#sm| (MapType0Select Heap@152 freshObj@0 next) null)) o_35 f_39)) (U_2_bool (MapType1Select (MapType0Select Heap@152 null (|lseg#sm| (MapType0Select Heap@152 (MapType0Select Heap@152 freshObj@0 next) next) null)) o_35 f_39)))) (U_2_bool (MapType1Select newPMask@53 o_35 f_39)))))
 :qid |stdinbpl.2944:35|
 :skolemid |140|
 :pattern ( (MapType1Select newPMask@53 o_35 f_39))
)) (= Heap@153 (MapType0Store Heap@152 null (|lseg#sm| (MapType0Select Heap@152 freshObj@0 next) null) newPMask@53))) (and (= Heap@154 Heap@153) (= (ControlFlow 0 802) 801))) anon77_correct)))))
(let ((anon626_Else_correct  (=> (and (= (MapType0Select Heap@150 freshObj@0 next) null) (= Mask@91 Mask@90)) (and (=> (= (ControlFlow 0 807) 802) anon627_Then_correct) (=> (= (ControlFlow 0 807) 803) anon627_Else_correct)))))
(let ((anon626_Then_correct  (=> (not (= (MapType0Select Heap@150 freshObj@0 next) null)) (and (=> (= (ControlFlow 0 805) (- 0 806)) (<= (U_2_int (MapType0Select Heap@150 freshObj@0 data)) (U_2_int (MapType0Select Heap@150 (MapType0Select Heap@150 freshObj@0 next) data)))) (=> (<= (U_2_int (MapType0Select Heap@150 freshObj@0 data)) (U_2_int (MapType0Select Heap@150 (MapType0Select Heap@150 freshObj@0 next) data))) (=> (= Mask@91 Mask@90) (and (=> (= (ControlFlow 0 805) 802) anon627_Then_correct) (=> (= (ControlFlow 0 805) 803) anon627_Else_correct))))))))
(let ((anon73_correct  (=> (state UnfoldingHeap@69 UnfoldingMask@69) (and (=> (= (ControlFlow 0 808) 805) anon626_Then_correct) (=> (= (ControlFlow 0 808) 807) anon626_Else_correct)))))
(let ((anon72_correct  (=> (and (and (state UnfoldingHeap@68 UnfoldingMask@68) (= UnfoldingHeap@69 UnfoldingHeap@68)) (and (= UnfoldingMask@69 UnfoldingMask@68) (= (ControlFlow 0 810) 808))) anon73_correct)))
(let ((anon625_Else_correct  (=> (= (MapType0Select Heap@150 (MapType0Select Heap@150 freshObj@0 next) next) null) (=> (and (= UnfoldingHeap@68 Heap@150) (= (ControlFlow 0 812) 810)) anon72_correct))))
(let ((anon625_Then_correct  (=> (not (= (MapType0Select Heap@150 (MapType0Select Heap@150 freshObj@0 next) next) null)) (=> (and (= UnfoldingHeap@65 (MapType0Store Heap@150 null (|lseg#sm| (MapType0Select Heap@150 (MapType0Select Heap@150 freshObj@0 next) next) null) (MapType1Store (MapType0Select Heap@150 null (|lseg#sm| (MapType0Select Heap@150 (MapType0Select Heap@150 freshObj@0 next) next) null)) (MapType0Select Heap@150 (MapType0Select Heap@150 freshObj@0 next) next) data (bool_2_U true)))) (= UnfoldingHeap@66 (MapType0Store UnfoldingHeap@65 null (|lseg#sm| (MapType0Select UnfoldingHeap@65 (MapType0Select UnfoldingHeap@65 freshObj@0 next) next) null) (MapType1Store (MapType0Select UnfoldingHeap@65 null (|lseg#sm| (MapType0Select UnfoldingHeap@65 (MapType0Select UnfoldingHeap@65 freshObj@0 next) next) null)) (MapType0Select UnfoldingHeap@65 (MapType0Select UnfoldingHeap@65 freshObj@0 next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_34 T@U) (f_38 T@U) ) (! (let ((B@@41 (FieldTypeInv1 (type f_38))))
(let ((A@@42 (FieldTypeInv0 (type f_38))))
 (=> (and (and (= (type o_34) RefType) (= (type f_38) (FieldType A@@42 B@@41))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@66 null (|lseg#sm| (MapType0Select UnfoldingHeap@66 (MapType0Select UnfoldingHeap@66 freshObj@0 next) next) null)) o_34 f_38)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@66 null (|lseg#sm| (MapType0Select UnfoldingHeap@66 (MapType0Select UnfoldingHeap@66 (MapType0Select UnfoldingHeap@66 freshObj@0 next) next) next) null)) o_34 f_38)))) (U_2_bool (MapType1Select newPMask@52 o_34 f_38)))))
 :qid |stdinbpl.2924:41|
 :skolemid |139|
 :pattern ( (MapType1Select newPMask@52 o_34 f_38))
)) (= UnfoldingHeap@67 (MapType0Store UnfoldingHeap@66 null (|lseg#sm| (MapType0Select UnfoldingHeap@66 (MapType0Select UnfoldingHeap@66 freshObj@0 next) next) null) newPMask@52))) (and (= UnfoldingHeap@68 UnfoldingHeap@67) (= (ControlFlow 0 811) 810))) anon72_correct)))))
(let ((anon624_Then_correct  (=> (not (= (MapType0Select Heap@150 freshObj@0 next) null)) (=> (and (not (= (MapType0Select Heap@150 freshObj@0 next) null)) (= UnfoldingMask@66 (MapType1Store UnfoldingMask@65 (MapType0Select Heap@150 freshObj@0 next) data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@65 (MapType0Select Heap@150 freshObj@0 next) data)) FullPerm))))) (=> (and (and (and (state Heap@150 UnfoldingMask@66) (not (= (MapType0Select Heap@150 freshObj@0 next) null))) (and (= UnfoldingMask@67 (MapType1Store UnfoldingMask@66 (MapType0Select Heap@150 freshObj@0 next) next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@66 (MapType0Select Heap@150 freshObj@0 next) next)) FullPerm)))) (state Heap@150 UnfoldingMask@67))) (and (and (= UnfoldingMask@68 (MapType1Store UnfoldingMask@67 null (lseg (MapType0Select Heap@150 (MapType0Select Heap@150 freshObj@0 next) next) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@67 null (lseg (MapType0Select Heap@150 (MapType0Select Heap@150 freshObj@0 next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@150 freshObj@0 next) null) (MapType0Select Heap@150 null (lseg (MapType0Select Heap@150 freshObj@0 next) null)) (lseg (MapType0Select Heap@150 (MapType0Select Heap@150 freshObj@0 next) next) null) (MapType0Select Heap@150 null (lseg (MapType0Select Heap@150 (MapType0Select Heap@150 freshObj@0 next) next) null)))) (and (state Heap@150 UnfoldingMask@68) (=> (not (= (MapType0Select Heap@150 (MapType0Select Heap@150 freshObj@0 next) next) null)) (<= (U_2_int (MapType0Select Heap@150 (MapType0Select Heap@150 freshObj@0 next) data)) (U_2_int (MapType0Select Heap@150 (MapType0Select Heap@150 (MapType0Select Heap@150 freshObj@0 next) next) data))))))) (and (=> (= (ControlFlow 0 813) 811) anon625_Then_correct) (=> (= (ControlFlow 0 813) 812) anon625_Else_correct)))))))
(let ((anon624_Else_correct  (=> (and (and (= (MapType0Select Heap@150 freshObj@0 next) null) (= UnfoldingHeap@69 Heap@150)) (and (= UnfoldingMask@69 UnfoldingMask@65) (= (ControlFlow 0 809) 808))) anon73_correct)))
(let ((anon69_correct  (=> (= UnfoldingMask@65 (MapType1Store Mask@87 null (lseg (MapType0Select Heap@150 freshObj@0 next) null) (real_2_U (- (U_2_real (MapType1Select Mask@87 null (lseg (MapType0Select Heap@150 freshObj@0 next) null))) FullPerm)))) (and (=> (= (ControlFlow 0 814) 813) anon624_Then_correct) (=> (= (ControlFlow 0 814) 809) anon624_Else_correct)))))
(let ((anon623_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 817) 814)) anon69_correct)))
(let ((anon623_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 815) (- 0 816)) (<= FullPerm (U_2_real (MapType1Select Mask@87 null (lseg (MapType0Select Heap@150 freshObj@0 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 null (lseg (MapType0Select Heap@150 freshObj@0 next) null)))) (=> (= (ControlFlow 0 815) 814) anon69_correct))))))
(let ((anon67_correct  (=> (and (and (= Mask@90 (MapType1Store Mask@89 null (lseg (MapType0Select Heap@150 freshObj@0 next) null) (real_2_U (- (U_2_real (MapType1Select Mask@89 null (lseg (MapType0Select Heap@150 freshObj@0 next) null))) FullPerm)))) (InsidePredicate (lseg freshObj@0 null) (MapType0Select Heap@150 null (lseg freshObj@0 null)) (lseg (MapType0Select Heap@150 freshObj@0 next) null) (MapType0Select Heap@150 null (lseg (MapType0Select Heap@150 freshObj@0 next) null)))) (and (|lseg#trigger| Heap@150 (lseg (MapType0Select Heap@150 freshObj@0 next) null)) (= (MapType0Select Heap@150 null (lseg (MapType0Select Heap@150 freshObj@0 next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@150 freshObj@0 next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@150 (MapType0Select Heap@150 freshObj@0 next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@150 (MapType0Select Heap@150 freshObj@0 next) next)) (MapType0Select Heap@150 null (lseg (MapType0Select Heap@150 (MapType0Select Heap@150 freshObj@0 next) next) null)))) EmptyFrame))))) (and (=> (= (ControlFlow 0 818) 815) anon623_Then_correct) (=> (= (ControlFlow 0 818) 817) anon623_Else_correct)))))
(let ((anon622_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 821) 818)) anon67_correct)))
(let ((anon622_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 819) (- 0 820)) (<= FullPerm (U_2_real (MapType1Select Mask@89 null (lseg (MapType0Select Heap@150 freshObj@0 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@89 null (lseg (MapType0Select Heap@150 freshObj@0 next) null)))) (=> (= (ControlFlow 0 819) 818) anon67_correct))))))
(let ((anon65_correct  (=> (= Mask@89 (MapType1Store Mask@88 freshObj@0 next (real_2_U (- (U_2_real (MapType1Select Mask@88 freshObj@0 next)) FullPerm)))) (and (=> (= (ControlFlow 0 822) 819) anon622_Then_correct) (=> (= (ControlFlow 0 822) 821) anon622_Else_correct)))))
(let ((anon621_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 825) 822)) anon65_correct)))
(let ((anon621_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 823) (- 0 824)) (<= FullPerm (U_2_real (MapType1Select Mask@88 freshObj@0 next)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@88 freshObj@0 next))) (=> (= (ControlFlow 0 823) 822) anon65_correct))))))
(let ((anon63_correct  (=> (= Mask@88 (MapType1Store Mask@87 freshObj@0 data (real_2_U (- (U_2_real (MapType1Select Mask@87 freshObj@0 data)) FullPerm)))) (and (=> (= (ControlFlow 0 826) 823) anon621_Then_correct) (=> (= (ControlFlow 0 826) 825) anon621_Else_correct)))))
(let ((anon620_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 829) 826)) anon63_correct)))
(let ((anon620_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 827) (- 0 828)) (<= FullPerm (U_2_real (MapType1Select Mask@87 freshObj@0 data)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@87 freshObj@0 data))) (=> (= (ControlFlow 0 827) 826) anon63_correct))))))
(let ((anon619_Then_correct  (=> (not (= freshObj@0 null)) (and (=> (= (ControlFlow 0 830) 827) anon620_Then_correct) (=> (= (ControlFlow 0 830) 829) anon620_Else_correct)))))
(let ((anon619_Else_correct  (=> (and (= freshObj@0 null) (= Mask@91 Mask@87)) (and (=> (= (ControlFlow 0 804) 802) anon627_Then_correct) (=> (= (ControlFlow 0 804) 803) anon627_Else_correct)))))
(let ((anon60_correct  (=> (and (state Heap@150 Mask@87) (state Heap@150 Mask@87)) (and (=> (= (ControlFlow 0 831) 830) anon619_Then_correct) (=> (= (ControlFlow 0 831) 804) anon619_Else_correct)))))
(let ((anon618_Else_correct  (=> (= (MapType0Select Heap@146 this@@38 head) null) (=> (and (= Heap@150 Heap@146) (= (ControlFlow 0 833) 831)) anon60_correct))))
(let ((anon618_Then_correct  (=> (not (= (MapType0Select Heap@146 this@@38 head) null)) (=> (and (= Heap@147 (MapType0Store Heap@146 null (|lseg#sm| (MapType0Select Heap@146 this@@38 head) null) (MapType1Store (MapType0Select Heap@146 null (|lseg#sm| (MapType0Select Heap@146 this@@38 head) null)) (MapType0Select Heap@146 this@@38 head) data (bool_2_U true)))) (= Heap@148 (MapType0Store Heap@147 null (|lseg#sm| (MapType0Select Heap@147 this@@38 head) null) (MapType1Store (MapType0Select Heap@147 null (|lseg#sm| (MapType0Select Heap@147 this@@38 head) null)) (MapType0Select Heap@147 this@@38 head) next (bool_2_U true))))) (=> (and (and (forall ((o_33 T@U) (f_37 T@U) ) (! (let ((B@@42 (FieldTypeInv1 (type f_37))))
(let ((A@@43 (FieldTypeInv0 (type f_37))))
 (=> (and (and (= (type o_33) RefType) (= (type f_37) (FieldType A@@43 B@@42))) (or (U_2_bool (MapType1Select (MapType0Select Heap@148 null (|lseg#sm| (MapType0Select Heap@148 this@@38 head) null)) o_33 f_37)) (U_2_bool (MapType1Select (MapType0Select Heap@148 null (|lseg#sm| (MapType0Select Heap@148 (MapType0Select Heap@148 this@@38 head) next) null)) o_33 f_37)))) (U_2_bool (MapType1Select newPMask@51 o_33 f_37)))))
 :qid |stdinbpl.2854:33|
 :skolemid |138|
 :pattern ( (MapType1Select newPMask@51 o_33 f_37))
)) (= Heap@149 (MapType0Store Heap@148 null (|lseg#sm| (MapType0Select Heap@148 this@@38 head) null) newPMask@51))) (and (= Heap@150 Heap@149) (= (ControlFlow 0 832) 831))) anon60_correct)))))
(let ((anon617_Else_correct  (=> (and (HasDirectPerm Mask@87 null (lseg (MapType0Select Heap@143 this@@38 head) null)) (= Heap@146 Heap@143)) (and (=> (= (ControlFlow 0 835) 832) anon618_Then_correct) (=> (= (ControlFlow 0 835) 833) anon618_Else_correct)))))
(let ((anon617_Then_correct  (=> (and (and (not (HasDirectPerm Mask@87 null (lseg (MapType0Select Heap@143 this@@38 head) null))) (= Heap@144 (MapType0Store Heap@143 null (|lseg#sm| (MapType0Select Heap@143 this@@38 head) null) ZeroPMask))) (and (= Heap@145 (MapType0Store Heap@144 null (lseg (MapType0Select Heap@144 this@@38 head) null) freshVersion@4)) (= Heap@146 Heap@145))) (and (=> (= (ControlFlow 0 834) 832) anon618_Then_correct) (=> (= (ControlFlow 0 834) 833) anon618_Else_correct)))))
(let ((anon56_correct  (=> (and (state Heap@143 Mask@86) (= Mask@87 (MapType1Store Mask@86 null (lseg (MapType0Select Heap@143 this@@38 head) null) (real_2_U (+ (U_2_real (MapType1Select Mask@86 null (lseg (MapType0Select Heap@143 this@@38 head) null))) FullPerm))))) (=> (and (and (state Heap@143 Mask@87) (state Heap@143 Mask@87)) (and (|lseg#trigger| Heap@143 (lseg (MapType0Select Heap@143 this@@38 head) null)) (= (MapType0Select Heap@143 null (lseg (MapType0Select Heap@143 this@@38 head) null)) (FrameFragment (ite (not (= (MapType0Select Heap@143 this@@38 head) null)) (CombineFrames (FrameFragment (MapType0Select Heap@143 (MapType0Select Heap@143 this@@38 head) data)) (CombineFrames (FrameFragment (MapType0Select Heap@143 (MapType0Select Heap@143 this@@38 head) next)) (MapType0Select Heap@143 null (lseg (MapType0Select Heap@143 (MapType0Select Heap@143 this@@38 head) next) null)))) EmptyFrame))))) (and (=> (= (ControlFlow 0 836) 834) anon617_Then_correct) (=> (= (ControlFlow 0 836) 835) anon617_Else_correct))))))
(let ((anon616_Else_correct  (=> (= (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null) (=> (and (= Heap@143 Heap@12) (= (ControlFlow 0 838) 836)) anon56_correct))))
(let ((anon616_Then_correct  (=> (not (= (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null)) (=> (and (= Heap@140 (MapType0Store Heap@12 null (|lseg#sm| (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null) (MapType1Store (MapType0Select Heap@12 null (|lseg#sm| (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null)) (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) data (bool_2_U true)))) (= Heap@141 (MapType0Store Heap@140 null (|lseg#sm| (MapType0Select Heap@140 (MapType0Select Heap@140 this@@38 head) next) null) (MapType1Store (MapType0Select Heap@140 null (|lseg#sm| (MapType0Select Heap@140 (MapType0Select Heap@140 this@@38 head) next) null)) (MapType0Select Heap@140 (MapType0Select Heap@140 this@@38 head) next) next (bool_2_U true))))) (=> (and (and (forall ((o_32 T@U) (f_36 T@U) ) (! (let ((B@@43 (FieldTypeInv1 (type f_36))))
(let ((A@@44 (FieldTypeInv0 (type f_36))))
 (=> (and (and (= (type o_32) RefType) (= (type f_36) (FieldType A@@44 B@@43))) (or (U_2_bool (MapType1Select (MapType0Select Heap@141 null (|lseg#sm| (MapType0Select Heap@141 (MapType0Select Heap@141 this@@38 head) next) null)) o_32 f_36)) (U_2_bool (MapType1Select (MapType0Select Heap@141 null (|lseg#sm| (MapType0Select Heap@141 (MapType0Select Heap@141 (MapType0Select Heap@141 this@@38 head) next) next) null)) o_32 f_36)))) (U_2_bool (MapType1Select newPMask@50 o_32 f_36)))))
 :qid |stdinbpl.2832:35|
 :skolemid |137|
 :pattern ( (MapType1Select newPMask@50 o_32 f_36))
)) (= Heap@142 (MapType0Store Heap@141 null (|lseg#sm| (MapType0Select Heap@141 (MapType0Select Heap@141 this@@38 head) next) null) newPMask@50))) (and (= Heap@143 Heap@142) (= (ControlFlow 0 837) 836))) anon56_correct)))))
(let ((anon615_Else_correct  (=> (and (= (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null) (= Mask@86 Mask@85)) (and (=> (= (ControlFlow 0 842) 837) anon616_Then_correct) (=> (= (ControlFlow 0 842) 838) anon616_Else_correct)))))
(let ((anon615_Then_correct  (=> (not (= (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null)) (and (=> (= (ControlFlow 0 840) (- 0 841)) (<= (U_2_int (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) data)) (U_2_int (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) data)))) (=> (<= (U_2_int (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) data)) (U_2_int (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) data))) (=> (= Mask@86 Mask@85) (and (=> (= (ControlFlow 0 840) 837) anon616_Then_correct) (=> (= (ControlFlow 0 840) 838) anon616_Else_correct))))))))
(let ((anon52_correct  (=> (state UnfoldingHeap@64 UnfoldingMask@64) (and (=> (= (ControlFlow 0 843) 840) anon615_Then_correct) (=> (= (ControlFlow 0 843) 842) anon615_Else_correct)))))
(let ((anon51_correct  (=> (and (and (state UnfoldingHeap@63 UnfoldingMask@63) (= UnfoldingHeap@64 UnfoldingHeap@63)) (and (= UnfoldingMask@64 UnfoldingMask@63) (= (ControlFlow 0 845) 843))) anon52_correct)))
(let ((anon614_Else_correct  (=> (= (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next) null) (=> (and (= UnfoldingHeap@63 Heap@12) (= (ControlFlow 0 847) 845)) anon51_correct))))
(let ((anon614_Then_correct  (=> (not (= (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next) null)) (=> (and (= UnfoldingHeap@60 (MapType0Store Heap@12 null (|lseg#sm| (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next) null) (MapType1Store (MapType0Select Heap@12 null (|lseg#sm| (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next) null)) (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next) data (bool_2_U true)))) (= UnfoldingHeap@61 (MapType0Store UnfoldingHeap@60 null (|lseg#sm| (MapType0Select UnfoldingHeap@60 (MapType0Select UnfoldingHeap@60 (MapType0Select UnfoldingHeap@60 this@@38 head) next) next) null) (MapType1Store (MapType0Select UnfoldingHeap@60 null (|lseg#sm| (MapType0Select UnfoldingHeap@60 (MapType0Select UnfoldingHeap@60 (MapType0Select UnfoldingHeap@60 this@@38 head) next) next) null)) (MapType0Select UnfoldingHeap@60 (MapType0Select UnfoldingHeap@60 (MapType0Select UnfoldingHeap@60 this@@38 head) next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_31 T@U) (f_35 T@U) ) (! (let ((B@@44 (FieldTypeInv1 (type f_35))))
(let ((A@@45 (FieldTypeInv0 (type f_35))))
 (=> (and (and (= (type o_31) RefType) (= (type f_35) (FieldType A@@45 B@@44))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@61 null (|lseg#sm| (MapType0Select UnfoldingHeap@61 (MapType0Select UnfoldingHeap@61 (MapType0Select UnfoldingHeap@61 this@@38 head) next) next) null)) o_31 f_35)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@61 null (|lseg#sm| (MapType0Select UnfoldingHeap@61 (MapType0Select UnfoldingHeap@61 (MapType0Select UnfoldingHeap@61 (MapType0Select UnfoldingHeap@61 this@@38 head) next) next) next) null)) o_31 f_35)))) (U_2_bool (MapType1Select newPMask@49 o_31 f_35)))))
 :qid |stdinbpl.2812:41|
 :skolemid |136|
 :pattern ( (MapType1Select newPMask@49 o_31 f_35))
)) (= UnfoldingHeap@62 (MapType0Store UnfoldingHeap@61 null (|lseg#sm| (MapType0Select UnfoldingHeap@61 (MapType0Select UnfoldingHeap@61 (MapType0Select UnfoldingHeap@61 this@@38 head) next) next) null) newPMask@49))) (and (= UnfoldingHeap@63 UnfoldingHeap@62) (= (ControlFlow 0 846) 845))) anon51_correct)))))
(let ((anon613_Then_correct  (=> (not (= (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null)) (=> (and (not (= (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null)) (= UnfoldingMask@61 (MapType1Store UnfoldingMask@60 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@60 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) data)) FullPerm))))) (=> (and (and (and (state Heap@12 UnfoldingMask@61) (not (= (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null))) (and (= UnfoldingMask@62 (MapType1Store UnfoldingMask@61 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@61 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next)) FullPerm)))) (state Heap@12 UnfoldingMask@62))) (and (and (= UnfoldingMask@63 (MapType1Store UnfoldingMask@62 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@62 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null) (MapType0Select Heap@12 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null)) (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next) null) (MapType0Select Heap@12 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next) null)))) (and (state Heap@12 UnfoldingMask@63) (=> (not (= (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next) null)) (<= (U_2_int (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) data)) (U_2_int (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next) data))))))) (and (=> (= (ControlFlow 0 848) 846) anon614_Then_correct) (=> (= (ControlFlow 0 848) 847) anon614_Else_correct)))))))
(let ((anon613_Else_correct  (=> (and (and (= (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null) (= UnfoldingHeap@64 Heap@12)) (and (= UnfoldingMask@64 UnfoldingMask@60) (= (ControlFlow 0 844) 843))) anon52_correct)))
(let ((anon48_correct  (=> (= UnfoldingMask@60 (MapType1Store Mask@14 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null) (real_2_U (- (U_2_real (MapType1Select Mask@14 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null))) FullPerm)))) (and (=> (= (ControlFlow 0 849) 848) anon613_Then_correct) (=> (= (ControlFlow 0 849) 844) anon613_Else_correct)))))
(let ((anon612_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 852) 849)) anon48_correct)))
(let ((anon612_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 850) (- 0 851)) (<= FullPerm (U_2_real (MapType1Select Mask@14 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@14 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null)))) (=> (= (ControlFlow 0 850) 849) anon48_correct))))))
(let ((anon46_correct  (=> (and (and (= Mask@85 (MapType1Store Mask@84 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null) (real_2_U (- (U_2_real (MapType1Select Mask@84 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@12 this@@38 head) null) (MapType0Select Heap@12 null (lseg (MapType0Select Heap@12 this@@38 head) null)) (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null) (MapType0Select Heap@12 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null)))) (and (|lseg#trigger| Heap@12 (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null)) (= (MapType0Select Heap@12 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next)) (MapType0Select Heap@12 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) next) null)))) EmptyFrame))))) (and (=> (= (ControlFlow 0 853) 850) anon612_Then_correct) (=> (= (ControlFlow 0 853) 852) anon612_Else_correct)))))
(let ((anon611_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 856) 853)) anon46_correct)))
(let ((anon611_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 854) (- 0 855)) (<= FullPerm (U_2_real (MapType1Select Mask@84 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@84 null (lseg (MapType0Select Heap@12 (MapType0Select Heap@12 this@@38 head) next) null)))) (=> (= (ControlFlow 0 854) 853) anon46_correct))))))
(let ((anon44_correct  (=> (= Mask@84 (MapType1Store Mask@83 (MapType0Select Heap@12 this@@38 head) next (real_2_U (- (U_2_real (MapType1Select Mask@83 (MapType0Select Heap@12 this@@38 head) next)) FullPerm)))) (and (=> (= (ControlFlow 0 857) 854) anon611_Then_correct) (=> (= (ControlFlow 0 857) 856) anon611_Else_correct)))))
(let ((anon610_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 860) 857)) anon44_correct)))
(let ((anon610_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 858) (- 0 859)) (<= FullPerm (U_2_real (MapType1Select Mask@83 (MapType0Select Heap@12 this@@38 head) next)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@83 (MapType0Select Heap@12 this@@38 head) next))) (=> (= (ControlFlow 0 858) 857) anon44_correct))))))
(let ((anon42_correct  (=> (= Mask@83 (MapType1Store Mask@14 (MapType0Select Heap@12 this@@38 head) data (real_2_U (- (U_2_real (MapType1Select Mask@14 (MapType0Select Heap@12 this@@38 head) data)) FullPerm)))) (and (=> (= (ControlFlow 0 861) 858) anon610_Then_correct) (=> (= (ControlFlow 0 861) 860) anon610_Else_correct)))))
(let ((anon609_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 864) 861)) anon42_correct)))
(let ((anon609_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 862) (- 0 863)) (<= FullPerm (U_2_real (MapType1Select Mask@14 (MapType0Select Heap@12 this@@38 head) data)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@14 (MapType0Select Heap@12 this@@38 head) data))) (=> (= (ControlFlow 0 862) 861) anon42_correct))))))
(let ((anon608_Then_correct  (=> (not (= (MapType0Select Heap@12 this@@38 head) null)) (and (=> (= (ControlFlow 0 865) 862) anon609_Then_correct) (=> (= (ControlFlow 0 865) 864) anon609_Else_correct)))))
(let ((anon608_Else_correct  (=> (and (= (MapType0Select Heap@12 this@@38 head) null) (= Mask@86 Mask@14)) (and (=> (= (ControlFlow 0 839) 837) anon616_Then_correct) (=> (= (ControlFlow 0 839) 838) anon616_Else_correct)))))
(let ((anon607_Then_correct  (=> (or (= (MapType0Select Heap@9 this@@38 head) null) (<= elem (U_2_int (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) data)))) (=> (and (and (and (and (not (= freshObj@0 null)) (not (U_2_bool (MapType0Select Heap@9 freshObj@0 $allocated)))) (= Heap@10 (MapType0Store Heap@9 freshObj@0 $allocated (bool_2_U true)))) (and (= Mask@10 (MapType1Store Mask@9 freshObj@0 data (real_2_U (+ (U_2_real (MapType1Select Mask@9 freshObj@0 data)) FullPerm)))) (= Mask@11 (MapType1Store Mask@10 freshObj@0 next (real_2_U (+ (U_2_real (MapType1Select Mask@10 freshObj@0 next)) FullPerm)))))) (and (and (= Mask@12 (MapType1Store Mask@11 freshObj@0 head (real_2_U (+ (U_2_real (MapType1Select Mask@11 freshObj@0 head)) FullPerm)))) (= Mask@13 (MapType1Store Mask@12 freshObj@0 held (real_2_U (+ (U_2_real (MapType1Select Mask@12 freshObj@0 held)) FullPerm))))) (and (= Mask@14 (MapType1Store Mask@13 freshObj@0 changed (real_2_U (+ (U_2_real (MapType1Select Mask@13 freshObj@0 changed)) FullPerm)))) (state Heap@10 Mask@14)))) (and (=> (= (ControlFlow 0 866) (- 0 870)) (= FullPerm (U_2_real (MapType1Select Mask@14 freshObj@0 data)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@14 freshObj@0 data))) (=> (and (= Heap@11 (MapType0Store Heap@10 freshObj@0 data (int_2_U elem))) (state Heap@11 Mask@14)) (and (=> (= (ControlFlow 0 866) (- 0 869)) (HasDirectPerm Mask@14 this@@38 head)) (=> (HasDirectPerm Mask@14 this@@38 head) (and (=> (= (ControlFlow 0 866) (- 0 868)) (= FullPerm (U_2_real (MapType1Select Mask@14 freshObj@0 next)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@14 freshObj@0 next))) (=> (and (= Heap@12 (MapType0Store Heap@11 freshObj@0 next (MapType0Select Heap@11 this@@38 head))) (state Heap@12 Mask@14)) (and (=> (= (ControlFlow 0 866) (- 0 867)) (HasDirectPerm Mask@14 this@@38 head)) (=> (HasDirectPerm Mask@14 this@@38 head) (and (=> (= (ControlFlow 0 866) 865) anon608_Then_correct) (=> (= (ControlFlow 0 866) 839) anon608_Else_correct))))))))))))))))
(let ((anon578_correct  (=> (= Mask@53 (MapType1Store Mask@52 null (lseg ptr@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@52 null (lseg ptr@0 null))) FullPerm)))) (and (=> (= (ControlFlow 0 20) (- 0 21)) (= (U_2_int (|Seq#Index| (contentNodes Heap@78 ptr@0 null) 0)) (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@1 1))))) (=> (= (U_2_int (|Seq#Index| (contentNodes Heap@78 ptr@0 null) 0)) (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@1 1)))) (=> (state Heap@78 Mask@53) (=> (and (and (= Mask@54 (MapType1Store Mask@53 null (lseg hd@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@53 null (lseg hd@0 null))) FullPerm)))) (state Heap@78 Mask@54)) (and (state Heap@78 Mask@54) (|Seq#Equal| (contentNodes Heap@78 hd@0 null) (|Seq#Append| (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@1 1)) 0) (contentNodes Labellhs9Heap ptr@0 null))))) (=> (and (and (and (state Heap@78 Mask@54) (IdenticalOnKnownLocations Heap@78 ExhaleHeap@2 Mask@54)) (and (state ExhaleHeap@2 Mask@54) (state ExhaleHeap@2 Mask@54))) (and (and (= Heap@163 ExhaleHeap@2) (= index@3 index@1)) (and (= Mask@93 Mask@54) (= (ControlFlow 0 20) 19)))) anon579_correct))))))))
(let ((anon884_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 24) 20)) anon578_correct)))
(let ((anon884_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 22) (- 0 23)) (<= FullPerm (U_2_real (MapType1Select Mask@52 null (lseg ptr@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@52 null (lseg ptr@0 null)))) (=> (= (ControlFlow 0 22) 20) anon578_correct))))))
(let ((anon576_correct  (=> (and (state Heap@78 Mask@51) (state Heap@78 Mask@51)) (and (=> (= (ControlFlow 0 25) (- 0 26)) (<= FullPerm (U_2_real (MapType1Select Mask@51 null (wand ptr@0 null FullPerm ptr@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@1 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@1 1)) 0) ptr@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@51 null (wand ptr@0 null FullPerm ptr@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@1 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@1 1)) 0) ptr@0 null)))) (=> (and (= Mask@52 (MapType1Store Mask@51 null (wand ptr@0 null FullPerm ptr@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@1 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@1 1)) 0) ptr@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@51 null (wand ptr@0 null FullPerm ptr@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@1 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@1 1)) 0) ptr@0 null))) FullPerm)))) (state Heap@78 Mask@52)) (and (=> (= (ControlFlow 0 25) 22) anon884_Then_correct) (=> (= (ControlFlow 0 25) 24) anon884_Else_correct))))))))
(let ((anon883_Else_correct  (=> (= ptr@0 null) (=> (and (= Heap@78 Heap@74) (= (ControlFlow 0 28) 25)) anon576_correct))))
(let ((anon883_Then_correct  (=> (not (= ptr@0 null)) (=> (and (= Heap@75 (MapType0Store Heap@74 null (|lseg#sm| ptr@0 null) (MapType1Store (MapType0Select Heap@74 null (|lseg#sm| ptr@0 null)) ptr@0 data (bool_2_U true)))) (= Heap@76 (MapType0Store Heap@75 null (|lseg#sm| ptr@0 null) (MapType1Store (MapType0Select Heap@75 null (|lseg#sm| ptr@0 null)) ptr@0 next (bool_2_U true))))) (=> (and (and (forall ((o_83 T@U) (f_87 T@U) ) (! (let ((B@@45 (FieldTypeInv1 (type f_87))))
(let ((A@@46 (FieldTypeInv0 (type f_87))))
 (=> (and (and (= (type o_83) RefType) (= (type f_87) (FieldType A@@46 B@@45))) (or (U_2_bool (MapType1Select (MapType0Select Heap@76 null (|lseg#sm| ptr@0 null)) o_83 f_87)) (U_2_bool (MapType1Select (MapType0Select Heap@76 null (|lseg#sm| (MapType0Select Heap@76 ptr@0 next) null)) o_83 f_87)))) (U_2_bool (MapType1Select newPMask@21 o_83 f_87)))))
 :qid |stdinbpl.5922:33|
 :skolemid |188|
 :pattern ( (MapType1Select newPMask@21 o_83 f_87))
)) (= Heap@77 (MapType0Store Heap@76 null (|lseg#sm| ptr@0 null) newPMask@21))) (and (= Heap@78 Heap@77) (= (ControlFlow 0 27) 25))) anon576_correct)))))
(let ((anon882_Else_correct  (=> (and (HasDirectPerm Mask@51 null (lseg ptr@0 null)) (= Heap@74 Heap@71)) (and (=> (= (ControlFlow 0 30) 27) anon883_Then_correct) (=> (= (ControlFlow 0 30) 28) anon883_Else_correct)))))
(let ((anon882_Then_correct  (=> (and (and (not (HasDirectPerm Mask@51 null (lseg ptr@0 null))) (= Heap@72 (MapType0Store Heap@71 null (|lseg#sm| ptr@0 null) ZeroPMask))) (and (= Heap@73 (MapType0Store Heap@72 null (lseg ptr@0 null) freshVersion@2)) (= Heap@74 Heap@73))) (and (=> (= (ControlFlow 0 29) 27) anon883_Then_correct) (=> (= (ControlFlow 0 29) 28) anon883_Else_correct)))))
(let ((anon572_correct  (=> (and (state Heap@71 Mask@50) (= Mask@51 (MapType1Store Mask@50 null (lseg ptr@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@50 null (lseg ptr@0 null))) FullPerm))))) (=> (and (and (state Heap@71 Mask@51) (state Heap@71 Mask@51)) (and (|lseg#trigger| Heap@71 (lseg ptr@0 null)) (= (MapType0Select Heap@71 null (lseg ptr@0 null)) (FrameFragment (ite (not (= ptr@0 null)) (CombineFrames (FrameFragment (MapType0Select Heap@71 ptr@0 data)) (CombineFrames (FrameFragment (MapType0Select Heap@71 ptr@0 next)) (MapType0Select Heap@71 null (lseg (MapType0Select Heap@71 ptr@0 next) null)))) EmptyFrame))))) (and (=> (= (ControlFlow 0 31) 29) anon882_Then_correct) (=> (= (ControlFlow 0 31) 30) anon882_Else_correct))))))
(let ((anon881_Else_correct  (=> (= (MapType0Select Heap@67 ptr@0 next) null) (=> (and (= Heap@71 Heap@67) (= (ControlFlow 0 33) 31)) anon572_correct))))
(let ((anon881_Then_correct  (=> (not (= (MapType0Select Heap@67 ptr@0 next) null)) (=> (and (= Heap@68 (MapType0Store Heap@67 null (|lseg#sm| (MapType0Select Heap@67 ptr@0 next) null) (MapType1Store (MapType0Select Heap@67 null (|lseg#sm| (MapType0Select Heap@67 ptr@0 next) null)) (MapType0Select Heap@67 ptr@0 next) data (bool_2_U true)))) (= Heap@69 (MapType0Store Heap@68 null (|lseg#sm| (MapType0Select Heap@68 ptr@0 next) null) (MapType1Store (MapType0Select Heap@68 null (|lseg#sm| (MapType0Select Heap@68 ptr@0 next) null)) (MapType0Select Heap@68 ptr@0 next) next (bool_2_U true))))) (=> (and (and (forall ((o_82 T@U) (f_86 T@U) ) (! (let ((B@@46 (FieldTypeInv1 (type f_86))))
(let ((A@@47 (FieldTypeInv0 (type f_86))))
 (=> (and (and (= (type o_82) RefType) (= (type f_86) (FieldType A@@47 B@@46))) (or (U_2_bool (MapType1Select (MapType0Select Heap@69 null (|lseg#sm| (MapType0Select Heap@69 ptr@0 next) null)) o_82 f_86)) (U_2_bool (MapType1Select (MapType0Select Heap@69 null (|lseg#sm| (MapType0Select Heap@69 (MapType0Select Heap@69 ptr@0 next) next) null)) o_82 f_86)))) (U_2_bool (MapType1Select newPMask@20 o_82 f_86)))))
 :qid |stdinbpl.5900:35|
 :skolemid |187|
 :pattern ( (MapType1Select newPMask@20 o_82 f_86))
)) (= Heap@70 (MapType0Store Heap@69 null (|lseg#sm| (MapType0Select Heap@69 ptr@0 next) null) newPMask@20))) (and (= Heap@71 Heap@70) (= (ControlFlow 0 32) 31))) anon572_correct)))))
(let ((anon880_Else_correct  (=> (and (= (MapType0Select Heap@67 ptr@0 next) null) (= Mask@50 Mask@49)) (and (=> (= (ControlFlow 0 37) 32) anon881_Then_correct) (=> (= (ControlFlow 0 37) 33) anon881_Else_correct)))))
(let ((anon880_Then_correct  (=> (not (= (MapType0Select Heap@67 ptr@0 next) null)) (and (=> (= (ControlFlow 0 35) (- 0 36)) (<= (U_2_int (MapType0Select Heap@67 ptr@0 data)) (U_2_int (MapType0Select Heap@67 (MapType0Select Heap@67 ptr@0 next) data)))) (=> (<= (U_2_int (MapType0Select Heap@67 ptr@0 data)) (U_2_int (MapType0Select Heap@67 (MapType0Select Heap@67 ptr@0 next) data))) (=> (= Mask@50 Mask@49) (and (=> (= (ControlFlow 0 35) 32) anon881_Then_correct) (=> (= (ControlFlow 0 35) 33) anon881_Else_correct))))))))
(let ((anon568_correct  (=> (state UnfoldingHeap@29 UnfoldingMask@29) (and (=> (= (ControlFlow 0 38) 35) anon880_Then_correct) (=> (= (ControlFlow 0 38) 37) anon880_Else_correct)))))
(let ((anon567_correct  (=> (and (and (state UnfoldingHeap@28 UnfoldingMask@28) (= UnfoldingHeap@29 UnfoldingHeap@28)) (and (= UnfoldingMask@29 UnfoldingMask@28) (= (ControlFlow 0 40) 38))) anon568_correct)))
(let ((anon879_Else_correct  (=> (= (MapType0Select Heap@67 (MapType0Select Heap@67 ptr@0 next) next) null) (=> (and (= UnfoldingHeap@28 Heap@67) (= (ControlFlow 0 42) 40)) anon567_correct))))
(let ((anon879_Then_correct  (=> (not (= (MapType0Select Heap@67 (MapType0Select Heap@67 ptr@0 next) next) null)) (=> (and (= UnfoldingHeap@25 (MapType0Store Heap@67 null (|lseg#sm| (MapType0Select Heap@67 (MapType0Select Heap@67 ptr@0 next) next) null) (MapType1Store (MapType0Select Heap@67 null (|lseg#sm| (MapType0Select Heap@67 (MapType0Select Heap@67 ptr@0 next) next) null)) (MapType0Select Heap@67 (MapType0Select Heap@67 ptr@0 next) next) data (bool_2_U true)))) (= UnfoldingHeap@26 (MapType0Store UnfoldingHeap@25 null (|lseg#sm| (MapType0Select UnfoldingHeap@25 (MapType0Select UnfoldingHeap@25 ptr@0 next) next) null) (MapType1Store (MapType0Select UnfoldingHeap@25 null (|lseg#sm| (MapType0Select UnfoldingHeap@25 (MapType0Select UnfoldingHeap@25 ptr@0 next) next) null)) (MapType0Select UnfoldingHeap@25 (MapType0Select UnfoldingHeap@25 ptr@0 next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_81 T@U) (f_85 T@U) ) (! (let ((B@@47 (FieldTypeInv1 (type f_85))))
(let ((A@@48 (FieldTypeInv0 (type f_85))))
 (=> (and (and (= (type o_81) RefType) (= (type f_85) (FieldType A@@48 B@@47))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@26 null (|lseg#sm| (MapType0Select UnfoldingHeap@26 (MapType0Select UnfoldingHeap@26 ptr@0 next) next) null)) o_81 f_85)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@26 null (|lseg#sm| (MapType0Select UnfoldingHeap@26 (MapType0Select UnfoldingHeap@26 (MapType0Select UnfoldingHeap@26 ptr@0 next) next) next) null)) o_81 f_85)))) (U_2_bool (MapType1Select newPMask@19 o_81 f_85)))))
 :qid |stdinbpl.5880:41|
 :skolemid |186|
 :pattern ( (MapType1Select newPMask@19 o_81 f_85))
)) (= UnfoldingHeap@27 (MapType0Store UnfoldingHeap@26 null (|lseg#sm| (MapType0Select UnfoldingHeap@26 (MapType0Select UnfoldingHeap@26 ptr@0 next) next) null) newPMask@19))) (and (= UnfoldingHeap@28 UnfoldingHeap@27) (= (ControlFlow 0 41) 40))) anon567_correct)))))
(let ((anon878_Then_correct  (=> (not (= (MapType0Select Heap@67 ptr@0 next) null)) (=> (and (not (= (MapType0Select Heap@67 ptr@0 next) null)) (= UnfoldingMask@26 (MapType1Store UnfoldingMask@25 (MapType0Select Heap@67 ptr@0 next) data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@25 (MapType0Select Heap@67 ptr@0 next) data)) FullPerm))))) (=> (and (and (and (state Heap@67 UnfoldingMask@26) (not (= (MapType0Select Heap@67 ptr@0 next) null))) (and (= UnfoldingMask@27 (MapType1Store UnfoldingMask@26 (MapType0Select Heap@67 ptr@0 next) next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@26 (MapType0Select Heap@67 ptr@0 next) next)) FullPerm)))) (state Heap@67 UnfoldingMask@27))) (and (and (= UnfoldingMask@28 (MapType1Store UnfoldingMask@27 null (lseg (MapType0Select Heap@67 (MapType0Select Heap@67 ptr@0 next) next) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@27 null (lseg (MapType0Select Heap@67 (MapType0Select Heap@67 ptr@0 next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@67 ptr@0 next) null) (MapType0Select Heap@67 null (lseg (MapType0Select Heap@67 ptr@0 next) null)) (lseg (MapType0Select Heap@67 (MapType0Select Heap@67 ptr@0 next) next) null) (MapType0Select Heap@67 null (lseg (MapType0Select Heap@67 (MapType0Select Heap@67 ptr@0 next) next) null)))) (and (state Heap@67 UnfoldingMask@28) (=> (not (= (MapType0Select Heap@67 (MapType0Select Heap@67 ptr@0 next) next) null)) (<= (U_2_int (MapType0Select Heap@67 (MapType0Select Heap@67 ptr@0 next) data)) (U_2_int (MapType0Select Heap@67 (MapType0Select Heap@67 (MapType0Select Heap@67 ptr@0 next) next) data))))))) (and (=> (= (ControlFlow 0 43) 41) anon879_Then_correct) (=> (= (ControlFlow 0 43) 42) anon879_Else_correct)))))))
(let ((anon878_Else_correct  (=> (and (and (= (MapType0Select Heap@67 ptr@0 next) null) (= UnfoldingHeap@29 Heap@67)) (and (= UnfoldingMask@29 UnfoldingMask@25) (= (ControlFlow 0 39) 38))) anon568_correct)))
(let ((anon564_correct  (=> (= UnfoldingMask@25 (MapType1Store Mask@46 null (lseg (MapType0Select Heap@67 ptr@0 next) null) (real_2_U (- (U_2_real (MapType1Select Mask@46 null (lseg (MapType0Select Heap@67 ptr@0 next) null))) FullPerm)))) (and (=> (= (ControlFlow 0 44) 43) anon878_Then_correct) (=> (= (ControlFlow 0 44) 39) anon878_Else_correct)))))
(let ((anon877_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 47) 44)) anon564_correct)))
(let ((anon877_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 45) (- 0 46)) (<= FullPerm (U_2_real (MapType1Select Mask@46 null (lseg (MapType0Select Heap@67 ptr@0 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@46 null (lseg (MapType0Select Heap@67 ptr@0 next) null)))) (=> (= (ControlFlow 0 45) 44) anon564_correct))))))
(let ((anon562_correct  (=> (and (and (= Mask@49 (MapType1Store Mask@48 null (lseg (MapType0Select Heap@67 ptr@0 next) null) (real_2_U (- (U_2_real (MapType1Select Mask@48 null (lseg (MapType0Select Heap@67 ptr@0 next) null))) FullPerm)))) (InsidePredicate (lseg ptr@0 null) (MapType0Select Heap@67 null (lseg ptr@0 null)) (lseg (MapType0Select Heap@67 ptr@0 next) null) (MapType0Select Heap@67 null (lseg (MapType0Select Heap@67 ptr@0 next) null)))) (and (|lseg#trigger| Heap@67 (lseg (MapType0Select Heap@67 ptr@0 next) null)) (= (MapType0Select Heap@67 null (lseg (MapType0Select Heap@67 ptr@0 next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@67 ptr@0 next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@67 (MapType0Select Heap@67 ptr@0 next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@67 (MapType0Select Heap@67 ptr@0 next) next)) (MapType0Select Heap@67 null (lseg (MapType0Select Heap@67 (MapType0Select Heap@67 ptr@0 next) next) null)))) EmptyFrame))))) (and (=> (= (ControlFlow 0 48) 45) anon877_Then_correct) (=> (= (ControlFlow 0 48) 47) anon877_Else_correct)))))
(let ((anon876_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 51) 48)) anon562_correct)))
(let ((anon876_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 49) (- 0 50)) (<= FullPerm (U_2_real (MapType1Select Mask@48 null (lseg (MapType0Select Heap@67 ptr@0 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@48 null (lseg (MapType0Select Heap@67 ptr@0 next) null)))) (=> (= (ControlFlow 0 49) 48) anon562_correct))))))
(let ((anon560_correct  (=> (= Mask@48 (MapType1Store Mask@47 ptr@0 next (real_2_U (- (U_2_real (MapType1Select Mask@47 ptr@0 next)) FullPerm)))) (and (=> (= (ControlFlow 0 52) 49) anon876_Then_correct) (=> (= (ControlFlow 0 52) 51) anon876_Else_correct)))))
(let ((anon875_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 55) 52)) anon560_correct)))
(let ((anon875_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 53) (- 0 54)) (<= FullPerm (U_2_real (MapType1Select Mask@47 ptr@0 next)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@47 ptr@0 next))) (=> (= (ControlFlow 0 53) 52) anon560_correct))))))
(let ((anon558_correct  (=> (= Mask@47 (MapType1Store Mask@46 ptr@0 data (real_2_U (- (U_2_real (MapType1Select Mask@46 ptr@0 data)) FullPerm)))) (and (=> (= (ControlFlow 0 56) 53) anon875_Then_correct) (=> (= (ControlFlow 0 56) 55) anon875_Else_correct)))))
(let ((anon874_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 59) 56)) anon558_correct)))
(let ((anon874_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 57) (- 0 58)) (<= FullPerm (U_2_real (MapType1Select Mask@46 ptr@0 data)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@46 ptr@0 data))) (=> (= (ControlFlow 0 57) 56) anon558_correct))))))
(let ((anon873_Then_correct  (=> (not (= ptr@0 null)) (and (=> (= (ControlFlow 0 60) 57) anon874_Then_correct) (=> (= (ControlFlow 0 60) 59) anon874_Else_correct)))))
(let ((anon873_Else_correct  (=> (and (= ptr@0 null) (= Mask@50 Mask@46)) (and (=> (= (ControlFlow 0 34) 32) anon881_Then_correct) (=> (= (ControlFlow 0 34) 33) anon881_Else_correct)))))
(let ((anon555_correct  (=> (and (state Heap@67 Mask@46) (state Heap@67 Mask@46)) (and (=> (= (ControlFlow 0 61) 60) anon873_Then_correct) (=> (= (ControlFlow 0 61) 34) anon873_Else_correct)))))
(let ((anon872_Else_correct  (=> (= (MapType0Select Heap@63 ptr@0 next) null) (=> (and (= Heap@67 Heap@63) (= (ControlFlow 0 63) 61)) anon555_correct))))
(let ((anon872_Then_correct  (=> (not (= (MapType0Select Heap@63 ptr@0 next) null)) (=> (and (= Heap@64 (MapType0Store Heap@63 null (|lseg#sm| (MapType0Select Heap@63 ptr@0 next) null) (MapType1Store (MapType0Select Heap@63 null (|lseg#sm| (MapType0Select Heap@63 ptr@0 next) null)) (MapType0Select Heap@63 ptr@0 next) data (bool_2_U true)))) (= Heap@65 (MapType0Store Heap@64 null (|lseg#sm| (MapType0Select Heap@64 ptr@0 next) null) (MapType1Store (MapType0Select Heap@64 null (|lseg#sm| (MapType0Select Heap@64 ptr@0 next) null)) (MapType0Select Heap@64 ptr@0 next) next (bool_2_U true))))) (=> (and (and (forall ((o_80 T@U) (f_84 T@U) ) (! (let ((B@@48 (FieldTypeInv1 (type f_84))))
(let ((A@@49 (FieldTypeInv0 (type f_84))))
 (=> (and (and (= (type o_80) RefType) (= (type f_84) (FieldType A@@49 B@@48))) (or (U_2_bool (MapType1Select (MapType0Select Heap@65 null (|lseg#sm| (MapType0Select Heap@65 ptr@0 next) null)) o_80 f_84)) (U_2_bool (MapType1Select (MapType0Select Heap@65 null (|lseg#sm| (MapType0Select Heap@65 (MapType0Select Heap@65 ptr@0 next) next) null)) o_80 f_84)))) (U_2_bool (MapType1Select newPMask@18 o_80 f_84)))))
 :qid |stdinbpl.5810:33|
 :skolemid |185|
 :pattern ( (MapType1Select newPMask@18 o_80 f_84))
)) (= Heap@66 (MapType0Store Heap@65 null (|lseg#sm| (MapType0Select Heap@65 ptr@0 next) null) newPMask@18))) (and (= Heap@67 Heap@66) (= (ControlFlow 0 62) 61))) anon555_correct)))))
(let ((anon871_Else_correct  (=> (and (HasDirectPerm Mask@46 null (lseg (MapType0Select Heap@60 ptr@0 next) null)) (= Heap@63 Heap@60)) (and (=> (= (ControlFlow 0 65) 62) anon872_Then_correct) (=> (= (ControlFlow 0 65) 63) anon872_Else_correct)))))
(let ((anon871_Then_correct  (=> (and (and (not (HasDirectPerm Mask@46 null (lseg (MapType0Select Heap@60 ptr@0 next) null))) (= Heap@61 (MapType0Store Heap@60 null (|lseg#sm| (MapType0Select Heap@60 ptr@0 next) null) ZeroPMask))) (and (= Heap@62 (MapType0Store Heap@61 null (lseg (MapType0Select Heap@61 ptr@0 next) null) freshVersion@1)) (= Heap@63 Heap@62))) (and (=> (= (ControlFlow 0 64) 62) anon872_Then_correct) (=> (= (ControlFlow 0 64) 63) anon872_Else_correct)))))
(let ((anon551_correct  (=> (and (state Heap@60 Mask@45) (= Mask@46 (MapType1Store Mask@45 null (lseg (MapType0Select Heap@60 ptr@0 next) null) (real_2_U (+ (U_2_real (MapType1Select Mask@45 null (lseg (MapType0Select Heap@60 ptr@0 next) null))) FullPerm))))) (=> (and (and (state Heap@60 Mask@46) (state Heap@60 Mask@46)) (and (|lseg#trigger| Heap@60 (lseg (MapType0Select Heap@60 ptr@0 next) null)) (= (MapType0Select Heap@60 null (lseg (MapType0Select Heap@60 ptr@0 next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@60 ptr@0 next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@60 (MapType0Select Heap@60 ptr@0 next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@60 (MapType0Select Heap@60 ptr@0 next) next)) (MapType0Select Heap@60 null (lseg (MapType0Select Heap@60 (MapType0Select Heap@60 ptr@0 next) next) null)))) EmptyFrame))))) (and (=> (= (ControlFlow 0 66) 64) anon871_Then_correct) (=> (= (ControlFlow 0 66) 65) anon871_Else_correct))))))
(let ((anon870_Else_correct  (=> (= (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) null) (=> (and (= Heap@60 Heap@56) (= (ControlFlow 0 68) 66)) anon551_correct))))
(let ((anon870_Then_correct  (=> (not (= (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) null)) (=> (and (= Heap@57 (MapType0Store Heap@56 null (|lseg#sm| (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) null) (MapType1Store (MapType0Select Heap@56 null (|lseg#sm| (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) null)) (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) data (bool_2_U true)))) (= Heap@58 (MapType0Store Heap@57 null (|lseg#sm| (MapType0Select Heap@57 (MapType0Select Heap@57 ptr@0 next) next) null) (MapType1Store (MapType0Select Heap@57 null (|lseg#sm| (MapType0Select Heap@57 (MapType0Select Heap@57 ptr@0 next) next) null)) (MapType0Select Heap@57 (MapType0Select Heap@57 ptr@0 next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_79 T@U) (f_83 T@U) ) (! (let ((B@@49 (FieldTypeInv1 (type f_83))))
(let ((A@@50 (FieldTypeInv0 (type f_83))))
 (=> (and (and (= (type o_79) RefType) (= (type f_83) (FieldType A@@50 B@@49))) (or (U_2_bool (MapType1Select (MapType0Select Heap@58 null (|lseg#sm| (MapType0Select Heap@58 (MapType0Select Heap@58 ptr@0 next) next) null)) o_79 f_83)) (U_2_bool (MapType1Select (MapType0Select Heap@58 null (|lseg#sm| (MapType0Select Heap@58 (MapType0Select Heap@58 (MapType0Select Heap@58 ptr@0 next) next) next) null)) o_79 f_83)))) (U_2_bool (MapType1Select newPMask@17 o_79 f_83)))))
 :qid |stdinbpl.5788:35|
 :skolemid |184|
 :pattern ( (MapType1Select newPMask@17 o_79 f_83))
)) (= Heap@59 (MapType0Store Heap@58 null (|lseg#sm| (MapType0Select Heap@58 (MapType0Select Heap@58 ptr@0 next) next) null) newPMask@17))) (and (= Heap@60 Heap@59) (= (ControlFlow 0 67) 66))) anon551_correct)))))
(let ((anon869_Else_correct  (=> (and (= (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) null) (= Mask@45 Mask@44)) (and (=> (= (ControlFlow 0 72) 67) anon870_Then_correct) (=> (= (ControlFlow 0 72) 68) anon870_Else_correct)))))
(let ((anon869_Then_correct  (=> (not (= (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) null)) (and (=> (= (ControlFlow 0 70) (- 0 71)) (<= (U_2_int (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) data)) (U_2_int (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) data)))) (=> (<= (U_2_int (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) data)) (U_2_int (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) data))) (=> (= Mask@45 Mask@44) (and (=> (= (ControlFlow 0 70) 67) anon870_Then_correct) (=> (= (ControlFlow 0 70) 68) anon870_Else_correct))))))))
(let ((anon547_correct  (=> (state UnfoldingHeap@24 UnfoldingMask@24) (and (=> (= (ControlFlow 0 73) 70) anon869_Then_correct) (=> (= (ControlFlow 0 73) 72) anon869_Else_correct)))))
(let ((anon546_correct  (=> (and (and (state UnfoldingHeap@23 UnfoldingMask@23) (= UnfoldingHeap@24 UnfoldingHeap@23)) (and (= UnfoldingMask@24 UnfoldingMask@23) (= (ControlFlow 0 75) 73))) anon547_correct)))
(let ((anon868_Else_correct  (=> (= (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) next) null) (=> (and (= UnfoldingHeap@23 Heap@56) (= (ControlFlow 0 77) 75)) anon546_correct))))
(let ((anon868_Then_correct  (=> (not (= (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) next) null)) (=> (and (= UnfoldingHeap@20 (MapType0Store Heap@56 null (|lseg#sm| (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) next) null) (MapType1Store (MapType0Select Heap@56 null (|lseg#sm| (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) next) null)) (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) next) data (bool_2_U true)))) (= UnfoldingHeap@21 (MapType0Store UnfoldingHeap@20 null (|lseg#sm| (MapType0Select UnfoldingHeap@20 (MapType0Select UnfoldingHeap@20 (MapType0Select UnfoldingHeap@20 ptr@0 next) next) next) null) (MapType1Store (MapType0Select UnfoldingHeap@20 null (|lseg#sm| (MapType0Select UnfoldingHeap@20 (MapType0Select UnfoldingHeap@20 (MapType0Select UnfoldingHeap@20 ptr@0 next) next) next) null)) (MapType0Select UnfoldingHeap@20 (MapType0Select UnfoldingHeap@20 (MapType0Select UnfoldingHeap@20 ptr@0 next) next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_78 T@U) (f_82 T@U) ) (! (let ((B@@50 (FieldTypeInv1 (type f_82))))
(let ((A@@51 (FieldTypeInv0 (type f_82))))
 (=> (and (and (= (type o_78) RefType) (= (type f_82) (FieldType A@@51 B@@50))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@21 null (|lseg#sm| (MapType0Select UnfoldingHeap@21 (MapType0Select UnfoldingHeap@21 (MapType0Select UnfoldingHeap@21 ptr@0 next) next) next) null)) o_78 f_82)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@21 null (|lseg#sm| (MapType0Select UnfoldingHeap@21 (MapType0Select UnfoldingHeap@21 (MapType0Select UnfoldingHeap@21 (MapType0Select UnfoldingHeap@21 ptr@0 next) next) next) next) null)) o_78 f_82)))) (U_2_bool (MapType1Select newPMask@16 o_78 f_82)))))
 :qid |stdinbpl.5768:41|
 :skolemid |183|
 :pattern ( (MapType1Select newPMask@16 o_78 f_82))
)) (= UnfoldingHeap@22 (MapType0Store UnfoldingHeap@21 null (|lseg#sm| (MapType0Select UnfoldingHeap@21 (MapType0Select UnfoldingHeap@21 (MapType0Select UnfoldingHeap@21 ptr@0 next) next) next) null) newPMask@16))) (and (= UnfoldingHeap@23 UnfoldingHeap@22) (= (ControlFlow 0 76) 75))) anon546_correct)))))
(let ((anon867_Then_correct  (=> (not (= (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) null)) (=> (and (not (= (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) null)) (= UnfoldingMask@21 (MapType1Store UnfoldingMask@20 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@20 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) data)) FullPerm))))) (=> (and (and (and (state Heap@56 UnfoldingMask@21) (not (= (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) null))) (and (= UnfoldingMask@22 (MapType1Store UnfoldingMask@21 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@21 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) next)) FullPerm)))) (state Heap@56 UnfoldingMask@22))) (and (and (= UnfoldingMask@23 (MapType1Store UnfoldingMask@22 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) next) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@22 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) null) (MapType0Select Heap@56 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) null)) (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) next) null) (MapType0Select Heap@56 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) next) null)))) (and (state Heap@56 UnfoldingMask@23) (=> (not (= (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) next) null)) (<= (U_2_int (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) data)) (U_2_int (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) next) data))))))) (and (=> (= (ControlFlow 0 78) 76) anon868_Then_correct) (=> (= (ControlFlow 0 78) 77) anon868_Else_correct)))))))
(let ((anon867_Else_correct  (=> (and (and (= (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) null) (= UnfoldingHeap@24 Heap@56)) (and (= UnfoldingMask@24 UnfoldingMask@20) (= (ControlFlow 0 74) 73))) anon547_correct)))
(let ((anon543_correct  (=> (= UnfoldingMask@20 (MapType1Store Mask@41 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) null) (real_2_U (- (U_2_real (MapType1Select Mask@41 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) null))) FullPerm)))) (and (=> (= (ControlFlow 0 79) 78) anon867_Then_correct) (=> (= (ControlFlow 0 79) 74) anon867_Else_correct)))))
(let ((anon866_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 82) 79)) anon543_correct)))
(let ((anon866_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 80) (- 0 81)) (<= FullPerm (U_2_real (MapType1Select Mask@41 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@41 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) null)))) (=> (= (ControlFlow 0 80) 79) anon543_correct))))))
(let ((anon541_correct  (=> (and (and (= Mask@44 (MapType1Store Mask@43 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) null) (real_2_U (- (U_2_real (MapType1Select Mask@43 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@56 ptr@0 next) null) (MapType0Select Heap@56 null (lseg (MapType0Select Heap@56 ptr@0 next) null)) (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) null) (MapType0Select Heap@56 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) null)))) (and (|lseg#trigger| Heap@56 (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) null)) (= (MapType0Select Heap@56 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) next)) (MapType0Select Heap@56 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) next) null)))) EmptyFrame))))) (and (=> (= (ControlFlow 0 83) 80) anon866_Then_correct) (=> (= (ControlFlow 0 83) 82) anon866_Else_correct)))))
(let ((anon865_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 86) 83)) anon541_correct)))
(let ((anon865_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 84) (- 0 85)) (<= FullPerm (U_2_real (MapType1Select Mask@43 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@43 null (lseg (MapType0Select Heap@56 (MapType0Select Heap@56 ptr@0 next) next) null)))) (=> (= (ControlFlow 0 84) 83) anon541_correct))))))
(let ((anon539_correct  (=> (= Mask@43 (MapType1Store Mask@42 (MapType0Select Heap@56 ptr@0 next) next (real_2_U (- (U_2_real (MapType1Select Mask@42 (MapType0Select Heap@56 ptr@0 next) next)) FullPerm)))) (and (=> (= (ControlFlow 0 87) 84) anon865_Then_correct) (=> (= (ControlFlow 0 87) 86) anon865_Else_correct)))))
(let ((anon864_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 90) 87)) anon539_correct)))
(let ((anon864_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 88) (- 0 89)) (<= FullPerm (U_2_real (MapType1Select Mask@42 (MapType0Select Heap@56 ptr@0 next) next)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@42 (MapType0Select Heap@56 ptr@0 next) next))) (=> (= (ControlFlow 0 88) 87) anon539_correct))))))
(let ((anon537_correct  (=> (= Mask@42 (MapType1Store Mask@41 (MapType0Select Heap@56 ptr@0 next) data (real_2_U (- (U_2_real (MapType1Select Mask@41 (MapType0Select Heap@56 ptr@0 next) data)) FullPerm)))) (and (=> (= (ControlFlow 0 91) 88) anon864_Then_correct) (=> (= (ControlFlow 0 91) 90) anon864_Else_correct)))))
(let ((anon863_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 94) 91)) anon537_correct)))
(let ((anon863_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 92) (- 0 93)) (<= FullPerm (U_2_real (MapType1Select Mask@41 (MapType0Select Heap@56 ptr@0 next) data)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@41 (MapType0Select Heap@56 ptr@0 next) data))) (=> (= (ControlFlow 0 92) 91) anon537_correct))))))
(let ((anon862_Then_correct  (=> (not (= (MapType0Select Heap@56 ptr@0 next) null)) (and (=> (= (ControlFlow 0 95) 92) anon863_Then_correct) (=> (= (ControlFlow 0 95) 94) anon863_Else_correct)))))
(let ((anon862_Else_correct  (=> (and (= (MapType0Select Heap@56 ptr@0 next) null) (= Mask@45 Mask@41)) (and (=> (= (ControlFlow 0 69) 67) anon870_Then_correct) (=> (= (ControlFlow 0 69) 68) anon870_Else_correct)))))
(let ((anon534_correct  (=> (state Heap@52 Mask@36) (=> (and (and (and (and (not (= freshObj@1 null)) (not (U_2_bool (MapType0Select Heap@52 freshObj@1 $allocated)))) (= Heap@53 (MapType0Store Heap@52 freshObj@1 $allocated (bool_2_U true)))) (and (= Mask@37 (MapType1Store Mask@36 freshObj@1 data (real_2_U (+ (U_2_real (MapType1Select Mask@36 freshObj@1 data)) FullPerm)))) (= Mask@38 (MapType1Store Mask@37 freshObj@1 next (real_2_U (+ (U_2_real (MapType1Select Mask@37 freshObj@1 next)) FullPerm)))))) (and (and (= Mask@39 (MapType1Store Mask@38 freshObj@1 head (real_2_U (+ (U_2_real (MapType1Select Mask@38 freshObj@1 head)) FullPerm)))) (= Mask@40 (MapType1Store Mask@39 freshObj@1 held (real_2_U (+ (U_2_real (MapType1Select Mask@39 freshObj@1 held)) FullPerm))))) (and (= Mask@41 (MapType1Store Mask@40 freshObj@1 changed (real_2_U (+ (U_2_real (MapType1Select Mask@40 freshObj@1 changed)) FullPerm)))) (state Heap@53 Mask@41)))) (and (=> (= (ControlFlow 0 96) (- 0 101)) (= FullPerm (U_2_real (MapType1Select Mask@41 freshObj@1 data)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@41 freshObj@1 data))) (=> (and (= Heap@54 (MapType0Store Heap@53 freshObj@1 data (int_2_U elem))) (state Heap@54 Mask@41)) (and (=> (= (ControlFlow 0 96) (- 0 100)) (HasDirectPerm Mask@41 ptr@0 next)) (=> (HasDirectPerm Mask@41 ptr@0 next) (and (=> (= (ControlFlow 0 96) (- 0 99)) (= FullPerm (U_2_real (MapType1Select Mask@41 freshObj@1 next)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@41 freshObj@1 next))) (=> (and (= Heap@55 (MapType0Store Heap@54 freshObj@1 next (MapType0Select Heap@54 ptr@0 next))) (state Heap@55 Mask@41)) (and (=> (= (ControlFlow 0 96) (- 0 98)) (= FullPerm (U_2_real (MapType1Select Mask@41 ptr@0 next)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@41 ptr@0 next))) (=> (and (= Heap@56 (MapType0Store Heap@55 ptr@0 next freshObj@1)) (state Heap@56 Mask@41)) (and (=> (= (ControlFlow 0 96) (- 0 97)) (HasDirectPerm Mask@41 ptr@0 next)) (=> (HasDirectPerm Mask@41 ptr@0 next) (and (=> (= (ControlFlow 0 96) 95) anon862_Then_correct) (=> (= (ControlFlow 0 96) 69) anon862_Else_correct)))))))))))))))))))
(let ((anon533_correct  (=> (state Heap@51 Mask@36) (=> (and (= Heap@52 Heap@51) (= (ControlFlow 0 103) 96)) anon534_correct))))
(let ((anon861_Else_correct  (=> (= (MapType0Select Heap@47 ptr@0 next) null) (=> (and (= Heap@51 Heap@47) (= (ControlFlow 0 105) 103)) anon533_correct))))
(let ((anon861_Then_correct  (=> (not (= (MapType0Select Heap@47 ptr@0 next) null)) (=> (and (= Heap@48 (MapType0Store Heap@47 null (|lseg#sm| (MapType0Select Heap@47 ptr@0 next) null) (MapType1Store (MapType0Select Heap@47 null (|lseg#sm| (MapType0Select Heap@47 ptr@0 next) null)) (MapType0Select Heap@47 ptr@0 next) data (bool_2_U true)))) (= Heap@49 (MapType0Store Heap@48 null (|lseg#sm| (MapType0Select Heap@48 ptr@0 next) null) (MapType1Store (MapType0Select Heap@48 null (|lseg#sm| (MapType0Select Heap@48 ptr@0 next) null)) (MapType0Select Heap@48 ptr@0 next) next (bool_2_U true))))) (=> (and (and (forall ((o_77 T@U) (f_81 T@U) ) (! (let ((B@@51 (FieldTypeInv1 (type f_81))))
(let ((A@@52 (FieldTypeInv0 (type f_81))))
 (=> (and (and (= (type o_77) RefType) (= (type f_81) (FieldType A@@52 B@@51))) (or (U_2_bool (MapType1Select (MapType0Select Heap@49 null (|lseg#sm| (MapType0Select Heap@49 ptr@0 next) null)) o_77 f_81)) (U_2_bool (MapType1Select (MapType0Select Heap@49 null (|lseg#sm| (MapType0Select Heap@49 (MapType0Select Heap@49 ptr@0 next) next) null)) o_77 f_81)))) (U_2_bool (MapType1Select newPMask@15 o_77 f_81)))))
 :qid |stdinbpl.5659:41|
 :skolemid |182|
 :pattern ( (MapType1Select newPMask@15 o_77 f_81))
)) (= Heap@50 (MapType0Store Heap@49 null (|lseg#sm| (MapType0Select Heap@49 ptr@0 next) null) newPMask@15))) (and (= Heap@51 Heap@50) (= (ControlFlow 0 104) 103))) anon533_correct)))))
(let ((anon531_correct  (=> (state Heap@47 Mask@36) (and (=> (= (ControlFlow 0 106) 104) anon861_Then_correct) (=> (= (ControlFlow 0 106) 105) anon861_Else_correct)))))
(let ((anon860_Else_correct  (=> (= (MapType0Select Heap@43 ptr@0 next) null) (=> (and (= Heap@47 Heap@43) (= (ControlFlow 0 108) 106)) anon531_correct))))
(let ((anon860_Then_correct  (=> (not (= (MapType0Select Heap@43 ptr@0 next) null)) (=> (and (= Heap@44 (MapType0Store Heap@43 null (|lseg#sm| (MapType0Select Heap@43 ptr@0 next) null) (MapType1Store (MapType0Select Heap@43 null (|lseg#sm| (MapType0Select Heap@43 ptr@0 next) null)) (MapType0Select Heap@43 ptr@0 next) data (bool_2_U true)))) (= Heap@45 (MapType0Store Heap@44 null (|lseg#sm| (MapType0Select Heap@44 ptr@0 next) null) (MapType1Store (MapType0Select Heap@44 null (|lseg#sm| (MapType0Select Heap@44 ptr@0 next) null)) (MapType0Select Heap@44 ptr@0 next) next (bool_2_U true))))) (=> (and (and (forall ((o_76 T@U) (f_80 T@U) ) (! (let ((B@@52 (FieldTypeInv1 (type f_80))))
(let ((A@@53 (FieldTypeInv0 (type f_80))))
 (=> (and (and (= (type o_76) RefType) (= (type f_80) (FieldType A@@53 B@@52))) (or (U_2_bool (MapType1Select (MapType0Select Heap@45 null (|lseg#sm| (MapType0Select Heap@45 ptr@0 next) null)) o_76 f_80)) (U_2_bool (MapType1Select (MapType0Select Heap@45 null (|lseg#sm| (MapType0Select Heap@45 (MapType0Select Heap@45 ptr@0 next) next) null)) o_76 f_80)))) (U_2_bool (MapType1Select newPMask@14 o_76 f_80)))))
 :qid |stdinbpl.5646:41|
 :skolemid |181|
 :pattern ( (MapType1Select newPMask@14 o_76 f_80))
)) (= Heap@46 (MapType0Store Heap@45 null (|lseg#sm| (MapType0Select Heap@45 ptr@0 next) null) newPMask@14))) (and (= Heap@47 Heap@46) (= (ControlFlow 0 107) 106))) anon531_correct)))))
(let ((anon529_correct  (=> (state UnfoldingHeap@19 UnfoldingMask@19) (and (=> (= (ControlFlow 0 109) 107) anon860_Then_correct) (=> (= (ControlFlow 0 109) 108) anon860_Else_correct)))))
(let ((anon528_correct  (=> (and (and (state UnfoldingHeap@18 UnfoldingMask@18) (= UnfoldingHeap@19 UnfoldingHeap@18)) (and (= UnfoldingMask@19 UnfoldingMask@18) (= (ControlFlow 0 111) 109))) anon529_correct)))
(let ((anon859_Else_correct  (=> (= (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) null) (=> (and (= UnfoldingHeap@18 Heap@43) (= (ControlFlow 0 113) 111)) anon528_correct))))
(let ((anon859_Then_correct  (=> (not (= (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) null)) (=> (and (= UnfoldingHeap@15 (MapType0Store Heap@43 null (|lseg#sm| (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) null) (MapType1Store (MapType0Select Heap@43 null (|lseg#sm| (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) null)) (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) data (bool_2_U true)))) (= UnfoldingHeap@16 (MapType0Store UnfoldingHeap@15 null (|lseg#sm| (MapType0Select UnfoldingHeap@15 (MapType0Select UnfoldingHeap@15 ptr@0 next) next) null) (MapType1Store (MapType0Select UnfoldingHeap@15 null (|lseg#sm| (MapType0Select UnfoldingHeap@15 (MapType0Select UnfoldingHeap@15 ptr@0 next) next) null)) (MapType0Select UnfoldingHeap@15 (MapType0Select UnfoldingHeap@15 ptr@0 next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_75 T@U) (f_79 T@U) ) (! (let ((B@@53 (FieldTypeInv1 (type f_79))))
(let ((A@@54 (FieldTypeInv0 (type f_79))))
 (=> (and (and (= (type o_75) RefType) (= (type f_79) (FieldType A@@54 B@@53))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@16 null (|lseg#sm| (MapType0Select UnfoldingHeap@16 (MapType0Select UnfoldingHeap@16 ptr@0 next) next) null)) o_75 f_79)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@16 null (|lseg#sm| (MapType0Select UnfoldingHeap@16 (MapType0Select UnfoldingHeap@16 (MapType0Select UnfoldingHeap@16 ptr@0 next) next) next) null)) o_75 f_79)))) (U_2_bool (MapType1Select newPMask@13 o_75 f_79)))))
 :qid |stdinbpl.5631:43|
 :skolemid |180|
 :pattern ( (MapType1Select newPMask@13 o_75 f_79))
)) (= UnfoldingHeap@17 (MapType0Store UnfoldingHeap@16 null (|lseg#sm| (MapType0Select UnfoldingHeap@16 (MapType0Select UnfoldingHeap@16 ptr@0 next) next) null) newPMask@13))) (and (= UnfoldingHeap@18 UnfoldingHeap@17) (= (ControlFlow 0 112) 111))) anon528_correct)))))
(let ((anon526_correct  (=> (and (state Unfolding1Heap@9 Unfolding1Mask@9) (=> (not (= (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) null)) (<= (U_2_int (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) data)) (U_2_int (MapType0Select Heap@43 (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) data))))) (and (=> (= (ControlFlow 0 114) 112) anon859_Then_correct) (=> (= (ControlFlow 0 114) 113) anon859_Else_correct)))))
(let ((anon525_correct  (=> (and (and (state Unfolding1Heap@8 Unfolding1Mask@8) (= Unfolding1Heap@9 Unfolding1Heap@8)) (and (= Unfolding1Mask@9 Unfolding1Mask@8) (= (ControlFlow 0 116) 114))) anon526_correct)))
(let ((anon858_Else_correct  (=> (= (MapType0Select Heap@43 (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) next) null) (=> (and (= Unfolding1Heap@8 Heap@43) (= (ControlFlow 0 118) 116)) anon525_correct))))
(let ((anon858_Then_correct  (=> (not (= (MapType0Select Heap@43 (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) next) null)) (=> (and (= Unfolding1Heap@5 (MapType0Store Heap@43 null (|lseg#sm| (MapType0Select Heap@43 (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) next) null) (MapType1Store (MapType0Select Heap@43 null (|lseg#sm| (MapType0Select Heap@43 (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) next) null)) (MapType0Select Heap@43 (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) next) data (bool_2_U true)))) (= Unfolding1Heap@6 (MapType0Store Unfolding1Heap@5 null (|lseg#sm| (MapType0Select Unfolding1Heap@5 (MapType0Select Unfolding1Heap@5 (MapType0Select Unfolding1Heap@5 ptr@0 next) next) next) null) (MapType1Store (MapType0Select Unfolding1Heap@5 null (|lseg#sm| (MapType0Select Unfolding1Heap@5 (MapType0Select Unfolding1Heap@5 (MapType0Select Unfolding1Heap@5 ptr@0 next) next) next) null)) (MapType0Select Unfolding1Heap@5 (MapType0Select Unfolding1Heap@5 (MapType0Select Unfolding1Heap@5 ptr@0 next) next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_74 T@U) (f_78 T@U) ) (! (let ((B@@54 (FieldTypeInv1 (type f_78))))
(let ((A@@55 (FieldTypeInv0 (type f_78))))
 (=> (and (and (= (type o_74) RefType) (= (type f_78) (FieldType A@@55 B@@54))) (or (U_2_bool (MapType1Select (MapType0Select Unfolding1Heap@6 null (|lseg#sm| (MapType0Select Unfolding1Heap@6 (MapType0Select Unfolding1Heap@6 (MapType0Select Unfolding1Heap@6 ptr@0 next) next) next) null)) o_74 f_78)) (U_2_bool (MapType1Select (MapType0Select Unfolding1Heap@6 null (|lseg#sm| (MapType0Select Unfolding1Heap@6 (MapType0Select Unfolding1Heap@6 (MapType0Select Unfolding1Heap@6 (MapType0Select Unfolding1Heap@6 ptr@0 next) next) next) next) null)) o_74 f_78)))) (U_2_bool (MapType1Select newPMask@12 o_74 f_78)))))
 :qid |stdinbpl.5615:47|
 :skolemid |179|
 :pattern ( (MapType1Select newPMask@12 o_74 f_78))
)) (= Unfolding1Heap@7 (MapType0Store Unfolding1Heap@6 null (|lseg#sm| (MapType0Select Unfolding1Heap@6 (MapType0Select Unfolding1Heap@6 (MapType0Select Unfolding1Heap@6 ptr@0 next) next) next) null) newPMask@12))) (and (= Unfolding1Heap@8 Unfolding1Heap@7) (= (ControlFlow 0 117) 116))) anon525_correct)))))
(let ((anon857_Then_correct  (=> (not (= (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) null)) (=> (and (not (= (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) null)) (= Unfolding1Mask@6 (MapType1Store Unfolding1Mask@5 (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) data (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@5 (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) data)) FullPerm))))) (=> (and (and (and (state Heap@43 Unfolding1Mask@6) (not (= (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) null))) (and (= Unfolding1Mask@7 (MapType1Store Unfolding1Mask@6 (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) next (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@6 (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) next)) FullPerm)))) (state Heap@43 Unfolding1Mask@7))) (and (and (= Unfolding1Mask@8 (MapType1Store Unfolding1Mask@7 null (lseg (MapType0Select Heap@43 (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) next) null) (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@7 null (lseg (MapType0Select Heap@43 (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) null) (MapType0Select Heap@43 null (lseg (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) null)) (lseg (MapType0Select Heap@43 (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) next) null) (MapType0Select Heap@43 null (lseg (MapType0Select Heap@43 (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) next) null)))) (and (state Heap@43 Unfolding1Mask@8) (=> (not (= (MapType0Select Heap@43 (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) next) null)) (<= (U_2_int (MapType0Select Heap@43 (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) data)) (U_2_int (MapType0Select Heap@43 (MapType0Select Heap@43 (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) next) data))))))) (and (=> (= (ControlFlow 0 119) 117) anon858_Then_correct) (=> (= (ControlFlow 0 119) 118) anon858_Else_correct)))))))
(let ((anon857_Else_correct  (=> (and (and (= (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) null) (= Unfolding1Heap@9 Heap@43)) (and (= Unfolding1Mask@9 Unfolding1Mask@5) (= (ControlFlow 0 115) 114))) anon526_correct)))
(let ((anon856_Then_correct  (=> (not (= (MapType0Select Heap@43 ptr@0 next) null)) (=> (and (and (not (= (MapType0Select Heap@43 ptr@0 next) null)) (= UnfoldingMask@16 (MapType1Store UnfoldingMask@15 (MapType0Select Heap@43 ptr@0 next) data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@15 (MapType0Select Heap@43 ptr@0 next) data)) FullPerm))))) (and (state Heap@43 UnfoldingMask@16) (not (= (MapType0Select Heap@43 ptr@0 next) null)))) (=> (and (and (and (= UnfoldingMask@17 (MapType1Store UnfoldingMask@16 (MapType0Select Heap@43 ptr@0 next) next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@16 (MapType0Select Heap@43 ptr@0 next) next)) FullPerm)))) (state Heap@43 UnfoldingMask@17)) (and (= UnfoldingMask@18 (MapType1Store UnfoldingMask@17 null (lseg (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@17 null (lseg (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@43 ptr@0 next) null) (MapType0Select Heap@43 null (lseg (MapType0Select Heap@43 ptr@0 next) null)) (lseg (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) null) (MapType0Select Heap@43 null (lseg (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) null))))) (and (and (state Heap@43 UnfoldingMask@18) (|lseg#trigger| Heap@43 (lseg (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) null))) (and (= (MapType0Select Heap@43 null (lseg (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@43 (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@43 (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) next)) (MapType0Select Heap@43 null (lseg (MapType0Select Heap@43 (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) next) null)))) EmptyFrame))) (= Unfolding1Mask@5 (MapType1Store UnfoldingMask@18 null (lseg (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) null) (real_2_U (- (U_2_real (MapType1Select UnfoldingMask@18 null (lseg (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) null))) FullPerm))))))) (and (=> (= (ControlFlow 0 120) 119) anon857_Then_correct) (=> (= (ControlFlow 0 120) 115) anon857_Else_correct)))))))
(let ((anon856_Else_correct  (=> (and (and (= (MapType0Select Heap@43 ptr@0 next) null) (= UnfoldingHeap@19 Heap@43)) (and (= UnfoldingMask@19 UnfoldingMask@15) (= (ControlFlow 0 110) 109))) anon529_correct)))
(let ((anon521_correct  (=> (= UnfoldingMask@15 (MapType1Store Mask@36 null (lseg (MapType0Select Heap@43 ptr@0 next) null) (real_2_U (- (U_2_real (MapType1Select Mask@36 null (lseg (MapType0Select Heap@43 ptr@0 next) null))) FullPerm)))) (and (=> (= (ControlFlow 0 121) 120) anon856_Then_correct) (=> (= (ControlFlow 0 121) 110) anon856_Else_correct)))))
(let ((anon855_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 124) 121)) anon521_correct)))
(let ((anon855_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 122) (- 0 123)) (<= FullPerm (U_2_real (MapType1Select Mask@36 null (lseg (MapType0Select Heap@43 ptr@0 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@36 null (lseg (MapType0Select Heap@43 ptr@0 next) null)))) (=> (= (ControlFlow 0 122) 121) anon521_correct))))))
(let ((anon854_Then_correct  (=> (not (= (MapType0Select Heap@43 ptr@0 next) null)) (=> (and (|lseg#trigger| Heap@43 (lseg (MapType0Select Heap@43 ptr@0 next) null)) (= (MapType0Select Heap@43 null (lseg (MapType0Select Heap@43 ptr@0 next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@43 ptr@0 next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next)) (MapType0Select Heap@43 null (lseg (MapType0Select Heap@43 (MapType0Select Heap@43 ptr@0 next) next) null)))) EmptyFrame)))) (and (=> (= (ControlFlow 0 125) 122) anon855_Then_correct) (=> (= (ControlFlow 0 125) 124) anon855_Else_correct))))))
(let ((anon854_Else_correct  (=> (= (MapType0Select Heap@43 ptr@0 next) null) (=> (and (= Heap@52 Heap@43) (= (ControlFlow 0 102) 96)) anon534_correct))))
(let ((anon518_correct  (=> (and (and (state Heap@43 Mask@35) (= Mask@36 (MapType1Store Mask@35 null (wand ptr@0 null FullPerm ptr@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@1 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@1 1)) 0) ptr@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@35 null (wand ptr@0 null FullPerm ptr@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@1 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@1 1)) 0) ptr@0 null))) FullPerm))))) (and (state Heap@43 Mask@36) (state Heap@43 Mask@36))) (and (=> (= (ControlFlow 0 126) 125) anon854_Then_correct) (=> (= (ControlFlow 0 126) 102) anon854_Else_correct)))))
(let ((anon517_correct  (=> (state Heap@42 Mask@35) (=> (and (= Heap@43 Heap@42) (= (ControlFlow 0 128) 126)) anon518_correct))))
(let ((anon853_Else_correct  (=> (= (MapType0Select ExhaleHeap@1 ptr@0 next) null) (=> (and (= Heap@42 ExhaleHeap@1) (= (ControlFlow 0 130) 128)) anon517_correct))))
(let ((anon853_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@1 ptr@0 next) null)) (=> (and (= Heap@39 (MapType0Store ExhaleHeap@1 null (|lseg#sm| (MapType0Select ExhaleHeap@1 ptr@0 next) null) (MapType1Store (MapType0Select ExhaleHeap@1 null (|lseg#sm| (MapType0Select ExhaleHeap@1 ptr@0 next) null)) (MapType0Select ExhaleHeap@1 ptr@0 next) data (bool_2_U true)))) (= Heap@40 (MapType0Store Heap@39 null (|lseg#sm| (MapType0Select Heap@39 ptr@0 next) null) (MapType1Store (MapType0Select Heap@39 null (|lseg#sm| (MapType0Select Heap@39 ptr@0 next) null)) (MapType0Select Heap@39 ptr@0 next) next (bool_2_U true))))) (=> (and (and (forall ((o_73 T@U) (f_77 T@U) ) (! (let ((B@@55 (FieldTypeInv1 (type f_77))))
(let ((A@@56 (FieldTypeInv0 (type f_77))))
 (=> (and (and (= (type o_73) RefType) (= (type f_77) (FieldType A@@56 B@@55))) (or (U_2_bool (MapType1Select (MapType0Select Heap@40 null (|lseg#sm| (MapType0Select Heap@40 ptr@0 next) null)) o_73 f_77)) (U_2_bool (MapType1Select (MapType0Select Heap@40 null (|lseg#sm| (MapType0Select Heap@40 (MapType0Select Heap@40 ptr@0 next) next) null)) o_73 f_77)))) (U_2_bool (MapType1Select newPMask@11 o_73 f_77)))))
 :qid |stdinbpl.5541:39|
 :skolemid |178|
 :pattern ( (MapType1Select newPMask@11 o_73 f_77))
)) (= Heap@41 (MapType0Store Heap@40 null (|lseg#sm| (MapType0Select Heap@40 ptr@0 next) null) newPMask@11))) (and (= Heap@42 Heap@41) (= (ControlFlow 0 129) 128))) anon517_correct)))))
(let ((anon852_Then_correct  (=> (and (not (= (MapType0Select ExhaleHeap@1 ptr@0 next) null)) (<= (U_2_int (MapType0Select ExhaleHeap@1 ptr@0 data)) (U_2_int (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) data)))) (and (=> (= (ControlFlow 0 131) 129) anon853_Then_correct) (=> (= (ControlFlow 0 131) 130) anon853_Else_correct)))))
(let ((anon852_Else_correct  (=> (= (MapType0Select ExhaleHeap@1 ptr@0 next) null) (=> (and (= Heap@43 ExhaleHeap@1) (= (ControlFlow 0 127) 126)) anon518_correct))))
(let ((anon514_correct  (=> (< (U_2_int (MapType0Select ExhaleHeap@1 ptr@0 data)) elem) (and (=> (= (ControlFlow 0 132) 131) anon852_Then_correct) (=> (= (ControlFlow 0 132) 127) anon852_Else_correct)))))
(let ((anon851_Else_correct  (=> (and (= (MapType0Select ExhaleHeap@1 ptr@0 next) null) (= (ControlFlow 0 134) 132)) anon514_correct)))
(let ((anon851_Then_correct  (=> (and (and (not (= (MapType0Select ExhaleHeap@1 ptr@0 next) null)) (state ExhaleHeap@1 Mask@35)) (and (|Seq#Equal| (contentNodes ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) null) (|Seq#Drop| (content Heap@@38 this@@38) index@1)) (= (ControlFlow 0 133) 132))) anon514_correct)))
(let ((anon512_correct  (=> (and (state ExhaleHeap@1 Mask@35) (= (U_2_int (MapType0Select ExhaleHeap@1 ptr@0 data)) (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@1 1))))) (and (=> (= (ControlFlow 0 135) 133) anon851_Then_correct) (=> (= (ControlFlow 0 135) 134) anon851_Else_correct)))))
(let ((anon850_Else_correct  (=> (and (not (= (MapType0Select ExhaleHeap@1 ptr@0 next) null)) (= (ControlFlow 0 137) 135)) anon512_correct)))
(let ((anon850_Then_correct  (=> (and (and (= (MapType0Select ExhaleHeap@1 ptr@0 next) null) (state ExhaleHeap@1 Mask@35)) (and (= index@1 (|Seq#Length| (content Heap@@38 this@@38))) (= (ControlFlow 0 136) 135))) anon512_correct)))
(let ((anon710_Else_correct  (=> (not (and (not (= (MapType0Select ExhaleHeap@1 ptr@0 next) null)) (< (U_2_int (MapType0Select ExhaleHeap@1 (MapType0Select ExhaleHeap@1 ptr@0 next) data)) elem))) (=> (and (and (state ExhaleHeap@1 Mask@26) (not (= ptr@0 null))) (and (= Mask@33 (MapType1Store Mask@26 ptr@0 next (real_2_U (+ (U_2_real (MapType1Select Mask@26 ptr@0 next)) FullPerm)))) (state ExhaleHeap@1 Mask@33))) (=> (and (and (and (not (= ptr@0 null)) (= Mask@34 (MapType1Store Mask@33 ptr@0 data (real_2_U (+ (U_2_real (MapType1Select Mask@33 ptr@0 data)) FullPerm))))) (and (state ExhaleHeap@1 Mask@34) (= Mask@35 (MapType1Store Mask@34 null (lseg (MapType0Select ExhaleHeap@1 ptr@0 next) null) (real_2_U (+ (U_2_real (MapType1Select Mask@34 null (lseg (MapType0Select ExhaleHeap@1 ptr@0 next) null))) FullPerm)))))) (and (and (state ExhaleHeap@1 Mask@35) (<= 1 index@1)) (and (state ExhaleHeap@1 Mask@35) (<= index@1 (|Seq#Length| (content Heap@@38 this@@38)))))) (and (=> (= (ControlFlow 0 138) 136) anon850_Then_correct) (=> (= (ControlFlow 0 138) 137) anon850_Else_correct)))))))
(let ((anon174_correct  (=> (state Heap@38 Mask@26) (=> (and (IdenticalOnKnownLocations Heap@38 ExhaleHeap@1 Mask@26) (U_2_bool (MapType0Select ExhaleHeap@1 ptr@0 $allocated))) (and (and (=> (= (ControlFlow 0 643) 641) anon678_Then_correct) (=> (= (ControlFlow 0 643) 545) anon710_Then_correct)) (=> (= (ControlFlow 0 643) 138) anon710_Else_correct))))))
(let ((anon677_Else_correct  (=> (= (MapType0Select Heap@34 hd@0 next) null) (=> (and (= Heap@38 Heap@34) (= (ControlFlow 0 645) 643)) anon174_correct))))
(let ((anon677_Then_correct  (=> (not (= (MapType0Select Heap@34 hd@0 next) null)) (=> (and (= Heap@35 (MapType0Store Heap@34 null (|lseg#sm| (MapType0Select Heap@34 hd@0 next) null) (MapType1Store (MapType0Select Heap@34 null (|lseg#sm| (MapType0Select Heap@34 hd@0 next) null)) (MapType0Select Heap@34 hd@0 next) data (bool_2_U true)))) (= Heap@36 (MapType0Store Heap@35 null (|lseg#sm| (MapType0Select Heap@35 hd@0 next) null) (MapType1Store (MapType0Select Heap@35 null (|lseg#sm| (MapType0Select Heap@35 hd@0 next) null)) (MapType0Select Heap@35 hd@0 next) next (bool_2_U true))))) (=> (and (and (forall ((o_45 T@U) (f_49 T@U) ) (! (let ((B@@56 (FieldTypeInv1 (type f_49))))
(let ((A@@57 (FieldTypeInv0 (type f_49))))
 (=> (and (and (= (type o_45) RefType) (= (type f_49) (FieldType A@@57 B@@56))) (or (U_2_bool (MapType1Select (MapType0Select Heap@36 null (|lseg#sm| (MapType0Select Heap@36 hd@0 next) null)) o_45 f_49)) (U_2_bool (MapType1Select (MapType0Select Heap@36 null (|lseg#sm| (MapType0Select Heap@36 (MapType0Select Heap@36 hd@0 next) next) null)) o_45 f_49)))) (U_2_bool (MapType1Select newPMask@10 o_45 f_49)))))
 :qid |stdinbpl.3491:39|
 :skolemid |150|
 :pattern ( (MapType1Select newPMask@10 o_45 f_49))
)) (= Heap@37 (MapType0Store Heap@36 null (|lseg#sm| (MapType0Select Heap@36 hd@0 next) null) newPMask@10))) (and (= Heap@38 Heap@37) (= (ControlFlow 0 644) 643))) anon174_correct)))))
(let ((anon172_correct  (and (=> (= (ControlFlow 0 646) (- 0 647)) (<= FullPerm (U_2_real (MapType1Select Mask@25 null (wand hd@0 null FullPerm hd@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@0 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@0 1)) 0) hd@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@25 null (wand hd@0 null FullPerm hd@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@0 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@0 1)) 0) hd@0 null)))) (=> (= Mask@26 (MapType1Store Mask@25 null (wand hd@0 null FullPerm hd@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@0 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@0 1)) 0) hd@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@25 null (wand hd@0 null FullPerm hd@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@0 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@0 1)) 0) hd@0 null))) FullPerm)))) (and (=> (= (ControlFlow 0 646) 644) anon677_Then_correct) (=> (= (ControlFlow 0 646) 645) anon677_Else_correct)))))))
(let ((anon676_Else_correct  (=> (and (= (MapType0Select Heap@34 hd@0 next) null) (= (ControlFlow 0 650) 646)) anon172_correct)))
(let ((anon676_Then_correct  (=> (not (= (MapType0Select Heap@34 hd@0 next) null)) (and (=> (= (ControlFlow 0 648) (- 0 649)) (<= (U_2_int (MapType0Select Heap@34 hd@0 data)) (U_2_int (MapType0Select Heap@34 (MapType0Select Heap@34 hd@0 next) data)))) (=> (<= (U_2_int (MapType0Select Heap@34 hd@0 data)) (U_2_int (MapType0Select Heap@34 (MapType0Select Heap@34 hd@0 next) data))) (=> (= (ControlFlow 0 648) 646) anon172_correct))))))
(let ((anon170_correct  (and (=> (= (ControlFlow 0 651) (- 0 652)) (< (U_2_int (MapType0Select Heap@34 hd@0 data)) elem)) (=> (< (U_2_int (MapType0Select Heap@34 hd@0 data)) elem) (and (=> (= (ControlFlow 0 651) 648) anon676_Then_correct) (=> (= (ControlFlow 0 651) 650) anon676_Else_correct))))))
(let ((anon675_Else_correct  (=> (and (= (MapType0Select Heap@34 hd@0 next) null) (= (ControlFlow 0 655) 651)) anon170_correct)))
(let ((anon675_Then_correct  (=> (not (= (MapType0Select Heap@34 hd@0 next) null)) (and (=> (= (ControlFlow 0 653) (- 0 654)) (|Seq#Equal| (contentNodes Heap@34 (MapType0Select Heap@34 hd@0 next) null) (|Seq#Drop| (content Heap@@38 this@@38) index@0))) (=> (|Seq#Equal| (contentNodes Heap@34 (MapType0Select Heap@34 hd@0 next) null) (|Seq#Drop| (content Heap@@38 this@@38) index@0)) (=> (= (ControlFlow 0 653) 651) anon170_correct))))))
(let ((anon168_correct  (and (=> (= (ControlFlow 0 656) (- 0 657)) (= (U_2_int (MapType0Select Heap@34 hd@0 data)) (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@0 1))))) (=> (= (U_2_int (MapType0Select Heap@34 hd@0 data)) (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@0 1)))) (and (=> (= (ControlFlow 0 656) 653) anon675_Then_correct) (=> (= (ControlFlow 0 656) 655) anon675_Else_correct))))))
(let ((anon674_Else_correct  (=> (and (not (= (MapType0Select Heap@34 hd@0 next) null)) (= (ControlFlow 0 660) 656)) anon168_correct)))
(let ((anon674_Then_correct  (=> (= (MapType0Select Heap@34 hd@0 next) null) (and (=> (= (ControlFlow 0 658) (- 0 659)) (= index@0 (|Seq#Length| (content Heap@@38 this@@38)))) (=> (= index@0 (|Seq#Length| (content Heap@@38 this@@38))) (=> (= (ControlFlow 0 658) 656) anon168_correct))))))
(let ((anon166_correct  (=> (= Mask@25 (MapType1Store Mask@24 null (lseg (MapType0Select Heap@34 hd@0 next) null) (real_2_U (- (U_2_real (MapType1Select Mask@24 null (lseg (MapType0Select Heap@34 hd@0 next) null))) FullPerm)))) (and (=> (= (ControlFlow 0 661) (- 0 663)) (<= 1 index@0)) (=> (<= 1 index@0) (and (=> (= (ControlFlow 0 661) (- 0 662)) (<= index@0 (|Seq#Length| (content Heap@@38 this@@38)))) (=> (<= index@0 (|Seq#Length| (content Heap@@38 this@@38))) (and (=> (= (ControlFlow 0 661) 658) anon674_Then_correct) (=> (= (ControlFlow 0 661) 660) anon674_Else_correct)))))))))
(let ((anon673_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 666) 661)) anon166_correct)))
(let ((anon673_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 664) (- 0 665)) (<= FullPerm (U_2_real (MapType1Select Mask@24 null (lseg (MapType0Select Heap@34 hd@0 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@24 null (lseg (MapType0Select Heap@34 hd@0 next) null)))) (=> (= (ControlFlow 0 664) 661) anon166_correct))))))
(let ((anon164_correct  (=> (= Mask@24 (MapType1Store Mask@23 hd@0 data (real_2_U (- (U_2_real (MapType1Select Mask@23 hd@0 data)) FullPerm)))) (and (=> (= (ControlFlow 0 667) 664) anon673_Then_correct) (=> (= (ControlFlow 0 667) 666) anon673_Else_correct)))))
(let ((anon672_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 670) 667)) anon164_correct)))
(let ((anon672_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 668) (- 0 669)) (<= FullPerm (U_2_real (MapType1Select Mask@23 hd@0 data)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@23 hd@0 data))) (=> (= (ControlFlow 0 668) 667) anon164_correct))))))
(let ((anon162_correct  (=> (= Mask@23 (MapType1Store Mask@22 hd@0 next (real_2_U (- (U_2_real (MapType1Select Mask@22 hd@0 next)) FullPerm)))) (and (=> (= (ControlFlow 0 671) 668) anon672_Then_correct) (=> (= (ControlFlow 0 671) 670) anon672_Else_correct)))))
(let ((anon671_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 674) 671)) anon162_correct)))
(let ((anon671_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 672) (- 0 673)) (<= FullPerm (U_2_real (MapType1Select Mask@22 hd@0 next)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@22 hd@0 next))) (=> (= (ControlFlow 0 672) 671) anon162_correct))))))
(let ((anon159_correct  (=> (and (state Heap@33 Mask@22) (= Heap@34 Heap@33)) (and (=> (= (ControlFlow 0 676) 672) anon671_Then_correct) (=> (= (ControlFlow 0 676) 674) anon671_Else_correct)))))
(let ((anon670_Else_correct  (=> (= (MapType0Select Heap@29 hd@0 next) null) (=> (and (= Heap@33 Heap@29) (= (ControlFlow 0 678) 676)) anon159_correct))))
(let ((anon670_Then_correct  (=> (not (= (MapType0Select Heap@29 hd@0 next) null)) (=> (and (= Heap@30 (MapType0Store Heap@29 null (|lseg#sm| (MapType0Select Heap@29 hd@0 next) null) (MapType1Store (MapType0Select Heap@29 null (|lseg#sm| (MapType0Select Heap@29 hd@0 next) null)) (MapType0Select Heap@29 hd@0 next) data (bool_2_U true)))) (= Heap@31 (MapType0Store Heap@30 null (|lseg#sm| (MapType0Select Heap@30 hd@0 next) null) (MapType1Store (MapType0Select Heap@30 null (|lseg#sm| (MapType0Select Heap@30 hd@0 next) null)) (MapType0Select Heap@30 hd@0 next) next (bool_2_U true))))) (=> (and (and (forall ((o_44 T@U) (f_48 T@U) ) (! (let ((B@@57 (FieldTypeInv1 (type f_48))))
(let ((A@@58 (FieldTypeInv0 (type f_48))))
 (=> (and (and (= (type o_44) RefType) (= (type f_48) (FieldType A@@58 B@@57))) (or (U_2_bool (MapType1Select (MapType0Select Heap@31 null (|lseg#sm| (MapType0Select Heap@31 hd@0 next) null)) o_44 f_48)) (U_2_bool (MapType1Select (MapType0Select Heap@31 null (|lseg#sm| (MapType0Select Heap@31 (MapType0Select Heap@31 hd@0 next) next) null)) o_44 f_48)))) (U_2_bool (MapType1Select newPMask@9 o_44 f_48)))))
 :qid |stdinbpl.3433:43|
 :skolemid |149|
 :pattern ( (MapType1Select newPMask@9 o_44 f_48))
)) (= Heap@32 (MapType0Store Heap@31 null (|lseg#sm| (MapType0Select Heap@31 hd@0 next) null) newPMask@9))) (and (= Heap@33 Heap@32) (= (ControlFlow 0 677) 676))) anon159_correct)))))
(let ((anon157_correct  (=> (state Heap@29 Mask@22) (and (=> (= (ControlFlow 0 679) 677) anon670_Then_correct) (=> (= (ControlFlow 0 679) 678) anon670_Else_correct)))))
(let ((anon669_Else_correct  (=> (= (MapType0Select Heap@25 hd@0 next) null) (=> (and (= Heap@29 Heap@25) (= (ControlFlow 0 681) 679)) anon157_correct))))
(let ((anon669_Then_correct  (=> (not (= (MapType0Select Heap@25 hd@0 next) null)) (=> (and (= Heap@26 (MapType0Store Heap@25 null (|lseg#sm| (MapType0Select Heap@25 hd@0 next) null) (MapType1Store (MapType0Select Heap@25 null (|lseg#sm| (MapType0Select Heap@25 hd@0 next) null)) (MapType0Select Heap@25 hd@0 next) data (bool_2_U true)))) (= Heap@27 (MapType0Store Heap@26 null (|lseg#sm| (MapType0Select Heap@26 hd@0 next) null) (MapType1Store (MapType0Select Heap@26 null (|lseg#sm| (MapType0Select Heap@26 hd@0 next) null)) (MapType0Select Heap@26 hd@0 next) next (bool_2_U true))))) (=> (and (and (forall ((o_43 T@U) (f_47 T@U) ) (! (let ((B@@58 (FieldTypeInv1 (type f_47))))
(let ((A@@59 (FieldTypeInv0 (type f_47))))
 (=> (and (and (= (type o_43) RefType) (= (type f_47) (FieldType A@@59 B@@58))) (or (U_2_bool (MapType1Select (MapType0Select Heap@27 null (|lseg#sm| (MapType0Select Heap@27 hd@0 next) null)) o_43 f_47)) (U_2_bool (MapType1Select (MapType0Select Heap@27 null (|lseg#sm| (MapType0Select Heap@27 (MapType0Select Heap@27 hd@0 next) next) null)) o_43 f_47)))) (U_2_bool (MapType1Select newPMask@8 o_43 f_47)))))
 :qid |stdinbpl.3420:43|
 :skolemid |148|
 :pattern ( (MapType1Select newPMask@8 o_43 f_47))
)) (= Heap@28 (MapType0Store Heap@27 null (|lseg#sm| (MapType0Select Heap@27 hd@0 next) null) newPMask@8))) (and (= Heap@29 Heap@28) (= (ControlFlow 0 680) 679))) anon157_correct)))))
(let ((anon155_correct  (=> (state UnfoldingHeap@14 UnfoldingMask@14) (and (=> (= (ControlFlow 0 682) 680) anon669_Then_correct) (=> (= (ControlFlow 0 682) 681) anon669_Else_correct)))))
(let ((anon154_correct  (=> (and (and (state UnfoldingHeap@13 UnfoldingMask@13) (= UnfoldingHeap@14 UnfoldingHeap@13)) (and (= UnfoldingMask@14 UnfoldingMask@13) (= (ControlFlow 0 684) 682))) anon155_correct)))
(let ((anon668_Else_correct  (=> (= (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) null) (=> (and (= UnfoldingHeap@13 Heap@25) (= (ControlFlow 0 686) 684)) anon154_correct))))
(let ((anon668_Then_correct  (=> (not (= (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) null)) (=> (and (= UnfoldingHeap@10 (MapType0Store Heap@25 null (|lseg#sm| (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) null) (MapType1Store (MapType0Select Heap@25 null (|lseg#sm| (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) null)) (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) data (bool_2_U true)))) (= UnfoldingHeap@11 (MapType0Store UnfoldingHeap@10 null (|lseg#sm| (MapType0Select UnfoldingHeap@10 (MapType0Select UnfoldingHeap@10 hd@0 next) next) null) (MapType1Store (MapType0Select UnfoldingHeap@10 null (|lseg#sm| (MapType0Select UnfoldingHeap@10 (MapType0Select UnfoldingHeap@10 hd@0 next) next) null)) (MapType0Select UnfoldingHeap@10 (MapType0Select UnfoldingHeap@10 hd@0 next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_42 T@U) (f_46 T@U) ) (! (let ((B@@59 (FieldTypeInv1 (type f_46))))
(let ((A@@60 (FieldTypeInv0 (type f_46))))
 (=> (and (and (= (type o_42) RefType) (= (type f_46) (FieldType A@@60 B@@59))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@11 null (|lseg#sm| (MapType0Select UnfoldingHeap@11 (MapType0Select UnfoldingHeap@11 hd@0 next) next) null)) o_42 f_46)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@11 null (|lseg#sm| (MapType0Select UnfoldingHeap@11 (MapType0Select UnfoldingHeap@11 (MapType0Select UnfoldingHeap@11 hd@0 next) next) next) null)) o_42 f_46)))) (U_2_bool (MapType1Select newPMask@7 o_42 f_46)))))
 :qid |stdinbpl.3405:45|
 :skolemid |147|
 :pattern ( (MapType1Select newPMask@7 o_42 f_46))
)) (= UnfoldingHeap@12 (MapType0Store UnfoldingHeap@11 null (|lseg#sm| (MapType0Select UnfoldingHeap@11 (MapType0Select UnfoldingHeap@11 hd@0 next) next) null) newPMask@7))) (and (= UnfoldingHeap@13 UnfoldingHeap@12) (= (ControlFlow 0 685) 684))) anon154_correct)))))
(let ((anon152_correct  (=> (and (state Unfolding1Heap@4 Unfolding1Mask@4) (=> (not (= (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) null)) (<= (U_2_int (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) data)) (U_2_int (MapType0Select Heap@25 (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) data))))) (and (=> (= (ControlFlow 0 687) 685) anon668_Then_correct) (=> (= (ControlFlow 0 687) 686) anon668_Else_correct)))))
(let ((anon151_correct  (=> (and (and (state Unfolding1Heap@3 Unfolding1Mask@3) (= Unfolding1Heap@4 Unfolding1Heap@3)) (and (= Unfolding1Mask@4 Unfolding1Mask@3) (= (ControlFlow 0 689) 687))) anon152_correct)))
(let ((anon667_Else_correct  (=> (= (MapType0Select Heap@25 (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) next) null) (=> (and (= Unfolding1Heap@3 Heap@25) (= (ControlFlow 0 691) 689)) anon151_correct))))
(let ((anon667_Then_correct  (=> (not (= (MapType0Select Heap@25 (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) next) null)) (=> (and (= Unfolding1Heap@0 (MapType0Store Heap@25 null (|lseg#sm| (MapType0Select Heap@25 (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) next) null) (MapType1Store (MapType0Select Heap@25 null (|lseg#sm| (MapType0Select Heap@25 (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) next) null)) (MapType0Select Heap@25 (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) next) data (bool_2_U true)))) (= Unfolding1Heap@1 (MapType0Store Unfolding1Heap@0 null (|lseg#sm| (MapType0Select Unfolding1Heap@0 (MapType0Select Unfolding1Heap@0 (MapType0Select Unfolding1Heap@0 hd@0 next) next) next) null) (MapType1Store (MapType0Select Unfolding1Heap@0 null (|lseg#sm| (MapType0Select Unfolding1Heap@0 (MapType0Select Unfolding1Heap@0 (MapType0Select Unfolding1Heap@0 hd@0 next) next) next) null)) (MapType0Select Unfolding1Heap@0 (MapType0Select Unfolding1Heap@0 (MapType0Select Unfolding1Heap@0 hd@0 next) next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_41 T@U) (f_45 T@U) ) (! (let ((B@@60 (FieldTypeInv1 (type f_45))))
(let ((A@@61 (FieldTypeInv0 (type f_45))))
 (=> (and (and (= (type o_41) RefType) (= (type f_45) (FieldType A@@61 B@@60))) (or (U_2_bool (MapType1Select (MapType0Select Unfolding1Heap@1 null (|lseg#sm| (MapType0Select Unfolding1Heap@1 (MapType0Select Unfolding1Heap@1 (MapType0Select Unfolding1Heap@1 hd@0 next) next) next) null)) o_41 f_45)) (U_2_bool (MapType1Select (MapType0Select Unfolding1Heap@1 null (|lseg#sm| (MapType0Select Unfolding1Heap@1 (MapType0Select Unfolding1Heap@1 (MapType0Select Unfolding1Heap@1 (MapType0Select Unfolding1Heap@1 hd@0 next) next) next) next) null)) o_41 f_45)))) (U_2_bool (MapType1Select newPMask@6 o_41 f_45)))))
 :qid |stdinbpl.3389:49|
 :skolemid |146|
 :pattern ( (MapType1Select newPMask@6 o_41 f_45))
)) (= Unfolding1Heap@2 (MapType0Store Unfolding1Heap@1 null (|lseg#sm| (MapType0Select Unfolding1Heap@1 (MapType0Select Unfolding1Heap@1 (MapType0Select Unfolding1Heap@1 hd@0 next) next) next) null) newPMask@6))) (and (= Unfolding1Heap@3 Unfolding1Heap@2) (= (ControlFlow 0 690) 689))) anon151_correct)))))
(let ((anon666_Then_correct  (=> (not (= (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) null)) (=> (and (not (= (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) null)) (= Unfolding1Mask@1 (MapType1Store Unfolding1Mask@0 (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) data (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@0 (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) data)) FullPerm))))) (=> (and (and (and (state Heap@25 Unfolding1Mask@1) (not (= (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) null))) (and (= Unfolding1Mask@2 (MapType1Store Unfolding1Mask@1 (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) next (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@1 (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) next)) FullPerm)))) (state Heap@25 Unfolding1Mask@2))) (and (and (= Unfolding1Mask@3 (MapType1Store Unfolding1Mask@2 null (lseg (MapType0Select Heap@25 (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) next) null) (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@2 null (lseg (MapType0Select Heap@25 (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) null) (MapType0Select Heap@25 null (lseg (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) null)) (lseg (MapType0Select Heap@25 (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) next) null) (MapType0Select Heap@25 null (lseg (MapType0Select Heap@25 (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) next) null)))) (and (state Heap@25 Unfolding1Mask@3) (=> (not (= (MapType0Select Heap@25 (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) next) null)) (<= (U_2_int (MapType0Select Heap@25 (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) data)) (U_2_int (MapType0Select Heap@25 (MapType0Select Heap@25 (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) next) data))))))) (and (=> (= (ControlFlow 0 692) 690) anon667_Then_correct) (=> (= (ControlFlow 0 692) 691) anon667_Else_correct)))))))
(let ((anon666_Else_correct  (=> (and (and (= (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) null) (= Unfolding1Heap@4 Heap@25)) (and (= Unfolding1Mask@4 Unfolding1Mask@0) (= (ControlFlow 0 688) 687))) anon152_correct)))
(let ((anon665_Then_correct  (=> (not (= (MapType0Select Heap@25 hd@0 next) null)) (=> (and (and (not (= (MapType0Select Heap@25 hd@0 next) null)) (= UnfoldingMask@11 (MapType1Store UnfoldingMask@10 (MapType0Select Heap@25 hd@0 next) data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@10 (MapType0Select Heap@25 hd@0 next) data)) FullPerm))))) (and (state Heap@25 UnfoldingMask@11) (not (= (MapType0Select Heap@25 hd@0 next) null)))) (=> (and (and (and (= UnfoldingMask@12 (MapType1Store UnfoldingMask@11 (MapType0Select Heap@25 hd@0 next) next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@11 (MapType0Select Heap@25 hd@0 next) next)) FullPerm)))) (state Heap@25 UnfoldingMask@12)) (and (= UnfoldingMask@13 (MapType1Store UnfoldingMask@12 null (lseg (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@12 null (lseg (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@25 hd@0 next) null) (MapType0Select Heap@25 null (lseg (MapType0Select Heap@25 hd@0 next) null)) (lseg (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) null) (MapType0Select Heap@25 null (lseg (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) null))))) (and (and (state Heap@25 UnfoldingMask@13) (|lseg#trigger| Heap@25 (lseg (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) null))) (and (= (MapType0Select Heap@25 null (lseg (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@25 (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@25 (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) next)) (MapType0Select Heap@25 null (lseg (MapType0Select Heap@25 (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) next) null)))) EmptyFrame))) (= Unfolding1Mask@0 (MapType1Store UnfoldingMask@13 null (lseg (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) null) (real_2_U (- (U_2_real (MapType1Select UnfoldingMask@13 null (lseg (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) null))) FullPerm))))))) (and (=> (= (ControlFlow 0 693) 692) anon666_Then_correct) (=> (= (ControlFlow 0 693) 688) anon666_Else_correct)))))))
(let ((anon665_Else_correct  (=> (and (and (= (MapType0Select Heap@25 hd@0 next) null) (= UnfoldingHeap@14 Heap@25)) (and (= UnfoldingMask@14 UnfoldingMask@10) (= (ControlFlow 0 683) 682))) anon155_correct)))
(let ((anon147_correct  (=> (= UnfoldingMask@10 (MapType1Store Mask@22 null (lseg (MapType0Select Heap@25 hd@0 next) null) (real_2_U (- (U_2_real (MapType1Select Mask@22 null (lseg (MapType0Select Heap@25 hd@0 next) null))) FullPerm)))) (and (=> (= (ControlFlow 0 694) 693) anon665_Then_correct) (=> (= (ControlFlow 0 694) 683) anon665_Else_correct)))))
(let ((anon664_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 697) 694)) anon147_correct)))
(let ((anon664_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 695) (- 0 696)) (<= FullPerm (U_2_real (MapType1Select Mask@22 null (lseg (MapType0Select Heap@25 hd@0 next) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@22 null (lseg (MapType0Select Heap@25 hd@0 next) null)))) (=> (= (ControlFlow 0 695) 694) anon147_correct))))))
(let ((anon663_Then_correct  (=> (not (= (MapType0Select Heap@25 hd@0 next) null)) (=> (and (|lseg#trigger| Heap@25 (lseg (MapType0Select Heap@25 hd@0 next) null)) (= (MapType0Select Heap@25 null (lseg (MapType0Select Heap@25 hd@0 next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@25 hd@0 next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next)) (MapType0Select Heap@25 null (lseg (MapType0Select Heap@25 (MapType0Select Heap@25 hd@0 next) next) null)))) EmptyFrame)))) (and (=> (= (ControlFlow 0 698) 695) anon664_Then_correct) (=> (= (ControlFlow 0 698) 697) anon664_Else_correct))))))
(let ((anon663_Else_correct  (=> (and (= (MapType0Select Heap@25 hd@0 next) null) (= Heap@34 Heap@25)) (and (=> (= (ControlFlow 0 675) 672) anon671_Then_correct) (=> (= (ControlFlow 0 675) 674) anon671_Else_correct)))))
(let ((anon144_correct  (and (=> (= (ControlFlow 0 699) (- 0 700)) (=> (and (and b_1_1@12 b_1_1@12) b_2_1@6) (|Seq#Equal| (contentNodes ResultHeap hd@0 null) (|Seq#Append| (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@0 1)) 0) (contentNodes Ops_1Heap@3 hd@0 null))))) (=> (=> (and (and b_1_1@12 b_1_1@12) b_2_1@6) (|Seq#Equal| (contentNodes ResultHeap hd@0 null) (|Seq#Append| (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@0 1)) 0) (contentNodes Ops_1Heap@3 hd@0 null)))) (=> (state Heap@25 Mask@21) (=> (and (and (= Mask@22 (MapType1Store Mask@21 null (wand hd@0 null FullPerm hd@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@0 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@0 1)) 0) hd@0 null) (real_2_U (+ (U_2_real (MapType1Select Mask@21 null (wand hd@0 null FullPerm hd@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@0 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@0 1)) 0) hd@0 null))) FullPerm)))) (state Heap@25 Mask@22)) (and (state Heap@25 Mask@22) (state Heap@25 Mask@22))) (and (=> (= (ControlFlow 0 699) 698) anon663_Then_correct) (=> (= (ControlFlow 0 699) 675) anon663_Else_correct))))))))
(let ((anon656_Then_correct  (=> b_1_1@12 (and (and (and (and (and (and (=> (= (ControlFlow 0 715) 699) anon144_correct) (=> (= (ControlFlow 0 715) 712) anon662_Then_correct)) (=> (= (ControlFlow 0 715) 714) anon662_Else_correct)) (=> (= (ControlFlow 0 715) 708) anon660_Then_correct)) (=> (= (ControlFlow 0 715) 710) anon660_Else_correct)) (=> (= (ControlFlow 0 715) 704) anon658_Then_correct)) (=> (= (ControlFlow 0 715) 706) anon658_Else_correct)))))
(let ((anon656_Else_correct  (=> (and (not b_1_1@12) (= (ControlFlow 0 702) 699)) anon144_correct)))
(let ((anon655_Then_correct  (=> (and (and b_1_1@12 b_1_1@12) b_2_1@6) (and (=> (= (ControlFlow 0 716) 715) anon656_Then_correct) (=> (= (ControlFlow 0 716) 702) anon656_Else_correct)))))
(let ((anon655_Else_correct  (=> (and (not (and (and b_1_1@12 b_1_1@12) b_2_1@6)) (= (ControlFlow 0 701) 699)) anon144_correct)))
(let ((anon130_correct  (and (=> (= (ControlFlow 0 717) (- 0 718)) (=> (and (and b_1_1@11 b_1_1@11) b_2_1@6) (and (= neededTransfer@3 0.0) (= (U_2_real (MapType1Select Used_1Mask@3 null (lseg hd@0 null))) initNeededTransfer@0)))) (=> (=> (and (and b_1_1@11 b_1_1@11) b_2_1@6) (and (= neededTransfer@3 0.0) (= (U_2_real (MapType1Select Used_1Mask@3 null (lseg hd@0 null))) initNeededTransfer@0))) (=> (and (= b_3@0  (and b_1_1@11 b_2_1@6)) (= b_3@1  (and b_3@0 (state ResultHeap ResultMask@@0)))) (=> (and (and (= b_3@2  (and b_3@1 (sumMask ResultMask@@0 Ops_1Mask@7 Used_1Mask@3))) (= b_3@3  (and (and b_3@2 (IdenticalOnKnownLocations Ops_1Heap@3 ResultHeap Ops_1Mask@7)) (IdenticalOnKnownLocations Used_1Heap@0 ResultHeap Used_1Mask@3)))) (and (= b_3@4  (and b_3@3 (state ResultHeap ResultMask@@0))) (= b_1_1@12  (and b_1_1@11 b_3@4)))) (and (=> (= (ControlFlow 0 717) 716) anon655_Then_correct) (=> (= (ControlFlow 0 717) 701) anon655_Else_correct))))))))
(let ((anon654_Else_correct  (=> (>= 0.0 takeTransfer@1) (=> (and (= Heap@25 Heap@23) (= Mask@21 Mask@19)) (=> (and (and (= neededTransfer@3 neededTransfer@1) (= b_2_1@6 b_2_1@3)) (and (= Used_1Mask@3 Used_1Mask@1) (= (ControlFlow 0 721) 717))) anon130_correct)))))
(let ((anon654_Then_correct  (=> (> takeTransfer@1 0.0) (=> (and (= neededTransfer@2 (- neededTransfer@1 takeTransfer@1)) (= Used_1Mask@2 (MapType1Store Used_1Mask@1 null (lseg hd@0 null) (real_2_U (+ (U_2_real (MapType1Select Used_1Mask@1 null (lseg hd@0 null))) takeTransfer@1))))) (=> (and (and (= b_2_1@4  (and b_2_1@3 (state Used_1Heap@0 Used_1Mask@2))) (= TempMask@1 (MapType1Store ZeroMask null (lseg hd@0 null) (real_2_U FullPerm)))) (and (= b_2_1@5  (and b_2_1@4 (IdenticalOnKnownLocations Heap@23 Used_1Heap@0 TempMask@1))) (= Mask@20 (MapType1Store Mask@19 null (lseg hd@0 null) (real_2_U (- (U_2_real (MapType1Select Mask@19 null (lseg hd@0 null))) takeTransfer@1)))))) (=> (and (and (and (forall ((o_40 T@U) (f_44 T@U) ) (! (let ((B@@61 (FieldTypeInv1 (type f_44))))
(let ((A@@62 (FieldTypeInv0 (type f_44))))
 (=> (and (and (= (type o_40) RefType) (= (type f_44) (FieldType A@@62 B@@61))) (or (U_2_bool (MapType1Select (MapType0Select Heap@23 null (|wand#sm| hd@0 null FullPerm hd@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@0 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@0 1)) 0) hd@0 null)) o_40 f_44)) (U_2_bool (MapType1Select (MapType0Select Heap@23 null (|lseg#sm| hd@0 null)) o_40 f_44)))) (U_2_bool (MapType1Select newPMask@5 o_40 f_44)))))
 :qid |stdinbpl.3244:39|
 :skolemid |145|
 :pattern ( (MapType1Select newPMask@5 o_40 f_44))
)) (= Heap@24 (MapType0Store Heap@23 null (|wand#sm| hd@0 null FullPerm hd@0 null 0 (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@0 1))) hd@0 null FullPerm hd@0 null (|Seq#Drop| (|Seq#Take| (content Heap@@38 this@@38) (- index@0 1)) 0) hd@0 null) newPMask@5))) (and (= Heap@25 Heap@24) (= Mask@21 Mask@20))) (and (and (= neededTransfer@3 neededTransfer@2) (= b_2_1@6 b_2_1@5)) (and (= Used_1Mask@3 Used_1Mask@2) (= (ControlFlow 0 720) 717)))) anon130_correct))))))
(let ((anon653_Else_correct  (=> (and (< maskTransfer@1 neededTransfer@1) (= takeTransfer@1 maskTransfer@1)) (and (=> (= (ControlFlow 0 723) 720) anon654_Then_correct) (=> (= (ControlFlow 0 723) 721) anon654_Else_correct)))))
(let ((anon653_Then_correct  (=> (and (<= neededTransfer@1 maskTransfer@1) (= takeTransfer@1 neededTransfer@1)) (and (=> (= (ControlFlow 0 722) 720) anon654_Then_correct) (=> (= (ControlFlow 0 722) 721) anon654_Else_correct)))))
(let ((anon652_Then_correct  (=> (and (and (and (and (and b_1_1@11 b_1_1@11) b_2_1@3) true) (> neededTransfer@1 0.0)) (= maskTransfer@1 (U_2_real (MapType1Select Mask@19 null (lseg hd@0 null))))) (and (=> (= (ControlFlow 0 724) 722) anon653_Then_correct) (=> (= (ControlFlow 0 724) 723) anon653_Else_correct)))))
(let ((anon652_Else_correct  (=> (not (and (and (and (and b_1_1@11 b_1_1@11) b_2_1@3) true) (> neededTransfer@1 0.0))) (=> (and (= Heap@25 Heap@23) (= Mask@21 Mask@19)) (=> (and (and (= neededTransfer@3 neededTransfer@1) (= b_2_1@6 b_2_1@3)) (and (= Used_1Mask@3 Used_1Mask@1) (= (ControlFlow 0 719) 717))) anon130_correct)))))
(let ((anon651_Else_correct  (=> (>= 0.0 takeTransfer@0) (=> (and (and (= Ops_1Mask@7 Ops_1Mask@5) (= Used_1Mask@1 ZeroMask)) (and (= b_2_1@3 b_2_1@0) (= neededTransfer@1 FullPerm))) (and (=> (= (ControlFlow 0 727) 724) anon652_Then_correct) (=> (= (ControlFlow 0 727) 719) anon652_Else_correct))))))
(let ((anon651_Then_correct  (=> (> takeTransfer@0 0.0) (=> (and (= neededTransfer@0 (- FullPerm takeTransfer@0)) (= Used_1Mask@0 (MapType1Store ZeroMask null (lseg hd@0 null) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (lseg hd@0 null))) takeTransfer@0))))) (=> (and (and (and (= b_2_1@1  (and b_2_1@0 (state Used_1Heap@0 Used_1Mask@0))) (= TempMask@0 (MapType1Store ZeroMask null (lseg hd@0 null) (real_2_U FullPerm)))) (and (= b_2_1@2  (and b_2_1@1 (IdenticalOnKnownLocations Ops_1Heap@3 Used_1Heap@0 TempMask@0))) (= Ops_1Mask@6 (MapType1Store Ops_1Mask@5 null (lseg hd@0 null) (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@5 null (lseg hd@0 null))) takeTransfer@0)))))) (and (and (= Ops_1Mask@7 Ops_1Mask@6) (= Used_1Mask@1 Used_1Mask@0)) (and (= b_2_1@3 b_2_1@2) (= neededTransfer@1 neededTransfer@0)))) (and (=> (= (ControlFlow 0 726) 724) anon652_Then_correct) (=> (= (ControlFlow 0 726) 719) anon652_Else_correct)))))))
(let ((anon650_Else_correct  (=> (and (< maskTransfer@0 FullPerm) (= takeTransfer@0 maskTransfer@0)) (and (=> (= (ControlFlow 0 729) 726) anon651_Then_correct) (=> (= (ControlFlow 0 729) 727) anon651_Else_correct)))))
(let ((anon650_Then_correct  (=> (and (<= FullPerm maskTransfer@0) (= takeTransfer@0 FullPerm)) (and (=> (= (ControlFlow 0 728) 726) anon651_Then_correct) (=> (= (ControlFlow 0 728) 727) anon651_Else_correct)))))
(let ((anon649_Then_correct  (=> (and (and (and (and (and b_1_1@11 b_1_1@11) b_2_1@0) true) (> FullPerm 0.0)) (= maskTransfer@0 (U_2_real (MapType1Select Ops_1Mask@5 null (lseg hd@0 null))))) (and (=> (= (ControlFlow 0 730) 728) anon650_Then_correct) (=> (= (ControlFlow 0 730) 729) anon650_Else_correct)))))
(let ((anon649_Else_correct  (=> (not (and (and (and (and b_1_1@11 b_1_1@11) b_2_1@0) true) (> FullPerm 0.0))) (=> (and (and (= Ops_1Mask@7 Ops_1Mask@5) (= Used_1Mask@1 ZeroMask)) (and (= b_2_1@3 b_2_1@0) (= neededTransfer@1 FullPerm))) (and (=> (= (ControlFlow 0 725) 724) anon652_Then_correct) (=> (= (ControlFlow 0 725) 719) anon652_Else_correct))))))
(let ((anon118_correct  (=> (and (and (= b_1_1@10  (and b_1_1@9 (state Ops_1Heap@3 Ops_1Mask@5))) (= b_1_1@11  (and b_1_1@10 (state Ops_1Heap@3 Ops_1Mask@5)))) (and (= b_2_1@0  (and b_2_1 (state Used_1Heap@0 ZeroMask))) (= initNeededTransfer@0 (+ (U_2_real (MapType1Select ZeroMask null (lseg hd@0 null))) FullPerm)))) (and (=> (= (ControlFlow 0 731) (- 0 732)) (>= FullPerm 0.0)) (=> (>= FullPerm 0.0) (and (=> (= (ControlFlow 0 731) 730) anon649_Then_correct) (=> (= (ControlFlow 0 731) 725) anon649_Else_correct)))))))
(let ((anon117_correct  (=> (= b_1_1@8  (and b_1_1@7 (= (U_2_int (|Seq#Index| (contentNodes Ops_1Heap@2 hd@0 null) 0)) (U_2_int (|Seq#Index| (content Heap@@38 this@@38) (- index@0 1)))))) (=> (and (and (= b_1_1@9 b_1_1@8) (= Ops_1Mask@5 Ops_1Mask@4)) (and (= Ops_1Heap@3 Ops_1Heap@2) (= (ControlFlow 0 735) 731))) anon118_correct))))
(let ((anon116_correct  (and (=> (= (ControlFlow 0 737) (- 0 739)) (>= (- index@0 1) 0)) (=> (>= (- index@0 1) 0) (and (=> (= (ControlFlow 0 737) (- 0 738)) (< (- index@0 1) (|Seq#Length| (content Heap@@38 this@@38)))) (=> (< (- index@0 1) (|Seq#Length| (content Heap@@38 this@@38))) (=> (and (and (= Ops_1Mask@4 Ops_1Mask@3) (= b_1_1@7 b_1_1@6)) (and (= Ops_1Heap@2 Ops_1Heap@1) (= (ControlFlow 0 737) 735))) anon117_correct)))))))
(let ((anon115_correct  (=> (and (= b_1_1@6 false) (= (ControlFlow 0 741) 737)) anon116_correct)))
(let ((anon648_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 744) 741)) anon115_correct)))
(let ((anon648_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 742) (- 0 743)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38)))) (=> (= (ControlFlow 0 742) 741) anon115_correct))))))
(let ((anon647_Else_correct  (=> (and (= b_1_1@6 b_1_1@5) (= (ControlFlow 0 740) 737)) anon116_correct)))
(let ((anon112_correct  (and (=> (= (ControlFlow 0 745) (- 0 746)) (< 0 (|Seq#Length| (contentNodes Ops_1Heap@1 hd@0 null)))) (=> (< 0 (|Seq#Length| (contentNodes Ops_1Heap@1 hd@0 null))) (and (and (=> (= (ControlFlow 0 745) 740) anon647_Else_correct) (=> (= (ControlFlow 0 745) 742) anon648_Then_correct)) (=> (= (ControlFlow 0 745) 744) anon648_Else_correct))))))
(let ((anon111_correct  (=> (and (= Ops_1Mask@2 (MapType1Store Ops_1Mask@1 null (lseg hd@0 null) (real_2_U (- (U_2_real (MapType1Select Ops_1Mask@1 null (lseg hd@0 null))) FullPerm)))) (= b_1_1@4  (and b_1_1@3 (IdenticalOnKnownLocations Ops_1Heap@0 ExhaleHeap@0 Ops_1Mask@2)))) (=> (and (and (= Ops_1Heap@1 ExhaleHeap@0) (= b_1_1@5 false)) (and (= Ops_1Mask@3 Ops_1Mask@2) (= (ControlFlow 0 748) 745))) anon112_correct))))
(let ((anon646_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 751) 748)) anon111_correct)))
(let ((anon646_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 749) (- 0 750)) (<= FullPerm (U_2_real (MapType1Select Ops_1Mask@1 null (lseg hd@0 null))))) (=> (<= FullPerm (U_2_real (MapType1Select Ops_1Mask@1 null (lseg hd@0 null)))) (=> (= (ControlFlow 0 749) 748) anon111_correct))))))
(let ((anon645_Else_correct  (=> (and (and (= Ops_1Heap@1 Ops_1Heap@0) (= b_1_1@5 b_1_1@3)) (and (= Ops_1Mask@3 Ops_1Mask@1) (= (ControlFlow 0 747) 745))) anon112_correct)))
(let ((anon644_Then_correct  (=> b_1_1@3 (and (and (=> (= (ControlFlow 0 752) 747) anon645_Else_correct) (=> (= (ControlFlow 0 752) 749) anon646_Then_correct)) (=> (= (ControlFlow 0 752) 751) anon646_Else_correct)))))
(let ((anon644_Else_correct  (=> (not b_1_1@3) (=> (and (and (= Ops_1Mask@4 Ops_1Mask@1) (= b_1_1@7 b_1_1@3)) (and (= Ops_1Heap@2 Ops_1Heap@0) (= (ControlFlow 0 736) 735))) anon117_correct))))
(let ((anon643_Then_correct  (=> (and b_1_1@2 (= b_1_1@3  (and b_1_1@2 (state Ops_1Heap@0 Ops_1Mask@1)))) (and (=> (= (ControlFlow 0 753) 752) anon644_Then_correct) (=> (= (ControlFlow 0 753) 736) anon644_Else_correct)))))
(let ((anon643_Else_correct  (=> (not b_1_1@2) (=> (and (and (= b_1_1@9 b_1_1@2) (= Ops_1Mask@5 Ops_1Mask@1)) (and (= Ops_1Heap@3 Ops_1Heap@0) (= (ControlFlow 0 734) 731))) anon118_correct))))
(let ((anon642_Else_correct  (=> (not b_1_1@0) (=> (and (= Ops_1Mask@1 ZeroMask) (= b_1_1@2 b_1_1@0)) (and (=> (= (ControlFlow 0 755) 753) anon643_Then_correct) (=> (= (ControlFlow 0 755) 734) anon643_Else_correct))))))
(let ((anon642_Then_correct  (=> b_1_1@0 (=> (and (and (= Ops_1Mask@0 (MapType1Store ZeroMask null (lseg hd@0 null) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (lseg hd@0 null))) FullPerm)))) (= b_1_1@1  (and b_1_1@0 (state Ops_1Heap@0 Ops_1Mask@0)))) (and (= Ops_1Mask@1 Ops_1Mask@0) (= b_1_1@2 b_1_1@1))) (and (=> (= (ControlFlow 0 754) 753) anon643_Then_correct) (=> (= (ControlFlow 0 754) 734) anon643_Else_correct))))))
(let ((anon641_Then_correct  (=> b_1_1@0 (and (=> (= (ControlFlow 0 756) 754) anon642_Then_correct) (=> (= (ControlFlow 0 756) 755) anon642_Else_correct)))))
(let ((anon641_Else_correct  (=> (not b_1_1@0) (=> (and (and (= b_1_1@9 b_1_1@0) (= Ops_1Mask@5 ZeroMask)) (and (= Ops_1Heap@3 Ops_1Heap@0) (= (ControlFlow 0 733) 731))) anon118_correct))))
(let ((anon103_correct  (=> (and (state Heap@23 Mask@19) (state Heap@23 Mask@19)) (=> (and (and (= index@0 (+ 0 1)) (state Heap@23 Mask@19)) (and (= b_1_1@0  (and b_1_1 (state Ops_1Heap@0 ZeroMask))) (= b_2@0  (and b_2 (state UsedHeap@0 ZeroMask))))) (and (=> (= (ControlFlow 0 757) 756) anon641_Then_correct) (=> (= (ControlFlow 0 757) 733) anon641_Else_correct))))))
(let ((anon640_Else_correct  (=> (= (MapType0Select Heap@19 this@@38 head) hd@0) (=> (and (= Heap@23 Heap@19) (= (ControlFlow 0 759) 757)) anon103_correct))))
(let ((anon640_Then_correct  (=> (not (= (MapType0Select Heap@19 this@@38 head) hd@0)) (=> (and (= Heap@20 (MapType0Store Heap@19 null (|lseg#sm| (MapType0Select Heap@19 this@@38 head) hd@0) (MapType1Store (MapType0Select Heap@19 null (|lseg#sm| (MapType0Select Heap@19 this@@38 head) hd@0)) (MapType0Select Heap@19 this@@38 head) data (bool_2_U true)))) (= Heap@21 (MapType0Store Heap@20 null (|lseg#sm| (MapType0Select Heap@20 this@@38 head) hd@0) (MapType1Store (MapType0Select Heap@20 null (|lseg#sm| (MapType0Select Heap@20 this@@38 head) hd@0)) (MapType0Select Heap@20 this@@38 head) next (bool_2_U true))))) (=> (and (and (forall ((o_39 T@U) (f_43 T@U) ) (! (let ((B@@62 (FieldTypeInv1 (type f_43))))
(let ((A@@63 (FieldTypeInv0 (type f_43))))
 (=> (and (and (= (type o_39) RefType) (= (type f_43) (FieldType A@@63 B@@62))) (or (U_2_bool (MapType1Select (MapType0Select Heap@21 null (|lseg#sm| (MapType0Select Heap@21 this@@38 head) hd@0)) o_39 f_43)) (U_2_bool (MapType1Select (MapType0Select Heap@21 null (|lseg#sm| (MapType0Select Heap@21 (MapType0Select Heap@21 this@@38 head) next) hd@0)) o_39 f_43)))) (U_2_bool (MapType1Select newPMask@4 o_39 f_43)))))
 :qid |stdinbpl.3105:33|
 :skolemid |144|
 :pattern ( (MapType1Select newPMask@4 o_39 f_43))
)) (= Heap@22 (MapType0Store Heap@21 null (|lseg#sm| (MapType0Select Heap@21 this@@38 head) hd@0) newPMask@4))) (and (= Heap@23 Heap@22) (= (ControlFlow 0 758) 757))) anon103_correct)))))
(let ((anon639_Else_correct  (=> (and (HasDirectPerm Mask@19 null (lseg (MapType0Select Heap@16 this@@38 head) hd@0)) (= Heap@19 Heap@16)) (and (=> (= (ControlFlow 0 761) 758) anon640_Then_correct) (=> (= (ControlFlow 0 761) 759) anon640_Else_correct)))))
(let ((anon639_Then_correct  (=> (and (and (not (HasDirectPerm Mask@19 null (lseg (MapType0Select Heap@16 this@@38 head) hd@0))) (= Heap@17 (MapType0Store Heap@16 null (|lseg#sm| (MapType0Select Heap@16 this@@38 head) hd@0) ZeroPMask))) (and (= Heap@18 (MapType0Store Heap@17 null (lseg (MapType0Select Heap@17 this@@38 head) hd@0) freshVersion@0)) (= Heap@19 Heap@18))) (and (=> (= (ControlFlow 0 760) 758) anon640_Then_correct) (=> (= (ControlFlow 0 760) 759) anon640_Else_correct)))))
(let ((anon99_correct  (=> (and (state Heap@16 Mask@18) (= Mask@19 (MapType1Store Mask@18 null (lseg (MapType0Select Heap@16 this@@38 head) hd@0) (real_2_U (+ (U_2_real (MapType1Select Mask@18 null (lseg (MapType0Select Heap@16 this@@38 head) hd@0))) FullPerm))))) (=> (and (and (state Heap@16 Mask@19) (state Heap@16 Mask@19)) (and (|lseg#trigger| Heap@16 (lseg (MapType0Select Heap@16 this@@38 head) hd@0)) (= (MapType0Select Heap@16 null (lseg (MapType0Select Heap@16 this@@38 head) hd@0)) (FrameFragment (ite (not (= (MapType0Select Heap@16 this@@38 head) hd@0)) (CombineFrames (FrameFragment (MapType0Select Heap@16 (MapType0Select Heap@16 this@@38 head) data)) (CombineFrames (FrameFragment (MapType0Select Heap@16 (MapType0Select Heap@16 this@@38 head) next)) (MapType0Select Heap@16 null (lseg (MapType0Select Heap@16 (MapType0Select Heap@16 this@@38 head) next) hd@0)))) EmptyFrame))))) (and (=> (= (ControlFlow 0 762) 760) anon639_Then_correct) (=> (= (ControlFlow 0 762) 761) anon639_Else_correct))))))
(let ((anon638_Else_correct  (=> (= (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) hd@0) (=> (and (= Heap@16 Heap@9) (= (ControlFlow 0 764) 762)) anon99_correct))))
(let ((anon638_Then_correct  (=> (not (= (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) hd@0)) (=> (and (= Heap@13 (MapType0Store Heap@9 null (|lseg#sm| (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) hd@0) (MapType1Store (MapType0Select Heap@9 null (|lseg#sm| (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) hd@0)) (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) data (bool_2_U true)))) (= Heap@14 (MapType0Store Heap@13 null (|lseg#sm| (MapType0Select Heap@13 (MapType0Select Heap@13 this@@38 head) next) hd@0) (MapType1Store (MapType0Select Heap@13 null (|lseg#sm| (MapType0Select Heap@13 (MapType0Select Heap@13 this@@38 head) next) hd@0)) (MapType0Select Heap@13 (MapType0Select Heap@13 this@@38 head) next) next (bool_2_U true))))) (=> (and (and (forall ((o_38 T@U) (f_42 T@U) ) (! (let ((B@@63 (FieldTypeInv1 (type f_42))))
(let ((A@@64 (FieldTypeInv0 (type f_42))))
 (=> (and (and (= (type o_38) RefType) (= (type f_42) (FieldType A@@64 B@@63))) (or (U_2_bool (MapType1Select (MapType0Select Heap@14 null (|lseg#sm| (MapType0Select Heap@14 (MapType0Select Heap@14 this@@38 head) next) hd@0)) o_38 f_42)) (U_2_bool (MapType1Select (MapType0Select Heap@14 null (|lseg#sm| (MapType0Select Heap@14 (MapType0Select Heap@14 (MapType0Select Heap@14 this@@38 head) next) next) hd@0)) o_38 f_42)))) (U_2_bool (MapType1Select newPMask@3 o_38 f_42)))))
 :qid |stdinbpl.3083:35|
 :skolemid |143|
 :pattern ( (MapType1Select newPMask@3 o_38 f_42))
)) (= Heap@15 (MapType0Store Heap@14 null (|lseg#sm| (MapType0Select Heap@14 (MapType0Select Heap@14 this@@38 head) next) hd@0) newPMask@3))) (and (= Heap@16 Heap@15) (= (ControlFlow 0 763) 762))) anon99_correct)))))
(let ((anon637_Else_correct  (=> (and (= (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) hd@0) (= Mask@18 Mask@17)) (and (=> (= (ControlFlow 0 768) 763) anon638_Then_correct) (=> (= (ControlFlow 0 768) 764) anon638_Else_correct)))))
(let ((anon637_Then_correct  (=> (not (= (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) hd@0)) (and (=> (= (ControlFlow 0 766) (- 0 767)) (<= (U_2_int (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) data)) (U_2_int (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) data)))) (=> (<= (U_2_int (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) data)) (U_2_int (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) data))) (=> (= Mask@18 Mask@17) (and (=> (= (ControlFlow 0 766) 763) anon638_Then_correct) (=> (= (ControlFlow 0 766) 764) anon638_Else_correct))))))))
(let ((anon95_correct  (=> (state UnfoldingHeap@9 UnfoldingMask@9) (and (=> (= (ControlFlow 0 769) 766) anon637_Then_correct) (=> (= (ControlFlow 0 769) 768) anon637_Else_correct)))))
(let ((anon94_correct  (=> (and (and (state UnfoldingHeap@8 UnfoldingMask@8) (= UnfoldingHeap@9 UnfoldingHeap@8)) (and (= UnfoldingMask@9 UnfoldingMask@8) (= (ControlFlow 0 771) 769))) anon95_correct)))
(let ((anon636_Else_correct  (=> (= (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next) hd@0) (=> (and (= UnfoldingHeap@8 Heap@9) (= (ControlFlow 0 773) 771)) anon94_correct))))
(let ((anon636_Then_correct  (=> (not (= (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next) hd@0)) (=> (and (= UnfoldingHeap@5 (MapType0Store Heap@9 null (|lseg#sm| (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next) hd@0) (MapType1Store (MapType0Select Heap@9 null (|lseg#sm| (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next) hd@0)) (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next) data (bool_2_U true)))) (= UnfoldingHeap@6 (MapType0Store UnfoldingHeap@5 null (|lseg#sm| (MapType0Select UnfoldingHeap@5 (MapType0Select UnfoldingHeap@5 (MapType0Select UnfoldingHeap@5 this@@38 head) next) next) hd@0) (MapType1Store (MapType0Select UnfoldingHeap@5 null (|lseg#sm| (MapType0Select UnfoldingHeap@5 (MapType0Select UnfoldingHeap@5 (MapType0Select UnfoldingHeap@5 this@@38 head) next) next) hd@0)) (MapType0Select UnfoldingHeap@5 (MapType0Select UnfoldingHeap@5 (MapType0Select UnfoldingHeap@5 this@@38 head) next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_37 T@U) (f_41 T@U) ) (! (let ((B@@64 (FieldTypeInv1 (type f_41))))
(let ((A@@65 (FieldTypeInv0 (type f_41))))
 (=> (and (and (= (type o_37) RefType) (= (type f_41) (FieldType A@@65 B@@64))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@6 null (|lseg#sm| (MapType0Select UnfoldingHeap@6 (MapType0Select UnfoldingHeap@6 (MapType0Select UnfoldingHeap@6 this@@38 head) next) next) hd@0)) o_37 f_41)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@6 null (|lseg#sm| (MapType0Select UnfoldingHeap@6 (MapType0Select UnfoldingHeap@6 (MapType0Select UnfoldingHeap@6 (MapType0Select UnfoldingHeap@6 this@@38 head) next) next) next) hd@0)) o_37 f_41)))) (U_2_bool (MapType1Select newPMask@2 o_37 f_41)))))
 :qid |stdinbpl.3063:41|
 :skolemid |142|
 :pattern ( (MapType1Select newPMask@2 o_37 f_41))
)) (= UnfoldingHeap@7 (MapType0Store UnfoldingHeap@6 null (|lseg#sm| (MapType0Select UnfoldingHeap@6 (MapType0Select UnfoldingHeap@6 (MapType0Select UnfoldingHeap@6 this@@38 head) next) next) hd@0) newPMask@2))) (and (= UnfoldingHeap@8 UnfoldingHeap@7) (= (ControlFlow 0 772) 771))) anon94_correct)))))
(let ((anon635_Then_correct  (=> (not (= (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) hd@0)) (=> (and (not (= (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) null)) (= UnfoldingMask@6 (MapType1Store UnfoldingMask@5 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@5 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) data)) FullPerm))))) (=> (and (and (and (state Heap@9 UnfoldingMask@6) (not (= (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) null))) (and (= UnfoldingMask@7 (MapType1Store UnfoldingMask@6 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@6 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next)) FullPerm)))) (state Heap@9 UnfoldingMask@7))) (and (and (= UnfoldingMask@8 (MapType1Store UnfoldingMask@7 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next) hd@0) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@7 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next) hd@0))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) hd@0) (MapType0Select Heap@9 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) hd@0)) (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next) hd@0) (MapType0Select Heap@9 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next) hd@0)))) (and (state Heap@9 UnfoldingMask@8) (=> (not (= (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next) hd@0)) (<= (U_2_int (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) data)) (U_2_int (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next) data))))))) (and (=> (= (ControlFlow 0 774) 772) anon636_Then_correct) (=> (= (ControlFlow 0 774) 773) anon636_Else_correct)))))))
(let ((anon635_Else_correct  (=> (and (and (= (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) hd@0) (= UnfoldingHeap@9 Heap@9)) (and (= UnfoldingMask@9 UnfoldingMask@5) (= (ControlFlow 0 770) 769))) anon95_correct)))
(let ((anon91_correct  (=> (= UnfoldingMask@5 (MapType1Store Mask@9 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) hd@0) (real_2_U (- (U_2_real (MapType1Select Mask@9 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) hd@0))) FullPerm)))) (and (=> (= (ControlFlow 0 775) 774) anon635_Then_correct) (=> (= (ControlFlow 0 775) 770) anon635_Else_correct)))))
(let ((anon634_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 778) 775)) anon91_correct)))
(let ((anon634_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 776) (- 0 777)) (<= FullPerm (U_2_real (MapType1Select Mask@9 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) hd@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@9 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) hd@0)))) (=> (= (ControlFlow 0 776) 775) anon91_correct))))))
(let ((anon89_correct  (=> (and (and (= Mask@17 (MapType1Store Mask@16 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) hd@0) (real_2_U (- (U_2_real (MapType1Select Mask@16 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) hd@0))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@9 this@@38 head) hd@0) (MapType0Select Heap@9 null (lseg (MapType0Select Heap@9 this@@38 head) hd@0)) (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) hd@0) (MapType0Select Heap@9 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) hd@0)))) (and (|lseg#trigger| Heap@9 (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) hd@0)) (= (MapType0Select Heap@9 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) hd@0)) (FrameFragment (ite (not (= (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) hd@0)) (CombineFrames (FrameFragment (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next)) (MapType0Select Heap@9 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) next) hd@0)))) EmptyFrame))))) (and (=> (= (ControlFlow 0 779) 776) anon634_Then_correct) (=> (= (ControlFlow 0 779) 778) anon634_Else_correct)))))
(let ((anon633_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 782) 779)) anon89_correct)))
(let ((anon633_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 780) (- 0 781)) (<= FullPerm (U_2_real (MapType1Select Mask@16 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) hd@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@16 null (lseg (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) next) hd@0)))) (=> (= (ControlFlow 0 780) 779) anon89_correct))))))
(let ((anon87_correct  (=> (= Mask@16 (MapType1Store Mask@15 (MapType0Select Heap@9 this@@38 head) next (real_2_U (- (U_2_real (MapType1Select Mask@15 (MapType0Select Heap@9 this@@38 head) next)) FullPerm)))) (and (=> (= (ControlFlow 0 783) 780) anon633_Then_correct) (=> (= (ControlFlow 0 783) 782) anon633_Else_correct)))))
(let ((anon632_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 786) 783)) anon87_correct)))
(let ((anon632_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 784) (- 0 785)) (<= FullPerm (U_2_real (MapType1Select Mask@15 (MapType0Select Heap@9 this@@38 head) next)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@15 (MapType0Select Heap@9 this@@38 head) next))) (=> (= (ControlFlow 0 784) 783) anon87_correct))))))
(let ((anon85_correct  (=> (= Mask@15 (MapType1Store Mask@9 (MapType0Select Heap@9 this@@38 head) data (real_2_U (- (U_2_real (MapType1Select Mask@9 (MapType0Select Heap@9 this@@38 head) data)) FullPerm)))) (and (=> (= (ControlFlow 0 787) 784) anon632_Then_correct) (=> (= (ControlFlow 0 787) 786) anon632_Else_correct)))))
(let ((anon631_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 790) 787)) anon85_correct)))
(let ((anon631_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 788) (- 0 789)) (<= FullPerm (U_2_real (MapType1Select Mask@9 (MapType0Select Heap@9 this@@38 head) data)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@9 (MapType0Select Heap@9 this@@38 head) data))) (=> (= (ControlFlow 0 788) 787) anon85_correct))))))
(let ((anon630_Then_correct  (=> (not (= (MapType0Select Heap@9 this@@38 head) hd@0)) (and (=> (= (ControlFlow 0 791) 788) anon631_Then_correct) (=> (= (ControlFlow 0 791) 790) anon631_Else_correct)))))
(let ((anon630_Else_correct  (=> (and (= (MapType0Select Heap@9 this@@38 head) hd@0) (= Mask@18 Mask@9)) (and (=> (= (ControlFlow 0 765) 763) anon638_Then_correct) (=> (= (ControlFlow 0 765) 764) anon638_Else_correct)))))
(let ((anon607_Else_correct  (=> (not (or (= (MapType0Select Heap@9 this@@38 head) null) (<= elem (U_2_int (MapType0Select Heap@9 (MapType0Select Heap@9 this@@38 head) data))))) (=> (and (U_2_bool (MapType0Select Heap@9 hd $allocated)) (U_2_bool (MapType0Select Heap@9 ptr $allocated))) (and (=> (= (ControlFlow 0 792) (- 0 794)) (HasDirectPerm Mask@9 this@@38 head)) (=> (HasDirectPerm Mask@9 this@@38 head) (=> (= hd@0 (MapType0Select Heap@9 this@@38 head)) (=> (and (state Heap@9 Mask@9) (state Heap@9 Mask@9)) (and (=> (= (ControlFlow 0 792) (- 0 793)) (HasDirectPerm Mask@9 this@@38 head)) (=> (HasDirectPerm Mask@9 this@@38 head) (and (=> (= (ControlFlow 0 792) 791) anon630_Then_correct) (=> (= (ControlFlow 0 792) 765) anon630_Else_correct))))))))))))
(let ((anon606_Else_correct  (=> (= (MapType0Select Heap@9 this@@38 head) null) (and (=> (= (ControlFlow 0 874) 866) anon607_Then_correct) (=> (= (ControlFlow 0 874) 792) anon607_Else_correct)))))
(let ((anon606_Then_correct  (=> (not (= (MapType0Select Heap@9 this@@38 head) null)) (and (=> (= (ControlFlow 0 871) (- 0 873)) (HasDirectPerm Mask@9 this@@38 head)) (=> (HasDirectPerm Mask@9 this@@38 head) (and (=> (= (ControlFlow 0 871) (- 0 872)) (HasDirectPerm Mask@9 (MapType0Select Heap@9 this@@38 head) data)) (=> (HasDirectPerm Mask@9 (MapType0Select Heap@9 this@@38 head) data) (and (=> (= (ControlFlow 0 871) 866) anon607_Then_correct) (=> (= (ControlFlow 0 871) 792) anon607_Else_correct)))))))))
(let ((anon36_correct  (=> (state Heap@9 Mask@9) (and (=> (= (ControlFlow 0 875) (- 0 876)) (HasDirectPerm Mask@9 this@@38 head)) (=> (HasDirectPerm Mask@9 this@@38 head) (and (=> (= (ControlFlow 0 875) 871) anon606_Then_correct) (=> (= (ControlFlow 0 875) 874) anon606_Else_correct)))))))
(let ((anon35_correct  (=> (state Heap@8 Mask@8) (=> (and (and (state Heap@8 Mask@8) (= Heap@9 Heap@8)) (and (= Mask@9 Mask@8) (= (ControlFlow 0 878) 875))) anon36_correct))))
(let ((anon34_correct  (=> (and (and (state Heap@7 Mask@7) (= Mask@8 Mask@7)) (and (= Heap@8 Heap@7) (= (ControlFlow 0 880) 878))) anon35_correct)))
(let ((anon605_Else_correct  (=> (= (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null) (=> (and (= Heap@7 Heap@3) (= (ControlFlow 0 882) 880)) anon34_correct))))
(let ((anon605_Then_correct  (=> (not (= (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null)) (=> (and (= Heap@4 (MapType0Store Heap@3 null (|lseg#sm| (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null) (MapType1Store (MapType0Select Heap@3 null (|lseg#sm| (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null)) (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) data (bool_2_U true)))) (= Heap@5 (MapType0Store Heap@4 null (|lseg#sm| (MapType0Select Heap@4 (MapType0Select Heap@4 this@@38 head) next) null) (MapType1Store (MapType0Select Heap@4 null (|lseg#sm| (MapType0Select Heap@4 (MapType0Select Heap@4 this@@38 head) next) null)) (MapType0Select Heap@4 (MapType0Select Heap@4 this@@38 head) next) next (bool_2_U true))))) (=> (and (and (forall ((o_30 T@U) (f_34 T@U) ) (! (let ((B@@65 (FieldTypeInv1 (type f_34))))
(let ((A@@66 (FieldTypeInv0 (type f_34))))
 (=> (and (and (= (type o_30) RefType) (= (type f_34) (FieldType A@@66 B@@65))) (or (U_2_bool (MapType1Select (MapType0Select Heap@5 null (|lseg#sm| (MapType0Select Heap@5 (MapType0Select Heap@5 this@@38 head) next) null)) o_30 f_34)) (U_2_bool (MapType1Select (MapType0Select Heap@5 null (|lseg#sm| (MapType0Select Heap@5 (MapType0Select Heap@5 (MapType0Select Heap@5 this@@38 head) next) next) null)) o_30 f_34)))) (U_2_bool (MapType1Select newPMask@1 o_30 f_34)))))
 :qid |stdinbpl.2693:37|
 :skolemid |135|
 :pattern ( (MapType1Select newPMask@1 o_30 f_34))
)) (= Heap@6 (MapType0Store Heap@5 null (|lseg#sm| (MapType0Select Heap@5 (MapType0Select Heap@5 this@@38 head) next) null) newPMask@1))) (and (= Heap@7 Heap@6) (= (ControlFlow 0 881) 880))) anon34_correct)))))
(let ((anon32_correct  (=> (and (state UnfoldingHeap@4 UnfoldingMask@4) (=> (not (= (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null)) (<= (U_2_int (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) data)) (U_2_int (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) data))))) (and (=> (= (ControlFlow 0 883) 881) anon605_Then_correct) (=> (= (ControlFlow 0 883) 882) anon605_Else_correct)))))
(let ((anon31_correct  (=> (and (and (state UnfoldingHeap@3 UnfoldingMask@3) (= UnfoldingHeap@4 UnfoldingHeap@3)) (and (= UnfoldingMask@4 UnfoldingMask@3) (= (ControlFlow 0 885) 883))) anon32_correct)))
(let ((anon604_Else_correct  (=> (= (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next) null) (=> (and (= UnfoldingHeap@3 Heap@3) (= (ControlFlow 0 887) 885)) anon31_correct))))
(let ((anon604_Then_correct  (=> (not (= (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next) null)) (=> (and (= UnfoldingHeap@0 (MapType0Store Heap@3 null (|lseg#sm| (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next) null) (MapType1Store (MapType0Select Heap@3 null (|lseg#sm| (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next) null)) (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next) data (bool_2_U true)))) (= UnfoldingHeap@1 (MapType0Store UnfoldingHeap@0 null (|lseg#sm| (MapType0Select UnfoldingHeap@0 (MapType0Select UnfoldingHeap@0 (MapType0Select UnfoldingHeap@0 this@@38 head) next) next) null) (MapType1Store (MapType0Select UnfoldingHeap@0 null (|lseg#sm| (MapType0Select UnfoldingHeap@0 (MapType0Select UnfoldingHeap@0 (MapType0Select UnfoldingHeap@0 this@@38 head) next) next) null)) (MapType0Select UnfoldingHeap@0 (MapType0Select UnfoldingHeap@0 (MapType0Select UnfoldingHeap@0 this@@38 head) next) next) next (bool_2_U true))))) (=> (and (and (forall ((o_29 T@U) (f_33 T@U) ) (! (let ((B@@66 (FieldTypeInv1 (type f_33))))
(let ((A@@67 (FieldTypeInv0 (type f_33))))
 (=> (and (and (= (type o_29) RefType) (= (type f_33) (FieldType A@@67 B@@66))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@1 null (|lseg#sm| (MapType0Select UnfoldingHeap@1 (MapType0Select UnfoldingHeap@1 (MapType0Select UnfoldingHeap@1 this@@38 head) next) next) null)) o_29 f_33)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@1 null (|lseg#sm| (MapType0Select UnfoldingHeap@1 (MapType0Select UnfoldingHeap@1 (MapType0Select UnfoldingHeap@1 (MapType0Select UnfoldingHeap@1 this@@38 head) next) next) next) null)) o_29 f_33)))) (U_2_bool (MapType1Select newPMask@0 o_29 f_33)))))
 :qid |stdinbpl.2677:41|
 :skolemid |134|
 :pattern ( (MapType1Select newPMask@0 o_29 f_33))
)) (= UnfoldingHeap@2 (MapType0Store UnfoldingHeap@1 null (|lseg#sm| (MapType0Select UnfoldingHeap@1 (MapType0Select UnfoldingHeap@1 (MapType0Select UnfoldingHeap@1 this@@38 head) next) next) null) newPMask@0))) (and (= UnfoldingHeap@3 UnfoldingHeap@2) (= (ControlFlow 0 886) 885))) anon31_correct)))))
(let ((anon603_Then_correct  (=> (not (= (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null)) (=> (and (not (= (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null)) (= UnfoldingMask@1 (MapType1Store UnfoldingMask@0 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@0 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) data)) FullPerm))))) (=> (and (and (and (state Heap@3 UnfoldingMask@1) (not (= (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null))) (and (= UnfoldingMask@2 (MapType1Store UnfoldingMask@1 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@1 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next)) FullPerm)))) (state Heap@3 UnfoldingMask@2))) (and (and (= UnfoldingMask@3 (MapType1Store UnfoldingMask@2 null (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next) null) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@2 null (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null) (MapType0Select Heap@3 null (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null)) (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next) null) (MapType0Select Heap@3 null (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next) null)))) (and (state Heap@3 UnfoldingMask@3) (=> (not (= (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next) null)) (<= (U_2_int (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) data)) (U_2_int (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next) data))))))) (and (=> (= (ControlFlow 0 888) 886) anon604_Then_correct) (=> (= (ControlFlow 0 888) 887) anon604_Else_correct)))))))
(let ((anon603_Else_correct  (=> (and (and (= (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null) (= UnfoldingHeap@4 Heap@3)) (and (= UnfoldingMask@4 UnfoldingMask@0) (= (ControlFlow 0 884) 883))) anon32_correct)))
(let ((anon602_Then_correct  (=> (not (= (MapType0Select Heap@3 this@@38 head) null)) (=> (and (and (not (= (MapType0Select Heap@3 this@@38 head) null)) (= Mask@5 (MapType1Store Mask@4 (MapType0Select Heap@3 this@@38 head) data (real_2_U (+ (U_2_real (MapType1Select Mask@4 (MapType0Select Heap@3 this@@38 head) data)) FullPerm))))) (and (state Heap@3 Mask@5) (not (= (MapType0Select Heap@3 this@@38 head) null)))) (=> (and (and (and (= Mask@6 (MapType1Store Mask@5 (MapType0Select Heap@3 this@@38 head) next (real_2_U (+ (U_2_real (MapType1Select Mask@5 (MapType0Select Heap@3 this@@38 head) next)) FullPerm)))) (state Heap@3 Mask@6)) (and (= Mask@7 (MapType1Store Mask@6 null (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null) (real_2_U (+ (U_2_real (MapType1Select Mask@6 null (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null))) FullPerm)))) (InsidePredicate (lseg (MapType0Select Heap@3 this@@38 head) null) (MapType0Select Heap@3 null (lseg (MapType0Select Heap@3 this@@38 head) null)) (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null) (MapType0Select Heap@3 null (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null))))) (and (and (state Heap@3 Mask@7) (|lseg#trigger| Heap@3 (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null))) (and (= (MapType0Select Heap@3 null (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null)) (FrameFragment (ite (not (= (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null)) (CombineFrames (FrameFragment (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) data)) (CombineFrames (FrameFragment (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next)) (MapType0Select Heap@3 null (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) next) null)))) EmptyFrame))) (= UnfoldingMask@0 (MapType1Store Mask@7 null (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null) (real_2_U (- (U_2_real (MapType1Select Mask@7 null (lseg (MapType0Select Heap@3 (MapType0Select Heap@3 this@@38 head) next) null))) FullPerm))))))) (and (=> (= (ControlFlow 0 889) 888) anon603_Then_correct) (=> (= (ControlFlow 0 889) 884) anon603_Else_correct)))))))
(let ((anon602_Else_correct  (=> (and (and (= (MapType0Select Heap@3 this@@38 head) null) (= Mask@8 Mask@4)) (and (= Heap@8 Heap@3) (= (ControlFlow 0 879) 878))) anon35_correct)))
(let ((anon601_Else_correct  (=> (and (HasDirectPerm Mask@4 null (lseg (MapType0Select Heap@1 this@@38 head) null)) (= Heap@3 Heap@1)) (and (=> (= (ControlFlow 0 891) 889) anon602_Then_correct) (=> (= (ControlFlow 0 891) 879) anon602_Else_correct)))))
(let ((anon601_Then_correct  (=> (not (HasDirectPerm Mask@4 null (lseg (MapType0Select Heap@1 this@@38 head) null))) (=> (and (= Heap@2 (MapType0Store Heap@1 null (lseg (MapType0Select Heap@1 this@@38 head) null) newVersion@1)) (= Heap@3 Heap@2)) (and (=> (= (ControlFlow 0 890) 889) anon602_Then_correct) (=> (= (ControlFlow 0 890) 879) anon602_Else_correct))))))
(let ((anon25_correct  (=> (= Mask@4 (MapType1Store Mask@3 null (lseg (MapType0Select Heap@1 this@@38 head) null) (real_2_U (- (U_2_real (MapType1Select Mask@3 null (lseg (MapType0Select Heap@1 this@@38 head) null))) FullPerm)))) (and (=> (= (ControlFlow 0 892) 890) anon601_Then_correct) (=> (= (ControlFlow 0 892) 891) anon601_Else_correct)))))
(let ((anon600_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 895) 892)) anon25_correct)))
(let ((anon600_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 893) (- 0 894)) (<= FullPerm (U_2_real (MapType1Select Mask@3 null (lseg (MapType0Select Heap@1 this@@38 head) null))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@3 null (lseg (MapType0Select Heap@1 this@@38 head) null)))) (=> (= (ControlFlow 0 893) 892) anon25_correct))))))
(let ((anon599_Then_correct  (=> (not (= (MapType0Select Heap@1 this@@38 head) null)) (and (=> (= (ControlFlow 0 896) (- 0 897)) (HasDirectPerm Mask@3 this@@38 head)) (=> (HasDirectPerm Mask@3 this@@38 head) (=> (and (|lseg#trigger| Heap@1 (lseg (MapType0Select Heap@1 this@@38 head) null)) (= (MapType0Select Heap@1 null (lseg (MapType0Select Heap@1 this@@38 head) null)) (FrameFragment (ite (not (= (MapType0Select Heap@1 this@@38 head) null)) (CombineFrames (FrameFragment (MapType0Select Heap@1 (MapType0Select Heap@1 this@@38 head) data)) (CombineFrames (FrameFragment (MapType0Select Heap@1 (MapType0Select Heap@1 this@@38 head) next)) (MapType0Select Heap@1 null (lseg (MapType0Select Heap@1 (MapType0Select Heap@1 this@@38 head) next) null)))) EmptyFrame)))) (and (=> (= (ControlFlow 0 896) 893) anon600_Then_correct) (=> (= (ControlFlow 0 896) 895) anon600_Else_correct))))))))
(let ((anon599_Else_correct  (=> (and (and (= (MapType0Select Heap@1 this@@38 head) null) (= Heap@9 Heap@1)) (and (= Mask@9 Mask@3) (= (ControlFlow 0 877) 875))) anon36_correct)))
(let ((anon22_correct  (=> (and (and (and (not (= this@@38 null)) (= Mask@2 (MapType1Store Mask@1 this@@38 head (real_2_U (+ (U_2_real (MapType1Select Mask@1 this@@38 head)) FullPerm))))) (and (state Heap@1 Mask@2) (= Mask@3 (MapType1Store Mask@2 null (lseg (MapType0Select Heap@1 this@@38 head) null) (real_2_U (+ (U_2_real (MapType1Select Mask@2 null (lseg (MapType0Select Heap@1 this@@38 head) null))) FullPerm)))))) (and (and (InsidePredicate (List this@@38) (MapType0Select Heap@1 null (List this@@38)) (lseg (MapType0Select Heap@1 this@@38 head) null) (MapType0Select Heap@1 null (lseg (MapType0Select Heap@1 this@@38 head) null))) (state Heap@1 Mask@3)) (and (state Heap@1 Mask@3) (state Heap@1 Mask@3)))) (and (=> (= (ControlFlow 0 898) (- 0 899)) (HasDirectPerm Mask@3 this@@38 head)) (=> (HasDirectPerm Mask@3 this@@38 head) (and (=> (= (ControlFlow 0 898) 896) anon599_Then_correct) (=> (= (ControlFlow 0 898) 877) anon599_Else_correct)))))))
(let ((anon598_Else_correct  (=> (HasDirectPerm Mask@1 null (List this@@38)) (=> (and (= Heap@1 Heap@@38) (= (ControlFlow 0 901) 898)) anon22_correct))))
(let ((anon598_Then_correct  (=> (and (and (not (HasDirectPerm Mask@1 null (List this@@38))) (= Heap@0 (MapType0Store Heap@@38 null (List this@@38) newVersion@0))) (and (= Heap@1 Heap@0) (= (ControlFlow 0 900) 898))) anon22_correct)))
(let ((anon20_correct  (=> (= Mask@1 (MapType1Store Mask@0 null (List this@@38) (real_2_U (- (U_2_real (MapType1Select Mask@0 null (List this@@38))) FullPerm)))) (and (=> (= (ControlFlow 0 902) 900) anon598_Then_correct) (=> (= (ControlFlow 0 902) 901) anon598_Else_correct)))))
(let ((anon597_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 905) 902)) anon20_correct)))
(let ((anon597_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 903) (- 0 904)) (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@0 null (List this@@38)))) (=> (= (ControlFlow 0 903) 902) anon20_correct))))))
(let ((anon588_Else_correct  (=> (and (and (U_2_bool (MapType0Select Heap@@38 tmp $allocated)) (state Heap@@38 Mask@0)) (and (|List#trigger| Heap@@38 (List this@@38)) (= (MapType0Select Heap@@38 null (List this@@38)) (CombineFrames (FrameFragment (MapType0Select Heap@@38 this@@38 head)) (MapType0Select Heap@@38 null (lseg (MapType0Select Heap@@38 this@@38 head) null)))))) (and (=> (= (ControlFlow 0 906) 903) anon597_Then_correct) (=> (= (ControlFlow 0 906) 905) anon597_Else_correct)))))
(let ((anon0_correct  (=> (and (state Heap@@38 ZeroMask) (= AssumeFunctionsAbove (- 0 1))) (=> (and (and (U_2_bool (MapType0Select Heap@@38 this@@38 $allocated)) (= Mask@0 (MapType1Store ZeroMask null (List this@@38) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (List this@@38))) FullPerm))))) (and (state Heap@@38 Mask@0) (state Heap@@38 Mask@0))) (and (=> (= (ControlFlow 0 926) 925) anon588_Then_correct) (=> (= (ControlFlow 0 926) 906) anon588_Else_correct))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 927) 926) anon0_correct)))
PreconditionGeneratedEntry_correct
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 2) (- 1))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 195) (- 196))))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 421) (- 422))))
(check-sat)
