(get-info :version)
; (:version "4.12.1")
; Started: 2023-10-31 14:12:40
; Silicon.version: 1.1-SNAPSHOT (46944a65@dspil_symbenchmarking)
; Input file: /home/pcorrect/repos/benchmarking_general/silicon_tests/scion_pseudoHeaderChecksum.vpr
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int> 0)
(declare-sort Set<Slice<Ref>> 0)
(declare-sort Set<Tuple2<Ref~_Types>> 0)
(declare-sort Set<Int> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<$Snap> 0)
(declare-sort ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref> 0)
(declare-sort Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> 0)
(declare-sort ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref> 0)
(declare-sort Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> 0)
(declare-sort Equality<ShStruct0> 0)
(declare-sort ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$> 0)
(declare-sort Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> 0)
(declare-sort Tuple0 0)
(declare-sort Equality<ShStruct2<Ref~_Ref>> 0)
(declare-sort Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>> 0)
(declare-sort PolyAdditionalAxioms 0)
(declare-sort Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> 0)
(declare-sort ShStruct4<Ref~_Ref~_Ref~_Ref> 0)
(declare-sort Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> 0)
(declare-sort Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> 0)
(declare-sort ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> 0)
(declare-sort ShStruct1<ShStruct2<Ref~_Ref>> 0)
(declare-sort Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> 0)
(declare-sort Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> 0)
(declare-sort Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> 0)
(declare-sort Poly<Tuple0> 0)
(declare-sort Emb_6_Intbyte$$$_S_$$$ 0)
(declare-sort ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> 0)
(declare-sort ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> 0)
(declare-sort ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> 0)
(declare-sort Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> 0)
(declare-sort ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> 0)
(declare-sort Poly<Slice<Ref>> 0)
(declare-sort ShStruct2<ShStruct2<Ref~_Ref>~_Ref> 0)
(declare-sort ShStruct0 0)
(declare-sort ShStruct3<Ref~_Ref~_Ref> 0)
(declare-sort Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> 0)
(declare-sort String_ 0)
(declare-sort Emb_3_Intuint8$$$_S_$$$ 0)
(declare-sort Emb_1_Interfaceempty_interface$$$_S_$$$ 0)
(declare-sort ShArray<Ref> 0)
(declare-sort Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> 0)
(declare-sort ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref> 0)
(declare-sort Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> 0)
(declare-sort Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> 0)
(declare-sort Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> 0)
(declare-sort Types 0)
(declare-sort Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> 0)
(declare-sort Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> 0)
(declare-sort Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> 0)
(declare-sort ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> 0)
(declare-sort WellFoundedOrder<Int> 0)
(declare-sort Poly<ShStruct1<ShStruct2<Ref~_Ref>>> 0)
(declare-sort Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> 0)
(declare-sort Slice<Ref> 0)
(declare-sort Poly<ShStruct0> 0)
(declare-sort Emb_8_Intbyte$$$_S_$$$ 0)
(declare-sort IntWellFoundedOrder 0)
(declare-sort Tuple2<Ref~_Types> 0)
(declare-sort ComparableInterfaceDomain 0)
(declare-sort Poly<Int> 0)
(declare-sort Equality<ShStruct1<ShStruct2<Ref~_Ref>>> 0)
(declare-sort Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> 0)
(declare-sort Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> 0)
(declare-sort ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref> 0)
(declare-sort Emb_8_Intbyte$$$$_E_$$$ 0)
(declare-sort Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> 0)
(declare-sort ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$> 0)
(declare-sort Poly<ShStruct2<Ref~_Ref>> 0)
(declare-sort Poly<ShStruct3<Ref~_Ref~_Ref>> 0)
(declare-sort Equality<ShStruct3<Ref~_Ref~_Ref>> 0)
(declare-sort Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> 0)
(declare-sort ShStruct2<Ref~_Ref> 0)
(declare-sort $FVF<Intbyte$$$$_E_$$$> 0)
(declare-sort $FVF<Interfaceempty_interface$$$$_E_$$$> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<Slice<Ref>>To$Snap (Set<Slice<Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Slice<Ref>> ($Snap) Set<Slice<Ref>>)
(assert (forall ((x Set<Slice<Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<Slice<Ref>>($SortWrappers.Set<Slice<Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<Slice<Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<Slice<Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Slice<Ref>>To$Snap($SortWrappers.$SnapToSet<Slice<Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<Slice<Ref>> x))
    :qid |$Snap.Set<Slice<Ref>>To$SnapToSet<Slice<Ref>>|
    )))
(declare-fun $SortWrappers.Set<Tuple2<Ref~_Types>>To$Snap (Set<Tuple2<Ref~_Types>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Tuple2<Ref~_Types>> ($Snap) Set<Tuple2<Ref~_Types>>)
(assert (forall ((x Set<Tuple2<Ref~_Types>>)) (!
    (= x ($SortWrappers.$SnapToSet<Tuple2<Ref~_Types>>($SortWrappers.Set<Tuple2<Ref~_Types>>To$Snap x)))
    :pattern (($SortWrappers.Set<Tuple2<Ref~_Types>>To$Snap x))
    :qid |$Snap.$SnapToSet<Tuple2<Ref~_Types>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Tuple2<Ref~_Types>>To$Snap($SortWrappers.$SnapToSet<Tuple2<Ref~_Types>> x)))
    :pattern (($SortWrappers.$SnapToSet<Tuple2<Ref~_Types>> x))
    :qid |$Snap.Set<Tuple2<Ref~_Types>>To$SnapToSet<Tuple2<Ref~_Types>>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>To$Snap (ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref> ($Snap) ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)
(assert (forall ((x ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>($SortWrappers.ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref> x))
    :qid |$Snap.ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>To$SnapToShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap (Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> ($Snap) Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)
(assert (forall ((x Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>($SortWrappers.Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$SnapToPoly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>To$Snap (ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref> ($Snap) ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)
(assert (forall ((x ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>($SortWrappers.ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>To$Snap($SortWrappers.$SnapToShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref> x))
    :qid |$Snap.ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>To$SnapToShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap (Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> ($Snap) Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>($SortWrappers.Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$SnapToEquality<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct0>To$Snap (Equality<ShStruct0>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct0> ($Snap) Equality<ShStruct0>)
(assert (forall ((x Equality<ShStruct0>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct0>($SortWrappers.Equality<ShStruct0>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct0>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct0>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct0>To$Snap($SortWrappers.$SnapToEquality<ShStruct0> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct0> x))
    :qid |$Snap.Equality<ShStruct0>To$SnapToEquality<ShStruct0>|
    )))
(declare-fun $SortWrappers.ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>To$Snap (ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$> ($Snap) ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)
(assert (forall ((x ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)) (!
    (= x ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>($SortWrappers.ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>To$Snap x)))
    :pattern (($SortWrappers.ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>To$Snap x))
    :qid |$Snap.$SnapToShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>To$Snap($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$> x)))
    :pattern (($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$> x))
    :qid |$Snap.ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>To$SnapToShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>To$Snap (Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> ($Snap) Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>($SortWrappers.Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>To$SnapToEquality<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Tuple0To$Snap (Tuple0) $Snap)
(declare-fun $SortWrappers.$SnapToTuple0 ($Snap) Tuple0)
(assert (forall ((x Tuple0)) (!
    (= x ($SortWrappers.$SnapToTuple0($SortWrappers.Tuple0To$Snap x)))
    :pattern (($SortWrappers.Tuple0To$Snap x))
    :qid |$Snap.$SnapToTuple0To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Tuple0To$Snap($SortWrappers.$SnapToTuple0 x)))
    :pattern (($SortWrappers.$SnapToTuple0 x))
    :qid |$Snap.Tuple0To$SnapToTuple0|
    )))
(declare-fun $SortWrappers.Equality<ShStruct2<Ref~_Ref>>To$Snap (Equality<ShStruct2<Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct2<Ref~_Ref>> ($Snap) Equality<ShStruct2<Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct2<Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct2<Ref~_Ref>>($SortWrappers.Equality<ShStruct2<Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct2<Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct2<Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct2<Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct2<Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct2<Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct2<Ref~_Ref>>To$SnapToEquality<ShStruct2<Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap (Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Snap) Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct4<Ref~_Ref~_Ref~_Ref>>($SortWrappers.Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct4<Ref~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct4<Ref~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct4<Ref~_Ref~_Ref~_Ref>>To$SnapToEquality<ShStruct4<Ref~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.PolyAdditionalAxiomsTo$Snap (PolyAdditionalAxioms) $Snap)
(declare-fun $SortWrappers.$SnapToPolyAdditionalAxioms ($Snap) PolyAdditionalAxioms)
(assert (forall ((x PolyAdditionalAxioms)) (!
    (= x ($SortWrappers.$SnapToPolyAdditionalAxioms($SortWrappers.PolyAdditionalAxiomsTo$Snap x)))
    :pattern (($SortWrappers.PolyAdditionalAxiomsTo$Snap x))
    :qid |$Snap.$SnapToPolyAdditionalAxiomsTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.PolyAdditionalAxiomsTo$Snap($SortWrappers.$SnapToPolyAdditionalAxioms x)))
    :pattern (($SortWrappers.$SnapToPolyAdditionalAxioms x))
    :qid |$Snap.PolyAdditionalAxiomsTo$SnapToPolyAdditionalAxioms|
    )))
(declare-fun $SortWrappers.Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap (Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> ($Snap) Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>($SortWrappers.Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$SnapToEquality<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.ShStruct4<Ref~_Ref~_Ref~_Ref>To$Snap (ShStruct4<Ref~_Ref~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct4<Ref~_Ref~_Ref~_Ref> ($Snap) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(assert (forall ((x ShStruct4<Ref~_Ref~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct4<Ref~_Ref~_Ref~_Ref>($SortWrappers.ShStruct4<Ref~_Ref~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct4<Ref~_Ref~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct4<Ref~_Ref~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct4<Ref~_Ref~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct4<Ref~_Ref~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct4<Ref~_Ref~_Ref~_Ref> x))
    :qid |$Snap.ShStruct4<Ref~_Ref~_Ref~_Ref>To$SnapToShStruct4<Ref~_Ref~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap (Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> ($Snap) Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>($SortWrappers.Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$SnapToEquality<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>To$Snap (Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> ($Snap) Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>)
(assert (forall ((x Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>($SortWrappers.Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>To$Snap($SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> x))
    :qid |$Snap.Equality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>To$SnapToEquality<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>>|
    )))
(declare-fun $SortWrappers.ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>To$Snap (ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> ($Snap) ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)
(assert (forall ((x ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>($SortWrappers.ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> x))
    :qid |$Snap.ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>To$SnapToShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.ShStruct1<ShStruct2<Ref~_Ref>>To$Snap (ShStruct1<ShStruct2<Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct1<ShStruct2<Ref~_Ref>> ($Snap) ShStruct1<ShStruct2<Ref~_Ref>>)
(assert (forall ((x ShStruct1<ShStruct2<Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToShStruct1<ShStruct2<Ref~_Ref>>($SortWrappers.ShStruct1<ShStruct2<Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.ShStruct1<ShStruct2<Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToShStruct1<ShStruct2<Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct1<ShStruct2<Ref~_Ref>>To$Snap($SortWrappers.$SnapToShStruct1<ShStruct2<Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToShStruct1<ShStruct2<Ref~_Ref>> x))
    :qid |$Snap.ShStruct1<ShStruct2<Ref~_Ref>>To$SnapToShStruct1<ShStruct2<Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap (Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Snap) Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)
(assert (forall ((x Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>($SortWrappers.Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$SnapToPoly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap (Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> ($Snap) Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>)
(assert (forall ((x Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>($SortWrappers.Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap($SortWrappers.$SnapToPoly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> x))
    :qid |$Snap.Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$SnapToPoly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap (Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> ($Snap) Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>)
(assert (forall ((x Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>($SortWrappers.Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> x))
    :qid |$Snap.Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$SnapToPoly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>|
    )))
(declare-fun $SortWrappers.Poly<Tuple0>To$Snap (Poly<Tuple0>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<Tuple0> ($Snap) Poly<Tuple0>)
(assert (forall ((x Poly<Tuple0>)) (!
    (= x ($SortWrappers.$SnapToPoly<Tuple0>($SortWrappers.Poly<Tuple0>To$Snap x)))
    :pattern (($SortWrappers.Poly<Tuple0>To$Snap x))
    :qid |$Snap.$SnapToPoly<Tuple0>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<Tuple0>To$Snap($SortWrappers.$SnapToPoly<Tuple0> x)))
    :pattern (($SortWrappers.$SnapToPoly<Tuple0> x))
    :qid |$Snap.Poly<Tuple0>To$SnapToPoly<Tuple0>|
    )))
(declare-fun $SortWrappers.Emb_6_Intbyte$$$_S_$$$To$Snap (Emb_6_Intbyte$$$_S_$$$) $Snap)
(declare-fun $SortWrappers.$SnapToEmb_6_Intbyte$$$_S_$$$ ($Snap) Emb_6_Intbyte$$$_S_$$$)
(assert (forall ((x Emb_6_Intbyte$$$_S_$$$)) (!
    (= x ($SortWrappers.$SnapToEmb_6_Intbyte$$$_S_$$$($SortWrappers.Emb_6_Intbyte$$$_S_$$$To$Snap x)))
    :pattern (($SortWrappers.Emb_6_Intbyte$$$_S_$$$To$Snap x))
    :qid |$Snap.$SnapToEmb_6_Intbyte$$$_S_$$$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Emb_6_Intbyte$$$_S_$$$To$Snap($SortWrappers.$SnapToEmb_6_Intbyte$$$_S_$$$ x)))
    :pattern (($SortWrappers.$SnapToEmb_6_Intbyte$$$_S_$$$ x))
    :qid |$Snap.Emb_6_Intbyte$$$_S_$$$To$SnapToEmb_6_Intbyte$$$_S_$$$|
    )))
(declare-fun $SortWrappers.ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>To$Snap (ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ($Snap) ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)
(assert (forall ((x ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>($SortWrappers.ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>To$Snap($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> x))
    :qid |$Snap.ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>To$SnapToShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>|
    )))
(declare-fun $SortWrappers.ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>To$Snap (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> ($Snap) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(assert (forall ((x ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>($SortWrappers.ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> x))
    :qid |$Snap.ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>To$SnapToShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap (ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> ($Snap) ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)
(assert (forall ((x ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>($SortWrappers.ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>To$SnapToShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap (Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> ($Snap) Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>($SortWrappers.Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$SnapToEquality<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>To$Snap (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> ($Snap) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>($SortWrappers.ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> x))
    :qid |$Snap.ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>To$SnapToShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.Poly<Slice<Ref>>To$Snap (Poly<Slice<Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<Slice<Ref>> ($Snap) Poly<Slice<Ref>>)
(assert (forall ((x Poly<Slice<Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<Slice<Ref>>($SortWrappers.Poly<Slice<Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<Slice<Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<Slice<Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<Slice<Ref>>To$Snap($SortWrappers.$SnapToPoly<Slice<Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<Slice<Ref>> x))
    :qid |$Snap.Poly<Slice<Ref>>To$SnapToPoly<Slice<Ref>>|
    )))
(declare-fun $SortWrappers.ShStruct2<ShStruct2<Ref~_Ref>~_Ref>To$Snap (ShStruct2<ShStruct2<Ref~_Ref>~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct2<ShStruct2<Ref~_Ref>~_Ref> ($Snap) ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)
(assert (forall ((x ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct2<ShStruct2<Ref~_Ref>~_Ref>($SortWrappers.ShStruct2<ShStruct2<Ref~_Ref>~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct2<ShStruct2<Ref~_Ref>~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct2<ShStruct2<Ref~_Ref>~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct2<ShStruct2<Ref~_Ref>~_Ref>To$Snap($SortWrappers.$SnapToShStruct2<ShStruct2<Ref~_Ref>~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct2<ShStruct2<Ref~_Ref>~_Ref> x))
    :qid |$Snap.ShStruct2<ShStruct2<Ref~_Ref>~_Ref>To$SnapToShStruct2<ShStruct2<Ref~_Ref>~_Ref>|
    )))
(declare-fun $SortWrappers.ShStruct0To$Snap (ShStruct0) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct0 ($Snap) ShStruct0)
(assert (forall ((x ShStruct0)) (!
    (= x ($SortWrappers.$SnapToShStruct0($SortWrappers.ShStruct0To$Snap x)))
    :pattern (($SortWrappers.ShStruct0To$Snap x))
    :qid |$Snap.$SnapToShStruct0To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct0To$Snap($SortWrappers.$SnapToShStruct0 x)))
    :pattern (($SortWrappers.$SnapToShStruct0 x))
    :qid |$Snap.ShStruct0To$SnapToShStruct0|
    )))
(declare-fun $SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap (ShStruct3<Ref~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> ($Snap) ShStruct3<Ref~_Ref~_Ref>)
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref>($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct3<Ref~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct3<Ref~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct3<Ref~_Ref~_Ref> x))
    :qid |$Snap.ShStruct3<Ref~_Ref~_Ref>To$SnapToShStruct3<Ref~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap (Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> ($Snap) Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>)
(assert (forall ((x Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>($SortWrappers.Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> x))
    :qid |$Snap.Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>To$SnapToPoly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.String_To$Snap (String_) $Snap)
(declare-fun $SortWrappers.$SnapToString_ ($Snap) String_)
(assert (forall ((x String_)) (!
    (= x ($SortWrappers.$SnapToString_($SortWrappers.String_To$Snap x)))
    :pattern (($SortWrappers.String_To$Snap x))
    :qid |$Snap.$SnapToString_To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.String_To$Snap($SortWrappers.$SnapToString_ x)))
    :pattern (($SortWrappers.$SnapToString_ x))
    :qid |$Snap.String_To$SnapToString_|
    )))
(declare-fun $SortWrappers.Emb_3_Intuint8$$$_S_$$$To$Snap (Emb_3_Intuint8$$$_S_$$$) $Snap)
(declare-fun $SortWrappers.$SnapToEmb_3_Intuint8$$$_S_$$$ ($Snap) Emb_3_Intuint8$$$_S_$$$)
(assert (forall ((x Emb_3_Intuint8$$$_S_$$$)) (!
    (= x ($SortWrappers.$SnapToEmb_3_Intuint8$$$_S_$$$($SortWrappers.Emb_3_Intuint8$$$_S_$$$To$Snap x)))
    :pattern (($SortWrappers.Emb_3_Intuint8$$$_S_$$$To$Snap x))
    :qid |$Snap.$SnapToEmb_3_Intuint8$$$_S_$$$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Emb_3_Intuint8$$$_S_$$$To$Snap($SortWrappers.$SnapToEmb_3_Intuint8$$$_S_$$$ x)))
    :pattern (($SortWrappers.$SnapToEmb_3_Intuint8$$$_S_$$$ x))
    :qid |$Snap.Emb_3_Intuint8$$$_S_$$$To$SnapToEmb_3_Intuint8$$$_S_$$$|
    )))
(declare-fun $SortWrappers.Emb_1_Interfaceempty_interface$$$_S_$$$To$Snap (Emb_1_Interfaceempty_interface$$$_S_$$$) $Snap)
(declare-fun $SortWrappers.$SnapToEmb_1_Interfaceempty_interface$$$_S_$$$ ($Snap) Emb_1_Interfaceempty_interface$$$_S_$$$)
(assert (forall ((x Emb_1_Interfaceempty_interface$$$_S_$$$)) (!
    (= x ($SortWrappers.$SnapToEmb_1_Interfaceempty_interface$$$_S_$$$($SortWrappers.Emb_1_Interfaceempty_interface$$$_S_$$$To$Snap x)))
    :pattern (($SortWrappers.Emb_1_Interfaceempty_interface$$$_S_$$$To$Snap x))
    :qid |$Snap.$SnapToEmb_1_Interfaceempty_interface$$$_S_$$$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Emb_1_Interfaceempty_interface$$$_S_$$$To$Snap($SortWrappers.$SnapToEmb_1_Interfaceempty_interface$$$_S_$$$ x)))
    :pattern (($SortWrappers.$SnapToEmb_1_Interfaceempty_interface$$$_S_$$$ x))
    :qid |$Snap.Emb_1_Interfaceempty_interface$$$_S_$$$To$SnapToEmb_1_Interfaceempty_interface$$$_S_$$$|
    )))
(declare-fun $SortWrappers.ShArray<Ref>To$Snap (ShArray<Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShArray<Ref> ($Snap) ShArray<Ref>)
(assert (forall ((x ShArray<Ref>)) (!
    (= x ($SortWrappers.$SnapToShArray<Ref>($SortWrappers.ShArray<Ref>To$Snap x)))
    :pattern (($SortWrappers.ShArray<Ref>To$Snap x))
    :qid |$Snap.$SnapToShArray<Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShArray<Ref>To$Snap($SortWrappers.$SnapToShArray<Ref> x)))
    :pattern (($SortWrappers.$SnapToShArray<Ref> x))
    :qid |$Snap.ShArray<Ref>To$SnapToShArray<Ref>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap (Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> ($Snap) Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>)
(assert (forall ((x Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>($SortWrappers.Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>To$SnapToPoly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>To$Snap (ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref> ($Snap) ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)
(assert (forall ((x ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>($SortWrappers.ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref> x))
    :qid |$Snap.ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>To$SnapToShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap (Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap) Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(assert (forall ((x Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>($SortWrappers.Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap($SortWrappers.$SnapToEquality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x))
    :qid |$Snap.Equality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$SnapToEquality<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap (Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> ($Snap) Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>)
(assert (forall ((x Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>($SortWrappers.Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> x))
    :qid |$Snap.Equality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$SnapToEquality<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap (Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> ($Snap) Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)
(assert (forall ((x Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>($SortWrappers.Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> x))
    :qid |$Snap.Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$SnapToPoly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>|
    )))
(declare-fun $SortWrappers.TypesTo$Snap (Types) $Snap)
(declare-fun $SortWrappers.$SnapToTypes ($Snap) Types)
(assert (forall ((x Types)) (!
    (= x ($SortWrappers.$SnapToTypes($SortWrappers.TypesTo$Snap x)))
    :pattern (($SortWrappers.TypesTo$Snap x))
    :qid |$Snap.$SnapToTypesTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TypesTo$Snap($SortWrappers.$SnapToTypes x)))
    :pattern (($SortWrappers.$SnapToTypes x))
    :qid |$Snap.TypesTo$SnapToTypes|
    )))
(declare-fun $SortWrappers.Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap (Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($Snap) Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)
(assert (forall ((x Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>($SortWrappers.Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap($SortWrappers.$SnapToPoly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> x))
    :qid |$Snap.Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$SnapToPoly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap (Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> ($Snap) Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>)
(assert (forall ((x Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>($SortWrappers.Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> x))
    :qid |$Snap.Equality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>To$SnapToEquality<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap (Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> ($Snap) Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)
(assert (forall ((x Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>($SortWrappers.Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> x))
    :qid |$Snap.Equality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>To$SnapToEquality<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>>|
    )))
(declare-fun $SortWrappers.ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap (ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Snap) ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(assert (forall ((x ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
    (= x ($SortWrappers.$SnapToShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>($SortWrappers.ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap x)))
    :pattern (($SortWrappers.ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap x))
    :qid |$Snap.$SnapToShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$Snap($SortWrappers.$SnapToShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x)))
    :pattern (($SortWrappers.$SnapToShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x))
    :qid |$Snap.ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>To$SnapToShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>|
    )))
(declare-fun $SortWrappers.WellFoundedOrder<Int>To$Snap (WellFoundedOrder<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToWellFoundedOrder<Int> ($Snap) WellFoundedOrder<Int>)
(assert (forall ((x WellFoundedOrder<Int>)) (!
    (= x ($SortWrappers.$SnapToWellFoundedOrder<Int>($SortWrappers.WellFoundedOrder<Int>To$Snap x)))
    :pattern (($SortWrappers.WellFoundedOrder<Int>To$Snap x))
    :qid |$Snap.$SnapToWellFoundedOrder<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.WellFoundedOrder<Int>To$Snap($SortWrappers.$SnapToWellFoundedOrder<Int> x)))
    :pattern (($SortWrappers.$SnapToWellFoundedOrder<Int> x))
    :qid |$Snap.WellFoundedOrder<Int>To$SnapToWellFoundedOrder<Int>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap (Poly<ShStruct1<ShStruct2<Ref~_Ref>>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct1<ShStruct2<Ref~_Ref>>> ($Snap) Poly<ShStruct1<ShStruct2<Ref~_Ref>>>)
(assert (forall ((x Poly<ShStruct1<ShStruct2<Ref~_Ref>>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct1<ShStruct2<Ref~_Ref>>>($SortWrappers.Poly<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap($SortWrappers.$SnapToPoly<ShStruct1<ShStruct2<Ref~_Ref>>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct1<ShStruct2<Ref~_Ref>>> x))
    :qid |$Snap.Poly<ShStruct1<ShStruct2<Ref~_Ref>>>To$SnapToPoly<ShStruct1<ShStruct2<Ref~_Ref>>>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap (Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> ($Snap) Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>)
(assert (forall ((x Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>($SortWrappers.Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> x))
    :qid |$Snap.Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>To$SnapToPoly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>>|
    )))
(declare-fun $SortWrappers.Slice<Ref>To$Snap (Slice<Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSlice<Ref> ($Snap) Slice<Ref>)
(assert (forall ((x Slice<Ref>)) (!
    (= x ($SortWrappers.$SnapToSlice<Ref>($SortWrappers.Slice<Ref>To$Snap x)))
    :pattern (($SortWrappers.Slice<Ref>To$Snap x))
    :qid |$Snap.$SnapToSlice<Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Slice<Ref>To$Snap($SortWrappers.$SnapToSlice<Ref> x)))
    :pattern (($SortWrappers.$SnapToSlice<Ref> x))
    :qid |$Snap.Slice<Ref>To$SnapToSlice<Ref>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct0>To$Snap (Poly<ShStruct0>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct0> ($Snap) Poly<ShStruct0>)
(assert (forall ((x Poly<ShStruct0>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct0>($SortWrappers.Poly<ShStruct0>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct0>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct0>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct0>To$Snap($SortWrappers.$SnapToPoly<ShStruct0> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct0> x))
    :qid |$Snap.Poly<ShStruct0>To$SnapToPoly<ShStruct0>|
    )))
(declare-fun $SortWrappers.Emb_8_Intbyte$$$_S_$$$To$Snap (Emb_8_Intbyte$$$_S_$$$) $Snap)
(declare-fun $SortWrappers.$SnapToEmb_8_Intbyte$$$_S_$$$ ($Snap) Emb_8_Intbyte$$$_S_$$$)
(assert (forall ((x Emb_8_Intbyte$$$_S_$$$)) (!
    (= x ($SortWrappers.$SnapToEmb_8_Intbyte$$$_S_$$$($SortWrappers.Emb_8_Intbyte$$$_S_$$$To$Snap x)))
    :pattern (($SortWrappers.Emb_8_Intbyte$$$_S_$$$To$Snap x))
    :qid |$Snap.$SnapToEmb_8_Intbyte$$$_S_$$$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Emb_8_Intbyte$$$_S_$$$To$Snap($SortWrappers.$SnapToEmb_8_Intbyte$$$_S_$$$ x)))
    :pattern (($SortWrappers.$SnapToEmb_8_Intbyte$$$_S_$$$ x))
    :qid |$Snap.Emb_8_Intbyte$$$_S_$$$To$SnapToEmb_8_Intbyte$$$_S_$$$|
    )))
(declare-fun $SortWrappers.IntWellFoundedOrderTo$Snap (IntWellFoundedOrder) $Snap)
(declare-fun $SortWrappers.$SnapToIntWellFoundedOrder ($Snap) IntWellFoundedOrder)
(assert (forall ((x IntWellFoundedOrder)) (!
    (= x ($SortWrappers.$SnapToIntWellFoundedOrder($SortWrappers.IntWellFoundedOrderTo$Snap x)))
    :pattern (($SortWrappers.IntWellFoundedOrderTo$Snap x))
    :qid |$Snap.$SnapToIntWellFoundedOrderTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntWellFoundedOrderTo$Snap($SortWrappers.$SnapToIntWellFoundedOrder x)))
    :pattern (($SortWrappers.$SnapToIntWellFoundedOrder x))
    :qid |$Snap.IntWellFoundedOrderTo$SnapToIntWellFoundedOrder|
    )))
(declare-fun $SortWrappers.Tuple2<Ref~_Types>To$Snap (Tuple2<Ref~_Types>) $Snap)
(declare-fun $SortWrappers.$SnapToTuple2<Ref~_Types> ($Snap) Tuple2<Ref~_Types>)
(assert (forall ((x Tuple2<Ref~_Types>)) (!
    (= x ($SortWrappers.$SnapToTuple2<Ref~_Types>($SortWrappers.Tuple2<Ref~_Types>To$Snap x)))
    :pattern (($SortWrappers.Tuple2<Ref~_Types>To$Snap x))
    :qid |$Snap.$SnapToTuple2<Ref~_Types>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Tuple2<Ref~_Types>To$Snap($SortWrappers.$SnapToTuple2<Ref~_Types> x)))
    :pattern (($SortWrappers.$SnapToTuple2<Ref~_Types> x))
    :qid |$Snap.Tuple2<Ref~_Types>To$SnapToTuple2<Ref~_Types>|
    )))
(declare-fun $SortWrappers.ComparableInterfaceDomainTo$Snap (ComparableInterfaceDomain) $Snap)
(declare-fun $SortWrappers.$SnapToComparableInterfaceDomain ($Snap) ComparableInterfaceDomain)
(assert (forall ((x ComparableInterfaceDomain)) (!
    (= x ($SortWrappers.$SnapToComparableInterfaceDomain($SortWrappers.ComparableInterfaceDomainTo$Snap x)))
    :pattern (($SortWrappers.ComparableInterfaceDomainTo$Snap x))
    :qid |$Snap.$SnapToComparableInterfaceDomainTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ComparableInterfaceDomainTo$Snap($SortWrappers.$SnapToComparableInterfaceDomain x)))
    :pattern (($SortWrappers.$SnapToComparableInterfaceDomain x))
    :qid |$Snap.ComparableInterfaceDomainTo$SnapToComparableInterfaceDomain|
    )))
(declare-fun $SortWrappers.Poly<Int>To$Snap (Poly<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<Int> ($Snap) Poly<Int>)
(assert (forall ((x Poly<Int>)) (!
    (= x ($SortWrappers.$SnapToPoly<Int>($SortWrappers.Poly<Int>To$Snap x)))
    :pattern (($SortWrappers.Poly<Int>To$Snap x))
    :qid |$Snap.$SnapToPoly<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<Int>To$Snap($SortWrappers.$SnapToPoly<Int> x)))
    :pattern (($SortWrappers.$SnapToPoly<Int> x))
    :qid |$Snap.Poly<Int>To$SnapToPoly<Int>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap (Equality<ShStruct1<ShStruct2<Ref~_Ref>>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct1<ShStruct2<Ref~_Ref>>> ($Snap) Equality<ShStruct1<ShStruct2<Ref~_Ref>>>)
(assert (forall ((x Equality<ShStruct1<ShStruct2<Ref~_Ref>>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct1<ShStruct2<Ref~_Ref>>>($SortWrappers.Equality<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct1<ShStruct2<Ref~_Ref>>>To$Snap($SortWrappers.$SnapToEquality<ShStruct1<ShStruct2<Ref~_Ref>>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct1<ShStruct2<Ref~_Ref>>> x))
    :qid |$Snap.Equality<ShStruct1<ShStruct2<Ref~_Ref>>>To$SnapToEquality<ShStruct1<ShStruct2<Ref~_Ref>>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap (Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($Snap) Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)
(assert (forall ((x Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>($SortWrappers.Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$Snap($SortWrappers.$SnapToEquality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> x))
    :qid |$Snap.Equality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>To$SnapToEquality<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap (Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> ($Snap) Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>)
(assert (forall ((x Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>($SortWrappers.Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> x))
    :qid |$Snap.Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>To$SnapToPoly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>To$Snap (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref> ($Snap) ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(assert (forall ((x ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>($SortWrappers.ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref> x))
    :qid |$Snap.ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>To$SnapToShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>|
    )))
(declare-fun $SortWrappers.Emb_8_Intbyte$$$$_E_$$$To$Snap (Emb_8_Intbyte$$$$_E_$$$) $Snap)
(declare-fun $SortWrappers.$SnapToEmb_8_Intbyte$$$$_E_$$$ ($Snap) Emb_8_Intbyte$$$$_E_$$$)
(assert (forall ((x Emb_8_Intbyte$$$$_E_$$$)) (!
    (= x ($SortWrappers.$SnapToEmb_8_Intbyte$$$$_E_$$$($SortWrappers.Emb_8_Intbyte$$$$_E_$$$To$Snap x)))
    :pattern (($SortWrappers.Emb_8_Intbyte$$$$_E_$$$To$Snap x))
    :qid |$Snap.$SnapToEmb_8_Intbyte$$$$_E_$$$To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Emb_8_Intbyte$$$$_E_$$$To$Snap($SortWrappers.$SnapToEmb_8_Intbyte$$$$_E_$$$ x)))
    :pattern (($SortWrappers.$SnapToEmb_8_Intbyte$$$$_E_$$$ x))
    :qid |$Snap.Emb_8_Intbyte$$$$_E_$$$To$SnapToEmb_8_Intbyte$$$$_E_$$$|
    )))
(declare-fun $SortWrappers.Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap (Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Snap) Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>($SortWrappers.Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>To$SnapToEquality<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>To$Snap (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$> ($Snap) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(assert (forall ((x ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
    (= x ($SortWrappers.$SnapToShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>($SortWrappers.ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>To$Snap x)))
    :pattern (($SortWrappers.ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>To$Snap x))
    :qid |$Snap.$SnapToShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>To$Snap($SortWrappers.$SnapToShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$> x)))
    :pattern (($SortWrappers.$SnapToShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$> x))
    :qid |$Snap.ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>To$SnapToShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct2<Ref~_Ref>>To$Snap (Poly<ShStruct2<Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct2<Ref~_Ref>> ($Snap) Poly<ShStruct2<Ref~_Ref>>)
(assert (forall ((x Poly<ShStruct2<Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct2<Ref~_Ref>>($SortWrappers.Poly<ShStruct2<Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct2<Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct2<Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct2<Ref~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct2<Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct2<Ref~_Ref>> x))
    :qid |$Snap.Poly<ShStruct2<Ref~_Ref>>To$SnapToPoly<ShStruct2<Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Poly<ShStruct3<Ref~_Ref~_Ref>>To$Snap (Poly<ShStruct3<Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToPoly<ShStruct3<Ref~_Ref~_Ref>> ($Snap) Poly<ShStruct3<Ref~_Ref~_Ref>>)
(assert (forall ((x Poly<ShStruct3<Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToPoly<ShStruct3<Ref~_Ref~_Ref>>($SortWrappers.Poly<ShStruct3<Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Poly<ShStruct3<Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToPoly<ShStruct3<Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Poly<ShStruct3<Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToPoly<ShStruct3<Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToPoly<ShStruct3<Ref~_Ref~_Ref>> x))
    :qid |$Snap.Poly<ShStruct3<Ref~_Ref~_Ref>>To$SnapToPoly<ShStruct3<Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct3<Ref~_Ref~_Ref>>To$Snap (Equality<ShStruct3<Ref~_Ref~_Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>> ($Snap) Equality<ShStruct3<Ref~_Ref~_Ref>>)
(assert (forall ((x Equality<ShStruct3<Ref~_Ref~_Ref>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>>($SortWrappers.Equality<ShStruct3<Ref~_Ref~_Ref>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct3<Ref~_Ref~_Ref>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct3<Ref~_Ref~_Ref>>To$Snap($SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>> x))
    :qid |$Snap.Equality<ShStruct3<Ref~_Ref~_Ref>>To$SnapToEquality<ShStruct3<Ref~_Ref~_Ref>>|
    )))
(declare-fun $SortWrappers.Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap (Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>) $Snap)
(declare-fun $SortWrappers.$SnapToEquality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> ($Snap) Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>)
(assert (forall ((x Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>)) (!
    (= x ($SortWrappers.$SnapToEquality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>($SortWrappers.Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap x)))
    :pattern (($SortWrappers.Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap x))
    :qid |$Snap.$SnapToEquality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$Snap($SortWrappers.$SnapToEquality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> x)))
    :pattern (($SortWrappers.$SnapToEquality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> x))
    :qid |$Snap.Equality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>To$SnapToEquality<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>>|
    )))
(declare-fun $SortWrappers.ShStruct2<Ref~_Ref>To$Snap (ShStruct2<Ref~_Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToShStruct2<Ref~_Ref> ($Snap) ShStruct2<Ref~_Ref>)
(assert (forall ((x ShStruct2<Ref~_Ref>)) (!
    (= x ($SortWrappers.$SnapToShStruct2<Ref~_Ref>($SortWrappers.ShStruct2<Ref~_Ref>To$Snap x)))
    :pattern (($SortWrappers.ShStruct2<Ref~_Ref>To$Snap x))
    :qid |$Snap.$SnapToShStruct2<Ref~_Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ShStruct2<Ref~_Ref>To$Snap($SortWrappers.$SnapToShStruct2<Ref~_Ref> x)))
    :pattern (($SortWrappers.$SnapToShStruct2<Ref~_Ref> x))
    :qid |$Snap.ShStruct2<Ref~_Ref>To$SnapToShStruct2<Ref~_Ref>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<Intbyte$$$$_E_$$$>To$Snap ($FVF<Intbyte$$$$_E_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap) $FVF<Intbyte$$$$_E_$$$>)
(assert (forall ((x $FVF<Intbyte$$$$_E_$$$>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$>($SortWrappers.$FVF<Intbyte$$$$_E_$$$>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Intbyte$$$$_E_$$$>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Intbyte$$$$_E_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Intbyte$$$$_E_$$$>To$Snap($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> x))
    :qid |$Snap.$FVF<Intbyte$$$$_E_$$$>To$SnapTo$FVF<Intbyte$$$$_E_$$$>|
    )))
(declare-fun $SortWrappers.$FVF<Interfaceempty_interface$$$$_E_$$$>To$Snap ($FVF<Interfaceempty_interface$$$$_E_$$$>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$> ($Snap) $FVF<Interfaceempty_interface$$$$_E_$$$>)
(assert (forall ((x $FVF<Interfaceempty_interface$$$$_E_$$$>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$>($SortWrappers.$FVF<Interfaceempty_interface$$$$_E_$$$>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Interfaceempty_interface$$$$_E_$$$>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Interfaceempty_interface$$$$_E_$$$>To$Snap($SortWrappers.$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$> x))
    :qid |$Snap.$FVF<Interfaceempty_interface$$$$_E_$$$>To$SnapTo$FVF<Interfaceempty_interface$$$$_E_$$$>|
    )))
; ////////// Symbols
(declare-fun Set_in (Slice<Ref> Set<Slice<Ref>>) Bool)
(declare-fun Set_card (Set<Slice<Ref>>) Int)
(declare-const Set_empty Set<Slice<Ref>>)
(declare-fun Set_singleton (Slice<Ref>) Set<Slice<Ref>>)
(declare-fun Set_unionone (Set<Slice<Ref>> Slice<Ref>) Set<Slice<Ref>>)
(declare-fun Set_union (Set<Slice<Ref>> Set<Slice<Ref>>) Set<Slice<Ref>>)
(declare-fun Set_disjoint (Set<Slice<Ref>> Set<Slice<Ref>>) Bool)
(declare-fun Set_difference (Set<Slice<Ref>> Set<Slice<Ref>>) Set<Slice<Ref>>)
(declare-fun Set_intersection (Set<Slice<Ref>> Set<Slice<Ref>>) Set<Slice<Ref>>)
(declare-fun Set_subset (Set<Slice<Ref>> Set<Slice<Ref>>) Bool)
(declare-fun Set_equal (Set<Slice<Ref>> Set<Slice<Ref>>) Bool)
(declare-fun Set_in (Tuple2<Ref~_Types> Set<Tuple2<Ref~_Types>>) Bool)
(declare-fun Set_card (Set<Tuple2<Ref~_Types>>) Int)
(declare-const Set_empty Set<Tuple2<Ref~_Types>>)
(declare-fun Set_singleton (Tuple2<Ref~_Types>) Set<Tuple2<Ref~_Types>>)
(declare-fun Set_unionone (Set<Tuple2<Ref~_Types>> Tuple2<Ref~_Types>) Set<Tuple2<Ref~_Types>>)
(declare-fun Set_union (Set<Tuple2<Ref~_Types>> Set<Tuple2<Ref~_Types>>) Set<Tuple2<Ref~_Types>>)
(declare-fun Set_disjoint (Set<Tuple2<Ref~_Types>> Set<Tuple2<Ref~_Types>>) Bool)
(declare-fun Set_difference (Set<Tuple2<Ref~_Types>> Set<Tuple2<Ref~_Types>>) Set<Tuple2<Ref~_Types>>)
(declare-fun Set_intersection (Set<Tuple2<Ref~_Types>> Set<Tuple2<Ref~_Types>>) Set<Tuple2<Ref~_Types>>)
(declare-fun Set_subset (Set<Tuple2<Ref~_Types>> Set<Tuple2<Ref~_Types>>) Bool)
(declare-fun Set_equal (Set<Tuple2<Ref~_Types>> Set<Tuple2<Ref~_Types>>) Bool)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_disjoint (Set<Int> Set<Int>) Bool)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun eq<Bool> (ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref> ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) Bool)
(declare-fun ShStructget4of5<Ref> (ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget0of5<ShStruct2<Ref~_Ref>> (ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) ShStruct2<Ref~_Ref>)
(declare-fun ShStructrev3of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev1of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev4of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget1of5<Ref> (ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev2of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget3of5<Ref> (ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (ShStruct2<Ref~_Ref>) ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget2of5<Ref> (ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun box_Poly<Ref> (ShStruct2<ShStruct2<Ref~_Ref>~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> ($Ref) ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)
(declare-fun ShStructget4of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget10of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev4of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev10of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev13of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget5of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStruct2<Ref~_Ref>) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev2of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev1of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget6of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev15of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget7of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev14of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget8of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev7of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget2of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget11of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev12of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev11of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget3of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev9of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev8of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev5of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev3of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget16of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget14of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget13of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev16of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev6of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget9of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget12of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget0of17<ShStruct2<Ref~_Ref>> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) ShStruct2<Ref~_Ref>)
(declare-fun ShStructget1of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget15of17<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun box_Poly<Ref> (ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) $Ref)
(declare-fun unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> ($Ref) ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun box_Poly<Ref> (ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)
(declare-fun eq<Bool> (ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) Bool)
(declare-fun ShStructget1of2<Ref> (ShStruct2<ShStruct2<Ref~_Ref>~_Ref>) $Ref)
(declare-fun ShStructget0of2<ShStruct2<Ref~_Ref>> (ShStruct2<ShStruct2<Ref~_Ref>~_Ref>) ShStruct2<Ref~_Ref>)
(declare-fun ShStructrev1of2<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> ($Ref) ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)
(declare-fun ShStructrev0of2<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> (ShStruct2<Ref~_Ref>) ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)
(declare-fun box_Poly<Ref> (Tuple0) $Ref)
(declare-fun unbox_Poly<Tuple0> ($Ref) Tuple0)
(declare-fun box_Poly<Ref> (Slice<Ref>) $Ref)
(declare-fun unbox_Poly<Slice<Ref>> ($Ref) Slice<Ref>)
(declare-fun box_Poly<Ref> (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> ($Ref) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun eq<Bool> (ShStruct4<Ref~_Ref~_Ref~_Ref> ShStruct4<Ref~_Ref~_Ref~_Ref>) Bool)
(declare-fun box_Poly<Ref> (ShStruct3<Ref~_Ref~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct3<Ref~_Ref~_Ref>> ($Ref) ShStruct3<Ref~_Ref~_Ref>)
(declare-fun box_Poly<Ref> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun eq<Bool> (ShStruct2<Ref~_Ref> ShStruct2<Ref~_Ref>) Bool)
(declare-fun tuple2<Tuple2<Ref~_Types>> ($Ref Types) Tuple2<Ref~_Types>)
(declare-fun get0of2<Ref> (Tuple2<Ref~_Types>) $Ref)
(declare-fun get1of2<Types> (Tuple2<Ref~_Types>) Types)
(declare-fun eq<Bool> (ShStruct2<ShStruct2<Ref~_Ref>~_Ref> ShStruct2<ShStruct2<Ref~_Ref>~_Ref>) Bool)
(declare-fun eq<Bool> (ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref> ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>) Bool)
(declare-fun eq<Bool> (ShStruct1<ShStruct2<Ref~_Ref>> ShStruct1<ShStruct2<Ref~_Ref>>) Bool)
(declare-fun ShStructget1of2<Ref> (ShStruct2<Ref~_Ref>) $Ref)
(declare-fun ShStructget0of2<Ref> (ShStruct2<Ref~_Ref>) $Ref)
(declare-fun ShStructrev1of2<ShStruct2<Ref~_Ref>> ($Ref) ShStruct2<Ref~_Ref>)
(declare-fun ShStructrev0of2<ShStruct2<Ref~_Ref>> ($Ref) ShStruct2<Ref~_Ref>)
(declare-fun eq<Bool> (ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref> ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) Bool)
(declare-fun eq<Bool> (ShStruct0 ShStruct0) Bool)
(declare-fun ShStructget2of3<Ref> (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev1of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> ($Ref) ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(declare-fun ShStructrev2of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> ($Ref) ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(declare-fun ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)
(declare-fun ShStructget1of3<Ref> (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>) ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(declare-fun sarray<ShArray<Ref>> (Slice<Ref>) ShArray<Ref>)
(declare-fun scap<Int> (Slice<Ref>) Int)
(declare-fun soffset<Int> (Slice<Ref>) Int)
(declare-fun smake<Slice<Ref>> (ShArray<Ref> Int Int Int) Slice<Ref>)
(declare-fun slen<Int> (Slice<Ref>) Int)
(declare-fun eq<Bool> (ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref> ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) Bool)
(declare-fun decreasing<Bool> (Int Int) Bool)
(declare-fun bounded<Bool> (Int) Bool)
(declare-fun ShArrayloc<Ref> (ShArray<Ref> Int) $Ref)
(declare-fun ShArraysecond<Int> ($Ref) Int)
(declare-fun ShArrayfirst<ShArray<Ref>> ($Ref) ShArray<Ref>)
(declare-fun ShArraylen<Int> (ShArray<Ref>) Int)
(declare-fun ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> (ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>) Emb_3_Intuint8$$$_S_$$$)
(declare-fun ShStructrev1of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> ($Ref) ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)
(declare-fun ShStructrev2of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> (Emb_3_Intuint8$$$_S_$$$) ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)
(declare-fun ShStructget0of3<Ref> (ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>) $Ref)
(declare-fun ShStructget1of3<Ref> (ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>) $Ref)
(declare-fun ShStructrev0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> ($Ref) ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)
(declare-fun comparableInterface<Bool> (Tuple2<Ref~_Types>) Bool)
(declare-fun box_Poly<Ref> (ShStruct2<Ref~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct2<Ref~_Ref>> ($Ref) ShStruct2<Ref~_Ref>)
(declare-fun eq<Bool> (ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$> ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>) Bool)
(declare-fun ShStructget2of3<Ref> (ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev1of3<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> ($Ref) ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)
(declare-fun ShStructrev2of3<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> ($Ref) ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)
(declare-fun ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(declare-fun ShStructget1of3<Ref> (ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of3<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)
(declare-fun box_Poly<Ref> (ShStruct1<ShStruct2<Ref~_Ref>>) $Ref)
(declare-fun unbox_Poly<ShStruct1<ShStruct2<Ref~_Ref>>> ($Ref) ShStruct1<ShStruct2<Ref~_Ref>>)
(declare-fun eq<Bool> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$> ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) Bool)
(declare-fun ShStructget2of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShStructrev1of3<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun ShStructrev2of3<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> (ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget1of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShStructrev0of3<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (ShStruct4<Ref~_Ref~_Ref~_Ref>) ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)
(declare-fun eq<Bool> (ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref> ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>) Bool)
(declare-fun eq<Bool> (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref> ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) Bool)
(declare-const SCMPEcho_840d9458_T_Types<Types> Types)
(declare-const Decoded_daeaf66a_T_Types_tag<Int> Int)
(declare-const LayerType_b41831d7_T_Types<Types> Types)
(declare-const Y$558431e4_a6ceb89d__Types<Types> Types)
(declare-const SCMPPacketTooBig_840d9458_T_Types_tag<Int> Int)
(declare-const Y$c2e55be_72f0d887__Types<Types> Types)
(declare-const Y$35202e5_cd675838__Types_tag<Int> Int)
(declare-const Y$17800ab4_b41831d7__Types_tag<Int> Int)
(declare-const Path_c6e60a1d_T_Types_tag<Int> Int)
(declare-const byte_Types_tag<Int> Int)
(declare-const UDPAddr_5c610647_T_Types_tag<Int> Int)
(declare-const pointer_Types_tag<Int> Int)
(declare-const SCMPEcho_840d9458_T_Types_tag<Int> Int)
(declare-const Y$60c7bddc_b41831d7__Types_tag<Int> Int)
(declare-fun get_0_pointer_Types<Types> (Types) Types)
(declare-const Y$53a71dc3_5c610647__Types_tag<Int> Int)
(declare-const HostSVC_cd675838_T_Types<Types> Types)
(declare-fun slice_Types<Types> (Types) Types)
(declare-const Path_c385169_T_Types<Types> Types)
(declare-const Y$68d3cee9_b41831d7__Types<Types> Types)
(declare-const nilDecodeFeedback_b41831d7_T_Types_tag<Int> Int)
(declare-const Y$17800ab4_b41831d7__Types<Types> Types)
(declare-const HostIPv6_cd675838_T_Types<Types> Types)
(declare-const SCMPTraceroute_840d9458_T_Types<Types> Types)
(declare-const Y$8f734176_14a7fb6d__Types<Types> Types)
(declare-const Path_c6e60a1d_T_Types<Types> Types)
(declare-fun comparableType_Types<Bool> (Types) Bool)
(declare-const bigEndian_72f0d887_T_Types_tag<Int> Int)
(declare-const SCION_840d9458_T_Types<Types> Types)
(declare-const Y$49c4c25f_d3743b4f__Types_tag<Int> Int)
(declare-const Payload_b41831d7_T_Types<Types> Types)
(declare-const HostIPv6_cd675838_T_Types_tag<Int> Int)
(declare-const HostIPv4_cd675838_T_Types<Types> Types)
(declare-const SCMPDestinationUnreachable_840d9458_T_Types<Types> Types)
(declare-const AddrType_840d9458_T_Types_tag<Int> Int)
(declare-const HostIPv4_cd675838_T_Types_tag<Int> Int)
(declare-const BFD_6416454f_T_Types_tag<Int> Int)
(declare-const Y$53a71dc3_5c610647__Types<Types> Types)
(declare-const Path_4cddb96f_T_Types<Types> Types)
(declare-const SCMPTypeCode_840d9458_T_Types<Types> Types)
(declare-const EndToEndExtn_840d9458_T_Types_tag<Int> Int)
(declare-const L4ProtocolType_840d9458_T_Types_tag<Int> Int)
(declare-const SCMPType_840d9458_T_Types_tag<Int> Int)
(declare-const EndToEndExtn_840d9458_T_Types<Types> Types)
(declare-const Y$9127f611_b41831d7__Types_tag<Int> Int)
(declare-const SCMPDestinationUnreachable_840d9458_T_Types_tag<Int> Int)
(declare-const littleEndian_72f0d887_T_Types_tag<Int> Int)
(declare-const HopByHopExtnSkipper_840d9458_T_Types_tag<Int> Int)
(declare-const Y$8f734176_14a7fb6d__Types_tag<Int> Int)
(declare-const Y$febd64e7_b41831d7__Types_tag<Int> Int)
(declare-const uint16_Types_tag<Int> Int)
(declare-const HostSVC_cd675838_T_Types_tag<Int> Int)
(declare-const Raw_daeaf66a_T_Types_tag<Int> Int)
(declare-const SCMPTraceroute_840d9458_T_Types_tag<Int> Int)
(declare-const IA_cd675838_T_Types_tag<Int> Int)
(declare-const SCMPTypeCode_840d9458_T_Types_tag<Int> Int)
(declare-const Decoded_daeaf66a_T_Types<Types> Types)
(declare-const Y$558431e4_a6ceb89d__Types_tag<Int> Int)
(declare-const bigEndian_72f0d887_T_Types<Types> Types)
(declare-const string_Types<Types> Types)
(declare-const Path_c385169_T_Types_tag<Int> Int)
(declare-const IPAddr_5c610647_T_Types<Types> Types)
(declare-const L4ProtocolType_840d9458_T_Types<Types> Types)
(declare-const Y$9c78df5f_b41831d7__Types_tag<Int> Int)
(declare-const SCMP_840d9458_T_Types_tag<Int> Int)
(declare-const rawPath_a6ceb89d_T_Types_tag<Int> Int)
(declare-const Y$68d3cee9_b41831d7__Types_tag<Int> Int)
(declare-const SCMPCode_840d9458_T_Types<Types> Types)
(declare-const Y$b28ae4_ac87dd1d__Types<Types> Types)
(declare-const Y$b28ae4_ac87dd1d__Types_tag<Int> Int)
(declare-const SCMP_840d9458_T_Types<Types> Types)
(declare-fun pointer_Types<Types> (Types) Types)
(declare-const Path_4cddb96f_T_Types_tag<Int> Int)
(declare-const HostNone_cd675838_T_Types_tag<Int> Int)
(declare-const Y$6914870a_b41831d7__Types_tag<Int> Int)
(declare-const Y$6914870a_b41831d7__Types<Types> Types)
(declare-fun tag_Types<Int> (Types) Int)
(declare-const rawPath_a6ceb89d_T_Types<Types> Types)
(declare-const Y$49c4c25f_d3743b4f__Types<Types> Types)
(declare-const EndToEndExtnSkipper_840d9458_T_Types<Types> Types)
(declare-const int_Types<Types> Types)
(declare-const Y$60c7bddc_b41831d7__Types<Types> Types)
(declare-const uint16_Types<Types> Types)
(declare-const integer_Types<Types> Types)
(declare-const Payload_b41831d7_T_Types_tag<Int> Int)
(declare-const Y$3191b69e_b41831d7__Types_tag<Int> Int)
(declare-const HopByHopExtn_840d9458_T_Types_tag<Int> Int)
(declare-const Y$9127f611_b41831d7__Types<Types> Types)
(declare-const littleEndian_72f0d887_T_Types<Types> Types)
(declare-const string_Types_tag<Int> Int)
(declare-const Y$febd64e7_b41831d7__Types<Types> Types)
(declare-const SCMPParameterProblem_840d9458_T_Types_tag<Int> Int)
(declare-const IA_cd675838_T_Types<Types> Types)
(declare-const AS_cd675838_T_Types<Types> Types)
(declare-const LayerType_b41831d7_T_Types_tag<Int> Int)
(declare-const Y$c2e55be_72f0d887__Types_tag<Int> Int)
(declare-const slice_Types_tag<Int> Int)
(declare-const SCMPParameterProblem_840d9458_T_Types<Types> Types)
(declare-const nil_Types<Types> Types)
(declare-const BFD_6416454f_T_Types<Types> Types)
(declare-const nilDecodeFeedback_b41831d7_T_Types<Types> Types)
(declare-const Y$3191b69e_b41831d7__Types<Types> Types)
(declare-const SCMPInternalConnectivityDown_840d9458_T_Types_tag<Int> Int)
(declare-const Raw_daeaf66a_T_Types<Types> Types)
(declare-const SCMPExternalInterfaceDown_840d9458_T_Types<Types> Types)
(declare-const empty_interface_Types<Types> Types)
(declare-const HostNone_cd675838_T_Types<Types> Types)
(declare-const SCMPInternalConnectivityDown_840d9458_T_Types<Types> Types)
(declare-const SCMPExternalInterfaceDown_840d9458_T_Types_tag<Int> Int)
(declare-const HopByHopExtnSkipper_840d9458_T_Types<Types> Types)
(declare-const EndToEndExtnSkipper_840d9458_T_Types_tag<Int> Int)
(declare-const nil_Types_tag<Int> Int)
(declare-const SCMPPacketTooBig_840d9458_T_Types<Types> Types)
(declare-const IPAddr_5c610647_T_Types_tag<Int> Int)
(declare-const empty_interface_Types_tag<Int> Int)
(declare-const AddrType_840d9458_T_Types<Types> Types)
(declare-fun behavioral_subtype_Types<Bool> (Types Types) Bool)
(declare-const int_Types_tag<Int> Int)
(declare-const byte_Types<Types> Types)
(declare-const HopByHopExtn_840d9458_T_Types<Types> Types)
(declare-const UDPAddr_5c610647_T_Types<Types> Types)
(declare-const SCMPType_840d9458_T_Types<Types> Types)
(declare-const integer_Types_tag<Int> Int)
(declare-const SCMPCode_840d9458_T_Types_tag<Int> Int)
(declare-const Y$35202e5_cd675838__Types<Types> Types)
(declare-const SCION_840d9458_T_Types_tag<Int> Int)
(declare-const Y$9c78df5f_b41831d7__Types<Types> Types)
(declare-const AS_cd675838_T_Types_tag<Int> Int)
(declare-fun ShStructget1of6<Ref> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) $Ref)
(declare-fun ShStructget0of6<Ref> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) $Ref)
(declare-fun ShStructrev3of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Ref) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShStructrev4of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Ref) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShStructget5of6<Emb_6_Intbyte$$$_S_$$$> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) Emb_6_Intbyte$$$_S_$$$)
(declare-fun ShStructget3of6<Ref> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) $Ref)
(declare-fun ShStructget2of6<Ref> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) $Ref)
(declare-fun ShStructrev0of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Ref) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShStructrev2of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Ref) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShStructrev1of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> ($Ref) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShStructrev5of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (Emb_6_Intbyte$$$_S_$$$) ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)
(declare-fun ShStructget4of6<Ref> (ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) $Ref)
(declare-const stringLit61646472<Int> Int)
(declare-const stringLit65326520657874656e73696f6e206d757374206e6f7420636f6d65206265666f7265207468652048424820657874656e73696f6e<Int> Int)
(declare-const stringLit5468757273646179<Int> Int)
(declare-const stringLit5765646e6573646179<Int> Int)
(declare-const stringLit496e76616c6964536f7572636541646472657373<Int> Int)
(declare-const stringLit45787465726e616c496e74657266616365446f776e<Int> Int)
(declare-const stringLit556e6b6e6f776e4e65787448647254797065<Int> Int)
(declare-const stringLit736f757263652061646472657373206d697373696e67<Int> Int)
(declare-const stringLit6970<Int> Int)
(declare-const stringLit756e737570706f72746564206164647265737320747970652f6c656e67746820636f6d62696e6174696f6e<Int> Int)
(declare-const stringLit556e6b6e6f776e486f704279486f704f7074696f6e<Int> Int)
(declare-const stringLit696e76616c696420657874656e73696f6e206865616465722e20<Int> Int)
(declare-const stringLit7061636b65742069732073686f72746572207468616e2074686520636f6d6d6f6e20686561646572206c656e677468<Int> Int)
(declare-const stringLit44657374696e6174696f6e556e726561636861626c65<Int> Int)
(declare-const stringLit62756666657220746f6f2073686f7274<Int> Int)
(declare-const stringLit5472616365726f7574655265706c79<Int> Int)
(declare-const stringLit496e76616c6964457874656e73696f6e486561646572<Int> Int)
(declare-const stringLit5343494f4e20686561646572206d697373696e67<Int> Int)
(declare-const stringLit616464724864724c656e<Int> Int)
(declare-const stringLit4e6f6e65<Int> Int)
(declare-const stringLit6d696e696e756d5f6c65677468<Int> Int)
(declare-const stringLit5061746845787069726564<Int> Int)
(declare-const stringLit4563686f5265706c79<Int> Int)
(declare-const stringLit4f63746f626572<Int> Int)
(declare-const stringLit6864724279746573<Int> Int)
(declare-const stringLit496e76616c6964486f704669656c644d4143<Int> Int)
(declare-const stringLit65326520657874656e73696f6e206d757374206e6f74206265207265706561746564<Int> Int)
(declare-const stringLit496e76616c69645365676d656e744368616e6765<Int> Int)
(declare-const stringLit5061636b6574546f6f426967<Int> Int)
(declare-const stringLit62696e6172792e4c6974746c65456e6469616e<Int> Int)
(declare-const stringLit424644<Int> Int)
(declare-const stringLit556e6b6e6f776e486f704669656c64456772657373496e74657266616365<Int> Int)
(declare-const stringLit696e76616c696420657874656e73696f6e206865616465722e204c656e677468202564206c657373207468616e2032<Int> Int)
(declare-const stringLit496e76616c69645061636b657453697a65<Int> Int)
(declare-const stringLit5472616365726f75746552657175657374<Int> Int)
(declare-const stringLit556e6b6e6f776e5061746854797065<Int> Int)
(declare-const stringLit257328257329<Int> Int)
(declare-const stringLit696e76616c6964206865616465722c206e6567617469766520706174684c656e<Int> Int)
(declare-fun strLen<Int> (Int) Int)
(declare-fun strConcat<Int> (Int Int) Int)
(declare-const stringLit456e6432456e64<Int> Int)
(declare-const stringLit4c6974746c65456e6469616e<Int> Int)
(declare-const stringLit4d6179<Int> Int)
(declare-const stringLit486f704279486f70<Int> Int)
(declare-const stringLit686561646572206c656e6774682065786365656473206d6178696d756d<Int> Int)
(declare-const stringLit6d6178<Int> Int)
(declare-const stringLit4a616e75617279<Int> Int)
(declare-const stringLit417072696c<Int> Int)
(declare-const stringLit4c656e677468202564206c657373207468616e20737065636966696564206c656e677468202564<Int> Int)
(declare-const stringLit256428256429<Int> Int)
(declare-const stringLit4a756e65<Int> Int)
(declare-const stringLit467269646179<Int> Int)
(declare-const stringLit506172616d6574657250726f626c656d<Int> Int)
(declare-const stringLit63616e206e6f742063616c63756c61746520636865636b73756d20776974686f7574205343494f4e20686561646572<Int> Int)
(declare-const stringLit53657074656d626572<Int> Int)
(declare-const stringLit64657374696e6174696f6e2061646472657373206d697373696e67<Int> Int)
(declare-const stringLit496e7465726e616c436f6e6e6563746976697479446f776e<Int> Int)
(declare-const stringLit68626820657874656e73696f6e206d757374206e6f74206265207265706561746564<Int> Int)
(declare-const stringLit426967456e6469616e<Int> Int)
(declare-const stringLit417567757374<Int> Int)
(declare-const stringLit4665627275617279<Int> Int)
(declare-const stringLit446563656d626572<Int> Int)
(declare-const stringLit5343494f4e20657874656e73696f6e2061637475616c206c656e677468206d757374206265206d756c7469706c65206f662034<Int> Int)
(declare-const stringLit556e6b6e6f776e41646472657373466f726d6174<Int> Int)
(declare-const stringLit496e76616c6964436f6d6d6f6e486561646572<Int> Int)
(declare-const stringLit6c656e<Int> Int)
(declare-const stringLit53756e646179<Int> Int)
(declare-const stringLit556e6b6e6f776e5343494f4e56657273696f6e<Int> Int)
(declare-const stringLit6d696e696d756d<Int> Int)
(declare-const stringLit4e6f6e4c6f63616c44656c6976657279<Int> Int)
(declare-const stringLit554e4b4e4f574e2028256429<Int> Int)
(declare-const stringLit5361747572646179<Int> Int)
(declare-const stringLit6578706563746564<Int> Int)
(declare-const stringLit686561646572206c656e677468206973206e6f7420616e20696e7465676572206d756c7469706c65206f66206c696e65206c656e677468<Int> Int)
(declare-const stringLit257328436f64653a20256429<Int> Int)
(declare-const stringLit6d696e<Int> Int)
(declare-const stringLit436d644864724c656e<Int> Int)
(declare-const stringLit70726f76696465642062756666657220697320746f6f20736d616c6c<Int> Int)
(declare-const stringLit4572726f6e656f75734865616465724669656c64<Int> Int)
(declare-const stringLit466c6f7749445265717569726564<Int> Int)
(declare-const stringLit4d6f6e646179<Int> Int)
(declare-const stringLit4a756c79<Int> Int)
(declare-const stringLit756470<Int> Int)
(declare-const stringLit4563686f52657175657374<Int> Int)
(declare-const stringLit<Int> Int)
(declare-const stringLit496e76616c696450617468<Int> Int)
(declare-const stringLit54756573646179<Int> Int)
(declare-const stringLit756e737570706f727465642061646472657373<Int> Int)
(declare-const stringLit544350<Int> Int)
(declare-const stringLit4e6f76656d626572<Int> Int)
(declare-const stringLit556e6b6e6f776e456e64546f456e644f7074696f6e<Int> Int)
(declare-const stringLit74797065<Int> Int)
(declare-const stringLit2573282564295c6e5061796c6f61643a202573<Int> Int)
(declare-const stringLit496e76616c696441646472657373486561646572<Int> Int)
(declare-const stringLit53434d50<Int> Int)
(declare-const stringLit556e6b6e6f776e486f704669656c64496e6772657373496e74657266616365<Int> Int)
(declare-const stringLit4d61726368<Int> Int)
(declare-const stringLit4f7074696f6e206e6f7420666f756e64<Int> Int)
(declare-const stringLit53434d50206c61796572206c656e677468206973206c657373207468656e2034206279746573<Int> Int)
(declare-const stringLit62696e6172792e426967456e6469616e<Int> Int)
(declare-const stringLit554450<Int> Int)
(declare-const stringLit496e76616c696444657374696e6174696f6e41646472657373<Int> Int)
(declare-const stringLit61637475616c<Int> Int)
(declare-fun eq<Bool> (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref> ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) Bool)
(declare-fun ShStructrev1of4<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> ($Ref) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun ShStructget0of4<ShStruct2<Ref~_Ref>> (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) ShStruct2<Ref~_Ref>)
(declare-fun ShStructget2of4<Ref> (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget3of4<Ref> (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev3of4<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> ($Ref) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev2of4<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> ($Ref) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun ShStructget1of4<Ref> (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of4<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (ShStruct2<Ref~_Ref>) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun box_Poly<Ref> (ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> ($Ref) ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)
(declare-fun box_Poly<Ref> (ShStruct0) $Ref)
(declare-fun unbox_Poly<ShStruct0> ($Ref) ShStruct0)
(declare-fun box_Poly<Ref> (ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> ($Ref) ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)
(declare-fun box_Poly<Ref> (ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>) $Ref)
(declare-fun unbox_Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> ($Ref) ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)
(declare-fun ShStructget0of1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev0of1<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)
(declare-fun ShStructget2of3<Ref> (ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev1of3<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> ($Ref) ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)
(declare-fun ShStructrev2of3<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> ($Ref) ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)
(declare-fun ShStructget0of3<ShStruct2<Ref~_Ref>> (ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>) ShStruct2<Ref~_Ref>)
(declare-fun ShStructget1of3<Ref> (ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of3<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> (ShStruct2<Ref~_Ref>) ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)
(declare-fun ShStructget1of2<Ref> (ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) $Ref)
(declare-fun ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)
(declare-fun ShStructrev1of2<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> ($Ref) ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)
(declare-fun ShStructrev0of2<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)
(declare-fun box_Poly<Ref> (Int) $Ref)
(declare-fun unbox_Poly<Int> ($Ref) Int)
(declare-fun eq<Bool> (ShStruct3<Ref~_Ref~_Ref> ShStruct3<Ref~_Ref~_Ref>) Bool)
(declare-fun ShStructrev1of4<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget0of4<Ref> (ShStruct4<Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget2of4<Ref> (ShStruct4<Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget3of4<Ref> (ShStruct4<Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev3of4<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev2of4<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget1of4<Ref> (ShStruct4<Ref~_Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of4<ShStruct4<Ref~_Ref~_Ref~_Ref>> ($Ref) ShStruct4<Ref~_Ref~_Ref~_Ref>)
(declare-fun ShStructget0of1<ShStruct2<Ref~_Ref>> (ShStruct1<ShStruct2<Ref~_Ref>>) ShStruct2<Ref~_Ref>)
(declare-fun ShStructrev0of1<ShStruct1<ShStruct2<Ref~_Ref>>> (ShStruct2<Ref~_Ref>) ShStruct1<ShStruct2<Ref~_Ref>>)
(declare-fun box_Poly<Ref> (ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> ($Ref) ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)
(declare-fun ShStructget1of2<Ref> (ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>) $Ref)
(declare-fun ShStructget0of2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>) ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)
(declare-fun ShStructrev1of2<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> ($Ref) ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)
(declare-fun ShStructrev0of2<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> (ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)
(declare-fun eq<Bool> (ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref> ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) Bool)
(declare-fun ShStructget2of3<Ref> (ShStruct3<Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev1of3<ShStruct3<Ref~_Ref~_Ref>> ($Ref) ShStruct3<Ref~_Ref~_Ref>)
(declare-fun ShStructrev2of3<ShStruct3<Ref~_Ref~_Ref>> ($Ref) ShStruct3<Ref~_Ref~_Ref>)
(declare-fun ShStructget0of3<Ref> (ShStruct3<Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructget1of3<Ref> (ShStruct3<Ref~_Ref~_Ref>) $Ref)
(declare-fun ShStructrev0of3<ShStruct3<Ref~_Ref~_Ref>> ($Ref) ShStruct3<Ref~_Ref~_Ref>)
(declare-fun box_Poly<Ref> (ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) $Ref)
(declare-fun unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> ($Ref) ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)
(declare-fun eq<Bool> (ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>) Bool)
; /field_value_functions_declarations.smt2 [Intbyte$$$$_E_$$$: Int]
(declare-fun $FVF.domain_Intbyte$$$$_E_$$$ ($FVF<Intbyte$$$$_E_$$$>) Set<$Ref>)
(declare-fun $FVF.lookup_Intbyte$$$$_E_$$$ ($FVF<Intbyte$$$$_E_$$$> $Ref) Int)
(declare-fun $FVF.after_Intbyte$$$$_E_$$$ ($FVF<Intbyte$$$$_E_$$$> $FVF<Intbyte$$$$_E_$$$>) Bool)
(declare-fun $FVF.loc_Intbyte$$$$_E_$$$ (Int $Ref) Bool)
(declare-fun $FVF.perm_Intbyte$$$$_E_$$$ ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Intbyte$$$$_E_$$$ $FVF<Intbyte$$$$_E_$$$>)
; /field_value_functions_declarations.smt2 [Interfaceempty_interface$$$$_E_$$$: Tuple2[Ref, Types]]
(declare-fun $FVF.domain_Interfaceempty_interface$$$$_E_$$$ ($FVF<Interfaceempty_interface$$$$_E_$$$>) Set<$Ref>)
(declare-fun $FVF.lookup_Interfaceempty_interface$$$$_E_$$$ ($FVF<Interfaceempty_interface$$$$_E_$$$> $Ref) Tuple2<Ref~_Types>)
(declare-fun $FVF.after_Interfaceempty_interface$$$$_E_$$$ ($FVF<Interfaceempty_interface$$$$_E_$$$> $FVF<Interfaceempty_interface$$$$_E_$$$>) Bool)
(declare-fun $FVF.loc_Interfaceempty_interface$$$$_E_$$$ (Tuple2<Ref~_Types> $Ref) Bool)
(declare-fun $FVF.perm_Interfaceempty_interface$$$$_E_$$$ ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Interfaceempty_interface$$$$_E_$$$ $FVF<Interfaceempty_interface$$$$_E_$$$>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun arrayNil_1_Interfaceempty_interface$$$_S_$$$ ($Snap) ShArray<Ref>)
(declare-fun arrayNil_1_Interfaceempty_interface$$$_S_$$$%limited ($Snap) ShArray<Ref>)
(declare-const arrayNil_1_Interfaceempty_interface$$$_S_$$$%stateless Bool)
(declare-fun arrayNil_1_Interfaceempty_interface$$$_S_$$$%precondition ($Snap) Bool)
(declare-fun unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int ($Snap Emb_8_Intbyte$$$$_E_$$$) Seq<Int>)
(declare-fun unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%limited ($Snap Emb_8_Intbyte$$$$_E_$$$) Seq<Int>)
(declare-fun unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%stateless (Emb_8_Intbyte$$$$_E_$$$) Bool)
(declare-fun unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition ($Snap Emb_8_Intbyte$$$$_E_$$$) Bool)
(declare-fun box_Emb_8_Intbyte$$$$_E_$$$_Seq_Int ($Snap Seq<Int>) Emb_8_Intbyte$$$$_E_$$$)
(declare-fun box_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%limited ($Snap Seq<Int>) Emb_8_Intbyte$$$$_E_$$$)
(declare-fun box_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%stateless (Seq<Int>) Bool)
(declare-fun box_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition ($Snap Seq<Int>) Bool)
(declare-fun shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ ($Snap) ShStruct2<Ref~_Ref>)
(declare-fun shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited ($Snap) ShStruct2<Ref~_Ref>)
(declare-const shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%stateless Bool)
(declare-fun shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition ($Snap) Bool)
(declare-fun box_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref ($Snap ShArray<Ref>) Emb_1_Interfaceempty_interface$$$_S_$$$)
(declare-fun box_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited ($Snap ShArray<Ref>) Emb_1_Interfaceempty_interface$$$_S_$$$)
(declare-fun box_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%stateless (ShArray<Ref>) Bool)
(declare-fun box_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition ($Snap ShArray<Ref>) Bool)
(declare-fun unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref ($Snap Emb_1_Interfaceempty_interface$$$_S_$$$) ShArray<Ref>)
(declare-fun unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited ($Snap Emb_1_Interfaceempty_interface$$$_S_$$$) ShArray<Ref>)
(declare-fun unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%stateless (Emb_1_Interfaceempty_interface$$$_S_$$$) Bool)
(declare-fun unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition ($Snap Emb_1_Interfaceempty_interface$$$_S_$$$) Bool)
(declare-fun arrayNil_8_Intbyte$$$_S_$$$ ($Snap) ShArray<Ref>)
(declare-fun arrayNil_8_Intbyte$$$_S_$$$%limited ($Snap) ShArray<Ref>)
(declare-const arrayNil_8_Intbyte$$$_S_$$$%stateless Bool)
(declare-fun arrayNil_8_Intbyte$$$_S_$$$%precondition ($Snap) Bool)
(declare-fun IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_ ($Snap Tuple2<Ref~_Types>) Bool)
(declare-fun IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%limited ($Snap Tuple2<Ref~_Types>) Bool)
(declare-fun IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%stateless (Tuple2<Ref~_Types>) Bool)
(declare-fun IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%precondition ($Snap Tuple2<Ref~_Types>) Bool)
(declare-fun intShiftLeft ($Snap Int Int) Int)
(declare-fun intShiftLeft%limited ($Snap Int Int) Int)
(declare-fun intShiftLeft%stateless (Int Int) Bool)
(declare-fun intShiftLeft%precondition ($Snap Int Int) Bool)
(declare-fun arrayDefault_8_Intbyte$$$$_E_$$$ ($Snap) Emb_8_Intbyte$$$$_E_$$$)
(declare-fun arrayDefault_8_Intbyte$$$$_E_$$$%limited ($Snap) Emb_8_Intbyte$$$$_E_$$$)
(declare-const arrayDefault_8_Intbyte$$$$_E_$$$%stateless Bool)
(declare-fun arrayDefault_8_Intbyte$$$$_E_$$$%precondition ($Snap) Bool)
(declare-fun intShiftRight ($Snap Int Int) Int)
(declare-fun intShiftRight%limited ($Snap Int Int) Int)
(declare-fun intShiftRight%stateless (Int Int) Bool)
(declare-fun intShiftRight%precondition ($Snap Int Int) Bool)
(declare-fun intBitwiseAnd ($Snap Int Int) Int)
(declare-fun intBitwiseAnd%limited ($Snap Int Int) Int)
(declare-fun intBitwiseAnd%stateless (Int Int) Bool)
(declare-fun intBitwiseAnd%precondition ($Snap Int Int) Bool)
(declare-fun shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$ ($Snap) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-fun shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%limited ($Snap) ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-const shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%stateless Bool)
(declare-fun shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%precondition ($Snap) Bool)
(declare-fun sadd ($Snap Int Int) Int)
(declare-fun sadd%limited ($Snap Int Int) Int)
(declare-fun sadd%stateless (Int Int) Bool)
(declare-fun sadd%precondition ($Snap Int Int) Bool)
(declare-fun sliceDefault_Interfaceempty_interface$$$_S_$$$ ($Snap) Slice<Ref>)
(declare-fun sliceDefault_Interfaceempty_interface$$$_S_$$$%limited ($Snap) Slice<Ref>)
(declare-const sliceDefault_Interfaceempty_interface$$$_S_$$$%stateless Bool)
(declare-fun sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition ($Snap) Bool)
(declare-fun ssliceFromArray_Ref ($Snap ShArray<Ref> Int Int) Slice<Ref>)
(declare-fun ssliceFromArray_Ref%limited ($Snap ShArray<Ref> Int Int) Slice<Ref>)
(declare-fun ssliceFromArray_Ref%stateless (ShArray<Ref> Int Int) Bool)
(declare-fun ssliceFromArray_Ref%precondition ($Snap ShArray<Ref> Int Int) Bool)
(declare-fun box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref ($Snap ShArray<Ref>) Emb_8_Intbyte$$$_S_$$$)
(declare-fun box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%limited ($Snap ShArray<Ref>) Emb_8_Intbyte$$$_S_$$$)
(declare-fun box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%stateless (ShArray<Ref>) Bool)
(declare-fun box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition ($Snap ShArray<Ref>) Bool)
(declare-fun unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref ($Snap Emb_8_Intbyte$$$_S_$$$) ShArray<Ref>)
(declare-fun unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%limited ($Snap Emb_8_Intbyte$$$_S_$$$) ShArray<Ref>)
(declare-fun unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%stateless (Emb_8_Intbyte$$$_S_$$$) Bool)
(declare-fun unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition ($Snap Emb_8_Intbyte$$$_S_$$$) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun AbsSlice_Bytes_e630ae22_F%trigger ($Snap Slice<Ref> Int Int) Bool)
(declare-fun ErrorMem_a4af0e5e_SY$c04328b0_a4af0e5e_%trigger ($Snap Tuple2<Ref~_Types>) Bool)
; ////////// Uniqueness assumptions from domains
(assert (distinct HostNone_cd675838_T_Types_tag<Int> stringLit53434d50<Int> stringLit6d696e696e756d5f6c65677468<Int> empty_interface_Types_tag<Int> stringLit54756573646179<Int> Y$febd64e7_b41831d7__Types_tag<Int> stringLit556e6b6e6f776e5343494f4e56657273696f6e<Int> stringLit5061746845787069726564<Int> Y$8f734176_14a7fb6d__Types_tag<Int> Y$60c7bddc_b41831d7__Types_tag<Int> stringLit65326520657874656e73696f6e206d757374206e6f7420636f6d65206265666f7265207468652048424820657874656e73696f6e<Int> stringLit696e76616c696420657874656e73696f6e206865616465722e204c656e677468202564206c657373207468616e2032<Int> stringLit686561646572206c656e6774682065786365656473206d6178696d756d<Int> stringLit62696e6172792e4c6974746c65456e6469616e<Int> stringLit4f7074696f6e206e6f7420666f756e64<Int> stringLit4d61726368<Int> stringLit6864724279746573<Int> HopByHopExtn_840d9458_T_Types_tag<Int> stringLit4563686f52657175657374<Int> stringLit496e76616c696441646472657373486561646572<Int> stringLit467269646179<Int> stringLit5765646e6573646179<Int> stringLit256428256429<Int> stringLit556e6b6e6f776e41646472657373466f726d6174<Int> Y$9127f611_b41831d7__Types_tag<Int> stringLit4e6f6e4c6f63616c44656c6976657279<Int> stringLit556e6b6e6f776e5061746854797065<Int> Y$b28ae4_ac87dd1d__Types_tag<Int> bigEndian_72f0d887_T_Types_tag<Int> stringLit486f704279486f70<Int> stringLit736f757263652061646472657373206d697373696e67<Int> stringLit53657074656d626572<Int> stringLit686561646572206c656e677468206973206e6f7420616e20696e7465676572206d756c7469706c65206f66206c696e65206c656e677468<Int> HopByHopExtnSkipper_840d9458_T_Types_tag<Int> Payload_b41831d7_T_Types_tag<Int> Y$49c4c25f_d3743b4f__Types_tag<Int> stringLit756470<Int> stringLit<Int> stringLit417072696c<Int> stringLit544350<Int> EndToEndExtn_840d9458_T_Types_tag<Int> stringLit4e6f76656d626572<Int> stringLit4c656e677468202564206c657373207468616e20737065636966696564206c656e677468202564<Int> stringLit5061636b6574546f6f426967<Int> Path_c6e60a1d_T_Types_tag<Int> stringLit62696e6172792e426967456e6469616e<Int> LayerType_b41831d7_T_Types_tag<Int> pointer_Types_tag<Int> SCMPExternalInterfaceDown_840d9458_T_Types_tag<Int> stringLit7061636b65742069732073686f72746572207468616e2074686520636f6d6d6f6e20686561646572206c656e677468<Int> Y$9c78df5f_b41831d7__Types_tag<Int> Y$558431e4_a6ceb89d__Types_tag<Int> stringLit554e4b4e4f574e2028256429<Int> stringLit5343494f4e20686561646572206d697373696e67<Int> stringLit4665627275617279<Int> stringLit4e6f6e65<Int> SCMPTypeCode_840d9458_T_Types_tag<Int> SCMPType_840d9458_T_Types_tag<Int> stringLit4f63746f626572<Int> stringLit5343494f4e20657874656e73696f6e2061637475616c206c656e677468206d757374206265206d756c7469706c65206f662034<Int> IPAddr_5c610647_T_Types_tag<Int> stringLit4a756c79<Int> AddrType_840d9458_T_Types_tag<Int> Path_c385169_T_Types_tag<Int> stringLit496e7465726e616c436f6e6e6563746976697479446f776e<Int> stringLit70726f76696465642062756666657220697320746f6f20736d616c6c<Int> stringLit257328257329<Int> SCMPInternalConnectivityDown_840d9458_T_Types_tag<Int> Decoded_daeaf66a_T_Types_tag<Int> HostIPv4_cd675838_T_Types_tag<Int> Y$3191b69e_b41831d7__Types_tag<Int> stringLit5361747572646179<Int> stringLit506172616d6574657250726f626c656d<Int> stringLit496e76616c6964536f7572636541646472657373<Int> SCMPEcho_840d9458_T_Types_tag<Int> nil_Types_tag<Int> stringLit61637475616c<Int> stringLit556e6b6e6f776e4e65787448647254797065<Int> HostSVC_cd675838_T_Types_tag<Int> EndToEndExtnSkipper_840d9458_T_Types_tag<Int> stringLit696e76616c6964206865616465722c206e6567617469766520706174684c656e<Int> Y$68d3cee9_b41831d7__Types_tag<Int> stringLit496e76616c6964436f6d6d6f6e486561646572<Int> stringLit61646472<Int> Y$17800ab4_b41831d7__Types_tag<Int> BFD_6416454f_T_Types_tag<Int> stringLit45787465726e616c496e74657266616365446f776e<Int> SCMPDestinationUnreachable_840d9458_T_Types_tag<Int> stringLit696e76616c696420657874656e73696f6e206865616465722e20<Int> SCMPPacketTooBig_840d9458_T_Types_tag<Int> HostIPv6_cd675838_T_Types_tag<Int> stringLit4c6974746c65456e6469616e<Int> slice_Types_tag<Int> stringLit62756666657220746f6f2073686f7274<Int> stringLit53434d50206c61796572206c656e677468206973206c657373207468656e2034206279746573<Int> stringLit556e6b6e6f776e486f704669656c64496e6772657373496e74657266616365<Int> stringLit496e76616c69645061636b657453697a65<Int> AS_cd675838_T_Types_tag<Int> stringLit496e76616c696444657374696e6174696f6e41646472657373<Int> Y$c2e55be_72f0d887__Types_tag<Int> stringLit4d6f6e646179<Int> stringLit5468757273646179<Int> stringLit556e6b6e6f776e486f704279486f704f7074696f6e<Int> int_Types_tag<Int> stringLit496e76616c6964457874656e73696f6e486561646572<Int> stringLit6970<Int> stringLit616464724864724c656e<Int> stringLit2573282564295c6e5061796c6f61643a202573<Int> stringLit756e737570706f727465642061646472657373<Int> stringLit5472616365726f7574655265706c79<Int> rawPath_a6ceb89d_T_Types_tag<Int> stringLit6d696e<Int> Raw_daeaf66a_T_Types_tag<Int> IA_cd675838_T_Types_tag<Int> stringLit4a616e75617279<Int> stringLit53756e646179<Int> stringLit436d644864724c656e<Int> Path_4cddb96f_T_Types_tag<Int> Y$35202e5_cd675838__Types_tag<Int> stringLit496e76616c696450617468<Int> stringLit424644<Int> string_Types_tag<Int> SCMPParameterProblem_840d9458_T_Types_tag<Int> stringLit257328436f64653a20256429<Int> littleEndian_72f0d887_T_Types_tag<Int> L4ProtocolType_840d9458_T_Types_tag<Int> stringLit4d6179<Int> stringLit5472616365726f75746552657175657374<Int> SCMPCode_840d9458_T_Types_tag<Int> stringLit65326520657874656e73696f6e206d757374206e6f74206265207265706561746564<Int> stringLit446563656d626572<Int> stringLit6d6178<Int> uint16_Types_tag<Int> stringLit456e6432456e64<Int> stringLit426967456e6469616e<Int> integer_Types_tag<Int> stringLit556e6b6e6f776e486f704669656c64456772657373496e74657266616365<Int> stringLit417567757374<Int> stringLit4563686f5265706c79<Int> stringLit556e6b6e6f776e456e64546f456e644f7074696f6e<Int> Y$53a71dc3_5c610647__Types_tag<Int> nilDecodeFeedback_b41831d7_T_Types_tag<Int> stringLit554450<Int> SCMPTraceroute_840d9458_T_Types_tag<Int> SCION_840d9458_T_Types_tag<Int> stringLit74797065<Int> UDPAddr_5c610647_T_Types_tag<Int> byte_Types_tag<Int> stringLit496e76616c6964486f704669656c644d4143<Int> stringLit4a756e65<Int> stringLit44657374696e6174696f6e556e726561636861626c65<Int> stringLit6d696e696d756d<Int> stringLit6c656e<Int> stringLit496e76616c69645365676d656e744368616e6765<Int> stringLit63616e206e6f742063616c63756c61746520636865636b73756d20776974686f7574205343494f4e20686561646572<Int> stringLit6578706563746564<Int> SCMP_840d9458_T_Types_tag<Int> stringLit64657374696e6174696f6e2061646472657373206d697373696e67<Int> stringLit68626820657874656e73696f6e206d757374206e6f74206265207265706561746564<Int> stringLit4572726f6e656f75734865616465724669656c64<Int> stringLit466c6f7749445265717569726564<Int> stringLit756e737570706f72746564206164647265737320747970652f6c656e67746820636f6d62696e6174696f6e<Int> Y$6914870a_b41831d7__Types_tag<Int>))
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=>
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (=>
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (=> (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (=>
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=> (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (=> (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=>
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=>
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (=>
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (=>
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (=>
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (=>
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (=>
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (=>
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (=>
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<Slice<Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Slice[Ref]]_prog.card_non_negative|)))
(assert (forall ((e Slice<Ref>)) (!
  (not (Set_in e (as Set_empty  Set<Slice<Ref>>)))
  :pattern ((Set_in e (as Set_empty  Set<Slice<Ref>>)))
  :qid |$Set[Slice[Ref]]_prog.in_empty_set|)))
(assert (forall ((s Set<Slice<Ref>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Slice<Ref>>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e Slice<Ref>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Slice[Ref]]_prog.empty_set_cardinality|)))
(assert (forall ((e Slice<Ref>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Slice[Ref]]_prog.in_singleton_set|)))
(assert (forall ((e1 Slice<Ref>) (e2 Slice<Ref>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Slice[Ref]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Slice<Ref>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Slice[Ref]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Slice[Ref]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Slice<Ref>>) (e1 Slice<Ref>) (e2 Slice<Ref>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Slice[Ref]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Slice<Ref>>) (e1 Slice<Ref>) (e2 Slice<Ref>)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Slice[Ref]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Slice[Ref]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Slice[Ref]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Slice[Ref]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Slice[Ref]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Slice[Ref]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Slice[Ref]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Slice[Ref]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Slice[Ref]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Slice[Ref]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Slice[Ref]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Slice[Ref]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Slice[Ref]]_prog.in_difference|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>) (e Slice<Ref>)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Slice[Ref]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Slice<Ref>)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Slice[Ref]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Slice<Ref>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Slice[Ref]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Slice[Ref]]_prog.native_equality|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Slice<Ref>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Slice[Ref]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Slice<Ref>>) (s2 Set<Slice<Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Slice[Ref]]_prog.cardinality_difference|)))
(assert (forall ((s Set<Tuple2<Ref~_Types>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Tuple2[Ref, Types]]_prog.card_non_negative|)))
(assert (forall ((e Tuple2<Ref~_Types>)) (!
  (not (Set_in e (as Set_empty  Set<Tuple2<Ref~_Types>>)))
  :pattern ((Set_in e (as Set_empty  Set<Tuple2<Ref~_Types>>)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_empty_set|)))
(assert (forall ((s Set<Tuple2<Ref~_Types>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Tuple2<Ref~_Types>>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e Tuple2<Ref~_Types>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Tuple2[Ref, Types]]_prog.empty_set_cardinality|)))
(assert (forall ((e Tuple2<Ref~_Types>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_singleton_set|)))
(assert (forall ((e1 Tuple2<Ref~_Types>) (e2 Tuple2<Ref~_Types>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Tuple2<Ref~_Types>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Tuple2<Ref~_Types>>) (e1 Tuple2<Ref~_Types>) (e2 Tuple2<Ref~_Types>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Tuple2<Ref~_Types>>) (e1 Tuple2<Ref~_Types>) (e2 Tuple2<Ref~_Types>)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.in_difference|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>) (e Tuple2<Ref~_Types>)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Tuple2<Ref~_Types>)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Tuple2<Ref~_Types>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.native_equality|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Tuple2<Ref~_Types>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Tuple2[Ref, Types]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Tuple2<Ref~_Types>>) (s2 Set<Tuple2<Ref~_Types>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Tuple2[Ref, Types]]_prog.cardinality_difference|)))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.card_non_negative|)))
(assert (forall ((e Int)) (!
  (not (Set_in e (as Set_empty  Set<Int>)))
  :pattern ((Set_in e (as Set_empty  Set<Int>)))
  :qid |$Set[Int]_prog.in_empty_set|)))
(assert (forall ((s Set<Int>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e Int)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.empty_set_cardinality|)))
(assert (forall ((e Int)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Int]_prog.in_singleton_set|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Int]_prog.in_singleton_set_equality|)))
(assert (forall ((e Int)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Int]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Int]_prog.in_unionone_same|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Int]_prog.in_unionone_other|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Int]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Int]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Int]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Int]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Int]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Int)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Int]_prog.subset_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Int)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.equality_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.native_equality|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Int)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Int]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=>
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (=> (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (=> (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (=> (not (Set_in e s)) (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (=> (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (=> (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (=> (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (=> (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=> (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((l ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (r ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) (y ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of5<ShStruct2<Ref~_Ref>> x)
        (ShStructget0of5<ShStruct2<Ref~_Ref>> y))
      (and
        (= (ShStructget1of5<Ref> x) (ShStructget1of5<Ref> y))
        (and
          (= (ShStructget2of5<Ref> x) (ShStructget2of5<Ref> y))
          (and
            (= (ShStructget3of5<Ref> x) (ShStructget3of5<Ref> y))
            (= (ShStructget4of5<Ref> x) (ShStructget4of5<Ref> y)))))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev4of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (ShStructget4of5<Ref> x))
    x)
  :pattern ((ShStructget4of5<Ref> x))
  )))
(assert (forall ((x ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev1of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (ShStructget1of5<Ref> x))
    x)
  :pattern ((ShStructget1of5<Ref> x))
  )))
(assert (forall ((x ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev3of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (ShStructget3of5<Ref> x))
    x)
  :pattern ((ShStructget3of5<Ref> x))
  )))
(assert (forall ((x ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev2of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (ShStructget2of5<Ref> x))
    x)
  :pattern ((ShStructget2of5<Ref> x))
  )))
(assert (forall ((x ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev0of5<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (ShStructget0of5<ShStruct2<Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of5<ShStruct2<Ref~_Ref>> x))
  )))
(assert (forall ((x ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)) (!
  (= (unbox_Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev10of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget10of17<Ref> x))
    x)
  :pattern ((ShStructget10of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev1of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget1of17<Ref> x))
    x)
  :pattern ((ShStructget1of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev2of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget2of17<Ref> x))
    x)
  :pattern ((ShStructget2of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev16of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget16of17<Ref> x))
    x)
  :pattern ((ShStructget16of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev8of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget8of17<Ref> x))
    x)
  :pattern ((ShStructget8of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev3of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget3of17<Ref> x))
    x)
  :pattern ((ShStructget3of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev12of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget12of17<Ref> x))
    x)
  :pattern ((ShStructget12of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev7of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget7of17<Ref> x))
    x)
  :pattern ((ShStructget7of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev11of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget11of17<Ref> x))
    x)
  :pattern ((ShStructget11of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (y ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of17<ShStruct2<Ref~_Ref>> x)
        (ShStructget0of17<ShStruct2<Ref~_Ref>> y))
      (and
        (= (ShStructget1of17<Ref> x) (ShStructget1of17<Ref> y))
        (and
          (= (ShStructget2of17<Ref> x) (ShStructget2of17<Ref> y))
          (and
            (= (ShStructget3of17<Ref> x) (ShStructget3of17<Ref> y))
            (and
              (= (ShStructget4of17<Ref> x) (ShStructget4of17<Ref> y))
              (and
                (= (ShStructget5of17<Ref> x) (ShStructget5of17<Ref> y))
                (and
                  (= (ShStructget6of17<Ref> x) (ShStructget6of17<Ref> y))
                  (and
                    (= (ShStructget7of17<Ref> x) (ShStructget7of17<Ref> y))
                    (and
                      (= (ShStructget8of17<Ref> x) (ShStructget8of17<Ref> y))
                      (and
                        (= (ShStructget9of17<Ref> x) (ShStructget9of17<Ref> y))
                        (and
                          (=
                            (ShStructget10of17<Ref> x)
                            (ShStructget10of17<Ref> y))
                          (and
                            (=
                              (ShStructget11of17<Ref> x)
                              (ShStructget11of17<Ref> y))
                            (and
                              (=
                                (ShStructget12of17<Ref> x)
                                (ShStructget12of17<Ref> y))
                              (and
                                (=
                                  (ShStructget13of17<Ref> x)
                                  (ShStructget13of17<Ref> y))
                                (and
                                  (=
                                    (ShStructget14of17<Ref> x)
                                    (ShStructget14of17<Ref> y))
                                  (and
                                    (=
                                      (ShStructget15of17<Ref> x)
                                      (ShStructget15of17<Ref> y))
                                    (=
                                      (ShStructget16of17<Ref> x)
                                      (ShStructget16of17<Ref> y)))))))))))))))))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev5of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget5of17<Ref> x))
    x)
  :pattern ((ShStructget5of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev4of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget4of17<Ref> x))
    x)
  :pattern ((ShStructget4of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev6of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget6of17<Ref> x))
    x)
  :pattern ((ShStructget6of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev15of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget15of17<Ref> x))
    x)
  :pattern ((ShStructget15of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev9of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget9of17<Ref> x))
    x)
  :pattern ((ShStructget9of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev0of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget0of17<ShStruct2<Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of17<ShStruct2<Ref~_Ref>> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev14of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget14of17<Ref> x))
    x)
  :pattern ((ShStructget14of17<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev13of17<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (ShStructget13of17<Ref> x))
    x)
  :pattern ((ShStructget13of17<Ref> x))
  )))
(assert (forall ((x ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=
    (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (box_Poly<Ref> x))
    x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((x ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (unbox_Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> (box_Poly<Ref> x))
    x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((l ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (r ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)) (!
  (=
    (ShStructrev1of2<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> (ShStructget1of2<Ref> x))
    x)
  :pattern ((ShStructget1of2<Ref> x))
  )))
(assert (forall ((x ShStruct2<ShStruct2<Ref~_Ref>~_Ref>) (y ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of2<ShStruct2<Ref~_Ref>> x)
        (ShStructget0of2<ShStruct2<Ref~_Ref>> y))
      (= (ShStructget1of2<Ref> x) (ShStructget1of2<Ref> y))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)) (!
  (=
    (ShStructrev0of2<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> (ShStructget0of2<ShStruct2<Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of2<ShStruct2<Ref~_Ref>> x))
  )))
(assert (forall ((x Tuple0)) (!
  (= (unbox_Poly<Tuple0> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((x Slice<Ref>)) (!
  (= (unbox_Poly<Slice<Ref>> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((x ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (=
    (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (box_Poly<Ref> x))
    x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((l ShStruct4<Ref~_Ref~_Ref~_Ref>) (r ShStruct4<Ref~_Ref~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (unbox_Poly<ShStruct3<Ref~_Ref~_Ref>> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((x ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> (box_Poly<Ref> x))
    x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((l ShStruct2<Ref~_Ref>) (r ShStruct2<Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((t0 $Ref) (t1 Types)) (!
  (and
    (= (get0of2<Ref> (tuple2<Tuple2<Ref~_Types>> t0 t1)) t0)
    (= (get1of2<Types> (tuple2<Tuple2<Ref~_Types>> t0 t1)) t1))
  :pattern ((tuple2<Tuple2<Ref~_Types>> t0 t1))
  :qid |prog.getter_over_tuple2|)))
(assert (forall ((p Tuple2<Ref~_Types>)) (!
  (= (tuple2<Tuple2<Ref~_Types>> (get0of2<Ref> p) (get1of2<Types> p)) p)
  :pattern ((get0of2<Ref> p))
  :pattern ((get1of2<Types> p))
  :qid |prog.tuple2_over_getter|)))
(assert (forall ((l ShStruct2<ShStruct2<Ref~_Ref>~_Ref>) (r ShStruct2<ShStruct2<Ref~_Ref>~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((l ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>) (r ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((l ShStruct1<ShStruct2<Ref~_Ref>>) (r ShStruct1<ShStruct2<Ref~_Ref>>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct2<Ref~_Ref>)) (!
  (= (ShStructrev1of2<ShStruct2<Ref~_Ref>> (ShStructget1of2<Ref> x)) x)
  :pattern ((ShStructget1of2<Ref> x))
  )))
(assert (forall ((x ShStruct2<Ref~_Ref>) (y ShStruct2<Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (= (ShStructget0of2<Ref> x) (ShStructget0of2<Ref> y))
      (= (ShStructget1of2<Ref> x) (ShStructget1of2<Ref> y))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct2<Ref~_Ref>)) (!
  (= (ShStructrev0of2<ShStruct2<Ref~_Ref>> (ShStructget0of2<Ref> x)) x)
  :pattern ((ShStructget0of2<Ref> x))
  )))
(assert (forall ((l ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>) (r ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((l ShStruct0) (r ShStruct0)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) (y ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> x)
        (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> y))
      (and
        (= (ShStructget1of3<Ref> x) (ShStructget1of3<Ref> y))
        (= (ShStructget2of3<Ref> x) (ShStructget2of3<Ref> y)))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (=
    (ShStructrev1of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (ShStructget1of3<Ref> x))
    x)
  :pattern ((ShStructget1of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (=
    (ShStructrev0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> x))
    x)
  :pattern ((ShStructget0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> x))
  )))
(assert (forall ((x ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (=
    (ShStructrev2of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> (ShStructget2of3<Ref> x))
    x)
  :pattern ((ShStructget2of3<Ref> x))
  )))
(assert (forall ((a ShArray<Ref>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (= (sarray<ShArray<Ref>> (smake<Slice<Ref>> a o l c)) a))
  :pattern ((sarray<ShArray<Ref>> (smake<Slice<Ref>> a o l c)))
  :qid |prog.deconstructor_over_constructor_array|)))
(assert (forall ((s Slice<Ref>)) (!
  (<=
    (+ (soffset<Int> s) (scap<Int> s))
    (ShArraylen<Int> (sarray<ShArray<Ref>> s)))
  :pattern ((soffset<Int> s) (scap<Int> s))
  :pattern ((ShArraylen<Int> (sarray<ShArray<Ref>> s)))
  )))
(assert (forall ((a ShArray<Ref>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (= (slen<Int> (smake<Slice<Ref>> a o l c)) l))
  :pattern ((slen<Int> (smake<Slice<Ref>> a o l c)))
  :qid |prog.deconstructor_over_constructor_len|)))
(assert (forall ((s Slice<Ref>)) (!
  (<= 0 (slen<Int> s))
  :pattern ((slen<Int> s))
  )))
(assert (forall ((s Slice<Ref>)) (!
  (<= (slen<Int> s) (scap<Int> s))
  :pattern ((slen<Int> s))
  :pattern ((scap<Int> s))
  )))
(assert (forall ((s Slice<Ref>)) (!
  (<= 0 (soffset<Int> s))
  :pattern ((soffset<Int> s))
  )))
(assert (forall ((a ShArray<Ref>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (= (soffset<Int> (smake<Slice<Ref>> a o l c)) o))
  :pattern ((soffset<Int> (smake<Slice<Ref>> a o l c)))
  :qid |prog.deconstructor_over_constructor_offset|)))
(assert (forall ((a ShArray<Ref>) (o Int) (l Int) (c Int)) (!
  (=>
    (and (<= 0 o) (and (<= 0 l) (and (<= l c) (<= (+ o c) (ShArraylen<Int> a)))))
    (= (scap<Int> (smake<Slice<Ref>> a o l c)) c))
  :pattern ((scap<Int> (smake<Slice<Ref>> a o l c)))
  :qid |prog.deconstructor_over_constructor_cap|)))
(assert (forall ((s Slice<Ref>)) (!
  (=
    s
    (smake<Slice<Ref>> (sarray<ShArray<Ref>> s) (soffset<Int> s) (slen<Int> s) (scap<Int> s)))
  :pattern ((sarray<ShArray<Ref>> s))
  :pattern ((soffset<Int> s))
  :pattern ((slen<Int> s))
  :pattern ((scap<Int> s))
  )))
(assert (forall ((l ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>) (r ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((a ShArray<Ref>)) (!
  (>= (ShArraylen<Int> a) 0)
  :pattern ((ShArraylen<Int> a))
  )))
(assert (forall ((a ShArray<Ref>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (ShArraylen<Int> a)))
    (and
      (= (ShArrayfirst<ShArray<Ref>> (ShArrayloc<Ref> a i)) a)
      (= (ShArraysecond<Int> (ShArrayloc<Ref> a i)) i)))
  :pattern ((ShArrayloc<Ref> a i))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>) (y ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)) (!
  (=
    (eq<Bool> x y)
    (and
      (= (ShStructget0of3<Ref> x) (ShStructget0of3<Ref> y))
      (and
        (= (ShStructget1of3<Ref> x) (ShStructget1of3<Ref> y))
        (=
          (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> x)
          (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> y)))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)) (!
  (=
    (ShStructrev1of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> (ShStructget1of3<Ref> x))
    x)
  :pattern ((ShStructget1of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)) (!
  (=
    (ShStructrev0of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> (ShStructget0of3<Ref> x))
    x)
  :pattern ((ShStructget0of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)) (!
  (=
    (ShStructrev2of3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>> (ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> x))
    x)
  :pattern ((ShStructget2of3<Emb_3_Intuint8$$$_S_$$$> x))
  )))
(assert (forall ((i Tuple2<Ref~_Types>)) (!
  (=>
    (comparableType_Types<Bool> (get1of2<Types> i))
    (comparableInterface<Bool> i))
  :pattern ((comparableInterface<Bool> i))
  )))
(assert (forall ((x ShStruct2<Ref~_Ref>)) (!
  (= (unbox_Poly<ShStruct2<Ref~_Ref>> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((l ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>) (r ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (y ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> x)
        (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> y))
      (and
        (= (ShStructget1of3<Ref> x) (ShStructget1of3<Ref> y))
        (= (ShStructget2of3<Ref> x) (ShStructget2of3<Ref> y)))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (ShStructrev1of3<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (ShStructget1of3<Ref> x))
    x)
  :pattern ((ShStructget1of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (ShStructrev0of3<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> x))
  )))
(assert (forall ((x ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (ShStructrev2of3<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (ShStructget2of3<Ref> x))
    x)
  :pattern ((ShStructget2of3<Ref> x))
  )))
(assert (forall ((x ShStruct0) (y ShStruct0)) (!
  (= (eq<Bool> x y) true)
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct1<ShStruct2<Ref~_Ref>>)) (!
  (= (unbox_Poly<ShStruct1<ShStruct2<Ref~_Ref>>> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((l ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) (r ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((y Tuple2<Ref~_Types>)) (!
  (=>
    (= (get1of2<Types> y) (as nilDecodeFeedback_b41831d7_T_Types<Types>  Types))
    (= (box_Poly<Ref> (unbox_Poly<Tuple0> (get0of2<Ref> y))) (get0of2<Ref> y)))
  :pattern ((unbox_Poly<Tuple0> (get0of2<Ref> y)))
  )))
(assert (forall ((y $Ref)) (!
  (=
    (box_Poly<Ref> (unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> y))
    y)
  :pattern ((unbox_Poly<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> y))
  )))
(assert (forall ((y $Ref)) (!
  (=
    (box_Poly<Ref> (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> y))
    y)
  :pattern ((unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (=
    (box_Poly<Ref> (unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> y))
    y)
  :pattern ((unbox_Poly<ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (=
    (box_Poly<Ref> (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> y))
    y)
  :pattern ((unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (= (box_Poly<Ref> (unbox_Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> y)) y)
  :pattern ((unbox_Poly<ShStruct2<ShStruct2<Ref~_Ref>~_Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (= (box_Poly<Ref> (unbox_Poly<ShStruct0> y)) y)
  :pattern ((unbox_Poly<ShStruct0> y))
  )))
(assert (forall ((y $Ref)) (!
  (=
    (box_Poly<Ref> (unbox_Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> y))
    y)
  :pattern ((unbox_Poly<ShStruct5<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (= (box_Poly<Ref> (unbox_Poly<Slice<Ref>> y)) y)
  :pattern ((unbox_Poly<Slice<Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (= (box_Poly<Ref> (unbox_Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> y)) y)
  :pattern ((unbox_Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (= (box_Poly<Ref> (unbox_Poly<ShStruct1<ShStruct2<Ref~_Ref>>> y)) y)
  :pattern ((unbox_Poly<ShStruct1<ShStruct2<Ref~_Ref>>> y))
  )))
(assert (forall ((y $Ref)) (!
  (=
    (box_Poly<Ref> (unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> y))
    y)
  :pattern ((unbox_Poly<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (= (box_Poly<Ref> (unbox_Poly<Int> y)) y)
  :pattern ((unbox_Poly<Int> y))
  )))
(assert (forall ((y $Ref)) (!
  (= (box_Poly<Ref> (unbox_Poly<ShStruct2<Ref~_Ref>> y)) y)
  :pattern ((unbox_Poly<ShStruct2<Ref~_Ref>> y))
  )))
(assert (forall ((y Tuple2<Ref~_Types>)) (!
  (=>
    (= (get1of2<Types> y) (as Path_4cddb96f_T_Types<Types>  Types))
    (= (box_Poly<Ref> (unbox_Poly<Tuple0> (get0of2<Ref> y))) (get0of2<Ref> y)))
  :pattern ((unbox_Poly<Tuple0> (get0of2<Ref> y)))
  )))
(assert (forall ((y $Ref)) (!
  (=
    (box_Poly<Ref> (unbox_Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> y))
    y)
  :pattern ((unbox_Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> y))
  )))
(assert (forall ((y $Ref)) (!
  (=
    (box_Poly<Ref> (unbox_Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> y))
    y)
  :pattern ((unbox_Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> y))
  )))
(assert (forall ((y $Ref)) (!
  (= (box_Poly<Ref> (unbox_Poly<ShStruct3<Ref~_Ref~_Ref>> y)) y)
  :pattern ((unbox_Poly<ShStruct3<Ref~_Ref~_Ref>> y))
  )))
(assert (forall ((x ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>) (y ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> x)
        (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> y))
      (and
        (=
          (ShStructget1of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x)
          (ShStructget1of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> y))
        (=
          (ShStructget2of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x)
          (ShStructget2of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> y)))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=
    (ShStructrev1of3<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (ShStructget1of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x))
    x)
  :pattern ((ShStructget1of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x))
  )))
(assert (forall ((x ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=
    (ShStructrev0of3<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of3<ShStruct4<Ref~_Ref~_Ref~_Ref>> x))
  )))
(assert (forall ((x ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>)) (!
  (=
    (ShStructrev2of3<ShStruct3<ShStruct4<Ref~_Ref~_Ref~_Ref>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>~_ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>>> (ShStructget2of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x))
    x)
  :pattern ((ShStructget2of3<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> x))
  )))
(assert (forall ((l ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>) (r ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((l ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>) (r ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (=
  (tag_Types<Int> (as string_Types<Types>  Types))
  (as string_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as HostIPv4_cd675838_T_Types<Types>  Types))
  (as HostIPv4_cd675838_T_Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as HostSVC_cd675838_T_Types<Types>  Types)) true))
(assert (forall ((p0 Types)) (!
  (= (tag_Types<Int> (slice_Types<Types> p0)) (as slice_Types_tag<Int>  Int))
  :pattern ((slice_Types<Types> p0))
  )))
(assert (= (comparableType_Types<Bool> (as nil_Types<Types>  Types)) true))
(assert (=
  (comparableType_Types<Bool> (as SCMPDestinationUnreachable_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as bigEndian_72f0d887_T_Types<Types>  Types))
  (as bigEndian_72f0d887_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as bigEndian_72f0d887_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as rawPath_a6ceb89d_T_Types<Types>  Types))
  (as rawPath_a6ceb89d_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as EndToEndExtn_840d9458_T_Types<Types>  Types))
  (as EndToEndExtn_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as Y$35202e5_cd675838__Types<Types>  Types))
  false))
(assert (=
  (tag_Types<Int> (as LayerType_b41831d7_T_Types<Types>  Types))
  (as LayerType_b41831d7_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Y$68d3cee9_b41831d7__Types<Types>  Types))
  (as Y$68d3cee9_b41831d7__Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as Path_c385169_T_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as Raw_daeaf66a_T_Types<Types>  Types))
  (as Raw_daeaf66a_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as littleEndian_72f0d887_T_Types<Types>  Types))
  (as littleEndian_72f0d887_T_Types_tag<Int>  Int)))
(assert (forall ((a Types)) (!
  (behavioral_subtype_Types<Bool> a a)
  :pattern ((behavioral_subtype_Types<Bool> a a))
  )))
(assert (= (comparableType_Types<Bool> (as int_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))
  (as HopByHopExtnSkipper_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as L4ProtocolType_840d9458_T_Types<Types>  Types))
  (as L4ProtocolType_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as SCMPTypeCode_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as Y$9c78df5f_b41831d7__Types<Types>  Types))
  (as Y$9c78df5f_b41831d7__Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as integer_Types<Types>  Types)) true))
(assert (=
  (comparableType_Types<Bool> (as Y$17800ab4_b41831d7__Types<Types>  Types))
  false))
(assert (=
  (comparableType_Types<Bool> (as Y$6914870a_b41831d7__Types<Types>  Types))
  false))
(assert (=
  (comparableType_Types<Bool> (as Y$68d3cee9_b41831d7__Types<Types>  Types))
  false))
(assert (= (comparableType_Types<Bool> (as UDPAddr_5c610647_T_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as SCMP_840d9458_T_Types<Types>  Types))
  (as SCMP_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as SCMPCode_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as SCMPPacketTooBig_840d9458_T_Types<Types>  Types))
  (as SCMPPacketTooBig_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as HostSVC_cd675838_T_Types<Types>  Types))
  (as HostSVC_cd675838_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as HostIPv6_cd675838_T_Types<Types>  Types))
  false))
(assert (= (comparableType_Types<Bool> (as Raw_daeaf66a_T_Types<Types>  Types)) true))
(assert (=
  (comparableType_Types<Bool> (as Y$60c7bddc_b41831d7__Types<Types>  Types))
  false))
(assert (= (comparableType_Types<Bool> (as rawPath_a6ceb89d_T_Types<Types>  Types)) true))
(assert (=
  (comparableType_Types<Bool> (as HopByHopExtnSkipper_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as Y$17800ab4_b41831d7__Types<Types>  Types))
  (as Y$17800ab4_b41831d7__Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Path_c6e60a1d_T_Types<Types>  Types))
  (as Path_c6e60a1d_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as SCMPType_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as Y$9127f611_b41831d7__Types<Types>  Types))
  (as Y$9127f611_b41831d7__Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as HopByHopExtn_840d9458_T_Types<Types>  Types))
  true))
(assert (forall ((p0 Types)) (!
  (= (tag_Types<Int> (pointer_Types<Types> p0)) (as pointer_Types_tag<Int>  Int))
  :pattern ((pointer_Types<Types> p0))
  )))
(assert (=
  (comparableType_Types<Bool> (as nilDecodeFeedback_b41831d7_T_Types<Types>  Types))
  true))
(assert (=
  (comparableType_Types<Bool> (as Y$9c78df5f_b41831d7__Types<Types>  Types))
  false))
(assert (forall ((x0 Types)) (!
  (= (get_0_pointer_Types<Types> (pointer_Types<Types> x0)) x0)
  :pattern ((pointer_Types<Types> x0))
  )))
(assert (=
  (tag_Types<Int> (as SCMPTypeCode_840d9458_T_Types<Types>  Types))
  (as SCMPTypeCode_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as SCMPEcho_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (comparableType_Types<Bool> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (comparableType_Types<Bool> (as Y$b28ae4_ac87dd1d__Types<Types>  Types))
  false))
(assert (= (comparableType_Types<Bool> (as string_Types<Types>  Types)) true))
(assert (forall ((a Types) (b Types) (c Types)) (!
  (=>
    (and
      (behavioral_subtype_Types<Bool> a b)
      (behavioral_subtype_Types<Bool> b c))
    (behavioral_subtype_Types<Bool> a c))
  :pattern ((behavioral_subtype_Types<Bool> a b) (behavioral_subtype_Types<Bool> b c))
  )))
(assert (= (comparableType_Types<Bool> (as empty_interface_Types<Types>  Types)) false))
(assert (=
  (comparableType_Types<Bool> (as Y$c2e55be_72f0d887__Types<Types>  Types))
  false))
(assert (=
  (comparableType_Types<Bool> (as Y$53a71dc3_5c610647__Types<Types>  Types))
  false))
(assert (=
  (comparableType_Types<Bool> (as LayerType_b41831d7_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as AS_cd675838_T_Types<Types>  Types))
  (as AS_cd675838_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Y$febd64e7_b41831d7__Types<Types>  Types))
  (as Y$febd64e7_b41831d7__Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as SCION_840d9458_T_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as Y$b28ae4_ac87dd1d__Types<Types>  Types))
  (as Y$b28ae4_ac87dd1d__Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as AddrType_840d9458_T_Types<Types>  Types))
  (as AddrType_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Y$49c4c25f_d3743b4f__Types<Types>  Types))
  (as Y$49c4c25f_d3743b4f__Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as AS_cd675838_T_Types<Types>  Types)) true))
(assert (=
  (comparableType_Types<Bool> (as SCMPPacketTooBig_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (comparableType_Types<Bool> (as Y$febd64e7_b41831d7__Types<Types>  Types))
  false))
(assert (=
  (tag_Types<Int> (as SCMPEcho_840d9458_T_Types<Types>  Types))
  (as SCMPEcho_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as UDPAddr_5c610647_T_Types<Types>  Types))
  (as UDPAddr_5c610647_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as SCMPParameterProblem_840d9458_T_Types<Types>  Types))
  (as SCMPParameterProblem_840d9458_T_Types_tag<Int>  Int)))
(assert (forall ((a Types)) (!
  (behavioral_subtype_Types<Bool> a (as empty_interface_Types<Types>  Types))
  :pattern ((behavioral_subtype_Types<Bool> a (as empty_interface_Types<Types>  Types)))
  )))
(assert (=
  (tag_Types<Int> (as Y$558431e4_a6ceb89d__Types<Types>  Types))
  (as Y$558431e4_a6ceb89d__Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as littleEndian_72f0d887_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as EndToEndExtnSkipper_840d9458_T_Types<Types>  Types))
  (as EndToEndExtnSkipper_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Path_4cddb96f_T_Types<Types>  Types))
  (as Path_4cddb96f_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as HostIPv4_cd675838_T_Types<Types>  Types))
  false))
(assert (=
  (tag_Types<Int> (as SCMPInternalConnectivityDown_840d9458_T_Types<Types>  Types))
  (as SCMPInternalConnectivityDown_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Y$60c7bddc_b41831d7__Types<Types>  Types))
  (as Y$60c7bddc_b41831d7__Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as EndToEndExtn_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (comparableType_Types<Bool> (as Payload_b41831d7_T_Types<Types>  Types))
  false))
(assert (=
  (tag_Types<Int> (as integer_Types<Types>  Types))
  (as integer_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as SCMPExternalInterfaceDown_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as SCMPExternalInterfaceDown_840d9458_T_Types<Types>  Types))
  (as SCMPExternalInterfaceDown_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Y$53a71dc3_5c610647__Types<Types>  Types))
  (as Y$53a71dc3_5c610647__Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as SCMPType_840d9458_T_Types<Types>  Types))
  (as SCMPType_840d9458_T_Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as byte_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as Y$6914870a_b41831d7__Types<Types>  Types))
  (as Y$6914870a_b41831d7__Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as BFD_6416454f_T_Types<Types>  Types))
  (as BFD_6416454f_T_Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as Decoded_daeaf66a_T_Types<Types>  Types)) true))
(assert (= (comparableType_Types<Bool> (as IPAddr_5c610647_T_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as Path_c385169_T_Types<Types>  Types))
  (as Path_c385169_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as HostIPv6_cd675838_T_Types<Types>  Types))
  (as HostIPv6_cd675838_T_Types_tag<Int>  Int)))
(assert (= (tag_Types<Int> (as byte_Types<Types>  Types)) (as byte_Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as BFD_6416454f_T_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as SCMPCode_840d9458_T_Types<Types>  Types))
  (as SCMPCode_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as HopByHopExtn_840d9458_T_Types<Types>  Types))
  (as HopByHopExtn_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as Y$49c4c25f_d3743b4f__Types<Types>  Types))
  false))
(assert (=
  (comparableType_Types<Bool> (as Y$3191b69e_b41831d7__Types<Types>  Types))
  false))
(assert (=
  (comparableType_Types<Bool> (as SCMPParameterProblem_840d9458_T_Types<Types>  Types))
  true))
(assert (= (tag_Types<Int> (as nil_Types<Types>  Types)) (as nil_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as IPAddr_5c610647_T_Types<Types>  Types))
  (as IPAddr_5c610647_T_Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as IA_cd675838_T_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as SCION_840d9458_T_Types<Types>  Types))
  (as SCION_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as L4ProtocolType_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (tag_Types<Int> (as Y$8f734176_14a7fb6d__Types<Types>  Types))
  (as Y$8f734176_14a7fb6d__Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Payload_b41831d7_T_Types<Types>  Types))
  (as Payload_b41831d7_T_Types_tag<Int>  Int)))
(assert (= (tag_Types<Int> (as int_Types<Types>  Types)) (as int_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as SCMPTraceroute_840d9458_T_Types<Types>  Types))
  (as SCMPTraceroute_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Decoded_daeaf66a_T_Types<Types>  Types))
  (as Decoded_daeaf66a_T_Types_tag<Int>  Int)))
(assert (forall ((p0 Types)) (!
  (= (comparableType_Types<Bool> (slice_Types<Types> p0)) false)
  :pattern ((comparableType_Types<Bool> (slice_Types<Types> p0)))
  )))
(assert (=
  (tag_Types<Int> (as empty_interface_Types<Types>  Types))
  (as empty_interface_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as Y$3191b69e_b41831d7__Types<Types>  Types))
  (as Y$3191b69e_b41831d7__Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as SCMP_840d9458_T_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as Y$c2e55be_72f0d887__Types<Types>  Types))
  (as Y$c2e55be_72f0d887__Types_tag<Int>  Int)))
(assert (= (comparableType_Types<Bool> (as Path_c6e60a1d_T_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as HostNone_cd675838_T_Types<Types>  Types))
  (as HostNone_cd675838_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as Y$8f734176_14a7fb6d__Types<Types>  Types))
  false))
(assert (=
  (comparableType_Types<Bool> (as SCMPTraceroute_840d9458_T_Types<Types>  Types))
  true))
(assert (=
  (comparableType_Types<Bool> (as Y$558431e4_a6ceb89d__Types<Types>  Types))
  false))
(assert (=
  (tag_Types<Int> (as nilDecodeFeedback_b41831d7_T_Types<Types>  Types))
  (as nilDecodeFeedback_b41831d7_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as uint16_Types<Types>  Types))
  (as uint16_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as SCMPInternalConnectivityDown_840d9458_T_Types<Types>  Types))
  true))
(assert (= (comparableType_Types<Bool> (as Path_4cddb96f_T_Types<Types>  Types)) true))
(assert (=
  (comparableType_Types<Bool> (as AddrType_840d9458_T_Types<Types>  Types))
  true))
(assert (= (comparableType_Types<Bool> (as uint16_Types<Types>  Types)) true))
(assert (=
  (tag_Types<Int> (as Y$35202e5_cd675838__Types<Types>  Types))
  (as Y$35202e5_cd675838__Types_tag<Int>  Int)))
(assert (forall ((p0 Types)) (!
  (= (comparableType_Types<Bool> (pointer_Types<Types> p0)) true)
  :pattern ((comparableType_Types<Bool> (pointer_Types<Types> p0)))
  )))
(assert (=
  (tag_Types<Int> (as SCMPDestinationUnreachable_840d9458_T_Types<Types>  Types))
  (as SCMPDestinationUnreachable_840d9458_T_Types_tag<Int>  Int)))
(assert (=
  (tag_Types<Int> (as IA_cd675838_T_Types<Types>  Types))
  (as IA_cd675838_T_Types_tag<Int>  Int)))
(assert (=
  (comparableType_Types<Bool> (as HostNone_cd675838_T_Types<Types>  Types))
  false))
(assert (=
  (comparableType_Types<Bool> (as Y$9127f611_b41831d7__Types<Types>  Types))
  false))
(assert (forall ((x ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=
    (ShStructrev3of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShStructget3of6<Ref> x))
    x)
  :pattern ((ShStructget3of6<Ref> x))
  )))
(assert (forall ((x ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=
    (ShStructrev1of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShStructget1of6<Ref> x))
    x)
  :pattern ((ShStructget1of6<Ref> x))
  )))
(assert (forall ((x ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>) (y ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=
    (eq<Bool> x y)
    (and
      (= (ShStructget0of6<Ref> x) (ShStructget0of6<Ref> y))
      (and
        (= (ShStructget1of6<Ref> x) (ShStructget1of6<Ref> y))
        (and
          (= (ShStructget2of6<Ref> x) (ShStructget2of6<Ref> y))
          (and
            (= (ShStructget3of6<Ref> x) (ShStructget3of6<Ref> y))
            (and
              (= (ShStructget4of6<Ref> x) (ShStructget4of6<Ref> y))
              (=
                (ShStructget5of6<Emb_6_Intbyte$$$_S_$$$> x)
                (ShStructget5of6<Emb_6_Intbyte$$$_S_$$$> y))))))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=
    (ShStructrev0of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShStructget0of6<Ref> x))
    x)
  :pattern ((ShStructget0of6<Ref> x))
  )))
(assert (forall ((x ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=
    (ShStructrev2of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShStructget2of6<Ref> x))
    x)
  :pattern ((ShStructget2of6<Ref> x))
  )))
(assert (forall ((x ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=
    (ShStructrev5of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShStructget5of6<Emb_6_Intbyte$$$_S_$$$> x))
    x)
  :pattern ((ShStructget5of6<Emb_6_Intbyte$$$_S_$$$> x))
  )))
(assert (forall ((x ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>)) (!
  (=
    (ShStructrev4of6<ShStruct6<Ref~_Ref~_Ref~_Ref~_Ref~_Emb_6_Intbyte$$$_S_$$$>> (ShStructget4of6<Ref> x))
    x)
  :pattern ((ShStructget4of6<Ref> x))
  )))
(assert (= (strLen<Int> (as stringLit5061746845787069726564<Int>  Int)) 11))
(assert (= (strLen<Int> (as stringLit74797065<Int>  Int)) 4))
(assert (= (strLen<Int> (as stringLit6578706563746564<Int>  Int)) 8))
(assert (= (strLen<Int> (as stringLit756470<Int>  Int)) 3))
(assert (= (strLen<Int> (as stringLit436d644864724c656e<Int>  Int)) 9))
(assert (= (strLen<Int> (as stringLit62696e6172792e426967456e6469616e<Int>  Int)) 16))
(assert (=
  (strLen<Int> (as stringLit496e76616c696441646472657373486561646572<Int>  Int))
  20))
(assert (= (strLen<Int> (as stringLit257328436f64653a20256429<Int>  Int)) 12))
(assert (= (strLen<Int> (as stringLit4563686f52657175657374<Int>  Int)) 11))
(assert (=
  (strLen<Int> (as stringLit65326520657874656e73696f6e206d757374206e6f74206265207265706561746564<Int>  Int))
  34))
(assert (=
  (strLen<Int> (as stringLit686561646572206c656e6774682065786365656473206d6178696d756d<Int>  Int))
  29))
(assert (=
  (strLen<Int> (as stringLit496e76616c6964457874656e73696f6e486561646572<Int>  Int))
  22))
(assert (= (strLen<Int> (as stringLit61637475616c<Int>  Int)) 6))
(assert (=
  (strLen<Int> (as stringLit62696e6172792e4c6974746c65456e6469616e<Int>  Int))
  19))
(assert (= (strLen<Int> (as stringLit467269646179<Int>  Int)) 6))
(assert (=
  (strLen<Int> (as stringLit696e76616c696420657874656e73696f6e206865616465722e204c656e677468202564206c657373207468616e2032<Int>  Int))
  47))
(assert (= (strLen<Int> (as stringLit4d61726368<Int>  Int)) 5))
(assert (=
  (strLen<Int> (as stringLit70726f76696465642062756666657220697320746f6f20736d616c6c<Int>  Int))
  28))
(assert (= (strLen<Int> (as stringLit554450<Int>  Int)) 3))
(assert (= (strLen<Int> (as stringLit426967456e6469616e<Int>  Int)) 9))
(assert (=
  (strLen<Int> (as stringLit696e76616c6964206865616465722c206e6567617469766520706174684c656e<Int>  Int))
  32))
(assert (=
  (strLen<Int> (as stringLit63616e206e6f742063616c63756c61746520636865636b73756d20776974686f7574205343494f4e20686561646572<Int>  Int))
  47))
(assert (=
  (strLen<Int> (as stringLit53434d50206c61796572206c656e677468206973206c657373207468656e2034206279746573<Int>  Int))
  38))
(assert (= (strLen<Int> (as stringLit4a616e75617279<Int>  Int)) 7))
(assert (= (strLen<Int> (as stringLit4d6179<Int>  Int)) 3))
(assert (=
  (strLen<Int> (as stringLit4c656e677468202564206c657373207468616e20737065636966696564206c656e677468202564<Int>  Int))
  39))
(assert (=
  (strLen<Int> (as stringLit756e737570706f727465642061646472657373<Int>  Int))
  19))
(assert (= (strLen<Int> (as stringLit4f63746f626572<Int>  Int)) 7))
(assert (=
  (strLen<Int> (as stringLit44657374696e6174696f6e556e726561636861626c65<Int>  Int))
  22))
(assert (=
  (strLen<Int> (as stringLit496e7465726e616c436f6e6e6563746976697479446f776e<Int>  Int))
  24))
(assert (=
  (strLen<Int> (as stringLit556e6b6e6f776e486f704669656c64456772657373496e74657266616365<Int>  Int))
  30))
(assert (= (strLen<Int> (as stringLit466c6f7749445265717569726564<Int>  Int)) 14))
(assert (= (strLen<Int> (as stringLit4a756c79<Int>  Int)) 4))
(assert (=
  (strLen<Int> (as stringLit5343494f4e20657874656e73696f6e2061637475616c206c656e677468206d757374206265206d756c7469706c65206f662034<Int>  Int))
  51))
(assert (= (strLen<Int> (as stringLit424644<Int>  Int)) 3))
(assert (= (strLen<Int> (as stringLit486f704279486f70<Int>  Int)) 8))
(assert (= (strLen<Int> (as stringLit556e6b6e6f776e5061746854797065<Int>  Int)) 15))
(assert (= (strLen<Int> (as stringLit456e6432456e64<Int>  Int)) 7))
(assert (= (strLen<Int> (as stringLit53434d50<Int>  Int)) 4))
(assert (= (strLen<Int> (as stringLit5361747572646179<Int>  Int)) 8))
(assert (=
  (strLen<Int> (as stringLit496e76616c6964436f6d6d6f6e486561646572<Int>  Int))
  19))
(assert (=
  (strLen<Int> (as stringLit556e6b6e6f776e5343494f4e56657273696f6e<Int>  Int))
  19))
(assert (forall ((l Int) (r Int)) (!
  (= (strLen<Int> (strConcat<Int> l r)) (+ (strLen<Int> l) (strLen<Int> r)))
  :pattern ((strLen<Int> (strConcat<Int> l r)))
  )))
(assert (= (strLen<Int> (as stringLit446563656d626572<Int>  Int)) 8))
(assert (= (strLen<Int> (as stringLit5468757273646179<Int>  Int)) 8))
(assert (=
  (strLen<Int> (as stringLit68626820657874656e73696f6e206d757374206e6f74206265207265706561746564<Int>  Int))
  34))
(assert (= (strLen<Int> (as stringLit62756666657220746f6f2073686f7274<Int>  Int)) 16))
(assert (= (strLen<Int> (as stringLit554e4b4e4f574e2028256429<Int>  Int)) 12))
(assert (= (strLen<Int> (as stringLit6970<Int>  Int)) 2))
(assert (= (strLen<Int> (as stringLit5472616365726f7574655265706c79<Int>  Int)) 15))
(assert (=
  (strLen<Int> (as stringLit64657374696e6174696f6e2061646472657373206d697373696e67<Int>  Int))
  27))
(assert (= (strLen<Int> (as stringLit256428256429<Int>  Int)) 6))
(assert (=
  (strLen<Int> (as stringLit7061636b65742069732073686f72746572207468616e2074686520636f6d6d6f6e20686561646572206c656e677468<Int>  Int))
  47))
(assert (= (strLen<Int> (as stringLit53657074656d626572<Int>  Int)) 9))
(assert (= (strLen<Int> (as stringLit4563686f5265706c79<Int>  Int)) 9))
(assert (=
  (strLen<Int> (as stringLit65326520657874656e73696f6e206d757374206e6f7420636f6d65206265666f7265207468652048424820657874656e73696f6e<Int>  Int))
  52))
(assert (= (strLen<Int> (as stringLit5061636b6574546f6f426967<Int>  Int)) 12))
(assert (= (strLen<Int> (as stringLit496e76616c696450617468<Int>  Int)) 11))
(assert (=
  (strLen<Int> (as stringLit556e6b6e6f776e486f704669656c64496e6772657373496e74657266616365<Int>  Int))
  31))
(assert (=
  (strLen<Int> (as stringLit2573282564295c6e5061796c6f61643a202573<Int>  Int))
  19))
(assert (= (strLen<Int> (as stringLit257328257329<Int>  Int)) 6))
(assert (= (strLen<Int> (as stringLit417072696c<Int>  Int)) 5))
(assert (= (strLen<Int> (as stringLit4665627275617279<Int>  Int)) 8))
(assert (=
  (strLen<Int> (as stringLit696e76616c696420657874656e73696f6e206865616465722e20<Int>  Int))
  26))
(assert (= (strLen<Int> (as stringLit4f7074696f6e206e6f7420666f756e64<Int>  Int)) 16))
(assert (=
  (strLen<Int> (as stringLit686561646572206c656e677468206973206e6f7420616e20696e7465676572206d756c7469706c65206f66206c696e65206c656e677468<Int>  Int))
  55))
(assert (= (strLen<Int> (as stringLit53756e646179<Int>  Int)) 6))
(assert (=
  (strLen<Int> (as stringLit45787465726e616c496e74657266616365446f776e<Int>  Int))
  21))
(assert (= (strLen<Int> (as stringLit4e6f76656d626572<Int>  Int)) 8))
(assert (=
  (strLen<Int> (as stringLit556e6b6e6f776e41646472657373466f726d6174<Int>  Int))
  20))
(assert (= (strLen<Int> (as stringLit54756573646179<Int>  Int)) 7))
(assert (= (strLen<Int> (as stringLit4d6f6e646179<Int>  Int)) 6))
(assert (=
  (strLen<Int> (as stringLit556e6b6e6f776e456e64546f456e644f7074696f6e<Int>  Int))
  21))
(assert (= (strLen<Int> (as stringLit6d696e<Int>  Int)) 3))
(assert (= (strLen<Int> (as stringLit6d6178<Int>  Int)) 3))
(assert (=
  (strLen<Int> (as stringLit496e76616c696444657374696e6174696f6e41646472657373<Int>  Int))
  25))
(assert (= (strLen<Int> (as stringLit616464724864724c656e<Int>  Int)) 10))
(assert (= (strLen<Int> (as stringLit4e6f6e4c6f63616c44656c6976657279<Int>  Int)) 16))
(assert (= (strLen<Int> (as stringLit5472616365726f75746552657175657374<Int>  Int)) 17))
(assert (= (strLen<Int> (as stringLit<Int>  Int)) 0))
(assert (=
  (strLen<Int> (as stringLit556e6b6e6f776e486f704279486f704f7074696f6e<Int>  Int))
  21))
(assert (=
  (strLen<Int> (as stringLit496e76616c6964536f7572636541646472657373<Int>  Int))
  20))
(assert (=
  (strLen<Int> (as stringLit4572726f6e656f75734865616465724669656c64<Int>  Int))
  20))
(assert (= (strLen<Int> (as stringLit4a756e65<Int>  Int)) 4))
(assert (= (strLen<Int> (as stringLit417567757374<Int>  Int)) 6))
(assert (= (strLen<Int> (as stringLit61646472<Int>  Int)) 4))
(assert (= (strLen<Int> (as stringLit4c6974746c65456e6469616e<Int>  Int)) 12))
(assert (= (strLen<Int> (as stringLit4e6f6e65<Int>  Int)) 4))
(assert (= (strLen<Int> (as stringLit6d696e696d756d<Int>  Int)) 7))
(assert (= (strLen<Int> (as stringLit496e76616c69645061636b657453697a65<Int>  Int)) 17))
(assert (=
  (strLen<Int> (as stringLit736f757263652061646472657373206d697373696e67<Int>  Int))
  22))
(assert (= (strLen<Int> (as stringLit6c656e<Int>  Int)) 3))
(assert (=
  (strLen<Int> (as stringLit756e737570706f72746564206164647265737320747970652f6c656e67746820636f6d62696e6174696f6e<Int>  Int))
  43))
(assert (forall ((str Int)) (!
  (<= 0 (strLen<Int> str))
  :pattern ((strLen<Int> str))
  )))
(assert (=
  (strLen<Int> (as stringLit5343494f4e20686561646572206d697373696e67<Int>  Int))
  20))
(assert (= (strLen<Int> (as stringLit496e76616c6964486f704669656c644d4143<Int>  Int)) 18))
(assert (= (strLen<Int> (as stringLit556e6b6e6f776e4e65787448647254797065<Int>  Int)) 18))
(assert (= (strLen<Int> (as stringLit5765646e6573646179<Int>  Int)) 9))
(assert (= (strLen<Int> (as stringLit544350<Int>  Int)) 3))
(assert (= (strLen<Int> (as stringLit6d696e696e756d5f6c65677468<Int>  Int)) 13))
(assert (=
  (strLen<Int> (as stringLit496e76616c69645365676d656e744368616e6765<Int>  Int))
  20))
(assert (= (strLen<Int> (as stringLit506172616d6574657250726f626c656d<Int>  Int)) 16))
(assert (= (strLen<Int> (as stringLit6864724279746573<Int>  Int)) 8))
(assert (forall ((l ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (r ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((int1 Int)) (!
  (=> (>= int1 0) (bounded<Bool> int1))
  :pattern ((bounded<Bool> int1))
  :qid |prog.integer_ax_bound|)))
(assert (forall ((int1 Int) (int2 Int)) (!
  (=> (< int1 int2) (decreasing<Bool> int1 int2))
  :pattern ((decreasing<Bool> int1 int2))
  :qid |prog.integer_ax_dec|)))
(assert (forall ((x ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev1of4<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (ShStructget1of4<Ref> x))
    x)
  :pattern ((ShStructget1of4<Ref> x))
  )))
(assert (forall ((x ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev3of4<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (ShStructget3of4<Ref> x))
    x)
  :pattern ((ShStructget3of4<Ref> x))
  )))
(assert (forall ((x ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev0of4<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (ShStructget0of4<ShStruct2<Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of4<ShStruct2<Ref~_Ref>> x))
  )))
(assert (forall ((x ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>) (y ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of4<ShStruct2<Ref~_Ref>> x)
        (ShStructget0of4<ShStruct2<Ref~_Ref>> y))
      (and
        (= (ShStructget1of4<Ref> x) (ShStructget1of4<Ref> y))
        (and
          (= (ShStructget2of4<Ref> x) (ShStructget2of4<Ref> y))
          (= (ShStructget3of4<Ref> x) (ShStructget3of4<Ref> y))))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>)) (!
  (=
    (ShStructrev2of4<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> (ShStructget2of4<Ref> x))
    x)
  :pattern ((ShStructget2of4<Ref> x))
  )))
(assert (forall ((x ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)) (!
  (= (unbox_Poly<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((x ShStruct0)) (!
  (= (unbox_Poly<ShStruct0> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((x ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)) (!
  (=
    (unbox_Poly<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> (box_Poly<Ref> x))
    x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((x ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)) (!
  (=
    (unbox_Poly<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> (box_Poly<Ref> x))
    x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((x ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)) (!
  (=
    (ShStructrev0of1<ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>> (ShStructget0of1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x))
  )))
(assert (forall ((x ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>) (y ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)) (!
  (=
    (eq<Bool> x y)
    (=
      (ShStructget0of1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x)
      (ShStructget0of1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> y)))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>) (y ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of3<ShStruct2<Ref~_Ref>> x)
        (ShStructget0of3<ShStruct2<Ref~_Ref>> y))
      (and
        (= (ShStructget1of3<Ref> x) (ShStructget1of3<Ref> y))
        (= (ShStructget2of3<Ref> x) (ShStructget2of3<Ref> y)))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (ShStructrev1of3<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> (ShStructget1of3<Ref> x))
    x)
  :pattern ((ShStructget1of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (ShStructrev0of3<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> (ShStructget0of3<ShStruct2<Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of3<ShStruct2<Ref~_Ref>> x))
  )))
(assert (forall ((x ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (ShStructrev2of3<ShStruct3<ShStruct2<Ref~_Ref>~_Ref~_Ref>> (ShStructget2of3<Ref> x))
    x)
  :pattern ((ShStructget2of3<Ref> x))
  )))
(assert (forall ((x ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=
    (ShStructrev1of2<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (ShStructget1of2<Ref> x))
    x)
  :pattern ((ShStructget1of2<Ref> x))
  )))
(assert (forall ((x ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>) (y ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> x)
        (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> y))
      (= (ShStructget1of2<Ref> x) (ShStructget1of2<Ref> y))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=
    (ShStructrev0of2<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>> x))
  )))
(assert (forall ((x Int)) (!
  (= (unbox_Poly<Int> (box_Poly<Ref> x)) x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((l ShStruct3<Ref~_Ref~_Ref>) (r ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct4<Ref~_Ref~_Ref~_Ref>)) (!
  (= (ShStructrev1of4<ShStruct4<Ref~_Ref~_Ref~_Ref>> (ShStructget1of4<Ref> x)) x)
  :pattern ((ShStructget1of4<Ref> x))
  )))
(assert (forall ((x ShStruct4<Ref~_Ref~_Ref~_Ref>)) (!
  (= (ShStructrev3of4<ShStruct4<Ref~_Ref~_Ref~_Ref>> (ShStructget3of4<Ref> x)) x)
  :pattern ((ShStructget3of4<Ref> x))
  )))
(assert (forall ((x ShStruct4<Ref~_Ref~_Ref~_Ref>)) (!
  (= (ShStructrev0of4<ShStruct4<Ref~_Ref~_Ref~_Ref>> (ShStructget0of4<Ref> x)) x)
  :pattern ((ShStructget0of4<Ref> x))
  )))
(assert (forall ((x ShStruct4<Ref~_Ref~_Ref~_Ref>) (y ShStruct4<Ref~_Ref~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (= (ShStructget0of4<Ref> x) (ShStructget0of4<Ref> y))
      (and
        (= (ShStructget1of4<Ref> x) (ShStructget1of4<Ref> y))
        (and
          (= (ShStructget2of4<Ref> x) (ShStructget2of4<Ref> y))
          (= (ShStructget3of4<Ref> x) (ShStructget3of4<Ref> y))))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct4<Ref~_Ref~_Ref~_Ref>)) (!
  (= (ShStructrev2of4<ShStruct4<Ref~_Ref~_Ref~_Ref>> (ShStructget2of4<Ref> x)) x)
  :pattern ((ShStructget2of4<Ref> x))
  )))
(assert (forall ((x ShStruct1<ShStruct2<Ref~_Ref>>)) (!
  (=
    (ShStructrev0of1<ShStruct1<ShStruct2<Ref~_Ref>>> (ShStructget0of1<ShStruct2<Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of1<ShStruct2<Ref~_Ref>> x))
  )))
(assert (forall ((x ShStruct1<ShStruct2<Ref~_Ref>>) (y ShStruct1<ShStruct2<Ref~_Ref>>)) (!
  (=
    (eq<Bool> x y)
    (=
      (ShStructget0of1<ShStruct2<Ref~_Ref>> x)
      (ShStructget0of1<ShStruct2<Ref~_Ref>> y)))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  (=
    (unbox_Poly<ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>> (box_Poly<Ref> x))
    x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((x ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)) (!
  (=
    (ShStructrev1of2<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> (ShStructget1of2<Ref> x))
    x)
  :pattern ((ShStructget1of2<Ref> x))
  )))
(assert (forall ((x ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>) (y ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (=
        (ShStructget0of2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x)
        (ShStructget0of2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> y))
      (= (ShStructget1of2<Ref> x) (ShStructget1of2<Ref> y))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>)) (!
  (=
    (ShStructrev0of2<ShStruct2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>~_Ref>> (ShStructget0of2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x))
    x)
  :pattern ((ShStructget0of2<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>> x))
  )))
(assert (forall ((l ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>) (r ShStruct3<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref~_Ref>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>) (y ShStruct3<Ref~_Ref~_Ref>)) (!
  (=
    (eq<Bool> x y)
    (and
      (= (ShStructget0of3<Ref> x) (ShStructget0of3<Ref> y))
      (and
        (= (ShStructget1of3<Ref> x) (ShStructget1of3<Ref> y))
        (= (ShStructget2of3<Ref> x) (ShStructget2of3<Ref> y)))))
  :pattern ((eq<Bool> x y))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (ShStructrev1of3<ShStruct3<Ref~_Ref~_Ref>> (ShStructget1of3<Ref> x)) x)
  :pattern ((ShStructget1of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (ShStructrev0of3<ShStruct3<Ref~_Ref~_Ref>> (ShStructget0of3<Ref> x)) x)
  :pattern ((ShStructget0of3<Ref> x))
  )))
(assert (forall ((x ShStruct3<Ref~_Ref~_Ref>)) (!
  (= (ShStructrev2of3<ShStruct3<Ref~_Ref~_Ref>> (ShStructget2of3<Ref> x)) x)
  :pattern ((ShStructget2of3<Ref> x))
  )))
(assert (forall ((x ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>)) (!
  (=
    (unbox_Poly<ShStruct2<ShStruct3<ShStruct3<Ref~_Ref~_Emb_3_Intuint8$$$_S_$$$>~_Ref~_Ref>~_Ref>> (box_Poly<Ref> x))
    x)
  :pattern ((box_Poly<Ref> x))
  )))
(assert (forall ((l ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>) (r ShStruct1<ShStruct4<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref>>)) (!
  (= (eq<Bool> l r) (= l r))
  :pattern ((eq<Bool> l r))
  )))
; /field_value_functions_axioms.smt2 [Intbyte$$$$_E_$$$: Int]
(assert (forall ((vs $FVF<Intbyte$$$$_E_$$$>) (ws $FVF<Intbyte$$$$_E_$$$>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_Intbyte$$$$_E_$$$ vs) ($FVF.domain_Intbyte$$$$_E_$$$ ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_Intbyte$$$$_E_$$$ vs))
            (= ($FVF.lookup_Intbyte$$$$_E_$$$ vs x) ($FVF.lookup_Intbyte$$$$_E_$$$ ws x)))
          :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ vs x) ($FVF.lookup_Intbyte$$$$_E_$$$ ws x))
          :qid |qp.$FVF<Intbyte$$$$_E_$$$>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Intbyte$$$$_E_$$$>To$Snap vs)
              ($SortWrappers.$FVF<Intbyte$$$$_E_$$$>To$Snap ws)
              )
    :qid |qp.$FVF<Intbyte$$$$_E_$$$>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Intbyte$$$$_E_$$$ pm r))
    :pattern (($FVF.perm_Intbyte$$$$_E_$$$ pm r)))))
(assert (forall ((r $Ref) (f Int)) (!
    (= ($FVF.loc_Intbyte$$$$_E_$$$ f r) true)
    :pattern (($FVF.loc_Intbyte$$$$_E_$$$ f r)))))
; /field_value_functions_axioms.smt2 [Interfaceempty_interface$$$$_E_$$$: Tuple2[Ref, Types]]
(assert (forall ((vs $FVF<Interfaceempty_interface$$$$_E_$$$>) (ws $FVF<Interfaceempty_interface$$$$_E_$$$>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_Interfaceempty_interface$$$$_E_$$$ vs) ($FVF.domain_Interfaceempty_interface$$$$_E_$$$ ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_Interfaceempty_interface$$$$_E_$$$ vs))
            (= ($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ vs x) ($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ ws x)))
          :pattern (($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ vs x) ($FVF.lookup_Interfaceempty_interface$$$$_E_$$$ ws x))
          :qid |qp.$FVF<Interfaceempty_interface$$$$_E_$$$>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Interfaceempty_interface$$$$_E_$$$>To$Snap vs)
              ($SortWrappers.$FVF<Interfaceempty_interface$$$$_E_$$$>To$Snap ws)
              )
    :qid |qp.$FVF<Interfaceempty_interface$$$$_E_$$$>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Interfaceempty_interface$$$$_E_$$$ pm r))
    :pattern (($FVF.perm_Interfaceempty_interface$$$$_E_$$$ pm r)))))
(assert (forall ((r $Ref) (f Tuple2<Ref~_Types>)) (!
    (= ($FVF.loc_Interfaceempty_interface$$$$_E_$$$ f r) true)
    :pattern (($FVF.loc_Interfaceempty_interface$$$$_E_$$$ f r)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun $k@45@00 () $Perm)
(assert (forall ((s@$ $Snap)) (!
  (=
    (arrayNil_1_Interfaceempty_interface$$$_S_$$$%limited s@$)
    (arrayNil_1_Interfaceempty_interface$$$_S_$$$ s@$))
  :pattern ((arrayNil_1_Interfaceempty_interface$$$_S_$$$ s@$))
  :qid |quant-u-0|)))
(assert (forall ((s@$ $Snap)) (!
  (as arrayNil_1_Interfaceempty_interface$$$_S_$$$%stateless  Bool)
  :pattern ((arrayNil_1_Interfaceempty_interface$$$_S_$$$%limited s@$))
  :qid |quant-u-1|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@0@00 (arrayNil_1_Interfaceempty_interface$$$_S_$$$%limited s@$))) (=>
    (arrayNil_1_Interfaceempty_interface$$$_S_$$$%precondition s@$)
    (and
      (= (ShArraylen<Int> result@0@00) 1)
      (forall ((idx Int)) (!
        (= (ShArrayloc<Ref> result@0@00 idx) $Ref.null)
        :pattern ((ShArrayloc<Ref> result@0@00 idx))
        )))))
  :pattern ((arrayNil_1_Interfaceempty_interface$$$_S_$$$%limited s@$))
  :qid |quant-u-36|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@0@00 (arrayNil_1_Interfaceempty_interface$$$_S_$$$%limited s@$))) true)
  :pattern ((arrayNil_1_Interfaceempty_interface$$$_S_$$$%limited s@$))
  :qid |quant-u-37|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@0@00 (arrayNil_1_Interfaceempty_interface$$$_S_$$$%limited s@$))) true)
  :pattern ((arrayNil_1_Interfaceempty_interface$$$_S_$$$%limited s@$))
  :qid |quant-u-38|)))
(assert (forall ((s@$ $Snap) (y@1@00 Emb_8_Intbyte$$$$_E_$$$)) (!
  (Seq_equal
    (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%limited s@$ y@1@00)
    (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int s@$ y@1@00))
  :pattern ((unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int s@$ y@1@00))
  :qid |quant-u-2|)))
(assert (forall ((s@$ $Snap) (y@1@00 Emb_8_Intbyte$$$$_E_$$$)) (!
  (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%stateless y@1@00)
  :pattern ((unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%limited s@$ y@1@00))
  :qid |quant-u-3|)))
(assert (forall ((s@$ $Snap) (y@1@00 Emb_8_Intbyte$$$$_E_$$$)) (!
  (let ((result@2@00 (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%limited s@$ y@1@00))) (=>
    (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition s@$ y@1@00)
    (and
      (= (Seq_length result@2@00) 8)
      (=
        (box_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%limited $Snap.unit result@2@00)
        y@1@00))))
  :pattern ((unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%limited s@$ y@1@00))
  :qid |quant-u-39|)))
(assert (forall ((s@$ $Snap) (y@1@00 Emb_8_Intbyte$$$$_E_$$$)) (!
  (let ((result@2@00 (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%limited s@$ y@1@00))) true)
  :pattern ((unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%limited s@$ y@1@00))
  :qid |quant-u-40|)))
(assert (forall ((s@$ $Snap) (y@1@00 Emb_8_Intbyte$$$$_E_$$$)) (!
  (let ((result@2@00 (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%limited s@$ y@1@00))) (=>
    (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition s@$ y@1@00)
    (box_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition $Snap.unit result@2@00)))
  :pattern ((unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%limited s@$ y@1@00))
  :qid |quant-u-41|)))
(assert (forall ((s@$ $Snap) (x@3@00 Seq<Int>)) (!
  (=
    (box_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%limited s@$ x@3@00)
    (box_Emb_8_Intbyte$$$$_E_$$$_Seq_Int s@$ x@3@00))
  :pattern ((box_Emb_8_Intbyte$$$$_E_$$$_Seq_Int s@$ x@3@00))
  :qid |quant-u-4|)))
(assert (forall ((s@$ $Snap) (x@3@00 Seq<Int>)) (!
  (box_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%stateless x@3@00)
  :pattern ((box_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%limited s@$ x@3@00))
  :qid |quant-u-5|)))
(assert (forall ((s@$ $Snap) (x@3@00 Seq<Int>)) (!
  (let ((result@4@00 (box_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%limited s@$ x@3@00))) (=>
    (box_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition s@$ x@3@00)
    (Seq_equal
      (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%limited $Snap.unit result@4@00)
      x@3@00)))
  :pattern ((box_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%limited s@$ x@3@00))
  :qid |quant-u-42|)))
(assert (forall ((s@$ $Snap) (x@3@00 Seq<Int>)) (!
  (let ((result@4@00 (box_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%limited s@$ x@3@00))) (=>
    (box_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition s@$ x@3@00)
    (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition $Snap.unit result@4@00)))
  :pattern ((box_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%limited s@$ x@3@00))
  :qid |quant-u-43|)))
(assert (forall ((s@$ $Snap)) (!
  (=
    (shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$)
    (shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ s@$))
  :pattern ((shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ s@$))
  :qid |quant-u-6|)))
(assert (forall ((s@$ $Snap)) (!
  (as shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%stateless  Bool)
  :pattern ((shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-7|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@5@00 (shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$))) (=>
    (shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition s@$)
    (and
      (= (ShStructget0of2<Ref> result@5@00) $Ref.null)
      (= (ShStructget1of2<Ref> result@5@00) $Ref.null))))
  :pattern ((shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-44|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@5@00 (shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$))) true)
  :pattern ((shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%limited s@$))
  :qid |quant-u-45|)))
(assert (forall ((s@$ $Snap) (x@6@00 ShArray<Ref>)) (!
  (=
    (box_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ x@6@00)
    (box_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref s@$ x@6@00))
  :pattern ((box_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref s@$ x@6@00))
  :qid |quant-u-8|)))
(assert (forall ((s@$ $Snap) (x@6@00 ShArray<Ref>)) (!
  (box_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%stateless x@6@00)
  :pattern ((box_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ x@6@00))
  :qid |quant-u-9|)))
(assert (forall ((s@$ $Snap) (x@6@00 ShArray<Ref>)) (!
  (let ((result@7@00 (box_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ x@6@00))) (=>
    (box_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition s@$ x@6@00)
    (=
      (unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited $Snap.unit result@7@00)
      x@6@00)))
  :pattern ((box_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ x@6@00))
  :qid |quant-u-46|)))
(assert (forall ((s@$ $Snap) (x@6@00 ShArray<Ref>)) (!
  (let ((result@7@00 (box_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ x@6@00))) (=>
    (box_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition s@$ x@6@00)
    (unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@7@00)))
  :pattern ((box_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ x@6@00))
  :qid |quant-u-47|)))
(assert (forall ((s@$ $Snap) (y@8@00 Emb_1_Interfaceempty_interface$$$_S_$$$)) (!
  (=
    (unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@8@00)
    (unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref s@$ y@8@00))
  :pattern ((unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref s@$ y@8@00))
  :qid |quant-u-10|)))
(assert (forall ((s@$ $Snap) (y@8@00 Emb_1_Interfaceempty_interface$$$_S_$$$)) (!
  (unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%stateless y@8@00)
  :pattern ((unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@8@00))
  :qid |quant-u-11|)))
(assert (forall ((s@$ $Snap) (y@8@00 Emb_1_Interfaceempty_interface$$$_S_$$$)) (!
  (let ((result@9@00 (unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@8@00))) (=>
    (unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition s@$ y@8@00)
    (and
      (or
        (= (ShArraylen<Int> result@9@00) 1)
        (= result@9@00 (arrayNil_1_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
      (=
        (box_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited $Snap.unit result@9@00)
        y@8@00))))
  :pattern ((unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@8@00))
  :qid |quant-u-48|)))
(assert (forall ((s@$ $Snap) (y@8@00 Emb_1_Interfaceempty_interface$$$_S_$$$)) (!
  (let ((result@9@00 (unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@8@00))) (=>
    (and
      (unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition s@$ y@8@00)
      (not (= (ShArraylen<Int> result@9@00) 1)))
    (arrayNil_1_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)))
  :pattern ((unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@8@00))
  :qid |quant-u-49|)))
(assert (forall ((s@$ $Snap) (y@8@00 Emb_1_Interfaceempty_interface$$$_S_$$$)) (!
  (let ((result@9@00 (unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@8@00))) (=>
    (unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition s@$ y@8@00)
    (box_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@9@00)))
  :pattern ((unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%limited s@$ y@8@00))
  :qid |quant-u-50|)))
(assert (forall ((s@$ $Snap)) (!
  (= (arrayNil_8_Intbyte$$$_S_$$$%limited s@$) (arrayNil_8_Intbyte$$$_S_$$$ s@$))
  :pattern ((arrayNil_8_Intbyte$$$_S_$$$ s@$))
  :qid |quant-u-12|)))
(assert (forall ((s@$ $Snap)) (!
  (as arrayNil_8_Intbyte$$$_S_$$$%stateless  Bool)
  :pattern ((arrayNil_8_Intbyte$$$_S_$$$%limited s@$))
  :qid |quant-u-13|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@10@00 (arrayNil_8_Intbyte$$$_S_$$$%limited s@$))) (=>
    (arrayNil_8_Intbyte$$$_S_$$$%precondition s@$)
    (and
      (= (ShArraylen<Int> result@10@00) 1)
      (forall ((idx Int)) (!
        (= (ShArrayloc<Ref> result@10@00 idx) $Ref.null)
        :pattern ((ShArrayloc<Ref> result@10@00 idx))
        )))))
  :pattern ((arrayNil_8_Intbyte$$$_S_$$$%limited s@$))
  :qid |quant-u-51|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@10@00 (arrayNil_8_Intbyte$$$_S_$$$%limited s@$))) true)
  :pattern ((arrayNil_8_Intbyte$$$_S_$$$%limited s@$))
  :qid |quant-u-52|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@10@00 (arrayNil_8_Intbyte$$$_S_$$$%limited s@$))) true)
  :pattern ((arrayNil_8_Intbyte$$$_S_$$$%limited s@$))
  :qid |quant-u-53|)))
(assert (forall ((s@$ $Snap) (thisItf@11@00 Tuple2<Ref~_Types>)) (!
  (=
    (IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%limited s@$ thisItf@11@00)
    (IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_ s@$ thisItf@11@00))
  :pattern ((IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_ s@$ thisItf@11@00))
  :qid |quant-u-14|)))
(assert (forall ((s@$ $Snap) (thisItf@11@00 Tuple2<Ref~_Types>)) (!
  (IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%stateless thisItf@11@00)
  :pattern ((IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%limited s@$ thisItf@11@00))
  :qid |quant-u-15|)))
(assert (forall ((s@$ $Snap) (left@13@00 Int) (right@14@00 Int)) (!
  (=
    (intShiftLeft%limited s@$ left@13@00 right@14@00)
    (intShiftLeft s@$ left@13@00 right@14@00))
  :pattern ((intShiftLeft s@$ left@13@00 right@14@00))
  :qid |quant-u-16|)))
(assert (forall ((s@$ $Snap) (left@13@00 Int) (right@14@00 Int)) (!
  (intShiftLeft%stateless left@13@00 right@14@00)
  :pattern ((intShiftLeft%limited s@$ left@13@00 right@14@00))
  :qid |quant-u-17|)))
(assert (forall ((s@$ $Snap)) (!
  (=
    (arrayDefault_8_Intbyte$$$$_E_$$$%limited s@$)
    (arrayDefault_8_Intbyte$$$$_E_$$$ s@$))
  :pattern ((arrayDefault_8_Intbyte$$$$_E_$$$ s@$))
  :qid |quant-u-18|)))
(assert (forall ((s@$ $Snap)) (!
  (as arrayDefault_8_Intbyte$$$$_E_$$$%stateless  Bool)
  :pattern ((arrayDefault_8_Intbyte$$$$_E_$$$%limited s@$))
  :qid |quant-u-19|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@16@00 (arrayDefault_8_Intbyte$$$$_E_$$$%limited s@$))) (=>
    (arrayDefault_8_Intbyte$$$$_E_$$$%precondition s@$)
    (and
      (=
        (Seq_length
          (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int $Snap.unit result@16@00))
        8)
      (forall ((idx Int)) (!
        (=>
          (and (<= 0 idx) (< idx 8))
          (=
            (Seq_index
              (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int $Snap.unit result@16@00)
              idx)
            0))
        :pattern ((Seq_index
          (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int $Snap.unit result@16@00)
          idx))
        )))))
  :pattern ((arrayDefault_8_Intbyte$$$$_E_$$$%limited s@$))
  :qid |quant-u-54|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@16@00 (arrayDefault_8_Intbyte$$$$_E_$$$%limited s@$))) (=>
    (arrayDefault_8_Intbyte$$$$_E_$$$%precondition s@$)
    (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition $Snap.unit result@16@00)))
  :pattern ((arrayDefault_8_Intbyte$$$$_E_$$$%limited s@$))
  :qid |quant-u-55|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@16@00 (arrayDefault_8_Intbyte$$$$_E_$$$%limited s@$))) (=>
    (arrayDefault_8_Intbyte$$$$_E_$$$%precondition s@$)
    (forall ((idx Int)) (!
      (=>
        (and (<= 0 idx) (< idx 8))
        (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition $Snap.unit result@16@00))
      :pattern ((Seq_index
        (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int $Snap.unit result@16@00)
        idx))
      ))))
  :pattern ((arrayDefault_8_Intbyte$$$$_E_$$$%limited s@$))
  :qid |quant-u-56|)))
(assert (forall ((s@$ $Snap) (left@17@00 Int) (right@18@00 Int)) (!
  (=
    (intShiftRight%limited s@$ left@17@00 right@18@00)
    (intShiftRight s@$ left@17@00 right@18@00))
  :pattern ((intShiftRight s@$ left@17@00 right@18@00))
  :qid |quant-u-20|)))
(assert (forall ((s@$ $Snap) (left@17@00 Int) (right@18@00 Int)) (!
  (intShiftRight%stateless left@17@00 right@18@00)
  :pattern ((intShiftRight%limited s@$ left@17@00 right@18@00))
  :qid |quant-u-21|)))
(assert (forall ((s@$ $Snap) (left@20@00 Int) (right@21@00 Int)) (!
  (=
    (intBitwiseAnd%limited s@$ left@20@00 right@21@00)
    (intBitwiseAnd s@$ left@20@00 right@21@00))
  :pattern ((intBitwiseAnd s@$ left@20@00 right@21@00))
  :qid |quant-u-22|)))
(assert (forall ((s@$ $Snap) (left@20@00 Int) (right@21@00 Int)) (!
  (intBitwiseAnd%stateless left@20@00 right@21@00)
  :pattern ((intBitwiseAnd%limited s@$ left@20@00 right@21@00))
  :qid |quant-u-23|)))
(assert (forall ((s@$ $Snap)) (!
  (=
    (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%limited s@$)
    (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$ s@$))
  :pattern ((shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$ s@$))
  :qid |quant-u-24|)))
(assert (forall ((s@$ $Snap)) (!
  (as shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%stateless  Bool)
  :pattern ((shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%limited s@$))
  :qid |quant-u-25|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@23@00 (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%limited s@$))) (=>
    (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%precondition s@$)
    (and
      (=
        (ShStructget0of17<ShStruct2<Ref~_Ref>> result@23@00)
        (shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$ $Snap.unit))
      (and
        (= (ShStructget1of17<Ref> result@23@00) $Ref.null)
        (and
          (= (ShStructget2of17<Ref> result@23@00) $Ref.null)
          (and
            (= (ShStructget3of17<Ref> result@23@00) $Ref.null)
            (and
              (= (ShStructget4of17<Ref> result@23@00) $Ref.null)
              (and
                (= (ShStructget5of17<Ref> result@23@00) $Ref.null)
                (and
                  (= (ShStructget6of17<Ref> result@23@00) $Ref.null)
                  (and
                    (= (ShStructget7of17<Ref> result@23@00) $Ref.null)
                    (and
                      (= (ShStructget8of17<Ref> result@23@00) $Ref.null)
                      (and
                        (= (ShStructget9of17<Ref> result@23@00) $Ref.null)
                        (and
                          (= (ShStructget10of17<Ref> result@23@00) $Ref.null)
                          (and
                            (= (ShStructget11of17<Ref> result@23@00) $Ref.null)
                            (and
                              (= (ShStructget12of17<Ref> result@23@00) $Ref.null)
                              (and
                                (=
                                  (ShStructget13of17<Ref> result@23@00)
                                  $Ref.null)
                                (and
                                  (=
                                    (ShStructget14of17<Ref> result@23@00)
                                    $Ref.null)
                                  (and
                                    (=
                                      (ShStructget15of17<Ref> result@23@00)
                                      $Ref.null)
                                    (=
                                      (ShStructget16of17<Ref> result@23@00)
                                      $Ref.null)))))))))))))))))))
  :pattern ((shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%limited s@$))
  :qid |quant-u-57|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@23@00 (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%limited s@$))) (=>
    (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%precondition s@$)
    (shStructDefault_$ContentsA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PayloadA_SliceIntbyte$$$_S_$$$$$$_S_$$$$%precondition $Snap.unit)))
  :pattern ((shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%limited s@$))
  :qid |quant-u-58|)))
(assert (forall ((s@$ $Snap) (left@24@00 Int) (right@25@00 Int)) (!
  (= (sadd%limited s@$ left@24@00 right@25@00) (sadd s@$ left@24@00 right@25@00))
  :pattern ((sadd s@$ left@24@00 right@25@00))
  :qid |quant-u-26|)))
(assert (forall ((s@$ $Snap) (left@24@00 Int) (right@25@00 Int)) (!
  (sadd%stateless left@24@00 right@25@00)
  :pattern ((sadd%limited s@$ left@24@00 right@25@00))
  :qid |quant-u-27|)))
(assert (forall ((s@$ $Snap) (left@24@00 Int) (right@25@00 Int)) (!
  (let ((result@26@00 (sadd%limited s@$ left@24@00 right@25@00))) (=>
    (sadd%precondition s@$ left@24@00 right@25@00)
    (= result@26@00 (+ left@24@00 right@25@00))))
  :pattern ((sadd%limited s@$ left@24@00 right@25@00))
  :qid |quant-u-59|)))
(assert (forall ((s@$ $Snap) (left@24@00 Int) (right@25@00 Int)) (!
  (let ((result@26@00 (sadd%limited s@$ left@24@00 right@25@00))) true)
  :pattern ((sadd%limited s@$ left@24@00 right@25@00))
  :qid |quant-u-60|)))
(assert (forall ((s@$ $Snap) (left@24@00 Int) (right@25@00 Int)) (!
  (=>
    (sadd%precondition s@$ left@24@00 right@25@00)
    (= (sadd s@$ left@24@00 right@25@00) (+ left@24@00 right@25@00)))
  :pattern ((sadd s@$ left@24@00 right@25@00))
  :qid |quant-u-61|)))
(assert (forall ((s@$ $Snap) (left@24@00 Int) (right@25@00 Int)) (!
  true
  :pattern ((sadd s@$ left@24@00 right@25@00))
  :qid |quant-u-62|)))
(assert (forall ((s@$ $Snap)) (!
  (=
    (sliceDefault_Interfaceempty_interface$$$_S_$$$%limited s@$)
    (sliceDefault_Interfaceempty_interface$$$_S_$$$ s@$))
  :pattern ((sliceDefault_Interfaceempty_interface$$$_S_$$$ s@$))
  :qid |quant-u-28|)))
(assert (forall ((s@$ $Snap)) (!
  (as sliceDefault_Interfaceempty_interface$$$_S_$$$%stateless  Bool)
  :pattern ((sliceDefault_Interfaceempty_interface$$$_S_$$$%limited s@$))
  :qid |quant-u-29|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@27@00 (sliceDefault_Interfaceempty_interface$$$_S_$$$%limited s@$))) (=>
    (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition s@$)
    (and
      (= (soffset<Int> result@27@00) 0)
      (= (slen<Int> result@27@00) 0)
      (= (scap<Int> result@27@00) 0)
      (=
        (sarray<ShArray<Ref>> result@27@00)
        (unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref $Snap.unit (box_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref $Snap.unit (arrayNil_1_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))))))
  :pattern ((sliceDefault_Interfaceempty_interface$$$_S_$$$%limited s@$))
  :qid |quant-u-63|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@27@00 (sliceDefault_Interfaceempty_interface$$$_S_$$$%limited s@$))) true)
  :pattern ((sliceDefault_Interfaceempty_interface$$$_S_$$$%limited s@$))
  :qid |quant-u-64|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@27@00 (sliceDefault_Interfaceempty_interface$$$_S_$$$%limited s@$))) true)
  :pattern ((sliceDefault_Interfaceempty_interface$$$_S_$$$%limited s@$))
  :qid |quant-u-65|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@27@00 (sliceDefault_Interfaceempty_interface$$$_S_$$$%limited s@$))) true)
  :pattern ((sliceDefault_Interfaceempty_interface$$$_S_$$$%limited s@$))
  :qid |quant-u-66|)))
(assert (forall ((s@$ $Snap)) (!
  (let ((result@27@00 (sliceDefault_Interfaceempty_interface$$$_S_$$$%limited s@$))) (=>
    (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition s@$)
    (and
      (and
        (arrayNil_1_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
        (box_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (arrayNil_1_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
      (unbox_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (box_Emb_1_Interfaceempty_interface$$$_S_$$$_ShArray_Ref $Snap.unit (arrayNil_1_Interfaceempty_interface$$$_S_$$$ $Snap.unit))))))
  :pattern ((sliceDefault_Interfaceempty_interface$$$_S_$$$%limited s@$))
  :qid |quant-u-67|)))
(assert (forall ((s@$ $Snap) (a@28@00 ShArray<Ref>) (i@29@00 Int) (j@30@00 Int)) (!
  (=
    (ssliceFromArray_Ref%limited s@$ a@28@00 i@29@00 j@30@00)
    (ssliceFromArray_Ref s@$ a@28@00 i@29@00 j@30@00))
  :pattern ((ssliceFromArray_Ref s@$ a@28@00 i@29@00 j@30@00))
  :qid |quant-u-30|)))
(assert (forall ((s@$ $Snap) (a@28@00 ShArray<Ref>) (i@29@00 Int) (j@30@00 Int)) (!
  (ssliceFromArray_Ref%stateless a@28@00 i@29@00 j@30@00)
  :pattern ((ssliceFromArray_Ref%limited s@$ a@28@00 i@29@00 j@30@00))
  :qid |quant-u-31|)))
(assert (forall ((s@$ $Snap) (a@28@00 ShArray<Ref>) (i@29@00 Int) (j@30@00 Int)) (!
  (let ((result@31@00 (ssliceFromArray_Ref%limited s@$ a@28@00 i@29@00 j@30@00))) (=>
    (ssliceFromArray_Ref%precondition s@$ a@28@00 i@29@00 j@30@00)
    (and
      (= (soffset<Int> result@31@00) i@29@00)
      (= (slen<Int> result@31@00) (- j@30@00 i@29@00))
      (= (scap<Int> result@31@00) (- (ShArraylen<Int> a@28@00) i@29@00))
      (= (sarray<ShArray<Ref>> result@31@00) a@28@00))))
  :pattern ((ssliceFromArray_Ref%limited s@$ a@28@00 i@29@00 j@30@00))
  :qid |quant-u-68|)))
(assert (forall ((s@$ $Snap) (a@28@00 ShArray<Ref>) (i@29@00 Int) (j@30@00 Int)) (!
  (let ((result@31@00 (ssliceFromArray_Ref%limited s@$ a@28@00 i@29@00 j@30@00))) true)
  :pattern ((ssliceFromArray_Ref%limited s@$ a@28@00 i@29@00 j@30@00))
  :qid |quant-u-69|)))
(assert (forall ((s@$ $Snap) (a@28@00 ShArray<Ref>) (i@29@00 Int) (j@30@00 Int)) (!
  (let ((result@31@00 (ssliceFromArray_Ref%limited s@$ a@28@00 i@29@00 j@30@00))) true)
  :pattern ((ssliceFromArray_Ref%limited s@$ a@28@00 i@29@00 j@30@00))
  :qid |quant-u-70|)))
(assert (forall ((s@$ $Snap) (a@28@00 ShArray<Ref>) (i@29@00 Int) (j@30@00 Int)) (!
  (let ((result@31@00 (ssliceFromArray_Ref%limited s@$ a@28@00 i@29@00 j@30@00))) true)
  :pattern ((ssliceFromArray_Ref%limited s@$ a@28@00 i@29@00 j@30@00))
  :qid |quant-u-71|)))
(assert (forall ((s@$ $Snap) (a@28@00 ShArray<Ref>) (i@29@00 Int) (j@30@00 Int)) (!
  (let ((result@31@00 (ssliceFromArray_Ref%limited s@$ a@28@00 i@29@00 j@30@00))) true)
  :pattern ((ssliceFromArray_Ref%limited s@$ a@28@00 i@29@00 j@30@00))
  :qid |quant-u-72|)))
(assert (forall ((s@$ $Snap) (x@32@00 ShArray<Ref>)) (!
  (=
    (box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ x@32@00)
    (box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref s@$ x@32@00))
  :pattern ((box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref s@$ x@32@00))
  :qid |quant-u-32|)))
(assert (forall ((s@$ $Snap) (x@32@00 ShArray<Ref>)) (!
  (box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%stateless x@32@00)
  :pattern ((box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ x@32@00))
  :qid |quant-u-33|)))
(assert (forall ((s@$ $Snap) (x@32@00 ShArray<Ref>)) (!
  (let ((result@33@00 (box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ x@32@00))) (=>
    (box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition s@$ x@32@00)
    (=
      (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%limited $Snap.unit result@33@00)
      x@32@00)))
  :pattern ((box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ x@32@00))
  :qid |quant-u-73|)))
(assert (forall ((s@$ $Snap) (x@32@00 ShArray<Ref>)) (!
  (let ((result@33@00 (box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ x@32@00))) (=>
    (box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition s@$ x@32@00)
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@33@00)))
  :pattern ((box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ x@32@00))
  :qid |quant-u-74|)))
(assert (forall ((s@$ $Snap) (y@34@00 Emb_8_Intbyte$$$_S_$$$)) (!
  (=
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ y@34@00)
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref s@$ y@34@00))
  :pattern ((unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref s@$ y@34@00))
  :qid |quant-u-34|)))
(assert (forall ((s@$ $Snap) (y@34@00 Emb_8_Intbyte$$$_S_$$$)) (!
  (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%stateless y@34@00)
  :pattern ((unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ y@34@00))
  :qid |quant-u-35|)))
(assert (forall ((s@$ $Snap) (y@34@00 Emb_8_Intbyte$$$_S_$$$)) (!
  (let ((result@35@00 (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ y@34@00))) (=>
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition s@$ y@34@00)
    (and
      (or
        (= (ShArraylen<Int> result@35@00) 8)
        (= result@35@00 (arrayNil_8_Intbyte$$$_S_$$$ $Snap.unit)))
      (=
        (box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%limited $Snap.unit result@35@00)
        y@34@00))))
  :pattern ((unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ y@34@00))
  :qid |quant-u-75|)))
(assert (forall ((s@$ $Snap) (y@34@00 Emb_8_Intbyte$$$_S_$$$)) (!
  (let ((result@35@00 (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ y@34@00))) (=>
    (and
      (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition s@$ y@34@00)
      (not (= (ShArraylen<Int> result@35@00) 8)))
    (arrayNil_8_Intbyte$$$_S_$$$%precondition $Snap.unit)))
  :pattern ((unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ y@34@00))
  :qid |quant-u-76|)))
(assert (forall ((s@$ $Snap) (y@34@00 Emb_8_Intbyte$$$_S_$$$)) (!
  (let ((result@35@00 (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ y@34@00))) (=>
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition s@$ y@34@00)
    (box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit result@35@00)))
  :pattern ((unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%limited s@$ y@34@00))
  :qid |quant-u-77|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- pseudoHeaderChecksum_840d9458_PMSCION$L$66$2 ----------
(declare-const s_V0_CN0$in@0@01 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-const csum_V1$in@1@01 Int)
(declare-const i_V6$in@2@01 Int)
(declare-const err_V0_CN4$in@3@01 Tuple2<Ref~_Types>)
(declare-const csum_V1$out@4@01 Int)
(declare-const s_V0_CN0$in@5@01 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-const csum_V1$in@6@01 Int)
(declare-const i_V6$in@7@01 Int)
(declare-const err_V0_CN4$in@8@01 Tuple2<Ref~_Types>)
(declare-const csum_V1$out@9@01 Int)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@10@01 $Snap)
(assert (= $t@10@01 ($Snap.combine ($Snap.first $t@10@01) ($Snap.second $t@10@01))))
; [eval] (ShStructget12of17(s_V0_CN0$in): Ref)
(assert (not (= (ShStructget12of17<Ref> s_V0_CN0$in@5@01) $Ref.null)))
(assert (=
  ($Snap.second $t@10@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@10@01))
    ($Snap.second ($Snap.second $t@10@01)))))
; [eval] (ShStructget12of17(s_V0_CN0$in): Ref)
; [eval] (slen((ShStructget12of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0$in): Ref)
(assert (=
  ($Snap.second ($Snap.second $t@10@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@10@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@10@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@10@01))) $Snap.unit))
; [eval] 0 <= i_V6$in
(assert (<= 0 i_V6$in@7@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@10@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@10@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@10@01))))
  $Snap.unit))
; [eval] i_V6$in < (slen((ShStructget12of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget12of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0$in): Ref)
(assert (<
  i_V6$in@7@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@10@01)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@01)))))
  $Snap.unit))
; [eval] i_V6$in % 2 == 0
; [eval] i_V6$in % 2
(assert (= (mod i_V6$in@7@01 2) 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@01))))))
  $Snap.unit))
; [eval] (slen((ShStructget12of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2 == 0
; [eval] (slen((ShStructget12of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2
; [eval] (slen((ShStructget12of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0$in): Ref)
(assert (=
  (mod (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@10@01))) 2)
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@10@01))))))
  $Snap.unit))
; [eval] err_V0_CN4$in == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (=
  err_V0_CN4$in@8@01
  (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@11@01 $Snap)
(assert (= $t@11@01 ($Snap.combine ($Snap.first $t@11@01) ($Snap.second $t@11@01))))
(assert (= ($Snap.first $t@11@01) $Snap.unit))
; [eval] err_V0_CN4$in == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (=
  ($Snap.second $t@11@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@11@01))
    ($Snap.second ($Snap.second $t@11@01)))))
; [eval] (ShStructget12of17(s_V0_CN0$in): Ref)
(assert (=
  ($Snap.second ($Snap.second $t@11@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@11@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@11@01))))))
; [eval] (ShStructget12of17(s_V0_CN0$in): Ref)
; [eval] (slen((ShStructget12of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0$in): Ref)
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@11@01))) $Snap.unit))
; [eval] (ShStructget12of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ == old((ShStructget12of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$)
; [eval] (ShStructget12of17(s_V0_CN0$in): Ref)
; [eval] old((ShStructget12of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$)
; [eval] (ShStructget12of17(s_V0_CN0$in): Ref)
(assert (=
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@11@01)))
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@10@01))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- pseudoHeaderChecksum_840d9458_PMSCION ----------
(declare-const s_V0@12@01 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-const length_V0@13@01 Int)
(declare-const protocol_V0@14@01 Int)
(declare-const res_V0@15@01 Int)
(declare-const err_V0@16@01 Tuple2<Ref~_Types>)
(declare-const s_V0@17@01 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-const length_V0@18@01 Int)
(declare-const protocol_V0@19@01 Int)
(declare-const res_V0@20@01 Int)
(declare-const err_V0@21@01 Tuple2<Ref~_Types>)
(push) ; 1
(declare-const $t@22@01 $Snap)
(assert (= $t@22@01 ($Snap.combine ($Snap.first $t@22@01) ($Snap.second $t@22@01))))
; [eval] (ShStructget13of17(s_V0): Ref)
(assert (not (= (ShStructget13of17<Ref> s_V0@17@01) $Ref.null)))
(assert (=
  ($Snap.second $t@22@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@22@01))
    ($Snap.second ($Snap.second $t@22@01)))))
; [eval] (ShStructget12of17(s_V0): Ref)
(push) ; 2
(set-option :timeout 10)
(assert (not (= (ShStructget13of17<Ref> s_V0@17@01) (ShStructget12of17<Ref> s_V0@17@01))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget12of17<Ref> s_V0@17@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@22@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@22@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@22@01))) $Snap.unit))
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2 == 0
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0): Ref)
(assert (=
  (mod (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 2)
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@22@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@22@01))))
  $Snap.unit))
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2 == 0
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0): Ref)
(assert (=
  (mod
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
    2)
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))
; [eval] (ShStructget11of17(s_V0): Ref)
(assert (not (= (ShStructget11of17<Ref> s_V0@17@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))))
; [eval] (ShStructget10of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (= (ShStructget11of17<Ref> s_V0@17@01) (ShStructget10of17<Ref> s_V0@17@01))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not (= (ShStructget10of17<Ref> s_V0@17@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@22@01))))))))))
; [eval] (ShStructget13of17(s_V0): Ref)
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0): Ref)
; [eval] (ShStructget12of17(s_V0): Ref)
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (and
  (=
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
  (=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01)))
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@23@01 $Snap)
(assert (= $t@23@01 ($Snap.combine ($Snap.first $t@23@01) ($Snap.second $t@23@01))))
; [eval] (ShStructget13of17(s_V0): Ref)
(assert (=
  ($Snap.second $t@23@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@23@01))
    ($Snap.second ($Snap.second $t@23@01)))))
; [eval] (ShStructget12of17(s_V0): Ref)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (ShStructget13of17<Ref> s_V0@17@01) (ShStructget12of17<Ref> s_V0@17@01))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second $t@23@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@23@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@23@01))))))
; [eval] (ShStructget11of17(s_V0): Ref)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@23@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@23@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@23@01)))))))
; [eval] (ShStructget10of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (ShStructget11of17<Ref> s_V0@17@01) (ShStructget10of17<Ref> s_V0@17@01))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@23@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@23@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@23@01))))))))
; [eval] (ShStructget13of17(s_V0): Ref)
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0): Ref)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@23@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@23@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@23@01)))))))))
; [eval] (ShStructget12of17(s_V0): Ref)
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (=
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@23@01))
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
  (=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@23@01)))
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@23@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@23@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@23@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@23@01)))))))
  $Snap.unit))
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == 0 ==> !(err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == 0
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
    0))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
  0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 0 | slen[Int](First:(Second:($t@23@01))) == 0 | live]
; [else-branch: 0 | slen[Int](First:(Second:($t@23@01))) != 0 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 0 | slen[Int](First:(Second:($t@23@01))) == 0]
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
  0))
; [eval] !(err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(pop) ; 4
(push) ; 4
; [else-branch: 0 | slen[Int](First:(Second:($t@23@01))) != 0]
(assert (not
  (=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
    0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
      0))
  (=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
    0)))
(assert (=>
  (=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
    0)
  (not
    (=
      err_V0@21@01
      (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@23@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@23@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@23@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@23@01))))))))
  $Snap.unit))
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == 0 ==> !(err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == 0
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0): Ref)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@23@01))) 0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@23@01))) 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1 | slen[Int](First:($t@23@01)) == 0 | live]
; [else-branch: 1 | slen[Int](First:($t@23@01)) != 0 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1 | slen[Int](First:($t@23@01)) == 0]
(assert (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@23@01))) 0))
; [eval] !(err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(pop) ; 4
(push) ; 4
; [else-branch: 1 | slen[Int](First:($t@23@01)) != 0]
(assert (not (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@23@01))) 0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@23@01))) 0))
  (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@23@01))) 0)))
(assert (=>
  (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@23@01))) 0)
  (not
    (=
      err_V0@21@01
      (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@23@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@23@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@23@01))))))))))))
; [eval] !(err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  err_V0@21@01
  (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    err_V0@21@01
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2 | err_V0@21@01 != tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | live]
; [else-branch: 2 | err_V0@21@01 == tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 2 | err_V0@21@01 != tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types])]
(assert (not
  (=
    err_V0@21@01
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@23@01)))))))))
  $Snap.unit))
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0 && (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0 ==> err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0 && (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0): Ref)
(push) ; 4
; [then-branch: 3 | slen[Int](First:(Second:($t@23@01))) > 0 | live]
; [else-branch: 3 | !(slen[Int](First:(Second:($t@23@01))) > 0) | live]
(push) ; 5
; [then-branch: 3 | slen[Int](First:(Second:($t@23@01))) > 0]
(assert (>
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
  0))
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0): Ref)
(pop) ; 5
(push) ; 5
; [else-branch: 3 | !(slen[Int](First:(Second:($t@23@01))) > 0)]
(assert (not
  (>
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
    0)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
      0))
  (>
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
    0)))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@23@01))) 0)
    (>
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
      0)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@23@01))) 0)
  (>
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
    0))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4 | slen[Int](First:($t@23@01)) > 0 && slen[Int](First:(Second:($t@23@01))) > 0 | live]
; [else-branch: 4 | !(slen[Int](First:($t@23@01)) > 0 && slen[Int](First:(Second:($t@23@01))) > 0) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 4 | slen[Int](First:($t@23@01)) > 0 && slen[Int](First:(Second:($t@23@01))) > 0]
(assert (and
  (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@23@01))) 0)
  (>
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
    0)))
; [eval] err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(pop) ; 5
(push) ; 5
; [else-branch: 4 | !(slen[Int](First:($t@23@01)) > 0 && slen[Int](First:(Second:($t@23@01))) > 0)]
(assert (not
  (and
    (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@23@01))) 0)
    (>
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
      0))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@23@01))) 0)
      (>
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
        0)))
  (and
    (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@23@01))) 0)
    (>
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
      0))))
(assert (=>
  (and
    (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@23@01))) 0)
    (>
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
      0))
  (=
    err_V0@21@01
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(pop) ; 3
(push) ; 3
; [else-branch: 2 | err_V0@21@01 == tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types])]
(assert (=
  err_V0@21@01
  (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@23@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@23@01)))))))))
  $Snap.unit))
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0 && (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0 ==> err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0 && (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0): Ref)
(push) ; 4
; [then-branch: 5 | slen[Int](First:(Second:($t@23@01))) > 0 | live]
; [else-branch: 5 | !(slen[Int](First:(Second:($t@23@01))) > 0) | live]
(push) ; 5
; [then-branch: 5 | slen[Int](First:(Second:($t@23@01))) > 0]
(assert (>
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
  0))
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0): Ref)
(pop) ; 5
(push) ; 5
; [else-branch: 5 | !(slen[Int](First:(Second:($t@23@01))) > 0)]
(assert (not
  (>
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
    0)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
      0))
  (>
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
    0)))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@23@01))) 0)
    (>
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
      0)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@23@01))) 0)
  (>
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6 | slen[Int](First:($t@23@01)) > 0 && slen[Int](First:(Second:($t@23@01))) > 0 | live]
; [else-branch: 6 | !(slen[Int](First:($t@23@01)) > 0 && slen[Int](First:(Second:($t@23@01))) > 0) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 6 | slen[Int](First:($t@23@01)) > 0 && slen[Int](First:(Second:($t@23@01))) > 0]
(assert (and
  (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@23@01))) 0)
  (>
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
    0)))
; [eval] err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (and
  (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@23@01))) 0)
  (>
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
    0)))
(assert (=>
  (and
    (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@23@01))) 0)
    (>
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@23@01))))
      0))
  (=
    err_V0@21@01
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(pop) ; 3
(pop) ; 2
(push) ; 2
; [exec]
; var err_V0_CN4: Tuple2[Ref, Types]
(declare-const err_V0_CN4@24@01 Tuple2<Ref~_Types>)
; [exec]
; var res_V0_CN3: Int
(declare-const res_V0_CN3@25@01 Int)
; [exec]
; var protocol_V0_CN2: Int
(declare-const protocol_V0_CN2@26@01 Int)
; [exec]
; var length_V0_CN1: Int
(declare-const length_V0_CN1@27@01 Int)
; [exec]
; var s_V0_CN0: ShStruct17[ShStruct2[Ref, Ref], Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref, Ref]
(declare-const s_V0_CN0@28@01 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
; [exec]
; var l_V1: Int
(declare-const l_V1@29@01 Int)
; [exec]
; var rawDstAddrLen_V1: Int
(declare-const rawDstAddrLen_V1@30@01 Int)
; [exec]
; var rawSrcAddrLen_V1: Int
(declare-const rawSrcAddrLen_V1@31@01 Int)
; [exec]
; var dstIA_V1: Emb_8_Intbyte$$$_S_$$$
(declare-const dstIA_V1@32@01 Emb_8_Intbyte$$$_S_$$$)
; [exec]
; var srcIA_V1: Emb_8_Intbyte$$$_S_$$$
(declare-const srcIA_V1@33@01 Emb_8_Intbyte$$$_S_$$$)
; [exec]
; var csum_V1: Int
(declare-const csum_V1@34@01 Int)
; [exec]
; var fn$$1: Emb_8_Intbyte$$$_S_$$$
(declare-const fn$$1@35@01 Emb_8_Intbyte$$$_S_$$$)
; [exec]
; var fn$$2: Emb_8_Intbyte$$$$_E_$$$
(declare-const fn$$2@36@01 Emb_8_Intbyte$$$$_E_$$$)
; [exec]
; var fn$$5: Emb_8_Intbyte$$$_S_$$$
(declare-const fn$$5@37@01 Emb_8_Intbyte$$$_S_$$$)
; [exec]
; var fn$$6: Emb_8_Intbyte$$$$_E_$$$
(declare-const fn$$6@38@01 Emb_8_Intbyte$$$$_E_$$$)
; [exec]
; var fn$$9: Emb_8_Intbyte$$$_S_$$$
(declare-const fn$$9@39@01 Emb_8_Intbyte$$$_S_$$$)
; [exec]
; var fn$$10: Emb_8_Intbyte$$$$_E_$$$
(declare-const fn$$10@40@01 Emb_8_Intbyte$$$$_E_$$$)
; [exec]
; var fn$$13: Emb_8_Intbyte$$$_S_$$$
(declare-const fn$$13@41@01 Emb_8_Intbyte$$$_S_$$$)
; [exec]
; var fn$$14: Emb_8_Intbyte$$$$_E_$$$
(declare-const fn$$14@42@01 Emb_8_Intbyte$$$$_E_$$$)
; [exec]
; var i_V2: Int
(declare-const i_V2@43@01 Int)
; [exec]
; var i_V5: Int
(declare-const i_V5@44@01 Int)
; [exec]
; var i_V6: Int
(declare-const i_V6@45@01 Int)
; [exec]
; inhale res_V0 == 0
(declare-const $t@46@01 $Snap)
(assert (= $t@46@01 $Snap.unit))
; [eval] res_V0 == 0
(assert (= res_V0@20@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
(declare-const $t@47@01 $Snap)
(assert (= $t@47@01 $Snap.unit))
; [eval] err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (=
  err_V0@21@01
  (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale s_V0_CN0 ==
;   shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$()
(declare-const $t@48@01 $Snap)
(assert (= $t@48@01 $Snap.unit))
; [eval] s_V0_CN0 == shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$()
; [eval] shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$()
(set-option :timeout 0)
(push) ; 3
(assert (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%precondition $Snap.unit))
(pop) ; 3
; Joined path conditions
(assert (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$%precondition $Snap.unit))
(assert (=
  s_V0_CN0@28@01
  (shStructDefault_$BaseLayerA_DefinedBaseLayer_840d9458_T$$$_S_$$$_VersionA_Intuint8$$$_S_$$$_TrafficClassA_Intuint8$$$_S_$$$_FlowIDA_Intuint32$$$_S_$$$_NextHdrA_DefinedL4ProtocolType_840d9458_T$$$_S_$$$_HdrLenA_Intuint8$$$_S_$$$_PayloadLenA_Intuint16$$$_S_$$$_PathTypeA_DefinedType_a6ceb89d_T$$$_S_$$$_DstAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_SrcAddrTypeA_DefinedAddrType_840d9458_T$$$_S_$$$_DstIAA_DefinedIA_cd675838_T$$$_S_$$$_SrcIAA_DefinedIA_cd675838_T$$$_S_$$$_RawDstAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_RawSrcAddrA_SliceIntbyte$$$_S_$$$$$$_S_$$$_PathA_DefinedPath_a6ceb89d_T$$$_S_$$$_pathPoolA_SliceDefinedPath_a6ceb89d_T$$$_S_$$$$$$_S_$$$_pathPoolRawA_DefinedPath_a6ceb89d_T$$$_S_$$$$ $Snap.unit)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale length_V0_CN1 == 0
(declare-const $t@49@01 $Snap)
(assert (= $t@49@01 $Snap.unit))
; [eval] length_V0_CN1 == 0
(assert (= length_V0_CN1@27@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale protocol_V0_CN2 == 0
(declare-const $t@50@01 $Snap)
(assert (= $t@50@01 $Snap.unit))
; [eval] protocol_V0_CN2 == 0
(assert (= protocol_V0_CN2@26@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale res_V0_CN3 == 0
(declare-const $t@51@01 $Snap)
(assert (= $t@51@01 $Snap.unit))
; [eval] res_V0_CN3 == 0
(assert (= res_V0_CN3@25@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale err_V0_CN4 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
(declare-const $t@52@01 $Snap)
(assert (= $t@52@01 $Snap.unit))
; [eval] err_V0_CN4 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (=
  err_V0_CN4@24@01
  (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; s_V0_CN0 := s_V0
; [exec]
; length_V0_CN1 := length_V0
; [exec]
; protocol_V0_CN2 := protocol_V0
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == 0
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
    0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
  0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7 | slen[Int](First:(Second:($t@22@01))) == 0 | live]
; [else-branch: 7 | slen[Int](First:(Second:($t@22@01))) != 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 7 | slen[Int](First:(Second:($t@22@01))) == 0]
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
  0))
; [exec]
; var N5: Tuple2[Ref, Types]
(declare-const N5@53@01 Tuple2<Ref~_Types>)
; [exec]
; N5 := New_bfd5223e_F(stringLit64657374696e6174696f6e2061646472657373206d697373696e67(),
;   sliceDefault_Interfaceempty_interface$$$_S_$$$())
; [eval] stringLit64657374696e6174696f6e2061646472657373206d697373696e67()
; [eval] sliceDefault_Interfaceempty_interface$$$_S_$$$()
(push) ; 4
(assert (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit))
(pop) ; 4
; Joined path conditions
(assert (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit))
(declare-const i_V1@54@01 Int)
(push) ; 4
; [eval] 0 <= i_V1 && i_V1 < (slen(errCtx_V0): Int)
; [eval] 0 <= i_V1
(push) ; 5
; [then-branch: 8 | 0 <= i_V1@54@01 | live]
; [else-branch: 8 | !(0 <= i_V1@54@01) | live]
(push) ; 6
; [then-branch: 8 | 0 <= i_V1@54@01]
(assert (<= 0 i_V1@54@01))
; [eval] i_V1 < (slen(errCtx_V0): Int)
; [eval] (slen(errCtx_V0): Int)
(pop) ; 6
(push) ; 6
; [else-branch: 8 | !(0 <= i_V1@54@01)]
(assert (not (<= 0 i_V1@54@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V1@54@01)) (<= 0 i_V1@54@01)))
(assert (and
  (<
    i_V1@54@01
    (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
  (<= 0 i_V1@54@01)))
; [eval] (ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref)
; [eval] (sarray(errCtx_V0): ShArray[Ref])
; [eval] sadd((soffset(errCtx_V0): Int), i_V1)
; [eval] (soffset(errCtx_V0): Int)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@54@01))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@54@01))
(pop) ; 4
(declare-fun inv@55@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@54@01 Int)) (!
  (=>
    (and
      (<
        i_V1@54@01
        (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
      (<= 0 i_V1@54@01))
    (and
      (or (not (<= 0 i_V1@54@01)) (<= 0 i_V1@54@01))
      (sadd%precondition $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@54@01)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@54@01)))
  :qid |Interfaceempty_interface$$$$_E_$$$-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((i_V11@54@01 Int) (i_V12@54@01 Int)) (!
  (=>
    (and
      (and
        (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
        (=>
          (and
            (<
              i_V11@54@01
              (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
            (<= 0 i_V11@54@01))
          (and
            (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
            (=>
              (and
                (<
                  i_V12@54@01
                  (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
                (<= 0 i_V12@54@01))
              (and
                (and
                  (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
                  (and
                    (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
                    (sadd%precondition $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V11@54@01)))
                (and
                  (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
                  (and
                    (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
                    (sadd%precondition $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V12@54@01))))))))
      (and
        (and
          (<
            i_V11@54@01
            (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
          (<= 0 i_V11@54@01))
        (and
          (<
            i_V12@54@01
            (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
          (<= 0 i_V12@54@01))
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V11@54@01))
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V12@54@01)))))
    (= i_V11@54@01 i_V12@54@01))
  
  :qid |Interfaceempty_interface$$$$_E_$$$-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i_V1@54@01 Int)) (!
  (and
    (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
    (=>
      (and
        (<
          i_V1@54@01
          (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
        (<= 0 i_V1@54@01))
      (and
        (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
        (and
          (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
          (sadd%precondition $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@54@01)))))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@54@01)))
  :qid |Interfaceempty_interface$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (and
    (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
    (=>
      (and
        (<
          (inv@55@01 r)
          (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
        (<= 0 (inv@55@01 r)))
      (and
        (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
        (and
          (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
          (sadd%precondition $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (inv@55@01 r))))))
  :pattern ((inv@55@01 r))
  :qid |Interfaceempty_interface$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@54@01 Int)) (!
  (=>
    (and
      (<
        i_V1@54@01
        (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
      (<= 0 i_V1@54@01))
    (=
      (inv@55@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@54@01)))
      i_V1@54@01))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@54@01)))
  :qid |Interfaceempty_interface$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@55@01 r)
        (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
      (<= 0 (inv@55@01 r)))
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (inv@55@01 r)))
      r))
  :pattern ((inv@55@01 r))
  :qid |Interfaceempty_interface$$$$_E_$$$-fctOfInv|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@55@01 r)
        (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
      (<= 0 (inv@55@01 r)))
    false)
  
  :qid |quant-u-79|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
(declare-const sm@56@01 $FVF<Interfaceempty_interface$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(declare-const res_V0@57@01 Tuple2<Ref~_Types>)
(declare-const $t@58@01 $Snap)
(assert (= $t@58@01 ($Snap.combine ($Snap.first $t@58@01) ($Snap.second $t@58@01))))
(declare-const i_V1@59@01 Int)
(push) ; 4
; [eval] 0 <= i_V1 && i_V1 < (slen(errCtx_V0): Int)
; [eval] 0 <= i_V1
(push) ; 5
; [then-branch: 9 | 0 <= i_V1@59@01 | live]
; [else-branch: 9 | !(0 <= i_V1@59@01) | live]
(push) ; 6
; [then-branch: 9 | 0 <= i_V1@59@01]
(assert (<= 0 i_V1@59@01))
; [eval] i_V1 < (slen(errCtx_V0): Int)
; [eval] (slen(errCtx_V0): Int)
(pop) ; 6
(push) ; 6
; [else-branch: 9 | !(0 <= i_V1@59@01)]
(assert (not (<= 0 i_V1@59@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V1@59@01)) (<= 0 i_V1@59@01)))
(assert (and
  (<
    i_V1@59@01
    (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
  (<= 0 i_V1@59@01)))
; [eval] (ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref)
; [eval] (sarray(errCtx_V0): ShArray[Ref])
; [eval] sadd((soffset(errCtx_V0): Int), i_V1)
; [eval] (soffset(errCtx_V0): Int)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@59@01))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@59@01))
(pop) ; 4
(declare-fun inv@60@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@59@01 Int)) (!
  (=>
    (and
      (<
        i_V1@59@01
        (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
      (<= 0 i_V1@59@01))
    (and
      (or (not (<= 0 i_V1@59@01)) (<= 0 i_V1@59@01))
      (sadd%precondition $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@59@01)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@59@01)))
  :qid |Interfaceempty_interface$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@59@01 Int)) (!
  (and
    (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
    (=>
      (and
        (<
          i_V1@59@01
          (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
        (<= 0 i_V1@59@01))
      (and
        (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
        (and
          (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
          (sadd%precondition $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@59@01)))))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@59@01)))
  :qid |quant-u-81|)))
(assert (forall ((r $Ref)) (!
  (and
    (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
    (=>
      (and
        (<
          (inv@60@01 r)
          (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
        (<= 0 (inv@60@01 r)))
      (and
        (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
        (and
          (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
          (sadd%precondition $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (inv@60@01 r))))))
  :pattern ((inv@60@01 r))
  :qid |Interfaceempty_interface$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@59@01 Int)) (!
  (=>
    (and
      (<
        i_V1@59@01
        (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
      (<= 0 i_V1@59@01))
    (=
      (inv@60@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@59@01)))
      i_V1@59@01))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@59@01)))
  :qid |quant-u-81|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@60@01 r)
        (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
      (<= 0 (inv@60@01 r)))
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (inv@60@01 r)))
      r))
  :pattern ((inv@60@01 r))
  :qid |Interfaceempty_interface$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i_V1@59@01 Int)) (!
  (=>
    (and
      (<
        i_V1@59@01
        (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
      (<= 0 i_V1@59@01))
    (not
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@59@01))
        $Ref.null)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@59@01)))
  :qid |Interfaceempty_interface$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second $t@58@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@58@01))
    ($Snap.second ($Snap.second $t@58@01)))))
(assert (= ($Snap.first ($Snap.second $t@58@01)) $Snap.unit))
; [eval] !(res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    res_V0@57@01
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second $t@58@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@58@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@58@01))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@58@01))) $Snap.unit))
; [eval] IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_(res_V0)
(push) ; 4
; [eval] !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(declare-const $k@61@01 $Perm)
(assert ($Perm.isReadVar $k@61@01))
(assert (< $k@61@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@61@01)))
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@61@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) res_V0@57@01))
(pop) ; 4
; Joined path conditions
(assert ($Perm.isReadVar $k@61@01))
(assert (and
  (< $k@61@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@61@01))
  (IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) res_V0@57@01)))
(assert (IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second $t@58@01)))) res_V0@57@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res_V0_CN3 := 0
; [exec]
; err_V0_CN4 := N5
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN3
; [exec]
; err_V0 := err_V0_CN4
; [eval] (ShStructget13of17(s_V0): Ref)
; [eval] (ShStructget12of17(s_V0): Ref)
; [eval] (ShStructget11of17(s_V0): Ref)
; [eval] (ShStructget10of17(s_V0): Ref)
; [eval] (ShStructget13of17(s_V0): Ref)
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0): Ref)
; [eval] (ShStructget12of17(s_V0): Ref)
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0): Ref)
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == 0 ==> !(err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == 0
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
    0))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 10 | slen[Int](First:(Second:($t@22@01))) == 0 | live]
; [else-branch: 10 | slen[Int](First:(Second:($t@22@01))) != 0 | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 10 | slen[Int](First:(Second:($t@22@01))) == 0]
; [eval] !(err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(pop) ; 5
(pop) ; 4
; Joined path conditions
(push) ; 4
(assert (not (=>
  (=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
    0)
  (not
    (=
      res_V0@57@01
      (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
    0)
  (not
    (=
      res_V0@57@01
      (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))))
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == 0 ==> !(err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == 0
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0): Ref)
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 0))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 0)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 11 | slen[Int](First:($t@22@01)) == 0 | live]
; [else-branch: 11 | slen[Int](First:($t@22@01)) != 0 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 11 | slen[Int](First:($t@22@01)) == 0]
(assert (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 0))
; [eval] !(err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(pop) ; 5
(push) ; 5
; [else-branch: 11 | slen[Int](First:($t@22@01)) != 0]
(assert (not (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 0)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 0))
  (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 0)))
(push) ; 4
(assert (not (=>
  (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 0)
  (not
    (=
      res_V0@57@01
      (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 0)
  (not
    (=
      res_V0@57@01
      (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))))
; [eval] !(err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(push) ; 4
(set-option :timeout 10)
(assert (not (=
  res_V0@57@01
  (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 12 | res_V0@57@01 != tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | live]
; [else-branch: 12 | res_V0@57@01 == tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 12 | res_V0@57@01 != tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types])]
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0 && (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0 ==> err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0 && (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0): Ref)
(push) ; 5
; [then-branch: 13 | slen[Int](First:(Second:($t@22@01))) > 0 | live]
; [else-branch: 13 | !(slen[Int](First:(Second:($t@22@01))) > 0) | live]
(push) ; 6
; [then-branch: 13 | slen[Int](First:(Second:($t@22@01))) > 0]
(assert (>
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
  0))
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0): Ref)
(pop) ; 6
(push) ; 6
; [else-branch: 13 | !(slen[Int](First:(Second:($t@22@01))) > 0)]
(assert (not
  (>
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
    0)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
      0))
  (>
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
    0)))
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 0)
    (>
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
      0)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 14 | slen[Int](First:($t@22@01)) > 0 && slen[Int](First:(Second:($t@22@01))) > 0 | dead]
; [else-branch: 14 | !(slen[Int](First:($t@22@01)) > 0 && slen[Int](First:(Second:($t@22@01))) > 0) | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 14 | !(slen[Int](First:($t@22@01)) > 0 && slen[Int](First:(Second:($t@22@01))) > 0)]
(assert (not
  (and
    (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 0)
    (>
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
      0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not
  (and
    (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 0)
    (>
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
      0))))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 7 | slen[Int](First:(Second:($t@22@01))) != 0]
(assert (not
  (=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
    0)))
(pop) ; 3
; [eval] !((slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == 0)
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == 0
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
  0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
    0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 15 | slen[Int](First:(Second:($t@22@01))) != 0 | live]
; [else-branch: 15 | slen[Int](First:(Second:($t@22@01))) == 0 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 15 | slen[Int](First:(Second:($t@22@01))) != 0]
(assert (not
  (=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
    0)))
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == 0
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 16 | slen[Int](First:($t@22@01)) == 0 | live]
; [else-branch: 16 | slen[Int](First:($t@22@01)) != 0 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 16 | slen[Int](First:($t@22@01)) == 0]
(assert (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 0))
; [exec]
; var N6: Tuple2[Ref, Types]
(declare-const N6@62@01 Tuple2<Ref~_Types>)
; [exec]
; N6 := New_bfd5223e_F(stringLit736f757263652061646472657373206d697373696e67(),
;   sliceDefault_Interfaceempty_interface$$$_S_$$$())
; [eval] stringLit736f757263652061646472657373206d697373696e67()
; [eval] sliceDefault_Interfaceempty_interface$$$_S_$$$()
(push) ; 5
(assert (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit))
(pop) ; 5
; Joined path conditions
(assert (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit))
(declare-const i_V1@63@01 Int)
(push) ; 5
; [eval] 0 <= i_V1 && i_V1 < (slen(errCtx_V0): Int)
; [eval] 0 <= i_V1
(push) ; 6
; [then-branch: 17 | 0 <= i_V1@63@01 | live]
; [else-branch: 17 | !(0 <= i_V1@63@01) | live]
(push) ; 7
; [then-branch: 17 | 0 <= i_V1@63@01]
(assert (<= 0 i_V1@63@01))
; [eval] i_V1 < (slen(errCtx_V0): Int)
; [eval] (slen(errCtx_V0): Int)
(pop) ; 7
(push) ; 7
; [else-branch: 17 | !(0 <= i_V1@63@01)]
(assert (not (<= 0 i_V1@63@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V1@63@01)) (<= 0 i_V1@63@01)))
(assert (and
  (<
    i_V1@63@01
    (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
  (<= 0 i_V1@63@01)))
; [eval] (ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref)
; [eval] (sarray(errCtx_V0): ShArray[Ref])
; [eval] sadd((soffset(errCtx_V0): Int), i_V1)
; [eval] (soffset(errCtx_V0): Int)
(push) ; 6
(assert (sadd%precondition $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@63@01))
(pop) ; 6
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@63@01))
(pop) ; 5
(declare-fun inv@64@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@63@01 Int)) (!
  (=>
    (and
      (<
        i_V1@63@01
        (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
      (<= 0 i_V1@63@01))
    (and
      (or (not (<= 0 i_V1@63@01)) (<= 0 i_V1@63@01))
      (sadd%precondition $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@63@01)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@63@01)))
  :qid |Interfaceempty_interface$$$$_E_$$$-aux|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((i_V11@63@01 Int) (i_V12@63@01 Int)) (!
  (=>
    (and
      (and
        (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
        (=>
          (and
            (<
              i_V11@63@01
              (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
            (<= 0 i_V11@63@01))
          (and
            (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
            (=>
              (and
                (<
                  i_V12@63@01
                  (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
                (<= 0 i_V12@63@01))
              (and
                (and
                  (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
                  (and
                    (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
                    (sadd%precondition $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V11@63@01)))
                (and
                  (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
                  (and
                    (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
                    (sadd%precondition $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V12@63@01))))))))
      (and
        (and
          (<
            i_V11@63@01
            (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
          (<= 0 i_V11@63@01))
        (and
          (<
            i_V12@63@01
            (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
          (<= 0 i_V12@63@01))
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V11@63@01))
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V12@63@01)))))
    (= i_V11@63@01 i_V12@63@01))
  
  :qid |Interfaceempty_interface$$$$_E_$$$-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i_V1@63@01 Int)) (!
  (and
    (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
    (=>
      (and
        (<
          i_V1@63@01
          (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
        (<= 0 i_V1@63@01))
      (and
        (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
        (and
          (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
          (sadd%precondition $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@63@01)))))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@63@01)))
  :qid |Interfaceempty_interface$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (and
    (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
    (=>
      (and
        (<
          (inv@64@01 r)
          (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
        (<= 0 (inv@64@01 r)))
      (and
        (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
        (and
          (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
          (sadd%precondition $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (inv@64@01 r))))))
  :pattern ((inv@64@01 r))
  :qid |Interfaceempty_interface$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@63@01 Int)) (!
  (=>
    (and
      (<
        i_V1@63@01
        (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
      (<= 0 i_V1@63@01))
    (=
      (inv@64@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@63@01)))
      i_V1@63@01))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@63@01)))
  :qid |Interfaceempty_interface$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@64@01 r)
        (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
      (<= 0 (inv@64@01 r)))
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (inv@64@01 r)))
      r))
  :pattern ((inv@64@01 r))
  :qid |Interfaceempty_interface$$$$_E_$$$-fctOfInv|)))
; Precomputing data for removing quantified permissions
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Final check if taken enough permissions
(set-option :timeout 0)
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@64@01 r)
        (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
      (<= 0 (inv@64@01 r)))
    false)
  
  :qid |quant-u-83|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Done removing quantified permissions
(declare-const sm@65@01 $FVF<Interfaceempty_interface$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(declare-const res_V0@66@01 Tuple2<Ref~_Types>)
(declare-const $t@67@01 $Snap)
(assert (= $t@67@01 ($Snap.combine ($Snap.first $t@67@01) ($Snap.second $t@67@01))))
(declare-const i_V1@68@01 Int)
(push) ; 5
; [eval] 0 <= i_V1 && i_V1 < (slen(errCtx_V0): Int)
; [eval] 0 <= i_V1
(push) ; 6
; [then-branch: 18 | 0 <= i_V1@68@01 | live]
; [else-branch: 18 | !(0 <= i_V1@68@01) | live]
(push) ; 7
; [then-branch: 18 | 0 <= i_V1@68@01]
(assert (<= 0 i_V1@68@01))
; [eval] i_V1 < (slen(errCtx_V0): Int)
; [eval] (slen(errCtx_V0): Int)
(pop) ; 7
(push) ; 7
; [else-branch: 18 | !(0 <= i_V1@68@01)]
(assert (not (<= 0 i_V1@68@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V1@68@01)) (<= 0 i_V1@68@01)))
(assert (and
  (<
    i_V1@68@01
    (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
  (<= 0 i_V1@68@01)))
; [eval] (ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref)
; [eval] (sarray(errCtx_V0): ShArray[Ref])
; [eval] sadd((soffset(errCtx_V0): Int), i_V1)
; [eval] (soffset(errCtx_V0): Int)
(push) ; 6
(assert (sadd%precondition $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@68@01))
(pop) ; 6
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@68@01))
(pop) ; 5
(declare-fun inv@69@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@68@01 Int)) (!
  (=>
    (and
      (<
        i_V1@68@01
        (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
      (<= 0 i_V1@68@01))
    (and
      (or (not (<= 0 i_V1@68@01)) (<= 0 i_V1@68@01))
      (sadd%precondition $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@68@01)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@68@01)))
  :qid |Interfaceempty_interface$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@68@01 Int)) (!
  (and
    (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
    (=>
      (and
        (<
          i_V1@68@01
          (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
        (<= 0 i_V1@68@01))
      (and
        (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
        (and
          (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
          (sadd%precondition $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@68@01)))))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@68@01)))
  :qid |quant-u-85|)))
(assert (forall ((r $Ref)) (!
  (and
    (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
    (=>
      (and
        (<
          (inv@69@01 r)
          (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
        (<= 0 (inv@69@01 r)))
      (and
        (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
        (and
          (sliceDefault_Interfaceempty_interface$$$_S_$$$%precondition $Snap.unit)
          (sadd%precondition $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (inv@69@01 r))))))
  :pattern ((inv@69@01 r))
  :qid |Interfaceempty_interface$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@68@01 Int)) (!
  (=>
    (and
      (<
        i_V1@68@01
        (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
      (<= 0 i_V1@68@01))
    (=
      (inv@69@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@68@01)))
      i_V1@68@01))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@68@01)))
  :qid |quant-u-85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (<
        (inv@69@01 r)
        (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
      (<= 0 (inv@69@01 r)))
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (inv@69@01 r)))
      r))
  :pattern ((inv@69@01 r))
  :qid |Interfaceempty_interface$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i_V1@68@01 Int)) (!
  (=>
    (and
      (<
        i_V1@68@01
        (slen<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)))
      (<= 0 i_V1@68@01))
    (not
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@68@01))
        $Ref.null)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) (sadd $Snap.unit (soffset<Int> (sliceDefault_Interfaceempty_interface$$$_S_$$$ $Snap.unit)) i_V1@68@01)))
  :qid |Interfaceempty_interface$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second $t@67@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@67@01))
    ($Snap.second ($Snap.second $t@67@01)))))
(assert (= ($Snap.first ($Snap.second $t@67@01)) $Snap.unit))
; [eval] !(res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    res_V0@66@01
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second $t@67@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@67@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@67@01))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@67@01))) $Snap.unit))
; [eval] IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_(res_V0)
(push) ; 5
; [eval] !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(declare-const $k@70@01 $Perm)
(assert ($Perm.isReadVar $k@70@01))
(assert (< $k@70@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@70@01)))
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@70@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second $t@67@01)))) res_V0@66@01))
(pop) ; 5
; Joined path conditions
(assert ($Perm.isReadVar $k@70@01))
(assert (and
  (< $k@70@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@70@01))
  (IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second $t@67@01)))) res_V0@66@01)))
(assert (IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second $t@67@01)))) res_V0@66@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; res_V0_CN3 := 0
; [exec]
; err_V0_CN4 := N6
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN3
; [exec]
; err_V0 := err_V0_CN4
; [eval] (ShStructget13of17(s_V0): Ref)
; [eval] (ShStructget12of17(s_V0): Ref)
; [eval] (ShStructget11of17(s_V0): Ref)
; [eval] (ShStructget10of17(s_V0): Ref)
; [eval] (ShStructget13of17(s_V0): Ref)
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0): Ref)
; [eval] (ShStructget12of17(s_V0): Ref)
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0): Ref)
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == 0 ==> !(err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == 0
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0): Ref)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 19 | slen[Int](First:(Second:($t@22@01))) == 0 | dead]
; [else-branch: 19 | slen[Int](First:(Second:($t@22@01))) != 0 | live]
(push) ; 6
; [else-branch: 19 | slen[Int](First:(Second:($t@22@01))) != 0]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == 0 ==> !(err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == 0
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0): Ref)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 20 | slen[Int](First:($t@22@01)) == 0 | live]
; [else-branch: 20 | slen[Int](First:($t@22@01)) != 0 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 20 | slen[Int](First:($t@22@01)) == 0]
; [eval] !(err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(pop) ; 6
(pop) ; 5
; Joined path conditions
(push) ; 5
(assert (not (=>
  (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 0)
  (not
    (=
      res_V0@66@01
      (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 0)
  (not
    (=
      res_V0@66@01
      (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))))
; [eval] !(err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  res_V0@66@01
  (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 21 | res_V0@66@01 != tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | live]
; [else-branch: 21 | res_V0@66@01 == tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 21 | res_V0@66@01 != tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types])]
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0 && (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0 ==> err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0 && (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0): Ref)
(push) ; 6
; [then-branch: 22 | slen[Int](First:(Second:($t@22@01))) > 0 | live]
; [else-branch: 22 | !(slen[Int](First:(Second:($t@22@01))) > 0) | live]
(push) ; 7
; [then-branch: 22 | slen[Int](First:(Second:($t@22@01))) > 0]
(assert (>
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
  0))
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0): Ref)
(pop) ; 7
(push) ; 7
; [else-branch: 22 | !(slen[Int](First:(Second:($t@22@01))) > 0)]
(assert (not
  (>
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
    0)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (>
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
      0))
  (>
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
    0)))
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 0)
    (>
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
      0)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 23 | slen[Int](First:($t@22@01)) > 0 && slen[Int](First:(Second:($t@22@01))) > 0 | dead]
; [else-branch: 23 | !(slen[Int](First:($t@22@01)) > 0 && slen[Int](First:(Second:($t@22@01))) > 0) | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 23 | !(slen[Int](First:($t@22@01)) > 0 && slen[Int](First:(Second:($t@22@01))) > 0)]
(assert (not
  (and
    (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 0)
    (>
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
      0))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not
  (and
    (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 0)
    (>
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
      0))))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 16 | slen[Int](First:($t@22@01)) != 0]
(assert (not (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 0)))
(pop) ; 4
; [eval] !((slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == 0)
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == 0
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(push) ; 4
(set-option :timeout 10)
(assert (not (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 24 | slen[Int](First:($t@22@01)) != 0 | live]
; [else-branch: 24 | slen[Int](First:($t@22@01)) == 0 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 24 | slen[Int](First:($t@22@01)) != 0]
(assert (not (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 0)))
; [exec]
; inhale csum_V1 == 0
(declare-const $t@71@01 $Snap)
(assert (= $t@71@01 $Snap.unit))
; [eval] csum_V1 == 0
(assert (= csum_V1@34@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; csum_V1 := 0
; [exec]
; fn$$1 := srcIA_V1
; [exec]
; fn$$2 := arrayDefault_8_Intbyte$$$$_E_$$$()
; [eval] arrayDefault_8_Intbyte$$$$_E_$$$()
(set-option :timeout 0)
(push) ; 5
(assert (arrayDefault_8_Intbyte$$$$_E_$$$%precondition $Snap.unit))
(pop) ; 5
; Joined path conditions
(assert (arrayDefault_8_Intbyte$$$$_E_$$$%precondition $Snap.unit))
(declare-const fn$$2@72@01 Emb_8_Intbyte$$$$_E_$$$)
(assert (= fn$$2@72@01 (arrayDefault_8_Intbyte$$$$_E_$$$ $Snap.unit)))
; [exec]
; inhale (forall fn$$0: Int ::
;     { (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1), fn$$0): Ref) }
;     0 <= fn$$0 && fn$$0 < 8 ==>
;     acc((ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1), fn$$0): Ref).Intbyte$$$$_E_$$$, write)) &&
;   ((forall fn$$3: Int ::
;     { (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$1), fn$$3): Ref) }
;     { unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$2)[fn$$3] }
;     0 <= fn$$3 && fn$$3 < 8 ==>
;     (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$1), fn$$3): Ref).Intbyte$$$$_E_$$$ ==
;     unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$2)[fn$$3]) &&
;   !(srcIA_V1 ==
;   box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(arrayNil_8_Intbyte$$$_S_$$$())))
(declare-const $t@73@01 $Snap)
(assert (= $t@73@01 ($Snap.combine ($Snap.first $t@73@01) ($Snap.second $t@73@01))))
(declare-const fn$$0@74@01 Int)
(push) ; 5
; [eval] 0 <= fn$$0 && fn$$0 < 8
; [eval] 0 <= fn$$0
(push) ; 6
; [then-branch: 25 | 0 <= fn$$0@74@01 | live]
; [else-branch: 25 | !(0 <= fn$$0@74@01) | live]
(push) ; 7
; [then-branch: 25 | 0 <= fn$$0@74@01]
(assert (<= 0 fn$$0@74@01))
; [eval] fn$$0 < 8
(pop) ; 7
(push) ; 7
; [else-branch: 25 | !(0 <= fn$$0@74@01)]
(assert (not (<= 0 fn$$0@74@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 fn$$0@74@01)) (<= 0 fn$$0@74@01)))
(assert (and (< fn$$0@74@01 8) (<= 0 fn$$0@74@01)))
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1), fn$$0): Ref)
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1)
(push) ; 6
(assert (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
(pop) ; 6
; Joined path conditions
(assert (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
(pop) ; 5
(declare-fun inv@75@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((fn$$0@74@01 Int)) (!
  (=>
    (and (< fn$$0@74@01 8) (<= 0 fn$$0@74@01))
    (and
      (or (not (<= 0 fn$$0@74@01)) (<= 0 fn$$0@74@01))
      (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$0@74@01))
  :qid |Intbyte$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((fn$$0@74@01 Int)) (!
  (=>
    (and (< fn$$0@74@01 8) (<= 0 fn$$0@74@01))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$0@74@01))
  :qid |quant-u-87|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
  :pattern ((inv@75@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
(assert (forall ((fn$$0@74@01 Int)) (!
  (=>
    (and (< fn$$0@74@01 8) (<= 0 fn$$0@74@01))
    (=
      (inv@75@01 (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$0@74@01))
      fn$$0@74@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$0@74@01))
  :qid |quant-u-87|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
    (=
      (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) (inv@75@01 r))
      r))
  :pattern ((inv@75@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((fn$$0@74@01 Int)) (!
  (=>
    (and (< fn$$0@74@01 8) (<= 0 fn$$0@74@01))
    (not
      (=
        (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$0@74@01)
        $Ref.null)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$0@74@01))
  :qid |Intbyte$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second $t@73@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@73@01))
    ($Snap.second ($Snap.second $t@73@01)))))
(assert (= ($Snap.first ($Snap.second $t@73@01)) $Snap.unit))
; [eval] (forall fn$$3: Int :: { (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$1), fn$$3): Ref) } { unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$2)[fn$$3] } 0 <= fn$$3 && fn$$3 < 8 ==> (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$1), fn$$3): Ref).Intbyte$$$$_E_$$$ == unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$2)[fn$$3])
(declare-const fn$$3@76@01 Int)
(push) ; 5
; [eval] 0 <= fn$$3 && fn$$3 < 8 ==> (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$1), fn$$3): Ref).Intbyte$$$$_E_$$$ == unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$2)[fn$$3]
; [eval] 0 <= fn$$3 && fn$$3 < 8
; [eval] 0 <= fn$$3
(push) ; 6
; [then-branch: 26 | 0 <= fn$$3@76@01 | live]
; [else-branch: 26 | !(0 <= fn$$3@76@01) | live]
(push) ; 7
; [then-branch: 26 | 0 <= fn$$3@76@01]
(assert (<= 0 fn$$3@76@01))
; [eval] fn$$3 < 8
(pop) ; 7
(push) ; 7
; [else-branch: 26 | !(0 <= fn$$3@76@01)]
(assert (not (<= 0 fn$$3@76@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 fn$$3@76@01)) (<= 0 fn$$3@76@01)))
(push) ; 6
; [then-branch: 27 | fn$$3@76@01 < 8 && 0 <= fn$$3@76@01 | live]
; [else-branch: 27 | !(fn$$3@76@01 < 8 && 0 <= fn$$3@76@01) | live]
(push) ; 7
; [then-branch: 27 | fn$$3@76@01 < 8 && 0 <= fn$$3@76@01]
(assert (and (< fn$$3@76@01 8) (<= 0 fn$$3@76@01)))
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$1), fn$$3): Ref).Intbyte$$$$_E_$$$ == unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$2)[fn$$3]
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$1), fn$$3): Ref)
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$1)
(push) ; 8
(assert (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
(pop) ; 8
; Joined path conditions
(assert (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
(declare-const sm@77@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@77@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@77@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r))
  :qid |qp.fvfValDef0|)))
(declare-const pm@78@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intbyte$$$$_E_$$$ (as pm@78@01  $FPM) r)
    (ite (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r))) $Perm.Write $Perm.No))
  :pattern (($FVF.perm_Intbyte$$$$_E_$$$ (as pm@78@01  $FPM) r))
  :qid |qp.resPrmSumDef1|)))
(push) ; 8
(assert (not (<
  $Perm.No
  ($FVF.perm_Intbyte$$$$_E_$$$ (as pm@78@01  $FPM) (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$3@76@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$2)[fn$$3]
; [eval] unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$2)
(push) ; 8
(assert (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition $Snap.unit fn$$2@72@01))
(pop) ; 8
; Joined path conditions
(assert (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition $Snap.unit fn$$2@72@01))
(push) ; 8
(assert (not (>= fn$$3@76@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  fn$$3@76@01
  (Seq_length (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int $Snap.unit fn$$2@72@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 27 | !(fn$$3@76@01 < 8 && 0 <= fn$$3@76@01)]
(assert (not (and (< fn$$3@76@01 8) (<= 0 fn$$3@76@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@77@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@77@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intbyte$$$$_E_$$$ (as pm@78@01  $FPM) r)
    (ite (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r))) $Perm.Write $Perm.No))
  :pattern (($FVF.perm_Intbyte$$$$_E_$$$ (as pm@78@01  $FPM) r))
  :qid |qp.resPrmSumDef1|)))
(assert (=>
  (and (< fn$$3@76@01 8) (<= 0 fn$$3@76@01))
  (and
    (< fn$$3@76@01 8)
    (<= 0 fn$$3@76@01)
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01)
    (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition $Snap.unit fn$$2@72@01))))
; Joined path conditions
(assert (or
  (not (and (< fn$$3@76@01 8) (<= 0 fn$$3@76@01)))
  (and (< fn$$3@76@01 8) (<= 0 fn$$3@76@01))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@77@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@77@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intbyte$$$$_E_$$$ (as pm@78@01  $FPM) r)
    (ite (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r))) $Perm.Write $Perm.No))
  :pattern (($FVF.perm_Intbyte$$$$_E_$$$ (as pm@78@01  $FPM) r))
  :qid |qp.resPrmSumDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((fn$$3@76@01 Int)) (!
  (and
    (or (not (<= 0 fn$$3@76@01)) (<= 0 fn$$3@76@01))
    (=>
      (and (< fn$$3@76@01 8) (<= 0 fn$$3@76@01))
      (and
        (< fn$$3@76@01 8)
        (<= 0 fn$$3@76@01)
        (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01)
        (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition $Snap.unit fn$$2@72@01)))
    (or
      (not (and (< fn$$3@76@01 8) (<= 0 fn$$3@76@01)))
      (and (< fn$$3@76@01 8) (<= 0 fn$$3@76@01))))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$3@76@01))
  :qid |prog.l2663-aux|)))
(assert (forall ((fn$$3@76@01 Int)) (!
  (and
    (or (not (<= 0 fn$$3@76@01)) (<= 0 fn$$3@76@01))
    (=>
      (and (< fn$$3@76@01 8) (<= 0 fn$$3@76@01))
      (and
        (< fn$$3@76@01 8)
        (<= 0 fn$$3@76@01)
        (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01)
        (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition $Snap.unit fn$$2@72@01)))
    (or
      (not (and (< fn$$3@76@01 8) (<= 0 fn$$3@76@01)))
      (and (< fn$$3@76@01 8) (<= 0 fn$$3@76@01))))
  :pattern ((Seq_index
    (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int $Snap.unit fn$$2@72@01)
    fn$$3@76@01))
  :qid |prog.l2663-aux|)))
(assert (forall ((fn$$3@76@01 Int)) (!
  (=>
    (and (< fn$$3@76@01 8) (<= 0 fn$$3@76@01))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@77@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$3@76@01))
      (Seq_index
        (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int $Snap.unit fn$$2@72@01)
        fn$$3@76@01)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$3@76@01))
  :pattern ((Seq_index
    (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int $Snap.unit fn$$2@72@01)
    fn$$3@76@01))
  :qid |prog.l2663|)))
(assert (= ($Snap.second ($Snap.second $t@73@01)) $Snap.unit))
; [eval] !(srcIA_V1 == box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(arrayNil_8_Intbyte$$$_S_$$$()))
; [eval] srcIA_V1 == box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(arrayNil_8_Intbyte$$$_S_$$$())
; [eval] box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(arrayNil_8_Intbyte$$$_S_$$$())
; [eval] arrayNil_8_Intbyte$$$_S_$$$()
(push) ; 5
(assert (arrayNil_8_Intbyte$$$_S_$$$%precondition $Snap.unit))
(pop) ; 5
; Joined path conditions
(assert (arrayNil_8_Intbyte$$$_S_$$$%precondition $Snap.unit))
(push) ; 5
; [eval] (ShArraylen(x): Int) == 8 || x == arrayNil_8_Intbyte$$$_S_$$$()
; [eval] (ShArraylen(x): Int) == 8
; [eval] (ShArraylen(x): Int)
(push) ; 6
; [then-branch: 28 | ShArraylen[Int](arrayNil_8_Intbyte$$$_S_$$$(_)) == 8 | live]
; [else-branch: 28 | ShArraylen[Int](arrayNil_8_Intbyte$$$_S_$$$(_)) != 8 | live]
(push) ; 7
; [then-branch: 28 | ShArraylen[Int](arrayNil_8_Intbyte$$$_S_$$$(_)) == 8]
(assert (= (ShArraylen<Int> (arrayNil_8_Intbyte$$$_S_$$$ $Snap.unit)) 8))
(pop) ; 7
(push) ; 7
; [else-branch: 28 | ShArraylen[Int](arrayNil_8_Intbyte$$$_S_$$$(_)) != 8]
(assert (not (= (ShArraylen<Int> (arrayNil_8_Intbyte$$$_S_$$$ $Snap.unit)) 8)))
; [eval] x == arrayNil_8_Intbyte$$$_S_$$$()
; [eval] arrayNil_8_Intbyte$$$_S_$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= (ShArraylen<Int> (arrayNil_8_Intbyte$$$_S_$$$ $Snap.unit)) 8))
  (= (ShArraylen<Int> (arrayNil_8_Intbyte$$$_S_$$$ $Snap.unit)) 8)))
(assert (box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (arrayNil_8_Intbyte$$$_S_$$$ $Snap.unit)))
(pop) ; 5
; Joined path conditions
(assert (and
  (or
    (not (= (ShArraylen<Int> (arrayNil_8_Intbyte$$$_S_$$$ $Snap.unit)) 8))
    (= (ShArraylen<Int> (arrayNil_8_Intbyte$$$_S_$$$ $Snap.unit)) 8))
  (box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit (arrayNil_8_Intbyte$$$_S_$$$ $Snap.unit))))
(assert (not
  (=
    srcIA_V1@33@01
    (box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit (arrayNil_8_Intbyte$$$_S_$$$ $Snap.unit)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; fn$$5 := dstIA_V1
; [exec]
; fn$$6 := arrayDefault_8_Intbyte$$$$_E_$$$()
; [eval] arrayDefault_8_Intbyte$$$$_E_$$$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const fn$$6@79@01 Emb_8_Intbyte$$$$_E_$$$)
(assert (= fn$$6@79@01 (arrayDefault_8_Intbyte$$$$_E_$$$ $Snap.unit)))
; [exec]
; inhale (forall fn$$4: Int ::
;     { (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1), fn$$4): Ref) }
;     0 <= fn$$4 && fn$$4 < 8 ==>
;     acc((ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1), fn$$4): Ref).Intbyte$$$$_E_$$$, write)) &&
;   ((forall fn$$7: Int ::
;     { (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$5), fn$$7): Ref) }
;     { unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$6)[fn$$7] }
;     0 <= fn$$7 && fn$$7 < 8 ==>
;     (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$5), fn$$7): Ref).Intbyte$$$$_E_$$$ ==
;     unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$6)[fn$$7]) &&
;   !(dstIA_V1 ==
;   box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(arrayNil_8_Intbyte$$$_S_$$$())))
(declare-const $t@80@01 $Snap)
(assert (= $t@80@01 ($Snap.combine ($Snap.first $t@80@01) ($Snap.second $t@80@01))))
(declare-const fn$$4@81@01 Int)
(push) ; 5
; [eval] 0 <= fn$$4 && fn$$4 < 8
; [eval] 0 <= fn$$4
(push) ; 6
; [then-branch: 29 | 0 <= fn$$4@81@01 | live]
; [else-branch: 29 | !(0 <= fn$$4@81@01) | live]
(push) ; 7
; [then-branch: 29 | 0 <= fn$$4@81@01]
(assert (<= 0 fn$$4@81@01))
; [eval] fn$$4 < 8
(pop) ; 7
(push) ; 7
; [else-branch: 29 | !(0 <= fn$$4@81@01)]
(assert (not (<= 0 fn$$4@81@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 fn$$4@81@01)) (<= 0 fn$$4@81@01)))
(assert (and (< fn$$4@81@01 8) (<= 0 fn$$4@81@01)))
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1), fn$$4): Ref)
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1)
(push) ; 6
(assert (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
(pop) ; 6
; Joined path conditions
(assert (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
(pop) ; 5
(declare-fun inv@82@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((fn$$4@81@01 Int)) (!
  (=>
    (and (< fn$$4@81@01 8) (<= 0 fn$$4@81@01))
    (and
      (or (not (<= 0 fn$$4@81@01)) (<= 0 fn$$4@81@01))
      (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$4@81@01))
  :qid |Intbyte$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((fn$$4@81@01 Int)) (!
  (=>
    (and (< fn$$4@81@01 8) (<= 0 fn$$4@81@01))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$4@81@01))
  :qid |quant-u-89|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@82@01 r) 8) (<= 0 (inv@82@01 r)))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
  :pattern ((inv@82@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
(assert (forall ((fn$$4@81@01 Int)) (!
  (=>
    (and (< fn$$4@81@01 8) (<= 0 fn$$4@81@01))
    (=
      (inv@82@01 (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$4@81@01))
      fn$$4@81@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$4@81@01))
  :qid |quant-u-89|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@82@01 r) 8) (<= 0 (inv@82@01 r)))
    (=
      (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) (inv@82@01 r))
      r))
  :pattern ((inv@82@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((fn$$4@81@01 Int)) (!
  (=>
    (and (< fn$$4@81@01 8) (<= 0 fn$$4@81@01))
    (not
      (=
        (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$4@81@01)
        $Ref.null)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$4@81@01))
  :qid |Intbyte$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second $t@80@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@80@01))
    ($Snap.second ($Snap.second $t@80@01)))))
(assert (= ($Snap.first ($Snap.second $t@80@01)) $Snap.unit))
; [eval] (forall fn$$7: Int :: { (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$5), fn$$7): Ref) } { unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$6)[fn$$7] } 0 <= fn$$7 && fn$$7 < 8 ==> (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$5), fn$$7): Ref).Intbyte$$$$_E_$$$ == unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$6)[fn$$7])
(declare-const fn$$7@83@01 Int)
(push) ; 5
; [eval] 0 <= fn$$7 && fn$$7 < 8 ==> (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$5), fn$$7): Ref).Intbyte$$$$_E_$$$ == unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$6)[fn$$7]
; [eval] 0 <= fn$$7 && fn$$7 < 8
; [eval] 0 <= fn$$7
(push) ; 6
; [then-branch: 30 | 0 <= fn$$7@83@01 | live]
; [else-branch: 30 | !(0 <= fn$$7@83@01) | live]
(push) ; 7
; [then-branch: 30 | 0 <= fn$$7@83@01]
(assert (<= 0 fn$$7@83@01))
; [eval] fn$$7 < 8
(pop) ; 7
(push) ; 7
; [else-branch: 30 | !(0 <= fn$$7@83@01)]
(assert (not (<= 0 fn$$7@83@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 fn$$7@83@01)) (<= 0 fn$$7@83@01)))
(push) ; 6
; [then-branch: 31 | fn$$7@83@01 < 8 && 0 <= fn$$7@83@01 | live]
; [else-branch: 31 | !(fn$$7@83@01 < 8 && 0 <= fn$$7@83@01) | live]
(push) ; 7
; [then-branch: 31 | fn$$7@83@01 < 8 && 0 <= fn$$7@83@01]
(assert (and (< fn$$7@83@01 8) (<= 0 fn$$7@83@01)))
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$5), fn$$7): Ref).Intbyte$$$$_E_$$$ == unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$6)[fn$$7]
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$5), fn$$7): Ref)
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$5)
(push) ; 8
(assert (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
(pop) ; 8
; Joined path conditions
(assert (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
(declare-const sm@84@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@82@01 r) 8) (<= 0 (inv@82@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@84@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@80@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@84@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@80@01)) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@84@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@84@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r))
  :qid |qp.fvfValDef3|)))
(declare-const pm@85@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intbyte$$$$_E_$$$ (as pm@85@01  $FPM) r)
    (+
      (ite (and (< (inv@82@01 r) 8) (<= 0 (inv@82@01 r))) $Perm.Write $Perm.No)
      (ite (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r))) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_Intbyte$$$$_E_$$$ (as pm@85@01  $FPM) r))
  :qid |qp.resPrmSumDef4|)))
(push) ; 8
(assert (not (<
  $Perm.No
  ($FVF.perm_Intbyte$$$$_E_$$$ (as pm@85@01  $FPM) (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$7@83@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$6)[fn$$7]
; [eval] unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$6)
(push) ; 8
(assert (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition $Snap.unit fn$$6@79@01))
(pop) ; 8
; Joined path conditions
(assert (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition $Snap.unit fn$$6@79@01))
(push) ; 8
(assert (not (>= fn$$7@83@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  fn$$7@83@01
  (Seq_length (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int $Snap.unit fn$$6@79@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 31 | !(fn$$7@83@01 < 8 && 0 <= fn$$7@83@01)]
(assert (not (and (< fn$$7@83@01 8) (<= 0 fn$$7@83@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@82@01 r) 8) (<= 0 (inv@82@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@84@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@80@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@84@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@80@01)) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@84@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@84@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intbyte$$$$_E_$$$ (as pm@85@01  $FPM) r)
    (+
      (ite (and (< (inv@82@01 r) 8) (<= 0 (inv@82@01 r))) $Perm.Write $Perm.No)
      (ite (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r))) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_Intbyte$$$$_E_$$$ (as pm@85@01  $FPM) r))
  :qid |qp.resPrmSumDef4|)))
(assert (=>
  (and (< fn$$7@83@01 8) (<= 0 fn$$7@83@01))
  (and
    (< fn$$7@83@01 8)
    (<= 0 fn$$7@83@01)
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01)
    (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition $Snap.unit fn$$6@79@01))))
; Joined path conditions
(assert (or
  (not (and (< fn$$7@83@01 8) (<= 0 fn$$7@83@01)))
  (and (< fn$$7@83@01 8) (<= 0 fn$$7@83@01))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@82@01 r) 8) (<= 0 (inv@82@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@84@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@80@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@84@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@80@01)) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@84@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@84@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intbyte$$$$_E_$$$ (as pm@85@01  $FPM) r)
    (+
      (ite (and (< (inv@82@01 r) 8) (<= 0 (inv@82@01 r))) $Perm.Write $Perm.No)
      (ite (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r))) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_Intbyte$$$$_E_$$$ (as pm@85@01  $FPM) r))
  :qid |qp.resPrmSumDef4|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((fn$$7@83@01 Int)) (!
  (and
    (or (not (<= 0 fn$$7@83@01)) (<= 0 fn$$7@83@01))
    (=>
      (and (< fn$$7@83@01 8) (<= 0 fn$$7@83@01))
      (and
        (< fn$$7@83@01 8)
        (<= 0 fn$$7@83@01)
        (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01)
        (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition $Snap.unit fn$$6@79@01)))
    (or
      (not (and (< fn$$7@83@01 8) (<= 0 fn$$7@83@01)))
      (and (< fn$$7@83@01 8) (<= 0 fn$$7@83@01))))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$7@83@01))
  :qid |prog.l2681-aux|)))
(assert (forall ((fn$$7@83@01 Int)) (!
  (and
    (or (not (<= 0 fn$$7@83@01)) (<= 0 fn$$7@83@01))
    (=>
      (and (< fn$$7@83@01 8) (<= 0 fn$$7@83@01))
      (and
        (< fn$$7@83@01 8)
        (<= 0 fn$$7@83@01)
        (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01)
        (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition $Snap.unit fn$$6@79@01)))
    (or
      (not (and (< fn$$7@83@01 8) (<= 0 fn$$7@83@01)))
      (and (< fn$$7@83@01 8) (<= 0 fn$$7@83@01))))
  :pattern ((Seq_index
    (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int $Snap.unit fn$$6@79@01)
    fn$$7@83@01))
  :qid |prog.l2681-aux|)))
(assert (forall ((fn$$7@83@01 Int)) (!
  (=>
    (and (< fn$$7@83@01 8) (<= 0 fn$$7@83@01))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@84@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$7@83@01))
      (Seq_index
        (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int $Snap.unit fn$$6@79@01)
        fn$$7@83@01)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$7@83@01))
  :pattern ((Seq_index
    (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int $Snap.unit fn$$6@79@01)
    fn$$7@83@01))
  :qid |prog.l2681|)))
(assert (= ($Snap.second ($Snap.second $t@80@01)) $Snap.unit))
; [eval] !(dstIA_V1 == box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(arrayNil_8_Intbyte$$$_S_$$$()))
; [eval] dstIA_V1 == box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(arrayNil_8_Intbyte$$$_S_$$$())
; [eval] box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(arrayNil_8_Intbyte$$$_S_$$$())
; [eval] arrayNil_8_Intbyte$$$_S_$$$()
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] (ShArraylen(x): Int) == 8 || x == arrayNil_8_Intbyte$$$_S_$$$()
; [eval] (ShArraylen(x): Int) == 8
; [eval] (ShArraylen(x): Int)
(push) ; 6
; [then-branch: 32 | ShArraylen[Int](arrayNil_8_Intbyte$$$_S_$$$(_)) == 8 | live]
; [else-branch: 32 | ShArraylen[Int](arrayNil_8_Intbyte$$$_S_$$$(_)) != 8 | live]
(push) ; 7
; [then-branch: 32 | ShArraylen[Int](arrayNil_8_Intbyte$$$_S_$$$(_)) == 8]
(assert (= (ShArraylen<Int> (arrayNil_8_Intbyte$$$_S_$$$ $Snap.unit)) 8))
(pop) ; 7
(push) ; 7
; [else-branch: 32 | ShArraylen[Int](arrayNil_8_Intbyte$$$_S_$$$(_)) != 8]
(assert (not (= (ShArraylen<Int> (arrayNil_8_Intbyte$$$_S_$$$ $Snap.unit)) 8)))
; [eval] x == arrayNil_8_Intbyte$$$_S_$$$()
; [eval] arrayNil_8_Intbyte$$$_S_$$$()
(push) ; 8
(pop) ; 8
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
; Joined path conditions
(assert (not
  (=
    dstIA_V1@32@01
    (box_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit (arrayNil_8_Intbyte$$$_S_$$$ $Snap.unit)))))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; fn$$9 := srcIA_V1
; [exec]
; fn$$10 := arrayDefault_8_Intbyte$$$$_E_$$$()
; [eval] arrayDefault_8_Intbyte$$$$_E_$$$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const fn$$10@86@01 Emb_8_Intbyte$$$$_E_$$$)
(assert (= fn$$10@86@01 (arrayDefault_8_Intbyte$$$$_E_$$$ $Snap.unit)))
; [exec]
; exhale (forall fn$$8: Int ::
;     { (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1), fn$$8): Ref) }
;     0 <= fn$$8 && fn$$8 < 8 ==>
;     acc((ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1), fn$$8): Ref).Intbyte$$$$_E_$$$, write))
(declare-const fn$$8@87@01 Int)
(push) ; 5
; [eval] 0 <= fn$$8 && fn$$8 < 8
; [eval] 0 <= fn$$8
(push) ; 6
; [then-branch: 33 | 0 <= fn$$8@87@01 | live]
; [else-branch: 33 | !(0 <= fn$$8@87@01) | live]
(push) ; 7
; [then-branch: 33 | 0 <= fn$$8@87@01]
(assert (<= 0 fn$$8@87@01))
; [eval] fn$$8 < 8
(pop) ; 7
(push) ; 7
; [else-branch: 33 | !(0 <= fn$$8@87@01)]
(assert (not (<= 0 fn$$8@87@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 fn$$8@87@01)) (<= 0 fn$$8@87@01)))
(assert (and (< fn$$8@87@01 8) (<= 0 fn$$8@87@01)))
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1), fn$$8): Ref)
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1)
(push) ; 6
(assert (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
(pop) ; 6
; Joined path conditions
(assert (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
(pop) ; 5
(declare-fun inv@88@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((fn$$8@87@01 Int)) (!
  (=>
    (and (< fn$$8@87@01 8) (<= 0 fn$$8@87@01))
    (and
      (or (not (<= 0 fn$$8@87@01)) (<= 0 fn$$8@87@01))
      (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$8@87@01))
  :qid |Intbyte$$$$_E_$$$-aux|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((fn$$81@87@01 Int) (fn$$82@87@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (and (< fn$$81@87@01 8) (<= 0 fn$$81@87@01))
          (and (< fn$$82@87@01 8) (<= 0 fn$$82@87@01)))
        (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
      (and
        (and (< fn$$81@87@01 8) (<= 0 fn$$81@87@01))
        (and (< fn$$82@87@01 8) (<= 0 fn$$82@87@01))
        (=
          (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$81@87@01)
          (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$82@87@01))))
    (= fn$$81@87@01 fn$$82@87@01))
  
  :qid |Intbyte$$$$_E_$$$-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((fn$$8@87@01 Int)) (!
  (=>
    (and (< fn$$8@87@01 8) (<= 0 fn$$8@87@01))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$8@87@01))
  :qid |Intbyte$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@88@01 r) 8) (<= 0 (inv@88@01 r)))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
  :pattern ((inv@88@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
(assert (forall ((fn$$8@87@01 Int)) (!
  (=>
    (and (< fn$$8@87@01 8) (<= 0 fn$$8@87@01))
    (=
      (inv@88@01 (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$8@87@01))
      fn$$8@87@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$8@87@01))
  :qid |Intbyte$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@88@01 r) 8) (<= 0 (inv@88@01 r)))
    (=
      (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) (inv@88@01 r))
      r))
  :pattern ((inv@88@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@89@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@88@01 r) 8) (<= 0 (inv@88@01 r)))
    ($Perm.min
      (ite (and (< (inv@82@01 r) 8) (<= 0 (inv@82@01 r))) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@90@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@88@01 r) 8) (<= 0 (inv@88@01 r)))
    ($Perm.min
      (ite (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r))) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@89@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite (and (< (inv@82@01 r) 8) (<= 0 (inv@82@01 r))) $Perm.Write $Perm.No)
      (pTaken@89@01 r))
    $Perm.No)
  
  :qid |quant-u-92|))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@88@01 r) 8) (<= 0 (inv@88@01 r)))
    (= (- $Perm.Write (pTaken@89@01 r)) $Perm.No))
  
  :qid |quant-u-93|))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r))) $Perm.Write $Perm.No)
      (pTaken@90@01 r))
    $Perm.No)
  
  :qid |quant-u-94|))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@88@01 r) 8) (<= 0 (inv@88@01 r)))
    (= (- (- $Perm.Write (pTaken@89@01 r)) (pTaken@90@01 r)) $Perm.No))
  
  :qid |quant-u-95|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@91@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@82@01 r) 8) (<= 0 (inv@82@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@91@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@80@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@91@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@80@01)) r))
  :qid |qp.fvfValDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@91@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@91@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r))
  :qid |qp.fvfValDef6|)))
; [exec]
; inhale (forall fn$$8: Int ::
;     { (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1), fn$$8): Ref) }
;     0 <= fn$$8 && fn$$8 < 8 ==>
;     acc((ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1), fn$$8): Ref).Intbyte$$$$_E_$$$, write)) &&
;   (forall fn$$11: Int ::
;     { (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$9), fn$$11): Ref) }
;     { unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$10)[fn$$11] }
;     0 <= fn$$11 && fn$$11 < 8 ==>
;     (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$9), fn$$11): Ref).Intbyte$$$$_E_$$$ ==
;     unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$10)[fn$$11])
(declare-const $t@92@01 $Snap)
(assert (= $t@92@01 ($Snap.combine ($Snap.first $t@92@01) ($Snap.second $t@92@01))))
(declare-const fn$$8@93@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] 0 <= fn$$8 && fn$$8 < 8
; [eval] 0 <= fn$$8
(push) ; 6
; [then-branch: 34 | 0 <= fn$$8@93@01 | live]
; [else-branch: 34 | !(0 <= fn$$8@93@01) | live]
(push) ; 7
; [then-branch: 34 | 0 <= fn$$8@93@01]
(assert (<= 0 fn$$8@93@01))
; [eval] fn$$8 < 8
(pop) ; 7
(push) ; 7
; [else-branch: 34 | !(0 <= fn$$8@93@01)]
(assert (not (<= 0 fn$$8@93@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 fn$$8@93@01)) (<= 0 fn$$8@93@01)))
(assert (and (< fn$$8@93@01 8) (<= 0 fn$$8@93@01)))
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1), fn$$8): Ref)
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1)
(push) ; 6
(assert (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
(pop) ; 6
; Joined path conditions
(assert (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
(pop) ; 5
(declare-fun inv@94@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((fn$$8@93@01 Int)) (!
  (=>
    (and (< fn$$8@93@01 8) (<= 0 fn$$8@93@01))
    (and
      (or (not (<= 0 fn$$8@93@01)) (<= 0 fn$$8@93@01))
      (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$8@93@01))
  :qid |Intbyte$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((fn$$8@93@01 Int)) (!
  (=>
    (and (< fn$$8@93@01 8) (<= 0 fn$$8@93@01))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$8@93@01))
  :qid |quant-u-97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r)))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
  :pattern ((inv@94@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
(assert (forall ((fn$$8@93@01 Int)) (!
  (=>
    (and (< fn$$8@93@01 8) (<= 0 fn$$8@93@01))
    (=
      (inv@94@01 (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$8@93@01))
      fn$$8@93@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$8@93@01))
  :qid |quant-u-97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r)))
    (=
      (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) (inv@94@01 r))
      r))
  :pattern ((inv@94@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((fn$$8@93@01 Int)) (!
  (=>
    (and (< fn$$8@93@01 8) (<= 0 fn$$8@93@01))
    (not
      (=
        (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$8@93@01)
        $Ref.null)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$8@93@01))
  :qid |Intbyte$$$$_E_$$$-permImpliesNonNull|)))
(assert (= ($Snap.second $t@92@01) $Snap.unit))
; [eval] (forall fn$$11: Int :: { (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$9), fn$$11): Ref) } { unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$10)[fn$$11] } 0 <= fn$$11 && fn$$11 < 8 ==> (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$9), fn$$11): Ref).Intbyte$$$$_E_$$$ == unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$10)[fn$$11])
(declare-const fn$$11@95@01 Int)
(push) ; 5
; [eval] 0 <= fn$$11 && fn$$11 < 8 ==> (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$9), fn$$11): Ref).Intbyte$$$$_E_$$$ == unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$10)[fn$$11]
; [eval] 0 <= fn$$11 && fn$$11 < 8
; [eval] 0 <= fn$$11
(push) ; 6
; [then-branch: 35 | 0 <= fn$$11@95@01 | live]
; [else-branch: 35 | !(0 <= fn$$11@95@01) | live]
(push) ; 7
; [then-branch: 35 | 0 <= fn$$11@95@01]
(assert (<= 0 fn$$11@95@01))
; [eval] fn$$11 < 8
(pop) ; 7
(push) ; 7
; [else-branch: 35 | !(0 <= fn$$11@95@01)]
(assert (not (<= 0 fn$$11@95@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 fn$$11@95@01)) (<= 0 fn$$11@95@01)))
(push) ; 6
; [then-branch: 36 | fn$$11@95@01 < 8 && 0 <= fn$$11@95@01 | live]
; [else-branch: 36 | !(fn$$11@95@01 < 8 && 0 <= fn$$11@95@01) | live]
(push) ; 7
; [then-branch: 36 | fn$$11@95@01 < 8 && 0 <= fn$$11@95@01]
(assert (and (< fn$$11@95@01 8) (<= 0 fn$$11@95@01)))
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$9), fn$$11): Ref).Intbyte$$$$_E_$$$ == unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$10)[fn$$11]
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$9), fn$$11): Ref)
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$9)
(push) ; 8
(assert (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
(pop) ; 8
; Joined path conditions
(assert (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
(declare-const sm@96@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@96@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@92@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@96@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@92@01)) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r))) $Perm.Write $Perm.No)
        (pTaken@90@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@96@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@96@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite (and (< (inv@82@01 r) 8) (<= 0 (inv@82@01 r))) $Perm.Write $Perm.No)
        (pTaken@89@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@96@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@80@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@96@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@80@01)) r))
  :qid |qp.fvfValDef9|)))
(declare-const pm@97@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intbyte$$$$_E_$$$ (as pm@97@01  $FPM) r)
    (+
      (+
        (ite (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r))) $Perm.Write $Perm.No)
        (-
          (ite
            (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
            $Perm.Write
            $Perm.No)
          (pTaken@90@01 r)))
      (-
        (ite (and (< (inv@82@01 r) 8) (<= 0 (inv@82@01 r))) $Perm.Write $Perm.No)
        (pTaken@89@01 r))))
  :pattern (($FVF.perm_Intbyte$$$$_E_$$$ (as pm@97@01  $FPM) r))
  :qid |qp.resPrmSumDef10|)))
(push) ; 8
(assert (not (<
  $Perm.No
  ($FVF.perm_Intbyte$$$$_E_$$$ (as pm@97@01  $FPM) (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$11@95@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$10)[fn$$11]
; [eval] unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$10)
(push) ; 8
(assert (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition $Snap.unit fn$$10@86@01))
(pop) ; 8
; Joined path conditions
(assert (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition $Snap.unit fn$$10@86@01))
(push) ; 8
(assert (not (>= fn$$11@95@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  fn$$11@95@01
  (Seq_length (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int $Snap.unit fn$$10@86@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 36 | !(fn$$11@95@01 < 8 && 0 <= fn$$11@95@01)]
(assert (not (and (< fn$$11@95@01 8) (<= 0 fn$$11@95@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@96@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@92@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@96@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@92@01)) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r))) $Perm.Write $Perm.No)
        (pTaken@90@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@96@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@96@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite (and (< (inv@82@01 r) 8) (<= 0 (inv@82@01 r))) $Perm.Write $Perm.No)
        (pTaken@89@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@96@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@80@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@96@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@80@01)) r))
  :qid |qp.fvfValDef9|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intbyte$$$$_E_$$$ (as pm@97@01  $FPM) r)
    (+
      (+
        (ite (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r))) $Perm.Write $Perm.No)
        (-
          (ite
            (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
            $Perm.Write
            $Perm.No)
          (pTaken@90@01 r)))
      (-
        (ite (and (< (inv@82@01 r) 8) (<= 0 (inv@82@01 r))) $Perm.Write $Perm.No)
        (pTaken@89@01 r))))
  :pattern (($FVF.perm_Intbyte$$$$_E_$$$ (as pm@97@01  $FPM) r))
  :qid |qp.resPrmSumDef10|)))
(assert (=>
  (and (< fn$$11@95@01 8) (<= 0 fn$$11@95@01))
  (and
    (< fn$$11@95@01 8)
    (<= 0 fn$$11@95@01)
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01)
    (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition $Snap.unit fn$$10@86@01))))
; Joined path conditions
(assert (or
  (not (and (< fn$$11@95@01 8) (<= 0 fn$$11@95@01)))
  (and (< fn$$11@95@01 8) (<= 0 fn$$11@95@01))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@96@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@92@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@96@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@92@01)) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r))) $Perm.Write $Perm.No)
        (pTaken@90@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@96@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@96@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite (and (< (inv@82@01 r) 8) (<= 0 (inv@82@01 r))) $Perm.Write $Perm.No)
        (pTaken@89@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@96@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@80@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@96@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@80@01)) r))
  :qid |qp.fvfValDef9|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intbyte$$$$_E_$$$ (as pm@97@01  $FPM) r)
    (+
      (+
        (ite (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r))) $Perm.Write $Perm.No)
        (-
          (ite
            (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
            $Perm.Write
            $Perm.No)
          (pTaken@90@01 r)))
      (-
        (ite (and (< (inv@82@01 r) 8) (<= 0 (inv@82@01 r))) $Perm.Write $Perm.No)
        (pTaken@89@01 r))))
  :pattern (($FVF.perm_Intbyte$$$$_E_$$$ (as pm@97@01  $FPM) r))
  :qid |qp.resPrmSumDef10|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((fn$$11@95@01 Int)) (!
  (and
    (or (not (<= 0 fn$$11@95@01)) (<= 0 fn$$11@95@01))
    (=>
      (and (< fn$$11@95@01 8) (<= 0 fn$$11@95@01))
      (and
        (< fn$$11@95@01 8)
        (<= 0 fn$$11@95@01)
        (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01)
        (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition $Snap.unit fn$$10@86@01)))
    (or
      (not (and (< fn$$11@95@01 8) (<= 0 fn$$11@95@01)))
      (and (< fn$$11@95@01 8) (<= 0 fn$$11@95@01))))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$11@95@01))
  :qid |prog.l2703-aux|)))
(assert (forall ((fn$$11@95@01 Int)) (!
  (and
    (or (not (<= 0 fn$$11@95@01)) (<= 0 fn$$11@95@01))
    (=>
      (and (< fn$$11@95@01 8) (<= 0 fn$$11@95@01))
      (and
        (< fn$$11@95@01 8)
        (<= 0 fn$$11@95@01)
        (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01)
        (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition $Snap.unit fn$$10@86@01)))
    (or
      (not (and (< fn$$11@95@01 8) (<= 0 fn$$11@95@01)))
      (and (< fn$$11@95@01 8) (<= 0 fn$$11@95@01))))
  :pattern ((Seq_index
    (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int $Snap.unit fn$$10@86@01)
    fn$$11@95@01))
  :qid |prog.l2703-aux|)))
(assert (forall ((fn$$11@95@01 Int)) (!
  (=>
    (and (< fn$$11@95@01 8) (<= 0 fn$$11@95@01))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@96@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$11@95@01))
      (Seq_index
        (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int $Snap.unit fn$$10@86@01)
        fn$$11@95@01)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) fn$$11@95@01))
  :pattern ((Seq_index
    (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int $Snap.unit fn$$10@86@01)
    fn$$11@95@01))
  :qid |prog.l2703|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; fn$$13 := dstIA_V1
; [exec]
; fn$$14 := arrayDefault_8_Intbyte$$$$_E_$$$()
; [eval] arrayDefault_8_Intbyte$$$$_E_$$$()
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const fn$$14@98@01 Emb_8_Intbyte$$$$_E_$$$)
(assert (= fn$$14@98@01 (arrayDefault_8_Intbyte$$$$_E_$$$ $Snap.unit)))
; [exec]
; exhale (forall fn$$12: Int ::
;     { (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1), fn$$12): Ref) }
;     0 <= fn$$12 && fn$$12 < 8 ==>
;     acc((ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1), fn$$12): Ref).Intbyte$$$$_E_$$$, write))
(declare-const fn$$12@99@01 Int)
(push) ; 5
; [eval] 0 <= fn$$12 && fn$$12 < 8
; [eval] 0 <= fn$$12
(push) ; 6
; [then-branch: 37 | 0 <= fn$$12@99@01 | live]
; [else-branch: 37 | !(0 <= fn$$12@99@01) | live]
(push) ; 7
; [then-branch: 37 | 0 <= fn$$12@99@01]
(assert (<= 0 fn$$12@99@01))
; [eval] fn$$12 < 8
(pop) ; 7
(push) ; 7
; [else-branch: 37 | !(0 <= fn$$12@99@01)]
(assert (not (<= 0 fn$$12@99@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 fn$$12@99@01)) (<= 0 fn$$12@99@01)))
(assert (and (< fn$$12@99@01 8) (<= 0 fn$$12@99@01)))
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1), fn$$12): Ref)
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1)
(push) ; 6
(assert (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
(pop) ; 6
; Joined path conditions
(assert (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
(pop) ; 5
(declare-fun inv@100@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((fn$$12@99@01 Int)) (!
  (=>
    (and (< fn$$12@99@01 8) (<= 0 fn$$12@99@01))
    (and
      (or (not (<= 0 fn$$12@99@01)) (<= 0 fn$$12@99@01))
      (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$12@99@01))
  :qid |Intbyte$$$$_E_$$$-aux|)))
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((fn$$121@99@01 Int) (fn$$122@99@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (and (< fn$$121@99@01 8) (<= 0 fn$$121@99@01))
          (and (< fn$$122@99@01 8) (<= 0 fn$$122@99@01)))
        (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
      (and
        (and (< fn$$121@99@01 8) (<= 0 fn$$121@99@01))
        (and (< fn$$122@99@01 8) (<= 0 fn$$122@99@01))
        (=
          (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$121@99@01)
          (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$122@99@01))))
    (= fn$$121@99@01 fn$$122@99@01))
  
  :qid |Intbyte$$$$_E_$$$-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((fn$$12@99@01 Int)) (!
  (=>
    (and (< fn$$12@99@01 8) (<= 0 fn$$12@99@01))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$12@99@01))
  :qid |Intbyte$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@100@01 r) 8) (<= 0 (inv@100@01 r)))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
  :pattern ((inv@100@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
(assert (forall ((fn$$12@99@01 Int)) (!
  (=>
    (and (< fn$$12@99@01 8) (<= 0 fn$$12@99@01))
    (=
      (inv@100@01 (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$12@99@01))
      fn$$12@99@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$12@99@01))
  :qid |Intbyte$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@100@01 r) 8) (<= 0 (inv@100@01 r)))
    (=
      (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) (inv@100@01 r))
      r))
  :pattern ((inv@100@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@101@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@100@01 r) 8) (<= 0 (inv@100@01 r)))
    ($Perm.min
      (ite (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r))) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@102@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@100@01 r) 8) (<= 0 (inv@100@01 r)))
    ($Perm.min
      (-
        (ite (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r))) $Perm.Write $Perm.No)
        (pTaken@90@01 r))
      (- $Perm.Write (pTaken@101@01 r)))
    $Perm.No))
(define-fun pTaken@103@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@100@01 r) 8) (<= 0 (inv@100@01 r)))
    ($Perm.min
      (-
        (ite (and (< (inv@82@01 r) 8) (<= 0 (inv@82@01 r))) $Perm.Write $Perm.No)
        (pTaken@89@01 r))
      (- (- $Perm.Write (pTaken@101@01 r)) (pTaken@102@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r))) $Perm.Write $Perm.No)
      (pTaken@101@01 r))
    $Perm.No)
  
  :qid |quant-u-100|))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@100@01 r) 8) (<= 0 (inv@100@01 r)))
    (= (- $Perm.Write (pTaken@101@01 r)) $Perm.No))
  
  :qid |quant-u-101|))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (ite (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r))) $Perm.Write $Perm.No)
        (pTaken@90@01 r))
      (pTaken@102@01 r))
    $Perm.No)
  
  :qid |quant-u-102|))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@100@01 r) 8) (<= 0 (inv@100@01 r)))
    (= (- (- $Perm.Write (pTaken@101@01 r)) (pTaken@102@01 r)) $Perm.No))
  
  :qid |quant-u-103|))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (ite (and (< (inv@82@01 r) 8) (<= 0 (inv@82@01 r))) $Perm.Write $Perm.No)
        (pTaken@89@01 r))
      (pTaken@103@01 r))
    $Perm.No)
  
  :qid |quant-u-104|))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@100@01 r) 8) (<= 0 (inv@100@01 r)))
    (=
      (-
        (- (- $Perm.Write (pTaken@101@01 r)) (pTaken@102@01 r))
        (pTaken@103@01 r))
      $Perm.No))
  
  :qid |quant-u-105|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@104@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@104@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@92@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@104@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@92@01)) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r))) $Perm.Write $Perm.No)
        (pTaken@90@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@104@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@104@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r))
  :qid |qp.fvfValDef12|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite (and (< (inv@82@01 r) 8) (<= 0 (inv@82@01 r))) $Perm.Write $Perm.No)
        (pTaken@89@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@104@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@80@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@104@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@80@01)) r))
  :qid |qp.fvfValDef13|)))
; [exec]
; inhale (forall fn$$12: Int ::
;     { (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1), fn$$12): Ref) }
;     0 <= fn$$12 && fn$$12 < 8 ==>
;     acc((ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1), fn$$12): Ref).Intbyte$$$$_E_$$$, write)) &&
;   (forall fn$$15: Int ::
;     { (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$13), fn$$15): Ref) }
;     { unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$14)[fn$$15] }
;     0 <= fn$$15 && fn$$15 < 8 ==>
;     (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$13), fn$$15): Ref).Intbyte$$$$_E_$$$ ==
;     unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$14)[fn$$15])
(declare-const $t@105@01 $Snap)
(assert (= $t@105@01 ($Snap.combine ($Snap.first $t@105@01) ($Snap.second $t@105@01))))
(declare-const fn$$12@106@01 Int)
(set-option :timeout 0)
(push) ; 5
; [eval] 0 <= fn$$12 && fn$$12 < 8
; [eval] 0 <= fn$$12
(push) ; 6
; [then-branch: 38 | 0 <= fn$$12@106@01 | live]
; [else-branch: 38 | !(0 <= fn$$12@106@01) | live]
(push) ; 7
; [then-branch: 38 | 0 <= fn$$12@106@01]
(assert (<= 0 fn$$12@106@01))
; [eval] fn$$12 < 8
(pop) ; 7
(push) ; 7
; [else-branch: 38 | !(0 <= fn$$12@106@01)]
(assert (not (<= 0 fn$$12@106@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 fn$$12@106@01)) (<= 0 fn$$12@106@01)))
(assert (and (< fn$$12@106@01 8) (<= 0 fn$$12@106@01)))
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1), fn$$12): Ref)
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1)
(push) ; 6
(assert (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
(pop) ; 6
; Joined path conditions
(assert (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
(pop) ; 5
(declare-fun inv@107@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((fn$$12@106@01 Int)) (!
  (=>
    (and (< fn$$12@106@01 8) (<= 0 fn$$12@106@01))
    (and
      (or (not (<= 0 fn$$12@106@01)) (<= 0 fn$$12@106@01))
      (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$12@106@01))
  :qid |Intbyte$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((fn$$12@106@01 Int)) (!
  (=>
    (and (< fn$$12@106@01 8) (<= 0 fn$$12@106@01))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$12@106@01))
  :qid |quant-u-107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
  :pattern ((inv@107@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
(assert (forall ((fn$$12@106@01 Int)) (!
  (=>
    (and (< fn$$12@106@01 8) (<= 0 fn$$12@106@01))
    (=
      (inv@107@01 (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$12@106@01))
      fn$$12@106@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$12@106@01))
  :qid |quant-u-107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
    (=
      (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) (inv@107@01 r))
      r))
  :pattern ((inv@107@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((fn$$12@106@01 Int)) (!
  (=>
    (and (< fn$$12@106@01 8) (<= 0 fn$$12@106@01))
    (not
      (=
        (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$12@106@01)
        $Ref.null)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$12@106@01))
  :qid |Intbyte$$$$_E_$$$-permImpliesNonNull|)))
(assert (= ($Snap.second $t@105@01) $Snap.unit))
; [eval] (forall fn$$15: Int :: { (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$13), fn$$15): Ref) } { unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$14)[fn$$15] } 0 <= fn$$15 && fn$$15 < 8 ==> (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$13), fn$$15): Ref).Intbyte$$$$_E_$$$ == unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$14)[fn$$15])
(declare-const fn$$15@108@01 Int)
(push) ; 5
; [eval] 0 <= fn$$15 && fn$$15 < 8 ==> (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$13), fn$$15): Ref).Intbyte$$$$_E_$$$ == unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$14)[fn$$15]
; [eval] 0 <= fn$$15 && fn$$15 < 8
; [eval] 0 <= fn$$15
(push) ; 6
; [then-branch: 39 | 0 <= fn$$15@108@01 | live]
; [else-branch: 39 | !(0 <= fn$$15@108@01) | live]
(push) ; 7
; [then-branch: 39 | 0 <= fn$$15@108@01]
(assert (<= 0 fn$$15@108@01))
; [eval] fn$$15 < 8
(pop) ; 7
(push) ; 7
; [else-branch: 39 | !(0 <= fn$$15@108@01)]
(assert (not (<= 0 fn$$15@108@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 fn$$15@108@01)) (<= 0 fn$$15@108@01)))
(push) ; 6
; [then-branch: 40 | fn$$15@108@01 < 8 && 0 <= fn$$15@108@01 | live]
; [else-branch: 40 | !(fn$$15@108@01 < 8 && 0 <= fn$$15@108@01) | live]
(push) ; 7
; [then-branch: 40 | fn$$15@108@01 < 8 && 0 <= fn$$15@108@01]
(assert (and (< fn$$15@108@01 8) (<= 0 fn$$15@108@01)))
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$13), fn$$15): Ref).Intbyte$$$$_E_$$$ == unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$14)[fn$$15]
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$13), fn$$15): Ref)
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(fn$$13)
(push) ; 8
(assert (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
(pop) ; 8
; Joined path conditions
(assert (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
(declare-const sm@109@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@109@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@105@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@109@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@105@01)) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (-
          (ite
            (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
            $Perm.Write
            $Perm.No)
          (pTaken@90@01 r))
        (pTaken@102@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@109@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@109@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r))) $Perm.Write $Perm.No)
        (pTaken@101@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@109@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@92@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@109@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@92@01)) r))
  :qid |qp.fvfValDef16|)))
(declare-const pm@110@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intbyte$$$$_E_$$$ (as pm@110@01  $FPM) r)
    (+
      (+
        (ite
          (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
          $Perm.Write
          $Perm.No)
        (-
          (-
            (ite
              (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
              $Perm.Write
              $Perm.No)
            (pTaken@90@01 r))
          (pTaken@102@01 r)))
      (-
        (ite (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r))) $Perm.Write $Perm.No)
        (pTaken@101@01 r))))
  :pattern (($FVF.perm_Intbyte$$$$_E_$$$ (as pm@110@01  $FPM) r))
  :qid |qp.resPrmSumDef17|)))
(push) ; 8
(assert (not (<
  $Perm.No
  ($FVF.perm_Intbyte$$$$_E_$$$ (as pm@110@01  $FPM) (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$15@108@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$14)[fn$$15]
; [eval] unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int(fn$$14)
(push) ; 8
(assert (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition $Snap.unit fn$$14@98@01))
(pop) ; 8
; Joined path conditions
(assert (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition $Snap.unit fn$$14@98@01))
(push) ; 8
(assert (not (>= fn$$15@108@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  fn$$15@108@01
  (Seq_length (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int $Snap.unit fn$$14@98@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 40 | !(fn$$15@108@01 < 8 && 0 <= fn$$15@108@01)]
(assert (not (and (< fn$$15@108@01 8) (<= 0 fn$$15@108@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@109@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@105@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@109@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@105@01)) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (-
          (ite
            (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
            $Perm.Write
            $Perm.No)
          (pTaken@90@01 r))
        (pTaken@102@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@109@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@109@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r))) $Perm.Write $Perm.No)
        (pTaken@101@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@109@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@92@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@109@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@92@01)) r))
  :qid |qp.fvfValDef16|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intbyte$$$$_E_$$$ (as pm@110@01  $FPM) r)
    (+
      (+
        (ite
          (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
          $Perm.Write
          $Perm.No)
        (-
          (-
            (ite
              (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
              $Perm.Write
              $Perm.No)
            (pTaken@90@01 r))
          (pTaken@102@01 r)))
      (-
        (ite (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r))) $Perm.Write $Perm.No)
        (pTaken@101@01 r))))
  :pattern (($FVF.perm_Intbyte$$$$_E_$$$ (as pm@110@01  $FPM) r))
  :qid |qp.resPrmSumDef17|)))
(assert (=>
  (and (< fn$$15@108@01 8) (<= 0 fn$$15@108@01))
  (and
    (< fn$$15@108@01 8)
    (<= 0 fn$$15@108@01)
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01)
    (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition $Snap.unit fn$$14@98@01))))
; Joined path conditions
(assert (or
  (not (and (< fn$$15@108@01 8) (<= 0 fn$$15@108@01)))
  (and (< fn$$15@108@01 8) (<= 0 fn$$15@108@01))))
(pop) ; 5
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@109@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@105@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@109@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@105@01)) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (-
          (ite
            (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
            $Perm.Write
            $Perm.No)
          (pTaken@90@01 r))
        (pTaken@102@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@109@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@109@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r))) $Perm.Write $Perm.No)
        (pTaken@101@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@109@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@92@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@109@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@92@01)) r))
  :qid |qp.fvfValDef16|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intbyte$$$$_E_$$$ (as pm@110@01  $FPM) r)
    (+
      (+
        (ite
          (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
          $Perm.Write
          $Perm.No)
        (-
          (-
            (ite
              (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
              $Perm.Write
              $Perm.No)
            (pTaken@90@01 r))
          (pTaken@102@01 r)))
      (-
        (ite (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r))) $Perm.Write $Perm.No)
        (pTaken@101@01 r))))
  :pattern (($FVF.perm_Intbyte$$$$_E_$$$ (as pm@110@01  $FPM) r))
  :qid |qp.resPrmSumDef17|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((fn$$15@108@01 Int)) (!
  (and
    (or (not (<= 0 fn$$15@108@01)) (<= 0 fn$$15@108@01))
    (=>
      (and (< fn$$15@108@01 8) (<= 0 fn$$15@108@01))
      (and
        (< fn$$15@108@01 8)
        (<= 0 fn$$15@108@01)
        (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01)
        (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition $Snap.unit fn$$14@98@01)))
    (or
      (not (and (< fn$$15@108@01 8) (<= 0 fn$$15@108@01)))
      (and (< fn$$15@108@01 8) (<= 0 fn$$15@108@01))))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$15@108@01))
  :qid |prog.l2723-aux|)))
(assert (forall ((fn$$15@108@01 Int)) (!
  (and
    (or (not (<= 0 fn$$15@108@01)) (<= 0 fn$$15@108@01))
    (=>
      (and (< fn$$15@108@01 8) (<= 0 fn$$15@108@01))
      (and
        (< fn$$15@108@01 8)
        (<= 0 fn$$15@108@01)
        (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01)
        (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int%precondition $Snap.unit fn$$14@98@01)))
    (or
      (not (and (< fn$$15@108@01 8) (<= 0 fn$$15@108@01)))
      (and (< fn$$15@108@01 8) (<= 0 fn$$15@108@01))))
  :pattern ((Seq_index
    (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int $Snap.unit fn$$14@98@01)
    fn$$15@108@01))
  :qid |prog.l2723-aux|)))
(assert (forall ((fn$$15@108@01 Int)) (!
  (=>
    (and (< fn$$15@108@01 8) (<= 0 fn$$15@108@01))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@109@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$15@108@01))
      (Seq_index
        (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int $Snap.unit fn$$14@98@01)
        fn$$15@108@01)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) fn$$15@108@01))
  :pattern ((Seq_index
    (unbox_Emb_8_Intbyte$$$$_E_$$$_Seq_Int $Snap.unit fn$$14@98@01)
    fn$$15@108@01))
  :qid |prog.l2723|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; PutUint64_72f0d887_MbigEndian(0, ssliceFromArray_Ref(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1),
;   0, (ShArraylen(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1)): Int)),
;   (ShStructget11of17(s_V0_CN0): Ref).DefinedIA_cd675838_T$$$$_E_$$$)
; [eval] ssliceFromArray_Ref(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1), 0, (ShArraylen(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1)): Int))
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1)
(set-option :timeout 0)
(push) ; 5
(assert (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
(pop) ; 5
; Joined path conditions
(assert (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
; [eval] (ShArraylen(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1)): Int)
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] 0 <= i
; [eval] i <= j
(push) ; 6
(assert (not (<=
  0
  (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01))))
; [eval] j <= (ShArraylen(a): Int)
; [eval] (ShArraylen(a): Int)
(assert (ssliceFromArray_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01))))
(pop) ; 5
; Joined path conditions
(assert (and
  (<=
    0
    (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))
  (ssliceFromArray_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))))
; [eval] (ShStructget11of17(s_V0_CN0): Ref)
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 0)
; [eval] (soffset(b_V0): Int)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0))
; Precomputing data for removing quantified permissions
(define-fun pTaken@111@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
    ($Perm.min
      (ite (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r))) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@112@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
    ($Perm.min
      (-
        (-
          (ite
            (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
            $Perm.Write
            $Perm.No)
          (pTaken@90@01 r))
        (pTaken@102@01 r))
      (- $Perm.Write (pTaken@111@01 r)))
    $Perm.No))
(define-fun pTaken@113@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
    ($Perm.min
      (-
        (ite (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r))) $Perm.Write $Perm.No)
        (pTaken@101@01 r))
      (- (- $Perm.Write (pTaken@111@01 r)) (pTaken@112@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r))) $Perm.Write $Perm.No)
      (pTaken@111@01 r))
    $Perm.No)
  
  :qid |quant-u-109|))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
    (= (- $Perm.Write (pTaken@111@01 r)) $Perm.No))
  
  :qid |quant-u-110|))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (ite
            (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
            $Perm.Write
            $Perm.No)
          (pTaken@90@01 r))
        (pTaken@102@01 r))
      (pTaken@112@01 r))
    $Perm.No)
  
  :qid |quant-u-111|))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
    (= (- (- $Perm.Write (pTaken@111@01 r)) (pTaken@112@01 r)) $Perm.No))
  
  :qid |quant-u-112|))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (ite (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r))) $Perm.Write $Perm.No)
        (pTaken@101@01 r))
      (pTaken@113@01 r))
    $Perm.No)
  
  :qid |quant-u-113|))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
    (=
      (-
        (- (- $Perm.Write (pTaken@111@01 r)) (pTaken@112@01 r))
        (pTaken@113@01 r))
      $Perm.No))
  
  :qid |quant-u-114|))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@114@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (and
    (<
      (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
      8)
    (<=
      0
      (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@114@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@105@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (ite
          (and
            (<
              (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
              8)
            (<=
              0
              (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))))
          $Perm.Write
          $Perm.No)
        (pTaken@90@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0))))
      (pTaken@102@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@114@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0))))))
(assert (=>
  (<
    $Perm.No
    (-
      (ite
        (and
          (<
            (inv@94@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
            8)
          (<=
            0
            (inv@94@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))))
        $Perm.Write
        $Perm.No)
      (pTaken@101@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@114@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@92@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 1)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1))
; Precomputing data for removing quantified permissions
(define-fun pTaken@115@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
    ($Perm.min
      (-
        (-
          (ite
            (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r)))
            $Perm.Write
            $Perm.No)
          (pTaken@101@01 r))
        (pTaken@113@01 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@116@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
    ($Perm.min
      (-
        (-
          (-
            (ite
              (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
              $Perm.Write
              $Perm.No)
            (pTaken@90@01 r))
          (pTaken@102@01 r))
        (pTaken@112@01 r))
      (- $Perm.Write (pTaken@115@01 r)))
    $Perm.No))
(define-fun pTaken@117@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
    ($Perm.min
      (-
        (ite
          (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
          $Perm.Write
          $Perm.No)
        (pTaken@111@01 r))
      (- (- $Perm.Write (pTaken@115@01 r)) (pTaken@116@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (ite
            (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r)))
            $Perm.Write
            $Perm.No)
          (pTaken@101@01 r))
        (pTaken@113@01 r))
      (pTaken@115@01 r))
    $Perm.No)
  
  :qid |quant-u-116|))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
    (= (- $Perm.Write (pTaken@115@01 r)) $Perm.No))
  
  :qid |quant-u-117|))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (ite
              (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
              $Perm.Write
              $Perm.No)
            (pTaken@90@01 r))
          (pTaken@102@01 r))
        (pTaken@112@01 r))
      (pTaken@116@01 r))
    $Perm.No)
  
  :qid |quant-u-118|))))
(check-sat)
; unknown
(pop) ; 5
; 0.04s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
    (= (- (- $Perm.Write (pTaken@115@01 r)) (pTaken@116@01 r)) $Perm.No))
  
  :qid |quant-u-119|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@118@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (ite
          (and
            (<
              (inv@94@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
              8)
            (<=
              0
              (inv@94@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))))
          $Perm.Write
          $Perm.No)
        (pTaken@101@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1))))
      (pTaken@113@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@118@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@92@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (ite
            (and
              (<
                (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
                8)
              (<=
                0
                (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))))
            $Perm.Write
            $Perm.No)
          (pTaken@90@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1))))
        (pTaken@102@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1))))
      (pTaken@112@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@118@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1))))))
(assert (=>
  (<
    $Perm.No
    (-
      (ite
        (and
          (<
            (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
            8)
          (<=
            0
            (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))))
        $Perm.Write
        $Perm.No)
      (pTaken@111@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@118@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@105@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 2)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))
; Precomputing data for removing quantified permissions
(define-fun pTaken@119@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
    ($Perm.min
      (-
        (ite
          (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
          $Perm.Write
          $Perm.No)
        (pTaken@111@01 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@120@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (ite
                (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
                $Perm.Write
                $Perm.No)
              (pTaken@90@01 r))
            (pTaken@102@01 r))
          (pTaken@112@01 r))
        (pTaken@116@01 r))
      (- $Perm.Write (pTaken@119@01 r)))
    $Perm.No))
(define-fun pTaken@121@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
    ($Perm.min
      (-
        (-
          (-
            (ite
              (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r)))
              $Perm.Write
              $Perm.No)
            (pTaken@101@01 r))
          (pTaken@113@01 r))
        (pTaken@115@01 r))
      (- (- $Perm.Write (pTaken@119@01 r)) (pTaken@120@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (ite
          (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
          $Perm.Write
          $Perm.No)
        (pTaken@111@01 r))
      (pTaken@119@01 r))
    $Perm.No)
  
  :qid |quant-u-121|))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
    (= (- $Perm.Write (pTaken@119@01 r)) $Perm.No))
  
  :qid |quant-u-122|))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (ite
                (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
                $Perm.Write
                $Perm.No)
              (pTaken@90@01 r))
            (pTaken@102@01 r))
          (pTaken@112@01 r))
        (pTaken@116@01 r))
      (pTaken@120@01 r))
    $Perm.No)
  
  :qid |quant-u-123|))))
(check-sat)
; unknown
(pop) ; 5
; 0.04s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
    (= (- (- $Perm.Write (pTaken@119@01 r)) (pTaken@120@01 r)) $Perm.No))
  
  :qid |quant-u-124|))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (ite
              (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r)))
              $Perm.Write
              $Perm.No)
            (pTaken@101@01 r))
          (pTaken@113@01 r))
        (pTaken@115@01 r))
      (pTaken@121@01 r))
    $Perm.No)
  
  :qid |quant-u-125|))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
    (=
      (-
        (- (- $Perm.Write (pTaken@119@01 r)) (pTaken@120@01 r))
        (pTaken@121@01 r))
      $Perm.No))
  
  :qid |quant-u-126|))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@122@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (<
    $Perm.No
    (-
      (ite
        (and
          (<
            (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
            8)
          (<=
            0
            (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))))
        $Perm.Write
        $Perm.No)
      (pTaken@111@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@122@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@105@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (ite
              (and
                (<
                  (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
                  8)
                (<=
                  0
                  (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))))
              $Perm.Write
              $Perm.No)
            (pTaken@90@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))))
          (pTaken@102@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))))
        (pTaken@112@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))))
      (pTaken@116@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@122@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (ite
            (and
              (<
                (inv@94@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
                8)
              (<=
                0
                (inv@94@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))))
            $Perm.Write
            $Perm.No)
          (pTaken@101@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))))
        (pTaken@113@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))))
      (pTaken@115@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@122@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@92@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 3)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))
; Precomputing data for removing quantified permissions
(define-fun pTaken@123@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (ite
                (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r)))
                $Perm.Write
                $Perm.No)
              (pTaken@101@01 r))
            (pTaken@113@01 r))
          (pTaken@115@01 r))
        (pTaken@121@01 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@124@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (ite
                  (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
                  $Perm.Write
                  $Perm.No)
                (pTaken@90@01 r))
              (pTaken@102@01 r))
            (pTaken@112@01 r))
          (pTaken@116@01 r))
        (pTaken@120@01 r))
      (- $Perm.Write (pTaken@123@01 r)))
    $Perm.No))
(define-fun pTaken@125@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
    ($Perm.min
      (-
        (-
          (ite
            (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
            $Perm.Write
            $Perm.No)
          (pTaken@111@01 r))
        (pTaken@119@01 r))
      (- (- $Perm.Write (pTaken@123@01 r)) (pTaken@124@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (ite
                (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r)))
                $Perm.Write
                $Perm.No)
              (pTaken@101@01 r))
            (pTaken@113@01 r))
          (pTaken@115@01 r))
        (pTaken@121@01 r))
      (pTaken@123@01 r))
    $Perm.No)
  
  :qid |quant-u-128|))))
(check-sat)
; unknown
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
    (= (- $Perm.Write (pTaken@123@01 r)) $Perm.No))
  
  :qid |quant-u-129|))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (-
                (ite
                  (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
                  $Perm.Write
                  $Perm.No)
                (pTaken@90@01 r))
              (pTaken@102@01 r))
            (pTaken@112@01 r))
          (pTaken@116@01 r))
        (pTaken@120@01 r))
      (pTaken@124@01 r))
    $Perm.No)
  
  :qid |quant-u-130|))))
(check-sat)
; unknown
(pop) ; 5
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
    (= (- (- $Perm.Write (pTaken@123@01 r)) (pTaken@124@01 r)) $Perm.No))
  
  :qid |quant-u-131|))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@126@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (ite
              (and
                (<
                  (inv@94@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
                  8)
                (<=
                  0
                  (inv@94@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))))
              $Perm.Write
              $Perm.No)
            (pTaken@101@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))))
          (pTaken@113@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))))
        (pTaken@115@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))))
      (pTaken@121@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@126@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@92@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (ite
                (and
                  (<
                    (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
                    8)
                  (<=
                    0
                    (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))))
                $Perm.Write
                $Perm.No)
              (pTaken@90@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))))
            (pTaken@102@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))))
          (pTaken@112@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))))
        (pTaken@116@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))))
      (pTaken@120@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@126@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (ite
          (and
            (<
              (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
              8)
            (<=
              0
              (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))))
          $Perm.Write
          $Perm.No)
        (pTaken@111@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))))
      (pTaken@119@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@126@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@105@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 4)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 4)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))
; Precomputing data for removing quantified permissions
(define-fun pTaken@127@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
    ($Perm.min
      (-
        (-
          (ite
            (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
            $Perm.Write
            $Perm.No)
          (pTaken@111@01 r))
        (pTaken@119@01 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@128@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (-
                  (ite
                    (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
                    $Perm.Write
                    $Perm.No)
                  (pTaken@90@01 r))
                (pTaken@102@01 r))
              (pTaken@112@01 r))
            (pTaken@116@01 r))
          (pTaken@120@01 r))
        (pTaken@124@01 r))
      (- $Perm.Write (pTaken@127@01 r)))
    $Perm.No))
(define-fun pTaken@129@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (ite
                  (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r)))
                  $Perm.Write
                  $Perm.No)
                (pTaken@101@01 r))
              (pTaken@113@01 r))
            (pTaken@115@01 r))
          (pTaken@121@01 r))
        (pTaken@123@01 r))
      (- (- $Perm.Write (pTaken@127@01 r)) (pTaken@128@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (ite
            (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
            $Perm.Write
            $Perm.No)
          (pTaken@111@01 r))
        (pTaken@119@01 r))
      (pTaken@127@01 r))
    $Perm.No)
  
  :qid |quant-u-133|))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
    (= (- $Perm.Write (pTaken@127@01 r)) $Perm.No))
  
  :qid |quant-u-134|))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (ite
                    (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
                    $Perm.Write
                    $Perm.No)
                  (pTaken@90@01 r))
                (pTaken@102@01 r))
              (pTaken@112@01 r))
            (pTaken@116@01 r))
          (pTaken@120@01 r))
        (pTaken@124@01 r))
      (pTaken@128@01 r))
    $Perm.No)
  
  :qid |quant-u-135|))))
(check-sat)
; unknown
(pop) ; 5
; 0.04s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
    (= (- (- $Perm.Write (pTaken@127@01 r)) (pTaken@128@01 r)) $Perm.No))
  
  :qid |quant-u-136|))))
(check-sat)
; unknown
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (-
                (ite
                  (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r)))
                  $Perm.Write
                  $Perm.No)
                (pTaken@101@01 r))
              (pTaken@113@01 r))
            (pTaken@115@01 r))
          (pTaken@121@01 r))
        (pTaken@123@01 r))
      (pTaken@129@01 r))
    $Perm.No)
  
  :qid |quant-u-137|))))
(check-sat)
; unknown
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
    (=
      (-
        (- (- $Perm.Write (pTaken@127@01 r)) (pTaken@128@01 r))
        (pTaken@129@01 r))
      $Perm.No))
  
  :qid |quant-u-138|))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@130@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (ite
          (and
            (<
              (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
              8)
            (<=
              0
              (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))))
          $Perm.Write
          $Perm.No)
        (pTaken@111@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))))
      (pTaken@119@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@130@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@105@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (-
                (ite
                  (and
                    (<
                      (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
                      8)
                    (<=
                      0
                      (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))))
                  $Perm.Write
                  $Perm.No)
                (pTaken@90@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))))
              (pTaken@102@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))))
            (pTaken@112@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))))
          (pTaken@116@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))))
        (pTaken@120@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))))
      (pTaken@124@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@130@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (ite
                (and
                  (<
                    (inv@94@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
                    8)
                  (<=
                    0
                    (inv@94@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))))
                $Perm.Write
                $Perm.No)
              (pTaken@101@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))))
            (pTaken@113@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))))
          (pTaken@115@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))))
        (pTaken@121@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))))
      (pTaken@123@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@130@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@92@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 5)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 5)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))
; Precomputing data for removing quantified permissions
(define-fun pTaken@131@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (-
                  (ite
                    (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r)))
                    $Perm.Write
                    $Perm.No)
                  (pTaken@101@01 r))
                (pTaken@113@01 r))
              (pTaken@115@01 r))
            (pTaken@121@01 r))
          (pTaken@123@01 r))
        (pTaken@129@01 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@132@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (ite
                      (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
                      $Perm.Write
                      $Perm.No)
                    (pTaken@90@01 r))
                  (pTaken@102@01 r))
                (pTaken@112@01 r))
              (pTaken@116@01 r))
            (pTaken@120@01 r))
          (pTaken@124@01 r))
        (pTaken@128@01 r))
      (- $Perm.Write (pTaken@131@01 r)))
    $Perm.No))
(define-fun pTaken@133@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
    ($Perm.min
      (-
        (-
          (-
            (ite
              (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
              $Perm.Write
              $Perm.No)
            (pTaken@111@01 r))
          (pTaken@119@01 r))
        (pTaken@127@01 r))
      (- (- $Perm.Write (pTaken@131@01 r)) (pTaken@132@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (ite
                    (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r)))
                    $Perm.Write
                    $Perm.No)
                  (pTaken@101@01 r))
                (pTaken@113@01 r))
              (pTaken@115@01 r))
            (pTaken@121@01 r))
          (pTaken@123@01 r))
        (pTaken@129@01 r))
      (pTaken@131@01 r))
    $Perm.No)
  
  :qid |quant-u-140|))))
(check-sat)
; unknown
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
    (= (- $Perm.Write (pTaken@131@01 r)) $Perm.No))
  
  :qid |quant-u-141|))))
(check-sat)
; unknown
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (ite
                      (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
                      $Perm.Write
                      $Perm.No)
                    (pTaken@90@01 r))
                  (pTaken@102@01 r))
                (pTaken@112@01 r))
              (pTaken@116@01 r))
            (pTaken@120@01 r))
          (pTaken@124@01 r))
        (pTaken@128@01 r))
      (pTaken@132@01 r))
    $Perm.No)
  
  :qid |quant-u-142|))))
(check-sat)
; unknown
(pop) ; 5
; 0.06s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
    (= (- (- $Perm.Write (pTaken@131@01 r)) (pTaken@132@01 r)) $Perm.No))
  
  :qid |quant-u-143|))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@134@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (-
                (ite
                  (and
                    (<
                      (inv@94@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
                      8)
                    (<=
                      0
                      (inv@94@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))))
                  $Perm.Write
                  $Perm.No)
                (pTaken@101@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))))
              (pTaken@113@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))))
            (pTaken@115@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))))
          (pTaken@121@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))))
        (pTaken@123@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))))
      (pTaken@129@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@134@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@92@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (ite
                    (and
                      (<
                        (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
                        8)
                      (<=
                        0
                        (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))))
                    $Perm.Write
                    $Perm.No)
                  (pTaken@90@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))))
                (pTaken@102@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))))
              (pTaken@112@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))))
            (pTaken@116@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))))
          (pTaken@120@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))))
        (pTaken@124@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))))
      (pTaken@128@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@134@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (ite
            (and
              (<
                (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
                8)
              (<=
                0
                (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))))
            $Perm.Write
            $Perm.No)
          (pTaken@111@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))))
        (pTaken@119@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))))
      (pTaken@127@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@134@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@105@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 6)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 6)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))
; Precomputing data for removing quantified permissions
(define-fun pTaken@135@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
    ($Perm.min
      (-
        (-
          (-
            (ite
              (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
              $Perm.Write
              $Perm.No)
            (pTaken@111@01 r))
          (pTaken@119@01 r))
        (pTaken@127@01 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@136@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (ite
                        (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
                        $Perm.Write
                        $Perm.No)
                      (pTaken@90@01 r))
                    (pTaken@102@01 r))
                  (pTaken@112@01 r))
                (pTaken@116@01 r))
              (pTaken@120@01 r))
            (pTaken@124@01 r))
          (pTaken@128@01 r))
        (pTaken@132@01 r))
      (- $Perm.Write (pTaken@135@01 r)))
    $Perm.No))
(define-fun pTaken@137@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (ite
                      (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r)))
                      $Perm.Write
                      $Perm.No)
                    (pTaken@101@01 r))
                  (pTaken@113@01 r))
                (pTaken@115@01 r))
              (pTaken@121@01 r))
            (pTaken@123@01 r))
          (pTaken@129@01 r))
        (pTaken@131@01 r))
      (- (- $Perm.Write (pTaken@135@01 r)) (pTaken@136@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (ite
              (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
              $Perm.Write
              $Perm.No)
            (pTaken@111@01 r))
          (pTaken@119@01 r))
        (pTaken@127@01 r))
      (pTaken@135@01 r))
    $Perm.No)
  
  :qid |quant-u-145|))))
(check-sat)
; unknown
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
    (= (- $Perm.Write (pTaken@135@01 r)) $Perm.No))
  
  :qid |quant-u-146|))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (ite
                        (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
                        $Perm.Write
                        $Perm.No)
                      (pTaken@90@01 r))
                    (pTaken@102@01 r))
                  (pTaken@112@01 r))
                (pTaken@116@01 r))
              (pTaken@120@01 r))
            (pTaken@124@01 r))
          (pTaken@128@01 r))
        (pTaken@132@01 r))
      (pTaken@136@01 r))
    $Perm.No)
  
  :qid |quant-u-147|))))
(check-sat)
; unknown
(pop) ; 5
; 0.05s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
    (= (- (- $Perm.Write (pTaken@135@01 r)) (pTaken@136@01 r)) $Perm.No))
  
  :qid |quant-u-148|))))
(check-sat)
; unknown
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (ite
                      (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r)))
                      $Perm.Write
                      $Perm.No)
                    (pTaken@101@01 r))
                  (pTaken@113@01 r))
                (pTaken@115@01 r))
              (pTaken@121@01 r))
            (pTaken@123@01 r))
          (pTaken@129@01 r))
        (pTaken@131@01 r))
      (pTaken@137@01 r))
    $Perm.No)
  
  :qid |quant-u-149|))))
(check-sat)
; unknown
(pop) ; 5
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
    (=
      (-
        (- (- $Perm.Write (pTaken@135@01 r)) (pTaken@136@01 r))
        (pTaken@137@01 r))
      $Perm.No))
  
  :qid |quant-u-150|))))
(check-sat)
; unsat
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@138@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (ite
            (and
              (<
                (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
                8)
              (<=
                0
                (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))))
            $Perm.Write
            $Perm.No)
          (pTaken@111@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))))
        (pTaken@119@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))))
      (pTaken@127@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@138@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@105@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (ite
                      (and
                        (<
                          (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
                          8)
                        (<=
                          0
                          (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))))
                      $Perm.Write
                      $Perm.No)
                    (pTaken@90@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))))
                  (pTaken@102@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))))
                (pTaken@112@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))))
              (pTaken@116@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))))
            (pTaken@120@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))))
          (pTaken@124@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))))
        (pTaken@128@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))))
      (pTaken@132@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@138@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (ite
                    (and
                      (<
                        (inv@94@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
                        8)
                      (<=
                        0
                        (inv@94@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))))
                    $Perm.Write
                    $Perm.No)
                  (pTaken@101@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))))
                (pTaken@113@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))))
              (pTaken@115@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))))
            (pTaken@121@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))))
          (pTaken@123@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))))
        (pTaken@129@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))))
      (pTaken@131@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@138@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@92@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 7)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 7)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))
; Precomputing data for removing quantified permissions
(define-fun pTaken@139@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (ite
                        (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r)))
                        $Perm.Write
                        $Perm.No)
                      (pTaken@101@01 r))
                    (pTaken@113@01 r))
                  (pTaken@115@01 r))
                (pTaken@121@01 r))
              (pTaken@123@01 r))
            (pTaken@129@01 r))
          (pTaken@131@01 r))
        (pTaken@137@01 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@140@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (ite
                          (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
                          $Perm.Write
                          $Perm.No)
                        (pTaken@90@01 r))
                      (pTaken@102@01 r))
                    (pTaken@112@01 r))
                  (pTaken@116@01 r))
                (pTaken@120@01 r))
              (pTaken@124@01 r))
            (pTaken@128@01 r))
          (pTaken@132@01 r))
        (pTaken@136@01 r))
      (- $Perm.Write (pTaken@139@01 r)))
    $Perm.No))
(define-fun pTaken@141@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (ite
                (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
                $Perm.Write
                $Perm.No)
              (pTaken@111@01 r))
            (pTaken@119@01 r))
          (pTaken@127@01 r))
        (pTaken@135@01 r))
      (- (- $Perm.Write (pTaken@139@01 r)) (pTaken@140@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (ite
                        (and (< (inv@94@01 r) 8) (<= 0 (inv@94@01 r)))
                        $Perm.Write
                        $Perm.No)
                      (pTaken@101@01 r))
                    (pTaken@113@01 r))
                  (pTaken@115@01 r))
                (pTaken@121@01 r))
              (pTaken@123@01 r))
            (pTaken@129@01 r))
          (pTaken@131@01 r))
        (pTaken@137@01 r))
      (pTaken@139@01 r))
    $Perm.No)
  
  :qid |quant-u-152|))))
(check-sat)
; unsat
(pop) ; 5
; 0.06s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
    (= (- $Perm.Write (pTaken@139@01 r)) $Perm.No))
  
  :qid |quant-u-153|))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (ite
                          (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
                          $Perm.Write
                          $Perm.No)
                        (pTaken@90@01 r))
                      (pTaken@102@01 r))
                    (pTaken@112@01 r))
                  (pTaken@116@01 r))
                (pTaken@120@01 r))
              (pTaken@124@01 r))
            (pTaken@128@01 r))
          (pTaken@132@01 r))
        (pTaken@136@01 r))
      (pTaken@140@01 r))
    $Perm.No)
  
  :qid |quant-u-154|))))
(check-sat)
; unknown
(pop) ; 5
; 0.06s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
    (= (- (- $Perm.Write (pTaken@139@01 r)) (pTaken@140@01 r)) $Perm.No))
  
  :qid |quant-u-155|))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@142@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (ite
                      (and
                        (<
                          (inv@94@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
                          8)
                        (<=
                          0
                          (inv@94@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))))
                      $Perm.Write
                      $Perm.No)
                    (pTaken@101@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))))
                  (pTaken@113@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))))
                (pTaken@115@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))))
              (pTaken@121@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))))
            (pTaken@123@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))))
          (pTaken@129@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))))
        (pTaken@131@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))))
      (pTaken@137@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@142@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@92@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (ite
                        (and
                          (<
                            (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
                            8)
                          (<=
                            0
                            (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))))
                        $Perm.Write
                        $Perm.No)
                      (pTaken@90@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))))
                    (pTaken@102@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))))
                  (pTaken@112@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))))
                (pTaken@116@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))))
              (pTaken@120@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))))
            (pTaken@124@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))))
          (pTaken@128@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))))
        (pTaken@132@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))))
      (pTaken@136@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@142@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (ite
              (and
                (<
                  (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
                  8)
                (<=
                  0
                  (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))))
              $Perm.Write
              $Perm.No)
            (pTaken@111@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))))
          (pTaken@119@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))))
        (pTaken@127@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))))
      (pTaken@135@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@142@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@105@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))))))
(declare-const $t@143@01 $Snap)
(assert (= $t@143@01 ($Snap.combine ($Snap.first $t@143@01) ($Snap.second $t@143@01))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 0)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const sm@144@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@144@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
  ($SortWrappers.$SnapToInt ($Snap.first $t@143@01))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
  (not
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0))
      $Ref.null))))
(assert (=
  ($Snap.second $t@143@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@143@01))
    ($Snap.second ($Snap.second $t@143@01)))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 1)
; [eval] (soffset(b_V0): Int)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const sm@145@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@145@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@143@01)))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
  (not
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@143@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@143@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@143@01))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 2)
; [eval] (soffset(b_V0): Int)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const sm@146@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@146@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@143@01))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
  (not
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@143@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@143@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@143@01)))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 3)
; [eval] (soffset(b_V0): Int)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const sm@147@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@147@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@143@01)))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
  (not
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@143@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@143@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@143@01))))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 4)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 4)
; [eval] (soffset(b_V0): Int)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const sm@148@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@148@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@143@01))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
  (not
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@143@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@143@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@143@01)))))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 5)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 5)
; [eval] (soffset(b_V0): Int)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const sm@149@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@149@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@143@01)))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
  (not
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@143@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@143@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@143@01))))))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 6)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 6)
; [eval] (soffset(b_V0): Int)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const sm@150@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@150@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@143@01))))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
  (not
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))
      $Ref.null))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 7)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 7)
; [eval] (soffset(b_V0): Int)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const sm@151@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@151@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@143@01))))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
  (not
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))
      $Ref.null))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; PutUint64_72f0d887_MbigEndian(0, ssliceFromArray_Ref(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1),
;   0, (ShArraylen(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1)): Int)),
;   (ShStructget10of17(s_V0_CN0): Ref).DefinedIA_cd675838_T$$$$_E_$$$)
; [eval] ssliceFromArray_Ref(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1), 0, (ShArraylen(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1)): Int))
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1)
(set-option :timeout 0)
(push) ; 5
(assert (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
(pop) ; 5
; Joined path conditions
(assert (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
; [eval] (ShArraylen(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1)): Int)
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1)
(push) ; 5
(pop) ; 5
; Joined path conditions
(push) ; 5
; [eval] 0 <= i
; [eval] i <= j
(push) ; 6
(assert (not (<=
  0
  (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01))))
; [eval] j <= (ShArraylen(a): Int)
; [eval] (ShArraylen(a): Int)
(assert (ssliceFromArray_Ref%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01))))
(pop) ; 5
; Joined path conditions
(assert (and
  (<=
    0
    (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))
  (ssliceFromArray_Ref%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))))
; [eval] (ShStructget10of17(s_V0_CN0): Ref)
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 0)
; [eval] (soffset(b_V0): Int)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@152@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (ite
                (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
                $Perm.Write
                $Perm.No)
              (pTaken@111@01 r))
            (pTaken@119@01 r))
          (pTaken@127@01 r))
        (pTaken@135@01 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@153@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (ite
                            (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
                            $Perm.Write
                            $Perm.No)
                          (pTaken@90@01 r))
                        (pTaken@102@01 r))
                      (pTaken@112@01 r))
                    (pTaken@116@01 r))
                  (pTaken@120@01 r))
                (pTaken@124@01 r))
              (pTaken@128@01 r))
            (pTaken@132@01 r))
          (pTaken@136@01 r))
        (pTaken@140@01 r))
      (- $Perm.Write (pTaken@152@01 r)))
    $Perm.No))
(define-fun pTaken@154@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@152@01 r)) (pTaken@153@01 r)))
    $Perm.No))
(define-fun pTaken@155@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
        $Perm.Write
        $Perm.No)
      (-
        (- (- $Perm.Write (pTaken@152@01 r)) (pTaken@153@01 r))
        (pTaken@154@01 r)))
    $Perm.No))
(define-fun pTaken@156@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (- (- $Perm.Write (pTaken@152@01 r)) (pTaken@153@01 r))
          (pTaken@154@01 r))
        (pTaken@155@01 r)))
    $Perm.No))
(define-fun pTaken@157@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (- (- $Perm.Write (pTaken@152@01 r)) (pTaken@153@01 r))
            (pTaken@154@01 r))
          (pTaken@155@01 r))
        (pTaken@156@01 r)))
    $Perm.No))
(define-fun pTaken@158@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (- (- $Perm.Write (pTaken@152@01 r)) (pTaken@153@01 r))
              (pTaken@154@01 r))
            (pTaken@155@01 r))
          (pTaken@156@01 r))
        (pTaken@157@01 r)))
    $Perm.No))
(define-fun pTaken@159@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (- (- $Perm.Write (pTaken@152@01 r)) (pTaken@153@01 r))
                (pTaken@154@01 r))
              (pTaken@155@01 r))
            (pTaken@156@01 r))
          (pTaken@157@01 r))
        (pTaken@158@01 r)))
    $Perm.No))
(define-fun pTaken@160@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (- (- $Perm.Write (pTaken@152@01 r)) (pTaken@153@01 r))
                  (pTaken@154@01 r))
                (pTaken@155@01 r))
              (pTaken@156@01 r))
            (pTaken@157@01 r))
          (pTaken@158@01 r))
        (pTaken@159@01 r)))
    $Perm.No))
(define-fun pTaken@161@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (- (- $Perm.Write (pTaken@152@01 r)) (pTaken@153@01 r))
                    (pTaken@154@01 r))
                  (pTaken@155@01 r))
                (pTaken@156@01 r))
              (pTaken@157@01 r))
            (pTaken@158@01 r))
          (pTaken@159@01 r))
        (pTaken@160@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (ite
                (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
                $Perm.Write
                $Perm.No)
              (pTaken@111@01 r))
            (pTaken@119@01 r))
          (pTaken@127@01 r))
        (pTaken@135@01 r))
      (pTaken@152@01 r))
    $Perm.No)
  
  :qid |quant-u-157|))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
    (= (- $Perm.Write (pTaken@152@01 r)) $Perm.No))
  
  :qid |quant-u-158|))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (ite
                            (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
                            $Perm.Write
                            $Perm.No)
                          (pTaken@90@01 r))
                        (pTaken@102@01 r))
                      (pTaken@112@01 r))
                    (pTaken@116@01 r))
                  (pTaken@120@01 r))
                (pTaken@124@01 r))
              (pTaken@128@01 r))
            (pTaken@132@01 r))
          (pTaken@136@01 r))
        (pTaken@140@01 r))
      (pTaken@153@01 r))
    $Perm.No)
  
  :qid |quant-u-159|))))
(check-sat)
; unknown
(pop) ; 5
; 0.06s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
    (= (- (- $Perm.Write (pTaken@152@01 r)) (pTaken@153@01 r)) $Perm.No))
  
  :qid |quant-u-160|))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@162@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@162@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@151@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@162@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@150@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@162@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@149@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@162@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@148@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@162@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@147@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@162@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@146@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@162@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@145@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@162@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@144@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (ite
              (and
                (<
                  (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
                  8)
                (<=
                  0
                  (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))))
              $Perm.Write
              $Perm.No)
            (pTaken@111@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))))
          (pTaken@119@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))))
        (pTaken@127@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))))
      (pTaken@135@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@162@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@105@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (ite
                          (and
                            (<
                              (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
                              8)
                            (<=
                              0
                              (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))))
                          $Perm.Write
                          $Perm.No)
                        (pTaken@90@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))))
                      (pTaken@102@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))))
                    (pTaken@112@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))))
                  (pTaken@116@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))))
                (pTaken@120@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))))
              (pTaken@124@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))))
            (pTaken@128@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))))
          (pTaken@132@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))))
        (pTaken@136@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))))
      (pTaken@140@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@162@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 1)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@163@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (ite
                              (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
                              $Perm.Write
                              $Perm.No)
                            (pTaken@90@01 r))
                          (pTaken@102@01 r))
                        (pTaken@112@01 r))
                      (pTaken@116@01 r))
                    (pTaken@120@01 r))
                  (pTaken@124@01 r))
                (pTaken@128@01 r))
              (pTaken@132@01 r))
            (pTaken@136@01 r))
          (pTaken@140@01 r))
        (pTaken@153@01 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@164@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (ite
                  (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
                  $Perm.Write
                  $Perm.No)
                (pTaken@111@01 r))
              (pTaken@119@01 r))
            (pTaken@127@01 r))
          (pTaken@135@01 r))
        (pTaken@152@01 r))
      (- $Perm.Write (pTaken@163@01 r)))
    $Perm.No))
(define-fun pTaken@165@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@163@01 r)) (pTaken@164@01 r)))
    $Perm.No))
(define-fun pTaken@166@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
        $Perm.Write
        $Perm.No)
      (-
        (- (- $Perm.Write (pTaken@163@01 r)) (pTaken@164@01 r))
        (pTaken@165@01 r)))
    $Perm.No))
(define-fun pTaken@167@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (- (- $Perm.Write (pTaken@163@01 r)) (pTaken@164@01 r))
          (pTaken@165@01 r))
        (pTaken@166@01 r)))
    $Perm.No))
(define-fun pTaken@168@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (- (- $Perm.Write (pTaken@163@01 r)) (pTaken@164@01 r))
            (pTaken@165@01 r))
          (pTaken@166@01 r))
        (pTaken@167@01 r)))
    $Perm.No))
(define-fun pTaken@169@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (- (- $Perm.Write (pTaken@163@01 r)) (pTaken@164@01 r))
              (pTaken@165@01 r))
            (pTaken@166@01 r))
          (pTaken@167@01 r))
        (pTaken@168@01 r)))
    $Perm.No))
(define-fun pTaken@170@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (- (- $Perm.Write (pTaken@163@01 r)) (pTaken@164@01 r))
                (pTaken@165@01 r))
              (pTaken@166@01 r))
            (pTaken@167@01 r))
          (pTaken@168@01 r))
        (pTaken@169@01 r)))
    $Perm.No))
(define-fun pTaken@171@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (- (- $Perm.Write (pTaken@163@01 r)) (pTaken@164@01 r))
                  (pTaken@165@01 r))
                (pTaken@166@01 r))
              (pTaken@167@01 r))
            (pTaken@168@01 r))
          (pTaken@169@01 r))
        (pTaken@170@01 r)))
    $Perm.No))
(define-fun pTaken@172@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (- (- $Perm.Write (pTaken@163@01 r)) (pTaken@164@01 r))
                    (pTaken@165@01 r))
                  (pTaken@166@01 r))
                (pTaken@167@01 r))
              (pTaken@168@01 r))
            (pTaken@169@01 r))
          (pTaken@170@01 r))
        (pTaken@171@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (ite
                              (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
                              $Perm.Write
                              $Perm.No)
                            (pTaken@90@01 r))
                          (pTaken@102@01 r))
                        (pTaken@112@01 r))
                      (pTaken@116@01 r))
                    (pTaken@120@01 r))
                  (pTaken@124@01 r))
                (pTaken@128@01 r))
              (pTaken@132@01 r))
            (pTaken@136@01 r))
          (pTaken@140@01 r))
        (pTaken@153@01 r))
      (pTaken@163@01 r))
    $Perm.No)
  
  :qid |quant-u-162|))))
(check-sat)
; unknown
(pop) ; 5
; 0.06s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
    (= (- $Perm.Write (pTaken@163@01 r)) $Perm.No))
  
  :qid |quant-u-163|))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (-
                (ite
                  (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
                  $Perm.Write
                  $Perm.No)
                (pTaken@111@01 r))
              (pTaken@119@01 r))
            (pTaken@127@01 r))
          (pTaken@135@01 r))
        (pTaken@152@01 r))
      (pTaken@164@01 r))
    $Perm.No)
  
  :qid |quant-u-164|))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
    (= (- (- $Perm.Write (pTaken@163@01 r)) (pTaken@164@01 r)) $Perm.No))
  
  :qid |quant-u-165|))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@173@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@173@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@144@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@173@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@145@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@173@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@146@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@173@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@147@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@173@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@148@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@173@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@149@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@173@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@150@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@173@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@151@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (ite
                            (and
                              (<
                                (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
                                8)
                              (<=
                                0
                                (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))))
                            $Perm.Write
                            $Perm.No)
                          (pTaken@90@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))
                        (pTaken@102@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))
                      (pTaken@112@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))
                    (pTaken@116@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))
                  (pTaken@120@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))
                (pTaken@124@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))
              (pTaken@128@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))
            (pTaken@132@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))
          (pTaken@136@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))
        (pTaken@140@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))
      (pTaken@153@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@173@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (ite
                (and
                  (<
                    (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
                    8)
                  (<=
                    0
                    (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))))
                $Perm.Write
                $Perm.No)
              (pTaken@111@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))
            (pTaken@119@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))
          (pTaken@127@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))
        (pTaken@135@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))
      (pTaken@152@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@173@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@105@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 2)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@174@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (-
                  (ite
                    (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
                    $Perm.Write
                    $Perm.No)
                  (pTaken@111@01 r))
                (pTaken@119@01 r))
              (pTaken@127@01 r))
            (pTaken@135@01 r))
          (pTaken@152@01 r))
        (pTaken@164@01 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@175@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (ite
                                (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
                                $Perm.Write
                                $Perm.No)
                              (pTaken@90@01 r))
                            (pTaken@102@01 r))
                          (pTaken@112@01 r))
                        (pTaken@116@01 r))
                      (pTaken@120@01 r))
                    (pTaken@124@01 r))
                  (pTaken@128@01 r))
                (pTaken@132@01 r))
              (pTaken@136@01 r))
            (pTaken@140@01 r))
          (pTaken@153@01 r))
        (pTaken@163@01 r))
      (- $Perm.Write (pTaken@174@01 r)))
    $Perm.No))
(define-fun pTaken@176@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@174@01 r)) (pTaken@175@01 r)))
    $Perm.No))
(define-fun pTaken@177@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
        $Perm.Write
        $Perm.No)
      (-
        (- (- $Perm.Write (pTaken@174@01 r)) (pTaken@175@01 r))
        (pTaken@176@01 r)))
    $Perm.No))
(define-fun pTaken@178@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (- (- $Perm.Write (pTaken@174@01 r)) (pTaken@175@01 r))
          (pTaken@176@01 r))
        (pTaken@177@01 r)))
    $Perm.No))
(define-fun pTaken@179@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (- (- $Perm.Write (pTaken@174@01 r)) (pTaken@175@01 r))
            (pTaken@176@01 r))
          (pTaken@177@01 r))
        (pTaken@178@01 r)))
    $Perm.No))
(define-fun pTaken@180@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (- (- $Perm.Write (pTaken@174@01 r)) (pTaken@175@01 r))
              (pTaken@176@01 r))
            (pTaken@177@01 r))
          (pTaken@178@01 r))
        (pTaken@179@01 r)))
    $Perm.No))
(define-fun pTaken@181@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (- (- $Perm.Write (pTaken@174@01 r)) (pTaken@175@01 r))
                (pTaken@176@01 r))
              (pTaken@177@01 r))
            (pTaken@178@01 r))
          (pTaken@179@01 r))
        (pTaken@180@01 r)))
    $Perm.No))
(define-fun pTaken@182@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (- (- $Perm.Write (pTaken@174@01 r)) (pTaken@175@01 r))
                  (pTaken@176@01 r))
                (pTaken@177@01 r))
              (pTaken@178@01 r))
            (pTaken@179@01 r))
          (pTaken@180@01 r))
        (pTaken@181@01 r)))
    $Perm.No))
(define-fun pTaken@183@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (- (- $Perm.Write (pTaken@174@01 r)) (pTaken@175@01 r))
                    (pTaken@176@01 r))
                  (pTaken@177@01 r))
                (pTaken@178@01 r))
              (pTaken@179@01 r))
            (pTaken@180@01 r))
          (pTaken@181@01 r))
        (pTaken@182@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (ite
                    (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
                    $Perm.Write
                    $Perm.No)
                  (pTaken@111@01 r))
                (pTaken@119@01 r))
              (pTaken@127@01 r))
            (pTaken@135@01 r))
          (pTaken@152@01 r))
        (pTaken@164@01 r))
      (pTaken@174@01 r))
    $Perm.No)
  
  :qid |quant-u-167|))))
(check-sat)
; unknown
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
    (= (- $Perm.Write (pTaken@174@01 r)) $Perm.No))
  
  :qid |quant-u-168|))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (ite
                                (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
                                $Perm.Write
                                $Perm.No)
                              (pTaken@90@01 r))
                            (pTaken@102@01 r))
                          (pTaken@112@01 r))
                        (pTaken@116@01 r))
                      (pTaken@120@01 r))
                    (pTaken@124@01 r))
                  (pTaken@128@01 r))
                (pTaken@132@01 r))
              (pTaken@136@01 r))
            (pTaken@140@01 r))
          (pTaken@153@01 r))
        (pTaken@163@01 r))
      (pTaken@175@01 r))
    $Perm.No)
  
  :qid |quant-u-169|))))
(check-sat)
; unknown
(pop) ; 5
; 0.12s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
    (= (- (- $Perm.Write (pTaken@174@01 r)) (pTaken@175@01 r)) $Perm.No))
  
  :qid |quant-u-170|))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@184@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@184@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@151@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@184@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@150@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@184@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@149@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@184@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@148@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@184@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@147@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@184@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@146@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@184@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@145@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@184@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@144@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (-
                (ite
                  (and
                    (<
                      (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
                      8)
                    (<=
                      0
                      (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))))
                  $Perm.Write
                  $Perm.No)
                (pTaken@111@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))
              (pTaken@119@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))
            (pTaken@127@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))
          (pTaken@135@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))
        (pTaken@152@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))
      (pTaken@164@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@184@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@105@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (ite
                              (and
                                (<
                                  (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
                                  8)
                                (<=
                                  0
                                  (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))))
                              $Perm.Write
                              $Perm.No)
                            (pTaken@90@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))
                          (pTaken@102@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))
                        (pTaken@112@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))
                      (pTaken@116@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))
                    (pTaken@120@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))
                  (pTaken@124@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))
                (pTaken@128@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))
              (pTaken@132@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))
            (pTaken@136@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))
          (pTaken@140@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))
        (pTaken@153@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))
      (pTaken@163@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@184@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 3)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@185@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (-
                                (ite
                                  (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
                                  $Perm.Write
                                  $Perm.No)
                                (pTaken@90@01 r))
                              (pTaken@102@01 r))
                            (pTaken@112@01 r))
                          (pTaken@116@01 r))
                        (pTaken@120@01 r))
                      (pTaken@124@01 r))
                    (pTaken@128@01 r))
                  (pTaken@132@01 r))
                (pTaken@136@01 r))
              (pTaken@140@01 r))
            (pTaken@153@01 r))
          (pTaken@163@01 r))
        (pTaken@175@01 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@186@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (ite
                      (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
                      $Perm.Write
                      $Perm.No)
                    (pTaken@111@01 r))
                  (pTaken@119@01 r))
                (pTaken@127@01 r))
              (pTaken@135@01 r))
            (pTaken@152@01 r))
          (pTaken@164@01 r))
        (pTaken@174@01 r))
      (- $Perm.Write (pTaken@185@01 r)))
    $Perm.No))
(define-fun pTaken@187@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@185@01 r)) (pTaken@186@01 r)))
    $Perm.No))
(define-fun pTaken@188@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
        $Perm.Write
        $Perm.No)
      (-
        (- (- $Perm.Write (pTaken@185@01 r)) (pTaken@186@01 r))
        (pTaken@187@01 r)))
    $Perm.No))
(define-fun pTaken@189@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (- (- $Perm.Write (pTaken@185@01 r)) (pTaken@186@01 r))
          (pTaken@187@01 r))
        (pTaken@188@01 r)))
    $Perm.No))
(define-fun pTaken@190@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (- (- $Perm.Write (pTaken@185@01 r)) (pTaken@186@01 r))
            (pTaken@187@01 r))
          (pTaken@188@01 r))
        (pTaken@189@01 r)))
    $Perm.No))
(define-fun pTaken@191@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (- (- $Perm.Write (pTaken@185@01 r)) (pTaken@186@01 r))
              (pTaken@187@01 r))
            (pTaken@188@01 r))
          (pTaken@189@01 r))
        (pTaken@190@01 r)))
    $Perm.No))
(define-fun pTaken@192@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (- (- $Perm.Write (pTaken@185@01 r)) (pTaken@186@01 r))
                (pTaken@187@01 r))
              (pTaken@188@01 r))
            (pTaken@189@01 r))
          (pTaken@190@01 r))
        (pTaken@191@01 r)))
    $Perm.No))
(define-fun pTaken@193@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (- (- $Perm.Write (pTaken@185@01 r)) (pTaken@186@01 r))
                  (pTaken@187@01 r))
                (pTaken@188@01 r))
              (pTaken@189@01 r))
            (pTaken@190@01 r))
          (pTaken@191@01 r))
        (pTaken@192@01 r)))
    $Perm.No))
(define-fun pTaken@194@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (- (- $Perm.Write (pTaken@185@01 r)) (pTaken@186@01 r))
                    (pTaken@187@01 r))
                  (pTaken@188@01 r))
                (pTaken@189@01 r))
              (pTaken@190@01 r))
            (pTaken@191@01 r))
          (pTaken@192@01 r))
        (pTaken@193@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (-
                                (ite
                                  (and (< (inv@75@01 r) 8) (<= 0 (inv@75@01 r)))
                                  $Perm.Write
                                  $Perm.No)
                                (pTaken@90@01 r))
                              (pTaken@102@01 r))
                            (pTaken@112@01 r))
                          (pTaken@116@01 r))
                        (pTaken@120@01 r))
                      (pTaken@124@01 r))
                    (pTaken@128@01 r))
                  (pTaken@132@01 r))
                (pTaken@136@01 r))
              (pTaken@140@01 r))
            (pTaken@153@01 r))
          (pTaken@163@01 r))
        (pTaken@175@01 r))
      (pTaken@185@01 r))
    $Perm.No)
  
  :qid |quant-u-172|))))
(check-sat)
; unknown
(pop) ; 5
; 0.09s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
    (= (- $Perm.Write (pTaken@185@01 r)) $Perm.No))
  
  :qid |quant-u-173|))))
(check-sat)
; unknown
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (ite
                      (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
                      $Perm.Write
                      $Perm.No)
                    (pTaken@111@01 r))
                  (pTaken@119@01 r))
                (pTaken@127@01 r))
              (pTaken@135@01 r))
            (pTaken@152@01 r))
          (pTaken@164@01 r))
        (pTaken@174@01 r))
      (pTaken@186@01 r))
    $Perm.No)
  
  :qid |quant-u-174|))))
(check-sat)
; unknown
(pop) ; 5
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
    (= (- (- $Perm.Write (pTaken@185@01 r)) (pTaken@186@01 r)) $Perm.No))
  
  :qid |quant-u-175|))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@195@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@195@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@144@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@195@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@145@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@195@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@146@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@195@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@147@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@195@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@148@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@195@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@149@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@195@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@150@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@195@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@151@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (ite
                                (and
                                  (<
                                    (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
                                    8)
                                  (<=
                                    0
                                    (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))))
                                $Perm.Write
                                $Perm.No)
                              (pTaken@90@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))
                            (pTaken@102@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))
                          (pTaken@112@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))
                        (pTaken@116@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))
                      (pTaken@120@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))
                    (pTaken@124@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))
                  (pTaken@128@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))
                (pTaken@132@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))
              (pTaken@136@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))
            (pTaken@140@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))
          (pTaken@153@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))
        (pTaken@163@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))
      (pTaken@175@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@195@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (ite
                    (and
                      (<
                        (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
                        8)
                      (<=
                        0
                        (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))))
                    $Perm.Write
                    $Perm.No)
                  (pTaken@111@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))
                (pTaken@119@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))
              (pTaken@127@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))
            (pTaken@135@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))
          (pTaken@152@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))
        (pTaken@164@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))
      (pTaken@174@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@195@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@105@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 4)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 4)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@196@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (ite
                        (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
                        $Perm.Write
                        $Perm.No)
                      (pTaken@111@01 r))
                    (pTaken@119@01 r))
                  (pTaken@127@01 r))
                (pTaken@135@01 r))
              (pTaken@152@01 r))
            (pTaken@164@01 r))
          (pTaken@174@01 r))
        (pTaken@186@01 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@197@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (-
                                (-
                                  (ite
                                    (and
                                      (< (inv@75@01 r) 8)
                                      (<= 0 (inv@75@01 r)))
                                    $Perm.Write
                                    $Perm.No)
                                  (pTaken@90@01 r))
                                (pTaken@102@01 r))
                              (pTaken@112@01 r))
                            (pTaken@116@01 r))
                          (pTaken@120@01 r))
                        (pTaken@124@01 r))
                      (pTaken@128@01 r))
                    (pTaken@132@01 r))
                  (pTaken@136@01 r))
                (pTaken@140@01 r))
              (pTaken@153@01 r))
            (pTaken@163@01 r))
          (pTaken@175@01 r))
        (pTaken@185@01 r))
      (- $Perm.Write (pTaken@196@01 r)))
    $Perm.No))
(define-fun pTaken@198@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@196@01 r)) (pTaken@197@01 r)))
    $Perm.No))
(define-fun pTaken@199@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
        $Perm.Write
        $Perm.No)
      (-
        (- (- $Perm.Write (pTaken@196@01 r)) (pTaken@197@01 r))
        (pTaken@198@01 r)))
    $Perm.No))
(define-fun pTaken@200@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (- (- $Perm.Write (pTaken@196@01 r)) (pTaken@197@01 r))
          (pTaken@198@01 r))
        (pTaken@199@01 r)))
    $Perm.No))
(define-fun pTaken@201@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (- (- $Perm.Write (pTaken@196@01 r)) (pTaken@197@01 r))
            (pTaken@198@01 r))
          (pTaken@199@01 r))
        (pTaken@200@01 r)))
    $Perm.No))
(define-fun pTaken@202@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (- (- $Perm.Write (pTaken@196@01 r)) (pTaken@197@01 r))
              (pTaken@198@01 r))
            (pTaken@199@01 r))
          (pTaken@200@01 r))
        (pTaken@201@01 r)))
    $Perm.No))
(define-fun pTaken@203@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (- (- $Perm.Write (pTaken@196@01 r)) (pTaken@197@01 r))
                (pTaken@198@01 r))
              (pTaken@199@01 r))
            (pTaken@200@01 r))
          (pTaken@201@01 r))
        (pTaken@202@01 r)))
    $Perm.No))
(define-fun pTaken@204@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (- (- $Perm.Write (pTaken@196@01 r)) (pTaken@197@01 r))
                  (pTaken@198@01 r))
                (pTaken@199@01 r))
              (pTaken@200@01 r))
            (pTaken@201@01 r))
          (pTaken@202@01 r))
        (pTaken@203@01 r)))
    $Perm.No))
(define-fun pTaken@205@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (- (- $Perm.Write (pTaken@196@01 r)) (pTaken@197@01 r))
                    (pTaken@198@01 r))
                  (pTaken@199@01 r))
                (pTaken@200@01 r))
              (pTaken@201@01 r))
            (pTaken@202@01 r))
          (pTaken@203@01 r))
        (pTaken@204@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (ite
                        (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
                        $Perm.Write
                        $Perm.No)
                      (pTaken@111@01 r))
                    (pTaken@119@01 r))
                  (pTaken@127@01 r))
                (pTaken@135@01 r))
              (pTaken@152@01 r))
            (pTaken@164@01 r))
          (pTaken@174@01 r))
        (pTaken@186@01 r))
      (pTaken@196@01 r))
    $Perm.No)
  
  :qid |quant-u-177|))))
(check-sat)
; unknown
(pop) ; 5
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
    (= (- $Perm.Write (pTaken@196@01 r)) $Perm.No))
  
  :qid |quant-u-178|))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (-
                                (-
                                  (ite
                                    (and
                                      (< (inv@75@01 r) 8)
                                      (<= 0 (inv@75@01 r)))
                                    $Perm.Write
                                    $Perm.No)
                                  (pTaken@90@01 r))
                                (pTaken@102@01 r))
                              (pTaken@112@01 r))
                            (pTaken@116@01 r))
                          (pTaken@120@01 r))
                        (pTaken@124@01 r))
                      (pTaken@128@01 r))
                    (pTaken@132@01 r))
                  (pTaken@136@01 r))
                (pTaken@140@01 r))
              (pTaken@153@01 r))
            (pTaken@163@01 r))
          (pTaken@175@01 r))
        (pTaken@185@01 r))
      (pTaken@197@01 r))
    $Perm.No)
  
  :qid |quant-u-179|))))
(check-sat)
; unknown
(pop) ; 5
; 0.16s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
    (= (- (- $Perm.Write (pTaken@196@01 r)) (pTaken@197@01 r)) $Perm.No))
  
  :qid |quant-u-180|))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@206@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@206@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@151@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@206@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@150@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@206@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@149@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@206@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@148@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@206@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@147@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@206@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@146@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@206@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@145@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@206@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@144@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (ite
                      (and
                        (<
                          (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
                          8)
                        (<=
                          0
                          (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))))
                      $Perm.Write
                      $Perm.No)
                    (pTaken@111@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))
                  (pTaken@119@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))
                (pTaken@127@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))
              (pTaken@135@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))
            (pTaken@152@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))
          (pTaken@164@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))
        (pTaken@174@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))
      (pTaken@186@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@206@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@105@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (-
                                (ite
                                  (and
                                    (<
                                      (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
                                      8)
                                    (<=
                                      0
                                      (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                        $Snap.unit
                                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))))
                                  $Perm.Write
                                  $Perm.No)
                                (pTaken@90@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))
                              (pTaken@102@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))
                            (pTaken@112@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))
                          (pTaken@116@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))
                        (pTaken@120@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))
                      (pTaken@124@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))
                    (pTaken@128@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))
                  (pTaken@132@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))
                (pTaken@136@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))
              (pTaken@140@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))
            (pTaken@153@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))
          (pTaken@163@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))
        (pTaken@175@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))
      (pTaken@185@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@206@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 5)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 5)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@207@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (-
                                (-
                                  (-
                                    (ite
                                      (and
                                        (< (inv@75@01 r) 8)
                                        (<= 0 (inv@75@01 r)))
                                      $Perm.Write
                                      $Perm.No)
                                    (pTaken@90@01 r))
                                  (pTaken@102@01 r))
                                (pTaken@112@01 r))
                              (pTaken@116@01 r))
                            (pTaken@120@01 r))
                          (pTaken@124@01 r))
                        (pTaken@128@01 r))
                      (pTaken@132@01 r))
                    (pTaken@136@01 r))
                  (pTaken@140@01 r))
                (pTaken@153@01 r))
              (pTaken@163@01 r))
            (pTaken@175@01 r))
          (pTaken@185@01 r))
        (pTaken@197@01 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@208@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (ite
                          (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
                          $Perm.Write
                          $Perm.No)
                        (pTaken@111@01 r))
                      (pTaken@119@01 r))
                    (pTaken@127@01 r))
                  (pTaken@135@01 r))
                (pTaken@152@01 r))
              (pTaken@164@01 r))
            (pTaken@174@01 r))
          (pTaken@186@01 r))
        (pTaken@196@01 r))
      (- $Perm.Write (pTaken@207@01 r)))
    $Perm.No))
(define-fun pTaken@209@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@207@01 r)) (pTaken@208@01 r)))
    $Perm.No))
(define-fun pTaken@210@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
        $Perm.Write
        $Perm.No)
      (-
        (- (- $Perm.Write (pTaken@207@01 r)) (pTaken@208@01 r))
        (pTaken@209@01 r)))
    $Perm.No))
(define-fun pTaken@211@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (- (- $Perm.Write (pTaken@207@01 r)) (pTaken@208@01 r))
          (pTaken@209@01 r))
        (pTaken@210@01 r)))
    $Perm.No))
(define-fun pTaken@212@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (- (- $Perm.Write (pTaken@207@01 r)) (pTaken@208@01 r))
            (pTaken@209@01 r))
          (pTaken@210@01 r))
        (pTaken@211@01 r)))
    $Perm.No))
(define-fun pTaken@213@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (- (- $Perm.Write (pTaken@207@01 r)) (pTaken@208@01 r))
              (pTaken@209@01 r))
            (pTaken@210@01 r))
          (pTaken@211@01 r))
        (pTaken@212@01 r)))
    $Perm.No))
(define-fun pTaken@214@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (- (- $Perm.Write (pTaken@207@01 r)) (pTaken@208@01 r))
                (pTaken@209@01 r))
              (pTaken@210@01 r))
            (pTaken@211@01 r))
          (pTaken@212@01 r))
        (pTaken@213@01 r)))
    $Perm.No))
(define-fun pTaken@215@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (- (- $Perm.Write (pTaken@207@01 r)) (pTaken@208@01 r))
                  (pTaken@209@01 r))
                (pTaken@210@01 r))
              (pTaken@211@01 r))
            (pTaken@212@01 r))
          (pTaken@213@01 r))
        (pTaken@214@01 r)))
    $Perm.No))
(define-fun pTaken@216@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (- (- $Perm.Write (pTaken@207@01 r)) (pTaken@208@01 r))
                    (pTaken@209@01 r))
                  (pTaken@210@01 r))
                (pTaken@211@01 r))
              (pTaken@212@01 r))
            (pTaken@213@01 r))
          (pTaken@214@01 r))
        (pTaken@215@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (-
                                (-
                                  (-
                                    (ite
                                      (and
                                        (< (inv@75@01 r) 8)
                                        (<= 0 (inv@75@01 r)))
                                      $Perm.Write
                                      $Perm.No)
                                    (pTaken@90@01 r))
                                  (pTaken@102@01 r))
                                (pTaken@112@01 r))
                              (pTaken@116@01 r))
                            (pTaken@120@01 r))
                          (pTaken@124@01 r))
                        (pTaken@128@01 r))
                      (pTaken@132@01 r))
                    (pTaken@136@01 r))
                  (pTaken@140@01 r))
                (pTaken@153@01 r))
              (pTaken@163@01 r))
            (pTaken@175@01 r))
          (pTaken@185@01 r))
        (pTaken@197@01 r))
      (pTaken@207@01 r))
    $Perm.No)
  
  :qid |quant-u-182|))))
(check-sat)
; unknown
(pop) ; 5
; 0.22s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
    (= (- $Perm.Write (pTaken@207@01 r)) $Perm.No))
  
  :qid |quant-u-183|))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (ite
                          (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
                          $Perm.Write
                          $Perm.No)
                        (pTaken@111@01 r))
                      (pTaken@119@01 r))
                    (pTaken@127@01 r))
                  (pTaken@135@01 r))
                (pTaken@152@01 r))
              (pTaken@164@01 r))
            (pTaken@174@01 r))
          (pTaken@186@01 r))
        (pTaken@196@01 r))
      (pTaken@208@01 r))
    $Perm.No)
  
  :qid |quant-u-184|))))
(check-sat)
; unknown
(pop) ; 5
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
    (= (- (- $Perm.Write (pTaken@207@01 r)) (pTaken@208@01 r)) $Perm.No))
  
  :qid |quant-u-185|))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@217@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@217@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@144@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@217@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@145@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@217@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@146@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@217@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@147@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@217@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@148@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@217@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@149@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@217@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@150@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@217@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@151@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (-
                                (-
                                  (ite
                                    (and
                                      (<
                                        (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
                                        8)
                                      (<=
                                        0
                                        (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                          $Snap.unit
                                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))))
                                    $Perm.Write
                                    $Perm.No)
                                  (pTaken@90@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))
                                (pTaken@102@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))
                              (pTaken@112@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))
                            (pTaken@116@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))
                          (pTaken@120@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))
                        (pTaken@124@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))
                      (pTaken@128@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))
                    (pTaken@132@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))
                  (pTaken@136@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))
                (pTaken@140@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))
              (pTaken@153@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))
            (pTaken@163@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))
          (pTaken@175@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))
        (pTaken@185@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))
      (pTaken@197@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@217@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (ite
                        (and
                          (<
                            (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
                            8)
                          (<=
                            0
                            (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))))
                        $Perm.Write
                        $Perm.No)
                      (pTaken@111@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))
                    (pTaken@119@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))
                  (pTaken@127@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))
                (pTaken@135@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))
              (pTaken@152@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))
            (pTaken@164@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))
          (pTaken@174@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))
        (pTaken@186@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))
      (pTaken@196@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@217@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@105@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 6)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 6)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@218@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (ite
                            (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
                            $Perm.Write
                            $Perm.No)
                          (pTaken@111@01 r))
                        (pTaken@119@01 r))
                      (pTaken@127@01 r))
                    (pTaken@135@01 r))
                  (pTaken@152@01 r))
                (pTaken@164@01 r))
              (pTaken@174@01 r))
            (pTaken@186@01 r))
          (pTaken@196@01 r))
        (pTaken@208@01 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@219@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (-
                                (-
                                  (-
                                    (-
                                      (ite
                                        (and
                                          (< (inv@75@01 r) 8)
                                          (<= 0 (inv@75@01 r)))
                                        $Perm.Write
                                        $Perm.No)
                                      (pTaken@90@01 r))
                                    (pTaken@102@01 r))
                                  (pTaken@112@01 r))
                                (pTaken@116@01 r))
                              (pTaken@120@01 r))
                            (pTaken@124@01 r))
                          (pTaken@128@01 r))
                        (pTaken@132@01 r))
                      (pTaken@136@01 r))
                    (pTaken@140@01 r))
                  (pTaken@153@01 r))
                (pTaken@163@01 r))
              (pTaken@175@01 r))
            (pTaken@185@01 r))
          (pTaken@197@01 r))
        (pTaken@207@01 r))
      (- $Perm.Write (pTaken@218@01 r)))
    $Perm.No))
(define-fun pTaken@220@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@218@01 r)) (pTaken@219@01 r)))
    $Perm.No))
(define-fun pTaken@221@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
        $Perm.Write
        $Perm.No)
      (-
        (- (- $Perm.Write (pTaken@218@01 r)) (pTaken@219@01 r))
        (pTaken@220@01 r)))
    $Perm.No))
(define-fun pTaken@222@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (- (- $Perm.Write (pTaken@218@01 r)) (pTaken@219@01 r))
          (pTaken@220@01 r))
        (pTaken@221@01 r)))
    $Perm.No))
(define-fun pTaken@223@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (- (- $Perm.Write (pTaken@218@01 r)) (pTaken@219@01 r))
            (pTaken@220@01 r))
          (pTaken@221@01 r))
        (pTaken@222@01 r)))
    $Perm.No))
(define-fun pTaken@224@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (- (- $Perm.Write (pTaken@218@01 r)) (pTaken@219@01 r))
              (pTaken@220@01 r))
            (pTaken@221@01 r))
          (pTaken@222@01 r))
        (pTaken@223@01 r)))
    $Perm.No))
(define-fun pTaken@225@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (- (- $Perm.Write (pTaken@218@01 r)) (pTaken@219@01 r))
                (pTaken@220@01 r))
              (pTaken@221@01 r))
            (pTaken@222@01 r))
          (pTaken@223@01 r))
        (pTaken@224@01 r)))
    $Perm.No))
(define-fun pTaken@226@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (- (- $Perm.Write (pTaken@218@01 r)) (pTaken@219@01 r))
                  (pTaken@220@01 r))
                (pTaken@221@01 r))
              (pTaken@222@01 r))
            (pTaken@223@01 r))
          (pTaken@224@01 r))
        (pTaken@225@01 r)))
    $Perm.No))
(define-fun pTaken@227@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (- (- $Perm.Write (pTaken@218@01 r)) (pTaken@219@01 r))
                    (pTaken@220@01 r))
                  (pTaken@221@01 r))
                (pTaken@222@01 r))
              (pTaken@223@01 r))
            (pTaken@224@01 r))
          (pTaken@225@01 r))
        (pTaken@226@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (ite
                            (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
                            $Perm.Write
                            $Perm.No)
                          (pTaken@111@01 r))
                        (pTaken@119@01 r))
                      (pTaken@127@01 r))
                    (pTaken@135@01 r))
                  (pTaken@152@01 r))
                (pTaken@164@01 r))
              (pTaken@174@01 r))
            (pTaken@186@01 r))
          (pTaken@196@01 r))
        (pTaken@208@01 r))
      (pTaken@218@01 r))
    $Perm.No)
  
  :qid |quant-u-187|))))
(check-sat)
; unknown
(pop) ; 5
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
    (= (- $Perm.Write (pTaken@218@01 r)) $Perm.No))
  
  :qid |quant-u-188|))))
(check-sat)
; unknown
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (-
                                (-
                                  (-
                                    (-
                                      (ite
                                        (and
                                          (< (inv@75@01 r) 8)
                                          (<= 0 (inv@75@01 r)))
                                        $Perm.Write
                                        $Perm.No)
                                      (pTaken@90@01 r))
                                    (pTaken@102@01 r))
                                  (pTaken@112@01 r))
                                (pTaken@116@01 r))
                              (pTaken@120@01 r))
                            (pTaken@124@01 r))
                          (pTaken@128@01 r))
                        (pTaken@132@01 r))
                      (pTaken@136@01 r))
                    (pTaken@140@01 r))
                  (pTaken@153@01 r))
                (pTaken@163@01 r))
              (pTaken@175@01 r))
            (pTaken@185@01 r))
          (pTaken@197@01 r))
        (pTaken@207@01 r))
      (pTaken@219@01 r))
    $Perm.No)
  
  :qid |quant-u-189|))))
(check-sat)
; unsat
(pop) ; 5
; 0.13s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
    (= (- (- $Perm.Write (pTaken@218@01 r)) (pTaken@219@01 r)) $Perm.No))
  
  :qid |quant-u-190|))))
(check-sat)
; unsat
(pop) ; 5
; 0.02s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@228@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@228@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@151@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@228@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@150@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@228@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@149@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@228@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@148@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@228@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@147@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@228@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@146@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@228@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@145@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@228@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@144@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (ite
                          (and
                            (<
                              (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
                              8)
                            (<=
                              0
                              (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))))
                          $Perm.Write
                          $Perm.No)
                        (pTaken@111@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
                      (pTaken@119@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
                    (pTaken@127@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
                  (pTaken@135@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
                (pTaken@152@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
              (pTaken@164@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
            (pTaken@174@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
          (pTaken@186@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
        (pTaken@196@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
      (pTaken@208@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@228@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@105@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (-
                                (-
                                  (-
                                    (ite
                                      (and
                                        (<
                                          (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
                                          8)
                                        (<=
                                          0
                                          (inv@75@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                            $Snap.unit
                                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))))
                                      $Perm.Write
                                      $Perm.No)
                                    (pTaken@90@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                      $Snap.unit
                                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
                                  (pTaken@102@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                    $Snap.unit
                                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
                                (pTaken@112@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
                              (pTaken@116@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                $Snap.unit
                                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
                            (pTaken@120@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                              $Snap.unit
                              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
                          (pTaken@124@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
                        (pTaken@128@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
                      (pTaken@132@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
                    (pTaken@136@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
                  (pTaken@140@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
                (pTaken@153@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
              (pTaken@163@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
            (pTaken@175@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
          (pTaken@185@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
        (pTaken@197@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
      (pTaken@207@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@228@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@73@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 7)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 7)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))
(pop) ; 5
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))))
(check-sat)
; unknown
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@229@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
    ($Perm.min
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (ite
                              (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
                              $Perm.Write
                              $Perm.No)
                            (pTaken@111@01 r))
                          (pTaken@119@01 r))
                        (pTaken@127@01 r))
                      (pTaken@135@01 r))
                    (pTaken@152@01 r))
                  (pTaken@164@01 r))
                (pTaken@174@01 r))
              (pTaken@186@01 r))
            (pTaken@196@01 r))
          (pTaken@208@01 r))
        (pTaken@218@01 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@230@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@229@01 r)))
    $Perm.No))
(define-fun pTaken@231@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@229@01 r)) (pTaken@230@01 r)))
    $Perm.No))
(define-fun pTaken@232@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
        $Perm.Write
        $Perm.No)
      (-
        (- (- $Perm.Write (pTaken@229@01 r)) (pTaken@230@01 r))
        (pTaken@231@01 r)))
    $Perm.No))
(define-fun pTaken@233@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (- (- $Perm.Write (pTaken@229@01 r)) (pTaken@230@01 r))
          (pTaken@231@01 r))
        (pTaken@232@01 r)))
    $Perm.No))
(define-fun pTaken@234@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (- (- $Perm.Write (pTaken@229@01 r)) (pTaken@230@01 r))
            (pTaken@231@01 r))
          (pTaken@232@01 r))
        (pTaken@233@01 r)))
    $Perm.No))
(define-fun pTaken@235@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (- (- $Perm.Write (pTaken@229@01 r)) (pTaken@230@01 r))
              (pTaken@231@01 r))
            (pTaken@232@01 r))
          (pTaken@233@01 r))
        (pTaken@234@01 r)))
    $Perm.No))
(define-fun pTaken@236@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (- (- $Perm.Write (pTaken@229@01 r)) (pTaken@230@01 r))
                (pTaken@231@01 r))
              (pTaken@232@01 r))
            (pTaken@233@01 r))
          (pTaken@234@01 r))
        (pTaken@235@01 r)))
    $Perm.No))
(define-fun pTaken@237@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (- (- $Perm.Write (pTaken@229@01 r)) (pTaken@230@01 r))
                  (pTaken@231@01 r))
                (pTaken@232@01 r))
              (pTaken@233@01 r))
            (pTaken@234@01 r))
          (pTaken@235@01 r))
        (pTaken@236@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (ite
                              (and (< (inv@107@01 r) 8) (<= 0 (inv@107@01 r)))
                              $Perm.Write
                              $Perm.No)
                            (pTaken@111@01 r))
                          (pTaken@119@01 r))
                        (pTaken@127@01 r))
                      (pTaken@135@01 r))
                    (pTaken@152@01 r))
                  (pTaken@164@01 r))
                (pTaken@174@01 r))
              (pTaken@186@01 r))
            (pTaken@196@01 r))
          (pTaken@208@01 r))
        (pTaken@218@01 r))
      (pTaken@229@01 r))
    $Perm.No)
  
  :qid |quant-u-192|))))
(check-sat)
; unsat
(pop) ; 5
; 0.14s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
    (= (- $Perm.Write (pTaken@229@01 r)) $Perm.No))
  
  :qid |quant-u-193|))))
(check-sat)
; unsat
(pop) ; 5
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@238@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values (instantiated)
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@238@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@144@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@238@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@145@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@238@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@146@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@238@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@147@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@238@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@148@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@238@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@149@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@238@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@150@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))))))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@238@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@151@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))))))
(assert (=>
  (<
    $Perm.No
    (-
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (ite
                            (and
                              (<
                                (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
                                8)
                              (<=
                                0
                                (inv@107@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                                  $Snap.unit
                                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))))
                            $Perm.Write
                            $Perm.No)
                          (pTaken@111@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                            $Snap.unit
                            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))))
                        (pTaken@119@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                          $Snap.unit
                          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))))
                      (pTaken@127@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                        $Snap.unit
                        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))))
                    (pTaken@135@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                      $Snap.unit
                      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))))
                  (pTaken@152@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                    $Snap.unit
                    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))))
                (pTaken@164@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                  $Snap.unit
                  ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))))
              (pTaken@174@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
                $Snap.unit
                ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))))
            (pTaken@186@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))))
          (pTaken@196@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))))
        (pTaken@208@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))))
      (pTaken@218@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))))
  (=
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@238@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
    ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@105@01)) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))))))
(declare-const $t@239@01 $Snap)
(assert (= $t@239@01 ($Snap.combine ($Snap.first $t@239@01) ($Snap.second $t@239@01))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 0)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const sm@240@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@240@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
  ($SortWrappers.$SnapToInt ($Snap.first $t@239@01))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
  (not
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))
      $Ref.null))))
(assert (=
  ($Snap.second $t@239@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@239@01))
    ($Snap.second ($Snap.second $t@239@01)))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 1)
; [eval] (soffset(b_V0): Int)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const sm@241@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@241@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@239@01)))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
  (not
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@239@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@239@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@239@01))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 2)
; [eval] (soffset(b_V0): Int)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const sm@242@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@242@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@239@01))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
  (not
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@239@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@239@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01)))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 3)
; [eval] (soffset(b_V0): Int)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const sm@243@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@243@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@239@01)))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
  (not
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01))))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 4)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 4)
; [eval] (soffset(b_V0): Int)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const sm@244@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@244@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
  (not
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01)))))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 5)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 5)
; [eval] (soffset(b_V0): Int)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const sm@245@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@245@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01)))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
  (not
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01))))))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 6)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 6)
; [eval] (soffset(b_V0): Int)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const sm@246@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@246@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01))))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
  (not
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))
      $Ref.null))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 7)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 7)
; [eval] (soffset(b_V0): Int)
(push) ; 5
(pop) ; 5
; Joined path conditions
(declare-const sm@247@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@247@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@239@01))))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
  (not
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))
      $Ref.null))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale i_V2 == 0
(declare-const $t@248@01 $Snap)
(assert (= $t@248@01 $Snap.unit))
; [eval] i_V2 == 0
(assert (= i_V2@43@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; i_V2 := 0
(declare-const old_W7_T0@249@01 Int)
(declare-const csum_V1@250@01 Int)
(declare-const i_V2@251@01 Int)
(set-option :timeout 0)
(push) ; 5
; Loop head block: Check well-definedness of invariant
(declare-const $t@252@01 $Snap)
(assert (= $t@252@01 ($Snap.combine ($Snap.first $t@252@01) ($Snap.second $t@252@01))))
(declare-const j_V3@253@01 Int)
(push) ; 6
; [eval] 0 <= j_V3 && j_V3 < 8
; [eval] 0 <= j_V3
(push) ; 7
; [then-branch: 41 | 0 <= j_V3@253@01 | live]
; [else-branch: 41 | !(0 <= j_V3@253@01) | live]
(push) ; 8
; [then-branch: 41 | 0 <= j_V3@253@01]
(assert (<= 0 j_V3@253@01))
; [eval] j_V3 < 8
(pop) ; 8
(push) ; 8
; [else-branch: 41 | !(0 <= j_V3@253@01)]
(assert (not (<= 0 j_V3@253@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j_V3@253@01)) (<= 0 j_V3@253@01)))
(assert (and (< j_V3@253@01 8) (<= 0 j_V3@253@01)))
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1), j_V3): Ref)
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
(declare-fun inv@254@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j_V3@253@01 Int)) (!
  (=>
    (and (< j_V3@253@01 8) (<= 0 j_V3@253@01))
    (or (not (<= 0 j_V3@253@01)) (<= 0 j_V3@253@01)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V3@253@01))
  :qid |Intbyte$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((j_V3@253@01 Int)) (!
  (=>
    (and (< j_V3@253@01 8) (<= 0 j_V3@253@01))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V3@253@01))
  :qid |quant-u-195|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@254@01 r) 8) (<= 0 (inv@254@01 r)))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
  :pattern ((inv@254@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
(assert (forall ((j_V3@253@01 Int)) (!
  (=>
    (and (< j_V3@253@01 8) (<= 0 j_V3@253@01))
    (=
      (inv@254@01 (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V3@253@01))
      j_V3@253@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V3@253@01))
  :qid |quant-u-195|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@254@01 r) 8) (<= 0 (inv@254@01 r)))
    (=
      (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) (inv@254@01 r))
      r))
  :pattern ((inv@254@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((j_V3@253@01 Int)) (!
  (=>
    (and (< j_V3@253@01 8) (<= 0 j_V3@253@01))
    (not
      (=
        (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V3@253@01)
        $Ref.null)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V3@253@01))
  :qid |Intbyte$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second $t@252@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@252@01))
    ($Snap.second ($Snap.second $t@252@01)))))
(declare-const j_V4@255@01 Int)
(push) ; 6
; [eval] 0 <= j_V4 && j_V4 < 8
; [eval] 0 <= j_V4
(push) ; 7
; [then-branch: 42 | 0 <= j_V4@255@01 | live]
; [else-branch: 42 | !(0 <= j_V4@255@01) | live]
(push) ; 8
; [then-branch: 42 | 0 <= j_V4@255@01]
(assert (<= 0 j_V4@255@01))
; [eval] j_V4 < 8
(pop) ; 8
(push) ; 8
; [else-branch: 42 | !(0 <= j_V4@255@01)]
(assert (not (<= 0 j_V4@255@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j_V4@255@01)) (<= 0 j_V4@255@01)))
(assert (and (< j_V4@255@01 8) (<= 0 j_V4@255@01)))
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1), j_V4): Ref)
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
(declare-fun inv@256@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j_V4@255@01 Int)) (!
  (=>
    (and (< j_V4@255@01 8) (<= 0 j_V4@255@01))
    (or (not (<= 0 j_V4@255@01)) (<= 0 j_V4@255@01)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V4@255@01))
  :qid |Intbyte$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((j_V4@255@01 Int)) (!
  (=>
    (and (< j_V4@255@01 8) (<= 0 j_V4@255@01))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V4@255@01))
  :qid |quant-u-197|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@256@01 r) 8) (<= 0 (inv@256@01 r)))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
  :pattern ((inv@256@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
(assert (forall ((j_V4@255@01 Int)) (!
  (=>
    (and (< j_V4@255@01 8) (<= 0 j_V4@255@01))
    (=
      (inv@256@01 (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V4@255@01))
      j_V4@255@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V4@255@01))
  :qid |quant-u-197|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@256@01 r) 8) (<= 0 (inv@256@01 r)))
    (=
      (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) (inv@256@01 r))
      r))
  :pattern ((inv@256@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((j_V4@255@01 Int)) (!
  (=>
    (and (< j_V4@255@01 8) (<= 0 j_V4@255@01))
    (not
      (=
        (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V4@255@01)
        $Ref.null)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V4@255@01))
  :qid |Intbyte$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second $t@252@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@252@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@252@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@252@01))) $Snap.unit))
; [eval] i_V2 % 2 == 0
; [eval] i_V2 % 2
(assert (= (mod i_V2@251@01 2) 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@252@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@252@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@252@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@252@01))))
  $Snap.unit))
; [eval] 0 <= i_V2
(assert (<= 0 i_V2@251@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@252@01))))
  $Snap.unit))
; [eval] i_V2 <= 8
(assert (<= i_V2@251@01 8))
; Loop head block: Check well-definedness of edge conditions
(push) ; 6
; [eval] i_V2 < 8
(pop) ; 6
(push) ; 6
; [eval] !(i_V2 < 8)
; [eval] i_V2 < 8
(pop) ; 6
(pop) ; 5
(push) ; 5
; Loop head block: Establish invariant
(declare-const j_V3@257@01 Int)
(push) ; 6
; [eval] 0 <= j_V3 && j_V3 < 8
; [eval] 0 <= j_V3
(push) ; 7
; [then-branch: 43 | 0 <= j_V3@257@01 | live]
; [else-branch: 43 | !(0 <= j_V3@257@01) | live]
(push) ; 8
; [then-branch: 43 | 0 <= j_V3@257@01]
(assert (<= 0 j_V3@257@01))
; [eval] j_V3 < 8
(pop) ; 8
(push) ; 8
; [else-branch: 43 | !(0 <= j_V3@257@01)]
(assert (not (<= 0 j_V3@257@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j_V3@257@01)) (<= 0 j_V3@257@01)))
(assert (and (< j_V3@257@01 8) (<= 0 j_V3@257@01)))
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1), j_V3): Ref)
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
(declare-fun inv@258@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j_V3@257@01 Int)) (!
  (=>
    (and (< j_V3@257@01 8) (<= 0 j_V3@257@01))
    (or (not (<= 0 j_V3@257@01)) (<= 0 j_V3@257@01)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V3@257@01))
  :qid |Intbyte$$$$_E_$$$-aux|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((j_V31@257@01 Int) (j_V32@257@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (and (< j_V31@257@01 8) (<= 0 j_V31@257@01))
          (and (< j_V32@257@01 8) (<= 0 j_V32@257@01)))
        (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
      (and
        (and (< j_V31@257@01 8) (<= 0 j_V31@257@01))
        (and (< j_V32@257@01 8) (<= 0 j_V32@257@01))
        (=
          (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V31@257@01)
          (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V32@257@01))))
    (= j_V31@257@01 j_V32@257@01))
  
  :qid |Intbyte$$$$_E_$$$-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j_V3@257@01 Int)) (!
  (=>
    (and (< j_V3@257@01 8) (<= 0 j_V3@257@01))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V3@257@01))
  :qid |Intbyte$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
  :pattern ((inv@258@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
(assert (forall ((j_V3@257@01 Int)) (!
  (=>
    (and (< j_V3@257@01 8) (<= 0 j_V3@257@01))
    (=
      (inv@258@01 (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V3@257@01))
      j_V3@257@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V3@257@01))
  :qid |Intbyte$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    (=
      (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) (inv@258@01 r))
      r))
  :pattern ((inv@258@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@259@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@260@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@259@01 r)))
    $Perm.No))
(define-fun pTaken@261@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
        $Perm.Write
        $Perm.No)
      (- (- $Perm.Write (pTaken@259@01 r)) (pTaken@260@01 r)))
    $Perm.No))
(define-fun pTaken@262@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
        $Perm.Write
        $Perm.No)
      (-
        (- (- $Perm.Write (pTaken@259@01 r)) (pTaken@260@01 r))
        (pTaken@261@01 r)))
    $Perm.No))
(define-fun pTaken@263@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (- (- $Perm.Write (pTaken@259@01 r)) (pTaken@260@01 r))
          (pTaken@261@01 r))
        (pTaken@262@01 r)))
    $Perm.No))
(define-fun pTaken@264@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (- (- $Perm.Write (pTaken@259@01 r)) (pTaken@260@01 r))
            (pTaken@261@01 r))
          (pTaken@262@01 r))
        (pTaken@263@01 r)))
    $Perm.No))
(define-fun pTaken@265@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (- (- $Perm.Write (pTaken@259@01 r)) (pTaken@260@01 r))
              (pTaken@261@01 r))
            (pTaken@262@01 r))
          (pTaken@263@01 r))
        (pTaken@264@01 r)))
    $Perm.No))
(define-fun pTaken@266@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (- (- $Perm.Write (pTaken@259@01 r)) (pTaken@260@01 r))
                (pTaken@261@01 r))
              (pTaken@262@01 r))
            (pTaken@263@01 r))
          (pTaken@264@01 r))
        (pTaken@265@01 r)))
    $Perm.No))
(define-fun pTaken@267@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (- (- $Perm.Write (pTaken@259@01 r)) (pTaken@260@01 r))
                  (pTaken@261@01 r))
                (pTaken@262@01 r))
              (pTaken@263@01 r))
            (pTaken@264@01 r))
          (pTaken@265@01 r))
        (pTaken@266@01 r)))
    $Perm.No))
(define-fun pTaken@268@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (- (- $Perm.Write (pTaken@259@01 r)) (pTaken@260@01 r))
                    (pTaken@261@01 r))
                  (pTaken@262@01 r))
                (pTaken@263@01 r))
              (pTaken@264@01 r))
            (pTaken@265@01 r))
          (pTaken@266@01 r))
        (pTaken@267@01 r)))
    $Perm.No))
(define-fun pTaken@269@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (- (- $Perm.Write (pTaken@259@01 r)) (pTaken@260@01 r))
                      (pTaken@261@01 r))
                    (pTaken@262@01 r))
                  (pTaken@263@01 r))
                (pTaken@264@01 r))
              (pTaken@265@01 r))
            (pTaken@266@01 r))
          (pTaken@267@01 r))
        (pTaken@268@01 r)))
    $Perm.No))
(define-fun pTaken@270@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (- (- $Perm.Write (pTaken@259@01 r)) (pTaken@260@01 r))
                        (pTaken@261@01 r))
                      (pTaken@262@01 r))
                    (pTaken@263@01 r))
                  (pTaken@264@01 r))
                (pTaken@265@01 r))
              (pTaken@266@01 r))
            (pTaken@267@01 r))
          (pTaken@268@01 r))
        (pTaken@269@01 r)))
    $Perm.No))
(define-fun pTaken@271@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (- (- $Perm.Write (pTaken@259@01 r)) (pTaken@260@01 r))
                          (pTaken@261@01 r))
                        (pTaken@262@01 r))
                      (pTaken@263@01 r))
                    (pTaken@264@01 r))
                  (pTaken@265@01 r))
                (pTaken@266@01 r))
              (pTaken@267@01 r))
            (pTaken@268@01 r))
          (pTaken@269@01 r))
        (pTaken@270@01 r)))
    $Perm.No))
(define-fun pTaken@272@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (- $Perm.Write (pTaken@259@01 r))
                              (pTaken@260@01 r))
                            (pTaken@261@01 r))
                          (pTaken@262@01 r))
                        (pTaken@263@01 r))
                      (pTaken@264@01 r))
                    (pTaken@265@01 r))
                  (pTaken@266@01 r))
                (pTaken@267@01 r))
              (pTaken@268@01 r))
            (pTaken@269@01 r))
          (pTaken@270@01 r))
        (pTaken@271@01 r)))
    $Perm.No))
(define-fun pTaken@273@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (-
                                (- $Perm.Write (pTaken@259@01 r))
                                (pTaken@260@01 r))
                              (pTaken@261@01 r))
                            (pTaken@262@01 r))
                          (pTaken@263@01 r))
                        (pTaken@264@01 r))
                      (pTaken@265@01 r))
                    (pTaken@266@01 r))
                  (pTaken@267@01 r))
                (pTaken@268@01 r))
              (pTaken@269@01 r))
            (pTaken@270@01 r))
          (pTaken@271@01 r))
        (pTaken@272@01 r)))
    $Perm.No))
(define-fun pTaken@274@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    ($Perm.min
      (ite
        (=
          r
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
        $Perm.Write
        $Perm.No)
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (-
                                (-
                                  (- $Perm.Write (pTaken@259@01 r))
                                  (pTaken@260@01 r))
                                (pTaken@261@01 r))
                              (pTaken@262@01 r))
                            (pTaken@263@01 r))
                          (pTaken@264@01 r))
                        (pTaken@265@01 r))
                      (pTaken@266@01 r))
                    (pTaken@267@01 r))
                  (pTaken@268@01 r))
                (pTaken@269@01 r))
              (pTaken@270@01 r))
            (pTaken@271@01 r))
          (pTaken@272@01 r))
        (pTaken@273@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
      $Perm.Write
      $Perm.No)
    (pTaken@259@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    (= (- $Perm.Write (pTaken@259@01 r)) $Perm.No))
  
  :qid |quant-u-201|))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
      $Perm.Write
      $Perm.No)
    (pTaken@260@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    (= (- (- $Perm.Write (pTaken@259@01 r)) (pTaken@260@01 r)) $Perm.No))
  
  :qid |quant-u-203|))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
      $Perm.Write
      $Perm.No)
    (pTaken@261@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    (=
      (-
        (- (- $Perm.Write (pTaken@259@01 r)) (pTaken@260@01 r))
        (pTaken@261@01 r))
      $Perm.No))
  
  :qid |quant-u-205|))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
      $Perm.Write
      $Perm.No)
    (pTaken@262@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    (=
      (-
        (-
          (- (- $Perm.Write (pTaken@259@01 r)) (pTaken@260@01 r))
          (pTaken@261@01 r))
        (pTaken@262@01 r))
      $Perm.No))
  
  :qid |quant-u-207|))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
      $Perm.Write
      $Perm.No)
    (pTaken@263@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    (=
      (-
        (-
          (-
            (- (- $Perm.Write (pTaken@259@01 r)) (pTaken@260@01 r))
            (pTaken@261@01 r))
          (pTaken@262@01 r))
        (pTaken@263@01 r))
      $Perm.No))
  
  :qid |quant-u-209|))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
      $Perm.Write
      $Perm.No)
    (pTaken@264@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    (=
      (-
        (-
          (-
            (-
              (- (- $Perm.Write (pTaken@259@01 r)) (pTaken@260@01 r))
              (pTaken@261@01 r))
            (pTaken@262@01 r))
          (pTaken@263@01 r))
        (pTaken@264@01 r))
      $Perm.No))
  
  :qid |quant-u-211|))))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
      $Perm.Write
      $Perm.No)
    (pTaken@265@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    (=
      (-
        (-
          (-
            (-
              (-
                (- (- $Perm.Write (pTaken@259@01 r)) (pTaken@260@01 r))
                (pTaken@261@01 r))
              (pTaken@262@01 r))
            (pTaken@263@01 r))
          (pTaken@264@01 r))
        (pTaken@265@01 r))
      $Perm.No))
  
  :qid |quant-u-213|))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
      $Perm.Write
      $Perm.No)
    (pTaken@266@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    (=
      (-
        (-
          (-
            (-
              (-
                (-
                  (- (- $Perm.Write (pTaken@259@01 r)) (pTaken@260@01 r))
                  (pTaken@261@01 r))
                (pTaken@262@01 r))
              (pTaken@263@01 r))
            (pTaken@264@01 r))
          (pTaken@265@01 r))
        (pTaken@266@01 r))
      $Perm.No))
  
  :qid |quant-u-215|))))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
      $Perm.Write
      $Perm.No)
    (pTaken@267@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    (=
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (- (- $Perm.Write (pTaken@259@01 r)) (pTaken@260@01 r))
                    (pTaken@261@01 r))
                  (pTaken@262@01 r))
                (pTaken@263@01 r))
              (pTaken@264@01 r))
            (pTaken@265@01 r))
          (pTaken@266@01 r))
        (pTaken@267@01 r))
      $Perm.No))
  
  :qid |quant-u-217|))))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
      $Perm.Write
      $Perm.No)
    (pTaken@268@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    (=
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (- (- $Perm.Write (pTaken@259@01 r)) (pTaken@260@01 r))
                      (pTaken@261@01 r))
                    (pTaken@262@01 r))
                  (pTaken@263@01 r))
                (pTaken@264@01 r))
              (pTaken@265@01 r))
            (pTaken@266@01 r))
          (pTaken@267@01 r))
        (pTaken@268@01 r))
      $Perm.No))
  
  :qid |quant-u-219|))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
      $Perm.Write
      $Perm.No)
    (pTaken@269@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    (=
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (- (- $Perm.Write (pTaken@259@01 r)) (pTaken@260@01 r))
                        (pTaken@261@01 r))
                      (pTaken@262@01 r))
                    (pTaken@263@01 r))
                  (pTaken@264@01 r))
                (pTaken@265@01 r))
              (pTaken@266@01 r))
            (pTaken@267@01 r))
          (pTaken@268@01 r))
        (pTaken@269@01 r))
      $Perm.No))
  
  :qid |quant-u-221|))))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
      $Perm.Write
      $Perm.No)
    (pTaken@270@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    (=
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (- (- $Perm.Write (pTaken@259@01 r)) (pTaken@260@01 r))
                          (pTaken@261@01 r))
                        (pTaken@262@01 r))
                      (pTaken@263@01 r))
                    (pTaken@264@01 r))
                  (pTaken@265@01 r))
                (pTaken@266@01 r))
              (pTaken@267@01 r))
            (pTaken@268@01 r))
          (pTaken@269@01 r))
        (pTaken@270@01 r))
      $Perm.No))
  
  :qid |quant-u-223|))))
(check-sat)
; unknown
(pop) ; 6
; 0.04s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
      $Perm.Write
      $Perm.No)
    (pTaken@271@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    (=
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (- $Perm.Write (pTaken@259@01 r))
                              (pTaken@260@01 r))
                            (pTaken@261@01 r))
                          (pTaken@262@01 r))
                        (pTaken@263@01 r))
                      (pTaken@264@01 r))
                    (pTaken@265@01 r))
                  (pTaken@266@01 r))
                (pTaken@267@01 r))
              (pTaken@268@01 r))
            (pTaken@269@01 r))
          (pTaken@270@01 r))
        (pTaken@271@01 r))
      $Perm.No))
  
  :qid |quant-u-225|))))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
      $Perm.Write
      $Perm.No)
    (pTaken@272@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    (=
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (-
                                (- $Perm.Write (pTaken@259@01 r))
                                (pTaken@260@01 r))
                              (pTaken@261@01 r))
                            (pTaken@262@01 r))
                          (pTaken@263@01 r))
                        (pTaken@264@01 r))
                      (pTaken@265@01 r))
                    (pTaken@266@01 r))
                  (pTaken@267@01 r))
                (pTaken@268@01 r))
              (pTaken@269@01 r))
            (pTaken@270@01 r))
          (pTaken@271@01 r))
        (pTaken@272@01 r))
      $Perm.No))
  
  :qid |quant-u-227|))))
(check-sat)
; unknown
(pop) ; 6
; 0.05s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1))
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
      $Perm.Write
      $Perm.No)
    (pTaken@273@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    (=
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (-
                                (-
                                  (- $Perm.Write (pTaken@259@01 r))
                                  (pTaken@260@01 r))
                                (pTaken@261@01 r))
                              (pTaken@262@01 r))
                            (pTaken@263@01 r))
                          (pTaken@264@01 r))
                        (pTaken@265@01 r))
                      (pTaken@266@01 r))
                    (pTaken@267@01 r))
                  (pTaken@268@01 r))
                (pTaken@269@01 r))
              (pTaken@270@01 r))
            (pTaken@271@01 r))
          (pTaken@272@01 r))
        (pTaken@273@01 r))
      $Perm.No))
  
  :qid |quant-u-229|))))
(check-sat)
; unknown
(pop) ; 6
; 0.05s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0))
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
      $Perm.Write
      $Perm.No)
    (pTaken@274@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@258@01 r) 8) (<= 0 (inv@258@01 r)))
    (=
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (-
                                (-
                                  (-
                                    (- $Perm.Write (pTaken@259@01 r))
                                    (pTaken@260@01 r))
                                  (pTaken@261@01 r))
                                (pTaken@262@01 r))
                              (pTaken@263@01 r))
                            (pTaken@264@01 r))
                          (pTaken@265@01 r))
                        (pTaken@266@01 r))
                      (pTaken@267@01 r))
                    (pTaken@268@01 r))
                  (pTaken@269@01 r))
                (pTaken@270@01 r))
              (pTaken@271@01 r))
            (pTaken@272@01 r))
          (pTaken@273@01 r))
        (pTaken@274@01 r))
      $Perm.No))
  
  :qid |quant-u-231|))))
(check-sat)
; unsat
(pop) ; 6
; 0.07s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@275@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@247@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@247@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef121|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@246@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@246@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@245@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@245@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef123|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@244@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@244@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef124|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@243@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@243@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef125|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@242@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@242@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@241@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@241@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef127|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@240@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@240@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef128|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@151@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@151@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@150@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@150@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef130|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@149@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@149@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef131|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@148@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@148@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef132|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@147@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@147@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef133|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@146@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@146@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef134|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@145@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@145@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef135|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@144@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@275@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@144@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef136|)))
(declare-const j_V4@276@01 Int)
(set-option :timeout 0)
(push) ; 6
; [eval] 0 <= j_V4 && j_V4 < 8
; [eval] 0 <= j_V4
(push) ; 7
; [then-branch: 44 | 0 <= j_V4@276@01 | live]
; [else-branch: 44 | !(0 <= j_V4@276@01) | live]
(push) ; 8
; [then-branch: 44 | 0 <= j_V4@276@01]
(assert (<= 0 j_V4@276@01))
; [eval] j_V4 < 8
(pop) ; 8
(push) ; 8
; [else-branch: 44 | !(0 <= j_V4@276@01)]
(assert (not (<= 0 j_V4@276@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j_V4@276@01)) (<= 0 j_V4@276@01)))
(assert (and (< j_V4@276@01 8) (<= 0 j_V4@276@01)))
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1), j_V4): Ref)
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1)
(push) ; 7
(pop) ; 7
; Joined path conditions
(pop) ; 6
(declare-fun inv@277@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j_V4@276@01 Int)) (!
  (=>
    (and (< j_V4@276@01 8) (<= 0 j_V4@276@01))
    (or (not (<= 0 j_V4@276@01)) (<= 0 j_V4@276@01)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V4@276@01))
  :qid |Intbyte$$$$_E_$$$-aux|)))
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((j_V41@276@01 Int) (j_V42@276@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (and (< j_V41@276@01 8) (<= 0 j_V41@276@01))
          (and (< j_V42@276@01 8) (<= 0 j_V42@276@01)))
        (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
      (and
        (and (< j_V41@276@01 8) (<= 0 j_V41@276@01))
        (and (< j_V42@276@01 8) (<= 0 j_V42@276@01))
        (=
          (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V41@276@01)
          (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V42@276@01))))
    (= j_V41@276@01 j_V42@276@01))
  
  :qid |Intbyte$$$$_E_$$$-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j_V4@276@01 Int)) (!
  (=>
    (and (< j_V4@276@01 8) (<= 0 j_V4@276@01))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V4@276@01))
  :qid |Intbyte$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
  :pattern ((inv@277@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
(assert (forall ((j_V4@276@01 Int)) (!
  (=>
    (and (< j_V4@276@01 8) (<= 0 j_V4@276@01))
    (=
      (inv@277@01 (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V4@276@01))
      j_V4@276@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V4@276@01))
  :qid |Intbyte$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    (=
      (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) (inv@277@01 r))
      r))
  :pattern ((inv@277@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@278@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    ($Perm.min
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
          $Perm.Write
          $Perm.No)
        (pTaken@274@01 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@279@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    ($Perm.min
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
          $Perm.Write
          $Perm.No)
        (pTaken@273@01 r))
      (- $Perm.Write (pTaken@278@01 r)))
    $Perm.No))
(define-fun pTaken@280@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    ($Perm.min
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
          $Perm.Write
          $Perm.No)
        (pTaken@272@01 r))
      (- (- $Perm.Write (pTaken@278@01 r)) (pTaken@279@01 r)))
    $Perm.No))
(define-fun pTaken@281@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    ($Perm.min
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
          $Perm.Write
          $Perm.No)
        (pTaken@271@01 r))
      (-
        (- (- $Perm.Write (pTaken@278@01 r)) (pTaken@279@01 r))
        (pTaken@280@01 r)))
    $Perm.No))
(define-fun pTaken@282@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    ($Perm.min
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
          $Perm.Write
          $Perm.No)
        (pTaken@270@01 r))
      (-
        (-
          (- (- $Perm.Write (pTaken@278@01 r)) (pTaken@279@01 r))
          (pTaken@280@01 r))
        (pTaken@281@01 r)))
    $Perm.No))
(define-fun pTaken@283@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    ($Perm.min
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
          $Perm.Write
          $Perm.No)
        (pTaken@269@01 r))
      (-
        (-
          (-
            (- (- $Perm.Write (pTaken@278@01 r)) (pTaken@279@01 r))
            (pTaken@280@01 r))
          (pTaken@281@01 r))
        (pTaken@282@01 r)))
    $Perm.No))
(define-fun pTaken@284@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    ($Perm.min
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
          $Perm.Write
          $Perm.No)
        (pTaken@268@01 r))
      (-
        (-
          (-
            (-
              (- (- $Perm.Write (pTaken@278@01 r)) (pTaken@279@01 r))
              (pTaken@280@01 r))
            (pTaken@281@01 r))
          (pTaken@282@01 r))
        (pTaken@283@01 r)))
    $Perm.No))
(define-fun pTaken@285@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    ($Perm.min
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
          $Perm.Write
          $Perm.No)
        (pTaken@267@01 r))
      (-
        (-
          (-
            (-
              (-
                (- (- $Perm.Write (pTaken@278@01 r)) (pTaken@279@01 r))
                (pTaken@280@01 r))
              (pTaken@281@01 r))
            (pTaken@282@01 r))
          (pTaken@283@01 r))
        (pTaken@284@01 r)))
    $Perm.No))
(define-fun pTaken@286@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    ($Perm.min
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
          $Perm.Write
          $Perm.No)
        (pTaken@266@01 r))
      (-
        (-
          (-
            (-
              (-
                (-
                  (- (- $Perm.Write (pTaken@278@01 r)) (pTaken@279@01 r))
                  (pTaken@280@01 r))
                (pTaken@281@01 r))
              (pTaken@282@01 r))
            (pTaken@283@01 r))
          (pTaken@284@01 r))
        (pTaken@285@01 r)))
    $Perm.No))
(define-fun pTaken@287@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    ($Perm.min
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
          $Perm.Write
          $Perm.No)
        (pTaken@265@01 r))
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (- (- $Perm.Write (pTaken@278@01 r)) (pTaken@279@01 r))
                    (pTaken@280@01 r))
                  (pTaken@281@01 r))
                (pTaken@282@01 r))
              (pTaken@283@01 r))
            (pTaken@284@01 r))
          (pTaken@285@01 r))
        (pTaken@286@01 r)))
    $Perm.No))
(define-fun pTaken@288@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    ($Perm.min
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
          $Perm.Write
          $Perm.No)
        (pTaken@264@01 r))
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (- (- $Perm.Write (pTaken@278@01 r)) (pTaken@279@01 r))
                      (pTaken@280@01 r))
                    (pTaken@281@01 r))
                  (pTaken@282@01 r))
                (pTaken@283@01 r))
              (pTaken@284@01 r))
            (pTaken@285@01 r))
          (pTaken@286@01 r))
        (pTaken@287@01 r)))
    $Perm.No))
(define-fun pTaken@289@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    ($Perm.min
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
          $Perm.Write
          $Perm.No)
        (pTaken@263@01 r))
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (- (- $Perm.Write (pTaken@278@01 r)) (pTaken@279@01 r))
                        (pTaken@280@01 r))
                      (pTaken@281@01 r))
                    (pTaken@282@01 r))
                  (pTaken@283@01 r))
                (pTaken@284@01 r))
              (pTaken@285@01 r))
            (pTaken@286@01 r))
          (pTaken@287@01 r))
        (pTaken@288@01 r)))
    $Perm.No))
(define-fun pTaken@290@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    ($Perm.min
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
          $Perm.Write
          $Perm.No)
        (pTaken@262@01 r))
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (- (- $Perm.Write (pTaken@278@01 r)) (pTaken@279@01 r))
                          (pTaken@280@01 r))
                        (pTaken@281@01 r))
                      (pTaken@282@01 r))
                    (pTaken@283@01 r))
                  (pTaken@284@01 r))
                (pTaken@285@01 r))
              (pTaken@286@01 r))
            (pTaken@287@01 r))
          (pTaken@288@01 r))
        (pTaken@289@01 r)))
    $Perm.No))
(define-fun pTaken@291@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    ($Perm.min
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
          $Perm.Write
          $Perm.No)
        (pTaken@261@01 r))
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (- $Perm.Write (pTaken@278@01 r))
                              (pTaken@279@01 r))
                            (pTaken@280@01 r))
                          (pTaken@281@01 r))
                        (pTaken@282@01 r))
                      (pTaken@283@01 r))
                    (pTaken@284@01 r))
                  (pTaken@285@01 r))
                (pTaken@286@01 r))
              (pTaken@287@01 r))
            (pTaken@288@01 r))
          (pTaken@289@01 r))
        (pTaken@290@01 r)))
    $Perm.No))
(define-fun pTaken@292@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    ($Perm.min
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
          $Perm.Write
          $Perm.No)
        (pTaken@260@01 r))
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (-
                                (- $Perm.Write (pTaken@278@01 r))
                                (pTaken@279@01 r))
                              (pTaken@280@01 r))
                            (pTaken@281@01 r))
                          (pTaken@282@01 r))
                        (pTaken@283@01 r))
                      (pTaken@284@01 r))
                    (pTaken@285@01 r))
                  (pTaken@286@01 r))
                (pTaken@287@01 r))
              (pTaken@288@01 r))
            (pTaken@289@01 r))
          (pTaken@290@01 r))
        (pTaken@291@01 r)))
    $Perm.No))
(define-fun pTaken@293@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    ($Perm.min
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
          $Perm.Write
          $Perm.No)
        (pTaken@259@01 r))
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (-
                                (-
                                  (- $Perm.Write (pTaken@278@01 r))
                                  (pTaken@279@01 r))
                                (pTaken@280@01 r))
                              (pTaken@281@01 r))
                            (pTaken@282@01 r))
                          (pTaken@283@01 r))
                        (pTaken@284@01 r))
                      (pTaken@285@01 r))
                    (pTaken@286@01 r))
                  (pTaken@287@01 r))
                (pTaken@288@01 r))
              (pTaken@289@01 r))
            (pTaken@290@01 r))
          (pTaken@291@01 r))
        (pTaken@292@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (-
      (ite
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0))
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
        $Perm.Write
        $Perm.No)
      (pTaken@274@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0))))
    (pTaken@278@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    (= (- $Perm.Write (pTaken@278@01 r)) $Perm.No))
  
  :qid |quant-u-235|))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (-
      (ite
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1))
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
        $Perm.Write
        $Perm.No)
      (pTaken@273@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1))))
    (pTaken@279@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    (= (- (- $Perm.Write (pTaken@278@01 r)) (pTaken@279@01 r)) $Perm.No))
  
  :qid |quant-u-237|))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (-
      (ite
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
        $Perm.Write
        $Perm.No)
      (pTaken@272@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))))
    (pTaken@280@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    (=
      (-
        (- (- $Perm.Write (pTaken@278@01 r)) (pTaken@279@01 r))
        (pTaken@280@01 r))
      $Perm.No))
  
  :qid |quant-u-239|))))
(check-sat)
; unknown
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (-
      (ite
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
        $Perm.Write
        $Perm.No)
      (pTaken@271@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))))
    (pTaken@281@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    (=
      (-
        (-
          (- (- $Perm.Write (pTaken@278@01 r)) (pTaken@279@01 r))
          (pTaken@280@01 r))
        (pTaken@281@01 r))
      $Perm.No))
  
  :qid |quant-u-241|))))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (-
      (ite
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
        $Perm.Write
        $Perm.No)
      (pTaken@270@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))))
    (pTaken@282@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    (=
      (-
        (-
          (-
            (- (- $Perm.Write (pTaken@278@01 r)) (pTaken@279@01 r))
            (pTaken@280@01 r))
          (pTaken@281@01 r))
        (pTaken@282@01 r))
      $Perm.No))
  
  :qid |quant-u-243|))))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (-
      (ite
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
        $Perm.Write
        $Perm.No)
      (pTaken@269@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))))
    (pTaken@283@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    (=
      (-
        (-
          (-
            (-
              (- (- $Perm.Write (pTaken@278@01 r)) (pTaken@279@01 r))
              (pTaken@280@01 r))
            (pTaken@281@01 r))
          (pTaken@282@01 r))
        (pTaken@283@01 r))
      $Perm.No))
  
  :qid |quant-u-245|))))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (-
      (ite
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
        $Perm.Write
        $Perm.No)
      (pTaken@268@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))))
    (pTaken@284@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    (=
      (-
        (-
          (-
            (-
              (-
                (- (- $Perm.Write (pTaken@278@01 r)) (pTaken@279@01 r))
                (pTaken@280@01 r))
              (pTaken@281@01 r))
            (pTaken@282@01 r))
          (pTaken@283@01 r))
        (pTaken@284@01 r))
      $Perm.No))
  
  :qid |quant-u-247|))))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (-
      (ite
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
        $Perm.Write
        $Perm.No)
      (pTaken@267@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))))
    (pTaken@285@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    (=
      (-
        (-
          (-
            (-
              (-
                (-
                  (- (- $Perm.Write (pTaken@278@01 r)) (pTaken@279@01 r))
                  (pTaken@280@01 r))
                (pTaken@281@01 r))
              (pTaken@282@01 r))
            (pTaken@283@01 r))
          (pTaken@284@01 r))
        (pTaken@285@01 r))
      $Perm.No))
  
  :qid |quant-u-249|))))
(check-sat)
; unknown
(pop) ; 6
; 0.04s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (-
      (ite
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
        $Perm.Write
        $Perm.No)
      (pTaken@266@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))))
    (pTaken@286@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    (=
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (- (- $Perm.Write (pTaken@278@01 r)) (pTaken@279@01 r))
                    (pTaken@280@01 r))
                  (pTaken@281@01 r))
                (pTaken@282@01 r))
              (pTaken@283@01 r))
            (pTaken@284@01 r))
          (pTaken@285@01 r))
        (pTaken@286@01 r))
      $Perm.No))
  
  :qid |quant-u-251|))))
(check-sat)
; unknown
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (-
      (ite
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
        $Perm.Write
        $Perm.No)
      (pTaken@265@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))
    (pTaken@287@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    (=
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (- (- $Perm.Write (pTaken@278@01 r)) (pTaken@279@01 r))
                      (pTaken@280@01 r))
                    (pTaken@281@01 r))
                  (pTaken@282@01 r))
                (pTaken@283@01 r))
              (pTaken@284@01 r))
            (pTaken@285@01 r))
          (pTaken@286@01 r))
        (pTaken@287@01 r))
      $Perm.No))
  
  :qid |quant-u-253|))))
(check-sat)
; unknown
(pop) ; 6
; 0.04s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (-
      (ite
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
        $Perm.Write
        $Perm.No)
      (pTaken@264@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))
    (pTaken@288@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.04s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    (=
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (- (- $Perm.Write (pTaken@278@01 r)) (pTaken@279@01 r))
                        (pTaken@280@01 r))
                      (pTaken@281@01 r))
                    (pTaken@282@01 r))
                  (pTaken@283@01 r))
                (pTaken@284@01 r))
              (pTaken@285@01 r))
            (pTaken@286@01 r))
          (pTaken@287@01 r))
        (pTaken@288@01 r))
      $Perm.No))
  
  :qid |quant-u-255|))))
(check-sat)
; unknown
(pop) ; 6
; 0.04s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (-
      (ite
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
        $Perm.Write
        $Perm.No)
      (pTaken@263@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))
    (pTaken@289@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    (=
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (- (- $Perm.Write (pTaken@278@01 r)) (pTaken@279@01 r))
                          (pTaken@280@01 r))
                        (pTaken@281@01 r))
                      (pTaken@282@01 r))
                    (pTaken@283@01 r))
                  (pTaken@284@01 r))
                (pTaken@285@01 r))
              (pTaken@286@01 r))
            (pTaken@287@01 r))
          (pTaken@288@01 r))
        (pTaken@289@01 r))
      $Perm.No))
  
  :qid |quant-u-257|))))
(check-sat)
; unknown
(pop) ; 6
; 0.04s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (-
      (ite
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
        $Perm.Write
        $Perm.No)
      (pTaken@262@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))
    (pTaken@290@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    (=
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (- $Perm.Write (pTaken@278@01 r))
                              (pTaken@279@01 r))
                            (pTaken@280@01 r))
                          (pTaken@281@01 r))
                        (pTaken@282@01 r))
                      (pTaken@283@01 r))
                    (pTaken@284@01 r))
                  (pTaken@285@01 r))
                (pTaken@286@01 r))
              (pTaken@287@01 r))
            (pTaken@288@01 r))
          (pTaken@289@01 r))
        (pTaken@290@01 r))
      $Perm.No))
  
  :qid |quant-u-259|))))
(check-sat)
; unknown
(pop) ; 6
; 0.04s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (-
      (ite
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
        $Perm.Write
        $Perm.No)
      (pTaken@261@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))
    (pTaken@291@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.03s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    (=
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (-
                                (- $Perm.Write (pTaken@278@01 r))
                                (pTaken@279@01 r))
                              (pTaken@280@01 r))
                            (pTaken@281@01 r))
                          (pTaken@282@01 r))
                        (pTaken@283@01 r))
                      (pTaken@284@01 r))
                    (pTaken@285@01 r))
                  (pTaken@286@01 r))
                (pTaken@287@01 r))
              (pTaken@288@01 r))
            (pTaken@289@01 r))
          (pTaken@290@01 r))
        (pTaken@291@01 r))
      $Perm.No))
  
  :qid |quant-u-261|))))
(check-sat)
; unknown
(pop) ; 6
; 0.05s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (-
      (ite
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
        $Perm.Write
        $Perm.No)
      (pTaken@260@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
    (pTaken@292@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    (=
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (-
                                (-
                                  (- $Perm.Write (pTaken@278@01 r))
                                  (pTaken@279@01 r))
                                (pTaken@280@01 r))
                              (pTaken@281@01 r))
                            (pTaken@282@01 r))
                          (pTaken@283@01 r))
                        (pTaken@284@01 r))
                      (pTaken@285@01 r))
                    (pTaken@286@01 r))
                  (pTaken@287@01 r))
                (pTaken@288@01 r))
              (pTaken@289@01 r))
            (pTaken@290@01 r))
          (pTaken@291@01 r))
        (pTaken@292@01 r))
      $Perm.No))
  
  :qid |quant-u-263|))))
(check-sat)
; unknown
(pop) ; 6
; 0.05s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (=
  (-
    (-
      (ite
        (=
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))
          (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
        $Perm.Write
        $Perm.No)
      (pTaken@259@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))))
    (pTaken@293@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@277@01 r) 8) (<= 0 (inv@277@01 r)))
    (=
      (-
        (-
          (-
            (-
              (-
                (-
                  (-
                    (-
                      (-
                        (-
                          (-
                            (-
                              (-
                                (-
                                  (-
                                    (- $Perm.Write (pTaken@278@01 r))
                                    (pTaken@279@01 r))
                                  (pTaken@280@01 r))
                                (pTaken@281@01 r))
                              (pTaken@282@01 r))
                            (pTaken@283@01 r))
                          (pTaken@284@01 r))
                        (pTaken@285@01 r))
                      (pTaken@286@01 r))
                    (pTaken@287@01 r))
                  (pTaken@288@01 r))
                (pTaken@289@01 r))
              (pTaken@290@01 r))
            (pTaken@291@01 r))
          (pTaken@292@01 r))
        (pTaken@293@01 r))
      $Perm.No))
  
  :qid |quant-u-265|))))
(check-sat)
; unsat
(pop) ; 6
; 0.13s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@294@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 0)))
          $Perm.Write
          $Perm.No)
        (pTaken@274@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@144@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@144@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef137|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 1)))
          $Perm.Write
          $Perm.No)
        (pTaken@273@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@145@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@145@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef138|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 2)))
          $Perm.Write
          $Perm.No)
        (pTaken@272@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@146@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@146@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef139|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 3)))
          $Perm.Write
          $Perm.No)
        (pTaken@271@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@147@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@147@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 4)))
          $Perm.Write
          $Perm.No)
        (pTaken@270@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@148@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@148@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef141|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 5)))
          $Perm.Write
          $Perm.No)
        (pTaken@269@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@149@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@149@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 6)))
          $Perm.Write
          $Perm.No)
        (pTaken@268@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@150@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@150@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01)))) 7)))
          $Perm.Write
          $Perm.No)
        (pTaken@267@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@151@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@151@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef144|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 0)))
          $Perm.Write
          $Perm.No)
        (pTaken@266@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@240@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@240@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 1)))
          $Perm.Write
          $Perm.No)
        (pTaken@265@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@241@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@241@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 2)))
          $Perm.Write
          $Perm.No)
        (pTaken@264@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@242@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@242@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef147|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 3)))
          $Perm.Write
          $Perm.No)
        (pTaken@263@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@243@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@243@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef148|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 4)))
          $Perm.Write
          $Perm.No)
        (pTaken@262@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@244@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@244@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef149|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 5)))
          $Perm.Write
          $Perm.No)
        (pTaken@261@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@245@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@245@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef150|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 6)))
          $Perm.Write
          $Perm.No)
        (pTaken@260@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@246@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@246@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef151|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite
          (=
            r
            (ShArrayloc<Ref> (sarray<ShArray<Ref>> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) (sadd $Snap.unit (soffset<Int> (ssliceFromArray_Ref ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) 0 (ShArraylen<Int> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01)))) 7)))
          $Perm.Write
          $Perm.No)
        (pTaken@259@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@247@01  $FVF<Intbyte$$$$_E_$$$>) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@294@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@247@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :qid |qp.fvfValDef152|)))
; [eval] i_V2 % 2 == 0
; [eval] i_V2 % 2
(set-option :timeout 0)
(push) ; 6
(assert (not (= (mod 0 2) 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (= (mod 0 2) 0))
; [eval] 0 <= i_V2
; [eval] i_V2 <= 8
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 6
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@256@01 r) 8) (<= 0 (inv@256@01 r)))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
  :pattern ((inv@256@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@256@01 r) 8) (<= 0 (inv@256@01 r)))
    (=
      (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) (inv@256@01 r))
      r))
  :pattern ((inv@256@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
(assert (forall ((j_V4@255@01 Int)) (!
  (=>
    (and (< j_V4@255@01 8) (<= 0 j_V4@255@01))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V4@255@01))
  :qid |quant-u-197|)))
(assert (forall ((j_V4@255@01 Int)) (!
  (=>
    (and (< j_V4@255@01 8) (<= 0 j_V4@255@01))
    (=
      (inv@256@01 (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V4@255@01))
      j_V4@255@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V4@255@01))
  :qid |quant-u-197|)))
(assert (forall ((j_V4@255@01 Int)) (!
  (=>
    (and (< j_V4@255@01 8) (<= 0 j_V4@255@01))
    (not
      (=
        (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V4@255@01)
        $Ref.null)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V4@255@01))
  :qid |Intbyte$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second $t@252@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@252@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@252@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@252@01))) $Snap.unit))
(assert (= (mod i_V2@251@01 2) 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@252@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@252@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@252@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@252@01))))
  $Snap.unit))
(assert (<= 0 i_V2@251@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@252@01))))
  $Snap.unit))
(assert (<= i_V2@251@01 8))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@254@01 r) 8) (<= 0 (inv@254@01 r)))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
  :pattern ((inv@254@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@254@01 r) 8) (<= 0 (inv@254@01 r)))
    (=
      (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) (inv@254@01 r))
      r))
  :pattern ((inv@254@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
(assert (forall ((j_V3@253@01 Int)) (!
  (=>
    (and (< j_V3@253@01 8) (<= 0 j_V3@253@01))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V3@253@01))
  :qid |quant-u-195|)))
(assert (forall ((j_V3@253@01 Int)) (!
  (=>
    (and (< j_V3@253@01 8) (<= 0 j_V3@253@01))
    (=
      (inv@254@01 (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V3@253@01))
      j_V3@253@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V3@253@01))
  :qid |quant-u-195|)))
(assert (forall ((j_V3@253@01 Int)) (!
  (=>
    (and (< j_V3@253@01 8) (<= 0 j_V3@253@01))
    (not
      (=
        (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V3@253@01)
        $Ref.null)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V3@253@01))
  :qid |Intbyte$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second $t@252@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@252@01))
    ($Snap.second ($Snap.second $t@252@01)))))
(assert (forall ((j_V4@255@01 Int)) (!
  (=>
    (and (< j_V4@255@01 8) (<= 0 j_V4@255@01))
    (or (not (<= 0 j_V4@255@01)) (<= 0 j_V4@255@01)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V4@255@01))
  :qid |Intbyte$$$$_E_$$$-aux|)))
(assert (= $t@252@01 ($Snap.combine ($Snap.first $t@252@01) ($Snap.second $t@252@01))))
(assert (forall ((j_V3@253@01 Int)) (!
  (=>
    (and (< j_V3@253@01 8) (<= 0 j_V3@253@01))
    (or (not (<= 0 j_V3@253@01)) (<= 0 j_V3@253@01)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V3@253@01))
  :qid |Intbyte$$$$_E_$$$-aux|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] i_V2 < 8
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (< i_V2@251@01 8))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< i_V2@251@01 8)))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 45 | i_V2@251@01 < 8 | live]
; [else-branch: 45 | !(i_V2@251@01 < 8) | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 45 | i_V2@251@01 < 8]
(assert (< i_V2@251@01 8))
; [exec]
; var old_W7_T0: Int
(declare-const old_W7_T0@295@01 Int)
; [exec]
; old_W7_T0 := 8 - i_V2
; [eval] 8 - i_V2
(declare-const old_W7_T0@296@01 Int)
(assert (= old_W7_T0@296@01 (- 8 i_V2@251@01)))
; [exec]
; csum_V1 := csum_V1 +
;   intShiftLeft((ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1),
;   i_V2): Ref).Intbyte$$$$_E_$$$, 8)
; [eval] csum_V1 + intShiftLeft((ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1), i_V2): Ref).Intbyte$$$$_E_$$$, 8)
; [eval] intShiftLeft((ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1), i_V2): Ref).Intbyte$$$$_E_$$$, 8)
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1), i_V2): Ref)
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1)
(push) ; 8
(pop) ; 8
; Joined path conditions
(declare-const sm@297@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@256@01 r) 8) (<= 0 (inv@256@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@297@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first ($Snap.second $t@252@01))) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@297@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first ($Snap.second $t@252@01))) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@254@01 r) 8) (<= 0 (inv@254@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@297@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@252@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@297@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@252@01)) r))
  :qid |qp.fvfValDef154|)))
(declare-const pm@298@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intbyte$$$$_E_$$$ (as pm@298@01  $FPM) r)
    (+
      (ite (and (< (inv@256@01 r) 8) (<= 0 (inv@256@01 r))) $Perm.Write $Perm.No)
      (ite (and (< (inv@254@01 r) 8) (<= 0 (inv@254@01 r))) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_Intbyte$$$$_E_$$$ (as pm@298@01  $FPM) r))
  :qid |qp.resPrmSumDef155|)))
(push) ; 8
(assert (not (<
  $Perm.No
  ($FVF.perm_Intbyte$$$$_E_$$$ (as pm@298@01  $FPM) (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) i_V2@251@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
(push) ; 8
; [eval] right >= 0
(assert (intShiftLeft%precondition $Snap.unit ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@297@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) i_V2@251@01)) 8))
(pop) ; 8
; Joined path conditions
(assert (intShiftLeft%precondition $Snap.unit ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@297@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) i_V2@251@01)) 8))
(declare-const csum_V1@299@01 Int)
(assert (=
  csum_V1@299@01
  (+
    csum_V1@250@01
    (intShiftLeft $Snap.unit ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@297@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) i_V2@251@01)) 8))))
; [exec]
; csum_V1 := csum_V1 +
;   (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1), i_V2 + 1): Ref).Intbyte$$$$_E_$$$
; [eval] csum_V1 + (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1), i_V2 + 1): Ref).Intbyte$$$$_E_$$$
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1), i_V2 + 1): Ref)
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1)
(push) ; 8
(pop) ; 8
; Joined path conditions
; [eval] i_V2 + 1
(declare-const sm@300@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@256@01 r) 8) (<= 0 (inv@256@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@300@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first ($Snap.second $t@252@01))) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@300@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first ($Snap.second $t@252@01))) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@254@01 r) 8) (<= 0 (inv@254@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@300@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@252@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@300@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@252@01)) r))
  :qid |qp.fvfValDef157|)))
(declare-const pm@301@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intbyte$$$$_E_$$$ (as pm@301@01  $FPM) r)
    (+
      (ite (and (< (inv@256@01 r) 8) (<= 0 (inv@256@01 r))) $Perm.Write $Perm.No)
      (ite (and (< (inv@254@01 r) 8) (<= 0 (inv@254@01 r))) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_Intbyte$$$$_E_$$$ (as pm@301@01  $FPM) r))
  :qid |qp.resPrmSumDef158|)))
(push) ; 8
(assert (not (<
  $Perm.No
  ($FVF.perm_Intbyte$$$$_E_$$$ (as pm@301@01  $FPM) (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) (+
    i_V2@251@01
    1))))))
(check-sat)
; unsat
(pop) ; 8
; 0.03s
; (get-info :all-statistics)
(declare-const csum_V1@302@01 Int)
(assert (=
  csum_V1@302@01
  (+
    csum_V1@299@01
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@300@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) (+
      i_V2@251@01
      1))))))
; [exec]
; csum_V1 := csum_V1 +
;   intShiftLeft((ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1),
;   i_V2): Ref).Intbyte$$$$_E_$$$, 8)
; [eval] csum_V1 + intShiftLeft((ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1), i_V2): Ref).Intbyte$$$$_E_$$$, 8)
; [eval] intShiftLeft((ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1), i_V2): Ref).Intbyte$$$$_E_$$$, 8)
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1), i_V2): Ref)
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1)
(push) ; 8
(pop) ; 8
; Joined path conditions
(declare-const sm@303@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@256@01 r) 8) (<= 0 (inv@256@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@303@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first ($Snap.second $t@252@01))) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@303@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first ($Snap.second $t@252@01))) r))
  :qid |qp.fvfValDef159|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@254@01 r) 8) (<= 0 (inv@254@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@303@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@252@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@303@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@252@01)) r))
  :qid |qp.fvfValDef160|)))
(declare-const pm@304@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intbyte$$$$_E_$$$ (as pm@304@01  $FPM) r)
    (+
      (ite (and (< (inv@256@01 r) 8) (<= 0 (inv@256@01 r))) $Perm.Write $Perm.No)
      (ite (and (< (inv@254@01 r) 8) (<= 0 (inv@254@01 r))) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_Intbyte$$$$_E_$$$ (as pm@304@01  $FPM) r))
  :qid |qp.resPrmSumDef161|)))
(push) ; 8
(assert (not (<
  $Perm.No
  ($FVF.perm_Intbyte$$$$_E_$$$ (as pm@304@01  $FPM) (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) i_V2@251@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.02s
; (get-info :all-statistics)
(push) ; 8
; [eval] right >= 0
(assert (intShiftLeft%precondition $Snap.unit ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@303@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) i_V2@251@01)) 8))
(pop) ; 8
; Joined path conditions
(assert (intShiftLeft%precondition $Snap.unit ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@303@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) i_V2@251@01)) 8))
(declare-const csum_V1@305@01 Int)
(assert (=
  csum_V1@305@01
  (+
    csum_V1@302@01
    (intShiftLeft $Snap.unit ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@303@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) i_V2@251@01)) 8))))
; [exec]
; csum_V1 := csum_V1 +
;   (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1), i_V2 + 1): Ref).Intbyte$$$$_E_$$$
; [eval] csum_V1 + (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1), i_V2 + 1): Ref).Intbyte$$$$_E_$$$
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1), i_V2 + 1): Ref)
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1)
(push) ; 8
(pop) ; 8
; Joined path conditions
; [eval] i_V2 + 1
(declare-const sm@306@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@256@01 r) 8) (<= 0 (inv@256@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@306@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first ($Snap.second $t@252@01))) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@306@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first ($Snap.second $t@252@01))) r))
  :qid |qp.fvfValDef162|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@254@01 r) 8) (<= 0 (inv@254@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@306@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@252@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@306@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@252@01)) r))
  :qid |qp.fvfValDef163|)))
(declare-const pm@307@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Intbyte$$$$_E_$$$ (as pm@307@01  $FPM) r)
    (+
      (ite (and (< (inv@256@01 r) 8) (<= 0 (inv@256@01 r))) $Perm.Write $Perm.No)
      (ite (and (< (inv@254@01 r) 8) (<= 0 (inv@254@01 r))) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_Intbyte$$$$_E_$$$ (as pm@307@01  $FPM) r))
  :qid |qp.resPrmSumDef164|)))
(push) ; 8
(assert (not (<
  $Perm.No
  ($FVF.perm_Intbyte$$$$_E_$$$ (as pm@307@01  $FPM) (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) (+
    i_V2@251@01
    1))))))
(check-sat)
; unsat
(pop) ; 8
; 0.03s
; (get-info :all-statistics)
(declare-const csum_V1@308@01 Int)
(assert (=
  csum_V1@308@01
  (+
    csum_V1@305@01
    ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@306@01  $FVF<Intbyte$$$$_E_$$$>) (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) (+
      i_V2@251@01
      1))))))
; [exec]
; label L$25$1$Continue
; [exec]
; i_V2 := i_V2 + 2
; [eval] i_V2 + 2
(declare-const i_V2@309@01 Int)
(assert (= i_V2@309@01 (+ i_V2@251@01 2)))
; [eval] !(i_V2 < 8)
; [eval] i_V2 < 8
(push) ; 8
(set-option :timeout 10)
(assert (not (< i_V2@309@01 8)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (< i_V2@309@01 8))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 46 | !(i_V2@309@01 < 8) | live]
; [else-branch: 46 | i_V2@309@01 < 8 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 46 | !(i_V2@309@01 < 8)]
(assert (not (< i_V2@309@01 8)))
; [exec]
; assert true && i_V2 < 8 ==>
;   (decreasing(8 - i_V2, old_W7_T0): Bool) && (bounded(old_W7_T0): Bool) ||
;   8 - i_V2 == old_W7_T0 && false
; [eval] true && i_V2 < 8 ==> (decreasing(8 - i_V2, old_W7_T0): Bool) && (bounded(old_W7_T0): Bool) || 8 - i_V2 == old_W7_T0 && false
; [eval] true && i_V2 < 8
(push) ; 9
; [then-branch: 47 | True | live]
; [else-branch: 47 | False | live]
(push) ; 10
; [then-branch: 47 | True]
; [eval] i_V2 < 8
(pop) ; 10
(push) ; 10
; [else-branch: 47 | False]
(assert false)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 48 | i_V2@309@01 < 8 | dead]
; [else-branch: 48 | !(i_V2@309@01 < 8) | live]
(push) ; 10
; [else-branch: 48 | !(i_V2@309@01 < 8)]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Loop head block: Re-establish invariant
(declare-const j_V3@310@01 Int)
(push) ; 9
; [eval] 0 <= j_V3 && j_V3 < 8
; [eval] 0 <= j_V3
(push) ; 10
; [then-branch: 49 | 0 <= j_V3@310@01 | live]
; [else-branch: 49 | !(0 <= j_V3@310@01) | live]
(push) ; 11
; [then-branch: 49 | 0 <= j_V3@310@01]
(assert (<= 0 j_V3@310@01))
; [eval] j_V3 < 8
(pop) ; 11
(push) ; 11
; [else-branch: 49 | !(0 <= j_V3@310@01)]
(assert (not (<= 0 j_V3@310@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j_V3@310@01)) (<= 0 j_V3@310@01)))
(assert (and (< j_V3@310@01 8) (<= 0 j_V3@310@01)))
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1), j_V3): Ref)
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
(declare-fun inv@311@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j_V3@310@01 Int)) (!
  (=>
    (and (< j_V3@310@01 8) (<= 0 j_V3@310@01))
    (or (not (<= 0 j_V3@310@01)) (<= 0 j_V3@310@01)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V3@310@01))
  :qid |Intbyte$$$$_E_$$$-aux|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((j_V31@310@01 Int) (j_V32@310@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (and (< j_V31@310@01 8) (<= 0 j_V31@310@01))
          (and (< j_V32@310@01 8) (<= 0 j_V32@310@01)))
        (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
      (and
        (and (< j_V31@310@01 8) (<= 0 j_V31@310@01))
        (and (< j_V32@310@01 8) (<= 0 j_V32@310@01))
        (=
          (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V31@310@01)
          (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V32@310@01))))
    (= j_V31@310@01 j_V32@310@01))
  
  :qid |Intbyte$$$$_E_$$$-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j_V3@310@01 Int)) (!
  (=>
    (and (< j_V3@310@01 8) (<= 0 j_V3@310@01))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V3@310@01))
  :qid |Intbyte$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@311@01 r) 8) (<= 0 (inv@311@01 r)))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
  :pattern ((inv@311@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
(assert (forall ((j_V3@310@01 Int)) (!
  (=>
    (and (< j_V3@310@01 8) (<= 0 j_V3@310@01))
    (=
      (inv@311@01 (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V3@310@01))
      j_V3@310@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V3@310@01))
  :qid |Intbyte$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@311@01 r) 8) (<= 0 (inv@311@01 r)))
    (=
      (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) (inv@311@01 r))
      r))
  :pattern ((inv@311@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@312@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@311@01 r) 8) (<= 0 (inv@311@01 r)))
    ($Perm.min
      (ite (and (< (inv@256@01 r) 8) (<= 0 (inv@256@01 r))) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@313@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@311@01 r) 8) (<= 0 (inv@311@01 r)))
    ($Perm.min
      (ite (and (< (inv@254@01 r) 8) (<= 0 (inv@254@01 r))) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@312@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite (and (< (inv@256@01 r) 8) (<= 0 (inv@256@01 r))) $Perm.Write $Perm.No)
      (pTaken@312@01 r))
    $Perm.No)
  
  :qid |quant-u-268|))))
(check-sat)
; unknown
(pop) ; 9
; 0.06s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@311@01 r) 8) (<= 0 (inv@311@01 r)))
    (= (- $Perm.Write (pTaken@312@01 r)) $Perm.No))
  
  :qid |quant-u-269|))))
(check-sat)
; unknown
(pop) ; 9
; 0.05s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite (and (< (inv@254@01 r) 8) (<= 0 (inv@254@01 r))) $Perm.Write $Perm.No)
      (pTaken@313@01 r))
    $Perm.No)
  
  :qid |quant-u-270|))))
(check-sat)
; unknown
(pop) ; 9
; 0.06s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@311@01 r) 8) (<= 0 (inv@311@01 r)))
    (= (- (- $Perm.Write (pTaken@312@01 r)) (pTaken@313@01 r)) $Perm.No))
  
  :qid |quant-u-271|))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@314@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@256@01 r) 8) (<= 0 (inv@256@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@314@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first ($Snap.second $t@252@01))) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@314@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first ($Snap.second $t@252@01))) r))
  :qid |qp.fvfValDef165|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@254@01 r) 8) (<= 0 (inv@254@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@314@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@252@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@314@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@252@01)) r))
  :qid |qp.fvfValDef166|)))
(declare-const j_V4@315@01 Int)
(set-option :timeout 0)
(push) ; 9
; [eval] 0 <= j_V4 && j_V4 < 8
; [eval] 0 <= j_V4
(push) ; 10
; [then-branch: 50 | 0 <= j_V4@315@01 | live]
; [else-branch: 50 | !(0 <= j_V4@315@01) | live]
(push) ; 11
; [then-branch: 50 | 0 <= j_V4@315@01]
(assert (<= 0 j_V4@315@01))
; [eval] j_V4 < 8
(pop) ; 11
(push) ; 11
; [else-branch: 50 | !(0 <= j_V4@315@01)]
(assert (not (<= 0 j_V4@315@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j_V4@315@01)) (<= 0 j_V4@315@01)))
(assert (and (< j_V4@315@01 8) (<= 0 j_V4@315@01)))
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1), j_V4): Ref)
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
(declare-fun inv@316@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j_V4@315@01 Int)) (!
  (=>
    (and (< j_V4@315@01 8) (<= 0 j_V4@315@01))
    (or (not (<= 0 j_V4@315@01)) (<= 0 j_V4@315@01)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V4@315@01))
  :qid |Intbyte$$$$_E_$$$-aux|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((j_V41@315@01 Int) (j_V42@315@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (and (< j_V41@315@01 8) (<= 0 j_V41@315@01))
          (and (< j_V42@315@01 8) (<= 0 j_V42@315@01)))
        (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
      (and
        (and (< j_V41@315@01 8) (<= 0 j_V41@315@01))
        (and (< j_V42@315@01 8) (<= 0 j_V42@315@01))
        (=
          (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V41@315@01)
          (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V42@315@01))))
    (= j_V41@315@01 j_V42@315@01))
  
  :qid |Intbyte$$$$_E_$$$-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j_V4@315@01 Int)) (!
  (=>
    (and (< j_V4@315@01 8) (<= 0 j_V4@315@01))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V4@315@01))
  :qid |Intbyte$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@316@01 r) 8) (<= 0 (inv@316@01 r)))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
  :pattern ((inv@316@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
(assert (forall ((j_V4@315@01 Int)) (!
  (=>
    (and (< j_V4@315@01 8) (<= 0 j_V4@315@01))
    (=
      (inv@316@01 (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V4@315@01))
      j_V4@315@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V4@315@01))
  :qid |Intbyte$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@316@01 r) 8) (<= 0 (inv@316@01 r)))
    (=
      (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) (inv@316@01 r))
      r))
  :pattern ((inv@316@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@317@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@316@01 r) 8) (<= 0 (inv@316@01 r)))
    ($Perm.min
      (-
        (ite
          (and (< (inv@254@01 r) 8) (<= 0 (inv@254@01 r)))
          $Perm.Write
          $Perm.No)
        (pTaken@313@01 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@318@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@316@01 r) 8) (<= 0 (inv@316@01 r)))
    ($Perm.min
      (-
        (ite
          (and (< (inv@256@01 r) 8) (<= 0 (inv@256@01 r)))
          $Perm.Write
          $Perm.No)
        (pTaken@312@01 r))
      (- $Perm.Write (pTaken@317@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (ite
          (and (< (inv@254@01 r) 8) (<= 0 (inv@254@01 r)))
          $Perm.Write
          $Perm.No)
        (pTaken@313@01 r))
      (pTaken@317@01 r))
    $Perm.No)
  
  :qid |quant-u-274|))))
(check-sat)
; unsat
(pop) ; 9
; 0.05s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@316@01 r) 8) (<= 0 (inv@316@01 r)))
    (= (- $Perm.Write (pTaken@317@01 r)) $Perm.No))
  
  :qid |quant-u-275|))))
(check-sat)
; unknown
(pop) ; 9
; 0.08s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (ite
          (and (< (inv@256@01 r) 8) (<= 0 (inv@256@01 r)))
          $Perm.Write
          $Perm.No)
        (pTaken@312@01 r))
      (pTaken@318@01 r))
    $Perm.No)
  
  :qid |quant-u-276|))))
(check-sat)
; unsat
(pop) ; 9
; 0.04s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@316@01 r) 8) (<= 0 (inv@316@01 r)))
    (= (- (- $Perm.Write (pTaken@317@01 r)) (pTaken@318@01 r)) $Perm.No))
  
  :qid |quant-u-277|))))
(check-sat)
; unsat
(pop) ; 9
; 0.04s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@319@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite
          (and (< (inv@254@01 r) 8) (<= 0 (inv@254@01 r)))
          $Perm.Write
          $Perm.No)
        (pTaken@313@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@319@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@252@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@319@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@252@01)) r))
  :qid |qp.fvfValDef167|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite
          (and (< (inv@256@01 r) 8) (<= 0 (inv@256@01 r)))
          $Perm.Write
          $Perm.No)
        (pTaken@312@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@319@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first ($Snap.second $t@252@01))) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@319@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first ($Snap.second $t@252@01))) r))
  :qid |qp.fvfValDef168|)))
; [eval] i_V2 % 2 == 0
; [eval] i_V2 % 2
(set-option :timeout 0)
(push) ; 9
(assert (not (= (mod i_V2@309@01 2) 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.04s
; (get-info :all-statistics)
(assert (= (mod i_V2@309@01 2) 0))
; [eval] 0 <= i_V2
(push) ; 9
(assert (not (<= 0 i_V2@309@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 i_V2@309@01))
; [eval] i_V2 <= 8
(push) ; 9
(assert (not (<= i_V2@309@01 8)))
(check-sat)
; unsat
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
(assert (<= i_V2@309@01 8))
(pop) ; 8
(push) ; 8
; [else-branch: 46 | i_V2@309@01 < 8]
(assert (< i_V2@309@01 8))
(pop) ; 8
; [eval] i_V2 < 8
(push) ; 8
(set-option :timeout 10)
(assert (not (not (< i_V2@309@01 8))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< i_V2@309@01 8)))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 51 | i_V2@309@01 < 8 | live]
; [else-branch: 51 | !(i_V2@309@01 < 8) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 51 | i_V2@309@01 < 8]
(assert (< i_V2@309@01 8))
; [exec]
; assert true && i_V2 < 8 ==>
;   (decreasing(8 - i_V2, old_W7_T0): Bool) && (bounded(old_W7_T0): Bool) ||
;   8 - i_V2 == old_W7_T0 && false
; [eval] true && i_V2 < 8 ==> (decreasing(8 - i_V2, old_W7_T0): Bool) && (bounded(old_W7_T0): Bool) || 8 - i_V2 == old_W7_T0 && false
; [eval] true && i_V2 < 8
(push) ; 9
; [then-branch: 52 | True | live]
; [else-branch: 52 | False | live]
(push) ; 10
; [then-branch: 52 | True]
; [eval] i_V2 < 8
(pop) ; 10
(push) ; 10
; [else-branch: 52 | False]
(assert false)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (< i_V2@309@01 8))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 53 | i_V2@309@01 < 8 | live]
; [else-branch: 53 | !(i_V2@309@01 < 8) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 53 | i_V2@309@01 < 8]
; [eval] (decreasing(8 - i_V2, old_W7_T0): Bool) && (bounded(old_W7_T0): Bool) || 8 - i_V2 == old_W7_T0 && false
; [eval] (decreasing(8 - i_V2, old_W7_T0): Bool) && (bounded(old_W7_T0): Bool)
; [eval] (decreasing(8 - i_V2, old_W7_T0): Bool)
; [eval] 8 - i_V2
(push) ; 11
; [then-branch: 54 | decreasing[Bool](8 - i_V2@309@01, old_W7_T0@296@01) | live]
; [else-branch: 54 | !(decreasing[Bool](8 - i_V2@309@01, old_W7_T0@296@01)) | live]
(push) ; 12
; [then-branch: 54 | decreasing[Bool](8 - i_V2@309@01, old_W7_T0@296@01)]
(assert (decreasing<Bool> (- 8 i_V2@309@01) old_W7_T0@296@01))
; [eval] (bounded(old_W7_T0): Bool)
(pop) ; 12
(push) ; 12
; [else-branch: 54 | !(decreasing[Bool](8 - i_V2@309@01, old_W7_T0@296@01))]
(assert (not (decreasing<Bool> (- 8 i_V2@309@01) old_W7_T0@296@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (not (decreasing<Bool> (- 8 i_V2@309@01) old_W7_T0@296@01))
  (decreasing<Bool> (- 8 i_V2@309@01) old_W7_T0@296@01)))
(push) ; 11
; [then-branch: 55 | bounded[Bool](old_W7_T0@296@01) && decreasing[Bool](8 - i_V2@309@01, old_W7_T0@296@01) | live]
; [else-branch: 55 | !(bounded[Bool](old_W7_T0@296@01) && decreasing[Bool](8 - i_V2@309@01, old_W7_T0@296@01)) | live]
(push) ; 12
; [then-branch: 55 | bounded[Bool](old_W7_T0@296@01) && decreasing[Bool](8 - i_V2@309@01, old_W7_T0@296@01)]
(assert (and
  (bounded<Bool> old_W7_T0@296@01)
  (decreasing<Bool> (- 8 i_V2@309@01) old_W7_T0@296@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 55 | !(bounded[Bool](old_W7_T0@296@01) && decreasing[Bool](8 - i_V2@309@01, old_W7_T0@296@01))]
(assert (not
  (and
    (bounded<Bool> old_W7_T0@296@01)
    (decreasing<Bool> (- 8 i_V2@309@01) old_W7_T0@296@01))))
; [eval] 8 - i_V2 == old_W7_T0 && false
; [eval] 8 - i_V2 == old_W7_T0
; [eval] 8 - i_V2
(push) ; 13
; [then-branch: 56 | 8 - i_V2@309@01 == old_W7_T0@296@01 | live]
; [else-branch: 56 | 8 - i_V2@309@01 != old_W7_T0@296@01 | live]
(push) ; 14
; [then-branch: 56 | 8 - i_V2@309@01 == old_W7_T0@296@01]
(assert (= (- 8 i_V2@309@01) old_W7_T0@296@01))
(pop) ; 14
(push) ; 14
; [else-branch: 56 | 8 - i_V2@309@01 != old_W7_T0@296@01]
(assert (not (= (- 8 i_V2@309@01) old_W7_T0@296@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not (= (- 8 i_V2@309@01) old_W7_T0@296@01))
  (= (- 8 i_V2@309@01) old_W7_T0@296@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (bounded<Bool> old_W7_T0@296@01)
      (decreasing<Bool> (- 8 i_V2@309@01) old_W7_T0@296@01)))
  (and
    (not
      (and
        (bounded<Bool> old_W7_T0@296@01)
        (decreasing<Bool> (- 8 i_V2@309@01) old_W7_T0@296@01)))
    (or
      (not (= (- 8 i_V2@309@01) old_W7_T0@296@01))
      (= (- 8 i_V2@309@01) old_W7_T0@296@01)))))
(assert (or
  (not
    (and
      (bounded<Bool> old_W7_T0@296@01)
      (decreasing<Bool> (- 8 i_V2@309@01) old_W7_T0@296@01)))
  (and
    (bounded<Bool> old_W7_T0@296@01)
    (decreasing<Bool> (- 8 i_V2@309@01) old_W7_T0@296@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=>
  (< i_V2@309@01 8)
  (and
    (or
      (not (decreasing<Bool> (- 8 i_V2@309@01) old_W7_T0@296@01))
      (decreasing<Bool> (- 8 i_V2@309@01) old_W7_T0@296@01))
    (=>
      (not
        (and
          (bounded<Bool> old_W7_T0@296@01)
          (decreasing<Bool> (- 8 i_V2@309@01) old_W7_T0@296@01)))
      (and
        (not
          (and
            (bounded<Bool> old_W7_T0@296@01)
            (decreasing<Bool> (- 8 i_V2@309@01) old_W7_T0@296@01)))
        (or
          (not (= (- 8 i_V2@309@01) old_W7_T0@296@01))
          (= (- 8 i_V2@309@01) old_W7_T0@296@01))))
    (or
      (not
        (and
          (bounded<Bool> old_W7_T0@296@01)
          (decreasing<Bool> (- 8 i_V2@309@01) old_W7_T0@296@01)))
      (and
        (bounded<Bool> old_W7_T0@296@01)
        (decreasing<Bool> (- 8 i_V2@309@01) old_W7_T0@296@01))))))
(push) ; 9
(assert (not (=>
  (< i_V2@309@01 8)
  (and
    (bounded<Bool> old_W7_T0@296@01)
    (decreasing<Bool> (- 8 i_V2@309@01) old_W7_T0@296@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.02s
; (get-info :all-statistics)
(assert (=>
  (< i_V2@309@01 8)
  (and
    (bounded<Bool> old_W7_T0@296@01)
    (decreasing<Bool> (- 8 i_V2@309@01) old_W7_T0@296@01))))
; Loop head block: Re-establish invariant
(declare-const j_V3@320@01 Int)
(push) ; 9
; [eval] 0 <= j_V3 && j_V3 < 8
; [eval] 0 <= j_V3
(push) ; 10
; [then-branch: 57 | 0 <= j_V3@320@01 | live]
; [else-branch: 57 | !(0 <= j_V3@320@01) | live]
(push) ; 11
; [then-branch: 57 | 0 <= j_V3@320@01]
(assert (<= 0 j_V3@320@01))
; [eval] j_V3 < 8
(pop) ; 11
(push) ; 11
; [else-branch: 57 | !(0 <= j_V3@320@01)]
(assert (not (<= 0 j_V3@320@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j_V3@320@01)) (<= 0 j_V3@320@01)))
(assert (and (< j_V3@320@01 8) (<= 0 j_V3@320@01)))
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1), j_V3): Ref)
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(srcIA_V1)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
(declare-fun inv@321@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j_V3@320@01 Int)) (!
  (=>
    (and (< j_V3@320@01 8) (<= 0 j_V3@320@01))
    (or (not (<= 0 j_V3@320@01)) (<= 0 j_V3@320@01)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V3@320@01))
  :qid |Intbyte$$$$_E_$$$-aux|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((j_V31@320@01 Int) (j_V32@320@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (and (< j_V31@320@01 8) (<= 0 j_V31@320@01))
          (and (< j_V32@320@01 8) (<= 0 j_V32@320@01)))
        (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
      (and
        (and (< j_V31@320@01 8) (<= 0 j_V31@320@01))
        (and (< j_V32@320@01 8) (<= 0 j_V32@320@01))
        (=
          (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V31@320@01)
          (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V32@320@01))))
    (= j_V31@320@01 j_V32@320@01))
  
  :qid |Intbyte$$$$_E_$$$-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j_V3@320@01 Int)) (!
  (=>
    (and (< j_V3@320@01 8) (<= 0 j_V3@320@01))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V3@320@01))
  :qid |Intbyte$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@321@01 r) 8) (<= 0 (inv@321@01 r)))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit srcIA_V1@33@01))
  :pattern ((inv@321@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
(assert (forall ((j_V3@320@01 Int)) (!
  (=>
    (and (< j_V3@320@01 8) (<= 0 j_V3@320@01))
    (=
      (inv@321@01 (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V3@320@01))
      j_V3@320@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) j_V3@320@01))
  :qid |Intbyte$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@321@01 r) 8) (<= 0 (inv@321@01 r)))
    (=
      (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit srcIA_V1@33@01) (inv@321@01 r))
      r))
  :pattern ((inv@321@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@322@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@321@01 r) 8) (<= 0 (inv@321@01 r)))
    ($Perm.min
      (ite (and (< (inv@256@01 r) 8) (<= 0 (inv@256@01 r))) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@323@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@321@01 r) 8) (<= 0 (inv@321@01 r)))
    ($Perm.min
      (ite (and (< (inv@254@01 r) 8) (<= 0 (inv@254@01 r))) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@322@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite (and (< (inv@256@01 r) 8) (<= 0 (inv@256@01 r))) $Perm.Write $Perm.No)
      (pTaken@322@01 r))
    $Perm.No)
  
  :qid |quant-u-280|))))
(check-sat)
; unknown
(pop) ; 9
; 0.06s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@321@01 r) 8) (<= 0 (inv@321@01 r)))
    (= (- $Perm.Write (pTaken@322@01 r)) $Perm.No))
  
  :qid |quant-u-281|))))
(check-sat)
; unknown
(pop) ; 9
; 0.09s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite (and (< (inv@254@01 r) 8) (<= 0 (inv@254@01 r))) $Perm.Write $Perm.No)
      (pTaken@323@01 r))
    $Perm.No)
  
  :qid |quant-u-282|))))
(check-sat)
; unknown
(pop) ; 9
; 0.06s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@321@01 r) 8) (<= 0 (inv@321@01 r)))
    (= (- (- $Perm.Write (pTaken@322@01 r)) (pTaken@323@01 r)) $Perm.No))
  
  :qid |quant-u-283|))))
(check-sat)
; unsat
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@324@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@256@01 r) 8) (<= 0 (inv@256@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@324@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first ($Snap.second $t@252@01))) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@324@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first ($Snap.second $t@252@01))) r))
  :qid |qp.fvfValDef169|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@254@01 r) 8) (<= 0 (inv@254@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@324@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@252@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@324@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@252@01)) r))
  :qid |qp.fvfValDef170|)))
(declare-const j_V4@325@01 Int)
(set-option :timeout 0)
(push) ; 9
; [eval] 0 <= j_V4 && j_V4 < 8
; [eval] 0 <= j_V4
(push) ; 10
; [then-branch: 58 | 0 <= j_V4@325@01 | live]
; [else-branch: 58 | !(0 <= j_V4@325@01) | live]
(push) ; 11
; [then-branch: 58 | 0 <= j_V4@325@01]
(assert (<= 0 j_V4@325@01))
; [eval] j_V4 < 8
(pop) ; 11
(push) ; 11
; [else-branch: 58 | !(0 <= j_V4@325@01)]
(assert (not (<= 0 j_V4@325@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 j_V4@325@01)) (<= 0 j_V4@325@01)))
(assert (and (< j_V4@325@01 8) (<= 0 j_V4@325@01)))
; [eval] (ShArrayloc(unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1), j_V4): Ref)
; [eval] unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref(dstIA_V1)
(push) ; 10
(pop) ; 10
; Joined path conditions
(pop) ; 9
(declare-fun inv@326@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((j_V4@325@01 Int)) (!
  (=>
    (and (< j_V4@325@01 8) (<= 0 j_V4@325@01))
    (or (not (<= 0 j_V4@325@01)) (<= 0 j_V4@325@01)))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V4@325@01))
  :qid |Intbyte$$$$_E_$$$-aux|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((j_V41@325@01 Int) (j_V42@325@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (and (< j_V41@325@01 8) (<= 0 j_V41@325@01))
          (and (< j_V42@325@01 8) (<= 0 j_V42@325@01)))
        (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
      (and
        (and (< j_V41@325@01 8) (<= 0 j_V41@325@01))
        (and (< j_V42@325@01 8) (<= 0 j_V42@325@01))
        (=
          (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V41@325@01)
          (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V42@325@01))))
    (= j_V41@325@01 j_V42@325@01))
  
  :qid |Intbyte$$$$_E_$$$-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((j_V4@325@01 Int)) (!
  (=>
    (and (< j_V4@325@01 8) (<= 0 j_V4@325@01))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V4@325@01))
  :qid |Intbyte$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@326@01 r) 8) (<= 0 (inv@326@01 r)))
    (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref%precondition $Snap.unit dstIA_V1@32@01))
  :pattern ((inv@326@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
(assert (forall ((j_V4@325@01 Int)) (!
  (=>
    (and (< j_V4@325@01 8) (<= 0 j_V4@325@01))
    (=
      (inv@326@01 (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V4@325@01))
      j_V4@325@01))
  :pattern ((ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) j_V4@325@01))
  :qid |Intbyte$$$$_E_$$$-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@326@01 r) 8) (<= 0 (inv@326@01 r)))
    (=
      (ShArrayloc<Ref> (unbox_Emb_8_Intbyte$$$_S_$$$_ShArray_Ref $Snap.unit dstIA_V1@32@01) (inv@326@01 r))
      r))
  :pattern ((inv@326@01 r))
  :qid |Intbyte$$$$_E_$$$-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@327@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@326@01 r) 8) (<= 0 (inv@326@01 r)))
    ($Perm.min
      (-
        (ite
          (and (< (inv@254@01 r) 8) (<= 0 (inv@254@01 r)))
          $Perm.Write
          $Perm.No)
        (pTaken@323@01 r))
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@328@01 ((r $Ref)) $Perm
  (ite
    (and (< (inv@326@01 r) 8) (<= 0 (inv@326@01 r)))
    ($Perm.min
      (-
        (ite
          (and (< (inv@256@01 r) 8) (<= 0 (inv@256@01 r)))
          $Perm.Write
          $Perm.No)
        (pTaken@322@01 r))
      (- $Perm.Write (pTaken@327@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (ite
          (and (< (inv@254@01 r) 8) (<= 0 (inv@254@01 r)))
          $Perm.Write
          $Perm.No)
        (pTaken@323@01 r))
      (pTaken@327@01 r))
    $Perm.No)
  
  :qid |quant-u-286|))))
(check-sat)
; unsat
(pop) ; 9
; 0.05s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@326@01 r) 8) (<= 0 (inv@326@01 r)))
    (= (- $Perm.Write (pTaken@327@01 r)) $Perm.No))
  
  :qid |quant-u-287|))))
(check-sat)
; unknown
(pop) ; 9
; 0.09s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (-
        (ite
          (and (< (inv@256@01 r) 8) (<= 0 (inv@256@01 r)))
          $Perm.Write
          $Perm.No)
        (pTaken@322@01 r))
      (pTaken@328@01 r))
    $Perm.No)
  
  :qid |quant-u-288|))))
(check-sat)
; unsat
(pop) ; 9
; 0.05s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (< (inv@326@01 r) 8) (<= 0 (inv@326@01 r)))
    (= (- (- $Perm.Write (pTaken@327@01 r)) (pTaken@328@01 r)) $Perm.No))
  
  :qid |quant-u-289|))))
(check-sat)
; unsat
(pop) ; 9
; 0.08s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@329@01 $FVF<Intbyte$$$$_E_$$$>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite
          (and (< (inv@254@01 r) 8) (<= 0 (inv@254@01 r)))
          $Perm.Write
          $Perm.No)
        (pTaken@323@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@329@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@252@01)) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@329@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first $t@252@01)) r))
  :qid |qp.fvfValDef171|)))
(assert (forall ((r $Ref)) (!
  (=>
    (<
      $Perm.No
      (-
        (ite
          (and (< (inv@256@01 r) 8) (<= 0 (inv@256@01 r)))
          $Perm.Write
          $Perm.No)
        (pTaken@322@01 r)))
    (=
      ($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@329@01  $FVF<Intbyte$$$$_E_$$$>) r)
      ($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first ($Snap.second $t@252@01))) r)))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ (as sm@329@01  $FVF<Intbyte$$$$_E_$$$>) r))
  :pattern (($FVF.lookup_Intbyte$$$$_E_$$$ ($SortWrappers.$SnapTo$FVF<Intbyte$$$$_E_$$$> ($Snap.first ($Snap.second $t@252@01))) r))
  :qid |qp.fvfValDef172|)))
; [eval] i_V2 % 2 == 0
; [eval] i_V2 % 2
(set-option :timeout 0)
(push) ; 9
(assert (not (= (mod i_V2@309@01 2) 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.03s
; (get-info :all-statistics)
(assert (= (mod i_V2@309@01 2) 0))
; [eval] 0 <= i_V2
(push) ; 9
(assert (not (<= 0 i_V2@309@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 i_V2@309@01))
; [eval] i_V2 <= 8
(push) ; 9
(assert (not (<= i_V2@309@01 8)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<= i_V2@309@01 8))
(pop) ; 8
(push) ; 8
; [else-branch: 51 | !(i_V2@309@01 < 8)]
(assert (not (< i_V2@309@01 8)))
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 45 | !(i_V2@251@01 < 8)]
(assert (not (< i_V2@251@01 8)))
(pop) ; 7
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget13of17<Ref> s_V0@17@01) (ShStructget12of17<Ref> s_V0@17@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= (ShStructget11of17<Ref> s_V0@17@01) (ShStructget10of17<Ref> s_V0@17@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (=
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
  (=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01)))
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [eval] !(i_V2 < 8)
; [eval] i_V2 < 8
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< i_V2@251@01 8)))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (< i_V2@251@01 8))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 59 | !(i_V2@251@01 < 8) | live]
; [else-branch: 59 | i_V2@251@01 < 8 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 59 | !(i_V2@251@01 < 8)]
(assert (not (< i_V2@251@01 8)))
; [exec]
; label L$25$1$Break
; [exec]
; inhale rawSrcAddrLen_V1 == 0
(declare-const $t@330@01 $Snap)
(assert (= $t@330@01 $Snap.unit))
; [eval] rawSrcAddrLen_V1 == 0
(assert (= rawSrcAddrLen_V1@31@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; rawSrcAddrLen_V1 := (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(declare-const rawSrcAddrLen_V1@331@01 Int)
(assert (=
  rawSrcAddrLen_V1@331@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01)))))
; [exec]
; inhale i_V5 == 0
(declare-const $t@332@01 $Snap)
(assert (= $t@332@01 $Snap.unit))
; [eval] i_V5 == 0
(assert (= i_V5@44@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; i_V5 := 0
(declare-const old_W8_T0@333@01 Int)
(declare-const csum_V1@334@01 Int)
(declare-const i_V5@335@01 Int)
(set-option :timeout 0)
(push) ; 8
; Loop head block: Check well-definedness of invariant
(declare-const $t@336@01 $Snap)
(assert (= $t@336@01 ($Snap.combine ($Snap.first $t@336@01) ($Snap.second $t@336@01))))
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(assert (=
  ($Snap.second $t@336@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@336@01))
    ($Snap.second ($Snap.second $t@336@01)))))
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(assert (=
  ($Snap.second ($Snap.second $t@336@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@336@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@336@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@336@01))) $Snap.unit))
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == rawSrcAddrLen_V1
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01)))
  rawSrcAddrLen_V1@331@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@336@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@336@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@336@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@336@01))))
  $Snap.unit))
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2 == 0
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(assert (=
  (mod (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01))) 2)
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@336@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@336@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@336@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@336@01)))))
  $Snap.unit))
; [eval] i_V5 % 2 == 0
; [eval] i_V5 % 2
(assert (= (mod i_V5@335@01 2) 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@336@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@336@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@336@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@336@01))))))
  $Snap.unit))
; [eval] 0 <= i_V5
(assert (<= 0 i_V5@335@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@336@01))))))
  $Snap.unit))
; [eval] i_V5 <= (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(assert (<=
  i_V5@335@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01)))))
; Loop head block: Check well-definedness of edge conditions
(push) ; 9
; [eval] i_V5 < (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(pop) ; 9
(push) ; 9
; [eval] !(i_V5 < (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int))
; [eval] i_V5 < (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(pop) ; 9
(pop) ; 8
(push) ; 8
; Loop head block: Establish invariant
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == rawSrcAddrLen_V1
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(push) ; 9
(assert (not (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01)))
  rawSrcAddrLen_V1@331@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01)))
  rawSrcAddrLen_V1@331@01))
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2 == 0
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
; [eval] i_V5 % 2 == 0
; [eval] i_V5 % 2
; [eval] 0 <= i_V5
; [eval] i_V5 <= (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(push) ; 9
(assert (not (<= 0 (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01)))))
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 9
(assert (= $t@336@01 ($Snap.combine ($Snap.first $t@336@01) ($Snap.second $t@336@01))))
(assert (=
  ($Snap.second $t@336@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@336@01))
    ($Snap.second ($Snap.second $t@336@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@336@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@336@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@336@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@336@01))) $Snap.unit))
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01)))
  rawSrcAddrLen_V1@331@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@336@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@336@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@336@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@336@01))))
  $Snap.unit))
(assert (=
  (mod (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01))) 2)
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@336@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@336@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@336@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@336@01)))))
  $Snap.unit))
(assert (= (mod i_V5@335@01 2) 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@336@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@336@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@336@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@336@01))))))
  $Snap.unit))
(assert (<= 0 i_V5@335@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@336@01))))))
  $Snap.unit))
(assert (<=
  i_V5@335@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01)))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] i_V5 < (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (<
    i_V5@335@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (<
  i_V5@335@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01))))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 60 | i_V5@335@01 < slen[Int](First:($t@336@01)) | live]
; [else-branch: 60 | !(i_V5@335@01 < slen[Int](First:($t@336@01))) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 60 | i_V5@335@01 < slen[Int](First:($t@336@01))]
(assert (<
  i_V5@335@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01)))))
; [exec]
; var old_W8_T0: Int
(declare-const old_W8_T0@337@01 Int)
; [exec]
; old_W8_T0 := (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) -
;   i_V5
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V5
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(declare-const old_W8_T0@338@01 Int)
(assert (=
  old_W8_T0@338@01
  (-
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01)))
    i_V5@335@01)))
; [exec]
; csum_V1 := pseudoHeaderChecksum_840d9458_PMSCION$L$45$2(s_V0_CN0, csum_V1, i_V5,
;   err_V0_CN4)
; [eval] (ShStructget13of17(s_V0_CN0$in): Ref)
; [eval] (ShStructget13of17(s_V0_CN0$in): Ref)
; [eval] (slen((ShStructget13of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0$in): Ref)
; [eval] 0 <= i_V5$in
; [eval] i_V5$in < (slen((ShStructget13of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget13of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0$in): Ref)
; [eval] i_V5$in % 2 == 0
; [eval] i_V5$in % 2
; [eval] (slen((ShStructget13of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2 == 0
; [eval] (slen((ShStructget13of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2
; [eval] (slen((ShStructget13of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0$in): Ref)
; [eval] err_V0_CN4$in == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(declare-const csum_V1$out@339@01 Int)
(declare-const $t@340@01 $Snap)
(assert (= $t@340@01 ($Snap.combine ($Snap.first $t@340@01) ($Snap.second $t@340@01))))
(assert (= ($Snap.first $t@340@01) $Snap.unit))
; [eval] err_V0_CN4$in == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (=
  ($Snap.second $t@340@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@340@01))
    ($Snap.second ($Snap.second $t@340@01)))))
; [eval] (ShStructget13of17(s_V0_CN0$in): Ref)
(assert (=
  ($Snap.second ($Snap.second $t@340@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@340@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))
; [eval] (ShStructget13of17(s_V0_CN0$in): Ref)
; [eval] (slen((ShStructget13of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0$in): Ref)
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@340@01))) $Snap.unit))
; [eval] (ShStructget13of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ == old((ShStructget13of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$)
; [eval] (ShStructget13of17(s_V0_CN0$in): Ref)
; [eval] old((ShStructget13of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$)
; [eval] (ShStructget13of17(s_V0_CN0$in): Ref)
(assert (=
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01)))
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label L$38$1$Continue
; [exec]
; i_V5 := i_V5 + 2
; [eval] i_V5 + 2
(declare-const i_V5@341@01 Int)
(assert (= i_V5@341@01 (+ i_V5@335@01 2)))
; [eval] !(i_V5 < (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int))
; [eval] i_V5 < (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  i_V5@341@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (<
    i_V5@341@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 61 | !(i_V5@341@01 < slen[Int](First:(Second:($t@340@01)))) | live]
; [else-branch: 61 | i_V5@341@01 < slen[Int](First:(Second:($t@340@01))) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 61 | !(i_V5@341@01 < slen[Int](First:(Second:($t@340@01))))]
(assert (not
  (<
    i_V5@341@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01)))))))
; [exec]
; assert true &&
;   i_V5 <
;   (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) ==>
;   (decreasing((slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) -
;   i_V5, old_W8_T0): Bool) &&
;   (bounded(old_W8_T0): Bool) ||
;   (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) -
;   i_V5 ==
;   old_W8_T0 &&
;   false
; [eval] true && i_V5 < (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) ==> (decreasing((slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V5, old_W8_T0): Bool) && (bounded(old_W8_T0): Bool) || (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V5 == old_W8_T0 && false
; [eval] true && i_V5 < (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
(push) ; 12
; [then-branch: 62 | True | live]
; [else-branch: 62 | False | live]
(push) ; 13
; [then-branch: 62 | True]
; [eval] i_V5 < (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(pop) ; 13
(push) ; 13
; [else-branch: 62 | False]
(assert false)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 63 | i_V5@341@01 < slen[Int](First:(Second:($t@340@01))) | dead]
; [else-branch: 63 | !(i_V5@341@01 < slen[Int](First:(Second:($t@340@01)))) | live]
(push) ; 13
; [else-branch: 63 | !(i_V5@341@01 < slen[Int](First:(Second:($t@340@01))))]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == rawSrcAddrLen_V1
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(push) ; 12
(assert (not (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
  rawSrcAddrLen_V1@331@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
  rawSrcAddrLen_V1@331@01))
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2 == 0
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(push) ; 12
(assert (not (=
  (mod
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  (mod
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
    2)
  0))
; [eval] i_V5 % 2 == 0
; [eval] i_V5 % 2
(push) ; 12
(assert (not (= (mod i_V5@341@01 2) 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.03s
; (get-info :all-statistics)
(assert (= (mod i_V5@341@01 2) 0))
; [eval] 0 <= i_V5
(push) ; 12
(assert (not (<= 0 i_V5@341@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 i_V5@341@01))
; [eval] i_V5 <= (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(push) ; 12
(assert (not (<=
  i_V5@341@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(assert (<=
  i_V5@341@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))))
(pop) ; 11
(push) ; 11
; [else-branch: 61 | i_V5@341@01 < slen[Int](First:(Second:($t@340@01)))]
(assert (<
  i_V5@341@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))))
(pop) ; 11
; [eval] i_V5 < (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (<
    i_V5@341@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (<
  i_V5@341@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 64 | i_V5@341@01 < slen[Int](First:(Second:($t@340@01))) | live]
; [else-branch: 64 | !(i_V5@341@01 < slen[Int](First:(Second:($t@340@01)))) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 64 | i_V5@341@01 < slen[Int](First:(Second:($t@340@01)))]
(assert (<
  i_V5@341@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))))
; [exec]
; assert true &&
;   i_V5 <
;   (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) ==>
;   (decreasing((slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) -
;   i_V5, old_W8_T0): Bool) &&
;   (bounded(old_W8_T0): Bool) ||
;   (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) -
;   i_V5 ==
;   old_W8_T0 &&
;   false
; [eval] true && i_V5 < (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) ==> (decreasing((slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V5, old_W8_T0): Bool) && (bounded(old_W8_T0): Bool) || (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V5 == old_W8_T0 && false
; [eval] true && i_V5 < (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
(push) ; 12
; [then-branch: 65 | True | live]
; [else-branch: 65 | False | live]
(push) ; 13
; [then-branch: 65 | True]
; [eval] i_V5 < (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(pop) ; 13
(push) ; 13
; [else-branch: 65 | False]
(assert false)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (<
    i_V5@341@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 66 | i_V5@341@01 < slen[Int](First:(Second:($t@340@01))) | live]
; [else-branch: 66 | !(i_V5@341@01 < slen[Int](First:(Second:($t@340@01)))) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 66 | i_V5@341@01 < slen[Int](First:(Second:($t@340@01)))]
; [eval] (decreasing((slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V5, old_W8_T0): Bool) && (bounded(old_W8_T0): Bool) || (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V5 == old_W8_T0 && false
; [eval] (decreasing((slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V5, old_W8_T0): Bool) && (bounded(old_W8_T0): Bool)
; [eval] (decreasing((slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V5, old_W8_T0): Bool)
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V5
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(push) ; 14
; [then-branch: 67 | decreasing[Bool](slen[Int](First:(Second:($t@340@01))) - i_V5@341@01, old_W8_T0@338@01) | live]
; [else-branch: 67 | !(decreasing[Bool](slen[Int](First:(Second:($t@340@01))) - i_V5@341@01, old_W8_T0@338@01)) | live]
(push) ; 15
; [then-branch: 67 | decreasing[Bool](slen[Int](First:(Second:($t@340@01))) - i_V5@341@01, old_W8_T0@338@01)]
(assert (decreasing<Bool> (-
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
  i_V5@341@01) old_W8_T0@338@01))
; [eval] (bounded(old_W8_T0): Bool)
(pop) ; 15
(push) ; 15
; [else-branch: 67 | !(decreasing[Bool](slen[Int](First:(Second:($t@340@01))) - i_V5@341@01, old_W8_T0@338@01))]
(assert (not
  (decreasing<Bool> (-
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
    i_V5@341@01) old_W8_T0@338@01)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (decreasing<Bool> (-
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
      i_V5@341@01) old_W8_T0@338@01))
  (decreasing<Bool> (-
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
    i_V5@341@01) old_W8_T0@338@01)))
(push) ; 14
; [then-branch: 68 | bounded[Bool](old_W8_T0@338@01) && decreasing[Bool](slen[Int](First:(Second:($t@340@01))) - i_V5@341@01, old_W8_T0@338@01) | live]
; [else-branch: 68 | !(bounded[Bool](old_W8_T0@338@01) && decreasing[Bool](slen[Int](First:(Second:($t@340@01))) - i_V5@341@01, old_W8_T0@338@01)) | live]
(push) ; 15
; [then-branch: 68 | bounded[Bool](old_W8_T0@338@01) && decreasing[Bool](slen[Int](First:(Second:($t@340@01))) - i_V5@341@01, old_W8_T0@338@01)]
(assert (and
  (bounded<Bool> old_W8_T0@338@01)
  (decreasing<Bool> (-
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
    i_V5@341@01) old_W8_T0@338@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 68 | !(bounded[Bool](old_W8_T0@338@01) && decreasing[Bool](slen[Int](First:(Second:($t@340@01))) - i_V5@341@01, old_W8_T0@338@01))]
(assert (not
  (and
    (bounded<Bool> old_W8_T0@338@01)
    (decreasing<Bool> (-
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
      i_V5@341@01) old_W8_T0@338@01))))
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V5 == old_W8_T0 && false
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V5 == old_W8_T0
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V5
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(push) ; 16
; [then-branch: 69 | slen[Int](First:(Second:($t@340@01))) - i_V5@341@01 == old_W8_T0@338@01 | live]
; [else-branch: 69 | slen[Int](First:(Second:($t@340@01))) - i_V5@341@01 != old_W8_T0@338@01 | live]
(push) ; 17
; [then-branch: 69 | slen[Int](First:(Second:($t@340@01))) - i_V5@341@01 == old_W8_T0@338@01]
(assert (=
  (-
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
    i_V5@341@01)
  old_W8_T0@338@01))
(pop) ; 17
(push) ; 17
; [else-branch: 69 | slen[Int](First:(Second:($t@340@01))) - i_V5@341@01 != old_W8_T0@338@01]
(assert (not
  (=
    (-
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
      i_V5@341@01)
    old_W8_T0@338@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      (-
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
        i_V5@341@01)
      old_W8_T0@338@01))
  (=
    (-
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
      i_V5@341@01)
    old_W8_T0@338@01)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (bounded<Bool> old_W8_T0@338@01)
      (decreasing<Bool> (-
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
        i_V5@341@01) old_W8_T0@338@01)))
  (and
    (not
      (and
        (bounded<Bool> old_W8_T0@338@01)
        (decreasing<Bool> (-
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
          i_V5@341@01) old_W8_T0@338@01)))
    (or
      (not
        (=
          (-
            (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
            i_V5@341@01)
          old_W8_T0@338@01))
      (=
        (-
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
          i_V5@341@01)
        old_W8_T0@338@01)))))
(assert (or
  (not
    (and
      (bounded<Bool> old_W8_T0@338@01)
      (decreasing<Bool> (-
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
        i_V5@341@01) old_W8_T0@338@01)))
  (and
    (bounded<Bool> old_W8_T0@338@01)
    (decreasing<Bool> (-
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
      i_V5@341@01) old_W8_T0@338@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (<
    i_V5@341@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01)))))
  (and
    (or
      (not
        (decreasing<Bool> (-
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
          i_V5@341@01) old_W8_T0@338@01))
      (decreasing<Bool> (-
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
        i_V5@341@01) old_W8_T0@338@01))
    (=>
      (not
        (and
          (bounded<Bool> old_W8_T0@338@01)
          (decreasing<Bool> (-
            (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
            i_V5@341@01) old_W8_T0@338@01)))
      (and
        (not
          (and
            (bounded<Bool> old_W8_T0@338@01)
            (decreasing<Bool> (-
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
              i_V5@341@01) old_W8_T0@338@01)))
        (or
          (not
            (=
              (-
                (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
                i_V5@341@01)
              old_W8_T0@338@01))
          (=
            (-
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
              i_V5@341@01)
            old_W8_T0@338@01))))
    (or
      (not
        (and
          (bounded<Bool> old_W8_T0@338@01)
          (decreasing<Bool> (-
            (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
            i_V5@341@01) old_W8_T0@338@01)))
      (and
        (bounded<Bool> old_W8_T0@338@01)
        (decreasing<Bool> (-
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
          i_V5@341@01) old_W8_T0@338@01))))))
(push) ; 12
(assert (not (=>
  (<
    i_V5@341@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01)))))
  (and
    (bounded<Bool> old_W8_T0@338@01)
    (decreasing<Bool> (-
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
      i_V5@341@01) old_W8_T0@338@01)))))
(check-sat)
; unsat
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(assert (=>
  (<
    i_V5@341@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01)))))
  (and
    (bounded<Bool> old_W8_T0@338@01)
    (decreasing<Bool> (-
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
      i_V5@341@01) old_W8_T0@338@01))))
; Loop head block: Re-establish invariant
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == rawSrcAddrLen_V1
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(push) ; 12
(assert (not (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
  rawSrcAddrLen_V1@331@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
  rawSrcAddrLen_V1@331@01))
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2 == 0
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(push) ; 12
(assert (not (=
  (mod
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  (mod
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))
    2)
  0))
; [eval] i_V5 % 2 == 0
; [eval] i_V5 % 2
(push) ; 12
(assert (not (= (mod i_V5@341@01 2) 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(assert (= (mod i_V5@341@01 2) 0))
; [eval] 0 <= i_V5
(push) ; 12
(assert (not (<= 0 i_V5@341@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 i_V5@341@01))
; [eval] i_V5 <= (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(push) ; 12
(assert (not (<=
  i_V5@341@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<=
  i_V5@341@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01))))))
(pop) ; 11
(push) ; 11
; [else-branch: 64 | !(i_V5@341@01 < slen[Int](First:(Second:($t@340@01))))]
(assert (not
  (<
    i_V5@341@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@340@01)))))))
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 60 | !(i_V5@335@01 < slen[Int](First:($t@336@01)))]
(assert (not
  (<
    i_V5@335@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01))))))
(pop) ; 10
(push) ; 10
(set-option :timeout 10)
(assert (not (= (ShStructget13of17<Ref> s_V0@17@01) (ShStructget12of17<Ref> s_V0@17@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (= (ShStructget11of17<Ref> s_V0@17@01) (ShStructget10of17<Ref> s_V0@17@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (=
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01))
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
  (=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01)))
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [eval] !(i_V5 < (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int))
; [eval] i_V5 < (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget13of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (<
  i_V5@335@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01))))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (<
    i_V5@335@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 70 | !(i_V5@335@01 < slen[Int](First:($t@336@01))) | live]
; [else-branch: 70 | i_V5@335@01 < slen[Int](First:($t@336@01)) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 70 | !(i_V5@335@01 < slen[Int](First:($t@336@01)))]
(assert (not
  (<
    i_V5@335@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01))))))
; [exec]
; label L$38$1$Break
; [exec]
; inhale rawDstAddrLen_V1 == 0
(declare-const $t@342@01 $Snap)
(assert (= $t@342@01 $Snap.unit))
; [eval] rawDstAddrLen_V1 == 0
(assert (= rawDstAddrLen_V1@30@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; rawDstAddrLen_V1 := (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(declare-const rawDstAddrLen_V1@343@01 Int)
(assert (=
  rawDstAddrLen_V1@343@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))))
; [exec]
; inhale i_V6 == 0
(declare-const $t@344@01 $Snap)
(assert (= $t@344@01 $Snap.unit))
; [eval] i_V6 == 0
(assert (= i_V6@45@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; i_V6 := 0
(declare-const old_W9_T0@345@01 Int)
(declare-const csum_V1@346@01 Int)
(declare-const i_V6@347@01 Int)
(set-option :timeout 0)
(push) ; 11
; Loop head block: Check well-definedness of invariant
(declare-const $t@348@01 $Snap)
(assert (= $t@348@01 ($Snap.combine ($Snap.first $t@348@01) ($Snap.second $t@348@01))))
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(assert (=
  ($Snap.second $t@348@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@348@01))
    ($Snap.second ($Snap.second $t@348@01)))))
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(assert (=
  ($Snap.second ($Snap.second $t@348@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@348@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@348@01))) $Snap.unit))
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == rawDstAddrLen_V1
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01)))
  rawDstAddrLen_V1@343@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@348@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@348@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@348@01))))
  $Snap.unit))
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2 == 0
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(assert (=
  (mod (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01))) 2)
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))
  $Snap.unit))
; [eval] i_V6 % 2 == 0
; [eval] i_V6 % 2
(assert (= (mod i_V6@347@01 2) 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))
  $Snap.unit))
; [eval] 0 <= i_V6
(assert (<= 0 i_V6@347@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))
  $Snap.unit))
; [eval] i_V6 <= (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(assert (<=
  i_V6@347@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01)))))
; Loop head block: Check well-definedness of edge conditions
(push) ; 12
; [eval] i_V6 < (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(pop) ; 12
(push) ; 12
; [eval] !(i_V6 < (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int))
; [eval] i_V6 < (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(pop) ; 12
(pop) ; 11
(push) ; 11
; Loop head block: Establish invariant
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == rawDstAddrLen_V1
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(push) ; 12
(assert (not (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
  rawDstAddrLen_V1@343@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
  rawDstAddrLen_V1@343@01))
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2 == 0
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
; [eval] i_V6 % 2 == 0
; [eval] i_V6 % 2
; [eval] 0 <= i_V6
; [eval] i_V6 <= (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(push) ; 12
(assert (not (<=
  0
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))))
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 12
(assert (= $t@348@01 ($Snap.combine ($Snap.first $t@348@01) ($Snap.second $t@348@01))))
(assert (=
  ($Snap.second $t@348@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@348@01))
    ($Snap.second ($Snap.second $t@348@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@348@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@348@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@348@01))) $Snap.unit))
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01)))
  rawDstAddrLen_V1@343@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@348@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@348@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@348@01))))
  $Snap.unit))
(assert (=
  (mod (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01))) 2)
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))
  $Snap.unit))
(assert (= (mod i_V6@347@01 2) 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))
  $Snap.unit))
(assert (<= 0 i_V6@347@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@348@01))))))
  $Snap.unit))
(assert (<=
  i_V6@347@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01)))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] i_V6 < (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (<
    i_V6@347@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (<
  i_V6@347@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01))))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 71 | i_V6@347@01 < slen[Int](First:($t@348@01)) | live]
; [else-branch: 71 | !(i_V6@347@01 < slen[Int](First:($t@348@01))) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 71 | i_V6@347@01 < slen[Int](First:($t@348@01))]
(assert (<
  i_V6@347@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01)))))
; [exec]
; var old_W9_T0: Int
(declare-const old_W9_T0@349@01 Int)
; [exec]
; old_W9_T0 := (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) -
;   i_V6
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V6
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(declare-const old_W9_T0@350@01 Int)
(assert (=
  old_W9_T0@350@01
  (-
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01)))
    i_V6@347@01)))
; [exec]
; csum_V1 := pseudoHeaderChecksum_840d9458_PMSCION$L$66$2(s_V0_CN0, csum_V1, i_V6,
;   err_V0_CN4)
; [eval] (ShStructget12of17(s_V0_CN0$in): Ref)
; [eval] (ShStructget12of17(s_V0_CN0$in): Ref)
; [eval] (slen((ShStructget12of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0$in): Ref)
; [eval] 0 <= i_V6$in
; [eval] i_V6$in < (slen((ShStructget12of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget12of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0$in): Ref)
; [eval] i_V6$in % 2 == 0
; [eval] i_V6$in % 2
; [eval] (slen((ShStructget12of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2 == 0
; [eval] (slen((ShStructget12of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2
; [eval] (slen((ShStructget12of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0$in): Ref)
; [eval] err_V0_CN4$in == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(declare-const csum_V1$out@351@01 Int)
(declare-const $t@352@01 $Snap)
(assert (= $t@352@01 ($Snap.combine ($Snap.first $t@352@01) ($Snap.second $t@352@01))))
(assert (= ($Snap.first $t@352@01) $Snap.unit))
; [eval] err_V0_CN4$in == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (=
  ($Snap.second $t@352@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@352@01))
    ($Snap.second ($Snap.second $t@352@01)))))
; [eval] (ShStructget12of17(s_V0_CN0$in): Ref)
(assert (=
  ($Snap.second ($Snap.second $t@352@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@352@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@352@01))))))
; [eval] (ShStructget12of17(s_V0_CN0$in): Ref)
; [eval] (slen((ShStructget12of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0$in): Ref)
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@352@01))) $Snap.unit))
; [eval] (ShStructget12of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ == old((ShStructget12of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$)
; [eval] (ShStructget12of17(s_V0_CN0$in): Ref)
; [eval] old((ShStructget12of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$)
; [eval] (ShStructget12of17(s_V0_CN0$in): Ref)
(assert (=
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01)))
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label L$59$1$Continue
; [exec]
; i_V6 := i_V6 + 2
; [eval] i_V6 + 2
(declare-const i_V6@353@01 Int)
(assert (= i_V6@353@01 (+ i_V6@347@01 2)))
; [eval] !(i_V6 < (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int))
; [eval] i_V6 < (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (<
  i_V6@353@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (<
    i_V6@353@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 72 | !(i_V6@353@01 < slen[Int](First:(Second:($t@352@01)))) | live]
; [else-branch: 72 | i_V6@353@01 < slen[Int](First:(Second:($t@352@01))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 72 | !(i_V6@353@01 < slen[Int](First:(Second:($t@352@01))))]
(assert (not
  (<
    i_V6@353@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01)))))))
; [exec]
; assert true &&
;   i_V6 <
;   (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) ==>
;   (decreasing((slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) -
;   i_V6, old_W9_T0): Bool) &&
;   (bounded(old_W9_T0): Bool) ||
;   (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) -
;   i_V6 ==
;   old_W9_T0 &&
;   false
; [eval] true && i_V6 < (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) ==> (decreasing((slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V6, old_W9_T0): Bool) && (bounded(old_W9_T0): Bool) || (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V6 == old_W9_T0 && false
; [eval] true && i_V6 < (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
(push) ; 15
; [then-branch: 73 | True | live]
; [else-branch: 73 | False | live]
(push) ; 16
; [then-branch: 73 | True]
; [eval] i_V6 < (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(pop) ; 16
(push) ; 16
; [else-branch: 73 | False]
(assert false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
; [then-branch: 74 | i_V6@353@01 < slen[Int](First:(Second:($t@352@01))) | dead]
; [else-branch: 74 | !(i_V6@353@01 < slen[Int](First:(Second:($t@352@01)))) | live]
(push) ; 16
; [else-branch: 74 | !(i_V6@353@01 < slen[Int](First:(Second:($t@352@01))))]
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Loop head block: Re-establish invariant
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == rawDstAddrLen_V1
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(push) ; 15
(assert (not (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
  rawDstAddrLen_V1@343@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
  rawDstAddrLen_V1@343@01))
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2 == 0
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(push) ; 15
(assert (not (=
  (mod
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  (mod
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
    2)
  0))
; [eval] i_V6 % 2 == 0
; [eval] i_V6 % 2
(push) ; 15
(assert (not (= (mod i_V6@353@01 2) 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.02s
; (get-info :all-statistics)
(assert (= (mod i_V6@353@01 2) 0))
; [eval] 0 <= i_V6
(push) ; 15
(assert (not (<= 0 i_V6@353@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 i_V6@353@01))
; [eval] i_V6 <= (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(push) ; 15
(assert (not (<=
  i_V6@353@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01)))))))
(check-sat)
; unsat
(pop) ; 15
; 0.03s
; (get-info :all-statistics)
(assert (<=
  i_V6@353@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))))
(pop) ; 14
(push) ; 14
; [else-branch: 72 | i_V6@353@01 < slen[Int](First:(Second:($t@352@01)))]
(assert (<
  i_V6@353@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))))
(pop) ; 14
; [eval] i_V6 < (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (<
    i_V6@353@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (<
  i_V6@353@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 75 | i_V6@353@01 < slen[Int](First:(Second:($t@352@01))) | live]
; [else-branch: 75 | !(i_V6@353@01 < slen[Int](First:(Second:($t@352@01)))) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 75 | i_V6@353@01 < slen[Int](First:(Second:($t@352@01)))]
(assert (<
  i_V6@353@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))))
; [exec]
; assert true &&
;   i_V6 <
;   (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) ==>
;   (decreasing((slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) -
;   i_V6, old_W9_T0): Bool) &&
;   (bounded(old_W9_T0): Bool) ||
;   (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) -
;   i_V6 ==
;   old_W9_T0 &&
;   false
; [eval] true && i_V6 < (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) ==> (decreasing((slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V6, old_W9_T0): Bool) && (bounded(old_W9_T0): Bool) || (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V6 == old_W9_T0 && false
; [eval] true && i_V6 < (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
(push) ; 15
; [then-branch: 76 | True | live]
; [else-branch: 76 | False | live]
(push) ; 16
; [then-branch: 76 | True]
; [eval] i_V6 < (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(pop) ; 16
(push) ; 16
; [else-branch: 76 | False]
(assert false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (<
    i_V6@353@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))))))
(check-sat)
; unknown
(pop) ; 16
; 0.01s
; (get-info :all-statistics)
; [then-branch: 77 | i_V6@353@01 < slen[Int](First:(Second:($t@352@01))) | live]
; [else-branch: 77 | !(i_V6@353@01 < slen[Int](First:(Second:($t@352@01)))) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 77 | i_V6@353@01 < slen[Int](First:(Second:($t@352@01)))]
; [eval] (decreasing((slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V6, old_W9_T0): Bool) && (bounded(old_W9_T0): Bool) || (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V6 == old_W9_T0 && false
; [eval] (decreasing((slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V6, old_W9_T0): Bool) && (bounded(old_W9_T0): Bool)
; [eval] (decreasing((slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V6, old_W9_T0): Bool)
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V6
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(push) ; 17
; [then-branch: 78 | decreasing[Bool](slen[Int](First:(Second:($t@352@01))) - i_V6@353@01, old_W9_T0@350@01) | live]
; [else-branch: 78 | !(decreasing[Bool](slen[Int](First:(Second:($t@352@01))) - i_V6@353@01, old_W9_T0@350@01)) | live]
(push) ; 18
; [then-branch: 78 | decreasing[Bool](slen[Int](First:(Second:($t@352@01))) - i_V6@353@01, old_W9_T0@350@01)]
(assert (decreasing<Bool> (-
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
  i_V6@353@01) old_W9_T0@350@01))
; [eval] (bounded(old_W9_T0): Bool)
(pop) ; 18
(push) ; 18
; [else-branch: 78 | !(decreasing[Bool](slen[Int](First:(Second:($t@352@01))) - i_V6@353@01, old_W9_T0@350@01))]
(assert (not
  (decreasing<Bool> (-
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
    i_V6@353@01) old_W9_T0@350@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (decreasing<Bool> (-
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
      i_V6@353@01) old_W9_T0@350@01))
  (decreasing<Bool> (-
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
    i_V6@353@01) old_W9_T0@350@01)))
(push) ; 17
; [then-branch: 79 | bounded[Bool](old_W9_T0@350@01) && decreasing[Bool](slen[Int](First:(Second:($t@352@01))) - i_V6@353@01, old_W9_T0@350@01) | live]
; [else-branch: 79 | !(bounded[Bool](old_W9_T0@350@01) && decreasing[Bool](slen[Int](First:(Second:($t@352@01))) - i_V6@353@01, old_W9_T0@350@01)) | live]
(push) ; 18
; [then-branch: 79 | bounded[Bool](old_W9_T0@350@01) && decreasing[Bool](slen[Int](First:(Second:($t@352@01))) - i_V6@353@01, old_W9_T0@350@01)]
(assert (and
  (bounded<Bool> old_W9_T0@350@01)
  (decreasing<Bool> (-
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
    i_V6@353@01) old_W9_T0@350@01)))
(pop) ; 18
(push) ; 18
; [else-branch: 79 | !(bounded[Bool](old_W9_T0@350@01) && decreasing[Bool](slen[Int](First:(Second:($t@352@01))) - i_V6@353@01, old_W9_T0@350@01))]
(assert (not
  (and
    (bounded<Bool> old_W9_T0@350@01)
    (decreasing<Bool> (-
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
      i_V6@353@01) old_W9_T0@350@01))))
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V6 == old_W9_T0 && false
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V6 == old_W9_T0
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) - i_V6
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(push) ; 19
; [then-branch: 80 | slen[Int](First:(Second:($t@352@01))) - i_V6@353@01 == old_W9_T0@350@01 | live]
; [else-branch: 80 | slen[Int](First:(Second:($t@352@01))) - i_V6@353@01 != old_W9_T0@350@01 | live]
(push) ; 20
; [then-branch: 80 | slen[Int](First:(Second:($t@352@01))) - i_V6@353@01 == old_W9_T0@350@01]
(assert (=
  (-
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
    i_V6@353@01)
  old_W9_T0@350@01))
(pop) ; 20
(push) ; 20
; [else-branch: 80 | slen[Int](First:(Second:($t@352@01))) - i_V6@353@01 != old_W9_T0@350@01]
(assert (not
  (=
    (-
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
      i_V6@353@01)
    old_W9_T0@350@01)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (=
      (-
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
        i_V6@353@01)
      old_W9_T0@350@01))
  (=
    (-
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
      i_V6@353@01)
    old_W9_T0@350@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (=>
  (not
    (and
      (bounded<Bool> old_W9_T0@350@01)
      (decreasing<Bool> (-
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
        i_V6@353@01) old_W9_T0@350@01)))
  (and
    (not
      (and
        (bounded<Bool> old_W9_T0@350@01)
        (decreasing<Bool> (-
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
          i_V6@353@01) old_W9_T0@350@01)))
    (or
      (not
        (=
          (-
            (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
            i_V6@353@01)
          old_W9_T0@350@01))
      (=
        (-
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
          i_V6@353@01)
        old_W9_T0@350@01)))))
(assert (or
  (not
    (and
      (bounded<Bool> old_W9_T0@350@01)
      (decreasing<Bool> (-
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
        i_V6@353@01) old_W9_T0@350@01)))
  (and
    (bounded<Bool> old_W9_T0@350@01)
    (decreasing<Bool> (-
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
      i_V6@353@01) old_W9_T0@350@01))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=>
  (<
    i_V6@353@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01)))))
  (and
    (or
      (not
        (decreasing<Bool> (-
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
          i_V6@353@01) old_W9_T0@350@01))
      (decreasing<Bool> (-
        (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
        i_V6@353@01) old_W9_T0@350@01))
    (=>
      (not
        (and
          (bounded<Bool> old_W9_T0@350@01)
          (decreasing<Bool> (-
            (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
            i_V6@353@01) old_W9_T0@350@01)))
      (and
        (not
          (and
            (bounded<Bool> old_W9_T0@350@01)
            (decreasing<Bool> (-
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
              i_V6@353@01) old_W9_T0@350@01)))
        (or
          (not
            (=
              (-
                (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
                i_V6@353@01)
              old_W9_T0@350@01))
          (=
            (-
              (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
              i_V6@353@01)
            old_W9_T0@350@01))))
    (or
      (not
        (and
          (bounded<Bool> old_W9_T0@350@01)
          (decreasing<Bool> (-
            (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
            i_V6@353@01) old_W9_T0@350@01)))
      (and
        (bounded<Bool> old_W9_T0@350@01)
        (decreasing<Bool> (-
          (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
          i_V6@353@01) old_W9_T0@350@01))))))
(push) ; 15
(assert (not (=>
  (<
    i_V6@353@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01)))))
  (and
    (bounded<Bool> old_W9_T0@350@01)
    (decreasing<Bool> (-
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
      i_V6@353@01) old_W9_T0@350@01)))))
(check-sat)
; unsat
(pop) ; 15
; 0.02s
; (get-info :all-statistics)
(assert (=>
  (<
    i_V6@353@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01)))))
  (and
    (bounded<Bool> old_W9_T0@350@01)
    (decreasing<Bool> (-
      (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
      i_V6@353@01) old_W9_T0@350@01))))
; Loop head block: Re-establish invariant
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == rawDstAddrLen_V1
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(push) ; 15
(assert (not (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
  rawDstAddrLen_V1@343@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
  rawDstAddrLen_V1@343@01))
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2 == 0
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(push) ; 15
(assert (not (=
  (mod
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
    2)
  0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  (mod
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))
    2)
  0))
; [eval] i_V6 % 2 == 0
; [eval] i_V6 % 2
(push) ; 15
(assert (not (= (mod i_V6@353@01 2) 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.02s
; (get-info :all-statistics)
(assert (= (mod i_V6@353@01 2) 0))
; [eval] 0 <= i_V6
(push) ; 15
(assert (not (<= 0 i_V6@353@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 i_V6@353@01))
; [eval] i_V6 <= (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(push) ; 15
(assert (not (<=
  i_V6@353@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01)))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (<=
  i_V6@353@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01))))))
(pop) ; 14
(push) ; 14
; [else-branch: 75 | !(i_V6@353@01 < slen[Int](First:(Second:($t@352@01))))]
(assert (not
  (<
    i_V6@353@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@352@01)))))))
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 71 | !(i_V6@347@01 < slen[Int](First:($t@348@01)))]
(assert (not
  (<
    i_V6@347@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01))))))
(pop) ; 13
(push) ; 13
(set-option :timeout 10)
(assert (not (and
  (=
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01))
    ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01)))
  (=
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01)))
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= (ShStructget12of17<Ref> s_V0@17@01) (ShStructget13of17<Ref> s_V0@17@01))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= (ShStructget11of17<Ref> s_V0@17@01) (ShStructget10of17<Ref> s_V0@17@01))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [eval] !(i_V6 < (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int))
; [eval] i_V6 < (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget12of17(s_V0_CN0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0_CN0): Ref)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (<
  i_V6@347@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01))))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (<
    i_V6@347@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 81 | !(i_V6@347@01 < slen[Int](First:($t@348@01))) | live]
; [else-branch: 81 | i_V6@347@01 < slen[Int](First:($t@348@01)) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 81 | !(i_V6@347@01 < slen[Int](First:($t@348@01)))]
(assert (not
  (<
    i_V6@347@01
    (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01))))))
; [exec]
; label L$59$1$Break
; [exec]
; inhale l_V1 == 0
(declare-const $t@354@01 $Snap)
(assert (= $t@354@01 $Snap.unit))
; [eval] l_V1 == 0
(assert (= l_V1@29@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; l_V1 := length_V0_CN1
; [exec]
; csum_V1 := csum_V1 + (intShiftRight(l_V1, 16) + intBitwiseAnd(l_V1, 65535))
; [eval] csum_V1 + (intShiftRight(l_V1, 16) + intBitwiseAnd(l_V1, 65535))
; [eval] intShiftRight(l_V1, 16) + intBitwiseAnd(l_V1, 65535)
; [eval] intShiftRight(l_V1, 16)
(set-option :timeout 0)
(push) ; 14
; [eval] right >= 0
(assert (intShiftRight%precondition $Snap.unit length_V0@18@01 16))
(pop) ; 14
; Joined path conditions
(assert (intShiftRight%precondition $Snap.unit length_V0@18@01 16))
; [eval] intBitwiseAnd(l_V1, 65535)
(push) ; 14
(assert (intBitwiseAnd%precondition $Snap.unit length_V0@18@01 65535))
(pop) ; 14
; Joined path conditions
(assert (intBitwiseAnd%precondition $Snap.unit length_V0@18@01 65535))
(declare-const csum_V1@355@01 Int)
(assert (=
  csum_V1@355@01
  (+
    csum_V1@346@01
    (+
      (intShiftRight $Snap.unit length_V0@18@01 16)
      (intBitwiseAnd $Snap.unit length_V0@18@01 65535)))))
; [exec]
; csum_V1 := csum_V1 + protocol_V0_CN2
; [eval] csum_V1 + protocol_V0_CN2
(declare-const csum_V1@356@01 Int)
(assert (= csum_V1@356@01 (+ csum_V1@355@01 protocol_V0@19@01)))
; [exec]
; res_V0_CN3 := csum_V1
; [exec]
; err_V0_CN4 := (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(declare-const err_V0_CN4@357@01 Tuple2<Ref~_Types>)
(assert (=
  err_V0_CN4@357@01
  (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
; [exec]
; label returnLabel
; [exec]
; res_V0 := res_V0_CN3
; [exec]
; err_V0 := err_V0_CN4
; [eval] (ShStructget13of17(s_V0): Ref)
; [eval] (ShStructget12of17(s_V0): Ref)
; [eval] (ShStructget11of17(s_V0): Ref)
; [eval] (ShStructget10of17(s_V0): Ref)
; [eval] (ShStructget13of17(s_V0): Ref)
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0): Ref)
; [eval] (ShStructget12of17(s_V0): Ref)
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0): Ref)
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == 0 ==> !(err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == 0
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0): Ref)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01))) 0))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 82 | slen[Int](First:($t@348@01)) == 0 | dead]
; [else-branch: 82 | slen[Int](First:($t@348@01)) != 0 | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 82 | slen[Int](First:($t@348@01)) != 0]
(assert (not (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01))) 0)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (not (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01))) 0)))
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == 0 ==> !(err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) == 0
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0): Ref)
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01))) 0))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 83 | slen[Int](First:($t@336@01)) == 0 | dead]
; [else-branch: 83 | slen[Int](First:($t@336@01)) != 0 | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 83 | slen[Int](First:($t@336@01)) != 0]
(assert (not (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01))) 0)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (not (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01))) 0)))
; [eval] !(err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
; [then-branch: 84 | err_V0_CN4@357@01 != tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | dead]
; [else-branch: 84 | err_V0_CN4@357@01 == tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types]) | live]
(push) ; 14
; [else-branch: 84 | err_V0_CN4@357@01 == tuple2[Tuple2[Ref, Types]](Null, nil_Types[Types])]
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0 && (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0 ==> err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0 && (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0
; [eval] (slen((ShStructget12of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget12of17(s_V0): Ref)
(push) ; 15
; [then-branch: 85 | slen[Int](First:($t@348@01)) > 0 | live]
; [else-branch: 85 | !(slen[Int](First:($t@348@01)) > 0) | live]
(push) ; 16
; [then-branch: 85 | slen[Int](First:($t@348@01)) > 0]
(assert (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01))) 0))
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) > 0
; [eval] (slen((ShStructget13of17(s_V0): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0): Ref)
(pop) ; 16
(push) ; 16
; [else-branch: 85 | !(slen[Int](First:($t@348@01)) > 0)]
(assert (not (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01))) 0)))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01))) 0))
  (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01))) 0)))
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not (not
  (and
    (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01))) 0)
    (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01))) 0)))))
(check-sat)
; unknown
(pop) ; 16
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (and
  (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01))) 0)
  (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01))) 0))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 86 | slen[Int](First:($t@336@01)) > 0 && slen[Int](First:($t@348@01)) > 0 | live]
; [else-branch: 86 | !(slen[Int](First:($t@336@01)) > 0 && slen[Int](First:($t@348@01)) > 0) | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 86 | slen[Int](First:($t@336@01)) > 0 && slen[Int](First:($t@348@01)) > 0]
(assert (and
  (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01))) 0)
  (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01))) 0)))
; [eval] err_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (and
  (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01))) 0)
  (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01))) 0)))
(push) ; 15
(assert (not (=>
  (and
    (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01))) 0)
    (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01))) 0))
  (=
    err_V0_CN4@357@01
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01))) 0)
    (> (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01))) 0))
  (=
    err_V0_CN4@357@01
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 81 | i_V6@347@01 < slen[Int](First:($t@348@01))]
(assert (<
  i_V6@347@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@348@01)))))
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 70 | i_V5@335@01 < slen[Int](First:($t@336@01))]
(assert (<
  i_V5@335@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@336@01)))))
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 59 | i_V2@251@01 < 8]
(assert (< i_V2@251@01 8))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 24 | slen[Int](First:($t@22@01)) == 0]
(assert (= (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@22@01))) 0))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 15 | slen[Int](First:(Second:($t@22@01))) == 0]
(assert (=
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@22@01))))
  0))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- pseudoHeaderChecksum_840d9458_PMSCION$L$45$2 ----------
(declare-const s_V0_CN0$in@358@01 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-const csum_V1$in@359@01 Int)
(declare-const i_V5$in@360@01 Int)
(declare-const err_V0_CN4$in@361@01 Tuple2<Ref~_Types>)
(declare-const csum_V1$out@362@01 Int)
(declare-const s_V0_CN0$in@363@01 ShStruct17<ShStruct2<Ref~_Ref>~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref~_Ref>)
(declare-const csum_V1$in@364@01 Int)
(declare-const i_V5$in@365@01 Int)
(declare-const err_V0_CN4$in@366@01 Tuple2<Ref~_Types>)
(declare-const csum_V1$out@367@01 Int)
(push) ; 1
(declare-const $t@368@01 $Snap)
(assert (= $t@368@01 ($Snap.combine ($Snap.first $t@368@01) ($Snap.second $t@368@01))))
; [eval] (ShStructget13of17(s_V0_CN0$in): Ref)
(assert (not (= (ShStructget13of17<Ref> s_V0_CN0$in@363@01) $Ref.null)))
(assert (=
  ($Snap.second $t@368@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@368@01))
    ($Snap.second ($Snap.second $t@368@01)))))
; [eval] (ShStructget13of17(s_V0_CN0$in): Ref)
; [eval] (slen((ShStructget13of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0$in): Ref)
(assert (=
  ($Snap.second ($Snap.second $t@368@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@368@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@368@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@368@01))) $Snap.unit))
; [eval] 0 <= i_V5$in
(assert (<= 0 i_V5$in@365@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@368@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@368@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@368@01))))
  $Snap.unit))
; [eval] i_V5$in < (slen((ShStructget13of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (slen((ShStructget13of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0$in): Ref)
(assert (<
  i_V5$in@365@01
  (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@368@01)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))
  $Snap.unit))
; [eval] i_V5$in % 2 == 0
; [eval] i_V5$in % 2
(assert (= (mod i_V5$in@365@01 2) 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01))))))
  $Snap.unit))
; [eval] (slen((ShStructget13of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2 == 0
; [eval] (slen((ShStructget13of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int) % 2
; [eval] (slen((ShStructget13of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0$in): Ref)
(assert (=
  (mod (slen<Int> ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@368@01))) 2)
  0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@368@01))))))
  $Snap.unit))
; [eval] err_V0_CN4$in == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (=
  err_V0_CN4$in@366@01
  (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@369@01 $Snap)
(assert (= $t@369@01 ($Snap.combine ($Snap.first $t@369@01) ($Snap.second $t@369@01))))
(assert (= ($Snap.first $t@369@01) $Snap.unit))
; [eval] err_V0_CN4$in == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (=
  ($Snap.second $t@369@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@369@01))
    ($Snap.second ($Snap.second $t@369@01)))))
; [eval] (ShStructget13of17(s_V0_CN0$in): Ref)
(assert (=
  ($Snap.second ($Snap.second $t@369@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@369@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@369@01))))))
; [eval] (ShStructget13of17(s_V0_CN0$in): Ref)
; [eval] (slen((ShStructget13of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$): Int)
; [eval] (ShStructget13of17(s_V0_CN0$in): Ref)
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@369@01))) $Snap.unit))
; [eval] (ShStructget13of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$ == old((ShStructget13of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$)
; [eval] (ShStructget13of17(s_V0_CN0$in): Ref)
; [eval] old((ShStructget13of17(s_V0_CN0$in): Ref).SliceIntbyte$$$_S_$$$$$$$_E_$$$)
; [eval] (ShStructget13of17(s_V0_CN0$in): Ref)
(assert (=
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.first ($Snap.second $t@369@01)))
  ($SortWrappers.$SnapToSlice<Ref> ($Snap.first $t@368@01))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- PutUint64_72f0d887_MbigEndian ----------
(declare-const e_V0@370@01 Int)
(declare-const b_V0@371@01 Slice<Ref>)
(declare-const v_V0@372@01 Int)
(declare-const e_V0@373@01 Int)
(declare-const b_V0@374@01 Slice<Ref>)
(declare-const v_V0@375@01 Int)
(push) ; 1
(declare-const $t@376@01 $Snap)
(assert (= $t@376@01 ($Snap.combine ($Snap.first $t@376@01) ($Snap.second $t@376@01))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 0)
; [eval] (soffset(b_V0): Int)
(push) ; 2
(assert (sadd%precondition $Snap.unit (soffset<Int> b_V0@374@01) 0))
(pop) ; 2
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> b_V0@374@01) 0))
(assert (not
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 0))
    $Ref.null)))
(assert (=
  ($Snap.second $t@376@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@376@01))
    ($Snap.second ($Snap.second $t@376@01)))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 1)
; [eval] (soffset(b_V0): Int)
(push) ; 2
(assert (sadd%precondition $Snap.unit (soffset<Int> b_V0@374@01) 1))
(pop) ; 2
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> b_V0@374@01) 1))
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 1)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 1))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second $t@376@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@376@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@376@01))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 2)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 2
(assert (sadd%precondition $Snap.unit (soffset<Int> b_V0@374@01) 2))
(pop) ; 2
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> b_V0@374@01) 2))
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 2)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 2)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 2))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@376@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@376@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@376@01)))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 3)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 2
(assert (sadd%precondition $Snap.unit (soffset<Int> b_V0@374@01) 3))
(pop) ; 2
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> b_V0@374@01) 3))
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 3)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 3)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 3)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 3))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@376@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@376@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@376@01))))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 4)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 4)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 2
(assert (sadd%precondition $Snap.unit (soffset<Int> b_V0@374@01) 4))
(pop) ; 2
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> b_V0@374@01) 4))
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 4)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 4)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 4)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 3))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 4)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 4))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@376@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@376@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@376@01)))))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 5)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 5)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 2
(assert (sadd%precondition $Snap.unit (soffset<Int> b_V0@374@01) 5))
(pop) ; 2
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> b_V0@374@01) 5))
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 3))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 5)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 5)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 5)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 5)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 4))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 5)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 5))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@376@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@376@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@376@01))))))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 6)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 6)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 2
(assert (sadd%precondition $Snap.unit (soffset<Int> b_V0@374@01) 6))
(pop) ; 2
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> b_V0@374@01) 6))
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 4))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 6)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 6)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 6)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 6)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 3))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 6)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 5))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 6)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 6))
    $Ref.null)))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 7)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 7)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 2
(assert (sadd%precondition $Snap.unit (soffset<Int> b_V0@374@01) 7))
(pop) ; 2
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> b_V0@374@01) 7))
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 5))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 7)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 3))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 7)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 7)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 7)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 7)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 4))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 7)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 6))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 7)))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 7))
    $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@377@01 $Snap)
(assert (= $t@377@01 ($Snap.combine ($Snap.first $t@377@01) ($Snap.second $t@377@01))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 0)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 0)
; [eval] (soffset(b_V0): Int)
(push) ; 3
(pop) ; 3
; Joined path conditions
(assert (=
  ($Snap.second $t@377@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@377@01))
    ($Snap.second ($Snap.second $t@377@01)))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 1)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 1)
; [eval] (soffset(b_V0): Int)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 1)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second $t@377@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@377@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 2)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 2)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 2)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 2)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@377@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 3)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 3)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 3)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 3)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 3)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 4)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 4)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 4)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 4)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 4)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 3))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 4)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 5)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 5)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 3))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 5)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 5)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 5)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 5)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 4))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 5)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 6)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 6)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 4))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 6)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 6)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 6)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 6)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 3))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 6)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 5))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 6)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] (ShArrayloc((sarray(b_V0): ShArray[Ref]), sadd((soffset(b_V0): Int), 7)): Ref)
; [eval] (sarray(b_V0): ShArray[Ref])
; [eval] sadd((soffset(b_V0): Int), 7)
; [eval] (soffset(b_V0): Int)
(set-option :timeout 0)
(push) ; 3
(pop) ; 3
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 5))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 7)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 3))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 7)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 1))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 7)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 0))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 7)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 2))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 7)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 4))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 7)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 6))
  (ShArrayloc<Ref> (sarray<ShArray<Ref>> b_V0@374@01) (sadd $Snap.unit (soffset<Int> b_V0@374@01) 7)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
(set-option :timeout 0)
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- New_bfd5223e_F ----------
(declare-const msg_V0@378@01 Int)
(declare-const errCtx_V0@379@01 Slice<Ref>)
(declare-const res_V0@380@01 Tuple2<Ref~_Types>)
(declare-const msg_V0@381@01 Int)
(declare-const errCtx_V0@382@01 Slice<Ref>)
(declare-const res_V0@383@01 Tuple2<Ref~_Types>)
(push) ; 1
(declare-const i_V1@384@01 Int)
(push) ; 2
; [eval] 0 <= i_V1 && i_V1 < (slen(errCtx_V0): Int)
; [eval] 0 <= i_V1
(push) ; 3
; [then-branch: 87 | 0 <= i_V1@384@01 | live]
; [else-branch: 87 | !(0 <= i_V1@384@01) | live]
(push) ; 4
; [then-branch: 87 | 0 <= i_V1@384@01]
(assert (<= 0 i_V1@384@01))
; [eval] i_V1 < (slen(errCtx_V0): Int)
; [eval] (slen(errCtx_V0): Int)
(pop) ; 4
(push) ; 4
; [else-branch: 87 | !(0 <= i_V1@384@01)]
(assert (not (<= 0 i_V1@384@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V1@384@01)) (<= 0 i_V1@384@01)))
(assert (and (< i_V1@384@01 (slen<Int> errCtx_V0@382@01)) (<= 0 i_V1@384@01)))
; [eval] (ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref)
; [eval] (sarray(errCtx_V0): ShArray[Ref])
; [eval] sadd((soffset(errCtx_V0): Int), i_V1)
; [eval] (soffset(errCtx_V0): Int)
(push) ; 3
(assert (sadd%precondition $Snap.unit (soffset<Int> errCtx_V0@382@01) i_V1@384@01))
(pop) ; 3
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> errCtx_V0@382@01) i_V1@384@01))
(pop) ; 2
(declare-const $t@385@01 $FVF<Interfaceempty_interface$$$$_E_$$$>)
(declare-fun inv@386@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@384@01 Int)) (!
  (=>
    (and (< i_V1@384@01 (slen<Int> errCtx_V0@382@01)) (<= 0 i_V1@384@01))
    (and
      (or (not (<= 0 i_V1@384@01)) (<= 0 i_V1@384@01))
      (sadd%precondition $Snap.unit (soffset<Int> errCtx_V0@382@01) i_V1@384@01)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@382@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@382@01) i_V1@384@01)))
  :qid |Interfaceempty_interface$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@384@01 Int)) (!
  (=>
    (and (< i_V1@384@01 (slen<Int> errCtx_V0@382@01)) (<= 0 i_V1@384@01))
    (sadd%precondition $Snap.unit (soffset<Int> errCtx_V0@382@01) i_V1@384@01))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@382@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@382@01) i_V1@384@01)))
  :qid |quant-u-291|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@386@01 r) (slen<Int> errCtx_V0@382@01)) (<= 0 (inv@386@01 r)))
    (sadd%precondition $Snap.unit (soffset<Int> errCtx_V0@382@01) (inv@386@01 r)))
  :pattern ((inv@386@01 r))
  :qid |Interfaceempty_interface$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@384@01 Int)) (!
  (=>
    (and (< i_V1@384@01 (slen<Int> errCtx_V0@382@01)) (<= 0 i_V1@384@01))
    (=
      (inv@386@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@382@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@382@01) i_V1@384@01)))
      i_V1@384@01))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@382@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@382@01) i_V1@384@01)))
  :qid |quant-u-291|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@386@01 r) (slen<Int> errCtx_V0@382@01)) (<= 0 (inv@386@01 r)))
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@382@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@382@01) (inv@386@01 r)))
      r))
  :pattern ((inv@386@01 r))
  :qid |Interfaceempty_interface$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i_V1@384@01 Int)) (!
  (=>
    (and (< i_V1@384@01 (slen<Int> errCtx_V0@382@01)) (<= 0 i_V1@384@01))
    (not
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@382@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@382@01) i_V1@384@01))
        $Ref.null)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@382@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@382@01) i_V1@384@01)))
  :qid |Interfaceempty_interface$$$$_E_$$$-permImpliesNonNull|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@387@01 $Snap)
(assert (= $t@387@01 ($Snap.combine ($Snap.first $t@387@01) ($Snap.second $t@387@01))))
(declare-const i_V1@388@01 Int)
(push) ; 3
; [eval] 0 <= i_V1 && i_V1 < (slen(errCtx_V0): Int)
; [eval] 0 <= i_V1
(push) ; 4
; [then-branch: 88 | 0 <= i_V1@388@01 | live]
; [else-branch: 88 | !(0 <= i_V1@388@01) | live]
(push) ; 5
; [then-branch: 88 | 0 <= i_V1@388@01]
(assert (<= 0 i_V1@388@01))
; [eval] i_V1 < (slen(errCtx_V0): Int)
; [eval] (slen(errCtx_V0): Int)
(pop) ; 5
(push) ; 5
; [else-branch: 88 | !(0 <= i_V1@388@01)]
(assert (not (<= 0 i_V1@388@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (<= 0 i_V1@388@01)) (<= 0 i_V1@388@01)))
(assert (and (< i_V1@388@01 (slen<Int> errCtx_V0@382@01)) (<= 0 i_V1@388@01)))
; [eval] (ShArrayloc((sarray(errCtx_V0): ShArray[Ref]), sadd((soffset(errCtx_V0): Int), i_V1)): Ref)
; [eval] (sarray(errCtx_V0): ShArray[Ref])
; [eval] sadd((soffset(errCtx_V0): Int), i_V1)
; [eval] (soffset(errCtx_V0): Int)
(push) ; 4
(assert (sadd%precondition $Snap.unit (soffset<Int> errCtx_V0@382@01) i_V1@388@01))
(pop) ; 4
; Joined path conditions
(assert (sadd%precondition $Snap.unit (soffset<Int> errCtx_V0@382@01) i_V1@388@01))
(pop) ; 3
(declare-fun inv@389@01 ($Ref) Int)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i_V1@388@01 Int)) (!
  (=>
    (and (< i_V1@388@01 (slen<Int> errCtx_V0@382@01)) (<= 0 i_V1@388@01))
    (and
      (or (not (<= 0 i_V1@388@01)) (<= 0 i_V1@388@01))
      (sadd%precondition $Snap.unit (soffset<Int> errCtx_V0@382@01) i_V1@388@01)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@382@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@382@01) i_V1@388@01)))
  :qid |Interfaceempty_interface$$$$_E_$$$-aux|)))
; Check receiver injectivity
; Definitional axioms for inverse functions
(assert (forall ((i_V1@388@01 Int)) (!
  (=>
    (and (< i_V1@388@01 (slen<Int> errCtx_V0@382@01)) (<= 0 i_V1@388@01))
    (sadd%precondition $Snap.unit (soffset<Int> errCtx_V0@382@01) i_V1@388@01))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@382@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@382@01) i_V1@388@01)))
  :qid |quant-u-293|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@389@01 r) (slen<Int> errCtx_V0@382@01)) (<= 0 (inv@389@01 r)))
    (sadd%precondition $Snap.unit (soffset<Int> errCtx_V0@382@01) (inv@389@01 r)))
  :pattern ((inv@389@01 r))
  :qid |Interfaceempty_interface$$$$_E_$$$-fctOfInv|)))
(assert (forall ((i_V1@388@01 Int)) (!
  (=>
    (and (< i_V1@388@01 (slen<Int> errCtx_V0@382@01)) (<= 0 i_V1@388@01))
    (=
      (inv@389@01 (ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@382@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@382@01) i_V1@388@01)))
      i_V1@388@01))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@382@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@382@01) i_V1@388@01)))
  :qid |quant-u-293|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (< (inv@389@01 r) (slen<Int> errCtx_V0@382@01)) (<= 0 (inv@389@01 r)))
    (=
      (ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@382@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@382@01) (inv@389@01 r)))
      r))
  :pattern ((inv@389@01 r))
  :qid |Interfaceempty_interface$$$$_E_$$$-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i_V1@388@01 Int)) (!
  (=>
    (and (< i_V1@388@01 (slen<Int> errCtx_V0@382@01)) (<= 0 i_V1@388@01))
    (not
      (=
        (ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@382@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@382@01) i_V1@388@01))
        $Ref.null)))
  :pattern ((ShArrayloc<Ref> (sarray<ShArray<Ref>> errCtx_V0@382@01) (sadd $Snap.unit (soffset<Int> errCtx_V0@382@01) i_V1@388@01)))
  :qid |Interfaceempty_interface$$$$_E_$$$-permImpliesNonNull|)))
(assert (=
  ($Snap.second $t@387@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@387@01))
    ($Snap.second ($Snap.second $t@387@01)))))
(assert (= ($Snap.first ($Snap.second $t@387@01)) $Snap.unit))
; [eval] !(res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] res_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(assert (not
  (=
    res_V0@383@01
    (tuple2<Tuple2<Ref~_Types>> $Ref.null (as nil_Types<Types>  Types)))))
(assert (=
  ($Snap.second ($Snap.second $t@387@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@387@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@387@01))))))
(assert (= ($Snap.second ($Snap.second ($Snap.second $t@387@01))) $Snap.unit))
; [eval] IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_(res_V0)
(push) ; 3
; [eval] !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
; [eval] thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] (tuple2(null, nil_Types()): Tuple2[Ref, Types])
; [eval] nil_Types()
(declare-const $k@390@01 $Perm)
(assert ($Perm.isReadVar $k@390@01))
(assert (< $k@390@01 $Perm.Write))
(assert (<= $Perm.No (- $Perm.Write $k@390@01)))
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@390@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%precondition ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second $t@387@01)))) res_V0@383@01))
(pop) ; 3
; Joined path conditions
(assert ($Perm.isReadVar $k@390@01))
(assert (and
  (< $k@390@01 $Perm.Write)
  (<= $Perm.No (- $Perm.Write $k@390@01))
  (IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_%precondition ($Snap.combine
    $Snap.unit
    ($Snap.first ($Snap.second ($Snap.second $t@387@01)))) res_V0@383@01)))
(assert (IsDuplicableMem_a4af0e5e_SY$c04328b0_a4af0e5e_ ($Snap.combine
  $Snap.unit
  ($Snap.first ($Snap.second ($Snap.second $t@387@01)))) res_V0@383@01))
(pop) ; 2
(set-option :timeout 0)
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
