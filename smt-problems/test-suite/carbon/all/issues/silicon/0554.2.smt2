(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :smt.AUTO_CONFIG false)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :smt.BV.REFLECT true)
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $allocated () T@U)
(declare-fun data () T@U)
(declare-fun next_child () T@U)
(declare-fun next_sibling () T@U)
(declare-fun FieldType (T@T T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun FieldTypeInv1 (T@T) T@T)
(declare-fun NormalFieldType () T@T)
(declare-fun RefType () T@T)
(declare-fun succHeap (T@U T@U) Bool)
(declare-fun MapType0Type (T@T) T@T)
(declare-fun succHeapTrans (T@U T@U) Bool)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U T@U) T@U)
(declare-fun state (T@U T@U) Bool)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun GoodMask (T@U) Bool)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U T@U) T@U)
(declare-fun IdenticalOnKnownLocations (T@U T@U T@U) Bool)
(declare-fun IsPredicateField (T@U) Bool)
(declare-fun null () T@U)
(declare-fun PredicateMaskField (T@U) T@U)
(declare-fun FrameTypeType () T@T)
(declare-fun HasDirectPerm (T@U T@U T@U) Bool)
(declare-fun IsWandField (T@U) Bool)
(declare-fun WandMaskField (T@U) T@U)
(declare-fun tree (T@U) T@U)
(declare-fun PredicateType_treeType () T@T)
(declare-fun |tree#trigger| (T@U T@U) Bool)
(declare-fun |tree#everUsed| (T@U) Bool)
(declare-fun |tree#sm| (T@U) T@U)
(declare-fun dummyHeap () T@U)
(declare-fun ZeroMask () T@U)
(declare-fun InsidePredicate (T@U T@U T@U T@U) Bool)
(declare-fun sumMask (T@U T@U T@U) Bool)
(declare-fun ConditionalFrame (Real T@U) T@U)
(declare-fun EmptyFrame () T@U)
(declare-fun NoPerm () Real)
(declare-fun getPredWandId (T@U) Int)
(declare-fun FullPerm () Real)
(declare-fun ZeroPMask () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0))
))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x))
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x))
))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType)
 :qid |funType:int_2_U|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0))
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@0))
))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType)
 :qid |funType:real_2_U|
 :pattern ( (real_2_U arg0@@2))
))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0@@3))
))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1))
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x@@1))
))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType)
 :qid |funType:bool_2_U|
 :pattern ( (bool_2_U arg0@@4))
))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_rmode|
 :pattern ( (rmode_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2))
 :qid |cast:U_2_rmode|
 :pattern ( (U_2_rmode x@@2))
))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType)
 :qid |funType:rmode_2_U|
 :pattern ( (rmode_2_U arg0@@6))
))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_string|
 :pattern ( (string_2_U arg0@@7))
))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3))
 :qid |cast:U_2_string|
 :pattern ( (U_2_string x@@3))
))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType)
 :qid |funType:string_2_U|
 :pattern ( (string_2_U arg0@@8))
))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9)
 :qid |typeInv:U_2_regex|
 :pattern ( (regex_2_U arg0@@9))
))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4))
 :qid |cast:U_2_regex|
 :pattern ( (U_2_regex x@@4))
))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType)
 :qid |funType:regex_2_U|
 :pattern ( (regex_2_U arg0@@10))
))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5)
 :qid |bg:subtype-refl|
 :no-pattern (U_2_int x@@5)
 :no-pattern (U_2_bool x@@5)
)))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6)))
 (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z)))
 :qid |bg:subtype-trans|
 :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z))
)))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7)))
 (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))))
 :qid |bg:subtype-antisymm|
 :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7))
)))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@11 T@T) (arg1 T@T) ) (! (= (Ctor (FieldType arg0@@11 arg1)) 6)
 :qid |ctor:FieldType|
)) (forall ((arg0@@12 T@T) (arg1@@0 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12 arg1@@0)) arg0@@12)
 :qid |typeInv:FieldTypeInv0|
 :pattern ( (FieldType arg0@@12 arg1@@0))
))) (forall ((arg0@@13 T@T) (arg1@@1 T@T) ) (! (= (FieldTypeInv1 (FieldType arg0@@13 arg1@@1)) arg1@@1)
 :qid |typeInv:FieldTypeInv1|
 :pattern ( (FieldType arg0@@13 arg1@@1))
))) (= (Ctor NormalFieldType) 7)) (= (type $allocated) (FieldType NormalFieldType boolType))) (= (type data) (FieldType NormalFieldType intType))) (= (Ctor RefType) 8)) (= (type next_child) (FieldType NormalFieldType RefType))) (= (type next_sibling) (FieldType NormalFieldType RefType))))
(assert (distinct $allocated data next_child next_sibling)
)
(assert  (and (and (and (and (and (forall ((arg0@@14 T@T) ) (! (= (Ctor (MapType0Type arg0@@14)) 9)
 :qid |ctor:MapType0Type|
)) (forall ((arg0@@15 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@15)) arg0@@15)
 :qid |typeInv:MapType0TypeInv0|
 :pattern ( (MapType0Type arg0@@15))
))) (forall ((arg0@@16 T@U) (arg1@@2 T@U) (arg2 T@U) ) (! (let ((B (FieldTypeInv1 (type arg2))))
(= (type (MapType0Select arg0@@16 arg1@@2 arg2)) B))
 :qid |funType:MapType0Select|
 :pattern ( (MapType0Select arg0@@16 arg1@@2 arg2))
))) (forall ((arg0@@17 T@U) (arg1@@3 T@U) (arg2@@0 T@U) (arg3 T@U) ) (! (let ((aVar0 (type arg1@@3)))
(= (type (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3)) (MapType0Type aVar0)))
 :qid |funType:MapType0Store|
 :pattern ( (MapType0Store arg0@@17 arg1@@3 arg2@@0 arg3))
))) (forall ((m T@U) (x0 T@U) (x1 T@U) (val T@U) ) (! (let ((B@@0 (FieldTypeInv1 (type x1))))
 (=> (= (type val) B@@0) (= (MapType0Select (MapType0Store m x0 x1 val) x0 x1) val)))
 :qid |mapAx0:MapType0Select|
 :weight 0
))) (and (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select (MapType0Store m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
))) (forall ((val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select m@@2 y0@@1 y1@@1)))
 :qid |mapAx2:MapType0Select|
 :weight 0
)))))
(assert (forall ((Heap0 T@U) (Heap1 T@U) ) (!  (=> (and (and (= (type Heap0) (MapType0Type RefType)) (= (type Heap1) (MapType0Type RefType))) (succHeap Heap0 Heap1)) (succHeapTrans Heap0 Heap1))
 :qid |stdinbpl.88:15|
 :skolemid |11|
 :pattern ( (succHeap Heap0 Heap1))
)))
(assert  (and (and (and (and (and (and (forall ((arg0@@18 T@T) (arg1@@4 T@T) ) (! (= (Ctor (MapType1Type arg0@@18 arg1@@4)) 10)
 :qid |ctor:MapType1Type|
)) (forall ((arg0@@19 T@T) (arg1@@5 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@19 arg1@@5)) arg0@@19)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@19 arg1@@5))
))) (forall ((arg0@@20 T@T) (arg1@@6 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@20 arg1@@6)) arg1@@6)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@20 arg1@@6))
))) (forall ((arg0@@21 T@U) (arg1@@7 T@U) (arg2@@1 T@U) ) (! (let ((aVar1 (MapType1TypeInv1 (type arg0@@21))))
(= (type (MapType1Select arg0@@21 arg1@@7 arg2@@1)) aVar1))
 :qid |funType:MapType1Select|
 :pattern ( (MapType1Select arg0@@21 arg1@@7 arg2@@1))
))) (forall ((arg0@@22 T@U) (arg1@@8 T@U) (arg2@@2 T@U) (arg3@@0 T@U) ) (! (let ((aVar1@@0 (type arg3@@0)))
(let ((aVar0@@0 (type arg1@@8)))
(= (type (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0)) (MapType1Type aVar0@@0 aVar1@@0))))
 :qid |funType:MapType1Store|
 :pattern ( (MapType1Store arg0@@22 arg1@@8 arg2@@2 arg3@@0))
))) (forall ((m@@3 T@U) (x0@@3 T@U) (x1@@3 T@U) (val@@3 T@U) ) (! (let ((aVar1@@1 (MapType1TypeInv1 (type m@@3))))
 (=> (= (type val@@3) aVar1@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 x1@@3 val@@3) x0@@3 x1@@3) val@@3)))
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (and (and (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@4 T@U) (y0@@2 T@U) (y1@@2 T@U) ) (!  (or (= x0@@4 y0@@2) (= (MapType1Select (MapType1Store m@@4 x0@@4 x1@@4 val@@4) y0@@2 y1@@2) (MapType1Select m@@4 y0@@2 y1@@2)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
)) (forall ((val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@5 T@U) (y0@@3 T@U) (y1@@3 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType1Select (MapType1Store m@@5 x0@@5 x1@@5 val@@5) y0@@3 y1@@3) (MapType1Select m@@5 y0@@3 y1@@3)))
 :qid |mapAx1:MapType1Select:1|
 :weight 0
))) (forall ((val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@6 T@U) (y0@@4 T@U) (y1@@4 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@6 x0@@6 x1@@6 val@@6) y0@@4 y1@@4) (MapType1Select m@@6 y0@@4 y1@@4)))
 :qid |mapAx2:MapType1Select|
 :weight 0
)))))
(assert (forall ((Heap T@U) (Mask T@U) ) (!  (=> (and (and (= (type Heap) (MapType0Type RefType)) (= (type Mask) (MapType1Type RefType realType))) (state Heap Mask)) (GoodMask Mask))
 :qid |stdinbpl.124:15|
 :skolemid |15|
 :pattern ( (state Heap Mask))
)))
(assert (forall ((Heap0@@0 T@U) (Heap1@@0 T@U) (Heap2 T@U) ) (!  (=> (and (and (and (= (type Heap0@@0) (MapType0Type RefType)) (= (type Heap1@@0) (MapType0Type RefType))) (= (type Heap2) (MapType0Type RefType))) (and (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))) (succHeapTrans Heap0@@0 Heap2))
 :qid |stdinbpl.93:15|
 :skolemid |12|
 :pattern ( (succHeapTrans Heap0@@0 Heap1@@0) (succHeap Heap1@@0 Heap2))
)))
(assert  (and (and (= (Ctor FrameTypeType) 11) (= (type null) RefType)) (forall ((arg0@@23 T@U) ) (! (let ((A (FieldTypeInv0 (type arg0@@23))))
(= (type (PredicateMaskField arg0@@23)) (FieldType A (MapType1Type RefType boolType))))
 :qid |funType:PredicateMaskField|
 :pattern ( (PredicateMaskField arg0@@23))
))))
(assert (forall ((Heap@@0 T@U) (ExhaleHeap T@U) (Mask@@0 T@U) (pm_f T@U) ) (! (let ((C (FieldTypeInv0 (type pm_f))))
 (=> (and (and (and (and (and (= (type Heap@@0) (MapType0Type RefType)) (= (type ExhaleHeap) (MapType0Type RefType))) (= (type Mask@@0) (MapType1Type RefType realType))) (= (type pm_f) (FieldType C FrameTypeType))) (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0)) (and (HasDirectPerm Mask@@0 null pm_f) (IsPredicateField pm_f))) (= (MapType0Select Heap@@0 null (PredicateMaskField pm_f)) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))))
 :qid |stdinbpl.47:19|
 :skolemid |2|
 :pattern ( (IdenticalOnKnownLocations Heap@@0 ExhaleHeap Mask@@0) (IsPredicateField pm_f) (MapType0Select ExhaleHeap null (PredicateMaskField pm_f)))
)))
(assert (forall ((arg0@@24 T@U) ) (! (let ((A@@0 (FieldTypeInv0 (type arg0@@24))))
(= (type (WandMaskField arg0@@24)) (FieldType A@@0 (MapType1Type RefType boolType))))
 :qid |funType:WandMaskField|
 :pattern ( (WandMaskField arg0@@24))
)))
(assert (forall ((Heap@@1 T@U) (ExhaleHeap@@0 T@U) (Mask@@1 T@U) (pm_f@@0 T@U) ) (! (let ((C@@0 (FieldTypeInv0 (type pm_f@@0))))
 (=> (and (and (and (and (and (= (type Heap@@1) (MapType0Type RefType)) (= (type ExhaleHeap@@0) (MapType0Type RefType))) (= (type Mask@@1) (MapType1Type RefType realType))) (= (type pm_f@@0) (FieldType C@@0 FrameTypeType))) (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1)) (and (HasDirectPerm Mask@@1 null pm_f@@0) (IsWandField pm_f@@0))) (= (MapType0Select Heap@@1 null (WandMaskField pm_f@@0)) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))))
 :qid |stdinbpl.60:19|
 :skolemid |5|
 :pattern ( (IdenticalOnKnownLocations Heap@@1 ExhaleHeap@@0 Mask@@1) (IsWandField pm_f@@0) (MapType0Select ExhaleHeap@@0 null (WandMaskField pm_f@@0)))
)))
(assert  (and (= (Ctor PredicateType_treeType) 12) (forall ((arg0@@25 T@U) ) (! (= (type (tree arg0@@25)) (FieldType PredicateType_treeType FrameTypeType))
 :qid |funType:tree|
 :pattern ( (tree arg0@@25))
))))
(assert (forall ((this T@U) ) (!  (=> (= (type this) RefType) (IsPredicateField (tree this)))
 :qid |stdinbpl.200:15|
 :skolemid |23|
 :pattern ( (tree this))
)))
(assert (forall ((Heap@@2 T@U) (this@@0 T@U) ) (!  (=> (and (= (type Heap@@2) (MapType0Type RefType)) (= (type this@@0) RefType)) (|tree#everUsed| (tree this@@0)))
 :qid |stdinbpl.219:15|
 :skolemid |27|
 :pattern ( (|tree#trigger| Heap@@2 (tree this@@0)))
)))
(assert (forall ((Heap@@3 T@U) (ExhaleHeap@@1 T@U) (Mask@@2 T@U) (o_1 T@U) ) (!  (=> (and (and (and (and (and (= (type Heap@@3) (MapType0Type RefType)) (= (type ExhaleHeap@@1) (MapType0Type RefType))) (= (type Mask@@2) (MapType1Type RefType realType))) (= (type o_1) RefType)) (IdenticalOnKnownLocations Heap@@3 ExhaleHeap@@1 Mask@@2)) (U_2_bool (MapType0Select Heap@@3 o_1 $allocated))) (U_2_bool (MapType0Select ExhaleHeap@@1 o_1 $allocated)))
 :qid |stdinbpl.73:15|
 :skolemid |8|
 :pattern ( (IdenticalOnKnownLocations Heap@@3 ExhaleHeap@@1 Mask@@2) (MapType0Select ExhaleHeap@@1 o_1 $allocated))
)))
(assert (forall ((this@@1 T@U) (this2 T@U) ) (!  (=> (and (and (= (type this@@1) RefType) (= (type this2) RefType)) (= (tree this@@1) (tree this2))) (= this@@1 this2))
 :qid |stdinbpl.210:15|
 :skolemid |25|
 :pattern ( (tree this@@1) (tree this2))
)))
(assert (forall ((arg0@@26 T@U) ) (! (= (type (|tree#sm| arg0@@26)) (FieldType PredicateType_treeType (MapType1Type RefType boolType)))
 :qid |funType:tree#sm|
 :pattern ( (|tree#sm| arg0@@26))
)))
(assert (forall ((this@@2 T@U) (this2@@0 T@U) ) (!  (=> (and (and (= (type this@@2) RefType) (= (type this2@@0) RefType)) (= (|tree#sm| this@@2) (|tree#sm| this2@@0))) (= this@@2 this2@@0))
 :qid |stdinbpl.214:15|
 :skolemid |26|
 :pattern ( (|tree#sm| this@@2) (|tree#sm| this2@@0))
)))
(assert (forall ((Heap@@4 T@U) (ExhaleHeap@@2 T@U) (Mask@@3 T@U) (o_1@@0 T@U) (f_2 T@U) ) (! (let ((B@@1 (FieldTypeInv1 (type f_2))))
(let ((A@@1 (FieldTypeInv0 (type f_2))))
 (=> (and (and (and (and (and (and (= (type Heap@@4) (MapType0Type RefType)) (= (type ExhaleHeap@@2) (MapType0Type RefType))) (= (type Mask@@3) (MapType1Type RefType realType))) (= (type o_1@@0) RefType)) (= (type f_2) (FieldType A@@1 B@@1))) (IdenticalOnKnownLocations Heap@@4 ExhaleHeap@@2 Mask@@3)) (HasDirectPerm Mask@@3 o_1@@0 f_2)) (= (MapType0Select Heap@@4 o_1@@0 f_2) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2)))))
 :qid |stdinbpl.42:22|
 :skolemid |1|
 :pattern ( (IdenticalOnKnownLocations Heap@@4 ExhaleHeap@@2 Mask@@3) (MapType0Select ExhaleHeap@@2 o_1@@0 f_2))
)))
(assert  (and (= (type dummyHeap) (MapType0Type RefType)) (= (type ZeroMask) (MapType1Type RefType realType))))
(assert (state dummyHeap ZeroMask))
(assert (forall ((p T@U) (v_1 T@U) (w T@U) ) (! (let ((A@@2 (FieldTypeInv0 (type p))))
 (=> (and (and (= (type p) (FieldType A@@2 FrameTypeType)) (= (type v_1) FrameTypeType)) (= (type w) FrameTypeType)) (not (InsidePredicate p v_1 p w))))
 :qid |stdinbpl.170:19|
 :skolemid |21|
 :pattern ( (InsidePredicate p v_1 p w))
)))
(assert  (not (IsPredicateField data)))
(assert  (not (IsWandField data)))
(assert  (not (IsPredicateField next_child)))
(assert  (not (IsWandField next_child)))
(assert  (not (IsPredicateField next_sibling)))
(assert  (not (IsWandField next_sibling)))
(assert (forall ((Heap@@5 T@U) (ExhaleHeap@@3 T@U) (Mask@@4 T@U) ) (!  (=> (and (and (and (= (type Heap@@5) (MapType0Type RefType)) (= (type ExhaleHeap@@3) (MapType0Type RefType))) (= (type Mask@@4) (MapType1Type RefType realType))) (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@3 Mask@@4)) (succHeap Heap@@5 ExhaleHeap@@3))
 :qid |stdinbpl.83:15|
 :skolemid |10|
 :pattern ( (IdenticalOnKnownLocations Heap@@5 ExhaleHeap@@3 Mask@@4))
)))
(assert (forall ((ResultMask T@U) (SummandMask1 T@U) (SummandMask2 T@U) (o_2 T@U) (f_4 T@U) ) (! (let ((B@@2 (FieldTypeInv1 (type f_4))))
(let ((A@@3 (FieldTypeInv0 (type f_4))))
 (=> (and (and (and (and (and (= (type ResultMask) (MapType1Type RefType realType)) (= (type SummandMask1) (MapType1Type RefType realType))) (= (type SummandMask2) (MapType1Type RefType realType))) (= (type o_2) RefType)) (= (type f_4) (FieldType A@@3 B@@2))) (sumMask ResultMask SummandMask1 SummandMask2)) (= (U_2_real (MapType1Select ResultMask o_2 f_4)) (+ (U_2_real (MapType1Select SummandMask1 o_2 f_4)) (U_2_real (MapType1Select SummandMask2 o_2 f_4)))))))
 :qid |stdinbpl.138:22|
 :skolemid |18|
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select ResultMask o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask1 o_2 f_4))
 :pattern ( (sumMask ResultMask SummandMask1 SummandMask2) (MapType1Select SummandMask2 o_2 f_4))
)))
(assert  (and (forall ((arg0@@27 Real) (arg1@@9 T@U) ) (! (= (type (ConditionalFrame arg0@@27 arg1@@9)) FrameTypeType)
 :qid |funType:ConditionalFrame|
 :pattern ( (ConditionalFrame arg0@@27 arg1@@9))
)) (= (type EmptyFrame) FrameTypeType)))
(assert (forall ((p@@0 Real) (f_6 T@U) ) (!  (=> (= (type f_6) FrameTypeType) (= (ConditionalFrame p@@0 f_6) (ite (> p@@0 0.0) f_6 EmptyFrame)))
 :qid |stdinbpl.158:15|
 :skolemid |19|
 :pattern ( (ConditionalFrame p@@0 f_6))
)))
(assert (forall ((Mask@@5 T@U) (o_2@@0 T@U) (f_4@@0 T@U) ) (! (let ((B@@3 (FieldTypeInv1 (type f_4@@0))))
(let ((A@@4 (FieldTypeInv0 (type f_4@@0))))
 (=> (and (and (= (type Mask@@5) (MapType1Type RefType realType)) (= (type o_2@@0) RefType)) (= (type f_4@@0) (FieldType A@@4 B@@3))) (= (HasDirectPerm Mask@@5 o_2@@0 f_4@@0) (> (U_2_real (MapType1Select Mask@@5 o_2@@0 f_4@@0)) NoPerm)))))
 :qid |stdinbpl.133:22|
 :skolemid |17|
 :pattern ( (HasDirectPerm Mask@@5 o_2@@0 f_4@@0))
)))
(assert (forall ((o_2@@1 T@U) (f_4@@1 T@U) ) (! (let ((B@@4 (FieldTypeInv1 (type f_4@@1))))
(let ((A@@5 (FieldTypeInv0 (type f_4@@1))))
 (=> (and (= (type o_2@@1) RefType) (= (type f_4@@1) (FieldType A@@5 B@@4))) (= (U_2_real (MapType1Select ZeroMask o_2@@1 f_4@@1)) NoPerm))))
 :qid |stdinbpl.106:22|
 :skolemid |13|
 :pattern ( (MapType1Select ZeroMask o_2@@1 f_4@@1))
)))
(assert (forall ((Heap@@6 T@U) (ExhaleHeap@@4 T@U) (Mask@@6 T@U) (pm_f@@1 T@U) ) (! (let ((C@@1 (FieldTypeInv0 (type pm_f@@1))))
 (=> (and (and (and (and (and (= (type Heap@@6) (MapType0Type RefType)) (= (type ExhaleHeap@@4) (MapType0Type RefType))) (= (type Mask@@6) (MapType1Type RefType realType))) (= (type pm_f@@1) (FieldType C@@1 FrameTypeType))) (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@4 Mask@@6)) (and (HasDirectPerm Mask@@6 null pm_f@@1) (IsPredicateField pm_f@@1))) (forall ((o2 T@U) (f_2@@0 T@U) ) (! (let ((B@@5 (FieldTypeInv1 (type f_2@@0))))
(let ((A@@6 (FieldTypeInv0 (type f_2@@0))))
 (=> (and (and (= (type o2) RefType) (= (type f_2@@0) (FieldType A@@6 B@@5))) (U_2_bool (MapType1Select (MapType0Select Heap@@6 null (PredicateMaskField pm_f@@1)) o2 f_2@@0))) (= (MapType0Select Heap@@6 o2 f_2@@0) (MapType0Select ExhaleHeap@@4 o2 f_2@@0)))))
 :qid |stdinbpl.54:134|
 :skolemid |3|
 :pattern ( (MapType0Select ExhaleHeap@@4 o2 f_2@@0))
))))
 :qid |stdinbpl.52:19|
 :skolemid |4|
 :pattern ( (IdenticalOnKnownLocations Heap@@6 ExhaleHeap@@4 Mask@@6) (IsPredicateField pm_f@@1))
)))
(assert (forall ((Heap@@7 T@U) (ExhaleHeap@@5 T@U) (Mask@@7 T@U) (pm_f@@2 T@U) ) (! (let ((C@@2 (FieldTypeInv0 (type pm_f@@2))))
 (=> (and (and (and (and (and (= (type Heap@@7) (MapType0Type RefType)) (= (type ExhaleHeap@@5) (MapType0Type RefType))) (= (type Mask@@7) (MapType1Type RefType realType))) (= (type pm_f@@2) (FieldType C@@2 FrameTypeType))) (IdenticalOnKnownLocations Heap@@7 ExhaleHeap@@5 Mask@@7)) (and (HasDirectPerm Mask@@7 null pm_f@@2) (IsWandField pm_f@@2))) (forall ((o2@@0 T@U) (f_2@@1 T@U) ) (! (let ((B@@6 (FieldTypeInv1 (type f_2@@1))))
(let ((A@@7 (FieldTypeInv0 (type f_2@@1))))
 (=> (and (and (= (type o2@@0) RefType) (= (type f_2@@1) (FieldType A@@7 B@@6))) (U_2_bool (MapType1Select (MapType0Select Heap@@7 null (WandMaskField pm_f@@2)) o2@@0 f_2@@1))) (= (MapType0Select Heap@@7 o2@@0 f_2@@1) (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1)))))
 :qid |stdinbpl.67:129|
 :skolemid |6|
 :pattern ( (MapType0Select ExhaleHeap@@5 o2@@0 f_2@@1))
))))
 :qid |stdinbpl.65:19|
 :skolemid |7|
 :pattern ( (IdenticalOnKnownLocations Heap@@7 ExhaleHeap@@5 Mask@@7) (IsWandField pm_f@@2))
)))
(assert (forall ((this@@3 T@U) ) (!  (=> (= (type this@@3) RefType) (= (getPredWandId (tree this@@3)) 0))
 :qid |stdinbpl.204:15|
 :skolemid |24|
 :pattern ( (tree this@@3))
)))
(assert (forall ((Mask@@8 T@U) (o_2@@2 T@U) (f_4@@2 T@U) ) (! (let ((B@@7 (FieldTypeInv1 (type f_4@@2))))
(let ((A@@8 (FieldTypeInv0 (type f_4@@2))))
 (=> (and (and (and (= (type Mask@@8) (MapType1Type RefType realType)) (= (type o_2@@2) RefType)) (= (type f_4@@2) (FieldType A@@8 B@@7))) (GoodMask Mask@@8)) (and (>= (U_2_real (MapType1Select Mask@@8 o_2@@2 f_4@@2)) NoPerm) (=> (and (and (GoodMask Mask@@8) (not (IsPredicateField f_4@@2))) (not (IsWandField f_4@@2))) (<= (U_2_real (MapType1Select Mask@@8 o_2@@2 f_4@@2)) FullPerm))))))
 :qid |stdinbpl.128:22|
 :skolemid |16|
 :pattern ( (GoodMask Mask@@8) (MapType1Select Mask@@8 o_2@@2 f_4@@2))
)))
(assert (forall ((o T@U) (f T@U) (Heap@@8 T@U) ) (!  (=> (and (and (and (= (type o) RefType) (= (type f) (FieldType NormalFieldType RefType))) (= (type Heap@@8) (MapType0Type RefType))) (U_2_bool (MapType0Select Heap@@8 o $allocated))) (U_2_bool (MapType0Select Heap@@8 (MapType0Select Heap@@8 o f) $allocated)))
 :qid |stdinbpl.31:15|
 :skolemid |0|
 :pattern ( (MapType0Select Heap@@8 o f))
)))
(assert (forall ((this@@4 T@U) ) (!  (=> (= (type this@@4) RefType) (= (PredicateMaskField (tree this@@4)) (|tree#sm| this@@4)))
 :qid |stdinbpl.196:15|
 :skolemid |22|
 :pattern ( (PredicateMaskField (tree this@@4)))
)))
(assert (forall ((Heap@@9 T@U) (o@@0 T@U) (f_3 T@U) (v T@U) ) (! (let ((B@@8 (type v)))
(let ((A@@9 (FieldTypeInv0 (type f_3))))
 (=> (and (and (= (type Heap@@9) (MapType0Type RefType)) (= (type o@@0) RefType)) (= (type f_3) (FieldType A@@9 B@@8))) (succHeap Heap@@9 (MapType0Store Heap@@9 o@@0 f_3 v)))))
 :qid |stdinbpl.78:22|
 :skolemid |9|
 :pattern ( (MapType0Store Heap@@9 o@@0 f_3 v))
)))
(assert (= (type ZeroPMask) (MapType1Type RefType boolType)))
(assert (forall ((o_2@@3 T@U) (f_4@@3 T@U) ) (! (let ((B@@9 (FieldTypeInv1 (type f_4@@3))))
(let ((A@@10 (FieldTypeInv0 (type f_4@@3))))
 (=> (and (= (type o_2@@3) RefType) (= (type f_4@@3) (FieldType A@@10 B@@9))) (not (U_2_bool (MapType1Select ZeroPMask o_2@@3 f_4@@3))))))
 :qid |stdinbpl.112:22|
 :skolemid |14|
 :pattern ( (MapType1Select ZeroPMask o_2@@3 f_4@@3))
)))
(assert (forall ((p@@1 T@U) (v_1@@0 T@U) (q T@U) (w@@0 T@U) (r T@U) (u T@U) ) (! (let ((C@@3 (FieldTypeInv0 (type r))))
(let ((B@@10 (FieldTypeInv0 (type q))))
(let ((A@@11 (FieldTypeInv0 (type p@@1))))
 (=> (and (and (and (and (and (and (= (type p@@1) (FieldType A@@11 FrameTypeType)) (= (type v_1@@0) FrameTypeType)) (= (type q) (FieldType B@@10 FrameTypeType))) (= (type w@@0) FrameTypeType)) (= (type r) (FieldType C@@3 FrameTypeType))) (= (type u) FrameTypeType)) (and (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))) (InsidePredicate p@@1 v_1@@0 r u)))))
 :qid |stdinbpl.165:25|
 :skolemid |20|
 :pattern ( (InsidePredicate p@@1 v_1@@0 q w@@0) (InsidePredicate q w@@0 r u))
)))
(assert (= NoPerm 0.0))
(assert (= FullPerm 1.0))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun PostHeap@14 () T@U)
(declare-fun this@@5 () T@U)
(declare-fun UnfoldingMask@55 () T@U)
(declare-fun UnfoldingMask@53 () T@U)
(declare-fun perm@60 () Real)
(declare-fun UnfoldingMask@54 () T@U)
(declare-fun UnfoldingMask@51 () T@U)
(declare-fun perm@59 () Real)
(declare-fun UnfoldingMask@52 () T@U)
(declare-fun PostMask@1 () T@U)
(declare-fun CombineFrames (T@U T@U) T@U)
(declare-fun FrameFragment (T@U) T@U)
(declare-fun perm@55 () Real)
(declare-fun UnfoldingMask@48 () T@U)
(declare-fun perm@56 () Real)
(declare-fun UnfoldingMask@49 () T@U)
(declare-fun perm@57 () Real)
(declare-fun UnfoldingMask@50 () T@U)
(declare-fun perm@58 () Real)
(declare-fun PostHeap@12 () T@U)
(declare-fun res () T@U)
(declare-fun newPMask@33 () T@U)
(declare-fun PostHeap@13 () T@U)
(declare-fun PostHeap@10 () T@U)
(declare-fun newPMask@32 () T@U)
(declare-fun PostHeap@11 () T@U)
(declare-fun PostHeap@7 () T@U)
(declare-fun PostHeap@8 () T@U)
(declare-fun PostHeap@9 () T@U)
(declare-fun PostHeap@5 () T@U)
(declare-fun newPMask@31 () T@U)
(declare-fun PostHeap@6 () T@U)
(declare-fun PostHeap@3 () T@U)
(declare-fun newPMask@30 () T@U)
(declare-fun PostHeap@4 () T@U)
(declare-fun UnfoldingHeap@20 () T@U)
(declare-fun UnfoldingMask@47 () T@U)
(declare-fun PostHeap@1 () T@U)
(declare-fun PostHeap@0 () T@U)
(declare-fun PostHeap@2 () T@U)
(declare-fun UnfoldingHeap@18 () T@U)
(declare-fun newPMask@29 () T@U)
(declare-fun UnfoldingHeap@19 () T@U)
(declare-fun UnfoldingHeap@16 () T@U)
(declare-fun newPMask@28 () T@U)
(declare-fun UnfoldingHeap@17 () T@U)
(declare-fun UnfoldingHeap@14 () T@U)
(declare-fun UnfoldingHeap@15 () T@U)
(declare-fun Unfolding1Mask@31 () T@U)
(declare-fun Unfolding1Mask@29 () T@U)
(declare-fun Unfolding1Mask@30 () T@U)
(declare-fun Unfolding1Mask@27 () T@U)
(declare-fun Unfolding1Mask@28 () T@U)
(declare-fun Unfolding1Mask@24 () T@U)
(declare-fun Unfolding1Mask@25 () T@U)
(declare-fun Unfolding1Mask@26 () T@U)
(declare-fun UnfoldingMask@45 () T@U)
(declare-fun perm@54 () Real)
(declare-fun UnfoldingMask@46 () T@U)
(declare-fun UnfoldingMask@43 () T@U)
(declare-fun perm@53 () Real)
(declare-fun UnfoldingMask@44 () T@U)
(declare-fun UnfoldingMask@40 () T@U)
(declare-fun perm@2 () Real)
(declare-fun perm@50 () Real)
(declare-fun UnfoldingMask@41 () T@U)
(declare-fun perm@51 () Real)
(declare-fun UnfoldingMask@42 () T@U)
(declare-fun perm@52 () Real)
(declare-fun perm@1 () Real)
(declare-fun PostMask@0 () T@U)
(declare-fun Heap@96 () T@U)
(declare-fun freshObj@0 () T@U)
(declare-fun Heap@98 () T@U)
(declare-fun newPMask@27 () T@U)
(declare-fun Heap@97 () T@U)
(declare-fun Heap@94 () T@U)
(declare-fun newPMask@26 () T@U)
(declare-fun Heap@95 () T@U)
(declare-fun Heap@91 () T@U)
(declare-fun Mask@36 () T@U)
(declare-fun Heap@92 () T@U)
(declare-fun Heap@93 () T@U)
(declare-fun Heap@89 () T@U)
(declare-fun newPMask@25 () T@U)
(declare-fun Heap@90 () T@U)
(declare-fun Heap@87 () T@U)
(declare-fun newPMask@24 () T@U)
(declare-fun Heap@88 () T@U)
(declare-fun Heap@84 () T@U)
(declare-fun Unfolding1Mask@23 () T@U)
(declare-fun Heap@85 () T@U)
(declare-fun Heap@86 () T@U)
(declare-fun Unfolding1Mask@21 () T@U)
(declare-fun Unfolding1Mask@22 () T@U)
(declare-fun Unfolding1Mask@19 () T@U)
(declare-fun Unfolding1Mask@20 () T@U)
(declare-fun Unfolding1Mask@16 () T@U)
(declare-fun UnfoldingMask@39 () T@U)
(declare-fun Unfolding1Mask@17 () T@U)
(declare-fun Unfolding1Mask@18 () T@U)
(declare-fun UnfoldingMask@37 () T@U)
(declare-fun perm@49 () Real)
(declare-fun UnfoldingMask@38 () T@U)
(declare-fun UnfoldingMask@35 () T@U)
(declare-fun perm@48 () Real)
(declare-fun UnfoldingMask@36 () T@U)
(declare-fun UnfoldingMask@32 () T@U)
(declare-fun Mask@34 () T@U)
(declare-fun perm@44 () Real)
(declare-fun perm@45 () Real)
(declare-fun UnfoldingMask@33 () T@U)
(declare-fun perm@46 () Real)
(declare-fun UnfoldingMask@34 () T@U)
(declare-fun perm@47 () Real)
(declare-fun Mask@35 () T@U)
(declare-fun perm@43 () Real)
(declare-fun Heap@82 () T@U)
(declare-fun newPMask@23 () T@U)
(declare-fun Heap@83 () T@U)
(declare-fun Heap@80 () T@U)
(declare-fun newPMask@22 () T@U)
(declare-fun Heap@81 () T@U)
(declare-fun Heap@78 () T@U)
(declare-fun Heap@77 () T@U)
(declare-fun Heap@79 () T@U)
(declare-fun Heap@74 () T@U)
(declare-fun Heap@75 () T@U)
(declare-fun Heap@76 () T@U)
(declare-fun freshVersion@1 () T@U)
(declare-fun Mask@33 () T@U)
(declare-fun Mask@32 () T@U)
(declare-fun Mask@31 () T@U)
(declare-fun Mask@30 () T@U)
(declare-fun Mask@29 () T@U)
(declare-fun Mask@28 () T@U)
(declare-fun Mask@27 () T@U)
(declare-fun Mask@26 () T@U)
(declare-fun Heap@72 () T@U)
(declare-fun newPMask@21 () T@U)
(declare-fun Heap@73 () T@U)
(declare-fun Heap@70 () T@U)
(declare-fun newPMask@20 () T@U)
(declare-fun Heap@71 () T@U)
(declare-fun Heap@68 () T@U)
(declare-fun Heap@67 () T@U)
(declare-fun Heap@69 () T@U)
(declare-fun Heap@64 () T@U)
(declare-fun Heap@65 () T@U)
(declare-fun Heap@66 () T@U)
(declare-fun freshVersion@0 () T@U)
(declare-fun perm@42 () Real)
(declare-fun Mask@25 () T@U)
(declare-fun Mask@24 () T@U)
(declare-fun Mask@23 () T@U)
(declare-fun perm@41 () Real)
(declare-fun Mask@22 () T@U)
(declare-fun Mask@21 () T@U)
(declare-fun perm@40 () Real)
(declare-fun Mask@20 () T@U)
(declare-fun perm@39 () Real)
(declare-fun Mask@19 () T@U)
(declare-fun perm@38 () Real)
(declare-fun Mask@18 () T@U)
(declare-fun perm@37 () Real)
(declare-fun Heap@60 () T@U)
(declare-fun Mask@17 () T@U)
(declare-fun tmp_sibling@0 () T@U)
(declare-fun Heap@61 () T@U)
(declare-fun Heap@62 () T@U)
(declare-fun tmp_child@0 () T@U)
(declare-fun Heap@63 () T@U)
(declare-fun Heap@58 () T@U)
(declare-fun newPMask@19 () T@U)
(declare-fun Heap@59 () T@U)
(declare-fun Heap@56 () T@U)
(declare-fun newPMask@18 () T@U)
(declare-fun Heap@57 () T@U)
(declare-fun Heap@53 () T@U)
(declare-fun Heap@54 () T@U)
(declare-fun Heap@55 () T@U)
(declare-fun Heap@51 () T@U)
(declare-fun arg_this_1@0 () T@U)
(declare-fun newPMask@17 () T@U)
(declare-fun Heap@52 () T@U)
(declare-fun Heap@49 () T@U)
(declare-fun newPMask@16 () T@U)
(declare-fun Heap@50 () T@U)
(declare-fun UnfoldingHeap@13 () T@U)
(declare-fun UnfoldingMask@31 () T@U)
(declare-fun Heap@47 () T@U)
(declare-fun Heap@46 () T@U)
(declare-fun Heap@48 () T@U)
(declare-fun UnfoldingHeap@11 () T@U)
(declare-fun newPMask@15 () T@U)
(declare-fun UnfoldingHeap@12 () T@U)
(declare-fun UnfoldingHeap@9 () T@U)
(declare-fun newPMask@14 () T@U)
(declare-fun UnfoldingHeap@10 () T@U)
(declare-fun Unfolding1Mask@15 () T@U)
(declare-fun UnfoldingHeap@7 () T@U)
(declare-fun UnfoldingHeap@8 () T@U)
(declare-fun Unfolding1Mask@13 () T@U)
(declare-fun Unfolding1Mask@14 () T@U)
(declare-fun Unfolding1Mask@11 () T@U)
(declare-fun Unfolding1Mask@12 () T@U)
(declare-fun Unfolding1Mask@8 () T@U)
(declare-fun Unfolding1Mask@9 () T@U)
(declare-fun Unfolding1Mask@10 () T@U)
(declare-fun UnfoldingMask@29 () T@U)
(declare-fun perm@36 () Real)
(declare-fun UnfoldingMask@30 () T@U)
(declare-fun UnfoldingMask@27 () T@U)
(declare-fun perm@35 () Real)
(declare-fun UnfoldingMask@28 () T@U)
(declare-fun UnfoldingMask@24 () T@U)
(declare-fun perm@31 () Real)
(declare-fun perm@32 () Real)
(declare-fun UnfoldingMask@25 () T@U)
(declare-fun perm@33 () Real)
(declare-fun UnfoldingMask@26 () T@U)
(declare-fun perm@34 () Real)
(declare-fun Heap@44 () T@U)
(declare-fun newPMask@13 () T@U)
(declare-fun Heap@45 () T@U)
(declare-fun Heap@42 () T@U)
(declare-fun newPMask@12 () T@U)
(declare-fun Heap@43 () T@U)
(declare-fun Heap@39 () T@U)
(declare-fun Heap@40 () T@U)
(declare-fun Heap@41 () T@U)
(declare-fun Heap@37 () T@U)
(declare-fun newPMask@11 () T@U)
(declare-fun Heap@38 () T@U)
(declare-fun Heap@35 () T@U)
(declare-fun newPMask@10 () T@U)
(declare-fun Heap@36 () T@U)
(declare-fun ExhaleHeap@1 () T@U)
(declare-fun UnfoldingMask@23 () T@U)
(declare-fun Heap@33 () T@U)
(declare-fun Heap@34 () T@U)
(declare-fun UnfoldingMask@21 () T@U)
(declare-fun perm@30 () Real)
(declare-fun UnfoldingMask@22 () T@U)
(declare-fun UnfoldingMask@19 () T@U)
(declare-fun perm@29 () Real)
(declare-fun UnfoldingMask@20 () T@U)
(declare-fun Mask@15 () T@U)
(declare-fun Mask@14 () T@U)
(declare-fun perm@23 () Real)
(declare-fun Heap@32 () T@U)
(declare-fun perm@24 () Real)
(declare-fun Mask@16 () T@U)
(declare-fun perm@25 () Real)
(declare-fun UnfoldingMask@16 () T@U)
(declare-fun perm@26 () Real)
(declare-fun UnfoldingMask@17 () T@U)
(declare-fun perm@27 () Real)
(declare-fun UnfoldingMask@18 () T@U)
(declare-fun perm@28 () Real)
(declare-fun Heap@30 () T@U)
(declare-fun newPMask@9 () T@U)
(declare-fun Heap@31 () T@U)
(declare-fun Heap@28 () T@U)
(declare-fun newPMask@8 () T@U)
(declare-fun Heap@29 () T@U)
(declare-fun Heap@25 () T@U)
(declare-fun Heap@26 () T@U)
(declare-fun Heap@27 () T@U)
(declare-fun Heap@23 () T@U)
(declare-fun arg_this@0 () T@U)
(declare-fun newPMask@7 () T@U)
(declare-fun Heap@24 () T@U)
(declare-fun Heap@21 () T@U)
(declare-fun newPMask@6 () T@U)
(declare-fun Heap@22 () T@U)
(declare-fun UnfoldingHeap@6 () T@U)
(declare-fun UnfoldingMask@15 () T@U)
(declare-fun Heap@19 () T@U)
(declare-fun Heap@18 () T@U)
(declare-fun Heap@20 () T@U)
(declare-fun UnfoldingHeap@4 () T@U)
(declare-fun newPMask@5 () T@U)
(declare-fun UnfoldingHeap@5 () T@U)
(declare-fun UnfoldingHeap@2 () T@U)
(declare-fun newPMask@4 () T@U)
(declare-fun UnfoldingHeap@3 () T@U)
(declare-fun Unfolding1Mask@7 () T@U)
(declare-fun UnfoldingHeap@0 () T@U)
(declare-fun UnfoldingHeap@1 () T@U)
(declare-fun Unfolding1Mask@5 () T@U)
(declare-fun Unfolding1Mask@6 () T@U)
(declare-fun Unfolding1Mask@3 () T@U)
(declare-fun Unfolding1Mask@4 () T@U)
(declare-fun Unfolding1Mask@0 () T@U)
(declare-fun Unfolding1Mask@1 () T@U)
(declare-fun Unfolding1Mask@2 () T@U)
(declare-fun UnfoldingMask@13 () T@U)
(declare-fun perm@22 () Real)
(declare-fun UnfoldingMask@14 () T@U)
(declare-fun UnfoldingMask@11 () T@U)
(declare-fun perm@21 () Real)
(declare-fun UnfoldingMask@12 () T@U)
(declare-fun UnfoldingMask@8 () T@U)
(declare-fun perm@17 () Real)
(declare-fun perm@18 () Real)
(declare-fun UnfoldingMask@9 () T@U)
(declare-fun perm@19 () Real)
(declare-fun UnfoldingMask@10 () T@U)
(declare-fun perm@20 () Real)
(declare-fun Heap@16 () T@U)
(declare-fun newPMask@3 () T@U)
(declare-fun Heap@17 () T@U)
(declare-fun Heap@14 () T@U)
(declare-fun newPMask@2 () T@U)
(declare-fun Heap@15 () T@U)
(declare-fun Heap@11 () T@U)
(declare-fun Heap@12 () T@U)
(declare-fun Heap@13 () T@U)
(declare-fun Heap@9 () T@U)
(declare-fun newPMask@1 () T@U)
(declare-fun Heap@10 () T@U)
(declare-fun Heap@7 () T@U)
(declare-fun newPMask@0 () T@U)
(declare-fun Heap@8 () T@U)
(declare-fun ExhaleHeap@0 () T@U)
(declare-fun UnfoldingMask@7 () T@U)
(declare-fun Heap@5 () T@U)
(declare-fun Heap@6 () T@U)
(declare-fun UnfoldingMask@5 () T@U)
(declare-fun perm@16 () Real)
(declare-fun UnfoldingMask@6 () T@U)
(declare-fun UnfoldingMask@3 () T@U)
(declare-fun perm@15 () Real)
(declare-fun UnfoldingMask@4 () T@U)
(declare-fun Mask@12 () T@U)
(declare-fun Mask@11 () T@U)
(declare-fun perm@9 () Real)
(declare-fun Heap@2 () T@U)
(declare-fun perm@10 () Real)
(declare-fun Mask@13 () T@U)
(declare-fun perm@11 () Real)
(declare-fun UnfoldingMask@0 () T@U)
(declare-fun perm@12 () Real)
(declare-fun UnfoldingMask@1 () T@U)
(declare-fun perm@13 () Real)
(declare-fun UnfoldingMask@2 () T@U)
(declare-fun perm@14 () Real)
(declare-fun tmp_child () T@U)
(declare-fun tmp_sibling () T@U)
(declare-fun Heap@3 () T@U)
(declare-fun Heap@4 () T@U)
(declare-fun Mask@9 () T@U)
(declare-fun perm@8 () Real)
(declare-fun Mask@10 () T@U)
(declare-fun Mask@7 () T@U)
(declare-fun perm@7 () Real)
(declare-fun Mask@8 () T@U)
(declare-fun perm@4 () Real)
(declare-fun Mask@5 () T@U)
(declare-fun Mask@4 () T@U)
(declare-fun perm@5 () Real)
(declare-fun Mask@6 () T@U)
(declare-fun perm@6 () Real)
(declare-fun Heap@0 () T@U)
(declare-fun Heap@1 () T@U)
(declare-fun newVersion@0 () T@U)
(declare-fun Mask@3 () T@U)
(declare-fun perm@3 () Real)
(declare-fun Heap@@10 () T@U)
(declare-fun Mask@1 () T@U)
(declare-fun Mask@0 () T@U)
(declare-fun Mask@2 () T@U)
(declare-fun perm@0 () Real)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type Heap@96) (MapType0Type RefType)) (= (type freshObj@0) RefType)) (= (type newPMask@27) (MapType1Type RefType boolType))) (= (type Heap@97) (MapType0Type RefType))) (= (type Heap@98) (MapType0Type RefType))) (= (type Heap@94) (MapType0Type RefType))) (= (type newPMask@26) (MapType1Type RefType boolType))) (= (type Heap@95) (MapType0Type RefType))) (= (type Heap@91) (MapType0Type RefType))) (= (type Mask@36) (MapType1Type RefType realType))) (= (type Heap@92) (MapType0Type RefType))) (= (type Heap@93) (MapType0Type RefType))) (= (type Heap@89) (MapType0Type RefType))) (= (type this@@5) RefType)) (= (type newPMask@25) (MapType1Type RefType boolType))) (= (type Heap@90) (MapType0Type RefType))) (= (type Heap@87) (MapType0Type RefType))) (= (type newPMask@24) (MapType1Type RefType boolType))) (= (type Heap@88) (MapType0Type RefType))) (= (type Heap@84) (MapType0Type RefType))) (= (type Unfolding1Mask@23) (MapType1Type RefType realType))) (= (type Heap@85) (MapType0Type RefType))) (= (type Heap@86) (MapType0Type RefType))) (= (type Unfolding1Mask@22) (MapType1Type RefType realType))) (= (type Unfolding1Mask@21) (MapType1Type RefType realType))) (= (type Unfolding1Mask@20) (MapType1Type RefType realType))) (= (type Unfolding1Mask@19) (MapType1Type RefType realType))) (= (type Unfolding1Mask@16) (MapType1Type RefType realType))) (= (type UnfoldingMask@39) (MapType1Type RefType realType))) (= (type Unfolding1Mask@17) (MapType1Type RefType realType))) (= (type Unfolding1Mask@18) (MapType1Type RefType realType))) (forall ((arg0@@28 T@U) (arg1@@10 T@U) ) (! (= (type (CombineFrames arg0@@28 arg1@@10)) FrameTypeType)
 :qid |funType:CombineFrames|
 :pattern ( (CombineFrames arg0@@28 arg1@@10))
))) (forall ((arg0@@29 T@U) ) (! (= (type (FrameFragment arg0@@29)) FrameTypeType)
 :qid |funType:FrameFragment|
 :pattern ( (FrameFragment arg0@@29))
))) (= (type UnfoldingMask@38) (MapType1Type RefType realType))) (= (type UnfoldingMask@37) (MapType1Type RefType realType))) (= (type UnfoldingMask@36) (MapType1Type RefType realType))) (= (type UnfoldingMask@35) (MapType1Type RefType realType))) (= (type UnfoldingMask@32) (MapType1Type RefType realType))) (= (type Mask@34) (MapType1Type RefType realType))) (= (type UnfoldingMask@33) (MapType1Type RefType realType))) (= (type UnfoldingMask@34) (MapType1Type RefType realType))) (= (type Mask@35) (MapType1Type RefType realType))) (= (type Heap@82) (MapType0Type RefType))) (= (type newPMask@23) (MapType1Type RefType boolType))) (= (type Heap@83) (MapType0Type RefType))) (= (type Heap@80) (MapType0Type RefType))) (= (type newPMask@22) (MapType1Type RefType boolType))) (= (type Heap@81) (MapType0Type RefType))) (= (type Heap@78) (MapType0Type RefType))) (= (type Heap@77) (MapType0Type RefType))) (= (type Heap@79) (MapType0Type RefType))) (= (type Heap@75) (MapType0Type RefType))) (= (type Heap@74) (MapType0Type RefType))) (= (type Heap@76) (MapType0Type RefType))) (= (type freshVersion@1) FrameTypeType)) (= (type Mask@33) (MapType1Type RefType realType))) (= (type Mask@31) (MapType1Type RefType realType))) (= (type Mask@32) (MapType1Type RefType realType))) (= (type Mask@29) (MapType1Type RefType realType))) (= (type Mask@30) (MapType1Type RefType realType))) (= (type Mask@28) (MapType1Type RefType realType))) (= (type Mask@27) (MapType1Type RefType realType))) (= (type Mask@26) (MapType1Type RefType realType))) (= (type Heap@72) (MapType0Type RefType))) (= (type newPMask@21) (MapType1Type RefType boolType))) (= (type Heap@73) (MapType0Type RefType))) (= (type Heap@70) (MapType0Type RefType))) (= (type newPMask@20) (MapType1Type RefType boolType))) (= (type Heap@71) (MapType0Type RefType))) (= (type Heap@68) (MapType0Type RefType))) (= (type Heap@67) (MapType0Type RefType))) (= (type Heap@69) (MapType0Type RefType))) (= (type Heap@65) (MapType0Type RefType))) (= (type Heap@64) (MapType0Type RefType))) (= (type Heap@66) (MapType0Type RefType))) (= (type freshVersion@0) FrameTypeType)) (= (type Mask@25) (MapType1Type RefType realType))) (= (type Mask@23) (MapType1Type RefType realType))) (= (type Mask@24) (MapType1Type RefType realType))) (= (type Mask@21) (MapType1Type RefType realType))) (= (type Mask@22) (MapType1Type RefType realType))) (= (type Mask@20) (MapType1Type RefType realType))) (= (type Mask@19) (MapType1Type RefType realType))) (= (type Mask@18) (MapType1Type RefType realType))) (= (type Heap@2) (MapType0Type RefType))) (= (type Mask@11) (MapType1Type RefType realType))) (= (type Heap@3) (MapType0Type RefType))) (= (type Heap@4) (MapType0Type RefType))) (= (type Heap@60) (MapType0Type RefType))) (= (type Mask@17) (MapType1Type RefType realType))) (= (type tmp_sibling@0) RefType)) (= (type Heap@61) (MapType0Type RefType))) (= (type Heap@62) (MapType0Type RefType))) (= (type tmp_child@0) RefType)) (= (type Heap@63) (MapType0Type RefType))) (= (type Heap@58) (MapType0Type RefType))) (= (type newPMask@19) (MapType1Type RefType boolType))) (= (type Heap@59) (MapType0Type RefType))) (= (type Heap@56) (MapType0Type RefType))) (= (type newPMask@18) (MapType1Type RefType boolType))) (= (type Heap@57) (MapType0Type RefType))) (= (type Heap@53) (MapType0Type RefType))) (= (type Heap@54) (MapType0Type RefType))) (= (type Heap@55) (MapType0Type RefType))) (= (type Heap@51) (MapType0Type RefType))) (= (type arg_this_1@0) RefType)) (= (type newPMask@17) (MapType1Type RefType boolType))) (= (type Heap@52) (MapType0Type RefType))) (= (type Heap@49) (MapType0Type RefType))) (= (type newPMask@16) (MapType1Type RefType boolType))) (= (type Heap@50) (MapType0Type RefType))) (= (type UnfoldingHeap@13) (MapType0Type RefType))) (= (type UnfoldingMask@31) (MapType1Type RefType realType))) (= (type Heap@47) (MapType0Type RefType))) (= (type Heap@46) (MapType0Type RefType))) (= (type Heap@48) (MapType0Type RefType))) (= (type UnfoldingHeap@11) (MapType0Type RefType))) (= (type newPMask@15) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@12) (MapType0Type RefType))) (= (type UnfoldingHeap@9) (MapType0Type RefType))) (= (type newPMask@14) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@10) (MapType0Type RefType))) (= (type Unfolding1Mask@15) (MapType1Type RefType realType))) (= (type UnfoldingHeap@7) (MapType0Type RefType))) (= (type UnfoldingHeap@8) (MapType0Type RefType))) (= (type Unfolding1Mask@14) (MapType1Type RefType realType))) (= (type Unfolding1Mask@13) (MapType1Type RefType realType))) (= (type Unfolding1Mask@12) (MapType1Type RefType realType))) (= (type Unfolding1Mask@11) (MapType1Type RefType realType))) (= (type Unfolding1Mask@8) (MapType1Type RefType realType))) (= (type Unfolding1Mask@9) (MapType1Type RefType realType))) (= (type Unfolding1Mask@10) (MapType1Type RefType realType))) (= (type UnfoldingMask@30) (MapType1Type RefType realType))) (= (type UnfoldingMask@29) (MapType1Type RefType realType))) (= (type UnfoldingMask@28) (MapType1Type RefType realType))) (= (type UnfoldingMask@27) (MapType1Type RefType realType))) (= (type UnfoldingMask@24) (MapType1Type RefType realType))) (= (type UnfoldingMask@25) (MapType1Type RefType realType))) (= (type UnfoldingMask@26) (MapType1Type RefType realType))) (= (type Heap@44) (MapType0Type RefType))) (= (type newPMask@13) (MapType1Type RefType boolType))) (= (type Heap@45) (MapType0Type RefType))) (= (type Heap@42) (MapType0Type RefType))) (= (type newPMask@12) (MapType1Type RefType boolType))) (= (type Heap@43) (MapType0Type RefType))) (= (type Heap@39) (MapType0Type RefType))) (= (type Heap@40) (MapType0Type RefType))) (= (type Heap@41) (MapType0Type RefType))) (= (type Heap@37) (MapType0Type RefType))) (= (type newPMask@11) (MapType1Type RefType boolType))) (= (type Heap@38) (MapType0Type RefType))) (= (type Heap@35) (MapType0Type RefType))) (= (type newPMask@10) (MapType1Type RefType boolType))) (= (type Heap@36) (MapType0Type RefType))) (= (type ExhaleHeap@1) (MapType0Type RefType))) (= (type UnfoldingMask@23) (MapType1Type RefType realType))) (= (type Heap@33) (MapType0Type RefType))) (= (type Heap@34) (MapType0Type RefType))) (= (type UnfoldingMask@22) (MapType1Type RefType realType))) (= (type UnfoldingMask@21) (MapType1Type RefType realType))) (= (type UnfoldingMask@20) (MapType1Type RefType realType))) (= (type UnfoldingMask@19) (MapType1Type RefType realType))) (= (type Mask@15) (MapType1Type RefType realType))) (= (type Mask@14) (MapType1Type RefType realType))) (= (type Heap@32) (MapType0Type RefType))) (= (type Mask@16) (MapType1Type RefType realType))) (= (type UnfoldingMask@16) (MapType1Type RefType realType))) (= (type UnfoldingMask@17) (MapType1Type RefType realType))) (= (type UnfoldingMask@18) (MapType1Type RefType realType))) (= (type Heap@30) (MapType0Type RefType))) (= (type newPMask@9) (MapType1Type RefType boolType))) (= (type Heap@31) (MapType0Type RefType))) (= (type Heap@28) (MapType0Type RefType))) (= (type newPMask@8) (MapType1Type RefType boolType))) (= (type Heap@29) (MapType0Type RefType))) (= (type Heap@25) (MapType0Type RefType))) (= (type Heap@26) (MapType0Type RefType))) (= (type Heap@27) (MapType0Type RefType))) (= (type Heap@23) (MapType0Type RefType))) (= (type arg_this@0) RefType)) (= (type newPMask@7) (MapType1Type RefType boolType))) (= (type Heap@24) (MapType0Type RefType))) (= (type Heap@21) (MapType0Type RefType))) (= (type newPMask@6) (MapType1Type RefType boolType))) (= (type Heap@22) (MapType0Type RefType))) (= (type UnfoldingHeap@6) (MapType0Type RefType))) (= (type UnfoldingMask@15) (MapType1Type RefType realType))) (= (type Heap@19) (MapType0Type RefType))) (= (type Heap@18) (MapType0Type RefType))) (= (type Heap@20) (MapType0Type RefType))) (= (type UnfoldingHeap@4) (MapType0Type RefType))) (= (type newPMask@5) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@5) (MapType0Type RefType))) (= (type UnfoldingHeap@2) (MapType0Type RefType))) (= (type newPMask@4) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@3) (MapType0Type RefType))) (= (type Unfolding1Mask@7) (MapType1Type RefType realType))) (= (type UnfoldingHeap@0) (MapType0Type RefType))) (= (type UnfoldingHeap@1) (MapType0Type RefType))) (= (type Unfolding1Mask@6) (MapType1Type RefType realType))) (= (type Unfolding1Mask@5) (MapType1Type RefType realType))) (= (type Unfolding1Mask@4) (MapType1Type RefType realType))) (= (type Unfolding1Mask@3) (MapType1Type RefType realType))) (= (type Unfolding1Mask@0) (MapType1Type RefType realType))) (= (type Unfolding1Mask@1) (MapType1Type RefType realType))) (= (type Unfolding1Mask@2) (MapType1Type RefType realType))) (= (type UnfoldingMask@14) (MapType1Type RefType realType))) (= (type UnfoldingMask@13) (MapType1Type RefType realType))) (= (type UnfoldingMask@12) (MapType1Type RefType realType))) (= (type UnfoldingMask@11) (MapType1Type RefType realType))) (= (type UnfoldingMask@8) (MapType1Type RefType realType))) (= (type UnfoldingMask@9) (MapType1Type RefType realType))) (= (type UnfoldingMask@10) (MapType1Type RefType realType))) (= (type Heap@16) (MapType0Type RefType))) (= (type newPMask@3) (MapType1Type RefType boolType))) (= (type Heap@17) (MapType0Type RefType))) (= (type Heap@14) (MapType0Type RefType))) (= (type newPMask@2) (MapType1Type RefType boolType))) (= (type Heap@15) (MapType0Type RefType))) (= (type Heap@11) (MapType0Type RefType))) (= (type Heap@12) (MapType0Type RefType))) (= (type Heap@13) (MapType0Type RefType))) (= (type Heap@9) (MapType0Type RefType))) (= (type newPMask@1) (MapType1Type RefType boolType))) (= (type Heap@10) (MapType0Type RefType))) (= (type Heap@7) (MapType0Type RefType))) (= (type newPMask@0) (MapType1Type RefType boolType))) (= (type Heap@8) (MapType0Type RefType))) (= (type ExhaleHeap@0) (MapType0Type RefType))) (= (type UnfoldingMask@7) (MapType1Type RefType realType))) (= (type Heap@5) (MapType0Type RefType))) (= (type Heap@6) (MapType0Type RefType))) (= (type UnfoldingMask@6) (MapType1Type RefType realType))) (= (type UnfoldingMask@5) (MapType1Type RefType realType))) (= (type UnfoldingMask@4) (MapType1Type RefType realType))) (= (type UnfoldingMask@3) (MapType1Type RefType realType))) (= (type Mask@12) (MapType1Type RefType realType))) (= (type Mask@13) (MapType1Type RefType realType))) (= (type UnfoldingMask@0) (MapType1Type RefType realType))) (= (type UnfoldingMask@1) (MapType1Type RefType realType))) (= (type UnfoldingMask@2) (MapType1Type RefType realType))) (= (type tmp_child) RefType)) (= (type tmp_sibling) RefType)) (= (type Mask@10) (MapType1Type RefType realType))) (= (type Mask@9) (MapType1Type RefType realType))) (= (type Mask@8) (MapType1Type RefType realType))) (= (type Mask@7) (MapType1Type RefType realType))) (= (type Mask@5) (MapType1Type RefType realType))) (= (type Mask@4) (MapType1Type RefType realType))) (= (type Mask@6) (MapType1Type RefType realType))) (= (type Heap@1) (MapType0Type RefType))) (= (type Heap@0) (MapType0Type RefType))) (= (type newVersion@0) FrameTypeType)) (= (type Mask@3) (MapType1Type RefType realType))) (= (type Heap@@10) (MapType0Type RefType))) (= (type Mask@1) (MapType1Type RefType realType))) (= (type Mask@0) (MapType1Type RefType realType))) (= (type Mask@2) (MapType1Type RefType realType))) (= (type PostHeap@14) (MapType0Type RefType))) (= (type UnfoldingMask@54) (MapType1Type RefType realType))) (= (type UnfoldingMask@53) (MapType1Type RefType realType))) (= (type UnfoldingMask@55) (MapType1Type RefType realType))) (= (type UnfoldingMask@52) (MapType1Type RefType realType))) (= (type UnfoldingMask@51) (MapType1Type RefType realType))) (= (type PostMask@1) (MapType1Type RefType realType))) (= (type UnfoldingMask@48) (MapType1Type RefType realType))) (= (type UnfoldingMask@49) (MapType1Type RefType realType))) (= (type UnfoldingMask@50) (MapType1Type RefType realType))) (= (type PostHeap@12) (MapType0Type RefType))) (= (type res) RefType)) (= (type newPMask@33) (MapType1Type RefType boolType))) (= (type PostHeap@13) (MapType0Type RefType))) (= (type PostHeap@10) (MapType0Type RefType))) (= (type newPMask@32) (MapType1Type RefType boolType))) (= (type PostHeap@11) (MapType0Type RefType))) (= (type PostHeap@7) (MapType0Type RefType))) (= (type PostHeap@8) (MapType0Type RefType))) (= (type PostHeap@9) (MapType0Type RefType))) (= (type PostHeap@5) (MapType0Type RefType))) (= (type newPMask@31) (MapType1Type RefType boolType))) (= (type PostHeap@6) (MapType0Type RefType))) (= (type PostHeap@3) (MapType0Type RefType))) (= (type newPMask@30) (MapType1Type RefType boolType))) (= (type PostHeap@4) (MapType0Type RefType))) (= (type UnfoldingHeap@20) (MapType0Type RefType))) (= (type UnfoldingMask@47) (MapType1Type RefType realType))) (= (type PostHeap@1) (MapType0Type RefType))) (= (type PostHeap@0) (MapType0Type RefType))) (= (type PostHeap@2) (MapType0Type RefType))) (= (type UnfoldingHeap@18) (MapType0Type RefType))) (= (type newPMask@29) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@19) (MapType0Type RefType))) (= (type UnfoldingHeap@16) (MapType0Type RefType))) (= (type newPMask@28) (MapType1Type RefType boolType))) (= (type UnfoldingHeap@17) (MapType0Type RefType))) (= (type UnfoldingHeap@14) (MapType0Type RefType))) (= (type UnfoldingHeap@15) (MapType0Type RefType))) (= (type Unfolding1Mask@31) (MapType1Type RefType realType))) (= (type Unfolding1Mask@30) (MapType1Type RefType realType))) (= (type Unfolding1Mask@29) (MapType1Type RefType realType))) (= (type Unfolding1Mask@28) (MapType1Type RefType realType))) (= (type Unfolding1Mask@27) (MapType1Type RefType realType))) (= (type Unfolding1Mask@24) (MapType1Type RefType realType))) (= (type Unfolding1Mask@25) (MapType1Type RefType realType))) (= (type Unfolding1Mask@26) (MapType1Type RefType realType))) (= (type UnfoldingMask@46) (MapType1Type RefType realType))) (= (type UnfoldingMask@45) (MapType1Type RefType realType))) (= (type UnfoldingMask@44) (MapType1Type RefType realType))) (= (type UnfoldingMask@43) (MapType1Type RefType realType))) (= (type UnfoldingMask@40) (MapType1Type RefType realType))) (= (type UnfoldingMask@41) (MapType1Type RefType realType))) (= (type UnfoldingMask@42) (MapType1Type RefType realType))) (= (type PostMask@0) (MapType1Type RefType realType))))
(set-info :boogie-vc-id cloneTree)
(set-option :timeout 0)
(set-option :rlimit 0)
(assert (not
 (=> (= (ControlFlow 0 0) 329) (let ((anon31_correct true))
(let ((anon201_Else_correct  (=> (= (MapType0Select PostHeap@14 this@@5 next_sibling) null) (=> (and (= UnfoldingMask@55 UnfoldingMask@53) (= (ControlFlow 0 276) 274)) anon31_correct))))
(let ((anon201_Then_correct  (=> (not (= (MapType0Select PostHeap@14 this@@5 next_sibling) null)) (=> (and (= perm@60 (* FullPerm (/ (to_real 1) (to_real 2)))) (= UnfoldingMask@54 (MapType1Store UnfoldingMask@53 null (tree (MapType0Select PostHeap@14 this@@5 next_sibling)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@53 null (tree (MapType0Select PostHeap@14 this@@5 next_sibling)))) perm@60))))) (=> (and (and (InsidePredicate (tree this@@5) (MapType0Select PostHeap@14 null (tree this@@5)) (tree (MapType0Select PostHeap@14 this@@5 next_sibling)) (MapType0Select PostHeap@14 null (tree (MapType0Select PostHeap@14 this@@5 next_sibling)))) (state PostHeap@14 UnfoldingMask@54)) (and (= UnfoldingMask@55 UnfoldingMask@54) (= (ControlFlow 0 275) 274))) anon31_correct)))))
(let ((anon200_Else_correct  (=> (and (= (MapType0Select PostHeap@14 this@@5 next_child) null) (= UnfoldingMask@53 UnfoldingMask@51)) (and (=> (= (ControlFlow 0 278) 275) anon201_Then_correct) (=> (= (ControlFlow 0 278) 276) anon201_Else_correct)))))
(let ((anon200_Then_correct  (=> (and (not (= (MapType0Select PostHeap@14 this@@5 next_child) null)) (= perm@59 (* FullPerm (/ (to_real 1) (to_real 2))))) (=> (and (and (= UnfoldingMask@52 (MapType1Store UnfoldingMask@51 null (tree (MapType0Select PostHeap@14 this@@5 next_child)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@51 null (tree (MapType0Select PostHeap@14 this@@5 next_child)))) perm@59)))) (InsidePredicate (tree this@@5) (MapType0Select PostHeap@14 null (tree this@@5)) (tree (MapType0Select PostHeap@14 this@@5 next_child)) (MapType0Select PostHeap@14 null (tree (MapType0Select PostHeap@14 this@@5 next_child))))) (and (state PostHeap@14 UnfoldingMask@52) (= UnfoldingMask@53 UnfoldingMask@52))) (and (=> (= (ControlFlow 0 277) 275) anon201_Then_correct) (=> (= (ControlFlow 0 277) 276) anon201_Else_correct))))))
(let ((anon27_correct  (=> (state PostHeap@14 PostMask@1) (=> (and (and (and (and (|tree#trigger| PostHeap@14 (tree this@@5)) (= (MapType0Select PostHeap@14 null (tree this@@5)) (CombineFrames (FrameFragment (MapType0Select PostHeap@14 this@@5 data)) (CombineFrames (FrameFragment (MapType0Select PostHeap@14 this@@5 next_child)) (CombineFrames (FrameFragment (MapType0Select PostHeap@14 this@@5 next_sibling)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select PostHeap@14 this@@5 next_child) null)) (MapType0Select PostHeap@14 null (tree (MapType0Select PostHeap@14 this@@5 next_child))) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select PostHeap@14 this@@5 next_sibling) null)) (MapType0Select PostHeap@14 null (tree (MapType0Select PostHeap@14 this@@5 next_sibling))) EmptyFrame)))))))) (and (= perm@55 (/ (to_real 1) (to_real 2))) (= UnfoldingMask@48 (MapType1Store PostMask@1 null (tree this@@5) (real_2_U (- (U_2_real (MapType1Select PostMask@1 null (tree this@@5))) perm@55)))))) (and (and (= perm@56 (* FullPerm (/ (to_real 1) (to_real 2)))) (=> (> perm@56 NoPerm) (not (= this@@5 null)))) (and (= UnfoldingMask@49 (MapType1Store UnfoldingMask@48 this@@5 data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@48 this@@5 data)) perm@56)))) (state PostHeap@14 UnfoldingMask@49)))) (and (and (and (= perm@57 (* FullPerm (/ (to_real 1) (to_real 2)))) (=> (> perm@57 NoPerm) (not (= this@@5 null)))) (and (= UnfoldingMask@50 (MapType1Store UnfoldingMask@49 this@@5 next_child (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@49 this@@5 next_child)) perm@57)))) (state PostHeap@14 UnfoldingMask@50))) (and (and (= perm@58 (* FullPerm (/ (to_real 1) (to_real 2)))) (=> (> perm@58 NoPerm) (not (= this@@5 null)))) (and (= UnfoldingMask@51 (MapType1Store UnfoldingMask@50 this@@5 next_sibling (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@50 this@@5 next_sibling)) perm@58)))) (state PostHeap@14 UnfoldingMask@51))))) (and (=> (= (ControlFlow 0 279) 277) anon200_Then_correct) (=> (= (ControlFlow 0 279) 278) anon200_Else_correct))))))
(let ((anon199_Else_correct  (=> (= (MapType0Select PostHeap@12 res next_sibling) null) (=> (and (= PostHeap@14 PostHeap@12) (= (ControlFlow 0 281) 279)) anon27_correct))))
(let ((anon199_Then_correct  (=> (not (= (MapType0Select PostHeap@12 res next_sibling) null)) (=> (and (and (forall ((o_26 T@U) (f_30 T@U) ) (! (let ((B@@11 (FieldTypeInv1 (type f_30))))
(let ((A@@12 (FieldTypeInv0 (type f_30))))
 (=> (and (and (= (type o_26) RefType) (= (type f_30) (FieldType A@@12 B@@11))) (or (U_2_bool (MapType1Select (MapType0Select PostHeap@12 null (|tree#sm| res)) o_26 f_30)) (U_2_bool (MapType1Select (MapType0Select PostHeap@12 null (|tree#sm| (MapType0Select PostHeap@12 res next_sibling))) o_26 f_30)))) (U_2_bool (MapType1Select newPMask@33 o_26 f_30)))))
 :qid |stdinbpl.1267:33|
 :skolemid |51|
 :pattern ( (MapType1Select newPMask@33 o_26 f_30))
)) (= PostHeap@13 (MapType0Store PostHeap@12 null (|tree#sm| res) newPMask@33))) (and (= PostHeap@14 PostHeap@13) (= (ControlFlow 0 280) 279))) anon27_correct))))
(let ((anon198_Else_correct  (=> (and (= (MapType0Select PostHeap@10 res next_child) null) (= PostHeap@12 PostHeap@10)) (and (=> (= (ControlFlow 0 283) 280) anon199_Then_correct) (=> (= (ControlFlow 0 283) 281) anon199_Else_correct)))))
(let ((anon198_Then_correct  (=> (and (and (not (= (MapType0Select PostHeap@10 res next_child) null)) (forall ((o_25 T@U) (f_29 T@U) ) (! (let ((B@@12 (FieldTypeInv1 (type f_29))))
(let ((A@@13 (FieldTypeInv0 (type f_29))))
 (=> (and (and (= (type o_25) RefType) (= (type f_29) (FieldType A@@13 B@@12))) (or (U_2_bool (MapType1Select (MapType0Select PostHeap@10 null (|tree#sm| res)) o_25 f_29)) (U_2_bool (MapType1Select (MapType0Select PostHeap@10 null (|tree#sm| (MapType0Select PostHeap@10 res next_child))) o_25 f_29)))) (U_2_bool (MapType1Select newPMask@32 o_25 f_29)))))
 :qid |stdinbpl.1259:33|
 :skolemid |50|
 :pattern ( (MapType1Select newPMask@32 o_25 f_29))
))) (and (= PostHeap@11 (MapType0Store PostHeap@10 null (|tree#sm| res) newPMask@32)) (= PostHeap@12 PostHeap@11))) (and (=> (= (ControlFlow 0 282) 280) anon199_Then_correct) (=> (= (ControlFlow 0 282) 281) anon199_Else_correct)))))
(let ((anon23_correct  (=> (and (and (state PostHeap@7 PostMask@1) (= PostHeap@8 (MapType0Store PostHeap@7 null (|tree#sm| res) (MapType1Store (MapType0Select PostHeap@7 null (|tree#sm| res)) res data (bool_2_U true))))) (and (= PostHeap@9 (MapType0Store PostHeap@8 null (|tree#sm| res) (MapType1Store (MapType0Select PostHeap@8 null (|tree#sm| res)) res next_child (bool_2_U true)))) (= PostHeap@10 (MapType0Store PostHeap@9 null (|tree#sm| res) (MapType1Store (MapType0Select PostHeap@9 null (|tree#sm| res)) res next_sibling (bool_2_U true)))))) (and (=> (= (ControlFlow 0 284) 282) anon198_Then_correct) (=> (= (ControlFlow 0 284) 283) anon198_Else_correct)))))
(let ((anon197_Else_correct  (=> (= (MapType0Select PostHeap@5 this@@5 next_sibling) null) (=> (and (= PostHeap@7 PostHeap@5) (= (ControlFlow 0 286) 284)) anon23_correct))))
(let ((anon197_Then_correct  (=> (not (= (MapType0Select PostHeap@5 this@@5 next_sibling) null)) (=> (and (and (forall ((o_24 T@U) (f_28 T@U) ) (! (let ((B@@13 (FieldTypeInv1 (type f_28))))
(let ((A@@14 (FieldTypeInv0 (type f_28))))
 (=> (and (and (= (type o_24) RefType) (= (type f_28) (FieldType A@@14 B@@13))) (or (U_2_bool (MapType1Select (MapType0Select PostHeap@5 null (|tree#sm| this@@5)) o_24 f_28)) (U_2_bool (MapType1Select (MapType0Select PostHeap@5 null (|tree#sm| (MapType0Select PostHeap@5 this@@5 next_sibling))) o_24 f_28)))) (U_2_bool (MapType1Select newPMask@31 o_24 f_28)))))
 :qid |stdinbpl.1247:33|
 :skolemid |49|
 :pattern ( (MapType1Select newPMask@31 o_24 f_28))
)) (= PostHeap@6 (MapType0Store PostHeap@5 null (|tree#sm| this@@5) newPMask@31))) (and (= PostHeap@7 PostHeap@6) (= (ControlFlow 0 285) 284))) anon23_correct))))
(let ((anon196_Else_correct  (=> (and (= (MapType0Select PostHeap@3 this@@5 next_child) null) (= PostHeap@5 PostHeap@3)) (and (=> (= (ControlFlow 0 288) 285) anon197_Then_correct) (=> (= (ControlFlow 0 288) 286) anon197_Else_correct)))))
(let ((anon196_Then_correct  (=> (and (and (not (= (MapType0Select PostHeap@3 this@@5 next_child) null)) (forall ((o_23 T@U) (f_27 T@U) ) (! (let ((B@@14 (FieldTypeInv1 (type f_27))))
(let ((A@@15 (FieldTypeInv0 (type f_27))))
 (=> (and (and (= (type o_23) RefType) (= (type f_27) (FieldType A@@15 B@@14))) (or (U_2_bool (MapType1Select (MapType0Select PostHeap@3 null (|tree#sm| this@@5)) o_23 f_27)) (U_2_bool (MapType1Select (MapType0Select PostHeap@3 null (|tree#sm| (MapType0Select PostHeap@3 this@@5 next_child))) o_23 f_27)))) (U_2_bool (MapType1Select newPMask@30 o_23 f_27)))))
 :qid |stdinbpl.1239:33|
 :skolemid |48|
 :pattern ( (MapType1Select newPMask@30 o_23 f_27))
))) (and (= PostHeap@4 (MapType0Store PostHeap@3 null (|tree#sm| this@@5) newPMask@30)) (= PostHeap@5 PostHeap@4))) (and (=> (= (ControlFlow 0 287) 285) anon197_Then_correct) (=> (= (ControlFlow 0 287) 286) anon197_Else_correct)))))
(let ((anon19_correct  (=> (and (and (state UnfoldingHeap@20 UnfoldingMask@47) (= PostHeap@1 (MapType0Store PostHeap@0 null (|tree#sm| this@@5) (MapType1Store (MapType0Select PostHeap@0 null (|tree#sm| this@@5)) this@@5 data (bool_2_U true))))) (and (= PostHeap@2 (MapType0Store PostHeap@1 null (|tree#sm| this@@5) (MapType1Store (MapType0Select PostHeap@1 null (|tree#sm| this@@5)) this@@5 next_child (bool_2_U true)))) (= PostHeap@3 (MapType0Store PostHeap@2 null (|tree#sm| this@@5) (MapType1Store (MapType0Select PostHeap@2 null (|tree#sm| this@@5)) this@@5 next_sibling (bool_2_U true)))))) (and (=> (= (ControlFlow 0 289) 287) anon196_Then_correct) (=> (= (ControlFlow 0 289) 288) anon196_Else_correct)))))
(let ((anon195_Else_correct  (=> (= (MapType0Select UnfoldingHeap@18 res next_sibling) null) (=> (and (= UnfoldingHeap@20 UnfoldingHeap@18) (= (ControlFlow 0 291) 289)) anon19_correct))))
(let ((anon195_Then_correct  (=> (not (= (MapType0Select UnfoldingHeap@18 res next_sibling) null)) (=> (and (and (forall ((o_22 T@U) (f_26 T@U) ) (! (let ((B@@15 (FieldTypeInv1 (type f_26))))
(let ((A@@16 (FieldTypeInv0 (type f_26))))
 (=> (and (and (= (type o_22) RefType) (= (type f_26) (FieldType A@@16 B@@15))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@18 null (|tree#sm| res)) o_22 f_26)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@18 null (|tree#sm| (MapType0Select UnfoldingHeap@18 res next_sibling))) o_22 f_26)))) (U_2_bool (MapType1Select newPMask@29 o_22 f_26)))))
 :qid |stdinbpl.1225:33|
 :skolemid |47|
 :pattern ( (MapType1Select newPMask@29 o_22 f_26))
)) (= UnfoldingHeap@19 (MapType0Store UnfoldingHeap@18 null (|tree#sm| res) newPMask@29))) (and (= UnfoldingHeap@20 UnfoldingHeap@19) (= (ControlFlow 0 290) 289))) anon19_correct))))
(let ((anon194_Else_correct  (=> (and (= (MapType0Select UnfoldingHeap@16 res next_child) null) (= UnfoldingHeap@18 UnfoldingHeap@16)) (and (=> (= (ControlFlow 0 293) 290) anon195_Then_correct) (=> (= (ControlFlow 0 293) 291) anon195_Else_correct)))))
(let ((anon194_Then_correct  (=> (and (and (not (= (MapType0Select UnfoldingHeap@16 res next_child) null)) (forall ((o_21 T@U) (f_25 T@U) ) (! (let ((B@@16 (FieldTypeInv1 (type f_25))))
(let ((A@@17 (FieldTypeInv0 (type f_25))))
 (=> (and (and (= (type o_21) RefType) (= (type f_25) (FieldType A@@17 B@@16))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@16 null (|tree#sm| res)) o_21 f_25)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@16 null (|tree#sm| (MapType0Select UnfoldingHeap@16 res next_child))) o_21 f_25)))) (U_2_bool (MapType1Select newPMask@28 o_21 f_25)))))
 :qid |stdinbpl.1217:33|
 :skolemid |46|
 :pattern ( (MapType1Select newPMask@28 o_21 f_25))
))) (and (= UnfoldingHeap@17 (MapType0Store UnfoldingHeap@16 null (|tree#sm| res) newPMask@28)) (= UnfoldingHeap@18 UnfoldingHeap@17))) (and (=> (= (ControlFlow 0 292) 290) anon195_Then_correct) (=> (= (ControlFlow 0 292) 291) anon195_Else_correct)))))
(let ((anon15_correct  (=> (= UnfoldingHeap@14 (MapType0Store PostHeap@0 null (|tree#sm| res) (MapType1Store (MapType0Select PostHeap@0 null (|tree#sm| res)) res data (bool_2_U true)))) (=> (and (= UnfoldingHeap@15 (MapType0Store UnfoldingHeap@14 null (|tree#sm| res) (MapType1Store (MapType0Select UnfoldingHeap@14 null (|tree#sm| res)) res next_child (bool_2_U true)))) (= UnfoldingHeap@16 (MapType0Store UnfoldingHeap@15 null (|tree#sm| res) (MapType1Store (MapType0Select UnfoldingHeap@15 null (|tree#sm| res)) res next_sibling (bool_2_U true))))) (and (=> (= (ControlFlow 0 294) 292) anon194_Then_correct) (=> (= (ControlFlow 0 294) 293) anon194_Else_correct))))))
(let ((anon193_Else_correct  (=> (and (not (= (MapType0Select PostHeap@0 this@@5 next_child) (MapType0Select PostHeap@0 res next_child))) (= (ControlFlow 0 298) 294)) anon15_correct)))
(let ((anon193_Then_correct  (=> (= (MapType0Select PostHeap@0 this@@5 next_child) (MapType0Select PostHeap@0 res next_child)) (and (=> (= (ControlFlow 0 295) (- 0 297)) (HasDirectPerm Unfolding1Mask@31 this@@5 next_sibling)) (=> (HasDirectPerm Unfolding1Mask@31 this@@5 next_sibling) (and (=> (= (ControlFlow 0 295) (- 0 296)) (HasDirectPerm Unfolding1Mask@31 res next_sibling)) (=> (HasDirectPerm Unfolding1Mask@31 res next_sibling) (=> (= (ControlFlow 0 295) 294) anon15_correct))))))))
(let ((anon13_correct  (=> (and (or (and (= (MapType0Select PostHeap@0 res next_child) null) (= (MapType0Select PostHeap@0 res next_sibling) null)) (and (not (= (MapType0Select PostHeap@0 res next_child) null)) (not (= (MapType0Select PostHeap@0 res next_sibling) null)))) (state PostHeap@0 Unfolding1Mask@31)) (and (=> (= (ControlFlow 0 299) (- 0 301)) (HasDirectPerm Unfolding1Mask@31 this@@5 next_child)) (=> (HasDirectPerm Unfolding1Mask@31 this@@5 next_child) (and (=> (= (ControlFlow 0 299) (- 0 300)) (HasDirectPerm Unfolding1Mask@31 res next_child)) (=> (HasDirectPerm Unfolding1Mask@31 res next_child) (and (=> (= (ControlFlow 0 299) 295) anon193_Then_correct) (=> (= (ControlFlow 0 299) 298) anon193_Else_correct)))))))))
(let ((anon192_Else_correct  (=> (= (MapType0Select PostHeap@0 res next_sibling) null) (=> (and (= Unfolding1Mask@31 Unfolding1Mask@29) (= (ControlFlow 0 303) 299)) anon13_correct))))
(let ((anon192_Then_correct  (=> (and (not (= (MapType0Select PostHeap@0 res next_sibling) null)) (= Unfolding1Mask@30 (MapType1Store Unfolding1Mask@29 null (tree (MapType0Select PostHeap@0 res next_sibling)) (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@29 null (tree (MapType0Select PostHeap@0 res next_sibling)))) FullPerm))))) (=> (and (and (InsidePredicate (tree res) (MapType0Select PostHeap@0 null (tree res)) (tree (MapType0Select PostHeap@0 res next_sibling)) (MapType0Select PostHeap@0 null (tree (MapType0Select PostHeap@0 res next_sibling)))) (state PostHeap@0 Unfolding1Mask@30)) (and (= Unfolding1Mask@31 Unfolding1Mask@30) (= (ControlFlow 0 302) 299))) anon13_correct))))
(let ((anon191_Else_correct  (=> (and (= (MapType0Select PostHeap@0 res next_child) null) (= Unfolding1Mask@29 Unfolding1Mask@27)) (and (=> (= (ControlFlow 0 305) 302) anon192_Then_correct) (=> (= (ControlFlow 0 305) 303) anon192_Else_correct)))))
(let ((anon191_Then_correct  (=> (not (= (MapType0Select PostHeap@0 res next_child) null)) (=> (and (and (= Unfolding1Mask@28 (MapType1Store Unfolding1Mask@27 null (tree (MapType0Select PostHeap@0 res next_child)) (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@27 null (tree (MapType0Select PostHeap@0 res next_child)))) FullPerm)))) (InsidePredicate (tree res) (MapType0Select PostHeap@0 null (tree res)) (tree (MapType0Select PostHeap@0 res next_child)) (MapType0Select PostHeap@0 null (tree (MapType0Select PostHeap@0 res next_child))))) (and (state PostHeap@0 Unfolding1Mask@28) (= Unfolding1Mask@29 Unfolding1Mask@28))) (and (=> (= (ControlFlow 0 304) 302) anon192_Then_correct) (=> (= (ControlFlow 0 304) 303) anon192_Else_correct))))))
(let ((anon9_correct  (=> (and (= Unfolding1Mask@24 (MapType1Store UnfoldingMask@47 null (tree res) (real_2_U (- (U_2_real (MapType1Select UnfoldingMask@47 null (tree res))) FullPerm)))) (not (= res null))) (=> (and (and (and (= Unfolding1Mask@25 (MapType1Store Unfolding1Mask@24 res data (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@24 res data)) FullPerm)))) (state PostHeap@0 Unfolding1Mask@25)) (and (not (= res null)) (= Unfolding1Mask@26 (MapType1Store Unfolding1Mask@25 res next_child (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@25 res next_child)) FullPerm)))))) (and (and (state PostHeap@0 Unfolding1Mask@26) (not (= res null))) (and (= Unfolding1Mask@27 (MapType1Store Unfolding1Mask@26 res next_sibling (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@26 res next_sibling)) FullPerm)))) (state PostHeap@0 Unfolding1Mask@27)))) (and (=> (= (ControlFlow 0 306) 304) anon191_Then_correct) (=> (= (ControlFlow 0 306) 305) anon191_Else_correct))))))
(let ((anon190_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 309) 306)) anon9_correct)))
(let ((anon190_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 307) (- 0 308)) (<= FullPerm (U_2_real (MapType1Select UnfoldingMask@47 null (tree res))))) (=> (<= FullPerm (U_2_real (MapType1Select UnfoldingMask@47 null (tree res)))) (=> (= (ControlFlow 0 307) 306) anon9_correct))))))
(let ((anon7_correct  (=> (and (and (or (and (= (MapType0Select PostHeap@0 this@@5 next_child) null) (= (MapType0Select PostHeap@0 this@@5 next_sibling) null)) (and (not (= (MapType0Select PostHeap@0 this@@5 next_child) null)) (not (= (MapType0Select PostHeap@0 this@@5 next_sibling) null)))) (state PostHeap@0 UnfoldingMask@47)) (and (|tree#trigger| PostHeap@0 (tree res)) (= (MapType0Select PostHeap@0 null (tree res)) (CombineFrames (FrameFragment (MapType0Select PostHeap@0 res data)) (CombineFrames (FrameFragment (MapType0Select PostHeap@0 res next_child)) (CombineFrames (FrameFragment (MapType0Select PostHeap@0 res next_sibling)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select PostHeap@0 res next_child) null)) (MapType0Select PostHeap@0 null (tree (MapType0Select PostHeap@0 res next_child))) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select PostHeap@0 res next_sibling) null)) (MapType0Select PostHeap@0 null (tree (MapType0Select PostHeap@0 res next_sibling))) EmptyFrame))))))))) (and (=> (= (ControlFlow 0 310) 307) anon190_Then_correct) (=> (= (ControlFlow 0 310) 309) anon190_Else_correct)))))
(let ((anon189_Else_correct  (=> (= (MapType0Select PostHeap@0 this@@5 next_sibling) null) (=> (and (= UnfoldingMask@47 UnfoldingMask@45) (= (ControlFlow 0 313) 310)) anon7_correct))))
(let ((anon189_Then_correct  (=> (and (not (= (MapType0Select PostHeap@0 this@@5 next_sibling) null)) (= perm@54 (* FullPerm (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 311) (- 0 312)) (>= perm@54 NoPerm)) (=> (>= perm@54 NoPerm) (=> (= UnfoldingMask@46 (MapType1Store UnfoldingMask@45 null (tree (MapType0Select PostHeap@0 this@@5 next_sibling)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@45 null (tree (MapType0Select PostHeap@0 this@@5 next_sibling)))) perm@54)))) (=> (and (and (InsidePredicate (tree this@@5) (MapType0Select PostHeap@0 null (tree this@@5)) (tree (MapType0Select PostHeap@0 this@@5 next_sibling)) (MapType0Select PostHeap@0 null (tree (MapType0Select PostHeap@0 this@@5 next_sibling)))) (state PostHeap@0 UnfoldingMask@46)) (and (= UnfoldingMask@47 UnfoldingMask@46) (= (ControlFlow 0 311) 310))) anon7_correct)))))))
(let ((anon188_Else_correct  (=> (and (= (MapType0Select PostHeap@0 this@@5 next_child) null) (= UnfoldingMask@45 UnfoldingMask@43)) (and (=> (= (ControlFlow 0 316) 311) anon189_Then_correct) (=> (= (ControlFlow 0 316) 313) anon189_Else_correct)))))
(let ((anon188_Then_correct  (=> (and (not (= (MapType0Select PostHeap@0 this@@5 next_child) null)) (= perm@53 (* FullPerm (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 314) (- 0 315)) (>= perm@53 NoPerm)) (=> (>= perm@53 NoPerm) (=> (and (and (= UnfoldingMask@44 (MapType1Store UnfoldingMask@43 null (tree (MapType0Select PostHeap@0 this@@5 next_child)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@43 null (tree (MapType0Select PostHeap@0 this@@5 next_child)))) perm@53)))) (InsidePredicate (tree this@@5) (MapType0Select PostHeap@0 null (tree this@@5)) (tree (MapType0Select PostHeap@0 this@@5 next_child)) (MapType0Select PostHeap@0 null (tree (MapType0Select PostHeap@0 this@@5 next_child))))) (and (state PostHeap@0 UnfoldingMask@44) (= UnfoldingMask@45 UnfoldingMask@44))) (and (=> (= (ControlFlow 0 314) 311) anon189_Then_correct) (=> (= (ControlFlow 0 314) 313) anon189_Else_correct))))))))
(let ((anon3_correct  (=> (and (= UnfoldingMask@40 (MapType1Store PostMask@1 null (tree this@@5) (real_2_U (- (U_2_real (MapType1Select PostMask@1 null (tree this@@5))) perm@2)))) (= perm@50 (* FullPerm (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 317) (- 0 320)) (>= perm@50 NoPerm)) (=> (>= perm@50 NoPerm) (=> (and (and (=> (> perm@50 NoPerm) (not (= this@@5 null))) (= UnfoldingMask@41 (MapType1Store UnfoldingMask@40 this@@5 data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@40 this@@5 data)) perm@50))))) (and (state PostHeap@0 UnfoldingMask@41) (= perm@51 (* FullPerm (/ (to_real 1) (to_real 2)))))) (and (=> (= (ControlFlow 0 317) (- 0 319)) (>= perm@51 NoPerm)) (=> (>= perm@51 NoPerm) (=> (and (and (=> (> perm@51 NoPerm) (not (= this@@5 null))) (= UnfoldingMask@42 (MapType1Store UnfoldingMask@41 this@@5 next_child (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@41 this@@5 next_child)) perm@51))))) (and (state PostHeap@0 UnfoldingMask@42) (= perm@52 (* FullPerm (/ (to_real 1) (to_real 2)))))) (and (=> (= (ControlFlow 0 317) (- 0 318)) (>= perm@52 NoPerm)) (=> (>= perm@52 NoPerm) (=> (=> (> perm@52 NoPerm) (not (= this@@5 null))) (=> (and (= UnfoldingMask@43 (MapType1Store UnfoldingMask@42 this@@5 next_sibling (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@42 this@@5 next_sibling)) perm@52)))) (state PostHeap@0 UnfoldingMask@43)) (and (=> (= (ControlFlow 0 317) 314) anon188_Then_correct) (=> (= (ControlFlow 0 317) 316) anon188_Else_correct)))))))))))))))
(let ((anon187_Else_correct  (=> (and (= perm@2 NoPerm) (= (ControlFlow 0 323) 317)) anon3_correct)))
(let ((anon187_Then_correct  (=> (not (= perm@2 NoPerm)) (and (=> (= (ControlFlow 0 321) (- 0 322)) (<= perm@2 (U_2_real (MapType1Select PostMask@1 null (tree this@@5))))) (=> (<= perm@2 (U_2_real (MapType1Select PostMask@1 null (tree this@@5)))) (=> (= (ControlFlow 0 321) 317) anon3_correct))))))
(let ((anon186_Then_correct  (=> (and (state PostHeap@0 ZeroMask) (= perm@1 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 324) (- 0 326)) (>= perm@1 NoPerm)) (=> (>= perm@1 NoPerm) (=> (and (and (and (= PostMask@0 (MapType1Store ZeroMask null (tree this@@5) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (tree this@@5))) perm@1)))) (state PostHeap@0 PostMask@0)) (and (= PostMask@1 (MapType1Store PostMask@0 null (tree res) (real_2_U (+ (U_2_real (MapType1Select PostMask@0 null (tree res))) FullPerm)))) (state PostHeap@0 PostMask@1))) (and (and (state PostHeap@0 PostMask@1) (|tree#trigger| PostHeap@0 (tree this@@5))) (and (= (MapType0Select PostHeap@0 null (tree this@@5)) (CombineFrames (FrameFragment (MapType0Select PostHeap@0 this@@5 data)) (CombineFrames (FrameFragment (MapType0Select PostHeap@0 this@@5 next_child)) (CombineFrames (FrameFragment (MapType0Select PostHeap@0 this@@5 next_sibling)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select PostHeap@0 this@@5 next_child) null)) (MapType0Select PostHeap@0 null (tree (MapType0Select PostHeap@0 this@@5 next_child))) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select PostHeap@0 this@@5 next_sibling) null)) (MapType0Select PostHeap@0 null (tree (MapType0Select PostHeap@0 this@@5 next_sibling))) EmptyFrame))))))) (= perm@2 (/ (to_real 1) (to_real 2)))))) (and (=> (= (ControlFlow 0 324) (- 0 325)) (>= perm@2 NoPerm)) (=> (>= perm@2 NoPerm) (and (=> (= (ControlFlow 0 324) 321) anon187_Then_correct) (=> (= (ControlFlow 0 324) 323) anon187_Else_correct))))))))))
(let ((anon185_correct true))
(let ((anon277_Else_correct  (=> (= (MapType0Select Heap@96 freshObj@0 next_sibling) null) (=> (and (= Heap@98 Heap@96) (= (ControlFlow 0 3) 1)) anon185_correct))))
(let ((anon277_Then_correct  (=> (not (= (MapType0Select Heap@96 freshObj@0 next_sibling) null)) (=> (and (and (forall ((o_54 T@U) (f_58 T@U) ) (! (let ((B@@17 (FieldTypeInv1 (type f_58))))
(let ((A@@18 (FieldTypeInv0 (type f_58))))
 (=> (and (and (= (type o_54) RefType) (= (type f_58) (FieldType A@@18 B@@17))) (or (U_2_bool (MapType1Select (MapType0Select Heap@96 null (|tree#sm| freshObj@0)) o_54 f_58)) (U_2_bool (MapType1Select (MapType0Select Heap@96 null (|tree#sm| (MapType0Select Heap@96 freshObj@0 next_sibling))) o_54 f_58)))) (U_2_bool (MapType1Select newPMask@27 o_54 f_58)))))
 :qid |stdinbpl.2339:31|
 :skolemid |79|
 :pattern ( (MapType1Select newPMask@27 o_54 f_58))
)) (= Heap@97 (MapType0Store Heap@96 null (|tree#sm| freshObj@0) newPMask@27))) (and (= Heap@98 Heap@97) (= (ControlFlow 0 2) 1))) anon185_correct))))
(let ((anon276_Else_correct  (=> (and (= (MapType0Select Heap@94 freshObj@0 next_child) null) (= Heap@96 Heap@94)) (and (=> (= (ControlFlow 0 5) 2) anon277_Then_correct) (=> (= (ControlFlow 0 5) 3) anon277_Else_correct)))))
(let ((anon276_Then_correct  (=> (and (and (not (= (MapType0Select Heap@94 freshObj@0 next_child) null)) (forall ((o_53 T@U) (f_57 T@U) ) (! (let ((B@@18 (FieldTypeInv1 (type f_57))))
(let ((A@@19 (FieldTypeInv0 (type f_57))))
 (=> (and (and (= (type o_53) RefType) (= (type f_57) (FieldType A@@19 B@@18))) (or (U_2_bool (MapType1Select (MapType0Select Heap@94 null (|tree#sm| freshObj@0)) o_53 f_57)) (U_2_bool (MapType1Select (MapType0Select Heap@94 null (|tree#sm| (MapType0Select Heap@94 freshObj@0 next_child))) o_53 f_57)))) (U_2_bool (MapType1Select newPMask@26 o_53 f_57)))))
 :qid |stdinbpl.2331:31|
 :skolemid |78|
 :pattern ( (MapType1Select newPMask@26 o_53 f_57))
))) (and (= Heap@95 (MapType0Store Heap@94 null (|tree#sm| freshObj@0) newPMask@26)) (= Heap@96 Heap@95))) (and (=> (= (ControlFlow 0 4) 2) anon277_Then_correct) (=> (= (ControlFlow 0 4) 3) anon277_Else_correct)))))
(let ((anon181_correct  (=> (and (and (state Heap@91 Mask@36) (= Heap@92 (MapType0Store Heap@91 null (|tree#sm| freshObj@0) (MapType1Store (MapType0Select Heap@91 null (|tree#sm| freshObj@0)) freshObj@0 data (bool_2_U true))))) (and (= Heap@93 (MapType0Store Heap@92 null (|tree#sm| freshObj@0) (MapType1Store (MapType0Select Heap@92 null (|tree#sm| freshObj@0)) freshObj@0 next_child (bool_2_U true)))) (= Heap@94 (MapType0Store Heap@93 null (|tree#sm| freshObj@0) (MapType1Store (MapType0Select Heap@93 null (|tree#sm| freshObj@0)) freshObj@0 next_sibling (bool_2_U true)))))) (and (=> (= (ControlFlow 0 6) 4) anon276_Then_correct) (=> (= (ControlFlow 0 6) 5) anon276_Else_correct)))))
(let ((anon275_Else_correct  (=> (= (MapType0Select Heap@89 this@@5 next_sibling) null) (=> (and (= Heap@91 Heap@89) (= (ControlFlow 0 8) 6)) anon181_correct))))
(let ((anon275_Then_correct  (=> (not (= (MapType0Select Heap@89 this@@5 next_sibling) null)) (=> (and (and (forall ((o_52 T@U) (f_56 T@U) ) (! (let ((B@@19 (FieldTypeInv1 (type f_56))))
(let ((A@@20 (FieldTypeInv0 (type f_56))))
 (=> (and (and (= (type o_52) RefType) (= (type f_56) (FieldType A@@20 B@@19))) (or (U_2_bool (MapType1Select (MapType0Select Heap@89 null (|tree#sm| this@@5)) o_52 f_56)) (U_2_bool (MapType1Select (MapType0Select Heap@89 null (|tree#sm| (MapType0Select Heap@89 this@@5 next_sibling))) o_52 f_56)))) (U_2_bool (MapType1Select newPMask@25 o_52 f_56)))))
 :qid |stdinbpl.2319:31|
 :skolemid |77|
 :pattern ( (MapType1Select newPMask@25 o_52 f_56))
)) (= Heap@90 (MapType0Store Heap@89 null (|tree#sm| this@@5) newPMask@25))) (and (= Heap@91 Heap@90) (= (ControlFlow 0 7) 6))) anon181_correct))))
(let ((anon274_Else_correct  (=> (and (= (MapType0Select Heap@87 this@@5 next_child) null) (= Heap@89 Heap@87)) (and (=> (= (ControlFlow 0 10) 7) anon275_Then_correct) (=> (= (ControlFlow 0 10) 8) anon275_Else_correct)))))
(let ((anon274_Then_correct  (=> (and (and (not (= (MapType0Select Heap@87 this@@5 next_child) null)) (forall ((o_51 T@U) (f_55 T@U) ) (! (let ((B@@20 (FieldTypeInv1 (type f_55))))
(let ((A@@21 (FieldTypeInv0 (type f_55))))
 (=> (and (and (= (type o_51) RefType) (= (type f_55) (FieldType A@@21 B@@20))) (or (U_2_bool (MapType1Select (MapType0Select Heap@87 null (|tree#sm| this@@5)) o_51 f_55)) (U_2_bool (MapType1Select (MapType0Select Heap@87 null (|tree#sm| (MapType0Select Heap@87 this@@5 next_child))) o_51 f_55)))) (U_2_bool (MapType1Select newPMask@24 o_51 f_55)))))
 :qid |stdinbpl.2311:31|
 :skolemid |76|
 :pattern ( (MapType1Select newPMask@24 o_51 f_55))
))) (and (= Heap@88 (MapType0Store Heap@87 null (|tree#sm| this@@5) newPMask@24)) (= Heap@89 Heap@88))) (and (=> (= (ControlFlow 0 9) 7) anon275_Then_correct) (=> (= (ControlFlow 0 9) 8) anon275_Else_correct)))))
(let ((anon177_correct  (=> (and (or (and (= (MapType0Select Heap@84 freshObj@0 next_child) null) (= (MapType0Select Heap@84 freshObj@0 next_sibling) null)) (and (not (= (MapType0Select Heap@84 freshObj@0 next_child) null)) (not (= (MapType0Select Heap@84 freshObj@0 next_sibling) null)))) (state Heap@84 Unfolding1Mask@23)) (and (=> (= (ControlFlow 0 11) (- 0 13)) (= (MapType0Select Heap@84 this@@5 next_child) (MapType0Select Heap@84 freshObj@0 next_child))) (=> (= (MapType0Select Heap@84 this@@5 next_child) (MapType0Select Heap@84 freshObj@0 next_child)) (and (=> (= (ControlFlow 0 11) (- 0 12)) (= (MapType0Select Heap@84 this@@5 next_sibling) (MapType0Select Heap@84 freshObj@0 next_sibling))) (=> (= (MapType0Select Heap@84 this@@5 next_sibling) (MapType0Select Heap@84 freshObj@0 next_sibling)) (=> (= Heap@85 (MapType0Store Heap@84 null (|tree#sm| this@@5) (MapType1Store (MapType0Select Heap@84 null (|tree#sm| this@@5)) this@@5 data (bool_2_U true)))) (=> (and (= Heap@86 (MapType0Store Heap@85 null (|tree#sm| this@@5) (MapType1Store (MapType0Select Heap@85 null (|tree#sm| this@@5)) this@@5 next_child (bool_2_U true)))) (= Heap@87 (MapType0Store Heap@86 null (|tree#sm| this@@5) (MapType1Store (MapType0Select Heap@86 null (|tree#sm| this@@5)) this@@5 next_sibling (bool_2_U true))))) (and (=> (= (ControlFlow 0 11) 9) anon274_Then_correct) (=> (= (ControlFlow 0 11) 10) anon274_Else_correct)))))))))))
(let ((anon273_Else_correct  (=> (= (MapType0Select Heap@84 freshObj@0 next_sibling) null) (=> (and (= Unfolding1Mask@23 Unfolding1Mask@21) (= (ControlFlow 0 15) 11)) anon177_correct))))
(let ((anon273_Then_correct  (=> (and (not (= (MapType0Select Heap@84 freshObj@0 next_sibling) null)) (= Unfolding1Mask@22 (MapType1Store Unfolding1Mask@21 null (tree (MapType0Select Heap@84 freshObj@0 next_sibling)) (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@21 null (tree (MapType0Select Heap@84 freshObj@0 next_sibling)))) FullPerm))))) (=> (and (and (InsidePredicate (tree freshObj@0) (MapType0Select Heap@84 null (tree freshObj@0)) (tree (MapType0Select Heap@84 freshObj@0 next_sibling)) (MapType0Select Heap@84 null (tree (MapType0Select Heap@84 freshObj@0 next_sibling)))) (state Heap@84 Unfolding1Mask@22)) (and (= Unfolding1Mask@23 Unfolding1Mask@22) (= (ControlFlow 0 14) 11))) anon177_correct))))
(let ((anon272_Else_correct  (=> (and (= (MapType0Select Heap@84 freshObj@0 next_child) null) (= Unfolding1Mask@21 Unfolding1Mask@19)) (and (=> (= (ControlFlow 0 17) 14) anon273_Then_correct) (=> (= (ControlFlow 0 17) 15) anon273_Else_correct)))))
(let ((anon272_Then_correct  (=> (not (= (MapType0Select Heap@84 freshObj@0 next_child) null)) (=> (and (and (= Unfolding1Mask@20 (MapType1Store Unfolding1Mask@19 null (tree (MapType0Select Heap@84 freshObj@0 next_child)) (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@19 null (tree (MapType0Select Heap@84 freshObj@0 next_child)))) FullPerm)))) (InsidePredicate (tree freshObj@0) (MapType0Select Heap@84 null (tree freshObj@0)) (tree (MapType0Select Heap@84 freshObj@0 next_child)) (MapType0Select Heap@84 null (tree (MapType0Select Heap@84 freshObj@0 next_child))))) (and (state Heap@84 Unfolding1Mask@20) (= Unfolding1Mask@21 Unfolding1Mask@20))) (and (=> (= (ControlFlow 0 16) 14) anon273_Then_correct) (=> (= (ControlFlow 0 16) 15) anon273_Else_correct))))))
(let ((anon173_correct  (=> (and (= Unfolding1Mask@16 (MapType1Store UnfoldingMask@39 null (tree freshObj@0) (real_2_U (- (U_2_real (MapType1Select UnfoldingMask@39 null (tree freshObj@0))) FullPerm)))) (not (= freshObj@0 null))) (=> (and (and (and (= Unfolding1Mask@17 (MapType1Store Unfolding1Mask@16 freshObj@0 data (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@16 freshObj@0 data)) FullPerm)))) (state Heap@84 Unfolding1Mask@17)) (and (not (= freshObj@0 null)) (= Unfolding1Mask@18 (MapType1Store Unfolding1Mask@17 freshObj@0 next_child (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@17 freshObj@0 next_child)) FullPerm)))))) (and (and (state Heap@84 Unfolding1Mask@18) (not (= freshObj@0 null))) (and (= Unfolding1Mask@19 (MapType1Store Unfolding1Mask@18 freshObj@0 next_sibling (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@18 freshObj@0 next_sibling)) FullPerm)))) (state Heap@84 Unfolding1Mask@19)))) (and (=> (= (ControlFlow 0 18) 16) anon272_Then_correct) (=> (= (ControlFlow 0 18) 17) anon272_Else_correct))))))
(let ((anon271_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 21) 18)) anon173_correct)))
(let ((anon271_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 19) (- 0 20)) (<= FullPerm (U_2_real (MapType1Select UnfoldingMask@39 null (tree freshObj@0))))) (=> (<= FullPerm (U_2_real (MapType1Select UnfoldingMask@39 null (tree freshObj@0)))) (=> (= (ControlFlow 0 19) 18) anon173_correct))))))
(let ((anon171_correct  (=> (and (and (or (and (= (MapType0Select Heap@84 this@@5 next_child) null) (= (MapType0Select Heap@84 this@@5 next_sibling) null)) (and (not (= (MapType0Select Heap@84 this@@5 next_child) null)) (not (= (MapType0Select Heap@84 this@@5 next_sibling) null)))) (state Heap@84 UnfoldingMask@39)) (and (|tree#trigger| Heap@84 (tree freshObj@0)) (= (MapType0Select Heap@84 null (tree freshObj@0)) (CombineFrames (FrameFragment (MapType0Select Heap@84 freshObj@0 data)) (CombineFrames (FrameFragment (MapType0Select Heap@84 freshObj@0 next_child)) (CombineFrames (FrameFragment (MapType0Select Heap@84 freshObj@0 next_sibling)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@84 freshObj@0 next_child) null)) (MapType0Select Heap@84 null (tree (MapType0Select Heap@84 freshObj@0 next_child))) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@84 freshObj@0 next_sibling) null)) (MapType0Select Heap@84 null (tree (MapType0Select Heap@84 freshObj@0 next_sibling))) EmptyFrame))))))))) (and (=> (= (ControlFlow 0 22) 19) anon271_Then_correct) (=> (= (ControlFlow 0 22) 21) anon271_Else_correct)))))
(let ((anon270_Else_correct  (=> (= (MapType0Select Heap@84 this@@5 next_sibling) null) (=> (and (= UnfoldingMask@39 UnfoldingMask@37) (= (ControlFlow 0 25) 22)) anon171_correct))))
(let ((anon270_Then_correct  (=> (and (not (= (MapType0Select Heap@84 this@@5 next_sibling) null)) (= perm@49 (* FullPerm (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 23) (- 0 24)) (>= perm@49 NoPerm)) (=> (>= perm@49 NoPerm) (=> (= UnfoldingMask@38 (MapType1Store UnfoldingMask@37 null (tree (MapType0Select Heap@84 this@@5 next_sibling)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@37 null (tree (MapType0Select Heap@84 this@@5 next_sibling)))) perm@49)))) (=> (and (and (InsidePredicate (tree this@@5) (MapType0Select Heap@84 null (tree this@@5)) (tree (MapType0Select Heap@84 this@@5 next_sibling)) (MapType0Select Heap@84 null (tree (MapType0Select Heap@84 this@@5 next_sibling)))) (state Heap@84 UnfoldingMask@38)) (and (= UnfoldingMask@39 UnfoldingMask@38) (= (ControlFlow 0 23) 22))) anon171_correct)))))))
(let ((anon269_Else_correct  (=> (and (= (MapType0Select Heap@84 this@@5 next_child) null) (= UnfoldingMask@37 UnfoldingMask@35)) (and (=> (= (ControlFlow 0 28) 23) anon270_Then_correct) (=> (= (ControlFlow 0 28) 25) anon270_Else_correct)))))
(let ((anon269_Then_correct  (=> (and (not (= (MapType0Select Heap@84 this@@5 next_child) null)) (= perm@48 (* FullPerm (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 26) (- 0 27)) (>= perm@48 NoPerm)) (=> (>= perm@48 NoPerm) (=> (and (and (= UnfoldingMask@36 (MapType1Store UnfoldingMask@35 null (tree (MapType0Select Heap@84 this@@5 next_child)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@35 null (tree (MapType0Select Heap@84 this@@5 next_child)))) perm@48)))) (InsidePredicate (tree this@@5) (MapType0Select Heap@84 null (tree this@@5)) (tree (MapType0Select Heap@84 this@@5 next_child)) (MapType0Select Heap@84 null (tree (MapType0Select Heap@84 this@@5 next_child))))) (and (state Heap@84 UnfoldingMask@36) (= UnfoldingMask@37 UnfoldingMask@36))) (and (=> (= (ControlFlow 0 26) 23) anon270_Then_correct) (=> (= (ControlFlow 0 26) 25) anon270_Else_correct))))))))
(let ((anon167_correct  (=> (and (= UnfoldingMask@32 (MapType1Store Mask@34 null (tree this@@5) (real_2_U (- (U_2_real (MapType1Select Mask@34 null (tree this@@5))) perm@44)))) (= perm@45 (* FullPerm (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 29) (- 0 32)) (>= perm@45 NoPerm)) (=> (>= perm@45 NoPerm) (=> (and (and (=> (> perm@45 NoPerm) (not (= this@@5 null))) (= UnfoldingMask@33 (MapType1Store UnfoldingMask@32 this@@5 data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@32 this@@5 data)) perm@45))))) (and (state Heap@84 UnfoldingMask@33) (= perm@46 (* FullPerm (/ (to_real 1) (to_real 2)))))) (and (=> (= (ControlFlow 0 29) (- 0 31)) (>= perm@46 NoPerm)) (=> (>= perm@46 NoPerm) (=> (and (and (=> (> perm@46 NoPerm) (not (= this@@5 null))) (= UnfoldingMask@34 (MapType1Store UnfoldingMask@33 this@@5 next_child (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@33 this@@5 next_child)) perm@46))))) (and (state Heap@84 UnfoldingMask@34) (= perm@47 (* FullPerm (/ (to_real 1) (to_real 2)))))) (and (=> (= (ControlFlow 0 29) (- 0 30)) (>= perm@47 NoPerm)) (=> (>= perm@47 NoPerm) (=> (=> (> perm@47 NoPerm) (not (= this@@5 null))) (=> (and (= UnfoldingMask@35 (MapType1Store UnfoldingMask@34 this@@5 next_sibling (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@34 this@@5 next_sibling)) perm@47)))) (state Heap@84 UnfoldingMask@35)) (and (=> (= (ControlFlow 0 29) 26) anon269_Then_correct) (=> (= (ControlFlow 0 29) 28) anon269_Else_correct)))))))))))))))
(let ((anon268_Else_correct  (=> (and (= perm@44 NoPerm) (= (ControlFlow 0 35) 29)) anon167_correct)))
(let ((anon268_Then_correct  (=> (not (= perm@44 NoPerm)) (and (=> (= (ControlFlow 0 33) (- 0 34)) (<= perm@44 (U_2_real (MapType1Select Mask@34 null (tree this@@5))))) (=> (<= perm@44 (U_2_real (MapType1Select Mask@34 null (tree this@@5)))) (=> (= (ControlFlow 0 33) 29) anon167_correct))))))
(let ((anon165_correct  (=> (and (and (= Mask@36 (MapType1Store Mask@35 null (tree freshObj@0) (real_2_U (- (U_2_real (MapType1Select Mask@35 null (tree freshObj@0))) FullPerm)))) (|tree#trigger| Heap@84 (tree this@@5))) (and (= (MapType0Select Heap@84 null (tree this@@5)) (CombineFrames (FrameFragment (MapType0Select Heap@84 this@@5 data)) (CombineFrames (FrameFragment (MapType0Select Heap@84 this@@5 next_child)) (CombineFrames (FrameFragment (MapType0Select Heap@84 this@@5 next_sibling)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@84 this@@5 next_child) null)) (MapType0Select Heap@84 null (tree (MapType0Select Heap@84 this@@5 next_child))) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@84 this@@5 next_sibling) null)) (MapType0Select Heap@84 null (tree (MapType0Select Heap@84 this@@5 next_sibling))) EmptyFrame))))))) (= perm@44 (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 36) (- 0 37)) (>= perm@44 NoPerm)) (=> (>= perm@44 NoPerm) (and (=> (= (ControlFlow 0 36) 33) anon268_Then_correct) (=> (= (ControlFlow 0 36) 35) anon268_Else_correct)))))))
(let ((anon267_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 40) 36)) anon165_correct)))
(let ((anon267_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 38) (- 0 39)) (<= FullPerm (U_2_real (MapType1Select Mask@35 null (tree freshObj@0))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@35 null (tree freshObj@0)))) (=> (= (ControlFlow 0 38) 36) anon165_correct))))))
(let ((anon163_correct  (=> (= Mask@35 (MapType1Store Mask@34 null (tree this@@5) (real_2_U (- (U_2_real (MapType1Select Mask@34 null (tree this@@5))) perm@43)))) (and (=> (= (ControlFlow 0 41) 38) anon267_Then_correct) (=> (= (ControlFlow 0 41) 40) anon267_Else_correct)))))
(let ((anon266_Else_correct  (=> (and (= perm@43 NoPerm) (= (ControlFlow 0 44) 41)) anon163_correct)))
(let ((anon266_Then_correct  (=> (not (= perm@43 NoPerm)) (and (=> (= (ControlFlow 0 42) (- 0 43)) (<= perm@43 (U_2_real (MapType1Select Mask@34 null (tree this@@5))))) (=> (<= perm@43 (U_2_real (MapType1Select Mask@34 null (tree this@@5)))) (=> (= (ControlFlow 0 42) 41) anon163_correct))))))
(let ((anon161_correct  (=> (state Heap@84 Mask@34) (=> (and (state Heap@84 Mask@34) (= perm@43 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 45) (- 0 46)) (>= perm@43 NoPerm)) (=> (>= perm@43 NoPerm) (and (=> (= (ControlFlow 0 45) 42) anon266_Then_correct) (=> (= (ControlFlow 0 45) 44) anon266_Else_correct))))))))
(let ((anon265_Else_correct  (=> (= (MapType0Select Heap@82 freshObj@0 next_sibling) null) (=> (and (= Heap@84 Heap@82) (= (ControlFlow 0 48) 45)) anon161_correct))))
(let ((anon265_Then_correct  (=> (not (= (MapType0Select Heap@82 freshObj@0 next_sibling) null)) (=> (and (and (forall ((o_50 T@U) (f_54 T@U) ) (! (let ((B@@21 (FieldTypeInv1 (type f_54))))
(let ((A@@22 (FieldTypeInv0 (type f_54))))
 (=> (and (and (= (type o_50) RefType) (= (type f_54) (FieldType A@@22 B@@21))) (or (U_2_bool (MapType1Select (MapType0Select Heap@82 null (|tree#sm| freshObj@0)) o_50 f_54)) (U_2_bool (MapType1Select (MapType0Select Heap@82 null (|tree#sm| (MapType0Select Heap@82 freshObj@0 next_sibling))) o_50 f_54)))) (U_2_bool (MapType1Select newPMask@23 o_50 f_54)))))
 :qid |stdinbpl.2174:29|
 :skolemid |75|
 :pattern ( (MapType1Select newPMask@23 o_50 f_54))
)) (= Heap@83 (MapType0Store Heap@82 null (|tree#sm| freshObj@0) newPMask@23))) (and (= Heap@84 Heap@83) (= (ControlFlow 0 47) 45))) anon161_correct))))
(let ((anon264_Else_correct  (=> (and (= (MapType0Select Heap@80 freshObj@0 next_child) null) (= Heap@82 Heap@80)) (and (=> (= (ControlFlow 0 50) 47) anon265_Then_correct) (=> (= (ControlFlow 0 50) 48) anon265_Else_correct)))))
(let ((anon264_Then_correct  (=> (and (and (not (= (MapType0Select Heap@80 freshObj@0 next_child) null)) (forall ((o_49 T@U) (f_53 T@U) ) (! (let ((B@@22 (FieldTypeInv1 (type f_53))))
(let ((A@@23 (FieldTypeInv0 (type f_53))))
 (=> (and (and (= (type o_49) RefType) (= (type f_53) (FieldType A@@23 B@@22))) (or (U_2_bool (MapType1Select (MapType0Select Heap@80 null (|tree#sm| freshObj@0)) o_49 f_53)) (U_2_bool (MapType1Select (MapType0Select Heap@80 null (|tree#sm| (MapType0Select Heap@80 freshObj@0 next_child))) o_49 f_53)))) (U_2_bool (MapType1Select newPMask@22 o_49 f_53)))))
 :qid |stdinbpl.2166:29|
 :skolemid |74|
 :pattern ( (MapType1Select newPMask@22 o_49 f_53))
))) (and (= Heap@81 (MapType0Store Heap@80 null (|tree#sm| freshObj@0) newPMask@22)) (= Heap@82 Heap@81))) (and (=> (= (ControlFlow 0 49) 47) anon265_Then_correct) (=> (= (ControlFlow 0 49) 48) anon265_Else_correct)))))
(let ((anon157_correct  (=> (= Heap@78 (MapType0Store Heap@77 null (|tree#sm| freshObj@0) (MapType1Store (MapType0Select Heap@77 null (|tree#sm| freshObj@0)) freshObj@0 data (bool_2_U true)))) (=> (and (= Heap@79 (MapType0Store Heap@78 null (|tree#sm| freshObj@0) (MapType1Store (MapType0Select Heap@78 null (|tree#sm| freshObj@0)) freshObj@0 next_child (bool_2_U true)))) (= Heap@80 (MapType0Store Heap@79 null (|tree#sm| freshObj@0) (MapType1Store (MapType0Select Heap@79 null (|tree#sm| freshObj@0)) freshObj@0 next_sibling (bool_2_U true))))) (and (=> (= (ControlFlow 0 51) 49) anon264_Then_correct) (=> (= (ControlFlow 0 51) 50) anon264_Else_correct))))))
(let ((anon263_Else_correct  (=> (HasDirectPerm Mask@34 null (tree freshObj@0)) (=> (and (= Heap@77 Heap@74) (= (ControlFlow 0 53) 51)) anon157_correct))))
(let ((anon263_Then_correct  (=> (not (HasDirectPerm Mask@34 null (tree freshObj@0))) (=> (and (and (= Heap@75 (MapType0Store Heap@74 null (|tree#sm| freshObj@0) ZeroPMask)) (= Heap@76 (MapType0Store Heap@75 null (tree freshObj@0) freshVersion@1))) (and (= Heap@77 Heap@76) (= (ControlFlow 0 52) 51))) anon157_correct))))
(let ((anon155_correct  (and (=> (= (ControlFlow 0 54) (- 0 55)) (or (and (= (MapType0Select Heap@74 freshObj@0 next_child) null) (= (MapType0Select Heap@74 freshObj@0 next_sibling) null)) (and (not (= (MapType0Select Heap@74 freshObj@0 next_child) null)) (not (= (MapType0Select Heap@74 freshObj@0 next_sibling) null))))) (=> (or (and (= (MapType0Select Heap@74 freshObj@0 next_child) null) (= (MapType0Select Heap@74 freshObj@0 next_sibling) null)) (and (not (= (MapType0Select Heap@74 freshObj@0 next_child) null)) (not (= (MapType0Select Heap@74 freshObj@0 next_sibling) null)))) (=> (= Mask@34 (MapType1Store Mask@33 null (tree freshObj@0) (real_2_U (+ (U_2_real (MapType1Select Mask@33 null (tree freshObj@0))) FullPerm)))) (=> (and (and (state Heap@74 Mask@34) (state Heap@74 Mask@34)) (and (|tree#trigger| Heap@74 (tree freshObj@0)) (= (MapType0Select Heap@74 null (tree freshObj@0)) (CombineFrames (FrameFragment (MapType0Select Heap@74 freshObj@0 data)) (CombineFrames (FrameFragment (MapType0Select Heap@74 freshObj@0 next_child)) (CombineFrames (FrameFragment (MapType0Select Heap@74 freshObj@0 next_sibling)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@74 freshObj@0 next_child) null)) (MapType0Select Heap@74 null (tree (MapType0Select Heap@74 freshObj@0 next_child))) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@74 freshObj@0 next_sibling) null)) (MapType0Select Heap@74 null (tree (MapType0Select Heap@74 freshObj@0 next_sibling))) EmptyFrame))))))))) (and (=> (= (ControlFlow 0 54) 52) anon263_Then_correct) (=> (= (ControlFlow 0 54) 53) anon263_Else_correct))))))))
(let ((anon154_correct  (=> (and (and (= Mask@32 (MapType1Store Mask@31 null (tree (MapType0Select Heap@74 freshObj@0 next_sibling)) (real_2_U (- (U_2_real (MapType1Select Mask@31 null (tree (MapType0Select Heap@74 freshObj@0 next_sibling)))) FullPerm)))) (InsidePredicate (tree freshObj@0) (MapType0Select Heap@74 null (tree freshObj@0)) (tree (MapType0Select Heap@74 freshObj@0 next_sibling)) (MapType0Select Heap@74 null (tree (MapType0Select Heap@74 freshObj@0 next_sibling))))) (and (= Mask@33 Mask@32) (= (ControlFlow 0 57) 54))) anon155_correct)))
(let ((anon262_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 60) 57)) anon154_correct)))
(let ((anon262_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 58) (- 0 59)) (<= FullPerm (U_2_real (MapType1Select Mask@31 null (tree (MapType0Select Heap@74 freshObj@0 next_sibling)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@31 null (tree (MapType0Select Heap@74 freshObj@0 next_sibling))))) (=> (= (ControlFlow 0 58) 57) anon154_correct))))))
(let ((anon261_Then_correct  (=> (not (= (MapType0Select Heap@74 freshObj@0 next_sibling) null)) (and (=> (= (ControlFlow 0 61) 58) anon262_Then_correct) (=> (= (ControlFlow 0 61) 60) anon262_Else_correct)))))
(let ((anon261_Else_correct  (=> (= (MapType0Select Heap@74 freshObj@0 next_sibling) null) (=> (and (= Mask@33 Mask@31) (= (ControlFlow 0 56) 54)) anon155_correct))))
(let ((anon150_correct  (=> (= Mask@30 (MapType1Store Mask@29 null (tree (MapType0Select Heap@74 freshObj@0 next_child)) (real_2_U (- (U_2_real (MapType1Select Mask@29 null (tree (MapType0Select Heap@74 freshObj@0 next_child)))) FullPerm)))) (=> (and (InsidePredicate (tree freshObj@0) (MapType0Select Heap@74 null (tree freshObj@0)) (tree (MapType0Select Heap@74 freshObj@0 next_child)) (MapType0Select Heap@74 null (tree (MapType0Select Heap@74 freshObj@0 next_child)))) (= Mask@31 Mask@30)) (and (=> (= (ControlFlow 0 63) 61) anon261_Then_correct) (=> (= (ControlFlow 0 63) 56) anon261_Else_correct))))))
(let ((anon260_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 66) 63)) anon150_correct)))
(let ((anon260_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 64) (- 0 65)) (<= FullPerm (U_2_real (MapType1Select Mask@29 null (tree (MapType0Select Heap@74 freshObj@0 next_child)))))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@29 null (tree (MapType0Select Heap@74 freshObj@0 next_child))))) (=> (= (ControlFlow 0 64) 63) anon150_correct))))))
(let ((anon259_Then_correct  (=> (not (= (MapType0Select Heap@74 freshObj@0 next_child) null)) (and (=> (= (ControlFlow 0 67) 64) anon260_Then_correct) (=> (= (ControlFlow 0 67) 66) anon260_Else_correct)))))
(let ((anon259_Else_correct  (=> (and (= (MapType0Select Heap@74 freshObj@0 next_child) null) (= Mask@31 Mask@29)) (and (=> (= (ControlFlow 0 62) 61) anon261_Then_correct) (=> (= (ControlFlow 0 62) 56) anon261_Else_correct)))))
(let ((anon147_correct  (=> (= Mask@29 (MapType1Store Mask@28 freshObj@0 next_sibling (real_2_U (- (U_2_real (MapType1Select Mask@28 freshObj@0 next_sibling)) FullPerm)))) (and (=> (= (ControlFlow 0 68) 67) anon259_Then_correct) (=> (= (ControlFlow 0 68) 62) anon259_Else_correct)))))
(let ((anon258_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 71) 68)) anon147_correct)))
(let ((anon258_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 69) (- 0 70)) (<= FullPerm (U_2_real (MapType1Select Mask@28 freshObj@0 next_sibling)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@28 freshObj@0 next_sibling))) (=> (= (ControlFlow 0 69) 68) anon147_correct))))))
(let ((anon145_correct  (=> (= Mask@28 (MapType1Store Mask@27 freshObj@0 next_child (real_2_U (- (U_2_real (MapType1Select Mask@27 freshObj@0 next_child)) FullPerm)))) (and (=> (= (ControlFlow 0 72) 69) anon258_Then_correct) (=> (= (ControlFlow 0 72) 71) anon258_Else_correct)))))
(let ((anon257_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 75) 72)) anon145_correct)))
(let ((anon257_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 73) (- 0 74)) (<= FullPerm (U_2_real (MapType1Select Mask@27 freshObj@0 next_child)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@27 freshObj@0 next_child))) (=> (= (ControlFlow 0 73) 72) anon145_correct))))))
(let ((anon143_correct  (=> (= Mask@27 (MapType1Store Mask@26 freshObj@0 data (real_2_U (- (U_2_real (MapType1Select Mask@26 freshObj@0 data)) FullPerm)))) (and (=> (= (ControlFlow 0 76) 73) anon257_Then_correct) (=> (= (ControlFlow 0 76) 75) anon257_Else_correct)))))
(let ((anon256_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 79) 76)) anon143_correct)))
(let ((anon256_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 77) (- 0 78)) (<= FullPerm (U_2_real (MapType1Select Mask@26 freshObj@0 data)))) (=> (<= FullPerm (U_2_real (MapType1Select Mask@26 freshObj@0 data))) (=> (= (ControlFlow 0 77) 76) anon143_correct))))))
(let ((anon141_correct  (=> (and (state Heap@74 Mask@26) (state Heap@74 Mask@26)) (and (=> (= (ControlFlow 0 80) 77) anon256_Then_correct) (=> (= (ControlFlow 0 80) 79) anon256_Else_correct)))))
(let ((anon255_Else_correct  (=> (= (MapType0Select Heap@72 this@@5 next_sibling) null) (=> (and (= Heap@74 Heap@72) (= (ControlFlow 0 82) 80)) anon141_correct))))
(let ((anon255_Then_correct  (=> (not (= (MapType0Select Heap@72 this@@5 next_sibling) null)) (=> (and (and (forall ((o_48 T@U) (f_52 T@U) ) (! (let ((B@@23 (FieldTypeInv1 (type f_52))))
(let ((A@@24 (FieldTypeInv0 (type f_52))))
 (=> (and (and (= (type o_48) RefType) (= (type f_52) (FieldType A@@24 B@@23))) (or (U_2_bool (MapType1Select (MapType0Select Heap@72 null (|tree#sm| this@@5)) o_48 f_52)) (U_2_bool (MapType1Select (MapType0Select Heap@72 null (|tree#sm| (MapType0Select Heap@72 this@@5 next_sibling))) o_48 f_52)))) (U_2_bool (MapType1Select newPMask@21 o_48 f_52)))))
 :qid |stdinbpl.2096:29|
 :skolemid |73|
 :pattern ( (MapType1Select newPMask@21 o_48 f_52))
)) (= Heap@73 (MapType0Store Heap@72 null (|tree#sm| this@@5) newPMask@21))) (and (= Heap@74 Heap@73) (= (ControlFlow 0 81) 80))) anon141_correct))))
(let ((anon254_Else_correct  (=> (and (= (MapType0Select Heap@70 this@@5 next_child) null) (= Heap@72 Heap@70)) (and (=> (= (ControlFlow 0 84) 81) anon255_Then_correct) (=> (= (ControlFlow 0 84) 82) anon255_Else_correct)))))
(let ((anon254_Then_correct  (=> (and (and (not (= (MapType0Select Heap@70 this@@5 next_child) null)) (forall ((o_47 T@U) (f_51 T@U) ) (! (let ((B@@24 (FieldTypeInv1 (type f_51))))
(let ((A@@25 (FieldTypeInv0 (type f_51))))
 (=> (and (and (= (type o_47) RefType) (= (type f_51) (FieldType A@@25 B@@24))) (or (U_2_bool (MapType1Select (MapType0Select Heap@70 null (|tree#sm| this@@5)) o_47 f_51)) (U_2_bool (MapType1Select (MapType0Select Heap@70 null (|tree#sm| (MapType0Select Heap@70 this@@5 next_child))) o_47 f_51)))) (U_2_bool (MapType1Select newPMask@20 o_47 f_51)))))
 :qid |stdinbpl.2088:29|
 :skolemid |72|
 :pattern ( (MapType1Select newPMask@20 o_47 f_51))
))) (and (= Heap@71 (MapType0Store Heap@70 null (|tree#sm| this@@5) newPMask@20)) (= Heap@72 Heap@71))) (and (=> (= (ControlFlow 0 83) 81) anon255_Then_correct) (=> (= (ControlFlow 0 83) 82) anon255_Else_correct)))))
(let ((anon137_correct  (=> (= Heap@68 (MapType0Store Heap@67 null (|tree#sm| this@@5) (MapType1Store (MapType0Select Heap@67 null (|tree#sm| this@@5)) this@@5 data (bool_2_U true)))) (=> (and (= Heap@69 (MapType0Store Heap@68 null (|tree#sm| this@@5) (MapType1Store (MapType0Select Heap@68 null (|tree#sm| this@@5)) this@@5 next_child (bool_2_U true)))) (= Heap@70 (MapType0Store Heap@69 null (|tree#sm| this@@5) (MapType1Store (MapType0Select Heap@69 null (|tree#sm| this@@5)) this@@5 next_sibling (bool_2_U true))))) (and (=> (= (ControlFlow 0 85) 83) anon254_Then_correct) (=> (= (ControlFlow 0 85) 84) anon254_Else_correct))))))
(let ((anon253_Else_correct  (=> (HasDirectPerm Mask@26 null (tree this@@5)) (=> (and (= Heap@67 Heap@64) (= (ControlFlow 0 87) 85)) anon137_correct))))
(let ((anon253_Then_correct  (=> (not (HasDirectPerm Mask@26 null (tree this@@5))) (=> (and (and (= Heap@65 (MapType0Store Heap@64 null (|tree#sm| this@@5) ZeroPMask)) (= Heap@66 (MapType0Store Heap@65 null (tree this@@5) freshVersion@0))) (and (= Heap@67 Heap@66) (= (ControlFlow 0 86) 85))) anon137_correct))))
(let ((anon135_correct  (and (=> (= (ControlFlow 0 88) (- 0 90)) (or (and (= (MapType0Select Heap@64 this@@5 next_child) null) (= (MapType0Select Heap@64 this@@5 next_sibling) null)) (and (not (= (MapType0Select Heap@64 this@@5 next_child) null)) (not (= (MapType0Select Heap@64 this@@5 next_sibling) null))))) (=> (or (and (= (MapType0Select Heap@64 this@@5 next_child) null) (= (MapType0Select Heap@64 this@@5 next_sibling) null)) (and (not (= (MapType0Select Heap@64 this@@5 next_child) null)) (not (= (MapType0Select Heap@64 this@@5 next_sibling) null)))) (=> (= perm@42 (/ (to_real 1) (to_real 2))) (and (=> (= (ControlFlow 0 88) (- 0 89)) (>= perm@42 NoPerm)) (=> (>= perm@42 NoPerm) (=> (= Mask@26 (MapType1Store Mask@25 null (tree this@@5) (real_2_U (+ (U_2_real (MapType1Select Mask@25 null (tree this@@5))) perm@42)))) (=> (and (and (state Heap@64 Mask@26) (state Heap@64 Mask@26)) (and (|tree#trigger| Heap@64 (tree this@@5)) (= (MapType0Select Heap@64 null (tree this@@5)) (CombineFrames (FrameFragment (MapType0Select Heap@64 this@@5 data)) (CombineFrames (FrameFragment (MapType0Select Heap@64 this@@5 next_child)) (CombineFrames (FrameFragment (MapType0Select Heap@64 this@@5 next_sibling)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@64 this@@5 next_child) null)) (MapType0Select Heap@64 null (tree (MapType0Select Heap@64 this@@5 next_child))) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@64 this@@5 next_sibling) null)) (MapType0Select Heap@64 null (tree (MapType0Select Heap@64 this@@5 next_sibling))) EmptyFrame))))))))) (and (=> (= (ControlFlow 0 88) 86) anon253_Then_correct) (=> (= (ControlFlow 0 88) 87) anon253_Else_correct)))))))))))
(let ((anon134_correct  (=> (and (and (= Mask@24 (MapType1Store Mask@23 null (tree (MapType0Select Heap@64 this@@5 next_sibling)) (real_2_U (- (U_2_real (MapType1Select Mask@23 null (tree (MapType0Select Heap@64 this@@5 next_sibling)))) perm@41)))) (InsidePredicate (tree this@@5) (MapType0Select Heap@64 null (tree this@@5)) (tree (MapType0Select Heap@64 this@@5 next_sibling)) (MapType0Select Heap@64 null (tree (MapType0Select Heap@64 this@@5 next_sibling))))) (and (= Mask@25 Mask@24) (= (ControlFlow 0 92) 88))) anon135_correct)))
(let ((anon252_Else_correct  (=> (and (= perm@41 NoPerm) (= (ControlFlow 0 95) 92)) anon134_correct)))
(let ((anon252_Then_correct  (=> (not (= perm@41 NoPerm)) (and (=> (= (ControlFlow 0 93) (- 0 94)) (<= perm@41 (U_2_real (MapType1Select Mask@23 null (tree (MapType0Select Heap@64 this@@5 next_sibling)))))) (=> (<= perm@41 (U_2_real (MapType1Select Mask@23 null (tree (MapType0Select Heap@64 this@@5 next_sibling))))) (=> (= (ControlFlow 0 93) 92) anon134_correct))))))
(let ((anon251_Then_correct  (=> (and (not (= (MapType0Select Heap@64 this@@5 next_sibling) null)) (= perm@41 (* FullPerm (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 96) (- 0 97)) (>= perm@41 NoPerm)) (=> (>= perm@41 NoPerm) (and (=> (= (ControlFlow 0 96) 93) anon252_Then_correct) (=> (= (ControlFlow 0 96) 95) anon252_Else_correct)))))))
(let ((anon251_Else_correct  (=> (= (MapType0Select Heap@64 this@@5 next_sibling) null) (=> (and (= Mask@25 Mask@23) (= (ControlFlow 0 91) 88)) anon135_correct))))
(let ((anon130_correct  (=> (= Mask@22 (MapType1Store Mask@21 null (tree (MapType0Select Heap@64 this@@5 next_child)) (real_2_U (- (U_2_real (MapType1Select Mask@21 null (tree (MapType0Select Heap@64 this@@5 next_child)))) perm@40)))) (=> (and (InsidePredicate (tree this@@5) (MapType0Select Heap@64 null (tree this@@5)) (tree (MapType0Select Heap@64 this@@5 next_child)) (MapType0Select Heap@64 null (tree (MapType0Select Heap@64 this@@5 next_child)))) (= Mask@23 Mask@22)) (and (=> (= (ControlFlow 0 99) 96) anon251_Then_correct) (=> (= (ControlFlow 0 99) 91) anon251_Else_correct))))))
(let ((anon250_Else_correct  (=> (and (= perm@40 NoPerm) (= (ControlFlow 0 102) 99)) anon130_correct)))
(let ((anon250_Then_correct  (=> (not (= perm@40 NoPerm)) (and (=> (= (ControlFlow 0 100) (- 0 101)) (<= perm@40 (U_2_real (MapType1Select Mask@21 null (tree (MapType0Select Heap@64 this@@5 next_child)))))) (=> (<= perm@40 (U_2_real (MapType1Select Mask@21 null (tree (MapType0Select Heap@64 this@@5 next_child))))) (=> (= (ControlFlow 0 100) 99) anon130_correct))))))
(let ((anon249_Then_correct  (=> (and (not (= (MapType0Select Heap@64 this@@5 next_child) null)) (= perm@40 (* FullPerm (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 103) (- 0 104)) (>= perm@40 NoPerm)) (=> (>= perm@40 NoPerm) (and (=> (= (ControlFlow 0 103) 100) anon250_Then_correct) (=> (= (ControlFlow 0 103) 102) anon250_Else_correct)))))))
(let ((anon249_Else_correct  (=> (and (= (MapType0Select Heap@64 this@@5 next_child) null) (= Mask@23 Mask@21)) (and (=> (= (ControlFlow 0 98) 96) anon251_Then_correct) (=> (= (ControlFlow 0 98) 91) anon251_Else_correct)))))
(let ((anon127_correct  (=> (= Mask@21 (MapType1Store Mask@20 this@@5 next_sibling (real_2_U (- (U_2_real (MapType1Select Mask@20 this@@5 next_sibling)) perm@39)))) (and (=> (= (ControlFlow 0 105) 103) anon249_Then_correct) (=> (= (ControlFlow 0 105) 98) anon249_Else_correct)))))
(let ((anon248_Else_correct  (=> (and (= perm@39 NoPerm) (= (ControlFlow 0 108) 105)) anon127_correct)))
(let ((anon248_Then_correct  (=> (not (= perm@39 NoPerm)) (and (=> (= (ControlFlow 0 106) (- 0 107)) (<= perm@39 (U_2_real (MapType1Select Mask@20 this@@5 next_sibling)))) (=> (<= perm@39 (U_2_real (MapType1Select Mask@20 this@@5 next_sibling))) (=> (= (ControlFlow 0 106) 105) anon127_correct))))))
(let ((anon125_correct  (=> (and (= Mask@20 (MapType1Store Mask@19 this@@5 next_child (real_2_U (- (U_2_real (MapType1Select Mask@19 this@@5 next_child)) perm@38)))) (= perm@39 (* FullPerm (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 109) (- 0 110)) (>= perm@39 NoPerm)) (=> (>= perm@39 NoPerm) (and (=> (= (ControlFlow 0 109) 106) anon248_Then_correct) (=> (= (ControlFlow 0 109) 108) anon248_Else_correct)))))))
(let ((anon247_Else_correct  (=> (and (= perm@38 NoPerm) (= (ControlFlow 0 113) 109)) anon125_correct)))
(let ((anon247_Then_correct  (=> (not (= perm@38 NoPerm)) (and (=> (= (ControlFlow 0 111) (- 0 112)) (<= perm@38 (U_2_real (MapType1Select Mask@19 this@@5 next_child)))) (=> (<= perm@38 (U_2_real (MapType1Select Mask@19 this@@5 next_child))) (=> (= (ControlFlow 0 111) 109) anon125_correct))))))
(let ((anon123_correct  (=> (and (= Mask@19 (MapType1Store Mask@18 this@@5 data (real_2_U (- (U_2_real (MapType1Select Mask@18 this@@5 data)) perm@37)))) (= perm@38 (* FullPerm (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 114) (- 0 115)) (>= perm@38 NoPerm)) (=> (>= perm@38 NoPerm) (and (=> (= (ControlFlow 0 114) 111) anon247_Then_correct) (=> (= (ControlFlow 0 114) 113) anon247_Else_correct)))))))
(let ((anon246_Else_correct  (=> (and (= perm@37 NoPerm) (= (ControlFlow 0 118) 114)) anon123_correct)))
(let ((anon246_Then_correct  (=> (not (= perm@37 NoPerm)) (and (=> (= (ControlFlow 0 116) (- 0 117)) (<= perm@37 (U_2_real (MapType1Select Mask@18 this@@5 data)))) (=> (<= perm@37 (U_2_real (MapType1Select Mask@18 this@@5 data))) (=> (= (ControlFlow 0 116) 114) anon123_correct))))))
(let ((anon121_correct  (=> (and (state Heap@64 Mask@18) (= perm@37 (* FullPerm (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 119) (- 0 120)) (>= perm@37 NoPerm)) (=> (>= perm@37 NoPerm) (and (=> (= (ControlFlow 0 119) 116) anon246_Then_correct) (=> (= (ControlFlow 0 119) 118) anon246_Else_correct)))))))
(let ((anon120_correct  (=> (state Heap@60 Mask@17) (=> (and (U_2_bool (MapType0Select Heap@60 tmp_sibling@0 $allocated)) (state Heap@60 Mask@17)) (and (=> (= (ControlFlow 0 124) (- 0 128)) (HasDirectPerm Mask@17 this@@5 data)) (=> (HasDirectPerm Mask@17 this@@5 data) (and (=> (= (ControlFlow 0 124) (- 0 127)) (= FullPerm (U_2_real (MapType1Select Mask@17 freshObj@0 data)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@17 freshObj@0 data))) (=> (and (= Heap@61 (MapType0Store Heap@60 freshObj@0 data (MapType0Select Heap@60 this@@5 data))) (state Heap@61 Mask@17)) (and (=> (= (ControlFlow 0 124) (- 0 126)) (= FullPerm (U_2_real (MapType1Select Mask@17 freshObj@0 next_child)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@17 freshObj@0 next_child))) (=> (and (= Heap@62 (MapType0Store Heap@61 freshObj@0 next_child tmp_child@0)) (state Heap@62 Mask@17)) (and (=> (= (ControlFlow 0 124) (- 0 125)) (= FullPerm (U_2_real (MapType1Select Mask@17 freshObj@0 next_sibling)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@17 freshObj@0 next_sibling))) (=> (= Heap@63 (MapType0Store Heap@62 freshObj@0 next_sibling tmp_sibling@0)) (=> (and (and (state Heap@63 Mask@17) (= Mask@18 Mask@17)) (and (= Heap@64 Heap@63) (= (ControlFlow 0 124) 119))) anon121_correct))))))))))))))))
(let ((anon245_Else_correct  (=> (= (MapType0Select Heap@58 tmp_sibling@0 next_sibling) null) (=> (and (= Heap@60 Heap@58) (= (ControlFlow 0 130) 124)) anon120_correct))))
(let ((anon245_Then_correct  (=> (not (= (MapType0Select Heap@58 tmp_sibling@0 next_sibling) null)) (=> (and (and (forall ((o_46 T@U) (f_50 T@U) ) (! (let ((B@@25 (FieldTypeInv1 (type f_50))))
(let ((A@@26 (FieldTypeInv0 (type f_50))))
 (=> (and (and (= (type o_46) RefType) (= (type f_50) (FieldType A@@26 B@@25))) (or (U_2_bool (MapType1Select (MapType0Select Heap@58 null (|tree#sm| tmp_sibling@0)) o_46 f_50)) (U_2_bool (MapType1Select (MapType0Select Heap@58 null (|tree#sm| (MapType0Select Heap@58 tmp_sibling@0 next_sibling))) o_46 f_50)))) (U_2_bool (MapType1Select newPMask@19 o_46 f_50)))))
 :qid |stdinbpl.1981:39|
 :skolemid |71|
 :pattern ( (MapType1Select newPMask@19 o_46 f_50))
)) (= Heap@59 (MapType0Store Heap@58 null (|tree#sm| tmp_sibling@0) newPMask@19))) (and (= Heap@60 Heap@59) (= (ControlFlow 0 129) 124))) anon120_correct))))
(let ((anon244_Else_correct  (=> (and (= (MapType0Select Heap@56 tmp_sibling@0 next_child) null) (= Heap@58 Heap@56)) (and (=> (= (ControlFlow 0 132) 129) anon245_Then_correct) (=> (= (ControlFlow 0 132) 130) anon245_Else_correct)))))
(let ((anon244_Then_correct  (=> (and (and (not (= (MapType0Select Heap@56 tmp_sibling@0 next_child) null)) (forall ((o_45 T@U) (f_49 T@U) ) (! (let ((B@@26 (FieldTypeInv1 (type f_49))))
(let ((A@@27 (FieldTypeInv0 (type f_49))))
 (=> (and (and (= (type o_45) RefType) (= (type f_49) (FieldType A@@27 B@@26))) (or (U_2_bool (MapType1Select (MapType0Select Heap@56 null (|tree#sm| tmp_sibling@0)) o_45 f_49)) (U_2_bool (MapType1Select (MapType0Select Heap@56 null (|tree#sm| (MapType0Select Heap@56 tmp_sibling@0 next_child))) o_45 f_49)))) (U_2_bool (MapType1Select newPMask@18 o_45 f_49)))))
 :qid |stdinbpl.1973:39|
 :skolemid |70|
 :pattern ( (MapType1Select newPMask@18 o_45 f_49))
))) (and (= Heap@57 (MapType0Store Heap@56 null (|tree#sm| tmp_sibling@0) newPMask@18)) (= Heap@58 Heap@57))) (and (=> (= (ControlFlow 0 131) 129) anon245_Then_correct) (=> (= (ControlFlow 0 131) 130) anon245_Else_correct)))))
(let ((anon116_correct  (=> (and (and (state Heap@53 Mask@17) (= Heap@54 (MapType0Store Heap@53 null (|tree#sm| tmp_sibling@0) (MapType1Store (MapType0Select Heap@53 null (|tree#sm| tmp_sibling@0)) tmp_sibling@0 data (bool_2_U true))))) (and (= Heap@55 (MapType0Store Heap@54 null (|tree#sm| tmp_sibling@0) (MapType1Store (MapType0Select Heap@54 null (|tree#sm| tmp_sibling@0)) tmp_sibling@0 next_child (bool_2_U true)))) (= Heap@56 (MapType0Store Heap@55 null (|tree#sm| tmp_sibling@0) (MapType1Store (MapType0Select Heap@55 null (|tree#sm| tmp_sibling@0)) tmp_sibling@0 next_sibling (bool_2_U true)))))) (and (=> (= (ControlFlow 0 133) 131) anon244_Then_correct) (=> (= (ControlFlow 0 133) 132) anon244_Else_correct)))))
(let ((anon243_Else_correct  (=> (= (MapType0Select Heap@51 arg_this_1@0 next_sibling) null) (=> (and (= Heap@53 Heap@51) (= (ControlFlow 0 135) 133)) anon116_correct))))
(let ((anon243_Then_correct  (=> (not (= (MapType0Select Heap@51 arg_this_1@0 next_sibling) null)) (=> (and (and (forall ((o_44 T@U) (f_48 T@U) ) (! (let ((B@@27 (FieldTypeInv1 (type f_48))))
(let ((A@@28 (FieldTypeInv0 (type f_48))))
 (=> (and (and (= (type o_44) RefType) (= (type f_48) (FieldType A@@28 B@@27))) (or (U_2_bool (MapType1Select (MapType0Select Heap@51 null (|tree#sm| arg_this_1@0)) o_44 f_48)) (U_2_bool (MapType1Select (MapType0Select Heap@51 null (|tree#sm| (MapType0Select Heap@51 arg_this_1@0 next_sibling))) o_44 f_48)))) (U_2_bool (MapType1Select newPMask@17 o_44 f_48)))))
 :qid |stdinbpl.1961:39|
 :skolemid |69|
 :pattern ( (MapType1Select newPMask@17 o_44 f_48))
)) (= Heap@52 (MapType0Store Heap@51 null (|tree#sm| arg_this_1@0) newPMask@17))) (and (= Heap@53 Heap@52) (= (ControlFlow 0 134) 133))) anon116_correct))))
(let ((anon242_Else_correct  (=> (and (= (MapType0Select Heap@49 arg_this_1@0 next_child) null) (= Heap@51 Heap@49)) (and (=> (= (ControlFlow 0 137) 134) anon243_Then_correct) (=> (= (ControlFlow 0 137) 135) anon243_Else_correct)))))
(let ((anon242_Then_correct  (=> (and (and (not (= (MapType0Select Heap@49 arg_this_1@0 next_child) null)) (forall ((o_43 T@U) (f_47 T@U) ) (! (let ((B@@28 (FieldTypeInv1 (type f_47))))
(let ((A@@29 (FieldTypeInv0 (type f_47))))
 (=> (and (and (= (type o_43) RefType) (= (type f_47) (FieldType A@@29 B@@28))) (or (U_2_bool (MapType1Select (MapType0Select Heap@49 null (|tree#sm| arg_this_1@0)) o_43 f_47)) (U_2_bool (MapType1Select (MapType0Select Heap@49 null (|tree#sm| (MapType0Select Heap@49 arg_this_1@0 next_child))) o_43 f_47)))) (U_2_bool (MapType1Select newPMask@16 o_43 f_47)))))
 :qid |stdinbpl.1953:39|
 :skolemid |68|
 :pattern ( (MapType1Select newPMask@16 o_43 f_47))
))) (and (= Heap@50 (MapType0Store Heap@49 null (|tree#sm| arg_this_1@0) newPMask@16)) (= Heap@51 Heap@50))) (and (=> (= (ControlFlow 0 136) 134) anon243_Then_correct) (=> (= (ControlFlow 0 136) 135) anon243_Else_correct)))))
(let ((anon112_correct  (=> (and (and (state UnfoldingHeap@13 UnfoldingMask@31) (= Heap@47 (MapType0Store Heap@46 null (|tree#sm| arg_this_1@0) (MapType1Store (MapType0Select Heap@46 null (|tree#sm| arg_this_1@0)) arg_this_1@0 data (bool_2_U true))))) (and (= Heap@48 (MapType0Store Heap@47 null (|tree#sm| arg_this_1@0) (MapType1Store (MapType0Select Heap@47 null (|tree#sm| arg_this_1@0)) arg_this_1@0 next_child (bool_2_U true)))) (= Heap@49 (MapType0Store Heap@48 null (|tree#sm| arg_this_1@0) (MapType1Store (MapType0Select Heap@48 null (|tree#sm| arg_this_1@0)) arg_this_1@0 next_sibling (bool_2_U true)))))) (and (=> (= (ControlFlow 0 138) 136) anon242_Then_correct) (=> (= (ControlFlow 0 138) 137) anon242_Else_correct)))))
(let ((anon241_Else_correct  (=> (= (MapType0Select UnfoldingHeap@11 tmp_sibling@0 next_sibling) null) (=> (and (= UnfoldingHeap@13 UnfoldingHeap@11) (= (ControlFlow 0 140) 138)) anon112_correct))))
(let ((anon241_Then_correct  (=> (not (= (MapType0Select UnfoldingHeap@11 tmp_sibling@0 next_sibling) null)) (=> (and (and (forall ((o_42 T@U) (f_46 T@U) ) (! (let ((B@@29 (FieldTypeInv1 (type f_46))))
(let ((A@@30 (FieldTypeInv0 (type f_46))))
 (=> (and (and (= (type o_42) RefType) (= (type f_46) (FieldType A@@30 B@@29))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@11 null (|tree#sm| tmp_sibling@0)) o_42 f_46)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@11 null (|tree#sm| (MapType0Select UnfoldingHeap@11 tmp_sibling@0 next_sibling))) o_42 f_46)))) (U_2_bool (MapType1Select newPMask@15 o_42 f_46)))))
 :qid |stdinbpl.1939:39|
 :skolemid |67|
 :pattern ( (MapType1Select newPMask@15 o_42 f_46))
)) (= UnfoldingHeap@12 (MapType0Store UnfoldingHeap@11 null (|tree#sm| tmp_sibling@0) newPMask@15))) (and (= UnfoldingHeap@13 UnfoldingHeap@12) (= (ControlFlow 0 139) 138))) anon112_correct))))
(let ((anon240_Else_correct  (=> (and (= (MapType0Select UnfoldingHeap@9 tmp_sibling@0 next_child) null) (= UnfoldingHeap@11 UnfoldingHeap@9)) (and (=> (= (ControlFlow 0 142) 139) anon241_Then_correct) (=> (= (ControlFlow 0 142) 140) anon241_Else_correct)))))
(let ((anon240_Then_correct  (=> (and (and (not (= (MapType0Select UnfoldingHeap@9 tmp_sibling@0 next_child) null)) (forall ((o_41 T@U) (f_45 T@U) ) (! (let ((B@@30 (FieldTypeInv1 (type f_45))))
(let ((A@@31 (FieldTypeInv0 (type f_45))))
 (=> (and (and (= (type o_41) RefType) (= (type f_45) (FieldType A@@31 B@@30))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@9 null (|tree#sm| tmp_sibling@0)) o_41 f_45)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@9 null (|tree#sm| (MapType0Select UnfoldingHeap@9 tmp_sibling@0 next_child))) o_41 f_45)))) (U_2_bool (MapType1Select newPMask@14 o_41 f_45)))))
 :qid |stdinbpl.1931:39|
 :skolemid |66|
 :pattern ( (MapType1Select newPMask@14 o_41 f_45))
))) (and (= UnfoldingHeap@10 (MapType0Store UnfoldingHeap@9 null (|tree#sm| tmp_sibling@0) newPMask@14)) (= UnfoldingHeap@11 UnfoldingHeap@10))) (and (=> (= (ControlFlow 0 141) 139) anon241_Then_correct) (=> (= (ControlFlow 0 141) 140) anon241_Else_correct)))))
(let ((anon108_correct  (=> (or (and (= (MapType0Select Heap@46 tmp_sibling@0 next_child) null) (= (MapType0Select Heap@46 tmp_sibling@0 next_sibling) null)) (and (not (= (MapType0Select Heap@46 tmp_sibling@0 next_child) null)) (not (= (MapType0Select Heap@46 tmp_sibling@0 next_sibling) null)))) (=> (and (and (state Heap@46 Unfolding1Mask@15) (= UnfoldingHeap@7 (MapType0Store Heap@46 null (|tree#sm| tmp_sibling@0) (MapType1Store (MapType0Select Heap@46 null (|tree#sm| tmp_sibling@0)) tmp_sibling@0 data (bool_2_U true))))) (and (= UnfoldingHeap@8 (MapType0Store UnfoldingHeap@7 null (|tree#sm| tmp_sibling@0) (MapType1Store (MapType0Select UnfoldingHeap@7 null (|tree#sm| tmp_sibling@0)) tmp_sibling@0 next_child (bool_2_U true)))) (= UnfoldingHeap@9 (MapType0Store UnfoldingHeap@8 null (|tree#sm| tmp_sibling@0) (MapType1Store (MapType0Select UnfoldingHeap@8 null (|tree#sm| tmp_sibling@0)) tmp_sibling@0 next_sibling (bool_2_U true)))))) (and (=> (= (ControlFlow 0 143) 141) anon240_Then_correct) (=> (= (ControlFlow 0 143) 142) anon240_Else_correct))))))
(let ((anon239_Else_correct  (=> (= (MapType0Select Heap@46 tmp_sibling@0 next_sibling) null) (=> (and (= Unfolding1Mask@15 Unfolding1Mask@13) (= (ControlFlow 0 145) 143)) anon108_correct))))
(let ((anon239_Then_correct  (=> (and (not (= (MapType0Select Heap@46 tmp_sibling@0 next_sibling) null)) (= Unfolding1Mask@14 (MapType1Store Unfolding1Mask@13 null (tree (MapType0Select Heap@46 tmp_sibling@0 next_sibling)) (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@13 null (tree (MapType0Select Heap@46 tmp_sibling@0 next_sibling)))) FullPerm))))) (=> (and (and (InsidePredicate (tree tmp_sibling@0) (MapType0Select Heap@46 null (tree tmp_sibling@0)) (tree (MapType0Select Heap@46 tmp_sibling@0 next_sibling)) (MapType0Select Heap@46 null (tree (MapType0Select Heap@46 tmp_sibling@0 next_sibling)))) (state Heap@46 Unfolding1Mask@14)) (and (= Unfolding1Mask@15 Unfolding1Mask@14) (= (ControlFlow 0 144) 143))) anon108_correct))))
(let ((anon238_Else_correct  (=> (and (= (MapType0Select Heap@46 tmp_sibling@0 next_child) null) (= Unfolding1Mask@13 Unfolding1Mask@11)) (and (=> (= (ControlFlow 0 147) 144) anon239_Then_correct) (=> (= (ControlFlow 0 147) 145) anon239_Else_correct)))))
(let ((anon238_Then_correct  (=> (not (= (MapType0Select Heap@46 tmp_sibling@0 next_child) null)) (=> (and (and (= Unfolding1Mask@12 (MapType1Store Unfolding1Mask@11 null (tree (MapType0Select Heap@46 tmp_sibling@0 next_child)) (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@11 null (tree (MapType0Select Heap@46 tmp_sibling@0 next_child)))) FullPerm)))) (InsidePredicate (tree tmp_sibling@0) (MapType0Select Heap@46 null (tree tmp_sibling@0)) (tree (MapType0Select Heap@46 tmp_sibling@0 next_child)) (MapType0Select Heap@46 null (tree (MapType0Select Heap@46 tmp_sibling@0 next_child))))) (and (state Heap@46 Unfolding1Mask@12) (= Unfolding1Mask@13 Unfolding1Mask@12))) (and (=> (= (ControlFlow 0 146) 144) anon239_Then_correct) (=> (= (ControlFlow 0 146) 145) anon239_Else_correct))))))
(let ((anon104_correct  (=> (and (= Unfolding1Mask@8 (MapType1Store UnfoldingMask@31 null (tree tmp_sibling@0) (real_2_U (- (U_2_real (MapType1Select UnfoldingMask@31 null (tree tmp_sibling@0))) FullPerm)))) (not (= tmp_sibling@0 null))) (=> (and (and (and (= Unfolding1Mask@9 (MapType1Store Unfolding1Mask@8 tmp_sibling@0 data (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@8 tmp_sibling@0 data)) FullPerm)))) (state Heap@46 Unfolding1Mask@9)) (and (not (= tmp_sibling@0 null)) (= Unfolding1Mask@10 (MapType1Store Unfolding1Mask@9 tmp_sibling@0 next_child (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@9 tmp_sibling@0 next_child)) FullPerm)))))) (and (and (state Heap@46 Unfolding1Mask@10) (not (= tmp_sibling@0 null))) (and (= Unfolding1Mask@11 (MapType1Store Unfolding1Mask@10 tmp_sibling@0 next_sibling (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@10 tmp_sibling@0 next_sibling)) FullPerm)))) (state Heap@46 Unfolding1Mask@11)))) (and (=> (= (ControlFlow 0 148) 146) anon238_Then_correct) (=> (= (ControlFlow 0 148) 147) anon238_Else_correct))))))
(let ((anon237_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 151) 148)) anon104_correct)))
(let ((anon237_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 149) (- 0 150)) (<= FullPerm (U_2_real (MapType1Select UnfoldingMask@31 null (tree tmp_sibling@0))))) (=> (<= FullPerm (U_2_real (MapType1Select UnfoldingMask@31 null (tree tmp_sibling@0)))) (=> (= (ControlFlow 0 149) 148) anon104_correct))))))
(let ((anon102_correct  (=> (and (and (or (and (= (MapType0Select Heap@46 arg_this_1@0 next_child) null) (= (MapType0Select Heap@46 arg_this_1@0 next_sibling) null)) (and (not (= (MapType0Select Heap@46 arg_this_1@0 next_child) null)) (not (= (MapType0Select Heap@46 arg_this_1@0 next_sibling) null)))) (state Heap@46 UnfoldingMask@31)) (and (|tree#trigger| Heap@46 (tree tmp_sibling@0)) (= (MapType0Select Heap@46 null (tree tmp_sibling@0)) (CombineFrames (FrameFragment (MapType0Select Heap@46 tmp_sibling@0 data)) (CombineFrames (FrameFragment (MapType0Select Heap@46 tmp_sibling@0 next_child)) (CombineFrames (FrameFragment (MapType0Select Heap@46 tmp_sibling@0 next_sibling)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@46 tmp_sibling@0 next_child) null)) (MapType0Select Heap@46 null (tree (MapType0Select Heap@46 tmp_sibling@0 next_child))) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@46 tmp_sibling@0 next_sibling) null)) (MapType0Select Heap@46 null (tree (MapType0Select Heap@46 tmp_sibling@0 next_sibling))) EmptyFrame))))))))) (and (=> (= (ControlFlow 0 152) 149) anon237_Then_correct) (=> (= (ControlFlow 0 152) 151) anon237_Else_correct)))))
(let ((anon236_Else_correct  (=> (= (MapType0Select Heap@46 arg_this_1@0 next_sibling) null) (=> (and (= UnfoldingMask@31 UnfoldingMask@29) (= (ControlFlow 0 155) 152)) anon102_correct))))
(let ((anon236_Then_correct  (=> (and (not (= (MapType0Select Heap@46 arg_this_1@0 next_sibling) null)) (= perm@36 (* FullPerm (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 153) (- 0 154)) (>= perm@36 NoPerm)) (=> (>= perm@36 NoPerm) (=> (= UnfoldingMask@30 (MapType1Store UnfoldingMask@29 null (tree (MapType0Select Heap@46 arg_this_1@0 next_sibling)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@29 null (tree (MapType0Select Heap@46 arg_this_1@0 next_sibling)))) perm@36)))) (=> (and (and (InsidePredicate (tree arg_this_1@0) (MapType0Select Heap@46 null (tree arg_this_1@0)) (tree (MapType0Select Heap@46 arg_this_1@0 next_sibling)) (MapType0Select Heap@46 null (tree (MapType0Select Heap@46 arg_this_1@0 next_sibling)))) (state Heap@46 UnfoldingMask@30)) (and (= UnfoldingMask@31 UnfoldingMask@30) (= (ControlFlow 0 153) 152))) anon102_correct)))))))
(let ((anon235_Else_correct  (=> (and (= (MapType0Select Heap@46 arg_this_1@0 next_child) null) (= UnfoldingMask@29 UnfoldingMask@27)) (and (=> (= (ControlFlow 0 158) 153) anon236_Then_correct) (=> (= (ControlFlow 0 158) 155) anon236_Else_correct)))))
(let ((anon235_Then_correct  (=> (and (not (= (MapType0Select Heap@46 arg_this_1@0 next_child) null)) (= perm@35 (* FullPerm (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 156) (- 0 157)) (>= perm@35 NoPerm)) (=> (>= perm@35 NoPerm) (=> (and (and (= UnfoldingMask@28 (MapType1Store UnfoldingMask@27 null (tree (MapType0Select Heap@46 arg_this_1@0 next_child)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@27 null (tree (MapType0Select Heap@46 arg_this_1@0 next_child)))) perm@35)))) (InsidePredicate (tree arg_this_1@0) (MapType0Select Heap@46 null (tree arg_this_1@0)) (tree (MapType0Select Heap@46 arg_this_1@0 next_child)) (MapType0Select Heap@46 null (tree (MapType0Select Heap@46 arg_this_1@0 next_child))))) (and (state Heap@46 UnfoldingMask@28) (= UnfoldingMask@29 UnfoldingMask@28))) (and (=> (= (ControlFlow 0 156) 153) anon236_Then_correct) (=> (= (ControlFlow 0 156) 155) anon236_Else_correct))))))))
(let ((anon98_correct  (=> (and (= UnfoldingMask@24 (MapType1Store Mask@17 null (tree arg_this_1@0) (real_2_U (- (U_2_real (MapType1Select Mask@17 null (tree arg_this_1@0))) perm@31)))) (= perm@32 (* FullPerm (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 159) (- 0 162)) (>= perm@32 NoPerm)) (=> (>= perm@32 NoPerm) (=> (and (and (=> (> perm@32 NoPerm) (not (= arg_this_1@0 null))) (= UnfoldingMask@25 (MapType1Store UnfoldingMask@24 arg_this_1@0 data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@24 arg_this_1@0 data)) perm@32))))) (and (state Heap@46 UnfoldingMask@25) (= perm@33 (* FullPerm (/ (to_real 1) (to_real 2)))))) (and (=> (= (ControlFlow 0 159) (- 0 161)) (>= perm@33 NoPerm)) (=> (>= perm@33 NoPerm) (=> (and (and (=> (> perm@33 NoPerm) (not (= arg_this_1@0 null))) (= UnfoldingMask@26 (MapType1Store UnfoldingMask@25 arg_this_1@0 next_child (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@25 arg_this_1@0 next_child)) perm@33))))) (and (state Heap@46 UnfoldingMask@26) (= perm@34 (* FullPerm (/ (to_real 1) (to_real 2)))))) (and (=> (= (ControlFlow 0 159) (- 0 160)) (>= perm@34 NoPerm)) (=> (>= perm@34 NoPerm) (=> (=> (> perm@34 NoPerm) (not (= arg_this_1@0 null))) (=> (and (= UnfoldingMask@27 (MapType1Store UnfoldingMask@26 arg_this_1@0 next_sibling (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@26 arg_this_1@0 next_sibling)) perm@34)))) (state Heap@46 UnfoldingMask@27)) (and (=> (= (ControlFlow 0 159) 156) anon235_Then_correct) (=> (= (ControlFlow 0 159) 158) anon235_Else_correct)))))))))))))))
(let ((anon234_Else_correct  (=> (and (= perm@31 NoPerm) (= (ControlFlow 0 165) 159)) anon98_correct)))
(let ((anon234_Then_correct  (=> (not (= perm@31 NoPerm)) (and (=> (= (ControlFlow 0 163) (- 0 164)) (<= perm@31 (U_2_real (MapType1Select Mask@17 null (tree arg_this_1@0))))) (=> (<= perm@31 (U_2_real (MapType1Select Mask@17 null (tree arg_this_1@0)))) (=> (= (ControlFlow 0 163) 159) anon98_correct))))))
(let ((anon96_correct  (=> (state Heap@46 Mask@17) (=> (and (and (state Heap@46 Mask@17) (|tree#trigger| Heap@46 (tree arg_this_1@0))) (and (= (MapType0Select Heap@46 null (tree arg_this_1@0)) (CombineFrames (FrameFragment (MapType0Select Heap@46 arg_this_1@0 data)) (CombineFrames (FrameFragment (MapType0Select Heap@46 arg_this_1@0 next_child)) (CombineFrames (FrameFragment (MapType0Select Heap@46 arg_this_1@0 next_sibling)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@46 arg_this_1@0 next_child) null)) (MapType0Select Heap@46 null (tree (MapType0Select Heap@46 arg_this_1@0 next_child))) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@46 arg_this_1@0 next_sibling) null)) (MapType0Select Heap@46 null (tree (MapType0Select Heap@46 arg_this_1@0 next_sibling))) EmptyFrame))))))) (= perm@31 (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 166) (- 0 167)) (>= perm@31 NoPerm)) (=> (>= perm@31 NoPerm) (and (=> (= (ControlFlow 0 166) 163) anon234_Then_correct) (=> (= (ControlFlow 0 166) 165) anon234_Else_correct))))))))
(let ((anon233_Else_correct  (=> (= (MapType0Select Heap@44 tmp_sibling@0 next_sibling) null) (=> (and (= Heap@46 Heap@44) (= (ControlFlow 0 169) 166)) anon96_correct))))
(let ((anon233_Then_correct  (=> (not (= (MapType0Select Heap@44 tmp_sibling@0 next_sibling) null)) (=> (and (and (forall ((o_40 T@U) (f_44 T@U) ) (! (let ((B@@31 (FieldTypeInv1 (type f_44))))
(let ((A@@32 (FieldTypeInv0 (type f_44))))
 (=> (and (and (= (type o_40) RefType) (= (type f_44) (FieldType A@@32 B@@31))) (or (U_2_bool (MapType1Select (MapType0Select Heap@44 null (|tree#sm| tmp_sibling@0)) o_40 f_44)) (U_2_bool (MapType1Select (MapType0Select Heap@44 null (|tree#sm| (MapType0Select Heap@44 tmp_sibling@0 next_sibling))) o_40 f_44)))) (U_2_bool (MapType1Select newPMask@13 o_40 f_44)))))
 :qid |stdinbpl.1818:37|
 :skolemid |65|
 :pattern ( (MapType1Select newPMask@13 o_40 f_44))
)) (= Heap@45 (MapType0Store Heap@44 null (|tree#sm| tmp_sibling@0) newPMask@13))) (and (= Heap@46 Heap@45) (= (ControlFlow 0 168) 166))) anon96_correct))))
(let ((anon232_Else_correct  (=> (and (= (MapType0Select Heap@42 tmp_sibling@0 next_child) null) (= Heap@44 Heap@42)) (and (=> (= (ControlFlow 0 171) 168) anon233_Then_correct) (=> (= (ControlFlow 0 171) 169) anon233_Else_correct)))))
(let ((anon232_Then_correct  (=> (and (and (not (= (MapType0Select Heap@42 tmp_sibling@0 next_child) null)) (forall ((o_39 T@U) (f_43 T@U) ) (! (let ((B@@32 (FieldTypeInv1 (type f_43))))
(let ((A@@33 (FieldTypeInv0 (type f_43))))
 (=> (and (and (= (type o_39) RefType) (= (type f_43) (FieldType A@@33 B@@32))) (or (U_2_bool (MapType1Select (MapType0Select Heap@42 null (|tree#sm| tmp_sibling@0)) o_39 f_43)) (U_2_bool (MapType1Select (MapType0Select Heap@42 null (|tree#sm| (MapType0Select Heap@42 tmp_sibling@0 next_child))) o_39 f_43)))) (U_2_bool (MapType1Select newPMask@12 o_39 f_43)))))
 :qid |stdinbpl.1810:37|
 :skolemid |64|
 :pattern ( (MapType1Select newPMask@12 o_39 f_43))
))) (and (= Heap@43 (MapType0Store Heap@42 null (|tree#sm| tmp_sibling@0) newPMask@12)) (= Heap@44 Heap@43))) (and (=> (= (ControlFlow 0 170) 168) anon233_Then_correct) (=> (= (ControlFlow 0 170) 169) anon233_Else_correct)))))
(let ((anon92_correct  (=> (and (and (state Heap@39 Mask@17) (= Heap@40 (MapType0Store Heap@39 null (|tree#sm| tmp_sibling@0) (MapType1Store (MapType0Select Heap@39 null (|tree#sm| tmp_sibling@0)) tmp_sibling@0 data (bool_2_U true))))) (and (= Heap@41 (MapType0Store Heap@40 null (|tree#sm| tmp_sibling@0) (MapType1Store (MapType0Select Heap@40 null (|tree#sm| tmp_sibling@0)) tmp_sibling@0 next_child (bool_2_U true)))) (= Heap@42 (MapType0Store Heap@41 null (|tree#sm| tmp_sibling@0) (MapType1Store (MapType0Select Heap@41 null (|tree#sm| tmp_sibling@0)) tmp_sibling@0 next_sibling (bool_2_U true)))))) (and (=> (= (ControlFlow 0 172) 170) anon232_Then_correct) (=> (= (ControlFlow 0 172) 171) anon232_Else_correct)))))
(let ((anon231_Else_correct  (=> (= (MapType0Select Heap@37 arg_this_1@0 next_sibling) null) (=> (and (= Heap@39 Heap@37) (= (ControlFlow 0 174) 172)) anon92_correct))))
(let ((anon231_Then_correct  (=> (not (= (MapType0Select Heap@37 arg_this_1@0 next_sibling) null)) (=> (and (and (forall ((o_38 T@U) (f_42 T@U) ) (! (let ((B@@33 (FieldTypeInv1 (type f_42))))
(let ((A@@34 (FieldTypeInv0 (type f_42))))
 (=> (and (and (= (type o_38) RefType) (= (type f_42) (FieldType A@@34 B@@33))) (or (U_2_bool (MapType1Select (MapType0Select Heap@37 null (|tree#sm| arg_this_1@0)) o_38 f_42)) (U_2_bool (MapType1Select (MapType0Select Heap@37 null (|tree#sm| (MapType0Select Heap@37 arg_this_1@0 next_sibling))) o_38 f_42)))) (U_2_bool (MapType1Select newPMask@11 o_38 f_42)))))
 :qid |stdinbpl.1798:37|
 :skolemid |63|
 :pattern ( (MapType1Select newPMask@11 o_38 f_42))
)) (= Heap@38 (MapType0Store Heap@37 null (|tree#sm| arg_this_1@0) newPMask@11))) (and (= Heap@39 Heap@38) (= (ControlFlow 0 173) 172))) anon92_correct))))
(let ((anon230_Else_correct  (=> (and (= (MapType0Select Heap@35 arg_this_1@0 next_child) null) (= Heap@37 Heap@35)) (and (=> (= (ControlFlow 0 176) 173) anon231_Then_correct) (=> (= (ControlFlow 0 176) 174) anon231_Else_correct)))))
(let ((anon230_Then_correct  (=> (and (and (not (= (MapType0Select Heap@35 arg_this_1@0 next_child) null)) (forall ((o_37 T@U) (f_41 T@U) ) (! (let ((B@@34 (FieldTypeInv1 (type f_41))))
(let ((A@@35 (FieldTypeInv0 (type f_41))))
 (=> (and (and (= (type o_37) RefType) (= (type f_41) (FieldType A@@35 B@@34))) (or (U_2_bool (MapType1Select (MapType0Select Heap@35 null (|tree#sm| arg_this_1@0)) o_37 f_41)) (U_2_bool (MapType1Select (MapType0Select Heap@35 null (|tree#sm| (MapType0Select Heap@35 arg_this_1@0 next_child))) o_37 f_41)))) (U_2_bool (MapType1Select newPMask@10 o_37 f_41)))))
 :qid |stdinbpl.1790:37|
 :skolemid |62|
 :pattern ( (MapType1Select newPMask@10 o_37 f_41))
))) (and (= Heap@36 (MapType0Store Heap@35 null (|tree#sm| arg_this_1@0) newPMask@10)) (= Heap@37 Heap@36))) (and (=> (= (ControlFlow 0 175) 173) anon231_Then_correct) (=> (= (ControlFlow 0 175) 174) anon231_Else_correct)))))
(let ((anon88_correct  (=> (and (or (and (= (MapType0Select ExhaleHeap@1 arg_this_1@0 next_child) null) (= (MapType0Select ExhaleHeap@1 arg_this_1@0 next_sibling) null)) (and (not (= (MapType0Select ExhaleHeap@1 arg_this_1@0 next_child) null)) (not (= (MapType0Select ExhaleHeap@1 arg_this_1@0 next_sibling) null)))) (state ExhaleHeap@1 UnfoldingMask@23)) (=> (and (and (and (= (MapType0Select ExhaleHeap@1 arg_this_1@0 next_child) (MapType0Select ExhaleHeap@1 tmp_sibling@0 next_child)) (= (MapType0Select ExhaleHeap@1 arg_this_1@0 next_sibling) (MapType0Select ExhaleHeap@1 tmp_sibling@0 next_sibling))) (= Heap@33 (MapType0Store ExhaleHeap@1 null (|tree#sm| arg_this_1@0) (MapType1Store (MapType0Select ExhaleHeap@1 null (|tree#sm| arg_this_1@0)) arg_this_1@0 data (bool_2_U true))))) (and (= Heap@34 (MapType0Store Heap@33 null (|tree#sm| arg_this_1@0) (MapType1Store (MapType0Select Heap@33 null (|tree#sm| arg_this_1@0)) arg_this_1@0 next_child (bool_2_U true)))) (= Heap@35 (MapType0Store Heap@34 null (|tree#sm| arg_this_1@0) (MapType1Store (MapType0Select Heap@34 null (|tree#sm| arg_this_1@0)) arg_this_1@0 next_sibling (bool_2_U true)))))) (and (=> (= (ControlFlow 0 177) 175) anon230_Then_correct) (=> (= (ControlFlow 0 177) 176) anon230_Else_correct))))))
(let ((anon229_Else_correct  (=> (= (MapType0Select ExhaleHeap@1 arg_this_1@0 next_sibling) null) (=> (and (= UnfoldingMask@23 UnfoldingMask@21) (= (ControlFlow 0 179) 177)) anon88_correct))))
(let ((anon229_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@1 arg_this_1@0 next_sibling) null)) (=> (and (= perm@30 (* FullPerm (/ (to_real 1) (to_real 2)))) (= UnfoldingMask@22 (MapType1Store UnfoldingMask@21 null (tree (MapType0Select ExhaleHeap@1 arg_this_1@0 next_sibling)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@21 null (tree (MapType0Select ExhaleHeap@1 arg_this_1@0 next_sibling)))) perm@30))))) (=> (and (and (InsidePredicate (tree arg_this_1@0) (MapType0Select ExhaleHeap@1 null (tree arg_this_1@0)) (tree (MapType0Select ExhaleHeap@1 arg_this_1@0 next_sibling)) (MapType0Select ExhaleHeap@1 null (tree (MapType0Select ExhaleHeap@1 arg_this_1@0 next_sibling)))) (state ExhaleHeap@1 UnfoldingMask@22)) (and (= UnfoldingMask@23 UnfoldingMask@22) (= (ControlFlow 0 178) 177))) anon88_correct)))))
(let ((anon228_Else_correct  (=> (and (= (MapType0Select ExhaleHeap@1 arg_this_1@0 next_child) null) (= UnfoldingMask@21 UnfoldingMask@19)) (and (=> (= (ControlFlow 0 181) 178) anon229_Then_correct) (=> (= (ControlFlow 0 181) 179) anon229_Else_correct)))))
(let ((anon228_Then_correct  (=> (and (not (= (MapType0Select ExhaleHeap@1 arg_this_1@0 next_child) null)) (= perm@29 (* FullPerm (/ (to_real 1) (to_real 2))))) (=> (and (and (= UnfoldingMask@20 (MapType1Store UnfoldingMask@19 null (tree (MapType0Select ExhaleHeap@1 arg_this_1@0 next_child)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@19 null (tree (MapType0Select ExhaleHeap@1 arg_this_1@0 next_child)))) perm@29)))) (InsidePredicate (tree arg_this_1@0) (MapType0Select ExhaleHeap@1 null (tree arg_this_1@0)) (tree (MapType0Select ExhaleHeap@1 arg_this_1@0 next_child)) (MapType0Select ExhaleHeap@1 null (tree (MapType0Select ExhaleHeap@1 arg_this_1@0 next_child))))) (and (state ExhaleHeap@1 UnfoldingMask@20) (= UnfoldingMask@21 UnfoldingMask@20))) (and (=> (= (ControlFlow 0 180) 178) anon229_Then_correct) (=> (= (ControlFlow 0 180) 179) anon229_Else_correct))))))
(let ((anon84_correct  (=> (= Mask@15 (MapType1Store Mask@14 null (tree arg_this_1@0) (real_2_U (- (U_2_real (MapType1Select Mask@14 null (tree arg_this_1@0))) perm@23)))) (=> (and (IdenticalOnKnownLocations Heap@32 ExhaleHeap@1 Mask@15) (= perm@24 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 182) (- 0 183)) (>= perm@24 NoPerm)) (=> (>= perm@24 NoPerm) (=> (and (and (= Mask@16 (MapType1Store Mask@15 null (tree arg_this_1@0) (real_2_U (+ (U_2_real (MapType1Select Mask@15 null (tree arg_this_1@0))) perm@24)))) (state ExhaleHeap@1 Mask@16)) (and (= Mask@17 (MapType1Store Mask@16 null (tree tmp_sibling@0) (real_2_U (+ (U_2_real (MapType1Select Mask@16 null (tree tmp_sibling@0))) FullPerm)))) (state ExhaleHeap@1 Mask@17))) (=> (and (and (and (and (|tree#trigger| ExhaleHeap@1 (tree arg_this_1@0)) (= (MapType0Select ExhaleHeap@1 null (tree arg_this_1@0)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@1 arg_this_1@0 data)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@1 arg_this_1@0 next_child)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@1 arg_this_1@0 next_sibling)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@1 arg_this_1@0 next_child) null)) (MapType0Select ExhaleHeap@1 null (tree (MapType0Select ExhaleHeap@1 arg_this_1@0 next_child))) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@1 arg_this_1@0 next_sibling) null)) (MapType0Select ExhaleHeap@1 null (tree (MapType0Select ExhaleHeap@1 arg_this_1@0 next_sibling))) EmptyFrame)))))))) (and (= perm@25 (/ (to_real 1) (to_real 2))) (= UnfoldingMask@16 (MapType1Store Mask@17 null (tree arg_this_1@0) (real_2_U (- (U_2_real (MapType1Select Mask@17 null (tree arg_this_1@0))) perm@25)))))) (and (and (= perm@26 (* FullPerm (/ (to_real 1) (to_real 2)))) (=> (> perm@26 NoPerm) (not (= arg_this_1@0 null)))) (and (= UnfoldingMask@17 (MapType1Store UnfoldingMask@16 arg_this_1@0 data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@16 arg_this_1@0 data)) perm@26)))) (state ExhaleHeap@1 UnfoldingMask@17)))) (and (and (and (= perm@27 (* FullPerm (/ (to_real 1) (to_real 2)))) (=> (> perm@27 NoPerm) (not (= arg_this_1@0 null)))) (and (= UnfoldingMask@18 (MapType1Store UnfoldingMask@17 arg_this_1@0 next_child (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@17 arg_this_1@0 next_child)) perm@27)))) (state ExhaleHeap@1 UnfoldingMask@18))) (and (and (= perm@28 (* FullPerm (/ (to_real 1) (to_real 2)))) (=> (> perm@28 NoPerm) (not (= arg_this_1@0 null)))) (and (= UnfoldingMask@19 (MapType1Store UnfoldingMask@18 arg_this_1@0 next_sibling (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@18 arg_this_1@0 next_sibling)) perm@28)))) (state ExhaleHeap@1 UnfoldingMask@19))))) (and (=> (= (ControlFlow 0 182) 180) anon228_Then_correct) (=> (= (ControlFlow 0 182) 181) anon228_Else_correct))))))))))
(let ((anon227_Else_correct  (=> (and (= perm@23 NoPerm) (= (ControlFlow 0 186) 182)) anon84_correct)))
(let ((anon227_Then_correct  (=> (not (= perm@23 NoPerm)) (and (=> (= (ControlFlow 0 184) (- 0 185)) (<= perm@23 (U_2_real (MapType1Select Mask@14 null (tree arg_this_1@0))))) (=> (<= perm@23 (U_2_real (MapType1Select Mask@14 null (tree arg_this_1@0)))) (=> (= (ControlFlow 0 184) 182) anon84_correct))))))
(let ((anon82_correct  (=> (state Heap@32 Mask@14) (=> (and (U_2_bool (MapType0Select Heap@32 tmp_child@0 $allocated)) (state Heap@32 Mask@14)) (and (=> (= (ControlFlow 0 187) (- 0 189)) (HasDirectPerm Mask@14 this@@5 next_sibling)) (=> (HasDirectPerm Mask@14 this@@5 next_sibling) (=> (and (= arg_this_1@0 (MapType0Select Heap@32 this@@5 next_sibling)) (= perm@23 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 187) (- 0 188)) (>= perm@23 NoPerm)) (=> (>= perm@23 NoPerm) (and (=> (= (ControlFlow 0 187) 184) anon227_Then_correct) (=> (= (ControlFlow 0 187) 186) anon227_Else_correct)))))))))))
(let ((anon226_Else_correct  (=> (= (MapType0Select Heap@30 tmp_child@0 next_sibling) null) (=> (and (= Heap@32 Heap@30) (= (ControlFlow 0 191) 187)) anon82_correct))))
(let ((anon226_Then_correct  (=> (not (= (MapType0Select Heap@30 tmp_child@0 next_sibling) null)) (=> (and (and (forall ((o_36 T@U) (f_40 T@U) ) (! (let ((B@@35 (FieldTypeInv1 (type f_40))))
(let ((A@@36 (FieldTypeInv0 (type f_40))))
 (=> (and (and (= (type o_36) RefType) (= (type f_40) (FieldType A@@36 B@@35))) (or (U_2_bool (MapType1Select (MapType0Select Heap@30 null (|tree#sm| tmp_child@0)) o_36 f_40)) (U_2_bool (MapType1Select (MapType0Select Heap@30 null (|tree#sm| (MapType0Select Heap@30 tmp_child@0 next_sibling))) o_36 f_40)))) (U_2_bool (MapType1Select newPMask@9 o_36 f_40)))))
 :qid |stdinbpl.1695:39|
 :skolemid |61|
 :pattern ( (MapType1Select newPMask@9 o_36 f_40))
)) (= Heap@31 (MapType0Store Heap@30 null (|tree#sm| tmp_child@0) newPMask@9))) (and (= Heap@32 Heap@31) (= (ControlFlow 0 190) 187))) anon82_correct))))
(let ((anon225_Else_correct  (=> (and (= (MapType0Select Heap@28 tmp_child@0 next_child) null) (= Heap@30 Heap@28)) (and (=> (= (ControlFlow 0 193) 190) anon226_Then_correct) (=> (= (ControlFlow 0 193) 191) anon226_Else_correct)))))
(let ((anon225_Then_correct  (=> (and (and (not (= (MapType0Select Heap@28 tmp_child@0 next_child) null)) (forall ((o_35 T@U) (f_39 T@U) ) (! (let ((B@@36 (FieldTypeInv1 (type f_39))))
(let ((A@@37 (FieldTypeInv0 (type f_39))))
 (=> (and (and (= (type o_35) RefType) (= (type f_39) (FieldType A@@37 B@@36))) (or (U_2_bool (MapType1Select (MapType0Select Heap@28 null (|tree#sm| tmp_child@0)) o_35 f_39)) (U_2_bool (MapType1Select (MapType0Select Heap@28 null (|tree#sm| (MapType0Select Heap@28 tmp_child@0 next_child))) o_35 f_39)))) (U_2_bool (MapType1Select newPMask@8 o_35 f_39)))))
 :qid |stdinbpl.1687:39|
 :skolemid |60|
 :pattern ( (MapType1Select newPMask@8 o_35 f_39))
))) (and (= Heap@29 (MapType0Store Heap@28 null (|tree#sm| tmp_child@0) newPMask@8)) (= Heap@30 Heap@29))) (and (=> (= (ControlFlow 0 192) 190) anon226_Then_correct) (=> (= (ControlFlow 0 192) 191) anon226_Else_correct)))))
(let ((anon78_correct  (=> (and (and (state Heap@25 Mask@14) (= Heap@26 (MapType0Store Heap@25 null (|tree#sm| tmp_child@0) (MapType1Store (MapType0Select Heap@25 null (|tree#sm| tmp_child@0)) tmp_child@0 data (bool_2_U true))))) (and (= Heap@27 (MapType0Store Heap@26 null (|tree#sm| tmp_child@0) (MapType1Store (MapType0Select Heap@26 null (|tree#sm| tmp_child@0)) tmp_child@0 next_child (bool_2_U true)))) (= Heap@28 (MapType0Store Heap@27 null (|tree#sm| tmp_child@0) (MapType1Store (MapType0Select Heap@27 null (|tree#sm| tmp_child@0)) tmp_child@0 next_sibling (bool_2_U true)))))) (and (=> (= (ControlFlow 0 194) 192) anon225_Then_correct) (=> (= (ControlFlow 0 194) 193) anon225_Else_correct)))))
(let ((anon224_Else_correct  (=> (= (MapType0Select Heap@23 arg_this@0 next_sibling) null) (=> (and (= Heap@25 Heap@23) (= (ControlFlow 0 196) 194)) anon78_correct))))
(let ((anon224_Then_correct  (=> (not (= (MapType0Select Heap@23 arg_this@0 next_sibling) null)) (=> (and (and (forall ((o_34 T@U) (f_38 T@U) ) (! (let ((B@@37 (FieldTypeInv1 (type f_38))))
(let ((A@@38 (FieldTypeInv0 (type f_38))))
 (=> (and (and (= (type o_34) RefType) (= (type f_38) (FieldType A@@38 B@@37))) (or (U_2_bool (MapType1Select (MapType0Select Heap@23 null (|tree#sm| arg_this@0)) o_34 f_38)) (U_2_bool (MapType1Select (MapType0Select Heap@23 null (|tree#sm| (MapType0Select Heap@23 arg_this@0 next_sibling))) o_34 f_38)))) (U_2_bool (MapType1Select newPMask@7 o_34 f_38)))))
 :qid |stdinbpl.1675:39|
 :skolemid |59|
 :pattern ( (MapType1Select newPMask@7 o_34 f_38))
)) (= Heap@24 (MapType0Store Heap@23 null (|tree#sm| arg_this@0) newPMask@7))) (and (= Heap@25 Heap@24) (= (ControlFlow 0 195) 194))) anon78_correct))))
(let ((anon223_Else_correct  (=> (and (= (MapType0Select Heap@21 arg_this@0 next_child) null) (= Heap@23 Heap@21)) (and (=> (= (ControlFlow 0 198) 195) anon224_Then_correct) (=> (= (ControlFlow 0 198) 196) anon224_Else_correct)))))
(let ((anon223_Then_correct  (=> (and (and (not (= (MapType0Select Heap@21 arg_this@0 next_child) null)) (forall ((o_33 T@U) (f_37 T@U) ) (! (let ((B@@38 (FieldTypeInv1 (type f_37))))
(let ((A@@39 (FieldTypeInv0 (type f_37))))
 (=> (and (and (= (type o_33) RefType) (= (type f_37) (FieldType A@@39 B@@38))) (or (U_2_bool (MapType1Select (MapType0Select Heap@21 null (|tree#sm| arg_this@0)) o_33 f_37)) (U_2_bool (MapType1Select (MapType0Select Heap@21 null (|tree#sm| (MapType0Select Heap@21 arg_this@0 next_child))) o_33 f_37)))) (U_2_bool (MapType1Select newPMask@6 o_33 f_37)))))
 :qid |stdinbpl.1667:39|
 :skolemid |58|
 :pattern ( (MapType1Select newPMask@6 o_33 f_37))
))) (and (= Heap@22 (MapType0Store Heap@21 null (|tree#sm| arg_this@0) newPMask@6)) (= Heap@23 Heap@22))) (and (=> (= (ControlFlow 0 197) 195) anon224_Then_correct) (=> (= (ControlFlow 0 197) 196) anon224_Else_correct)))))
(let ((anon74_correct  (=> (and (and (state UnfoldingHeap@6 UnfoldingMask@15) (= Heap@19 (MapType0Store Heap@18 null (|tree#sm| arg_this@0) (MapType1Store (MapType0Select Heap@18 null (|tree#sm| arg_this@0)) arg_this@0 data (bool_2_U true))))) (and (= Heap@20 (MapType0Store Heap@19 null (|tree#sm| arg_this@0) (MapType1Store (MapType0Select Heap@19 null (|tree#sm| arg_this@0)) arg_this@0 next_child (bool_2_U true)))) (= Heap@21 (MapType0Store Heap@20 null (|tree#sm| arg_this@0) (MapType1Store (MapType0Select Heap@20 null (|tree#sm| arg_this@0)) arg_this@0 next_sibling (bool_2_U true)))))) (and (=> (= (ControlFlow 0 199) 197) anon223_Then_correct) (=> (= (ControlFlow 0 199) 198) anon223_Else_correct)))))
(let ((anon222_Else_correct  (=> (= (MapType0Select UnfoldingHeap@4 tmp_child@0 next_sibling) null) (=> (and (= UnfoldingHeap@6 UnfoldingHeap@4) (= (ControlFlow 0 201) 199)) anon74_correct))))
(let ((anon222_Then_correct  (=> (not (= (MapType0Select UnfoldingHeap@4 tmp_child@0 next_sibling) null)) (=> (and (and (forall ((o_32 T@U) (f_36 T@U) ) (! (let ((B@@39 (FieldTypeInv1 (type f_36))))
(let ((A@@40 (FieldTypeInv0 (type f_36))))
 (=> (and (and (= (type o_32) RefType) (= (type f_36) (FieldType A@@40 B@@39))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@4 null (|tree#sm| tmp_child@0)) o_32 f_36)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@4 null (|tree#sm| (MapType0Select UnfoldingHeap@4 tmp_child@0 next_sibling))) o_32 f_36)))) (U_2_bool (MapType1Select newPMask@5 o_32 f_36)))))
 :qid |stdinbpl.1653:39|
 :skolemid |57|
 :pattern ( (MapType1Select newPMask@5 o_32 f_36))
)) (= UnfoldingHeap@5 (MapType0Store UnfoldingHeap@4 null (|tree#sm| tmp_child@0) newPMask@5))) (and (= UnfoldingHeap@6 UnfoldingHeap@5) (= (ControlFlow 0 200) 199))) anon74_correct))))
(let ((anon221_Else_correct  (=> (and (= (MapType0Select UnfoldingHeap@2 tmp_child@0 next_child) null) (= UnfoldingHeap@4 UnfoldingHeap@2)) (and (=> (= (ControlFlow 0 203) 200) anon222_Then_correct) (=> (= (ControlFlow 0 203) 201) anon222_Else_correct)))))
(let ((anon221_Then_correct  (=> (and (and (not (= (MapType0Select UnfoldingHeap@2 tmp_child@0 next_child) null)) (forall ((o_31 T@U) (f_35 T@U) ) (! (let ((B@@40 (FieldTypeInv1 (type f_35))))
(let ((A@@41 (FieldTypeInv0 (type f_35))))
 (=> (and (and (= (type o_31) RefType) (= (type f_35) (FieldType A@@41 B@@40))) (or (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@2 null (|tree#sm| tmp_child@0)) o_31 f_35)) (U_2_bool (MapType1Select (MapType0Select UnfoldingHeap@2 null (|tree#sm| (MapType0Select UnfoldingHeap@2 tmp_child@0 next_child))) o_31 f_35)))) (U_2_bool (MapType1Select newPMask@4 o_31 f_35)))))
 :qid |stdinbpl.1645:39|
 :skolemid |56|
 :pattern ( (MapType1Select newPMask@4 o_31 f_35))
))) (and (= UnfoldingHeap@3 (MapType0Store UnfoldingHeap@2 null (|tree#sm| tmp_child@0) newPMask@4)) (= UnfoldingHeap@4 UnfoldingHeap@3))) (and (=> (= (ControlFlow 0 202) 200) anon222_Then_correct) (=> (= (ControlFlow 0 202) 201) anon222_Else_correct)))))
(let ((anon70_correct  (=> (or (and (= (MapType0Select Heap@18 tmp_child@0 next_child) null) (= (MapType0Select Heap@18 tmp_child@0 next_sibling) null)) (and (not (= (MapType0Select Heap@18 tmp_child@0 next_child) null)) (not (= (MapType0Select Heap@18 tmp_child@0 next_sibling) null)))) (=> (and (and (state Heap@18 Unfolding1Mask@7) (= UnfoldingHeap@0 (MapType0Store Heap@18 null (|tree#sm| tmp_child@0) (MapType1Store (MapType0Select Heap@18 null (|tree#sm| tmp_child@0)) tmp_child@0 data (bool_2_U true))))) (and (= UnfoldingHeap@1 (MapType0Store UnfoldingHeap@0 null (|tree#sm| tmp_child@0) (MapType1Store (MapType0Select UnfoldingHeap@0 null (|tree#sm| tmp_child@0)) tmp_child@0 next_child (bool_2_U true)))) (= UnfoldingHeap@2 (MapType0Store UnfoldingHeap@1 null (|tree#sm| tmp_child@0) (MapType1Store (MapType0Select UnfoldingHeap@1 null (|tree#sm| tmp_child@0)) tmp_child@0 next_sibling (bool_2_U true)))))) (and (=> (= (ControlFlow 0 204) 202) anon221_Then_correct) (=> (= (ControlFlow 0 204) 203) anon221_Else_correct))))))
(let ((anon220_Else_correct  (=> (= (MapType0Select Heap@18 tmp_child@0 next_sibling) null) (=> (and (= Unfolding1Mask@7 Unfolding1Mask@5) (= (ControlFlow 0 206) 204)) anon70_correct))))
(let ((anon220_Then_correct  (=> (and (not (= (MapType0Select Heap@18 tmp_child@0 next_sibling) null)) (= Unfolding1Mask@6 (MapType1Store Unfolding1Mask@5 null (tree (MapType0Select Heap@18 tmp_child@0 next_sibling)) (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@5 null (tree (MapType0Select Heap@18 tmp_child@0 next_sibling)))) FullPerm))))) (=> (and (and (InsidePredicate (tree tmp_child@0) (MapType0Select Heap@18 null (tree tmp_child@0)) (tree (MapType0Select Heap@18 tmp_child@0 next_sibling)) (MapType0Select Heap@18 null (tree (MapType0Select Heap@18 tmp_child@0 next_sibling)))) (state Heap@18 Unfolding1Mask@6)) (and (= Unfolding1Mask@7 Unfolding1Mask@6) (= (ControlFlow 0 205) 204))) anon70_correct))))
(let ((anon219_Else_correct  (=> (and (= (MapType0Select Heap@18 tmp_child@0 next_child) null) (= Unfolding1Mask@5 Unfolding1Mask@3)) (and (=> (= (ControlFlow 0 208) 205) anon220_Then_correct) (=> (= (ControlFlow 0 208) 206) anon220_Else_correct)))))
(let ((anon219_Then_correct  (=> (not (= (MapType0Select Heap@18 tmp_child@0 next_child) null)) (=> (and (and (= Unfolding1Mask@4 (MapType1Store Unfolding1Mask@3 null (tree (MapType0Select Heap@18 tmp_child@0 next_child)) (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@3 null (tree (MapType0Select Heap@18 tmp_child@0 next_child)))) FullPerm)))) (InsidePredicate (tree tmp_child@0) (MapType0Select Heap@18 null (tree tmp_child@0)) (tree (MapType0Select Heap@18 tmp_child@0 next_child)) (MapType0Select Heap@18 null (tree (MapType0Select Heap@18 tmp_child@0 next_child))))) (and (state Heap@18 Unfolding1Mask@4) (= Unfolding1Mask@5 Unfolding1Mask@4))) (and (=> (= (ControlFlow 0 207) 205) anon220_Then_correct) (=> (= (ControlFlow 0 207) 206) anon220_Else_correct))))))
(let ((anon66_correct  (=> (and (= Unfolding1Mask@0 (MapType1Store UnfoldingMask@15 null (tree tmp_child@0) (real_2_U (- (U_2_real (MapType1Select UnfoldingMask@15 null (tree tmp_child@0))) FullPerm)))) (not (= tmp_child@0 null))) (=> (and (and (and (= Unfolding1Mask@1 (MapType1Store Unfolding1Mask@0 tmp_child@0 data (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@0 tmp_child@0 data)) FullPerm)))) (state Heap@18 Unfolding1Mask@1)) (and (not (= tmp_child@0 null)) (= Unfolding1Mask@2 (MapType1Store Unfolding1Mask@1 tmp_child@0 next_child (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@1 tmp_child@0 next_child)) FullPerm)))))) (and (and (state Heap@18 Unfolding1Mask@2) (not (= tmp_child@0 null))) (and (= Unfolding1Mask@3 (MapType1Store Unfolding1Mask@2 tmp_child@0 next_sibling (real_2_U (+ (U_2_real (MapType1Select Unfolding1Mask@2 tmp_child@0 next_sibling)) FullPerm)))) (state Heap@18 Unfolding1Mask@3)))) (and (=> (= (ControlFlow 0 209) 207) anon219_Then_correct) (=> (= (ControlFlow 0 209) 208) anon219_Else_correct))))))
(let ((anon218_Else_correct  (=> (and (= FullPerm NoPerm) (= (ControlFlow 0 212) 209)) anon66_correct)))
(let ((anon218_Then_correct  (=> (not (= FullPerm NoPerm)) (and (=> (= (ControlFlow 0 210) (- 0 211)) (<= FullPerm (U_2_real (MapType1Select UnfoldingMask@15 null (tree tmp_child@0))))) (=> (<= FullPerm (U_2_real (MapType1Select UnfoldingMask@15 null (tree tmp_child@0)))) (=> (= (ControlFlow 0 210) 209) anon66_correct))))))
(let ((anon64_correct  (=> (and (and (or (and (= (MapType0Select Heap@18 arg_this@0 next_child) null) (= (MapType0Select Heap@18 arg_this@0 next_sibling) null)) (and (not (= (MapType0Select Heap@18 arg_this@0 next_child) null)) (not (= (MapType0Select Heap@18 arg_this@0 next_sibling) null)))) (state Heap@18 UnfoldingMask@15)) (and (|tree#trigger| Heap@18 (tree tmp_child@0)) (= (MapType0Select Heap@18 null (tree tmp_child@0)) (CombineFrames (FrameFragment (MapType0Select Heap@18 tmp_child@0 data)) (CombineFrames (FrameFragment (MapType0Select Heap@18 tmp_child@0 next_child)) (CombineFrames (FrameFragment (MapType0Select Heap@18 tmp_child@0 next_sibling)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@18 tmp_child@0 next_child) null)) (MapType0Select Heap@18 null (tree (MapType0Select Heap@18 tmp_child@0 next_child))) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@18 tmp_child@0 next_sibling) null)) (MapType0Select Heap@18 null (tree (MapType0Select Heap@18 tmp_child@0 next_sibling))) EmptyFrame))))))))) (and (=> (= (ControlFlow 0 213) 210) anon218_Then_correct) (=> (= (ControlFlow 0 213) 212) anon218_Else_correct)))))
(let ((anon217_Else_correct  (=> (= (MapType0Select Heap@18 arg_this@0 next_sibling) null) (=> (and (= UnfoldingMask@15 UnfoldingMask@13) (= (ControlFlow 0 216) 213)) anon64_correct))))
(let ((anon217_Then_correct  (=> (and (not (= (MapType0Select Heap@18 arg_this@0 next_sibling) null)) (= perm@22 (* FullPerm (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 214) (- 0 215)) (>= perm@22 NoPerm)) (=> (>= perm@22 NoPerm) (=> (= UnfoldingMask@14 (MapType1Store UnfoldingMask@13 null (tree (MapType0Select Heap@18 arg_this@0 next_sibling)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@13 null (tree (MapType0Select Heap@18 arg_this@0 next_sibling)))) perm@22)))) (=> (and (and (InsidePredicate (tree arg_this@0) (MapType0Select Heap@18 null (tree arg_this@0)) (tree (MapType0Select Heap@18 arg_this@0 next_sibling)) (MapType0Select Heap@18 null (tree (MapType0Select Heap@18 arg_this@0 next_sibling)))) (state Heap@18 UnfoldingMask@14)) (and (= UnfoldingMask@15 UnfoldingMask@14) (= (ControlFlow 0 214) 213))) anon64_correct)))))))
(let ((anon216_Else_correct  (=> (and (= (MapType0Select Heap@18 arg_this@0 next_child) null) (= UnfoldingMask@13 UnfoldingMask@11)) (and (=> (= (ControlFlow 0 219) 214) anon217_Then_correct) (=> (= (ControlFlow 0 219) 216) anon217_Else_correct)))))
(let ((anon216_Then_correct  (=> (and (not (= (MapType0Select Heap@18 arg_this@0 next_child) null)) (= perm@21 (* FullPerm (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 217) (- 0 218)) (>= perm@21 NoPerm)) (=> (>= perm@21 NoPerm) (=> (and (and (= UnfoldingMask@12 (MapType1Store UnfoldingMask@11 null (tree (MapType0Select Heap@18 arg_this@0 next_child)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@11 null (tree (MapType0Select Heap@18 arg_this@0 next_child)))) perm@21)))) (InsidePredicate (tree arg_this@0) (MapType0Select Heap@18 null (tree arg_this@0)) (tree (MapType0Select Heap@18 arg_this@0 next_child)) (MapType0Select Heap@18 null (tree (MapType0Select Heap@18 arg_this@0 next_child))))) (and (state Heap@18 UnfoldingMask@12) (= UnfoldingMask@13 UnfoldingMask@12))) (and (=> (= (ControlFlow 0 217) 214) anon217_Then_correct) (=> (= (ControlFlow 0 217) 216) anon217_Else_correct))))))))
(let ((anon60_correct  (=> (and (= UnfoldingMask@8 (MapType1Store Mask@14 null (tree arg_this@0) (real_2_U (- (U_2_real (MapType1Select Mask@14 null (tree arg_this@0))) perm@17)))) (= perm@18 (* FullPerm (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 220) (- 0 223)) (>= perm@18 NoPerm)) (=> (>= perm@18 NoPerm) (=> (and (and (=> (> perm@18 NoPerm) (not (= arg_this@0 null))) (= UnfoldingMask@9 (MapType1Store UnfoldingMask@8 arg_this@0 data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@8 arg_this@0 data)) perm@18))))) (and (state Heap@18 UnfoldingMask@9) (= perm@19 (* FullPerm (/ (to_real 1) (to_real 2)))))) (and (=> (= (ControlFlow 0 220) (- 0 222)) (>= perm@19 NoPerm)) (=> (>= perm@19 NoPerm) (=> (and (and (=> (> perm@19 NoPerm) (not (= arg_this@0 null))) (= UnfoldingMask@10 (MapType1Store UnfoldingMask@9 arg_this@0 next_child (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@9 arg_this@0 next_child)) perm@19))))) (and (state Heap@18 UnfoldingMask@10) (= perm@20 (* FullPerm (/ (to_real 1) (to_real 2)))))) (and (=> (= (ControlFlow 0 220) (- 0 221)) (>= perm@20 NoPerm)) (=> (>= perm@20 NoPerm) (=> (=> (> perm@20 NoPerm) (not (= arg_this@0 null))) (=> (and (= UnfoldingMask@11 (MapType1Store UnfoldingMask@10 arg_this@0 next_sibling (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@10 arg_this@0 next_sibling)) perm@20)))) (state Heap@18 UnfoldingMask@11)) (and (=> (= (ControlFlow 0 220) 217) anon216_Then_correct) (=> (= (ControlFlow 0 220) 219) anon216_Else_correct)))))))))))))))
(let ((anon215_Else_correct  (=> (and (= perm@17 NoPerm) (= (ControlFlow 0 226) 220)) anon60_correct)))
(let ((anon215_Then_correct  (=> (not (= perm@17 NoPerm)) (and (=> (= (ControlFlow 0 224) (- 0 225)) (<= perm@17 (U_2_real (MapType1Select Mask@14 null (tree arg_this@0))))) (=> (<= perm@17 (U_2_real (MapType1Select Mask@14 null (tree arg_this@0)))) (=> (= (ControlFlow 0 224) 220) anon60_correct))))))
(let ((anon58_correct  (=> (state Heap@18 Mask@14) (=> (and (and (state Heap@18 Mask@14) (|tree#trigger| Heap@18 (tree arg_this@0))) (and (= (MapType0Select Heap@18 null (tree arg_this@0)) (CombineFrames (FrameFragment (MapType0Select Heap@18 arg_this@0 data)) (CombineFrames (FrameFragment (MapType0Select Heap@18 arg_this@0 next_child)) (CombineFrames (FrameFragment (MapType0Select Heap@18 arg_this@0 next_sibling)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@18 arg_this@0 next_child) null)) (MapType0Select Heap@18 null (tree (MapType0Select Heap@18 arg_this@0 next_child))) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@18 arg_this@0 next_sibling) null)) (MapType0Select Heap@18 null (tree (MapType0Select Heap@18 arg_this@0 next_sibling))) EmptyFrame))))))) (= perm@17 (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 227) (- 0 228)) (>= perm@17 NoPerm)) (=> (>= perm@17 NoPerm) (and (=> (= (ControlFlow 0 227) 224) anon215_Then_correct) (=> (= (ControlFlow 0 227) 226) anon215_Else_correct))))))))
(let ((anon214_Else_correct  (=> (= (MapType0Select Heap@16 tmp_child@0 next_sibling) null) (=> (and (= Heap@18 Heap@16) (= (ControlFlow 0 230) 227)) anon58_correct))))
(let ((anon214_Then_correct  (=> (not (= (MapType0Select Heap@16 tmp_child@0 next_sibling) null)) (=> (and (and (forall ((o_30 T@U) (f_34 T@U) ) (! (let ((B@@41 (FieldTypeInv1 (type f_34))))
(let ((A@@42 (FieldTypeInv0 (type f_34))))
 (=> (and (and (= (type o_30) RefType) (= (type f_34) (FieldType A@@42 B@@41))) (or (U_2_bool (MapType1Select (MapType0Select Heap@16 null (|tree#sm| tmp_child@0)) o_30 f_34)) (U_2_bool (MapType1Select (MapType0Select Heap@16 null (|tree#sm| (MapType0Select Heap@16 tmp_child@0 next_sibling))) o_30 f_34)))) (U_2_bool (MapType1Select newPMask@3 o_30 f_34)))))
 :qid |stdinbpl.1532:37|
 :skolemid |55|
 :pattern ( (MapType1Select newPMask@3 o_30 f_34))
)) (= Heap@17 (MapType0Store Heap@16 null (|tree#sm| tmp_child@0) newPMask@3))) (and (= Heap@18 Heap@17) (= (ControlFlow 0 229) 227))) anon58_correct))))
(let ((anon213_Else_correct  (=> (and (= (MapType0Select Heap@14 tmp_child@0 next_child) null) (= Heap@16 Heap@14)) (and (=> (= (ControlFlow 0 232) 229) anon214_Then_correct) (=> (= (ControlFlow 0 232) 230) anon214_Else_correct)))))
(let ((anon213_Then_correct  (=> (and (and (not (= (MapType0Select Heap@14 tmp_child@0 next_child) null)) (forall ((o_29 T@U) (f_33 T@U) ) (! (let ((B@@42 (FieldTypeInv1 (type f_33))))
(let ((A@@43 (FieldTypeInv0 (type f_33))))
 (=> (and (and (= (type o_29) RefType) (= (type f_33) (FieldType A@@43 B@@42))) (or (U_2_bool (MapType1Select (MapType0Select Heap@14 null (|tree#sm| tmp_child@0)) o_29 f_33)) (U_2_bool (MapType1Select (MapType0Select Heap@14 null (|tree#sm| (MapType0Select Heap@14 tmp_child@0 next_child))) o_29 f_33)))) (U_2_bool (MapType1Select newPMask@2 o_29 f_33)))))
 :qid |stdinbpl.1524:37|
 :skolemid |54|
 :pattern ( (MapType1Select newPMask@2 o_29 f_33))
))) (and (= Heap@15 (MapType0Store Heap@14 null (|tree#sm| tmp_child@0) newPMask@2)) (= Heap@16 Heap@15))) (and (=> (= (ControlFlow 0 231) 229) anon214_Then_correct) (=> (= (ControlFlow 0 231) 230) anon214_Else_correct)))))
(let ((anon54_correct  (=> (and (and (state Heap@11 Mask@14) (= Heap@12 (MapType0Store Heap@11 null (|tree#sm| tmp_child@0) (MapType1Store (MapType0Select Heap@11 null (|tree#sm| tmp_child@0)) tmp_child@0 data (bool_2_U true))))) (and (= Heap@13 (MapType0Store Heap@12 null (|tree#sm| tmp_child@0) (MapType1Store (MapType0Select Heap@12 null (|tree#sm| tmp_child@0)) tmp_child@0 next_child (bool_2_U true)))) (= Heap@14 (MapType0Store Heap@13 null (|tree#sm| tmp_child@0) (MapType1Store (MapType0Select Heap@13 null (|tree#sm| tmp_child@0)) tmp_child@0 next_sibling (bool_2_U true)))))) (and (=> (= (ControlFlow 0 233) 231) anon213_Then_correct) (=> (= (ControlFlow 0 233) 232) anon213_Else_correct)))))
(let ((anon212_Else_correct  (=> (= (MapType0Select Heap@9 arg_this@0 next_sibling) null) (=> (and (= Heap@11 Heap@9) (= (ControlFlow 0 235) 233)) anon54_correct))))
(let ((anon212_Then_correct  (=> (not (= (MapType0Select Heap@9 arg_this@0 next_sibling) null)) (=> (and (and (forall ((o_28 T@U) (f_32 T@U) ) (! (let ((B@@43 (FieldTypeInv1 (type f_32))))
(let ((A@@44 (FieldTypeInv0 (type f_32))))
 (=> (and (and (= (type o_28) RefType) (= (type f_32) (FieldType A@@44 B@@43))) (or (U_2_bool (MapType1Select (MapType0Select Heap@9 null (|tree#sm| arg_this@0)) o_28 f_32)) (U_2_bool (MapType1Select (MapType0Select Heap@9 null (|tree#sm| (MapType0Select Heap@9 arg_this@0 next_sibling))) o_28 f_32)))) (U_2_bool (MapType1Select newPMask@1 o_28 f_32)))))
 :qid |stdinbpl.1512:37|
 :skolemid |53|
 :pattern ( (MapType1Select newPMask@1 o_28 f_32))
)) (= Heap@10 (MapType0Store Heap@9 null (|tree#sm| arg_this@0) newPMask@1))) (and (= Heap@11 Heap@10) (= (ControlFlow 0 234) 233))) anon54_correct))))
(let ((anon211_Else_correct  (=> (and (= (MapType0Select Heap@7 arg_this@0 next_child) null) (= Heap@9 Heap@7)) (and (=> (= (ControlFlow 0 237) 234) anon212_Then_correct) (=> (= (ControlFlow 0 237) 235) anon212_Else_correct)))))
(let ((anon211_Then_correct  (=> (and (and (not (= (MapType0Select Heap@7 arg_this@0 next_child) null)) (forall ((o_27 T@U) (f_31 T@U) ) (! (let ((B@@44 (FieldTypeInv1 (type f_31))))
(let ((A@@45 (FieldTypeInv0 (type f_31))))
 (=> (and (and (= (type o_27) RefType) (= (type f_31) (FieldType A@@45 B@@44))) (or (U_2_bool (MapType1Select (MapType0Select Heap@7 null (|tree#sm| arg_this@0)) o_27 f_31)) (U_2_bool (MapType1Select (MapType0Select Heap@7 null (|tree#sm| (MapType0Select Heap@7 arg_this@0 next_child))) o_27 f_31)))) (U_2_bool (MapType1Select newPMask@0 o_27 f_31)))))
 :qid |stdinbpl.1504:37|
 :skolemid |52|
 :pattern ( (MapType1Select newPMask@0 o_27 f_31))
))) (and (= Heap@8 (MapType0Store Heap@7 null (|tree#sm| arg_this@0) newPMask@0)) (= Heap@9 Heap@8))) (and (=> (= (ControlFlow 0 236) 234) anon212_Then_correct) (=> (= (ControlFlow 0 236) 235) anon212_Else_correct)))))
(let ((anon50_correct  (=> (and (or (and (= (MapType0Select ExhaleHeap@0 arg_this@0 next_child) null) (= (MapType0Select ExhaleHeap@0 arg_this@0 next_sibling) null)) (and (not (= (MapType0Select ExhaleHeap@0 arg_this@0 next_child) null)) (not (= (MapType0Select ExhaleHeap@0 arg_this@0 next_sibling) null)))) (state ExhaleHeap@0 UnfoldingMask@7)) (=> (and (and (and (= (MapType0Select ExhaleHeap@0 arg_this@0 next_child) (MapType0Select ExhaleHeap@0 tmp_child@0 next_child)) (= (MapType0Select ExhaleHeap@0 arg_this@0 next_sibling) (MapType0Select ExhaleHeap@0 tmp_child@0 next_sibling))) (= Heap@5 (MapType0Store ExhaleHeap@0 null (|tree#sm| arg_this@0) (MapType1Store (MapType0Select ExhaleHeap@0 null (|tree#sm| arg_this@0)) arg_this@0 data (bool_2_U true))))) (and (= Heap@6 (MapType0Store Heap@5 null (|tree#sm| arg_this@0) (MapType1Store (MapType0Select Heap@5 null (|tree#sm| arg_this@0)) arg_this@0 next_child (bool_2_U true)))) (= Heap@7 (MapType0Store Heap@6 null (|tree#sm| arg_this@0) (MapType1Store (MapType0Select Heap@6 null (|tree#sm| arg_this@0)) arg_this@0 next_sibling (bool_2_U true)))))) (and (=> (= (ControlFlow 0 238) 236) anon211_Then_correct) (=> (= (ControlFlow 0 238) 237) anon211_Else_correct))))))
(let ((anon210_Else_correct  (=> (= (MapType0Select ExhaleHeap@0 arg_this@0 next_sibling) null) (=> (and (= UnfoldingMask@7 UnfoldingMask@5) (= (ControlFlow 0 240) 238)) anon50_correct))))
(let ((anon210_Then_correct  (=> (not (= (MapType0Select ExhaleHeap@0 arg_this@0 next_sibling) null)) (=> (and (= perm@16 (* FullPerm (/ (to_real 1) (to_real 2)))) (= UnfoldingMask@6 (MapType1Store UnfoldingMask@5 null (tree (MapType0Select ExhaleHeap@0 arg_this@0 next_sibling)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@5 null (tree (MapType0Select ExhaleHeap@0 arg_this@0 next_sibling)))) perm@16))))) (=> (and (and (InsidePredicate (tree arg_this@0) (MapType0Select ExhaleHeap@0 null (tree arg_this@0)) (tree (MapType0Select ExhaleHeap@0 arg_this@0 next_sibling)) (MapType0Select ExhaleHeap@0 null (tree (MapType0Select ExhaleHeap@0 arg_this@0 next_sibling)))) (state ExhaleHeap@0 UnfoldingMask@6)) (and (= UnfoldingMask@7 UnfoldingMask@6) (= (ControlFlow 0 239) 238))) anon50_correct)))))
(let ((anon209_Else_correct  (=> (and (= (MapType0Select ExhaleHeap@0 arg_this@0 next_child) null) (= UnfoldingMask@5 UnfoldingMask@3)) (and (=> (= (ControlFlow 0 242) 239) anon210_Then_correct) (=> (= (ControlFlow 0 242) 240) anon210_Else_correct)))))
(let ((anon209_Then_correct  (=> (and (not (= (MapType0Select ExhaleHeap@0 arg_this@0 next_child) null)) (= perm@15 (* FullPerm (/ (to_real 1) (to_real 2))))) (=> (and (and (= UnfoldingMask@4 (MapType1Store UnfoldingMask@3 null (tree (MapType0Select ExhaleHeap@0 arg_this@0 next_child)) (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@3 null (tree (MapType0Select ExhaleHeap@0 arg_this@0 next_child)))) perm@15)))) (InsidePredicate (tree arg_this@0) (MapType0Select ExhaleHeap@0 null (tree arg_this@0)) (tree (MapType0Select ExhaleHeap@0 arg_this@0 next_child)) (MapType0Select ExhaleHeap@0 null (tree (MapType0Select ExhaleHeap@0 arg_this@0 next_child))))) (and (state ExhaleHeap@0 UnfoldingMask@4) (= UnfoldingMask@5 UnfoldingMask@4))) (and (=> (= (ControlFlow 0 241) 239) anon210_Then_correct) (=> (= (ControlFlow 0 241) 240) anon210_Else_correct))))))
(let ((anon46_correct  (=> (= Mask@12 (MapType1Store Mask@11 null (tree arg_this@0) (real_2_U (- (U_2_real (MapType1Select Mask@11 null (tree arg_this@0))) perm@9)))) (=> (and (IdenticalOnKnownLocations Heap@2 ExhaleHeap@0 Mask@12) (= perm@10 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 243) (- 0 244)) (>= perm@10 NoPerm)) (=> (>= perm@10 NoPerm) (=> (and (and (= Mask@13 (MapType1Store Mask@12 null (tree arg_this@0) (real_2_U (+ (U_2_real (MapType1Select Mask@12 null (tree arg_this@0))) perm@10)))) (state ExhaleHeap@0 Mask@13)) (and (= Mask@14 (MapType1Store Mask@13 null (tree tmp_child@0) (real_2_U (+ (U_2_real (MapType1Select Mask@13 null (tree tmp_child@0))) FullPerm)))) (state ExhaleHeap@0 Mask@14))) (=> (and (and (and (and (|tree#trigger| ExhaleHeap@0 (tree arg_this@0)) (= (MapType0Select ExhaleHeap@0 null (tree arg_this@0)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@0 arg_this@0 data)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@0 arg_this@0 next_child)) (CombineFrames (FrameFragment (MapType0Select ExhaleHeap@0 arg_this@0 next_sibling)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@0 arg_this@0 next_child) null)) (MapType0Select ExhaleHeap@0 null (tree (MapType0Select ExhaleHeap@0 arg_this@0 next_child))) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select ExhaleHeap@0 arg_this@0 next_sibling) null)) (MapType0Select ExhaleHeap@0 null (tree (MapType0Select ExhaleHeap@0 arg_this@0 next_sibling))) EmptyFrame)))))))) (and (= perm@11 (/ (to_real 1) (to_real 2))) (= UnfoldingMask@0 (MapType1Store Mask@14 null (tree arg_this@0) (real_2_U (- (U_2_real (MapType1Select Mask@14 null (tree arg_this@0))) perm@11)))))) (and (and (= perm@12 (* FullPerm (/ (to_real 1) (to_real 2)))) (=> (> perm@12 NoPerm) (not (= arg_this@0 null)))) (and (= UnfoldingMask@1 (MapType1Store UnfoldingMask@0 arg_this@0 data (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@0 arg_this@0 data)) perm@12)))) (state ExhaleHeap@0 UnfoldingMask@1)))) (and (and (and (= perm@13 (* FullPerm (/ (to_real 1) (to_real 2)))) (=> (> perm@13 NoPerm) (not (= arg_this@0 null)))) (and (= UnfoldingMask@2 (MapType1Store UnfoldingMask@1 arg_this@0 next_child (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@1 arg_this@0 next_child)) perm@13)))) (state ExhaleHeap@0 UnfoldingMask@2))) (and (and (= perm@14 (* FullPerm (/ (to_real 1) (to_real 2)))) (=> (> perm@14 NoPerm) (not (= arg_this@0 null)))) (and (= UnfoldingMask@3 (MapType1Store UnfoldingMask@2 arg_this@0 next_sibling (real_2_U (+ (U_2_real (MapType1Select UnfoldingMask@2 arg_this@0 next_sibling)) perm@14)))) (state ExhaleHeap@0 UnfoldingMask@3))))) (and (=> (= (ControlFlow 0 243) 241) anon209_Then_correct) (=> (= (ControlFlow 0 243) 242) anon209_Else_correct))))))))))
(let ((anon208_Else_correct  (=> (and (= perm@9 NoPerm) (= (ControlFlow 0 247) 243)) anon46_correct)))
(let ((anon208_Then_correct  (=> (not (= perm@9 NoPerm)) (and (=> (= (ControlFlow 0 245) (- 0 246)) (<= perm@9 (U_2_real (MapType1Select Mask@11 null (tree arg_this@0))))) (=> (<= perm@9 (U_2_real (MapType1Select Mask@11 null (tree arg_this@0)))) (=> (= (ControlFlow 0 245) 243) anon46_correct))))))
(let ((anon207_Else_correct  (=> (not (and (= (MapType0Select Heap@2 this@@5 next_child) null) (= (MapType0Select Heap@2 this@@5 next_sibling) null))) (=> (and (U_2_bool (MapType0Select Heap@2 tmp_child $allocated)) (U_2_bool (MapType0Select Heap@2 tmp_sibling $allocated))) (and (=> (= (ControlFlow 0 248) (- 0 250)) (HasDirectPerm Mask@11 this@@5 next_child)) (=> (HasDirectPerm Mask@11 this@@5 next_child) (=> (and (= arg_this@0 (MapType0Select Heap@2 this@@5 next_child)) (= perm@9 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 248) (- 0 249)) (>= perm@9 NoPerm)) (=> (>= perm@9 NoPerm) (and (=> (= (ControlFlow 0 248) 245) anon208_Then_correct) (=> (= (ControlFlow 0 248) 247) anon208_Else_correct)))))))))))
(let ((anon207_Then_correct  (=> (and (= (MapType0Select Heap@2 this@@5 next_child) null) (= (MapType0Select Heap@2 this@@5 next_sibling) null)) (and (=> (= (ControlFlow 0 121) (- 0 123)) (= FullPerm (U_2_real (MapType1Select Mask@11 freshObj@0 next_child)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@11 freshObj@0 next_child))) (=> (and (= Heap@3 (MapType0Store Heap@2 freshObj@0 next_child null)) (state Heap@3 Mask@11)) (and (=> (= (ControlFlow 0 121) (- 0 122)) (= FullPerm (U_2_real (MapType1Select Mask@11 freshObj@0 next_sibling)))) (=> (= FullPerm (U_2_real (MapType1Select Mask@11 freshObj@0 next_sibling))) (=> (= Heap@4 (MapType0Store Heap@3 freshObj@0 next_sibling null)) (=> (and (and (state Heap@4 Mask@11) (= Mask@18 Mask@11)) (and (= Heap@64 Heap@4) (= (ControlFlow 0 121) 119))) anon121_correct))))))))))
(let ((anon206_Else_correct  (=> (not (= (MapType0Select Heap@2 this@@5 next_child) null)) (and (=> (= (ControlFlow 0 253) 121) anon207_Then_correct) (=> (= (ControlFlow 0 253) 248) anon207_Else_correct)))))
(let ((anon206_Then_correct  (=> (= (MapType0Select Heap@2 this@@5 next_child) null) (and (=> (= (ControlFlow 0 251) (- 0 252)) (HasDirectPerm Mask@11 this@@5 next_sibling)) (=> (HasDirectPerm Mask@11 this@@5 next_sibling) (and (=> (= (ControlFlow 0 251) 121) anon207_Then_correct) (=> (= (ControlFlow 0 251) 248) anon207_Else_correct)))))))
(let ((anon40_correct  (=> (or (and (= (MapType0Select Heap@2 this@@5 next_child) null) (= (MapType0Select Heap@2 this@@5 next_sibling) null)) (and (not (= (MapType0Select Heap@2 this@@5 next_child) null)) (not (= (MapType0Select Heap@2 this@@5 next_sibling) null)))) (=> (and (state Heap@2 Mask@11) (state Heap@2 Mask@11)) (and (=> (= (ControlFlow 0 254) (- 0 255)) (HasDirectPerm Mask@11 this@@5 next_child)) (=> (HasDirectPerm Mask@11 this@@5 next_child) (and (=> (= (ControlFlow 0 254) 251) anon206_Then_correct) (=> (= (ControlFlow 0 254) 253) anon206_Else_correct))))))))
(let ((anon205_Else_correct  (=> (= (MapType0Select Heap@2 this@@5 next_sibling) null) (=> (and (= Mask@11 Mask@9) (= (ControlFlow 0 258) 254)) anon40_correct))))
(let ((anon205_Then_correct  (=> (and (not (= (MapType0Select Heap@2 this@@5 next_sibling) null)) (= perm@8 (* FullPerm (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 256) (- 0 257)) (>= perm@8 NoPerm)) (=> (>= perm@8 NoPerm) (=> (= Mask@10 (MapType1Store Mask@9 null (tree (MapType0Select Heap@2 this@@5 next_sibling)) (real_2_U (+ (U_2_real (MapType1Select Mask@9 null (tree (MapType0Select Heap@2 this@@5 next_sibling)))) perm@8)))) (=> (and (and (InsidePredicate (tree this@@5) (MapType0Select Heap@2 null (tree this@@5)) (tree (MapType0Select Heap@2 this@@5 next_sibling)) (MapType0Select Heap@2 null (tree (MapType0Select Heap@2 this@@5 next_sibling)))) (state Heap@2 Mask@10)) (and (= Mask@11 Mask@10) (= (ControlFlow 0 256) 254))) anon40_correct)))))))
(let ((anon204_Else_correct  (=> (and (= (MapType0Select Heap@2 this@@5 next_child) null) (= Mask@9 Mask@7)) (and (=> (= (ControlFlow 0 261) 256) anon205_Then_correct) (=> (= (ControlFlow 0 261) 258) anon205_Else_correct)))))
(let ((anon204_Then_correct  (=> (and (not (= (MapType0Select Heap@2 this@@5 next_child) null)) (= perm@7 (* FullPerm (/ (to_real 1) (to_real 2))))) (and (=> (= (ControlFlow 0 259) (- 0 260)) (>= perm@7 NoPerm)) (=> (>= perm@7 NoPerm) (=> (and (and (= Mask@8 (MapType1Store Mask@7 null (tree (MapType0Select Heap@2 this@@5 next_child)) (real_2_U (+ (U_2_real (MapType1Select Mask@7 null (tree (MapType0Select Heap@2 this@@5 next_child)))) perm@7)))) (InsidePredicate (tree this@@5) (MapType0Select Heap@2 null (tree this@@5)) (tree (MapType0Select Heap@2 this@@5 next_child)) (MapType0Select Heap@2 null (tree (MapType0Select Heap@2 this@@5 next_child))))) (and (state Heap@2 Mask@8) (= Mask@9 Mask@8))) (and (=> (= (ControlFlow 0 259) 256) anon205_Then_correct) (=> (= (ControlFlow 0 259) 258) anon205_Else_correct))))))))
(let ((anon36_correct  (=> (= perm@4 (* FullPerm (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 262) (- 0 265)) (>= perm@4 NoPerm)) (=> (>= perm@4 NoPerm) (=> (and (and (=> (> perm@4 NoPerm) (not (= this@@5 null))) (= Mask@5 (MapType1Store Mask@4 this@@5 data (real_2_U (+ (U_2_real (MapType1Select Mask@4 this@@5 data)) perm@4))))) (and (state Heap@2 Mask@5) (= perm@5 (* FullPerm (/ (to_real 1) (to_real 2)))))) (and (=> (= (ControlFlow 0 262) (- 0 264)) (>= perm@5 NoPerm)) (=> (>= perm@5 NoPerm) (=> (and (and (=> (> perm@5 NoPerm) (not (= this@@5 null))) (= Mask@6 (MapType1Store Mask@5 this@@5 next_child (real_2_U (+ (U_2_real (MapType1Select Mask@5 this@@5 next_child)) perm@5))))) (and (state Heap@2 Mask@6) (= perm@6 (* FullPerm (/ (to_real 1) (to_real 2)))))) (and (=> (= (ControlFlow 0 262) (- 0 263)) (>= perm@6 NoPerm)) (=> (>= perm@6 NoPerm) (=> (=> (> perm@6 NoPerm) (not (= this@@5 null))) (=> (and (= Mask@7 (MapType1Store Mask@6 this@@5 next_sibling (real_2_U (+ (U_2_real (MapType1Select Mask@6 this@@5 next_sibling)) perm@6)))) (state Heap@2 Mask@7)) (and (=> (= (ControlFlow 0 262) 259) anon204_Then_correct) (=> (= (ControlFlow 0 262) 261) anon204_Else_correct)))))))))))))))
(let ((anon203_Else_correct  (=> (HasDirectPerm Mask@4 null (tree this@@5)) (=> (and (= Heap@2 Heap@0) (= (ControlFlow 0 267) 262)) anon36_correct))))
(let ((anon203_Then_correct  (=> (and (and (not (HasDirectPerm Mask@4 null (tree this@@5))) (= Heap@1 (MapType0Store Heap@0 null (tree this@@5) newVersion@0))) (and (= Heap@2 Heap@1) (= (ControlFlow 0 266) 262))) anon36_correct)))
(let ((anon34_correct  (=> (= Mask@4 (MapType1Store Mask@3 null (tree this@@5) (real_2_U (- (U_2_real (MapType1Select Mask@3 null (tree this@@5))) perm@3)))) (and (=> (= (ControlFlow 0 268) 266) anon203_Then_correct) (=> (= (ControlFlow 0 268) 267) anon203_Else_correct)))))
(let ((anon202_Else_correct  (=> (and (= perm@3 NoPerm) (= (ControlFlow 0 271) 268)) anon34_correct)))
(let ((anon202_Then_correct  (=> (not (= perm@3 NoPerm)) (and (=> (= (ControlFlow 0 269) (- 0 270)) (<= perm@3 (U_2_real (MapType1Select Mask@3 null (tree this@@5))))) (=> (<= perm@3 (U_2_real (MapType1Select Mask@3 null (tree this@@5)))) (=> (= (ControlFlow 0 269) 268) anon34_correct))))))
(let ((anon186_Else_correct  (=> (and (not (= freshObj@0 null)) (not (U_2_bool (MapType0Select Heap@@10 freshObj@0 $allocated)))) (=> (and (and (and (= Heap@0 (MapType0Store Heap@@10 freshObj@0 $allocated (bool_2_U true))) (= Mask@1 (MapType1Store Mask@0 freshObj@0 data (real_2_U (+ (U_2_real (MapType1Select Mask@0 freshObj@0 data)) FullPerm))))) (and (= Mask@2 (MapType1Store Mask@1 freshObj@0 next_child (real_2_U (+ (U_2_real (MapType1Select Mask@1 freshObj@0 next_child)) FullPerm)))) (= Mask@3 (MapType1Store Mask@2 freshObj@0 next_sibling (real_2_U (+ (U_2_real (MapType1Select Mask@2 freshObj@0 next_sibling)) FullPerm)))))) (and (and (state Heap@0 Mask@3) (|tree#trigger| Heap@0 (tree this@@5))) (and (= (MapType0Select Heap@0 null (tree this@@5)) (CombineFrames (FrameFragment (MapType0Select Heap@0 this@@5 data)) (CombineFrames (FrameFragment (MapType0Select Heap@0 this@@5 next_child)) (CombineFrames (FrameFragment (MapType0Select Heap@0 this@@5 next_sibling)) (CombineFrames (FrameFragment (ite (not (= (MapType0Select Heap@0 this@@5 next_child) null)) (MapType0Select Heap@0 null (tree (MapType0Select Heap@0 this@@5 next_child))) EmptyFrame)) (FrameFragment (ite (not (= (MapType0Select Heap@0 this@@5 next_sibling) null)) (MapType0Select Heap@0 null (tree (MapType0Select Heap@0 this@@5 next_sibling))) EmptyFrame))))))) (= perm@3 (/ (to_real 1) (to_real 2)))))) (and (=> (= (ControlFlow 0 272) (- 0 273)) (>= perm@3 NoPerm)) (=> (>= perm@3 NoPerm) (and (=> (= (ControlFlow 0 272) 269) anon202_Then_correct) (=> (= (ControlFlow 0 272) 271) anon202_Else_correct))))))))
(let ((anon0_correct  (=> (state Heap@@10 ZeroMask) (=> (and (U_2_bool (MapType0Select Heap@@10 this@@5 $allocated)) (= perm@0 (/ (to_real 1) (to_real 2)))) (and (=> (= (ControlFlow 0 327) (- 0 328)) (>= perm@0 NoPerm)) (=> (>= perm@0 NoPerm) (=> (= Mask@0 (MapType1Store ZeroMask null (tree this@@5) (real_2_U (+ (U_2_real (MapType1Select ZeroMask null (tree this@@5))) perm@0)))) (=> (and (state Heap@@10 Mask@0) (state Heap@@10 Mask@0)) (and (=> (= (ControlFlow 0 327) 324) anon186_Then_correct) (=> (= (ControlFlow 0 327) 272) anon186_Else_correct))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (= (ControlFlow 0 329) 327) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(assert (not (= (ControlFlow 0 11) (- 13))))
(check-sat)
(pop 1)
; Invalid
(get-info :rlimit)
